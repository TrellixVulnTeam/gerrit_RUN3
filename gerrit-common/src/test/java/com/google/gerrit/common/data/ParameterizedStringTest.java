begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ParameterizedStringTest
specifier|public
class|class
name|ParameterizedStringTest
block|{
annotation|@
name|Test
DECL|method|emptyString ()
specifier|public
name|void
name|emptyString
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|getRawPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asis1 ()
specifier|public
name|void
name|asis1
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
name|ParameterizedString
operator|.
name|asis
argument_list|(
literal|"${bar}c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"${bar}c"
argument_list|,
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${bar}c"
argument_list|,
name|p
operator|.
name|getRawPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"frobinator"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"${bar}c"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replace1 ()
specifier|public
name|void
name|replace1
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${bar}c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"${bar}c"
argument_list|,
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{0}c"
argument_list|,
name|p
operator|.
name|getRawPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"frobinator"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"frobinator"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"frobinatorc"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replace2 ()
specifier|public
name|void
name|replace2
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"a${bar}c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a${bar}c"
argument_list|,
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a{0}c"
argument_list|,
name|p
operator|.
name|getRawPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"frobinator"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"frobinator"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"afrobinatorc"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replace3 ()
specifier|public
name|void
name|replace3
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"a${bar}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a${bar}"
argument_list|,
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a{0}"
argument_list|,
name|p
operator|.
name|getRawPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"frobinator"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"frobinator"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"afrobinator"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replace4 ()
specifier|public
name|void
name|replace4
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"a${bar}c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a${bar}c"
argument_list|,
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a{0}c"
argument_list|,
name|p
operator|.
name|getRawPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ac"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToLowerCase ()
specifier|public
name|void
name|replaceToLowerCase
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toLowerCase}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToUpperCase ()
specifier|public
name|void
name|replaceToUpperCase
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toUpperCase}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceLocalName ()
specifier|public
name|void
name|replaceLocalName
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.localPart}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|undefinedFunctionName ()
specifier|public
name|void
name|undefinedFunctionName
parameter_list|()
block|{
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"hi, ${userName.toUpperCase},your eamil address is '${email.toLowerCase.localPart}'.right?"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"userName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"userName"
argument_list|,
literal|"firstName lastName"
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"email"
argument_list|,
literal|"FIRSTNAME.LASTNAME@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FIRSTNAME LASTNAME"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"firstname.lastname"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi, FIRSTNAME LASTNAME,your eamil address is 'firstname.lastname'.right?"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToUpperCaseToLowerCase ()
specifier|public
name|void
name|replaceToUpperCaseToLowerCase
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toUpperCase.toLowerCase}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToUpperCaseLocalName ()
specifier|public
name|void
name|replaceToUpperCaseLocalName
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toUpperCase.localPart}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToUpperCaseAnUndefinedMethod ()
specifier|public
name|void
name|replaceToUpperCaseAnUndefinedMethod
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toUpperCase.anUndefinedMethod}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceLocalNameToUpperCase ()
specifier|public
name|void
name|replaceLocalNameToUpperCase
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.localPart.toUpperCase}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceLocalNameToLowerCase ()
specifier|public
name|void
name|replaceLocalNameToLowerCase
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.localPart.toLowerCase}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceLocalNameAnUndefinedMethod ()
specifier|public
name|void
name|replaceLocalNameAnUndefinedMethod
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.localPart.anUndefinedMethod}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToLowerCaseToUpperCase ()
specifier|public
name|void
name|replaceToLowerCaseToUpperCase
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toLowerCase.toUpperCase}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FOO@EXAMPLE.COM"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToLowerCaseLocalName ()
specifier|public
name|void
name|replaceToLowerCaseLocalName
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toLowerCase.localPart}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceToLowerCaseAnUndefinedMethod ()
specifier|public
name|void
name|replaceToLowerCaseAnUndefinedMethod
parameter_list|()
block|{
specifier|final
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"${a.toLowerCase.anUndefinedMethod}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|a
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"foo@example.com"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"FOO@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|a
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo@example.com"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceSubmitTooltipWithVariables ()
specifier|public
name|void
name|replaceSubmitTooltipWithVariables
parameter_list|()
block|{
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"Submit patch set ${patchSet} into ${branch}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getParameterNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"patchSet"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"patchSet"
argument_list|,
literal|"42"
argument_list|,
literal|"branch"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
operator|.
name|bind
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|params
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|params
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|params
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Submit patch set 42 into foo"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceSubmitTooltipWithoutVariables ()
specifier|public
name|void
name|replaceSubmitTooltipWithoutVariables
parameter_list|()
block|{
name|ParameterizedString
name|p
init|=
operator|new
name|ParameterizedString
argument_list|(
literal|"Submit patch set 40 into master"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"patchSet"
argument_list|,
literal|"42"
argument_list|,
literal|"branch"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|bind
argument_list|(
name|params
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Submit patch set 40 into master"
argument_list|,
name|p
operator|.
name|replace
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

