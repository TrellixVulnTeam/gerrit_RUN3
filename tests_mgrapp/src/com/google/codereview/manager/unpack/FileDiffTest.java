begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UploadPatchsetFile
operator|.
name|UploadPatchsetFileRequest
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_class
DECL|class|FileDiffTest
specifier|public
class|class
name|FileDiffTest
extends|extends
name|TestCase
block|{
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
specifier|final
name|FileDiff
name|fd
init|=
operator|new
name|FileDiff
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|fd
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fd
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|MODIFY
argument_list|,
name|fd
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|fd
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBaseId ()
specifier|public
name|void
name|testBaseId
parameter_list|()
block|{
specifier|final
name|ObjectId
name|id1
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"fc5ac44497e0548c32506b9c584248fc49bb9f97"
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|id2
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"8abf2492d8c5228192a3cba5528e47b3a4bb87e0"
argument_list|)
decl_stmt|;
specifier|final
name|FileDiff
name|fd
init|=
operator|new
name|FileDiff
argument_list|()
decl_stmt|;
name|fd
operator|.
name|setBaseId
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|id1
argument_list|,
name|fd
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setBaseId
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|id2
argument_list|,
name|fd
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilename ()
specifier|public
name|void
name|testFilename
parameter_list|()
block|{
specifier|final
name|FileDiff
name|fd
init|=
operator|new
name|FileDiff
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name1
init|=
literal|"foo"
decl_stmt|;
specifier|final
name|String
name|name2
init|=
literal|"foo/bar/baz"
decl_stmt|;
name|fd
operator|.
name|setFilename
argument_list|(
name|name1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name1
argument_list|,
name|fd
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFilename
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|name2
argument_list|,
name|fd
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatus ()
specifier|public
name|void
name|testStatus
parameter_list|()
block|{
specifier|final
name|FileDiff
name|fd
init|=
operator|new
name|FileDiff
argument_list|()
decl_stmt|;
name|fd
operator|.
name|setStatus
argument_list|(
name|StatusType
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|ADD
argument_list|,
name|fd
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setStatus
argument_list|(
name|StatusType
operator|.
name|MODIFY
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|MODIFY
argument_list|,
name|fd
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setStatus
argument_list|(
name|StatusType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|DELETE
argument_list|,
name|fd
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPatchBody ()
specifier|public
name|void
name|testPatchBody
parameter_list|()
block|{
specifier|final
name|FileDiff
name|fd
init|=
operator|new
name|FileDiff
argument_list|()
decl_stmt|;
specifier|final
name|String
name|n1
init|=
literal|"diff --git a/foo b/foo"
decl_stmt|;
specifier|final
name|String
name|n2
init|=
literal|"--- a/foo"
decl_stmt|;
specifier|final
name|String
name|n3
init|=
literal|"+++ b/foo"
decl_stmt|;
specifier|final
name|String
name|n4
init|=
literal|"@@ -20,7 + 20,7 @@"
decl_stmt|;
name|fd
operator|.
name|appendLine
argument_list|(
name|toBytes
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|appendLine
argument_list|(
name|toBytes
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|appendLine
argument_list|(
name|toBytes
argument_list|(
name|n3
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|appendLine
argument_list|(
name|toBytes
argument_list|(
name|n4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|n1
operator|+
literal|"\n"
operator|+
name|n2
operator|+
literal|"\n"
operator|+
name|n3
operator|+
literal|"\n"
operator|+
name|n4
operator|+
literal|"\n"
argument_list|,
name|fd
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toBytes (final String s)
specifier|private
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
specifier|final
name|String
name|enc
init|=
literal|"UTF-8"
decl_stmt|;
try|try
block|{
return|return
name|s
operator|.
name|getBytes
argument_list|(
name|enc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No "
operator|+
name|enc
operator|+
literal|" support?"
argument_list|,
name|uee
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

