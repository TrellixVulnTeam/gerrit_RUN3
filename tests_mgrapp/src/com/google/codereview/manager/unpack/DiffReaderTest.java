begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|TrashTestCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UploadPatchsetFile
operator|.
name|UploadPatchsetFileRequest
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|DiffReaderTest
specifier|public
class|class
name|DiffReaderTest
extends|extends
name|TrashTestCase
block|{
DECL|field|db
specifier|private
name|Repository
name|db
decl_stmt|;
DECL|field|writer
specifier|private
name|ObjectWriter
name|writer
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|db
operator|=
operator|new
name|Repository
argument_list|(
operator|new
name|File
argument_list|(
name|tempRoot
argument_list|,
literal|".git"
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|create
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|ObjectWriter
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddOneTextFile_RootCommit ()
specifier|public
name|void
name|testAddOneTextFile_RootCommit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Tree
name|top
init|=
operator|new
name|Tree
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|blobId
init|=
name|blob
argument_list|(
literal|"a\nb\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|addFile
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setId
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|c
init|=
name|commit
argument_list|(
name|top
argument_list|)
decl_stmt|;
specifier|final
name|DiffReader
name|dr
init|=
operator|new
name|DiffReader
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
specifier|final
name|FileDiff
name|foo
init|=
name|dr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|foo
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|ADD
argument_list|,
name|foo
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|foo
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"diff --git a/foo b/foo\n"
operator|+
literal|"new file mode 100644\n"
operator|+
literal|"index "
operator|+
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|".."
operator|+
name|blobId
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"--- /dev/null\n"
operator|+
literal|"+++ b/foo\n"
operator|+
literal|"@@ -0,0 +1,2 @@\n"
operator|+
literal|"+a\n"
operator|+
literal|"+b\n"
argument_list|,
name|foo
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAddOneTextFile_ExistingTree ()
specifier|public
name|void
name|testAddOneTextFile_ExistingTree
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Tree
name|top
init|=
operator|new
name|Tree
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|final
name|RevCommit
name|parent
init|=
name|commit
argument_list|(
name|top
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|blobId
init|=
name|blob
argument_list|(
literal|"a\nb\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|addFile
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setId
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|c
init|=
name|commit
argument_list|(
name|top
argument_list|,
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|DiffReader
name|dr
init|=
operator|new
name|DiffReader
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
specifier|final
name|FileDiff
name|foo
init|=
name|dr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|foo
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|ADD
argument_list|,
name|foo
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|foo
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"diff --git a/foo b/foo\n"
operator|+
literal|"new file mode 100644\n"
operator|+
literal|"index "
operator|+
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|".."
operator|+
name|blobId
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"--- /dev/null\n"
operator|+
literal|"+++ b/foo\n"
operator|+
literal|"@@ -0,0 +1,2 @@\n"
operator|+
literal|"+a\n"
operator|+
literal|"+b\n"
argument_list|,
name|foo
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeleteOneTextFile ()
specifier|public
name|void
name|testDeleteOneTextFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Tree
name|top
init|=
operator|new
name|Tree
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|blobId
init|=
name|blob
argument_list|(
literal|"a\nb\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|addFile
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setId
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|parent
init|=
name|commit
argument_list|(
name|top
argument_list|)
decl_stmt|;
name|top
operator|.
name|findBlobMember
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
specifier|final
name|RevCommit
name|c
init|=
name|commit
argument_list|(
name|top
argument_list|,
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|DiffReader
name|dr
init|=
operator|new
name|DiffReader
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
specifier|final
name|FileDiff
name|foo
init|=
name|dr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|foo
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|DELETE
argument_list|,
name|foo
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blobId
argument_list|,
name|foo
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"diff --git a/foo b/foo\n"
operator|+
literal|"deleted file mode 100644\n"
operator|+
literal|"index "
operator|+
name|blobId
operator|.
name|name
argument_list|()
operator|+
literal|".."
operator|+
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"--- a/foo\n"
operator|+
literal|"+++ /dev/null\n"
operator|+
literal|"@@ -1,2 +0,0 @@\n"
operator|+
literal|"-a\n"
operator|+
literal|"-b\n"
argument_list|,
name|foo
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testModifyTwoTextFiles ()
specifier|public
name|void
name|testModifyTwoTextFiles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Tree
name|top
init|=
operator|new
name|Tree
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|barBaseId
init|=
name|blob
argument_list|(
literal|"a\nc\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|addFile
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setId
argument_list|(
name|barBaseId
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|fooBaseId
init|=
name|blob
argument_list|(
literal|"a\nb\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|addFile
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setId
argument_list|(
name|fooBaseId
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|parent
init|=
name|commit
argument_list|(
name|top
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|barNewId
init|=
name|blob
argument_list|(
literal|"a\nd\nc\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|findBlobMember
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setId
argument_list|(
name|barNewId
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|fooNewId
init|=
name|blob
argument_list|(
literal|"a\nc\nb\n"
argument_list|)
decl_stmt|;
name|top
operator|.
name|findBlobMember
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setId
argument_list|(
name|fooNewId
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|c
init|=
name|commit
argument_list|(
name|top
argument_list|,
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|DiffReader
name|dr
init|=
operator|new
name|DiffReader
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
specifier|final
name|FileDiff
name|bar
init|=
name|dr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|bar
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|MODIFY
argument_list|,
name|bar
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|barBaseId
argument_list|,
name|bar
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"diff --git a/bar b/bar\n"
operator|+
literal|"index "
operator|+
name|barBaseId
operator|.
name|name
argument_list|()
operator|+
literal|".."
operator|+
name|barNewId
operator|.
name|name
argument_list|()
operator|+
literal|" 100644\n"
operator|+
literal|"--- a/bar\n"
operator|+
literal|"+++ b/bar\n"
operator|+
literal|"@@ -1,2 +1,3 @@\n"
operator|+
literal|" a\n"
operator|+
literal|"+d\n"
operator|+
literal|" c\n"
argument_list|,
name|bar
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FileDiff
name|foo
init|=
name|dr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|foo
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|MODIFY
argument_list|,
name|foo
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooBaseId
argument_list|,
name|foo
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"diff --git a/foo b/foo\n"
operator|+
literal|"index "
operator|+
name|fooBaseId
operator|.
name|name
argument_list|()
operator|+
literal|".."
operator|+
name|fooNewId
operator|.
name|name
argument_list|()
operator|+
literal|" 100644\n"
operator|+
literal|"--- a/foo\n"
operator|+
literal|"+++ b/foo\n"
operator|+
literal|"@@ -1,2 +1,3 @@\n"
operator|+
literal|" a\n"
operator|+
literal|"+c\n"
operator|+
literal|" b\n"
argument_list|,
name|foo
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAddBinaryFile ()
specifier|public
name|void
name|testAddBinaryFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Tree
name|top
init|=
operator|new
name|Tree
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|blobId
init|=
name|blob
argument_list|(
literal|"\0\1\2\0\1\2\0\1\2"
argument_list|)
decl_stmt|;
name|top
operator|.
name|addFile
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setId
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
specifier|final
name|RevCommit
name|c
init|=
name|commit
argument_list|(
name|top
argument_list|)
decl_stmt|;
specifier|final
name|DiffReader
name|dr
init|=
operator|new
name|DiffReader
argument_list|(
name|db
argument_list|,
name|c
argument_list|)
decl_stmt|;
specifier|final
name|FileDiff
name|foo
init|=
name|dr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|foo
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|StatusType
operator|.
name|ADD
argument_list|,
name|foo
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|foo
operator|.
name|getBaseId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"diff --git a/foo b/foo\n"
operator|+
literal|"new file mode 100644\n"
operator|+
literal|"index "
operator|+
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|".."
operator|+
name|blobId
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Binary files /dev/null and b/foo differ\n"
argument_list|,
name|foo
operator|.
name|getPatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|blob (final String content)
specifier|private
name|ObjectId
name|blob
parameter_list|(
specifier|final
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writer
operator|.
name|writeBlob
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|commit (final Tree top, final RevCommit... parents)
specifier|private
name|RevCommit
name|commit
parameter_list|(
specifier|final
name|Tree
name|top
parameter_list|,
specifier|final
name|RevCommit
modifier|...
name|parents
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Commit
name|c
init|=
operator|new
name|Commit
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTreeId
argument_list|(
name|writer
operator|.
name|writeTree
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ObjectId
name|parentIds
index|[]
init|=
operator|new
name|ObjectId
index|[
name|parents
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parentIds
index|[
name|i
index|]
operator|=
name|parents
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|setParentIds
argument_list|(
name|parentIds
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAuthor
argument_list|(
operator|new
name|PersonIdent
argument_list|(
literal|"A U Thor<a@example.com> 1 +0000"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCommitter
argument_list|(
name|c
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCommitId
argument_list|(
name|writer
operator|.
name|writeCommit
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|final
name|RevCommit
name|r
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|c
operator|.
name|getCommitId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|RevCommit
name|p
range|:
name|r
operator|.
name|getParents
argument_list|()
control|)
block|{
name|rw
operator|.
name|parse
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

