begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|TrashTestCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|NextReceivedBundleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|NextReceivedBundleResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UpdateReceivedBundle
operator|.
name|UpdateReceivedBundleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UpdateReceivedBundle
operator|.
name|UpdateReceivedBundleResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
operator|.
name|MockRpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
DECL|class|ReceivedBundleUnpackerTest
specifier|public
class|class
name|ReceivedBundleUnpackerTest
extends|extends
name|TrashTestCase
block|{
DECL|field|rpc
specifier|private
name|MockRpcChannel
name|rpc
decl_stmt|;
DECL|field|repoCache
specifier|private
name|RepositoryCache
name|repoCache
decl_stmt|;
DECL|field|server
specifier|private
name|Backend
name|server
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|rpc
operator|=
operator|new
name|MockRpcChannel
argument_list|()
expr_stmt|;
name|repoCache
operator|=
operator|new
name|RepositoryCache
argument_list|(
name|tempRoot
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Backend
argument_list|(
name|repoCache
argument_list|,
name|rpc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
operator|new
name|Repository
argument_list|(
operator|new
name|File
argument_list|(
name|tempRoot
argument_list|,
literal|"foo.git"
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|testNextReceivedBundle_EmptyQueue ()
specifier|public
name|void
name|testNextReceivedBundle_EmptyQueue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ReceivedBundleUnpacker
name|rbu
init|=
name|newRBU
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NextReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|NextReceivedBundleRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|NextReceivedBundleResponse
operator|.
name|Builder
name|r
init|=
name|NextReceivedBundleResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|setStatusCode
argument_list|(
name|NextReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|QUEUE_EMPTY
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|r
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rbu
operator|.
name|run
argument_list|()
expr_stmt|;
name|rpc
operator|.
name|assertAllCallsMade
argument_list|()
expr_stmt|;
block|}
DECL|method|testNextReceivedBundle_GetBundle ()
specifier|public
name|void
name|testNextReceivedBundle_GetBundle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|bundleKey
init|=
literal|"bundle-key-abcd123efg"
decl_stmt|;
specifier|final
name|NextReceivedBundleResponse
name|nrb
index|[]
init|=
operator|new
name|NextReceivedBundleResponse
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|UpdateReceivedBundleRequest
name|urbr
index|[]
init|=
operator|new
name|UpdateReceivedBundleRequest
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|ReceivedBundleUnpacker
name|rbu
init|=
operator|new
name|ReceivedBundleUnpacker
argument_list|(
name|server
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|UpdateReceivedBundleRequest
name|unpackImpl
parameter_list|(
specifier|final
name|NextReceivedBundleResponse
name|rsp
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"unpackImpl only after bundle available"
argument_list|,
name|nrb
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|nrb
index|[
literal|0
index|]
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
specifier|final
name|UpdateReceivedBundleRequest
operator|.
name|Builder
name|r
init|=
name|UpdateReceivedBundleRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|setBundleKey
argument_list|(
name|bundleKey
argument_list|)
expr_stmt|;
name|r
operator|.
name|setStatusCode
argument_list|(
name|UpdateReceivedBundleRequest
operator|.
name|CodeType
operator|.
name|UNPACKED_OK
argument_list|)
expr_stmt|;
name|urbr
index|[
literal|0
index|]
operator|=
name|r
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|urbr
index|[
literal|0
index|]
return|;
block|}
block|}
decl_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NextReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|NextReceivedBundleRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|NextReceivedBundleResponse
operator|.
name|Builder
name|r
init|=
name|NextReceivedBundleResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|setStatusCode
argument_list|(
name|NextReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|BUNDLE_AVAILABLE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBundleKey
argument_list|(
name|bundleKey
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBundleData
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDestProject
argument_list|(
literal|"foo.git"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDestProjectKey
argument_list|(
literal|"project:foo.git"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDestBranchKey
argument_list|(
literal|"branch:refs/heads/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOwner
argument_list|(
literal|"author@example.com"
argument_list|)
expr_stmt|;
name|nrb
index|[
literal|0
index|]
operator|=
name|r
operator|.
name|build
argument_list|()
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|nrb
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"UpdateReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|urbr
index|[
literal|0
index|]
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|UpdateReceivedBundleResponse
operator|.
name|Builder
name|r
init|=
name|UpdateReceivedBundleResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|setStatusCode
argument_list|(
name|UpdateReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|UPDATED
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|r
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NextReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|NextReceivedBundleRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
specifier|final
name|NextReceivedBundleResponse
operator|.
name|Builder
name|r
init|=
name|NextReceivedBundleResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|setStatusCode
argument_list|(
name|NextReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|QUEUE_EMPTY
argument_list|)
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|r
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rbu
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|nrb
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|urbr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|assertAllCallsMade
argument_list|()
expr_stmt|;
block|}
DECL|method|testNextReceivedBundle_RpcFailure ()
specifier|public
name|void
name|testNextReceivedBundle_RpcFailure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ReceivedBundleUnpacker
name|rbu
init|=
name|newRBU
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NextReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setFailed
argument_list|(
literal|"mock failure"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rbu
operator|.
name|run
argument_list|()
expr_stmt|;
name|rpc
operator|.
name|assertAllCallsMade
argument_list|()
expr_stmt|;
block|}
DECL|method|testNextReceivedBundle_RuntimeException ()
specifier|public
name|void
name|testNextReceivedBundle_RuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test-a-message-win-a-prize"
decl_stmt|;
specifier|final
name|ReceivedBundleUnpacker
name|rbu
init|=
name|newRBU
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NextReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|rbu
operator|.
name|run
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Unpacker did not rethrow an unexpected runtime exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rpc
operator|.
name|assertAllCallsMade
argument_list|()
expr_stmt|;
block|}
DECL|method|testNextReceivedBundle_RuntimeError ()
specifier|public
name|void
name|testNextReceivedBundle_RuntimeError
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|msg
init|=
literal|"test-a-message-win-a-prize"
decl_stmt|;
specifier|final
name|ReceivedBundleUnpacker
name|rbu
init|=
name|newRBU
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|add
argument_list|(
operator|new
name|RpcChannel
argument_list|()
block|{
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NextReceivedBundle"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|rbu
operator|.
name|run
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Unpacker did not rethrow an unexpected OutOfMemoryError"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|re
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rpc
operator|.
name|assertAllCallsMade
argument_list|()
expr_stmt|;
block|}
DECL|method|newRBU ()
specifier|private
name|ReceivedBundleUnpacker
name|newRBU
parameter_list|()
block|{
return|return
operator|new
name|ReceivedBundleUnpacker
argument_list|(
name|server
argument_list|)
return|;
block|}
block|}
end_class

end_unit

