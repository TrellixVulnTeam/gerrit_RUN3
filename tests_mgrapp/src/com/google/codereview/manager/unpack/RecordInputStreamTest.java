begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|RecordInputStreamTest
specifier|public
class|class
name|RecordInputStreamTest
extends|extends
name|TestCase
block|{
DECL|method|testEmptyStream ()
specifier|public
name|void
name|testEmptyStream
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadOneByte ()
specifier|public
name|void
name|testReadOneByte
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|exp
init|=
literal|"abc"
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
name|exp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadBlockOffset0 ()
specifier|public
name|void
name|testReadBlockOffset0
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|exp
init|=
literal|"abc"
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
name|exp
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|act
init|=
operator|new
name|byte
index|[
name|exp
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|act
operator|.
name|length
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|act
argument_list|,
literal|0
argument_list|,
name|act
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|act
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|act
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|act
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|act
argument_list|,
literal|0
argument_list|,
name|act
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadBlockOffset1 ()
specifier|public
name|void
name|testReadBlockOffset1
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|exp
init|=
literal|"abc"
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
name|exp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|act
init|=
operator|new
name|byte
index|[
name|exp
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|act
operator|.
name|length
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|act
argument_list|,
literal|0
argument_list|,
name|act
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|act
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|act
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|act
argument_list|,
literal|0
argument_list|,
name|act
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadRecord_SeparatorOnly ()
specifier|public
name|void
name|testReadRecord_SeparatorOnly
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|rec1
init|=
literal|"foo"
decl_stmt|;
specifier|final
name|String
name|rec2
init|=
literal|"bar"
decl_stmt|;
specifier|final
name|char
name|sep
init|=
literal|'\0'
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
name|rec1
operator|+
name|sep
operator|+
name|rec2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toBytes
argument_list|(
name|rec1
argument_list|)
argument_list|,
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toBytes
argument_list|(
name|rec2
argument_list|)
argument_list|,
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadRecord_Terminated ()
specifier|public
name|void
name|testReadRecord_Terminated
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|rec1
init|=
literal|"foo"
decl_stmt|;
specifier|final
name|String
name|rec2
init|=
literal|"bar"
decl_stmt|;
specifier|final
name|char
name|sep
init|=
literal|'\0'
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
name|rec1
operator|+
name|sep
operator|+
name|rec2
operator|+
name|sep
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toBytes
argument_list|(
name|rec1
argument_list|)
argument_list|,
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|toBytes
argument_list|(
name|rec2
argument_list|)
argument_list|,
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadRecord_EmptyRecords ()
specifier|public
name|void
name|testReadRecord_EmptyRecords
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|char
name|sep
init|=
literal|'\0'
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
literal|""
operator|+
name|sep
operator|+
literal|""
operator|+
name|sep
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadRecord_PartialRecordInBuffer ()
specifier|public
name|void
name|testReadRecord_PartialRecordInBuffer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|huge
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|final
name|StringBuilder
name|temp
init|=
operator|new
name|StringBuilder
argument_list|(
name|huge
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|huge
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|.
name|append
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
block|}
specifier|final
name|char
name|sep
init|=
literal|'\n'
decl_stmt|;
specifier|final
name|String
name|ts
init|=
name|temp
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|RecordInputStream
name|in
init|=
name|b
argument_list|(
name|ts
operator|+
literal|"1"
operator|+
name|sep
operator|+
name|ts
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|+
literal|"1"
argument_list|,
name|toString
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|+
literal|"2"
argument_list|,
name|toString
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readRecord
argument_list|(
name|sep
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|b (final String s)
specifier|private
specifier|static
name|RecordInputStream
name|b
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|RecordInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|toBytes
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toBytes (final String s)
specifier|private
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
specifier|final
name|String
name|enc
init|=
literal|"UTF-8"
decl_stmt|;
try|try
block|{
return|return
name|s
operator|.
name|getBytes
argument_list|(
name|enc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No "
operator|+
name|enc
operator|+
literal|" support?"
argument_list|,
name|uee
argument_list|)
throw|;
block|}
block|}
DECL|method|toString (final byte[] b)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
specifier|final
name|String
name|enc
init|=
literal|"UTF-8"
decl_stmt|;
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|,
name|enc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No "
operator|+
name|enc
operator|+
literal|" support?"
argument_list|,
name|uee
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

