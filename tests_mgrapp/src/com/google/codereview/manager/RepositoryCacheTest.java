begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|TrashTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
DECL|class|RepositoryCacheTest
specifier|public
class|class
name|RepositoryCacheTest
extends|extends
name|TrashTestCase
block|{
DECL|method|testCreateCache ()
specifier|public
name|void
name|testCreateCache
parameter_list|()
block|{
specifier|final
name|RepositoryCache
name|rc
init|=
operator|new
name|RepositoryCache
argument_list|(
name|tempRoot
argument_list|)
decl_stmt|;
block|}
DECL|method|testLookupInvalidNames ()
specifier|public
name|void
name|testLookupInvalidNames
parameter_list|()
block|{
specifier|final
name|RepositoryCache
name|rc
init|=
operator|new
name|RepositoryCache
argument_list|(
name|tempRoot
argument_list|)
decl_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"^"
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"../foo"
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"bar/../foo"
argument_list|)
expr_stmt|;
name|assertInvalidRepository
argument_list|(
name|rc
argument_list|,
literal|"bar\\..\\foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalidRepository (final RepositoryCache rc, final String n)
specifier|private
name|void
name|assertInvalidRepository
parameter_list|(
specifier|final
name|RepositoryCache
name|rc
parameter_list|,
specifier|final
name|String
name|n
parameter_list|)
block|{
try|try
block|{
name|rc
operator|.
name|get
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cache accepted name "
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|err
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|n
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLookupNotCreatedRepository ()
specifier|public
name|void
name|testLookupNotCreatedRepository
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
literal|"test.git"
decl_stmt|;
specifier|final
name|RepositoryCache
name|rc
init|=
operator|new
name|RepositoryCache
argument_list|(
name|tempRoot
argument_list|)
decl_stmt|;
try|try
block|{
name|rc
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|err
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|name
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLookupExistingEmptyRepository ()
specifier|public
name|void
name|testLookupExistingEmptyRepository
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RepositoryCache
name|rc
init|=
operator|new
name|RepositoryCache
argument_list|(
name|tempRoot
argument_list|)
decl_stmt|;
comment|// Create after the cache is built, to test creation-on-the-fly.
comment|//
specifier|final
name|String
index|[]
name|names
init|=
block|{
literal|"test.git"
block|,
literal|"foo/bar/test.git"
block|}
decl_stmt|;
specifier|final
name|File
index|[]
name|gitdir
init|=
operator|new
name|File
index|[
name|names
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gitdir
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|tempRoot
argument_list|,
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
specifier|final
name|Repository
name|r
init|=
operator|new
name|Repository
argument_list|(
name|gitdir
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|r
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|gitdir
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Repository
index|[]
name|cached
init|=
operator|new
name|Repository
index|[
name|names
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cached
index|[
name|i
index|]
operator|=
name|rc
operator|.
name|get
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cached
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gitdir
index|[
name|i
index|]
argument_list|,
name|cached
index|[
name|i
index|]
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
name|cached
index|[
name|i
index|]
argument_list|,
name|rc
operator|.
name|get
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

