begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.index
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeSchemaDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|GerritIndexStatus
specifier|public
class|class
name|GerritIndexStatus
block|{
DECL|field|SECTION
specifier|private
specifier|static
specifier|final
name|String
name|SECTION
init|=
literal|"index"
decl_stmt|;
DECL|field|KEY_READY
specifier|private
specifier|static
specifier|final
name|String
name|KEY_READY
init|=
literal|"ready"
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|FileBasedConfig
name|cfg
decl_stmt|;
DECL|method|GerritIndexStatus (SitePaths sitePaths)
specifier|public
name|GerritIndexStatus
parameter_list|(
name|SitePaths
name|sitePaths
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
name|cfg
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|sitePaths
operator|.
name|index_dir
operator|.
name|resolve
argument_list|(
literal|"gerrit_index.config"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|detect
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|load
argument_list|()
expr_stmt|;
name|convertLegacyConfig
argument_list|()
expr_stmt|;
block|}
DECL|method|setReady (String indexName, int version, boolean ready)
specifier|public
name|void
name|setReady
parameter_list|(
name|String
name|indexName
parameter_list|,
name|int
name|version
parameter_list|,
name|boolean
name|ready
parameter_list|)
block|{
name|cfg
operator|.
name|setBoolean
argument_list|(
name|SECTION
argument_list|,
name|indexDirName
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
argument_list|,
name|KEY_READY
argument_list|,
name|ready
argument_list|)
expr_stmt|;
block|}
DECL|method|getReady (String indexName, int version)
specifier|public
name|boolean
name|getReady
parameter_list|(
name|String
name|indexName
parameter_list|,
name|int
name|version
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
name|SECTION
argument_list|,
name|indexDirName
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
argument_list|,
name|KEY_READY
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|IOException
block|{
name|cfg
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
DECL|method|convertLegacyConfig ()
specifier|private
name|void
name|convertLegacyConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
comment|// Convert legacy [index "25"] to modern [index "changes_0025"].
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|SECTION
argument_list|)
control|)
block|{
name|Integer
name|v
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|subsection
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|String
name|ready
init|=
name|cfg
operator|.
name|getString
argument_list|(
name|SECTION
argument_list|,
name|subsection
argument_list|,
name|KEY_READY
argument_list|)
decl_stmt|;
if|if
condition|(
name|ready
operator|!=
literal|null
condition|)
block|{
name|dirty
operator|=
literal|false
expr_stmt|;
name|cfg
operator|.
name|unset
argument_list|(
name|SECTION
argument_list|,
name|subsection
argument_list|,
name|KEY_READY
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION
argument_list|,
name|indexDirName
argument_list|(
name|ChangeSchemaDefinitions
operator|.
name|NAME
argument_list|,
name|v
argument_list|)
argument_list|,
name|KEY_READY
argument_list|,
name|ready
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dirty
condition|)
block|{
name|cfg
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|indexDirName (String indexName, int version)
specifier|private
specifier|static
name|String
name|indexDirName
parameter_list|(
name|String
name|indexName
parameter_list|,
name|int
name|version
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s_%04d"
argument_list|,
name|indexName
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
end_class

end_unit

