begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.reviewdb.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|CompoundKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|StringKey
import|;
end_import

begin_comment
comment|/** An {@link Account} interested in a {@link Project}. */
end_comment

begin_class
DECL|class|AccountProjectWatch
specifier|public
specifier|final
class|class
name|AccountProjectWatch
block|{
DECL|enum|NotifyType
specifier|public
enum|enum
name|NotifyType
block|{
DECL|enumConstant|NEW_CHANGES
DECL|enumConstant|ALL_COMMENTS
DECL|enumConstant|SUBMITTED_CHANGES
name|NEW_CHANGES
block|,
name|ALL_COMMENTS
block|,
name|SUBMITTED_CHANGES
block|}
DECL|field|FILTER_ALL
specifier|public
specifier|static
specifier|final
name|String
name|FILTER_ALL
init|=
literal|"*"
decl_stmt|;
DECL|class|Key
specifier|public
specifier|static
class|class
name|Key
extends|extends
name|CompoundKey
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|1
argument_list|)
DECL|field|accountId
specifier|protected
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|2
argument_list|)
DECL|field|projectName
specifier|protected
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|3
argument_list|)
DECL|field|filter
specifier|protected
name|Filter
name|filter
decl_stmt|;
DECL|method|Key ()
specifier|protected
name|Key
parameter_list|()
block|{
name|accountId
operator|=
operator|new
name|Account
operator|.
name|Id
argument_list|()
expr_stmt|;
name|projectName
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|Filter
argument_list|()
expr_stmt|;
block|}
DECL|method|Key (Account.Id a, Project.NameKey g, String f)
specifier|public
name|Key
parameter_list|(
name|Account
operator|.
name|Id
name|a
parameter_list|,
name|Project
operator|.
name|NameKey
name|g
parameter_list|,
name|String
name|f
parameter_list|)
block|{
name|accountId
operator|=
name|a
expr_stmt|;
name|projectName
operator|=
name|g
expr_stmt|;
name|filter
operator|=
operator|new
name|Filter
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParentKey ()
specifier|public
name|Account
operator|.
name|Id
name|getParentKey
parameter_list|()
block|{
return|return
name|accountId
return|;
block|}
DECL|method|getProjectName ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|projectName
return|;
block|}
DECL|method|getFilter ()
specifier|public
name|Filter
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
annotation|@
name|Override
DECL|method|members ()
specifier|public
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
index|[]
name|members
parameter_list|()
block|{
return|return
operator|new
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|projectName
operator|,
name|filter
block|}
empty_stmt|;
block|}
block|}
DECL|class|Filter
specifier|public
specifier|static
class|class
name|Filter
extends|extends
name|StringKey
argument_list|<
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|1
argument_list|)
DECL|field|filter
specifier|protected
name|String
name|filter
decl_stmt|;
DECL|method|Filter ()
specifier|protected
name|Filter
parameter_list|()
block|{     }
DECL|method|Filter (String f)
specifier|public
name|Filter
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|filter
operator|=
name|f
operator|!=
literal|null
operator|&&
operator|!
name|f
operator|.
name|isEmpty
argument_list|()
condition|?
name|f
else|:
name|FILTER_ALL
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
annotation|@
name|Override
DECL|method|set (String newValue)
specifier|protected
name|void
name|set
parameter_list|(
name|String
name|newValue
parameter_list|)
block|{
name|filter
operator|=
name|newValue
expr_stmt|;
block|}
block|}
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|1
argument_list|,
name|name
operator|=
name|Column
operator|.
name|NONE
argument_list|)
DECL|field|key
specifier|protected
name|Key
name|key
decl_stmt|;
comment|/** Automatically send email notifications of new changes? */
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|2
argument_list|)
DECL|field|notifyNewChanges
specifier|protected
name|boolean
name|notifyNewChanges
decl_stmt|;
comment|/** Automatically receive comments published to this project */
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|3
argument_list|)
DECL|field|notifyAllComments
specifier|protected
name|boolean
name|notifyAllComments
decl_stmt|;
comment|/** Automatically receive changes submitted to this project */
annotation|@
name|Column
argument_list|(
name|id
operator|=
literal|4
argument_list|)
DECL|field|notifySubmittedChanges
specifier|protected
name|boolean
name|notifySubmittedChanges
decl_stmt|;
DECL|method|AccountProjectWatch ()
specifier|protected
name|AccountProjectWatch
parameter_list|()
block|{   }
DECL|method|AccountProjectWatch (final AccountProjectWatch.Key k)
specifier|public
name|AccountProjectWatch
parameter_list|(
specifier|final
name|AccountProjectWatch
operator|.
name|Key
name|k
parameter_list|)
block|{
name|key
operator|=
name|k
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|AccountProjectWatch
operator|.
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getAccountId ()
specifier|public
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
return|return
name|key
operator|.
name|accountId
return|;
block|}
DECL|method|getProjectNameKey ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProjectNameKey
parameter_list|()
block|{
return|return
name|key
operator|.
name|projectName
return|;
block|}
DECL|method|getFilter ()
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|FILTER_ALL
operator|.
name|equals
argument_list|(
name|key
operator|.
name|filter
operator|.
name|get
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|key
operator|.
name|filter
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isNotify (final NotifyType type)
specifier|public
name|boolean
name|isNotify
parameter_list|(
specifier|final
name|NotifyType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NEW_CHANGES
case|:
return|return
name|notifyNewChanges
return|;
case|case
name|ALL_COMMENTS
case|:
return|return
name|notifyAllComments
return|;
case|case
name|SUBMITTED_CHANGES
case|:
return|return
name|notifySubmittedChanges
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|setNotify (final NotifyType type, final boolean v)
specifier|public
name|void
name|setNotify
parameter_list|(
specifier|final
name|NotifyType
name|type
parameter_list|,
specifier|final
name|boolean
name|v
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NEW_CHANGES
case|:
name|notifyNewChanges
operator|=
name|v
expr_stmt|;
break|break;
case|case
name|ALL_COMMENTS
case|:
name|notifyAllComments
operator|=
name|v
expr_stmt|;
break|break;
case|case
name|SUBMITTED_CHANGES
case|:
name|notifySubmittedChanges
operator|=
name|v
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

