begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.githacks
package|package
name|com
operator|.
name|google
operator|.
name|githacks
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|util
operator|.
name|GitMetaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PackWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Creates a broken shallow repository with a populated assumed base.  *<p>  * Broken shallow repositories contain a handful of commits (the assumed base)  * and the trees referenced by those commits, but not the blobs or the commit  * ancestors. These repositories are meant to only be used as a source to fetch  * an overlay from, where the native Git protocol negotiated the assumed base as  * the common ancestor.  *<p>  * The created repository is not marked as shallow and does not have any grafts  * in it. Clients (or applications) which attempt to walk back through history  * beyond the assumed base will encounter missing objects and crash. Not  * configuring the shallow or grafts file is a "data integrity" feature to  * ensure that clients fetching or cloning from this shallow repository will not  * be able to succeed, as they do not (and would not receive) the needed but  * missing objects.  */
end_comment

begin_class
DECL|class|BrokenShallowRepositoryCreator
specifier|public
class|class
name|BrokenShallowRepositoryCreator
block|{
comment|/**    * Create (or update) broken shallow repositories, recursively.    *     * @param srcTop the root of the source tree.    * @param dstTop the root of the destination tree.    * @throws IOException a repository failed to be converted.    */
DECL|method|createRecursive (final File srcTop, final File dstTop)
specifier|public
specifier|static
name|void
name|createRecursive
parameter_list|(
specifier|final
name|File
name|srcTop
parameter_list|,
specifier|final
name|File
name|dstTop
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|File
index|[]
name|srcEntries
init|=
name|srcTop
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcEntries
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|File
name|srcEnt
range|:
name|srcEntries
control|)
block|{
specifier|final
name|String
name|srcName
init|=
name|srcEnt
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcName
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|srcName
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|srcEnt
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|GitMetaUtil
operator|.
name|isGitRepository
argument_list|(
name|srcEnt
argument_list|)
condition|)
block|{
name|create
argument_list|(
name|srcEnt
argument_list|,
operator|new
name|File
argument_list|(
name|dstTop
argument_list|,
name|srcEnt
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createRecursive
argument_list|(
name|srcEnt
argument_list|,
operator|new
name|File
argument_list|(
name|dstTop
argument_list|,
name|srcEnt
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create (or update) a broken shallow repository.    *     * @param srcGitDir the source repository, where commits and trees can be    *        copied from.    * @param dstGitDir the destination repository, where the tree data (but not    *        blob data) will be packed into. If this directory does not exist it    *        will be automatically created.    * @throws IOException there was an error reading from the source or writing    *         to the destination repository.    */
DECL|method|create (final File srcGitDir, final File dstGitDir)
specifier|public
specifier|static
name|void
name|create
parameter_list|(
specifier|final
name|File
name|srcGitDir
parameter_list|,
specifier|final
name|File
name|dstGitDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Repository
name|srcdb
init|=
operator|new
name|Repository
argument_list|(
name|srcGitDir
argument_list|)
decl_stmt|;
specifier|final
name|RevWalk
name|srcwalk
init|=
operator|new
name|RevWalk
argument_list|(
name|srcdb
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|assumed
init|=
name|readAssumedBase
argument_list|(
name|srcdb
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RevObject
argument_list|>
name|toCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|RevObject
argument_list|>
argument_list|(
name|assumed
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|TreeWalk
name|tw
init|=
operator|new
name|TreeWalk
argument_list|(
name|srcdb
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectId
name|id
range|:
name|assumed
control|)
block|{
specifier|final
name|RevCommit
name|c
init|=
name|srcwalk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|toCopy
operator|.
name|add
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|tw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|tw
operator|.
name|addTree
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|tw
operator|.
name|next
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|tw
operator|.
name|getFileMode
argument_list|(
literal|0
argument_list|)
operator|.
name|getObjectType
argument_list|()
condition|)
block|{
case|case
name|Constants
operator|.
name|OBJ_TREE
case|:
name|toCopy
operator|.
name|add
argument_list|(
name|srcwalk
operator|.
name|lookupTree
argument_list|(
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tw
operator|.
name|enterSubtree
argument_list|()
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|OBJ_BLOB
case|:
break|break;
default|default:
break|break;
block|}
block|}
block|}
specifier|final
name|Repository
name|destdb
init|=
operator|new
name|Repository
argument_list|(
name|dstGitDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destdb
operator|.
name|getDirectory
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destdb
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|destAssumed
init|=
name|readAssumedBase
argument_list|(
name|destdb
argument_list|)
decl_stmt|;
name|destAssumed
operator|.
name|addAll
argument_list|(
name|assumed
argument_list|)
expr_stmt|;
name|writeAssumedBase
argument_list|(
name|destdb
argument_list|,
name|destAssumed
argument_list|)
expr_stmt|;
if|if
condition|(
name|destAssumed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing assumed, it doesn't need special processing from us.
comment|//
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Packing "
operator|+
name|destdb
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Prepare pack of the assumed base. Clients wouldn't need to
comment|// fetch this pack, as they already have its contents.
comment|//
name|PackWriter
name|packer
init|=
operator|new
name|PackWriter
argument_list|(
name|srcdb
argument_list|,
operator|new
name|TextProgressMonitor
argument_list|()
argument_list|)
decl_stmt|;
name|packer
operator|.
name|preparePack
argument_list|(
name|toCopy
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|storePack
argument_list|(
name|destdb
argument_list|,
name|packer
argument_list|)
expr_stmt|;
comment|// Prepare a pack of everything else not in the assumed base. This
comment|// would need to be fetched. We build it second so it has a newer
comment|// timestamp when it goes into the list of packs, and will therefore
comment|// be searched first by clients.
comment|//
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|srcrefs
init|=
name|srcdb
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|need
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|srcrefs
operator|.
name|values
argument_list|()
control|)
block|{
name|need
operator|.
name|add
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|packer
operator|=
operator|new
name|PackWriter
argument_list|(
name|srcdb
argument_list|,
operator|new
name|TextProgressMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|packer
operator|.
name|preparePack
argument_list|(
name|need
argument_list|,
name|destAssumed
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|storePack
argument_list|(
name|destdb
argument_list|,
name|packer
argument_list|)
expr_stmt|;
comment|// Force all of the refs in destdb to match srcdb. We want full
comment|// mirroring style semantics now that the objects are in place.
comment|//
specifier|final
name|RevWalk
name|dstwalk
init|=
operator|new
name|RevWalk
argument_list|(
name|destdb
argument_list|)
decl_stmt|;
name|destdb
operator|.
name|writeSymref
argument_list|(
name|Constants
operator|.
name|HEAD
argument_list|,
name|srcdb
operator|.
name|getFullBranch
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|destdb
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|srcrefs
operator|.
name|containsKey
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|RefUpdate
name|u
init|=
name|destdb
operator|.
name|updateRef
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|delete
argument_list|(
name|dstwalk
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|srcrefs
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|RefUpdate
name|u
init|=
name|destdb
operator|.
name|updateRef
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|getOldObjectId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|u
operator|.
name|getOldObjectId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
condition|)
block|{
name|u
operator|.
name|setNewObjectId
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|update
argument_list|(
name|dstwalk
argument_list|)
expr_stmt|;
block|}
block|}
name|srcdb
operator|.
name|close
argument_list|()
expr_stmt|;
name|destdb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|storePack (final Repository destdb, PackWriter packer)
specifier|private
specifier|static
name|void
name|storePack
parameter_list|(
specifier|final
name|Repository
name|destdb
parameter_list|,
name|PackWriter
name|packer
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
specifier|final
name|String
name|packName
init|=
literal|"pack-"
operator|+
name|packer
operator|.
name|computeName
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|final
name|File
name|packDir
init|=
operator|new
name|File
argument_list|(
name|destdb
operator|.
name|getObjectsDirectory
argument_list|()
argument_list|,
literal|"pack"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|packPath
init|=
operator|new
name|File
argument_list|(
name|packDir
argument_list|,
name|packName
operator|+
literal|".pack"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|idxPath
init|=
operator|new
name|File
argument_list|(
name|packDir
argument_list|,
name|packName
operator|+
literal|".idx"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|packPath
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|idxPath
operator|.
name|exists
argument_list|()
condition|)
block|{
block|{
specifier|final
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|packPath
argument_list|)
decl_stmt|;
try|try
block|{
name|packer
operator|.
name|writePack
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|packPath
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
block|}
block|{
specifier|final
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|idxPath
argument_list|)
decl_stmt|;
try|try
block|{
name|packer
operator|.
name|writeIndex
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|idxPath
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|readAssumedBase (final Repository db)
specifier|private
specifier|static
name|List
argument_list|<
name|ObjectId
argument_list|>
name|readAssumedBase
parameter_list|(
specifier|final
name|Repository
name|db
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|BufferedReader
name|br
decl_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|infoAssumedBase
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|noList
parameter_list|)
block|{
comment|// Ignore it. We'll return an empty list to the caller.
block|}
return|return
name|list
return|;
block|}
DECL|method|writeAssumedBase (final Repository db, final List<ObjectId> newList)
specifier|private
specifier|static
name|void
name|writeAssumedBase
parameter_list|(
specifier|final
name|Repository
name|db
parameter_list|,
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|newList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newList
operator|==
literal|null
operator|||
name|newList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|infoAssumedBase
argument_list|(
name|db
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|LockFile
name|lf
init|=
operator|new
name|LockFile
argument_list|(
name|infoAssumedBase
argument_list|(
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lf
operator|.
name|lock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot lock "
operator|+
name|infoAssumedBase
argument_list|(
name|db
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|OutputStream
name|ow
init|=
name|lf
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectId
name|id
range|:
name|newList
control|)
block|{
name|id
operator|.
name|copyTo
argument_list|(
name|ow
argument_list|)
expr_stmt|;
block|}
name|ow
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|lf
operator|.
name|commit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot commit "
operator|+
name|infoAssumedBase
argument_list|(
name|db
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|infoAssumedBase (final Repository db)
specifier|private
specifier|static
name|File
name|infoAssumedBase
parameter_list|(
specifier|final
name|Repository
name|db
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|db
operator|.
name|getDirectory
argument_list|()
argument_list|,
literal|"info/assumed-base"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

