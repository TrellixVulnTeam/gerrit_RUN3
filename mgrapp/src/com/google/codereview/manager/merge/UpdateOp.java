begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.merge
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBuildResult
operator|.
name|PostBuildResultResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|UpdateOp
specifier|public
class|class
name|UpdateOp
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UpdateOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|repoCache
specifier|private
specifier|final
name|RepositoryCache
name|repoCache
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|PostBuildResultResponse
name|in
decl_stmt|;
DECL|field|db
specifier|private
name|Repository
name|db
decl_stmt|;
DECL|field|newCommit
specifier|private
name|RevCommit
name|newCommit
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
DECL|field|branch
specifier|private
name|RefUpdate
name|branch
decl_stmt|;
DECL|method|UpdateOp (final RepositoryCache rc, final PostBuildResultResponse mergeInfo)
name|UpdateOp
parameter_list|(
specifier|final
name|RepositoryCache
name|rc
parameter_list|,
specifier|final
name|PostBuildResultResponse
name|mergeInfo
parameter_list|)
block|{
name|repoCache
operator|=
name|rc
expr_stmt|;
name|in
operator|=
name|mergeInfo
expr_stmt|;
block|}
DECL|method|update ()
name|boolean
name|update
parameter_list|()
block|{
specifier|final
name|String
name|loc
init|=
name|in
operator|.
name|getDestProjectName
argument_list|()
operator|+
literal|" "
operator|+
name|in
operator|.
name|getDestBranchName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating "
operator|+
name|loc
argument_list|)
expr_stmt|;
try|try
block|{
name|updateImpl
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|MergeException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error updating "
operator|+
name|loc
argument_list|,
name|ee
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
operator|&&
name|rw
operator|!=
literal|null
condition|)
block|{
name|unpinMerge
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|unpinMerge ()
specifier|private
name|void
name|unpinMerge
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
name|MergeOp
operator|.
name|mergePinName
argument_list|(
name|in
operator|.
name|getRevisionId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|RefUpdate
name|ru
init|=
name|db
operator|.
name|updateRef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|ru
operator|.
name|getOldObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|delete
argument_list|(
name|rw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot remove "
operator|+
name|name
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateImpl ()
specifier|private
name|void
name|updateImpl
parameter_list|()
throws|throws
name|MergeException
block|{
name|openRepository
argument_list|()
expr_stmt|;
name|openBranch
argument_list|()
expr_stmt|;
name|parseCommit
argument_list|()
expr_stmt|;
name|updateBranch
argument_list|()
expr_stmt|;
block|}
DECL|method|openRepository ()
specifier|private
name|void
name|openRepository
parameter_list|()
throws|throws
name|MergeException
block|{
specifier|final
name|String
name|name
init|=
name|in
operator|.
name|getDestProjectName
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|=
name|repoCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|notGit
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Repository \""
operator|+
name|name
operator|+
literal|"\" unknown."
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|,
name|notGit
argument_list|)
throw|;
block|}
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
DECL|method|openBranch ()
specifier|private
name|void
name|openBranch
parameter_list|()
throws|throws
name|MergeException
block|{
try|try
block|{
name|branch
operator|=
name|db
operator|.
name|updateRef
argument_list|(
name|in
operator|.
name|getDestBranchName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Cannot open branch"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseCommit ()
specifier|private
name|void
name|parseCommit
parameter_list|()
throws|throws
name|MergeException
block|{
try|try
block|{
name|newCommit
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|in
operator|.
name|getRevisionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Not a commit name: "
operator|+
name|in
operator|.
name|getRevisionId
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MergeException
argument_list|(
literal|"Not a commit name: "
operator|+
name|in
operator|.
name|getRevisionId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateBranch ()
specifier|private
name|void
name|updateBranch
parameter_list|()
throws|throws
name|MergeException
block|{
name|branch
operator|.
name|setForceUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|branch
operator|.
name|setNewObjectId
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
name|branch
operator|.
name|setRefLogMessage
argument_list|(
name|newCommit
operator|.
name|getShortMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|RefUpdate
operator|.
name|Result
name|r
decl_stmt|;
try|try
block|{
name|r
operator|=
name|branch
operator|.
name|update
argument_list|(
name|rw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Failure updating "
operator|+
name|branch
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|,
name|err
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{     }
elseif|else
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
condition|)
block|{     }
elseif|else
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|NO_CHANGE
condition|)
block|{     }
else|else
block|{
specifier|final
name|String
name|m
init|=
literal|"Failure updating "
operator|+
name|branch
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|r
operator|.
name|name
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MergeException
argument_list|(
name|m
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

