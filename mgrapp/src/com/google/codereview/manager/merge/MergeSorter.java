begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.merge
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostMergeResult
operator|.
name|MergeResultItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|MergeSorter
class|class
name|MergeSorter
block|{
DECL|field|rw
specifier|private
specifier|final
name|RevWalk
name|rw
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|RevCommit
name|base
decl_stmt|;
DECL|field|CAN_MERGE
specifier|private
specifier|final
name|RevFlag
name|CAN_MERGE
decl_stmt|;
DECL|method|MergeSorter (final RevWalk walk, final RevCommit branchHead)
name|MergeSorter
parameter_list|(
specifier|final
name|RevWalk
name|walk
parameter_list|,
specifier|final
name|RevCommit
name|branchHead
parameter_list|)
block|{
name|rw
operator|=
name|walk
expr_stmt|;
name|CAN_MERGE
operator|=
name|rw
operator|.
name|newFlag
argument_list|(
literal|"CAN_MERGE"
argument_list|)
expr_stmt|;
name|base
operator|=
name|branchHead
expr_stmt|;
block|}
DECL|method|sort (final Collection<CodeReviewCommit> incoming)
name|Collection
argument_list|<
name|CodeReviewCommit
argument_list|>
name|sort
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|CodeReviewCommit
argument_list|>
name|incoming
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|heads
init|=
operator|new
name|HashSet
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|sort
init|=
name|prepareList
argument_list|(
name|incoming
argument_list|)
decl_stmt|;
name|INCOMING
label|:
while|while
condition|(
operator|!
name|sort
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|CodeReviewCommit
name|n
init|=
name|removeOne
argument_list|(
name|sort
argument_list|)
decl_stmt|;
name|rw
operator|.
name|resetRetain
argument_list|(
name|CAN_MERGE
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|c
decl_stmt|;
specifier|final
name|RevCommitList
argument_list|<
name|RevCommit
argument_list|>
name|contents
init|=
operator|new
name|RevCommitList
argument_list|<
name|RevCommit
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|has
argument_list|(
name|CAN_MERGE
argument_list|)
condition|)
block|{
comment|// We cannot merge n as it would bring something we
comment|// aren't permitted to merge at this time. Drop n.
comment|//
name|n
operator|.
name|statusCode
operator|=
name|MergeResultItem
operator|.
name|CodeType
operator|.
name|MISSING_DEPENDENCY
expr_stmt|;
continue|continue
name|INCOMING
continue|;
block|}
name|contents
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|// Anything reachable through us is better merged by just
comment|// merging us directly. So prune our ancestors out and let
comment|// us merge instead.
comment|//
name|sort
operator|.
name|removeAll
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|heads
operator|.
name|removeAll
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|heads
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|heads
return|;
block|}
DECL|method|prepareList ( final Collection<CodeReviewCommit> in)
specifier|private
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|prepareList
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|CodeReviewCommit
argument_list|>
name|in
parameter_list|)
block|{
specifier|final
name|HashSet
argument_list|<
name|CodeReviewCommit
argument_list|>
name|sort
init|=
operator|new
name|HashSet
argument_list|<
name|CodeReviewCommit
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|in
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|has
argument_list|(
name|CAN_MERGE
argument_list|)
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|CAN_MERGE
argument_list|)
expr_stmt|;
name|sort
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sort
return|;
block|}
DECL|method|removeOne (final Collection<T> c)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|removeOne
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|i
init|=
name|c
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|T
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

