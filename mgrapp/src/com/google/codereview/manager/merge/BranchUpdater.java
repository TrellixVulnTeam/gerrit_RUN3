begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.merge
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBranchUpdate
operator|.
name|PostBranchUpdateRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBranchUpdate
operator|.
name|PostBranchUpdateResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBuildResult
operator|.
name|PostBuildResultResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
operator|.
name|SimpleController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|BranchUpdater
specifier|public
class|class
name|BranchUpdater
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BranchUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|Backend
name|server
decl_stmt|;
DECL|method|BranchUpdater (final Backend be)
specifier|public
name|BranchUpdater
parameter_list|(
specifier|final
name|Backend
name|be
parameter_list|)
block|{
name|server
operator|=
name|be
expr_stmt|;
block|}
DECL|method|updateBranch (final PostBuildResultResponse buildInfo)
specifier|public
name|void
name|updateBranch
parameter_list|(
specifier|final
name|PostBuildResultResponse
name|buildInfo
parameter_list|)
block|{
if|if
condition|(
operator|new
name|UpdateOp
argument_list|(
name|server
operator|.
name|getRepositoryCache
argument_list|()
argument_list|,
name|buildInfo
argument_list|)
operator|.
name|update
argument_list|()
condition|)
block|{
specifier|final
name|PostBranchUpdateRequest
operator|.
name|Builder
name|req
decl_stmt|;
name|req
operator|=
name|PostBranchUpdateRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|req
operator|.
name|setBranchKey
argument_list|(
name|buildInfo
operator|.
name|getDestBranchKey
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|addAllNewChange
argument_list|(
name|buildInfo
operator|.
name|getNewChangeList
argument_list|()
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|PostBranchUpdateRequest
operator|.
name|Builder
name|req
decl_stmt|;
name|req
operator|=
name|PostBranchUpdateRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|req
operator|.
name|setBranchKey
argument_list|(
name|buildInfo
operator|.
name|getDestBranchKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't mark any changes merged.
name|send
argument_list|(
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|send (final PostBranchUpdateRequest msg)
specifier|private
name|void
name|send
parameter_list|(
specifier|final
name|PostBranchUpdateRequest
name|msg
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getMergeService
argument_list|()
operator|.
name|postBranchUpdate
argument_list|(
name|ctrl
argument_list|,
name|msg
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PostBranchUpdateResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|PostBranchUpdateResponse
name|rsp
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"postBranchUpdate failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

