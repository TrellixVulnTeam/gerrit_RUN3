begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.merge
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PendingMerge
operator|.
name|PendingMergeRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PendingMerge
operator|.
name|PendingMergeResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBranchUpdate
operator|.
name|PostBranchUpdateRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBranchUpdate
operator|.
name|PostBranchUpdateResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBuildResult
operator|.
name|PostBuildResultRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostBuildResult
operator|.
name|PostBuildResultResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostMergeResult
operator|.
name|PostMergeResultRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|PostMergeResult
operator|.
name|PostMergeResultResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SubmitBuild
operator|.
name|SubmitBuildRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SubmitBuild
operator|.
name|SubmitBuildResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|StopProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
operator|.
name|SimpleController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|util
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/** Merges changes from branches with changes waiting to be merged. */
end_comment

begin_class
DECL|class|PendingMerger
specifier|public
class|class
name|PendingMerger
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PendingMerger
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEXT_REQ
specifier|private
specifier|static
specifier|final
name|PendingMergeRequest
name|NEXT_REQ
init|=
name|PendingMergeRequest
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|Backend
name|server
decl_stmt|;
DECL|field|updater
specifier|private
specifier|final
name|BranchUpdater
name|updater
decl_stmt|;
DECL|method|PendingMerger (final Backend be)
specifier|public
name|PendingMerger
parameter_list|(
specifier|final
name|Backend
name|be
parameter_list|)
block|{
name|server
operator|=
name|be
expr_stmt|;
name|updater
operator|=
operator|new
name|BranchUpdater
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unexpected runtime failure"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unexpected runtime failure"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
DECL|method|runImpl ()
specifier|private
name|void
name|runImpl
parameter_list|()
block|{
name|boolean
name|tryAnother
decl_stmt|;
do|do
block|{
name|tryAnother
operator|=
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|tryAnother
condition|)
do|;
block|}
DECL|method|next ()
specifier|private
name|boolean
name|next
parameter_list|()
block|{
specifier|final
name|MutableBoolean
name|tryAnother
init|=
operator|new
name|MutableBoolean
argument_list|()
decl_stmt|;
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getMergeService
argument_list|()
operator|.
name|nextPendingMerge
argument_list|(
name|ctrl
argument_list|,
name|NEXT_REQ
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PendingMergeResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|PendingMergeResponse
name|rsp
parameter_list|)
block|{
name|tryAnother
operator|.
name|value
operator|=
name|merge
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"nextPendingMerge failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
name|tryAnother
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|tryAnother
operator|.
name|value
return|;
block|}
DECL|method|merge (final PendingMergeResponse rsp)
specifier|private
name|boolean
name|merge
parameter_list|(
specifier|final
name|PendingMergeResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|PendingMergeResponse
operator|.
name|CodeType
name|sc
init|=
name|rsp
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|sc
operator|==
name|PendingMergeResponse
operator|.
name|CodeType
operator|.
name|QUEUE_EMPTY
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sc
operator|==
name|PendingMergeResponse
operator|.
name|CodeType
operator|.
name|MERGE_READY
condition|)
block|{
name|mergeImpl
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|StopProcessingException
argument_list|(
literal|"unknown status "
operator|+
name|sc
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|mergeImpl (final PendingMergeResponse rsp)
specifier|protected
name|void
name|mergeImpl
parameter_list|(
specifier|final
name|PendingMergeResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|MergeOp
name|mo
init|=
operator|new
name|MergeOp
argument_list|(
name|server
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
specifier|final
name|PostMergeResultRequest
name|result
init|=
name|mo
operator|.
name|merge
argument_list|()
decl_stmt|;
name|send
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|mo
operator|.
name|getMergeTip
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|mo
operator|.
name|getNewChanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|SubmitBuildRequest
operator|.
name|Builder
name|b
init|=
name|SubmitBuildRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setBranchKey
argument_list|(
name|rsp
operator|.
name|getDestBranchKey
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setRevisionId
argument_list|(
name|mo
operator|.
name|getMergeTip
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CodeReviewCommit
name|c
range|:
name|mo
operator|.
name|getNewChanges
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|patchsetKey
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|addNewChange
argument_list|(
name|c
operator|.
name|patchsetKey
argument_list|)
expr_stmt|;
block|}
block|}
name|send
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
name|mo
operator|.
name|getMergeTip
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|PostBranchUpdateRequest
operator|.
name|Builder
name|b
decl_stmt|;
name|b
operator|=
name|PostBranchUpdateRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|b
operator|.
name|setBranchKey
argument_list|(
name|rsp
operator|.
name|getDestBranchKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't mark any changes merged.
name|send
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|send (final PostMergeResultRequest msg)
specifier|private
name|void
name|send
parameter_list|(
specifier|final
name|PostMergeResultRequest
name|msg
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getMergeService
argument_list|()
operator|.
name|postMergeResult
argument_list|(
name|ctrl
argument_list|,
name|msg
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PostMergeResultResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|PostMergeResultResponse
name|rsp
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"postMergeResult failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|send (final SubmitBuildRequest msg, final ObjectId id)
specifier|private
name|void
name|send
parameter_list|(
specifier|final
name|SubmitBuildRequest
name|msg
parameter_list|,
specifier|final
name|ObjectId
name|id
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getBuildService
argument_list|()
operator|.
name|submitBuild
argument_list|(
name|ctrl
argument_list|,
name|msg
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|SubmitBuildResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|SubmitBuildResponse
name|rsp
parameter_list|)
block|{
name|scheduleBuild
argument_list|(
name|rsp
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"submitBuild failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scheduleBuild (final SubmitBuildResponse rsp, final ObjectId id)
specifier|private
name|void
name|scheduleBuild
parameter_list|(
specifier|final
name|SubmitBuildResponse
name|rsp
parameter_list|,
specifier|final
name|ObjectId
name|id
parameter_list|)
block|{
specifier|final
name|int
name|buildId
init|=
name|rsp
operator|.
name|getBuildId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merge commit "
operator|+
name|id
operator|.
name|name
argument_list|()
operator|+
literal|" is build "
operator|+
name|buildId
argument_list|)
expr_stmt|;
comment|// For now assume the build was successful.
comment|//
specifier|final
name|PostBuildResultRequest
operator|.
name|Builder
name|req
decl_stmt|;
name|req
operator|=
name|PostBuildResultRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|req
operator|.
name|setBuildId
argument_list|(
name|buildId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBuildStatus
argument_list|(
name|PostBuildResultRequest
operator|.
name|ResultType
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getBuildService
argument_list|()
operator|.
name|postBuildResult
argument_list|(
name|ctrl
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PostBuildResultResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|PostBuildResultResponse
name|rsp
parameter_list|)
block|{
name|updater
operator|.
name|updateBranch
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"postBuildResult failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|send (final PostBranchUpdateRequest msg)
specifier|private
name|void
name|send
parameter_list|(
specifier|final
name|PostBranchUpdateRequest
name|msg
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n"
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getMergeService
argument_list|()
operator|.
name|postBranchUpdate
argument_list|(
name|ctrl
argument_list|,
name|msg
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PostBranchUpdateResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|PostBranchUpdateResponse
name|rsp
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"postBranchUpdate failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

