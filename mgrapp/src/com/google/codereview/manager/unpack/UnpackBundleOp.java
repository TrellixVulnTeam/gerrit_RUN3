begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|BundleSegmentRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|BundleSegmentResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|NextReceivedBundleResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SubmitChange
operator|.
name|SubmitChangeRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SubmitChange
operator|.
name|SubmitChangeResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UpdateReceivedBundle
operator|.
name|UpdateReceivedBundleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UpdateReceivedBundle
operator|.
name|UpdateReceivedBundleRequest
operator|.
name|CodeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
operator|.
name|SimpleController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|util
operator|.
name|GitMetaUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|util
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingBundlePrerequisiteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|FetchConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|TransportBundleStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|URIish
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Unpacks a bundle and imports the commits into the code review system. */
end_comment

begin_class
DECL|class|UnpackBundleOp
class|class
name|UnpackBundleOp
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UnpackBundleOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|refOf (final int changeId, final int patchsetId)
specifier|private
specifier|static
name|String
name|refOf
parameter_list|(
specifier|final
name|int
name|changeId
parameter_list|,
specifier|final
name|int
name|patchsetId
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dh
init|=
name|changeId
operator|%
literal|100
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"refs/changes/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dh
operator|<
literal|10
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|patchsetId
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|server
specifier|private
specifier|final
name|Backend
name|server
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|NextReceivedBundleResponse
name|in
decl_stmt|;
DECL|field|db
specifier|private
name|Repository
name|db
decl_stmt|;
DECL|field|tip
specifier|private
name|ObjectId
name|tip
decl_stmt|;
DECL|field|changeId
specifier|private
name|int
name|changeId
decl_stmt|;
DECL|field|patchsetId
specifier|private
name|int
name|patchsetId
decl_stmt|;
DECL|field|patchsetKey
specifier|private
name|String
name|patchsetKey
decl_stmt|;
DECL|method|UnpackBundleOp (final Backend be, final NextReceivedBundleResponse bundleInfo)
name|UnpackBundleOp
parameter_list|(
specifier|final
name|Backend
name|be
parameter_list|,
specifier|final
name|NextReceivedBundleResponse
name|bundleInfo
parameter_list|)
block|{
name|server
operator|=
name|be
expr_stmt|;
name|in
operator|=
name|bundleInfo
expr_stmt|;
block|}
DECL|method|unpack ()
name|UpdateReceivedBundleRequest
name|unpack
parameter_list|()
block|{
specifier|final
name|UpdateReceivedBundleRequest
operator|.
name|Builder
name|update
decl_stmt|;
name|update
operator|=
name|UpdateReceivedBundleRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|update
operator|.
name|setBundleKey
argument_list|(
name|in
operator|.
name|getBundleKey
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|unpackImpl
argument_list|()
expr_stmt|;
name|update
operator|.
name|setStatusCode
argument_list|(
name|CodeType
operator|.
name|UNPACKED_OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnpackException
name|ue
parameter_list|)
block|{
name|update
operator|.
name|setStatusCode
argument_list|(
name|ue
operator|.
name|status
argument_list|)
expr_stmt|;
name|update
operator|.
name|setErrorDetails
argument_list|(
name|ue
operator|.
name|details
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unpacking bundle "
operator|+
name|in
operator|.
name|getBundleKey
argument_list|()
operator|+
literal|" failed."
argument_list|,
name|ue
argument_list|)
expr_stmt|;
block|}
return|return
name|update
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|unpackImpl ()
specifier|private
name|void
name|unpackImpl
parameter_list|()
throws|throws
name|UnpackException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unpacking bundle "
operator|+
name|in
operator|.
name|getBundleKey
argument_list|()
argument_list|)
expr_stmt|;
name|openRepository
argument_list|()
expr_stmt|;
name|unpackTip
argument_list|()
expr_stmt|;
name|createChanges
argument_list|(
name|newCommits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|openRepository ()
specifier|private
name|void
name|openRepository
parameter_list|()
throws|throws
name|UnpackException
block|{
try|try
block|{
name|db
operator|=
name|server
operator|.
name|getRepositoryCache
argument_list|()
operator|.
name|get
argument_list|(
name|in
operator|.
name|getDestProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|notGit
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Repository \""
operator|+
name|in
operator|.
name|getDestProject
argument_list|()
operator|+
literal|"\" unknown."
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|UNKNOWN_PROJECT
argument_list|,
name|m
argument_list|,
name|notGit
argument_list|)
throw|;
block|}
block|}
DECL|method|unpackTip ()
specifier|private
name|void
name|unpackTip
parameter_list|()
throws|throws
name|UnpackException
block|{
specifier|final
name|Transport
name|bundleTransport
init|=
name|openBundle
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|FetchConnection
name|fc
init|=
name|bundleTransport
operator|.
name|openFetch
argument_list|()
decl_stmt|;
if|if
condition|(
name|fc
operator|.
name|getRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Bundle contains more than one head"
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|INVALID_BUNDLE
argument_list|,
name|m
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fc
operator|.
name|getRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Bundle contains no heads"
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|INVALID_BUNDLE
argument_list|,
name|m
argument_list|)
throw|;
block|}
name|fc
operator|.
name|fetch
argument_list|(
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|,
name|fc
operator|.
name|getRefs
argument_list|()
argument_list|)
expr_stmt|;
name|tip
operator|=
name|fc
operator|.
name|getRefs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unpacked "
operator|+
name|tip
operator|.
name|name
argument_list|()
operator|+
literal|" from "
operator|+
name|in
operator|.
name|getBundleKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingBundlePrerequisiteException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|MISSING_BASE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|readError
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Processing the bundle stream failed"
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|INVALID_BUNDLE
argument_list|,
name|m
argument_list|,
name|readError
argument_list|)
throw|;
block|}
finally|finally
block|{
name|bundleTransport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newCommits ()
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|newCommits
parameter_list|()
throws|throws
name|UnpackException
block|{
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|tip
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Chain "
operator|+
name|tip
operator|.
name|name
argument_list|()
operator|+
literal|" is corrupt"
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|INVALID_BUNDLE
argument_list|,
name|m
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|Ref
name|r
range|:
name|db
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Local ref is invalid"
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|SUSPEND_BUNDLE
argument_list|,
name|m
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|RevCommit
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|RevCommit
argument_list|>
argument_list|()
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// Ensure the parents are parsed so we know the parent's tree.
comment|// We need that later to compute a difference.
comment|//
for|for
control|(
specifier|final
name|RevCommit
name|p
range|:
name|c
operator|.
name|getParents
argument_list|()
control|)
block|{
name|rw
operator|.
name|parse
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|newList
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|newList
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Chain "
operator|+
name|tip
operator|.
name|name
argument_list|()
operator|+
literal|" is corrupt"
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|INVALID_BUNDLE
argument_list|,
name|m
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createChanges (final List<RevCommit> newCommits)
specifier|private
name|void
name|createChanges
parameter_list|(
specifier|final
name|List
argument_list|<
name|RevCommit
argument_list|>
name|newCommits
parameter_list|)
throws|throws
name|UnpackException
block|{
for|for
control|(
specifier|final
name|RevCommit
name|c
range|:
name|newCommits
control|)
block|{
if|if
condition|(
name|submitChange
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|createChangeRef
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|server
operator|.
name|asyncExec
argument_list|(
operator|new
name|PatchSetUploader
argument_list|(
name|server
argument_list|,
name|db
argument_list|,
name|c
argument_list|,
name|patchsetKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|submitChange (final RevCommit c)
specifier|private
name|boolean
name|submitChange
parameter_list|(
specifier|final
name|RevCommit
name|c
parameter_list|)
throws|throws
name|UnpackException
block|{
specifier|final
name|SubmitChangeRequest
operator|.
name|Builder
name|req
init|=
name|SubmitChangeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setOwner
argument_list|(
name|in
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setDestBranchKey
argument_list|(
name|in
operator|.
name|getDestBranchKey
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setCommit
argument_list|(
name|GitMetaUtil
operator|.
name|toGitCommit
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MutableBoolean
name|continueCreation
init|=
operator|new
name|MutableBoolean
argument_list|()
decl_stmt|;
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getChangeService
argument_list|()
operator|.
name|submitChange
argument_list|(
name|ctrl
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|SubmitChangeResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|SubmitChangeResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|SubmitChangeResponse
operator|.
name|CodeType
name|sc
init|=
name|rsp
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|sc
operator|==
name|SubmitChangeResponse
operator|.
name|CodeType
operator|.
name|CREATED
condition|)
block|{
name|changeId
operator|=
name|rsp
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|patchsetId
operator|=
name|rsp
operator|.
name|getPatchsetId
argument_list|()
expr_stmt|;
name|patchsetKey
operator|=
name|rsp
operator|.
name|getPatchsetKey
argument_list|()
expr_stmt|;
name|continueCreation
operator|.
name|value
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" is change "
operator|+
name|changeId
operator|+
literal|" patchset "
operator|+
name|patchsetId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sc
operator|==
name|SubmitChangeResponse
operator|.
name|CodeType
operator|.
name|PATCHSET_EXISTS
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" exists in data store"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctrl
operator|.
name|setFailed
argument_list|(
literal|"Unknown status "
operator|+
name|sc
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|SUSPEND_BUNDLE
argument_list|,
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|continueCreation
operator|.
name|value
return|;
block|}
DECL|method|createChangeRef (final RevCommit c)
specifier|private
name|void
name|createChangeRef
parameter_list|(
specifier|final
name|RevCommit
name|c
parameter_list|)
throws|throws
name|UnpackException
block|{
specifier|final
name|String
name|name
init|=
name|refOf
argument_list|(
name|changeId
argument_list|,
name|patchsetId
argument_list|)
decl_stmt|;
specifier|final
name|RefUpdate
operator|.
name|Result
name|r
decl_stmt|;
try|try
block|{
specifier|final
name|RefUpdate
name|u
init|=
name|db
operator|.
name|updateRef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRefLogMessage
argument_list|(
literal|"Change submitted"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|=
name|u
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
specifier|final
name|String
name|m
init|=
literal|"Failure creating "
operator|+
name|name
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|SUSPEND_BUNDLE
argument_list|,
name|m
argument_list|,
name|err
argument_list|)
throw|;
block|}
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
condition|)
block|{     }
elseif|else
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
condition|)
block|{     }
elseif|else
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
condition|)
block|{     }
elseif|else
if|if
condition|(
name|r
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|NO_CHANGE
condition|)
block|{     }
else|else
block|{
specifier|final
name|String
name|m
init|=
literal|"Failure creating "
operator|+
name|name
operator|+
literal|": "
operator|+
name|r
operator|.
name|name
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|UnpackException
argument_list|(
name|CodeType
operator|.
name|SUSPEND_BUNDLE
argument_list|,
name|m
argument_list|)
throw|;
block|}
block|}
DECL|method|openBundle ()
specifier|private
name|TransportBundleStream
name|openBundle
parameter_list|()
block|{
specifier|final
name|URIish
name|uri
init|=
name|makeURI
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportBundleStream
argument_list|(
name|db
argument_list|,
name|uri
argument_list|,
operator|new
name|BundleStream
argument_list|()
argument_list|)
return|;
block|}
DECL|method|makeURI (final NextReceivedBundleResponse in)
specifier|private
specifier|static
name|URIish
name|makeURI
parameter_list|(
specifier|final
name|NextReceivedBundleResponse
name|in
parameter_list|)
block|{
name|URIish
name|u
init|=
operator|new
name|URIish
argument_list|()
decl_stmt|;
name|u
operator|=
name|u
operator|.
name|setScheme
argument_list|(
literal|"codereview-bundle"
argument_list|)
expr_stmt|;
name|u
operator|=
name|u
operator|.
name|setPath
argument_list|(
name|in
operator|.
name|getBundleKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|u
return|;
block|}
DECL|class|BundleStream
specifier|private
class|class
name|BundleStream
extends|extends
name|InputStream
block|{
DECL|field|segmentId
specifier|private
name|int
name|segmentId
init|=
literal|1
decl_stmt|;
DECL|field|totalSegments
specifier|private
specifier|final
name|int
name|totalSegments
init|=
name|in
operator|.
name|getNSegments
argument_list|()
decl_stmt|;
DECL|field|stream
specifier|private
name|InputStream
name|stream
init|=
name|in
operator|.
name|getBundleData
argument_list|()
operator|.
name|newInput
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|r
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|openNextStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|r
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|read (final byte[] b, final int off, final int len)
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|r
init|=
name|stream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
name|openNextStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|r
return|;
block|}
block|}
block|}
DECL|method|openNextStream ()
specifier|private
name|void
name|openNextStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|segmentId
operator|>=
name|totalSegments
condition|)
block|{
name|stream
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|segmentId
operator|++
expr_stmt|;
specifier|final
name|BundleSegmentRequest
operator|.
name|Builder
name|req
decl_stmt|;
name|req
operator|=
name|BundleSegmentRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|req
operator|.
name|setBundleKey
argument_list|(
name|in
operator|.
name|getBundleKey
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setSegmentId
argument_list|(
name|segmentId
argument_list|)
expr_stmt|;
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getBundleStoreService
argument_list|()
operator|.
name|bundleSegment
argument_list|(
name|ctrl
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|BundleSegmentResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|BundleSegmentResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|BundleSegmentResponse
operator|.
name|CodeType
name|sc
init|=
name|rsp
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|sc
operator|==
name|BundleSegmentResponse
operator|.
name|CodeType
operator|.
name|DATA
condition|)
block|{
name|stream
operator|=
name|rsp
operator|.
name|getBundleData
argument_list|()
operator|.
name|newInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ctrl
operator|.
name|setFailed
argument_list|(
name|sc
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bundle"
operator|+
name|in
operator|.
name|getBundleKey
argument_list|()
operator|+
literal|" segment "
operator|+
name|segmentId
operator|+
literal|" unavailable: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

