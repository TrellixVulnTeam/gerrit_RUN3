begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|encodeASCII
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UploadPatchsetFile
operator|.
name|UploadPatchsetFileRequest
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Parses 'git diff-tree' output into {@link FileDiff} objects. */
end_comment

begin_class
DECL|class|DiffReader
class|class
name|DiffReader
block|{
DECL|field|DIFF_GIT
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DIFF_GIT
init|=
name|encodeASCII
argument_list|(
literal|"diff --git a/"
argument_list|)
decl_stmt|;
DECL|field|DIFF_CC
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DIFF_CC
init|=
name|encodeASCII
argument_list|(
literal|"diff --cc "
argument_list|)
decl_stmt|;
DECL|field|H_DELETED_FILE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|H_DELETED_FILE
init|=
name|encodeASCII
argument_list|(
literal|"deleted file "
argument_list|)
decl_stmt|;
DECL|field|H_NEW_FILE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|H_NEW_FILE
init|=
name|encodeASCII
argument_list|(
literal|"new file "
argument_list|)
decl_stmt|;
DECL|field|H_INDEX
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|H_INDEX
init|=
name|encodeASCII
argument_list|(
literal|"index "
argument_list|)
decl_stmt|;
DECL|field|H_NEWPATH
specifier|static
specifier|final
name|byte
index|[]
name|H_NEWPATH
init|=
name|encodeASCII
argument_list|(
literal|"+++ b/"
argument_list|)
decl_stmt|;
DECL|field|H_BINARY
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|H_BINARY
init|=
name|encodeASCII
argument_list|(
literal|"Binary file"
argument_list|)
decl_stmt|;
DECL|field|MAX_PATCH_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PATCH_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// bytes
DECL|method|match (final byte[] key, final byte[] line, int offset)
specifier|static
name|boolean
name|match
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|line
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|remain
init|=
name|line
operator|.
name|length
operator|-
name|offset
decl_stmt|;
if|if
condition|(
name|remain
operator|<
name|key
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|key
operator|.
name|length
condition|;
control|)
block|{
if|if
condition|(
name|key
index|[
name|k
operator|++
index|]
operator|!=
name|line
index|[
name|offset
operator|++
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|str (final byte[] b, final int off)
specifier|private
specifier|static
name|String
name|str
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|)
block|{
return|return
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|Constants
operator|.
name|CHARSET
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
DECL|field|proc
specifier|private
name|Process
name|proc
decl_stmt|;
DECL|field|in
specifier|private
name|RecordInputStream
name|in
decl_stmt|;
DECL|field|current
specifier|private
name|FileDiff
name|current
decl_stmt|;
DECL|field|isMerge
specifier|private
name|boolean
name|isMerge
decl_stmt|;
DECL|method|DiffReader (final Repository db, final RevCommit c)
name|DiffReader
parameter_list|(
specifier|final
name|Repository
name|db
parameter_list|,
specifier|final
name|RevCommit
name|c
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"git"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--git-dir=."
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"diff-tree"
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--cc"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-M"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--full-index"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|isMerge
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--unified=1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-M"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--full-index"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|c
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|getTree
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"--unified=1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-M"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"--full-index"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
operator|new
name|ObjectWriter
argument_list|(
name|db
argument_list|)
operator|.
name|writeTree
argument_list|(
operator|new
name|Tree
argument_list|(
name|db
argument_list|)
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|proc
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
name|db
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|getErrorStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|RecordInputStream
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMerge
condition|)
block|{
comment|// A diff --cc output from diff-tree starts with one line
comment|// holding the commit we passed in as an argument.
comment|//
name|in
operator|.
name|readRecord
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|next ()
name|FileDiff
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readOneDiff
argument_list|()
return|;
block|}
DECL|method|readOneDiff ()
specifier|private
name|FileDiff
name|readOneDiff
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|consume
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|byte
index|[]
name|hdr
init|=
name|in
operator|.
name|readRecord
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|hdr
operator|==
literal|null
condition|)
block|{
specifier|final
name|FileDiff
name|prior
init|=
name|current
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|prior
return|;
block|}
if|if
condition|(
operator|(
name|isMerge
operator|&&
name|match
argument_list|(
name|DIFF_CC
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|isMerge
operator|&&
name|match
argument_list|(
name|DIFF_GIT
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|FileDiff
name|prior
init|=
name|current
decl_stmt|;
name|current
operator|=
operator|new
name|FileDiff
argument_list|()
expr_stmt|;
name|current
operator|.
name|appendLine
argument_list|(
name|hdr
argument_list|)
expr_stmt|;
comment|// TODO(sop) This can split the old and new names wrong if the
comment|// old name was "f b/c". Until we can do diffs in-core we'll
comment|// just assume nobody uses spaces in filenames.
comment|//
specifier|final
name|String
name|hdrStr
init|=
name|str
argument_list|(
name|hdr
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMerge
condition|)
block|{
name|current
operator|.
name|setFilename
argument_list|(
name|hdrStr
operator|.
name|substring
argument_list|(
name|DIFF_CC
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|newpos
init|=
name|hdrStr
operator|.
name|indexOf
argument_list|(
literal|" b/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|newpos
operator|>
literal|0
condition|)
block|{
name|current
operator|.
name|setFilename
argument_list|(
name|hdrStr
operator|.
name|substring
argument_list|(
name|newpos
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prior
operator|!=
literal|null
condition|)
block|{
return|return
name|prior
return|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|isMerge
operator|&&
name|match
argument_list|(
name|H_INDEX
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|current
operator|.
name|setBaseId
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|hdr
argument_list|,
name|H_INDEX
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|.
name|setFinalId
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|hdr
argument_list|,
name|H_INDEX
operator|.
name|length
operator|+
name|Constants
operator|.
name|OBJECT_ID_LENGTH
operator|*
literal|2
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|H_NEW_FILE
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|current
operator|.
name|setStatus
argument_list|(
name|StatusType
operator|.
name|ADD
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|H_DELETED_FILE
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|current
operator|.
name|setStatus
argument_list|(
name|StatusType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|H_BINARY
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|current
operator|.
name|setBinary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|match
argument_list|(
name|H_NEWPATH
argument_list|,
name|hdr
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|current
operator|.
name|setFilename
argument_list|(
name|str
argument_list|(
name|hdr
argument_list|,
name|H_NEWPATH
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consume
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|getPatchSize
argument_list|()
operator|+
name|hdr
operator|.
name|length
operator|>=
name|MAX_PATCH_SIZE
condition|)
block|{
name|current
operator|.
name|truncatePatch
argument_list|()
expr_stmt|;
name|consume
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|appendLine
argument_list|(
name|hdr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|proc
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
end_class

end_unit

