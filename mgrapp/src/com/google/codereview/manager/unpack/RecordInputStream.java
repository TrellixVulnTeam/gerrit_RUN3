begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/** Buffering input stream which can read entire lines. */
end_comment

begin_class
DECL|class|RecordInputStream
class|class
name|RecordInputStream
extends|extends
name|InputStream
block|{
DECL|field|in
specifier|private
name|InputStream
name|in
decl_stmt|;
DECL|field|buf
specifier|private
name|byte
index|[]
name|buf
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|end
specifier|private
name|int
name|end
decl_stmt|;
DECL|method|RecordInputStream (final InputStream in)
name|RecordInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
literal|4096
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|=
literal|null
expr_stmt|;
name|buf
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|fill ()
specifier|private
name|boolean
name|fill
parameter_list|()
throws|throws
name|IOException
block|{
name|pos
operator|=
literal|0
expr_stmt|;
name|end
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
name|end
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|==
name|end
operator|&&
operator|!
name|fill
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|buf
index|[
name|pos
operator|++
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|read (final byte[] b, final int off, final int len)
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|==
name|end
operator|&&
operator|!
name|fill
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|cnt
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|end
operator|-
name|pos
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|cnt
expr_stmt|;
return|return
name|cnt
return|;
block|}
comment|/**    * Read a record terminated by the separator byte.    *     * @param sep byte which delimits the end of a record.    * @return record content, with the separator removed from the end. The empty    *         array indicates an empty record; null indicates stream EOF.    * @throws IOException the stream could not be read from.    */
DECL|method|readRecord (final int sep)
name|byte
index|[]
name|readRecord
parameter_list|(
specifier|final
name|int
name|sep
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|==
name|end
operator|&&
operator|!
name|fill
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|line
init|=
name|fastReadRecord
argument_list|(
name|sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
return|return
name|line
return|;
block|}
if|if
condition|(
name|end
operator|-
name|pos
operator|<=
name|buf
operator|.
name|length
operator|/
literal|2
condition|)
block|{
name|int
name|cnt
init|=
name|end
operator|-
name|pos
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|end
operator|=
name|cnt
expr_stmt|;
name|cnt
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|end
argument_list|,
name|buf
operator|.
name|length
operator|-
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|<
literal|0
condition|)
block|{
specifier|final
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|end
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|r
argument_list|,
literal|0
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|pos
operator|=
name|end
operator|=
literal|0
expr_stmt|;
return|return
name|r
return|;
block|}
name|end
operator|+=
name|cnt
expr_stmt|;
name|line
operator|=
name|fastReadRecord
argument_list|(
name|sep
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
return|return
name|line
return|;
block|}
block|}
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|end
operator|-
name|pos
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|fill
argument_list|()
condition|)
block|{
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
for|for
control|(
name|int
name|lf
init|=
name|pos
init|;
name|lf
operator|<
name|end
condition|;
name|lf
operator|++
control|)
block|{
if|if
condition|(
name|buf
index|[
name|lf
index|]
operator|==
name|sep
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|lf
operator|-
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|=
name|lf
operator|+
literal|1
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|end
operator|-
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|=
name|end
expr_stmt|;
block|}
block|}
DECL|method|fastReadRecord (final int sep)
specifier|private
name|byte
index|[]
name|fastReadRecord
parameter_list|(
specifier|final
name|int
name|sep
parameter_list|)
block|{
for|for
control|(
name|int
name|lf
init|=
name|pos
init|;
name|lf
operator|<
name|end
condition|;
name|lf
operator|++
control|)
block|{
if|if
condition|(
name|buf
index|[
name|lf
index|]
operator|==
name|sep
condition|)
block|{
specifier|final
name|int
name|cnt
init|=
name|lf
operator|-
name|pos
decl_stmt|;
specifier|final
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|cnt
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|r
argument_list|,
literal|0
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|pos
operator|=
name|lf
operator|+
literal|1
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

