begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|encodeASCII
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UploadPatchsetFile
operator|.
name|UploadPatchsetFileRequest
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Computed difference for a single file. */
end_comment

begin_class
DECL|class|FileDiff
class|class
name|FileDiff
block|{
DECL|field|baseId
specifier|private
name|ObjectId
name|baseId
decl_stmt|;
DECL|field|finalId
specifier|private
name|ObjectId
name|finalId
decl_stmt|;
DECL|field|filename
specifier|private
name|String
name|filename
decl_stmt|;
DECL|field|binary
specifier|private
name|boolean
name|binary
decl_stmt|;
DECL|field|truncated
specifier|private
name|boolean
name|truncated
decl_stmt|;
DECL|field|lines
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|status
specifier|private
name|StatusType
name|status
init|=
name|StatusType
operator|.
name|MODIFY
decl_stmt|;
DECL|field|linesSize
specifier|private
name|int
name|linesSize
decl_stmt|;
DECL|method|getBaseId ()
name|ObjectId
name|getBaseId
parameter_list|()
block|{
return|return
name|baseId
return|;
block|}
DECL|method|setBaseId (final AnyObjectId id)
name|void
name|setBaseId
parameter_list|(
specifier|final
name|AnyObjectId
name|id
parameter_list|)
block|{
name|baseId
operator|=
name|id
operator|.
name|toObjectId
argument_list|()
expr_stmt|;
block|}
DECL|method|getFinalId ()
name|ObjectId
name|getFinalId
parameter_list|()
block|{
return|return
name|finalId
return|;
block|}
DECL|method|setFinalId (final AnyObjectId id)
name|void
name|setFinalId
parameter_list|(
specifier|final
name|AnyObjectId
name|id
parameter_list|)
block|{
name|finalId
operator|=
name|id
operator|.
name|toObjectId
argument_list|()
expr_stmt|;
block|}
DECL|method|getFilename ()
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|filename
return|;
block|}
DECL|method|setFilename (final String name)
name|void
name|setFilename
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|filename
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getStatus ()
name|StatusType
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus (final StatusType t)
name|void
name|setStatus
parameter_list|(
specifier|final
name|StatusType
name|t
parameter_list|)
block|{
name|status
operator|=
name|t
expr_stmt|;
block|}
DECL|method|isBinary ()
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
name|binary
return|;
block|}
DECL|method|setBinary (final boolean b)
name|void
name|setBinary
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
block|{
name|binary
operator|=
name|b
expr_stmt|;
block|}
DECL|method|isTruncated ()
name|boolean
name|isTruncated
parameter_list|()
block|{
return|return
name|truncated
return|;
block|}
DECL|method|setTruncated (final boolean b)
name|void
name|setTruncated
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
block|{
name|truncated
operator|=
name|b
expr_stmt|;
block|}
DECL|method|getPatch ()
name|byte
index|[]
name|getPatch
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|r
init|=
operator|new
name|byte
index|[
name|linesSize
operator|+
name|lines
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|line
range|:
name|lines
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|line
argument_list|,
literal|0
argument_list|,
name|r
argument_list|,
name|pos
argument_list|,
name|line
operator|.
name|length
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|line
operator|.
name|length
expr_stmt|;
name|r
index|[
name|pos
operator|++
index|]
operator|=
literal|'\n'
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|getPatchSize ()
name|int
name|getPatchSize
parameter_list|()
block|{
return|return
name|linesSize
return|;
block|}
DECL|method|appendLine (final byte[] line)
name|void
name|appendLine
parameter_list|(
specifier|final
name|byte
index|[]
name|line
parameter_list|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|linesSize
operator|+=
name|line
operator|.
name|length
expr_stmt|;
block|}
DECL|method|truncatePatch ()
name|void
name|truncatePatch
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|oldLines
init|=
name|lines
decl_stmt|;
name|linesSize
operator|=
literal|0
expr_stmt|;
name|lines
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|b
range|:
name|oldLines
control|)
block|{
name|appendLine
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|DiffReader
operator|.
name|match
argument_list|(
name|DiffReader
operator|.
name|H_NEWPATH
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|appendLine
argument_list|(
name|encodeASCII
argument_list|(
literal|"File content is too large to display"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

