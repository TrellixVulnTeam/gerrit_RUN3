begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager.unpack
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|unpack
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|NextReceivedBundleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|NextReceivedBundle
operator|.
name|NextReceivedBundleResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UpdateReceivedBundle
operator|.
name|UpdateReceivedBundleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|UpdateReceivedBundle
operator|.
name|UpdateReceivedBundleResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|Backend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
operator|.
name|StopProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
operator|.
name|SimpleController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|util
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/** Obtains newly received bundles and unpacks them into Git. */
end_comment

begin_class
DECL|class|ReceivedBundleUnpacker
specifier|public
class|class
name|ReceivedBundleUnpacker
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReceivedBundleUnpacker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEXT_REQ
specifier|private
specifier|static
specifier|final
name|NextReceivedBundleRequest
name|NEXT_REQ
init|=
name|NextReceivedBundleRequest
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|Backend
name|server
decl_stmt|;
DECL|method|ReceivedBundleUnpacker (final Backend be)
specifier|public
name|ReceivedBundleUnpacker
parameter_list|(
specifier|final
name|Backend
name|be
parameter_list|)
block|{
name|server
operator|=
name|be
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unexpected runtime failure"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unexpected runtime failure"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
DECL|method|runImpl ()
specifier|private
name|void
name|runImpl
parameter_list|()
block|{
name|boolean
name|tryAnother
decl_stmt|;
do|do
block|{
name|tryAnother
operator|=
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|tryAnother
condition|)
do|;
block|}
DECL|method|next ()
specifier|private
name|boolean
name|next
parameter_list|()
block|{
specifier|final
name|MutableBoolean
name|tryAnother
init|=
operator|new
name|MutableBoolean
argument_list|()
decl_stmt|;
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getBundleStoreService
argument_list|()
operator|.
name|nextReceivedBundle
argument_list|(
name|ctrl
argument_list|,
name|NEXT_REQ
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|NextReceivedBundleResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|NextReceivedBundleResponse
name|rsp
parameter_list|)
block|{
name|tryAnother
operator|.
name|value
operator|=
name|unpack
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"nextReceivedBundle failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
name|tryAnother
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|tryAnother
operator|.
name|value
return|;
block|}
DECL|method|unpack (final NextReceivedBundleResponse rsp)
specifier|private
name|boolean
name|unpack
parameter_list|(
specifier|final
name|NextReceivedBundleResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|NextReceivedBundleResponse
operator|.
name|CodeType
name|sc
init|=
name|rsp
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|sc
operator|==
name|NextReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|QUEUE_EMPTY
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sc
operator|==
name|NextReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|BUNDLE_AVAILABLE
condition|)
block|{
name|send
argument_list|(
name|unpackImpl
argument_list|(
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|StopProcessingException
argument_list|(
literal|"unknown status "
operator|+
name|sc
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|unpackImpl ( final NextReceivedBundleResponse rsp)
specifier|protected
name|UpdateReceivedBundleRequest
name|unpackImpl
parameter_list|(
specifier|final
name|NextReceivedBundleResponse
name|rsp
parameter_list|)
block|{
return|return
operator|new
name|UnpackBundleOp
argument_list|(
name|server
argument_list|,
name|rsp
argument_list|)
operator|.
name|unpack
argument_list|()
return|;
block|}
DECL|method|send (final UpdateReceivedBundleRequest req)
specifier|private
name|void
name|send
parameter_list|(
specifier|final
name|UpdateReceivedBundleRequest
name|req
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|req
operator|.
name|getBundleKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sc
init|=
name|req
operator|.
name|getStatusCode
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bundle "
operator|+
name|key
operator|+
literal|", status "
operator|+
name|sc
argument_list|)
expr_stmt|;
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getBundleStoreService
argument_list|()
operator|.
name|updateReceivedBundle
argument_list|(
name|ctrl
argument_list|,
name|req
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|UpdateReceivedBundleResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|UpdateReceivedBundleResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|UpdateReceivedBundleResponse
operator|.
name|CodeType
name|sc
init|=
name|rsp
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
name|UpdateReceivedBundleResponse
operator|.
name|CodeType
operator|.
name|UPDATED
condition|)
block|{
name|ctrl
operator|.
name|setFailed
argument_list|(
name|sc
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Updating bundle "
operator|+
name|key
operator|+
literal|" failed: "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

