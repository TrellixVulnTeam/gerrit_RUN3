begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.manager
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SyncProject
operator|.
name|BranchSync
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SyncProject
operator|.
name|SyncProjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|internal
operator|.
name|SyncProject
operator|.
name|SyncProjectResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
operator|.
name|SimpleController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|util
operator|.
name|GitMetaUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ProjectSync
specifier|public
class|class
name|ProjectSync
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProjectSync
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|Backend
name|server
decl_stmt|;
DECL|method|ProjectSync (final Backend be)
specifier|public
name|ProjectSync
parameter_list|(
specifier|final
name|Backend
name|be
parameter_list|)
block|{
name|server
operator|=
name|be
expr_stmt|;
block|}
DECL|method|sync ()
specifier|public
name|void
name|sync
parameter_list|()
block|{
name|syncDirectoryImpl
argument_list|(
name|server
operator|.
name|getRepositoryCache
argument_list|()
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|syncDirectoryImpl (final File root, final String prefix)
specifier|private
name|void
name|syncDirectoryImpl
parameter_list|(
specifier|final
name|File
name|root
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
block|{
specifier|final
name|File
index|[]
name|entries
init|=
name|root
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|File
name|f
range|:
name|entries
control|)
block|{
specifier|final
name|String
name|fName
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|fName
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|fullName
init|=
name|prefix
operator|+
name|fName
decl_stmt|;
specifier|final
name|Repository
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|GitMetaUtil
operator|.
name|open
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot open "
operator|+
name|f
operator|+
literal|": "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fullName
operator|.
name|endsWith
argument_list|(
literal|".git"
argument_list|)
condition|)
block|{
name|fullName
operator|=
name|fullName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullName
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
name|sync
argument_list|(
name|fullName
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|syncDirectoryImpl
argument_list|(
name|f
argument_list|,
name|fullName
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sync (final String name, final Repository db)
specifier|public
name|void
name|sync
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Repository
name|db
parameter_list|)
block|{
specifier|final
name|SyncProjectRequest
operator|.
name|Builder
name|req
init|=
name|SyncProjectRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setProjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|db
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Ref
name|ref
range|:
name|db
operator|.
name|getAllRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
specifier|final
name|RevCommit
name|c
decl_stmt|;
try|try
block|{
name|c
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|e
parameter_list|)
block|{
continue|continue;
block|}
name|req
operator|.
name|addBranch
argument_list|(
name|toBranch
argument_list|(
name|ref
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot synchronize "
operator|+
name|name
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|send
argument_list|(
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toBranch (final Ref r, final RevCommit c)
specifier|private
name|BranchSync
name|toBranch
parameter_list|(
specifier|final
name|Ref
name|r
parameter_list|,
specifier|final
name|RevCommit
name|c
parameter_list|)
block|{
specifier|final
name|BranchSync
operator|.
name|Builder
name|bs
init|=
name|BranchSync
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|bs
operator|.
name|setBranchName
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bs
operator|.
name|setCommit
argument_list|(
name|GitMetaUtil
operator|.
name|toGitCommit
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bs
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|send (final SyncProjectRequest req)
specifier|private
name|void
name|send
parameter_list|(
specifier|final
name|SyncProjectRequest
name|req
parameter_list|)
block|{
specifier|final
name|SimpleController
name|ctrl
init|=
operator|new
name|SimpleController
argument_list|()
decl_stmt|;
name|server
operator|.
name|getAdminService
argument_list|()
operator|.
name|syncProject
argument_list|(
name|ctrl
argument_list|,
name|req
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|SyncProjectResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|SyncProjectResponse
name|rsp
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrl
operator|.
name|failed
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|req
operator|.
name|getProjectName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"syncProject "
operator|+
name|name
operator|+
literal|": "
operator|+
name|ctrl
operator|.
name|errorText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

