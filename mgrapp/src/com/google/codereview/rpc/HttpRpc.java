begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.codereview.rpc
package|package
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|codereview
operator|.
name|NeedRetry
operator|.
name|RetryRequestLaterResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HostConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|MultiThreadedHttpConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|URIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PostMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|params
operator|.
name|HttpConnectionManagerParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_comment
comment|/**  * Simple protocol buffer RPC embedded inside HTTP POST.  *<p>  * Request messages are POSTed to "/proto/$serviceName/$methodName".  * Authentication for the user is always obtained via the user's Google Account,  * with session cookies automatically renewing themselves if expired.  *<p>  * This implementation is thread safe. Callers may use a single HttpRpc over  * multiple threads in order to pool and reuse connections across threads.  *<p>  * All remote calls are performed synchronously. This is a simplification within  * the implementation, as it is unlikely the remote side can support parallel  * requests over the same top level entities.  *<p>  * Authentication is tied to Google accounts.  */
end_comment

begin_class
DECL|class|HttpRpc
specifier|public
class|class
name|HttpRpc
implements|implements
name|RpcChannel
block|{
DECL|field|ENC
specifier|private
specifier|static
specifier|final
name|String
name|ENC
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|RETRY_LATER
specifier|private
specifier|static
specifier|final
name|Message
name|RETRY_LATER
init|=
name|RetryRequestLaterResponse
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
comment|/** URL required to authenticate the user into their Google account. */
DECL|field|LOGIN
specifier|private
specifier|static
specifier|final
name|URI
name|LOGIN
decl_stmt|;
comment|/**    * Maximum number of connections we should make to 'production' servers.    *<p>    * If the servers are running on Google owned infrastructure such as the    * www.google.com or Google App Engine we can generally push at least one or    * two connections per thread without causing any trouble.    */
DECL|field|MAX_PROD_CONNS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PROD_CONNS
init|=
literal|10
decl_stmt|;
comment|/** Special token used in authentication to verify we were successful. */
DECL|field|AUTH_CONTINUE_TOKEN
specifier|private
specifier|static
specifier|final
name|String
name|AUTH_CONTINUE_TOKEN
init|=
literal|"http://localhost/"
decl_stmt|;
static|static
block|{
try|try
block|{
name|LOGIN
operator|=
operator|new
name|URI
argument_list|(
literal|"https://www.google.com/accounts/ClientLogin"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URIException
name|err
parameter_list|)
block|{
specifier|final
name|ExceptionInInitializerError
name|le
decl_stmt|;
name|le
operator|=
operator|new
name|ExceptionInInitializerError
argument_list|(
literal|"Bad LOGIN URL"
argument_list|)
expr_stmt|;
name|le
operator|.
name|initCause
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
name|le
throw|;
block|}
block|}
DECL|field|http
specifier|private
specifier|final
name|HttpClient
name|http
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|URI
name|server
decl_stmt|;
DECL|field|userEmail
specifier|private
specifier|final
name|String
name|userEmail
decl_stmt|;
DECL|field|userPassword
specifier|private
specifier|final
name|String
name|userPassword
decl_stmt|;
DECL|field|apiKey
specifier|private
specifier|final
name|byte
index|[]
name|apiKey
decl_stmt|;
DECL|field|authenticated
specifier|private
name|boolean
name|authenticated
decl_stmt|;
comment|/**    * Create a new RPC implementation.    *     * @param host protocol, server host, and port number. The path component is    *        ignored as requests are made absolute ('/proto/$service/$method').    * @param user name to authenticate to Google with. This is very likely the    *        user's email address.    * @param pass password for the user's Google account.    * @param apiKeyStr (optional) the internal API key. If supplied all requests    *        will be signed with the key, in case the request requires the    *        internal API authentication.    */
DECL|method|HttpRpc (final URL host, final String user, final String pass, final String apiKeyStr)
specifier|public
name|HttpRpc
parameter_list|(
specifier|final
name|URL
name|host
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|pass
parameter_list|,
specifier|final
name|String
name|apiKeyStr
parameter_list|)
block|{
name|http
operator|=
operator|new
name|HttpClient
argument_list|(
operator|new
name|MultiThreadedHttpConnectionManager
argument_list|()
argument_list|)
expr_stmt|;
name|userEmail
operator|=
name|user
expr_stmt|;
name|userPassword
operator|=
name|pass
expr_stmt|;
name|apiKey
operator|=
name|apiKeyStr
operator|!=
literal|null
condition|?
name|Base64
operator|.
name|decode
argument_list|(
name|apiKeyStr
argument_list|)
else|:
literal|null
expr_stmt|;
specifier|final
name|HttpConnectionManagerParams
name|params
init|=
name|http
operator|.
name|getHttpConnectionManager
argument_list|()
operator|.
name|getParams
argument_list|()
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|URI
argument_list|(
name|host
operator|.
name|toExternalForm
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|HostConfiguration
name|serverConfig
init|=
operator|new
name|HostConfiguration
argument_list|()
decl_stmt|;
name|serverConfig
operator|.
name|setHost
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// The development server cannot do normal authentication so we must
comment|// fake it here by injecting a development server specific cookie.
comment|//
if|if
condition|(
literal|"localhost"
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|userEmail
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Cookie
name|c
init|=
operator|new
name|Cookie
argument_list|()
decl_stmt|;
name|c
operator|.
name|setDomain
argument_list|(
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
literal|"dev_appserver_login"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setValue
argument_list|(
name|userEmail
operator|+
literal|":False"
argument_list|)
expr_stmt|;
name|http
operator|.
name|getState
argument_list|()
operator|.
name|addCookie
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|authenticated
operator|=
literal|true
expr_stmt|;
name|params
operator|.
name|setMaxConnectionsPerHost
argument_list|(
name|serverConfig
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|setMaxConnectionsPerHost
argument_list|(
name|serverConfig
argument_list|,
name|MAX_PROD_CONNS
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HostConfiguration
name|clientLoginConfig
init|=
operator|new
name|HostConfiguration
argument_list|()
decl_stmt|;
name|clientLoginConfig
operator|.
name|setHost
argument_list|(
name|LOGIN
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMaxConnectionsPerHost
argument_list|(
name|clientLoginConfig
argument_list|,
name|MAX_PROD_CONNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad URL: "
operator|+
name|host
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|callMethod (final MethodDescriptor method, final RpcController controller, final Message request, final Message responsePrototype, final RpcCallback<Message> done)
specifier|public
name|void
name|callMethod
parameter_list|(
specifier|final
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
specifier|final
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
specifier|final
name|URI
name|uri
decl_stmt|;
specifier|final
name|String
name|svcName
init|=
name|method
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|server
argument_list|,
literal|"/proto/"
operator|+
name|svcName
operator|+
literal|"/"
operator|+
name|methodName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URIException
name|urlError
parameter_list|)
block|{
name|controller
operator|.
name|setFailed
argument_list|(
name|urlError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|MessageRequestEntity
name|entity
decl_stmt|;
try|try
block|{
name|entity
operator|=
operator|new
name|MessageRequestEntity
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|controller
operator|.
name|setFailed
argument_list|(
literal|"cannot encode request: "
operator|+
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|controller
operator|instanceof
name|SimpleController
condition|)
block|{
operator|(
operator|(
name|SimpleController
operator|)
name|controller
operator|)
operator|.
name|markFirstRequest
argument_list|()
expr_stmt|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|PostMethod
name|conn
init|=
operator|new
name|PostMethod
argument_list|()
decl_stmt|;
name|Message
name|responseMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setDoAuthentication
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|ensureAuthenticated
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|1
init|;
name|responseMessage
operator|==
literal|null
condition|;
name|attempts
operator|++
control|)
block|{
if|if
condition|(
name|apiKey
operator|!=
literal|null
condition|)
block|{
name|sign
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|status
init|=
name|http
operator|.
name|executeMethod
argument_list|(
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|HttpStatus
operator|.
name|SC_OK
operator|==
name|status
condition|)
block|{
name|responseMessage
operator|=
name|parseResponse
argument_list|(
name|conn
argument_list|,
name|responsePrototype
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|HttpStatus
operator|.
name|SC_UNAUTHORIZED
operator|==
name|status
condition|)
block|{
if|if
condition|(
name|attempts
operator|==
literal|2
condition|)
block|{
name|responseMessage
operator|=
literal|null
expr_stmt|;
name|controller
operator|.
name|setFailed
argument_list|(
literal|"Authentication required"
argument_list|)
expr_stmt|;
break|break;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|authenticated
operator|=
literal|false
expr_stmt|;
name|ensureAuthenticated
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|HttpStatus
operator|.
name|SC_FORBIDDEN
operator|==
name|status
operator|||
name|HttpStatus
operator|.
name|SC_NOT_FOUND
operator|==
name|status
operator|||
name|HttpStatus
operator|.
name|SC_UNSUPPORTED_MEDIA_TYPE
operator|==
name|status
condition|)
block|{
name|String
name|body
init|=
name|conn
operator|.
name|getResponseBodyAsString
argument_list|(
literal|60
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>
literal|0
condition|)
name|body
operator|=
name|body
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|body
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|responseMessage
operator|=
literal|null
expr_stmt|;
name|controller
operator|.
name|setFailed
argument_list|(
name|svcName
operator|+
literal|": "
operator|+
name|body
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|responseMessage
operator|=
literal|null
expr_stmt|;
name|controller
operator|.
name|setFailed
argument_list|(
literal|"HTTP failure: "
operator|+
name|status
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ConnectException
name|ce
parameter_list|)
block|{
specifier|final
name|String
name|why
init|=
name|ce
operator|.
name|getMessage
argument_list|()
operator|+
literal|" "
operator|+
name|server
decl_stmt|;
if|if
condition|(
name|controller
operator|instanceof
name|SimpleController
condition|)
block|{
specifier|final
name|SimpleController
name|sc
init|=
operator|(
name|SimpleController
operator|)
name|controller
decl_stmt|;
if|if
condition|(
name|sc
operator|.
name|retry
argument_list|()
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|controller
operator|.
name|setFailed
argument_list|(
name|controller
operator|.
name|errorText
argument_list|()
operator|+
literal|": "
operator|+
name|why
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|controller
operator|.
name|setFailed
argument_list|(
name|why
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|controller
operator|.
name|setFailed
argument_list|(
literal|"HTTP failure: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
finally|finally
block|{
name|conn
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|responseMessage
operator|instanceof
name|RetryRequestLaterResponse
condition|)
block|{
if|if
condition|(
name|controller
operator|instanceof
name|SimpleController
condition|)
block|{
specifier|final
name|SimpleController
name|sc
init|=
operator|(
name|SimpleController
operator|)
name|controller
decl_stmt|;
if|if
condition|(
name|sc
operator|.
name|retry
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
name|controller
operator|.
name|setFailed
argument_list|(
literal|"remote requested retry"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|responseMessage
operator|!=
literal|null
condition|)
block|{
name|done
operator|.
name|run
argument_list|(
name|responseMessage
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|entity
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
DECL|method|parseResponse (final PostMethod conn, final Message responsePrototype)
specifier|private
name|Message
name|parseResponse
parameter_list|(
specifier|final
name|PostMethod
name|conn
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Header
name|typeHeader
init|=
name|conn
operator|.
name|getResponseHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeHeader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No Content-Type in response"
argument_list|)
throw|;
block|}
specifier|final
name|String
index|[]
name|typeTokens
init|=
name|typeHeader
operator|.
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|"; "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MessageRequestEntity
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|typeTokens
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid Content-Type "
operator|+
name|typeHeader
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|rspName
init|=
literal|null
decl_stmt|;
name|String
name|rspCompress
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|typeTokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|tok
init|=
name|typeTokens
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|startsWith
argument_list|(
literal|"name="
argument_list|)
condition|)
block|{
name|rspName
operator|=
name|tok
operator|.
name|substring
argument_list|(
literal|"name="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|startsWith
argument_list|(
literal|"compress="
argument_list|)
condition|)
block|{
name|rspCompress
operator|=
name|tok
operator|.
name|substring
argument_list|(
literal|"compress="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|expName
init|=
name|responsePrototype
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|getFullName
argument_list|()
decl_stmt|;
specifier|final
name|Builder
name|builder
decl_stmt|;
if|if
condition|(
name|expName
operator|.
name|equals
argument_list|(
name|rspName
argument_list|)
condition|)
block|{
name|builder
operator|=
name|responsePrototype
operator|.
name|newBuilderForType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rspName
operator|.
name|equals
argument_list|(
name|RETRY_LATER
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|=
name|RETRY_LATER
operator|.
name|newBuilderForType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected a "
operator|+
name|expName
operator|+
literal|" got "
operator|+
name|rspName
argument_list|)
throw|;
block|}
name|InputStream
name|in
init|=
name|conn
operator|.
name|getResponseBodyAsStream
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"deflate"
operator|.
name|equals
argument_list|(
name|rspCompress
argument_list|)
condition|)
block|{
name|in
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rspCompress
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported compression "
operator|+
name|rspCompress
argument_list|)
throw|;
block|}
try|try
block|{
name|builder
operator|.
name|mergeFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|ensureAuthenticated ()
specifier|private
specifier|synchronized
name|void
name|ensureAuthenticated
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|authenticated
condition|)
block|{
if|if
condition|(
name|userEmail
operator|!=
literal|null
operator|&&
name|userPassword
operator|!=
literal|null
condition|)
block|{
name|computeAuthCookie
argument_list|(
name|computeAuthToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|authenticated
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|computeAuthToken ()
specifier|private
name|String
name|computeAuthToken
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|PostMethod
name|conn
init|=
operator|new
name|PostMethod
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setDoAuthentication
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setURI
argument_list|(
name|LOGIN
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestBody
argument_list|(
operator|new
name|NameValuePair
index|[]
block|{
operator|new
name|NameValuePair
argument_list|(
literal|"Email"
argument_list|,
name|userEmail
argument_list|)
block|,
operator|new
name|NameValuePair
argument_list|(
literal|"Passwd"
argument_list|,
name|userPassword
argument_list|)
block|,
operator|new
name|NameValuePair
argument_list|(
literal|"service"
argument_list|,
literal|"ah"
argument_list|)
block|,
operator|new
name|NameValuePair
argument_list|(
literal|"source"
argument_list|,
literal|"gerrit-codereview-manager"
argument_list|)
block|,
operator|new
name|NameValuePair
argument_list|(
literal|"accountType"
argument_list|,
literal|"HOSTED_OR_GOOGLE"
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|int
name|status
init|=
name|http
operator|.
name|executeMethod
argument_list|(
name|conn
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsp
init|=
name|splitPairs
argument_list|(
name|conn
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authentication failed: "
operator|+
name|rsp
operator|.
name|get
argument_list|(
literal|"Error"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|rsp
operator|.
name|get
argument_list|(
literal|"Auth"
argument_list|)
return|;
block|}
finally|finally
block|{
name|conn
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|computeAuthCookie (final String authToken)
specifier|private
name|void
name|computeAuthCookie
parameter_list|(
specifier|final
name|String
name|authToken
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|GetMethod
name|conn
init|=
operator|new
name|GetMethod
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoAuthentication
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setURI
argument_list|(
operator|new
name|URI
argument_list|(
name|server
argument_list|,
literal|"/_ah/login"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setQueryString
argument_list|(
operator|new
name|NameValuePair
index|[]
block|{
operator|new
name|NameValuePair
argument_list|(
literal|"continue"
argument_list|,
name|AUTH_CONTINUE_TOKEN
argument_list|)
block|,
operator|new
name|NameValuePair
argument_list|(
literal|"auth"
argument_list|,
name|authToken
argument_list|)
block|,}
argument_list|)
expr_stmt|;
specifier|final
name|int
name|status
init|=
name|http
operator|.
name|executeMethod
argument_list|(
name|conn
argument_list|)
decl_stmt|;
specifier|final
name|Header
name|location
init|=
name|conn
operator|.
name|getResponseHeader
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|HttpStatus
operator|.
name|SC_MOVED_TEMPORARILY
operator|||
name|location
operator|==
literal|null
operator|||
operator|!
name|AUTH_CONTINUE_TOKEN
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Obtaining authentication cookie failed: "
operator|+
name|status
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|conn
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|splitPairs (final InputStream cin)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|splitPairs
parameter_list|(
specifier|final
name|InputStream
name|cin
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|cin
argument_list|,
name|ENC
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|eq
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|eq
operator|>=
literal|0
condition|)
block|{
name|rsp
operator|.
name|put
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eq
argument_list|)
argument_list|,
name|line
operator|.
name|substring
argument_list|(
name|eq
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|rsp
return|;
block|}
DECL|method|sign (final PostMethod conn)
specifier|private
name|void
name|sign
parameter_list|(
specifier|final
name|PostMethod
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|conn
operator|.
name|setRequestHeader
argument_list|(
literal|"X-Date-UTC"
argument_list|,
name|xDateUTC
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"POST "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|conn
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"X-Date-UTC: "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|conn
operator|.
name|getRequestHeader
argument_list|(
literal|"X-Date-UTC"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Content-Type: "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|conn
operator|.
name|getRequestEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sec
decl_stmt|;
try|try
block|{
specifier|final
name|Mac
name|m
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacSHA1"
argument_list|)
decl_stmt|;
name|m
operator|.
name|init
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|apiKey
argument_list|,
literal|"HmacSHA1"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|update
argument_list|(
name|b
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|getRequestEntity
argument_list|()
operator|.
name|writeRequest
argument_list|(
operator|new
name|OutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|m
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|m
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sec
operator|=
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|m
operator|.
name|doFinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No HmacSHA1 support:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid key: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|conn
operator|.
name|setRequestHeader
argument_list|(
literal|"Authorization"
argument_list|,
literal|"proto :"
operator|+
name|sec
argument_list|)
expr_stmt|;
block|}
DECL|method|xDateUTC ()
specifier|private
name|String
name|xDateUTC
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000L
argument_list|)
return|;
block|}
block|}
end_class

end_unit

