begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.lucene
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|AbstractLuceneIndex
operator|.
name|sortFieldName
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|LuceneVersionManager
operator|.
name|CHANGES_PREFIX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|QueueProvider
operator|.
name|QueueType
operator|.
name|INTERACTIVE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|CHANGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|LEGACY_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|PROJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexRewriter
operator|.
name|CLOSED_STATUSES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexRewriter
operator|.
name|OPEN_STATUSES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|FieldDef
operator|.
name|FillArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|ChangeProtoField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|PatchSetApprovalProtoField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
operator|.
name|PatchSetProtoField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexRewriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeDataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|ProtobufCodec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Secondary index implementation using Apache Lucene.  *<p>  * Writes are managed using a single {@link IndexWriter} per process, committed  * aggressively. Reads use {@link SearcherManager} and periodically refresh,  * though there may be some lag between a committed write and it showing up to  * other threads' searchers.  */
end_comment

begin_class
DECL|class|LuceneChangeIndex
specifier|public
class|class
name|LuceneChangeIndex
implements|implements
name|ChangeIndex
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneChangeIndex
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CHANGES_OPEN
specifier|public
specifier|static
specifier|final
name|String
name|CHANGES_OPEN
init|=
literal|"open"
decl_stmt|;
DECL|field|CHANGES_CLOSED
specifier|public
specifier|static
specifier|final
name|String
name|CHANGES_CLOSED
init|=
literal|"closed"
decl_stmt|;
DECL|field|UPDATED_SORT_FIELD
specifier|static
specifier|final
name|String
name|UPDATED_SORT_FIELD
init|=
name|sortFieldName
argument_list|(
name|ChangeField
operator|.
name|UPDATED
argument_list|)
decl_stmt|;
DECL|field|ID_SORT_FIELD
specifier|static
specifier|final
name|String
name|ID_SORT_FIELD
init|=
name|sortFieldName
argument_list|(
name|ChangeField
operator|.
name|LEGACY_ID
argument_list|)
decl_stmt|;
DECL|field|ADDED_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|ADDED_FIELD
init|=
name|ChangeField
operator|.
name|ADDED
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|APPROVAL_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|APPROVAL_FIELD
init|=
name|ChangeField
operator|.
name|APPROVAL
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|CHANGE_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|CHANGE_FIELD
init|=
name|ChangeField
operator|.
name|CHANGE
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|DELETED_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|DELETED_FIELD
init|=
name|ChangeField
operator|.
name|DELETED
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|MERGEABLE_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|MERGEABLE_FIELD
init|=
name|ChangeField
operator|.
name|MERGEABLE
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|PATCH_SET_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|PATCH_SET_FIELD
init|=
name|ChangeField
operator|.
name|PATCH_SET
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|REVIEWEDBY_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|REVIEWEDBY_FIELD
init|=
name|ChangeField
operator|.
name|REVIEWEDBY
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|REVIEWER_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|REVIEWER_FIELD
init|=
name|ChangeField
operator|.
name|REVIEWER
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|HASHTAG_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|HASHTAG_FIELD
init|=
name|ChangeField
operator|.
name|HASHTAG_CASE_AWARE
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|STAR_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|STAR_FIELD
init|=
name|ChangeField
operator|.
name|STAR
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|STARREDBY_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|STARREDBY_FIELD
init|=
name|ChangeField
operator|.
name|STARREDBY
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|method|idTerm (ChangeData cd)
specifier|static
name|Term
name|idTerm
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|QueryBuilder
operator|.
name|intTerm
argument_list|(
name|LEGACY_ID
operator|.
name|getName
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|idTerm (Change.Id id)
specifier|static
name|Term
name|idTerm
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|QueryBuilder
operator|.
name|intTerm
argument_list|(
name|LEGACY_ID
operator|.
name|getName
argument_list|()
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|field|fillArgs
specifier|private
specifier|final
name|FillArgs
name|fillArgs
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|Schema
argument_list|<
name|ChangeData
argument_list|>
name|schema
decl_stmt|;
DECL|field|queryBuilder
specifier|private
specifier|final
name|QueryBuilder
argument_list|<
name|ChangeData
argument_list|>
name|queryBuilder
decl_stmt|;
DECL|field|openIndex
specifier|private
specifier|final
name|ChangeSubIndex
name|openIndex
decl_stmt|;
DECL|field|closedIndex
specifier|private
specifier|final
name|ChangeSubIndex
name|closedIndex
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|LuceneChangeIndex ( @erritServerConfig Config cfg, SitePaths sitePaths, @IndexExecutor(INTERACTIVE) ListeningExecutorService executor, Provider<ReviewDb> db, ChangeData.Factory changeDataFactory, FillArgs fillArgs, @Assisted Schema<ChangeData> schema)
name|LuceneChangeIndex
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SitePaths
name|sitePaths
parameter_list|,
annotation|@
name|IndexExecutor
argument_list|(
name|INTERACTIVE
argument_list|)
name|ListeningExecutorService
name|executor
parameter_list|,
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|db
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|FillArgs
name|fillArgs
parameter_list|,
annotation|@
name|Assisted
name|Schema
argument_list|<
name|ChangeData
argument_list|>
name|schema
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fillArgs
operator|=
name|fillArgs
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|GerritIndexWriterConfig
name|openConfig
init|=
operator|new
name|GerritIndexWriterConfig
argument_list|(
name|cfg
argument_list|,
literal|"changes_open"
argument_list|)
decl_stmt|;
name|GerritIndexWriterConfig
name|closedConfig
init|=
operator|new
name|GerritIndexWriterConfig
argument_list|(
name|cfg
argument_list|,
literal|"changes_closed"
argument_list|)
decl_stmt|;
name|queryBuilder
operator|=
operator|new
name|QueryBuilder
argument_list|<>
argument_list|(
name|schema
argument_list|,
name|openConfig
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|SearcherFactory
name|searcherFactory
init|=
operator|new
name|SearcherFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|LuceneIndexModule
operator|.
name|isInMemoryTest
argument_list|(
name|cfg
argument_list|)
condition|)
block|{
name|openIndex
operator|=
operator|new
name|ChangeSubIndex
argument_list|(
name|schema
argument_list|,
name|sitePaths
argument_list|,
operator|new
name|RAMDirectory
argument_list|()
argument_list|,
literal|"ramOpen"
argument_list|,
name|openConfig
argument_list|,
name|searcherFactory
argument_list|)
expr_stmt|;
name|closedIndex
operator|=
operator|new
name|ChangeSubIndex
argument_list|(
name|schema
argument_list|,
name|sitePaths
argument_list|,
operator|new
name|RAMDirectory
argument_list|()
argument_list|,
literal|"ramClosed"
argument_list|,
name|closedConfig
argument_list|,
name|searcherFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|dir
init|=
name|LuceneVersionManager
operator|.
name|getDir
argument_list|(
name|sitePaths
argument_list|,
name|CHANGES_PREFIX
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|openIndex
operator|=
operator|new
name|ChangeSubIndex
argument_list|(
name|schema
argument_list|,
name|sitePaths
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
name|CHANGES_OPEN
argument_list|)
argument_list|,
name|openConfig
argument_list|,
name|searcherFactory
argument_list|)
expr_stmt|;
name|closedIndex
operator|=
operator|new
name|ChangeSubIndex
argument_list|(
name|schema
argument_list|,
name|sitePaths
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
name|CHANGES_CLOSED
argument_list|)
argument_list|,
name|closedConfig
argument_list|,
name|searcherFactory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|MoreExecutors
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|executor
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|openIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closedIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSchema ()
specifier|public
name|Schema
argument_list|<
name|ChangeData
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|Override
DECL|method|replace (ChangeData cd)
specifier|public
name|void
name|replace
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|IOException
block|{
name|Term
name|id
init|=
name|LuceneChangeIndex
operator|.
name|idTerm
argument_list|(
name|cd
argument_list|)
decl_stmt|;
comment|// toDocument is essentially static and doesn't depend on the specific
comment|// sub-index, so just pick one.
name|Document
name|doc
init|=
name|openIndex
operator|.
name|toDocument
argument_list|(
name|cd
argument_list|,
name|fillArgs
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|Futures
operator|.
name|allAsList
argument_list|(
name|closedIndex
operator|.
name|delete
argument_list|(
name|id
argument_list|)
argument_list|,
name|openIndex
operator|.
name|replace
argument_list|(
name|id
argument_list|,
name|doc
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Futures
operator|.
name|allAsList
argument_list|(
name|openIndex
operator|.
name|delete
argument_list|(
name|id
argument_list|)
argument_list|,
name|closedIndex
operator|.
name|replace
argument_list|(
name|id
argument_list|,
name|doc
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|ExecutionException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete (Change.Id id)
specifier|public
name|void
name|delete
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Term
name|idTerm
init|=
name|LuceneChangeIndex
operator|.
name|idTerm
argument_list|(
name|id
argument_list|)
decl_stmt|;
try|try
block|{
name|Futures
operator|.
name|allAsList
argument_list|(
name|openIndex
operator|.
name|delete
argument_list|(
name|idTerm
argument_list|)
argument_list|,
name|closedIndex
operator|.
name|delete
argument_list|(
name|idTerm
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteAll ()
specifier|public
name|void
name|deleteAll
parameter_list|()
throws|throws
name|IOException
block|{
name|openIndex
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|closedIndex
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSource (Predicate<ChangeData> p, QueryOptions opts)
specifier|public
name|ChangeDataSource
name|getSource
parameter_list|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
parameter_list|,
name|QueryOptions
name|opts
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|Set
argument_list|<
name|Change
operator|.
name|Status
argument_list|>
name|statuses
init|=
name|ChangeIndexRewriter
operator|.
name|getPossibleStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeSubIndex
argument_list|>
name|indexes
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Sets
operator|.
name|intersection
argument_list|(
name|statuses
argument_list|,
name|OPEN_STATUSES
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|openIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Sets
operator|.
name|intersection
argument_list|(
name|statuses
argument_list|,
name|CLOSED_STATUSES
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|closedIndex
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|QuerySource
argument_list|(
name|indexes
argument_list|,
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|p
argument_list|)
argument_list|,
name|opts
argument_list|,
name|getSort
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|markReady (boolean ready)
specifier|public
name|void
name|markReady
parameter_list|(
name|boolean
name|ready
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Arbitrary done on open index, as ready bit is set
comment|// per index and not sub index
name|openIndex
operator|.
name|markReady
argument_list|(
name|ready
argument_list|)
expr_stmt|;
block|}
DECL|method|getSort ()
specifier|private
name|Sort
name|getSort
parameter_list|()
block|{
return|return
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
name|UPDATED_SORT_FIELD
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
name|ID_SORT_FIELD
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getClosedChangesIndex ()
specifier|public
name|ChangeSubIndex
name|getClosedChangesIndex
parameter_list|()
block|{
return|return
name|closedIndex
return|;
block|}
DECL|class|QuerySource
specifier|private
class|class
name|QuerySource
implements|implements
name|ChangeDataSource
block|{
DECL|field|indexes
specifier|private
specifier|final
name|List
argument_list|<
name|ChangeSubIndex
argument_list|>
name|indexes
decl_stmt|;
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|opts
specifier|private
specifier|final
name|QueryOptions
name|opts
decl_stmt|;
DECL|field|sort
specifier|private
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|method|QuerySource (List<ChangeSubIndex> indexes, Query query, QueryOptions opts, Sort sort)
specifier|private
name|QuerySource
parameter_list|(
name|List
argument_list|<
name|ChangeSubIndex
argument_list|>
name|indexes
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryOptions
name|opts
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|indexes
operator|=
name|indexes
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|checkNotNull
argument_list|(
name|query
argument_list|,
literal|"null query from Lucene"
argument_list|)
expr_stmt|;
name|this
operator|.
name|opts
operator|=
name|opts
expr_stmt|;
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCardinality ()
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
literal|10
return|;
comment|// TODO(dborowitz): estimate from Lucene?
block|}
annotation|@
name|Override
DECL|method|hasChange ()
specifier|public
name|boolean
name|hasChange
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|query
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
name|read
parameter_list|()
throws|throws
name|OrmException
block|{
name|IndexSearcher
index|[]
name|searchers
init|=
operator|new
name|IndexSearcher
index|[
name|indexes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|int
name|realLimit
init|=
name|opts
operator|.
name|start
argument_list|()
operator|+
name|opts
operator|.
name|limit
argument_list|()
decl_stmt|;
name|TopFieldDocs
index|[]
name|hits
init|=
operator|new
name|TopFieldDocs
index|[
name|indexes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|searchers
index|[
name|i
index|]
operator|=
name|indexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|hits
index|[
name|i
index|]
operator|=
name|searchers
index|[
name|i
index|]
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|realLimit
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|docs
init|=
name|TopDocs
operator|.
name|merge
argument_list|(
name|sort
argument_list|,
name|realLimit
argument_list|,
name|hits
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|docs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|fields
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|String
name|idFieldName
init|=
name|LEGACY_ID
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opts
operator|.
name|start
argument_list|()
init|;
name|i
operator|<
name|docs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|sd
init|=
name|docs
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|Document
name|doc
init|=
name|searchers
index|[
name|sd
operator|.
name|shardIndex
index|]
operator|.
name|doc
argument_list|(
name|sd
operator|.
name|doc
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|toChangeData
argument_list|(
name|fields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
argument_list|,
name|fields
argument_list|,
name|idFieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ChangeData
argument_list|>
name|r
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|result
argument_list|)
decl_stmt|;
return|return
operator|new
name|ResultSet
argument_list|<
name|ChangeData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChangeData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|r
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ChangeData
argument_list|>
name|toList
parameter_list|()
block|{
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Do nothing.
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|searchers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|release
argument_list|(
name|searchers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"cannot release Lucene searcher"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|fields (QueryOptions opts)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|(
name|QueryOptions
name|opts
parameter_list|)
block|{
comment|// Ensure we request enough fields to construct a ChangeData.
name|Set
argument_list|<
name|String
argument_list|>
name|fs
init|=
name|opts
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|contains
argument_list|(
name|CHANGE
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// A Change is always sufficient.
return|return
name|fs
return|;
block|}
if|if
condition|(
operator|!
name|schema
operator|.
name|hasField
argument_list|(
name|PROJECT
argument_list|)
condition|)
block|{
comment|// Schema is not new enough to have project field. Ensure we have ID
comment|// field, and call createOnlyWhenNoteDbDisabled from toChangeData below.
if|if
condition|(
name|fs
operator|.
name|contains
argument_list|(
name|LEGACY_ID
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fs
return|;
block|}
return|return
name|Sets
operator|.
name|union
argument_list|(
name|fs
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LEGACY_ID
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// New enough schema to have project field, so ensure that is requested.
if|if
condition|(
name|fs
operator|.
name|contains
argument_list|(
name|PROJECT
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|fs
operator|.
name|contains
argument_list|(
name|LEGACY_ID
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fs
return|;
block|}
return|return
name|Sets
operator|.
name|union
argument_list|(
name|fs
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LEGACY_ID
operator|.
name|getName
argument_list|()
argument_list|,
name|PROJECT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fields (Document doc, Set<String> fields)
specifier|private
specifier|static
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|fields
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|stored
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|doc
control|)
block|{
name|String
name|name
init|=
name|f
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|stored
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stored
return|;
block|}
DECL|method|toChangeData (Multimap<String, IndexableField> doc, Set<String> fields, String idFieldName)
specifier|private
name|ChangeData
name|toChangeData
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|idFieldName
parameter_list|)
block|{
name|ChangeData
name|cd
decl_stmt|;
comment|// Either change or the ID field was guaranteed to be included in the call
comment|// to fields() above.
name|IndexableField
name|cb
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|CHANGE_FIELD
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cb
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|proto
init|=
name|cb
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|cd
operator|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|ChangeProtoField
operator|.
name|CODEC
operator|.
name|decode
argument_list|(
name|proto
operator|.
name|bytes
argument_list|,
name|proto
operator|.
name|offset
argument_list|,
name|proto
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexableField
name|f
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|idFieldName
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|f
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|IndexableField
name|project
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|PROJECT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
comment|// Old schema without project field: we can safely assume NoteDb is
comment|// disabled.
name|cd
operator|=
name|changeDataFactory
operator|.
name|createOnlyWhenNoteDbDisabled
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cd
operator|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|stringValue
argument_list|()
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|PATCH_SET_FIELD
argument_list|)
condition|)
block|{
name|decodePatchSets
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|APPROVAL_FIELD
argument_list|)
condition|)
block|{
name|decodeApprovals
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|ADDED_FIELD
argument_list|)
operator|&&
name|fields
operator|.
name|contains
argument_list|(
name|DELETED_FIELD
argument_list|)
condition|)
block|{
name|decodeChangedLines
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|MERGEABLE_FIELD
argument_list|)
condition|)
block|{
name|decodeMergeable
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|REVIEWEDBY_FIELD
argument_list|)
condition|)
block|{
name|decodeReviewedBy
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|HASHTAG_FIELD
argument_list|)
condition|)
block|{
name|decodeHashtags
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|STARREDBY_FIELD
argument_list|)
condition|)
block|{
name|decodeStarredBy
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|STAR_FIELD
argument_list|)
condition|)
block|{
name|decodeStar
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|REVIEWER_FIELD
argument_list|)
condition|)
block|{
name|decodeReviewers
argument_list|(
name|doc
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
return|return
name|cd
return|;
block|}
DECL|method|decodePatchSets (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodePatchSets
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
init|=
name|decodeProtos
argument_list|(
name|doc
argument_list|,
name|PATCH_SET_FIELD
argument_list|,
name|PatchSetProtoField
operator|.
name|CODEC
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|patchSets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Will be an empty list for schemas prior to when this field was stored;
comment|// this cannot be valid since a change needs at least one patch set.
name|cd
operator|.
name|setPatchSets
argument_list|(
name|patchSets
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decodeApprovals (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeApprovals
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|cd
operator|.
name|setCurrentApprovals
argument_list|(
name|decodeProtos
argument_list|(
name|doc
argument_list|,
name|APPROVAL_FIELD
argument_list|,
name|PatchSetApprovalProtoField
operator|.
name|CODEC
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeChangedLines (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeChangedLines
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|IndexableField
name|added
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|ADDED_FIELD
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IndexableField
name|deleted
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|DELETED_FIELD
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
operator|!=
literal|null
operator|&&
name|deleted
operator|!=
literal|null
condition|)
block|{
name|cd
operator|.
name|setChangedLines
argument_list|(
name|added
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|deleted
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No ChangedLines stored, likely due to failure during reindexing, for
comment|// example due to LargeObjectException. But we know the field was
comment|// requested, so update ChangeData to prevent callers from trying to
comment|// lazily load it, as that would probably also fail.
name|cd
operator|.
name|setNoChangedLines
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decodeMergeable (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeMergeable
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|IndexableField
name|f
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|MERGEABLE_FIELD
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|String
name|mergeable
init|=
name|f
operator|.
name|stringValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|mergeable
argument_list|)
condition|)
block|{
name|cd
operator|.
name|setMergeable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|mergeable
argument_list|)
condition|)
block|{
name|cd
operator|.
name|setMergeable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|decodeReviewedBy (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeReviewedBy
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|Collection
argument_list|<
name|IndexableField
argument_list|>
name|reviewedBy
init|=
name|doc
operator|.
name|get
argument_list|(
name|REVIEWEDBY_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|reviewedBy
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|reviewedBy
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexableField
name|r
range|:
name|reviewedBy
control|)
block|{
name|int
name|id
init|=
name|r
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|reviewedBy
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|id
operator|==
name|ChangeField
operator|.
name|NOT_REVIEWED
condition|)
block|{
break|break;
block|}
name|accounts
operator|.
name|add
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setReviewedBy
argument_list|(
name|accounts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decodeHashtags (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeHashtags
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|Collection
argument_list|<
name|IndexableField
argument_list|>
name|hashtag
init|=
name|doc
operator|.
name|get
argument_list|(
name|HASHTAG_FIELD
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|hashtag
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexableField
name|r
range|:
name|hashtag
control|)
block|{
name|hashtags
operator|.
name|add
argument_list|(
name|r
operator|.
name|binaryValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setHashtags
argument_list|(
name|hashtags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|decodeStarredBy (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeStarredBy
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|Collection
argument_list|<
name|IndexableField
argument_list|>
name|starredBy
init|=
name|doc
operator|.
name|get
argument_list|(
name|STARREDBY_FIELD
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|starredBy
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexableField
name|r
range|:
name|starredBy
control|)
block|{
name|accounts
operator|.
name|add
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|r
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setStarredBy
argument_list|(
name|accounts
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeStar (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeStar
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|Collection
argument_list|<
name|IndexableField
argument_list|>
name|star
init|=
name|doc
operator|.
name|get
argument_list|(
name|STAR_FIELD
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|stars
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|r
range|:
name|star
control|)
block|{
name|StarredChangesUtil
operator|.
name|StarField
name|starField
init|=
name|StarredChangesUtil
operator|.
name|StarField
operator|.
name|parse
argument_list|(
name|r
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|starField
operator|!=
literal|null
condition|)
block|{
name|stars
operator|.
name|put
argument_list|(
name|starField
operator|.
name|accountId
argument_list|()
argument_list|,
name|starField
operator|.
name|label
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cd
operator|.
name|setStars
argument_list|(
name|stars
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeReviewers (Multimap<String, IndexableField> doc, ChangeData cd)
specifier|private
name|void
name|decodeReviewers
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|cd
operator|.
name|setReviewers
argument_list|(
name|ChangeField
operator|.
name|parseReviewerFieldValues
argument_list|(
name|FluentIterable
operator|.
name|from
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|REVIEWER_FIELD
argument_list|)
argument_list|)
operator|.
name|transform
argument_list|(
operator|new
name|Function
argument_list|<
name|IndexableField
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|IndexableField
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|stringValue
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeProtos (Multimap<String, IndexableField> doc, String fieldName, ProtobufCodec<T> codec)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|decodeProtos
parameter_list|(
name|Multimap
argument_list|<
name|String
argument_list|,
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|ProtobufCodec
argument_list|<
name|T
argument_list|>
name|codec
parameter_list|)
block|{
name|Collection
argument_list|<
name|IndexableField
argument_list|>
name|fields
init|=
name|doc
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|fields
control|)
block|{
name|BytesRef
name|r
init|=
name|f
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|codec
operator|.
name|decode
argument_list|(
name|r
operator|.
name|bytes
argument_list|,
name|r
operator|.
name|offset
argument_list|,
name|r
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

