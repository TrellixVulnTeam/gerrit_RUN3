begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.lucene
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** Writer that optionally flushes/commits after every write. */
end_comment

begin_class
DECL|class|AutoCommitWriter
class|class
name|AutoCommitWriter
extends|extends
name|IndexWriter
block|{
DECL|field|autoCommit
specifier|private
name|boolean
name|autoCommit
decl_stmt|;
DECL|method|AutoCommitWriter (Directory dir, IndexWriterConfig config, boolean autoCommit)
name|AutoCommitWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexWriterConfig
name|config
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoCommit
operator|=
name|autoCommit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocument (Iterable<? extends IndexableField> doc)
specifier|public
name|void
name|addDocument
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocument (Iterable<? extends IndexableField> doc, Analyzer analyzer)
specifier|public
name|void
name|addDocument
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocuments ( Iterable<? extends Iterable<? extends IndexableField>> docs)
specifier|public
name|void
name|addDocuments
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addDocuments ( Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer)
specifier|public
name|void
name|addDocuments
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|addDocuments
argument_list|(
name|docs
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDocuments (Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs)
specifier|public
name|void
name|updateDocuments
parameter_list|(
name|Term
name|delTerm
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|updateDocuments
argument_list|(
name|delTerm
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDocuments (Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs, Analyzer analyzer)
specifier|public
name|void
name|updateDocuments
parameter_list|(
name|Term
name|delTerm
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|updateDocuments
argument_list|(
name|delTerm
argument_list|,
name|docs
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteDocuments (Term... term)
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
modifier|...
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tryDeleteDocument (IndexReader readerIn, int docID)
specifier|public
specifier|synchronized
name|boolean
name|tryDeleteDocument
parameter_list|(
name|IndexReader
name|readerIn
parameter_list|,
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|super
operator|.
name|tryDeleteDocument
argument_list|(
name|readerIn
argument_list|,
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|autoFlush
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|deleteDocuments (Query... queries)
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Query
modifier|...
name|queries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deleteDocuments
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDocument (Term term, Iterable<? extends IndexableField> doc)
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDocument (Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteAll ()
specifier|public
name|void
name|deleteAll
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|autoFlush
argument_list|()
expr_stmt|;
block|}
DECL|method|manualFlush ()
name|void
name|manualFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|autoCommit
condition|)
block|{
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|autoFlush ()
specifier|private
name|void
name|autoFlush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|autoCommit
condition|)
block|{
name|manualFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

