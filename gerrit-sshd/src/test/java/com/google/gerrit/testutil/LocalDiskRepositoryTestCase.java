begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009, The Android Open Source Project
end_comment

begin_comment
comment|// Copyright (C) 2008, Robin Rosenberg<robin.rosenberg@dewire.com>
end_comment

begin_comment
comment|// Copyright (C) 2007, Shawn O. Pearce<spearce@spearce.org>
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// All rights reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// - Redistributions of source code must retain the above copyright notice, this
end_comment

begin_comment
comment|// list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// - Redistributions in binary form must reproduce the above copyright notice,
end_comment

begin_comment
comment|// this list of conditions and the following disclaimer in the documentation
end_comment

begin_comment
comment|// and/or other materials provided with the distribution.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// - Neither the name of the Git Development Community nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from this
end_comment

begin_comment
comment|// software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
end_comment

begin_comment
comment|// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
end_comment

begin_comment
comment|// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
end_comment

begin_comment
comment|// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
end_comment

begin_comment
comment|// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
end_comment

begin_comment
comment|// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
end_comment

begin_comment
comment|// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
end_comment

begin_comment
comment|// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
end_comment

begin_comment
comment|// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
end_comment

begin_comment
comment|// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
end_comment

begin_comment
comment|// POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Taken almost literally from JGit's test suite, as it does almost everything
end_comment

begin_comment
comment|// we need to create a local git repository for testing.
end_comment

begin_package
DECL|package|com.google.gerrit.testutil
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|NB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|LocalDiskRepositoryTestCase
specifier|public
specifier|abstract
class|class
name|LocalDiskRepositoryTestCase
extends|extends
name|TestCase
block|{
DECL|field|shutdownHook
specifier|private
specifier|static
name|Thread
name|shutdownHook
decl_stmt|;
DECL|field|testCount
specifier|private
specifier|static
name|int
name|testCount
decl_stmt|;
DECL|field|author
specifier|protected
name|PersonIdent
name|author
decl_stmt|;
DECL|field|committer
specifier|protected
name|PersonIdent
name|committer
decl_stmt|;
DECL|field|trash
specifier|private
specifier|final
name|File
name|trash
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|,
literal|"trash"
argument_list|)
decl_stmt|;
DECL|field|toClose
specifier|private
specifier|final
name|List
argument_list|<
name|Repository
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mockSystemReader
specifier|private
name|MockSystemReader
name|mockSystemReader
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdownHook
operator|==
literal|null
condition|)
block|{
name|shutdownHook
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|recursiveDelete
argument_list|(
literal|"SHUTDOWN"
argument_list|,
name|trash
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
name|recursiveDelete
argument_list|(
name|testName
argument_list|()
argument_list|,
name|trash
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mockSystemReader
operator|=
operator|new
name|MockSystemReader
argument_list|()
expr_stmt|;
name|mockSystemReader
operator|.
name|userGitConfig
operator|=
operator|new
name|FileBasedConfig
argument_list|(
operator|new
name|File
argument_list|(
name|trash
argument_list|,
literal|"usergitconfig"
argument_list|)
argument_list|)
expr_stmt|;
name|SystemReader
operator|.
name|setInstance
argument_list|(
name|mockSystemReader
argument_list|)
expr_stmt|;
specifier|final
name|long
name|now
init|=
name|mockSystemReader
operator|.
name|getCurrentTime
argument_list|()
decl_stmt|;
specifier|final
name|int
name|tz
init|=
name|mockSystemReader
operator|.
name|getTimezone
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|author
operator|=
operator|new
name|PersonIdent
argument_list|(
literal|"J. Author"
argument_list|,
literal|"ja@example.com"
argument_list|)
expr_stmt|;
name|author
operator|=
operator|new
name|PersonIdent
argument_list|(
name|author
argument_list|,
name|now
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|committer
operator|=
operator|new
name|PersonIdent
argument_list|(
literal|"J. Committer"
argument_list|,
literal|"jc@example.com"
argument_list|)
expr_stmt|;
name|committer
operator|=
operator|new
name|PersonIdent
argument_list|(
name|committer
argument_list|,
name|now
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|RepositoryCache
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Repository
name|r
range|:
name|toClose
control|)
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|toClose
operator|.
name|clear
argument_list|()
expr_stmt|;
name|recursiveDelete
argument_list|(
name|testName
argument_list|()
argument_list|,
name|trash
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/** Increment the {@link #author} and {@link #committer} times. */
DECL|method|tick ()
specifier|protected
name|void
name|tick
parameter_list|()
block|{
specifier|final
name|long
name|delta
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|author
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|delta
decl_stmt|;
specifier|final
name|int
name|tz
init|=
name|mockSystemReader
operator|.
name|getTimezone
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|author
operator|=
operator|new
name|PersonIdent
argument_list|(
name|author
argument_list|,
name|now
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|committer
operator|=
operator|new
name|PersonIdent
argument_list|(
name|committer
argument_list|,
name|now
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
comment|/** Recursively delete a directory, failing the test if the delete fails. */
DECL|method|recursiveDelete (final File dir)
specifier|protected
name|void
name|recursiveDelete
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|)
block|{
name|recursiveDelete
argument_list|(
name|testName
argument_list|()
argument_list|,
name|dir
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|recursiveDelete (final String testName, final File dir, boolean silent, boolean failOnError)
specifier|private
specifier|static
name|boolean
name|recursiveDelete
parameter_list|(
specifier|final
name|String
name|testName
parameter_list|,
specifier|final
name|File
name|dir
parameter_list|,
name|boolean
name|silent
parameter_list|,
name|boolean
name|failOnError
parameter_list|)
block|{
assert|assert
operator|!
operator|(
name|silent
operator|&&
name|failOnError
operator|)
assert|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|silent
return|;
block|}
specifier|final
name|File
index|[]
name|ls
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|ls
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|ls
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
specifier|final
name|File
name|e
init|=
name|ls
index|[
name|k
index|]
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|silent
operator|=
name|recursiveDelete
argument_list|(
name|testName
argument_list|,
name|e
argument_list|,
name|silent
argument_list|,
name|failOnError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|delete
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|silent
condition|)
block|{
name|reportDeleteFailure
argument_list|(
name|testName
argument_list|,
name|failOnError
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|silent
operator|=
operator|!
name|failOnError
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|delete
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|silent
condition|)
block|{
name|reportDeleteFailure
argument_list|(
name|testName
argument_list|,
name|failOnError
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|silent
operator|=
operator|!
name|failOnError
expr_stmt|;
block|}
return|return
name|silent
return|;
block|}
DECL|method|reportDeleteFailure (final String testName, final boolean failOnError, final File e)
specifier|private
specifier|static
name|void
name|reportDeleteFailure
parameter_list|(
specifier|final
name|String
name|testName
parameter_list|,
specifier|final
name|boolean
name|failOnError
parameter_list|,
specifier|final
name|File
name|e
parameter_list|)
block|{
specifier|final
name|String
name|severity
decl_stmt|;
if|if
condition|(
name|failOnError
condition|)
name|severity
operator|=
literal|"ERROR"
expr_stmt|;
else|else
name|severity
operator|=
literal|"WARNING"
expr_stmt|;
specifier|final
name|String
name|msg
init|=
name|severity
operator|+
literal|": Failed to delete "
operator|+
name|e
operator|+
literal|" in "
operator|+
name|testName
decl_stmt|;
if|if
condition|(
name|failOnError
condition|)
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|createWorkRepository ()
specifier|protected
name|Repository
name|createWorkRepository
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createRepository
argument_list|(
literal|false
comment|/* not bare */
argument_list|)
return|;
block|}
comment|/** Creates a new empty repository. */
DECL|method|createRepository (boolean bare)
specifier|private
name|Repository
name|createRepository
parameter_list|(
name|boolean
name|bare
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|uniqueId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
operator|(
name|testCount
operator|++
operator|)
decl_stmt|;
specifier|final
name|String
name|gitdirName
init|=
literal|"test"
operator|+
name|uniqueId
operator|+
operator|(
name|bare
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
literal|".git"
decl_stmt|;
specifier|final
name|File
name|gitdir
init|=
operator|new
name|File
argument_list|(
name|trash
argument_list|,
name|gitdirName
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
specifier|final
name|Repository
name|db
init|=
operator|new
name|Repository
argument_list|(
name|gitdir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|gitdir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|create
argument_list|()
expr_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|db
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
comment|/** Run a hook script in the repository, returning the exit status. */
DECL|method|runHook (final Repository db, final File hook, final String... args)
specifier|protected
name|int
name|runHook
parameter_list|(
specifier|final
name|Repository
name|db
parameter_list|,
specifier|final
name|File
name|hook
parameter_list|,
specifier|final
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|args
operator|.
name|length
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
name|hook
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|argv
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|cloneEnv
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"GIT_DIR"
argument_list|,
name|db
operator|.
name|getDirectory
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|putPersonIdent
argument_list|(
name|env
argument_list|,
literal|"AUTHOR"
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|putPersonIdent
argument_list|(
name|env
argument_list|,
literal|"COMMITTER"
argument_list|,
name|committer
argument_list|)
expr_stmt|;
specifier|final
name|File
name|cwd
init|=
name|db
operator|.
name|getWorkDir
argument_list|()
decl_stmt|;
specifier|final
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|argv
argument_list|,
name|toEnvArray
argument_list|(
name|env
argument_list|)
argument_list|,
name|cwd
argument_list|)
decl_stmt|;
name|p
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|.
name|getErrorStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|p
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|p
operator|.
name|waitFor
argument_list|()
return|;
block|}
DECL|method|putPersonIdent (final Map<String, String> env, final String type, final PersonIdent who)
specifier|private
specifier|static
name|void
name|putPersonIdent
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|PersonIdent
name|who
parameter_list|)
block|{
specifier|final
name|String
name|ident
init|=
name|who
operator|.
name|toExternalString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|date
init|=
name|ident
operator|.
name|substring
argument_list|(
name|ident
operator|.
name|indexOf
argument_list|(
literal|"> "
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"GIT_"
operator|+
name|type
operator|+
literal|"_NAME"
argument_list|,
name|who
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"GIT_"
operator|+
name|type
operator|+
literal|"_EMAIL"
argument_list|,
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"GIT_"
operator|+
name|type
operator|+
literal|"_DATE"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/** Create a string to a UTF-8 temporary file and return the path. */
DECL|method|write (final String body)
specifier|protected
name|File
name|write
parameter_list|(
specifier|final
name|String
name|body
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"temp"
argument_list|,
literal|"txt"
argument_list|,
name|trash
argument_list|)
decl_stmt|;
try|try
block|{
name|write
argument_list|(
name|f
argument_list|,
name|body
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** Write a string as a UTF-8 file. */
DECL|method|write (final File f, final String body)
specifier|protected
name|void
name|write
parameter_list|(
specifier|final
name|File
name|f
parameter_list|,
specifier|final
name|String
name|body
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|w
operator|.
name|write
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Fully read a UTF-8 file and return as a string. */
DECL|method|read (final File f)
specifier|protected
name|String
name|read
parameter_list|(
specifier|final
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|body
init|=
name|NB
operator|.
name|readFully
argument_list|(
name|f
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|body
argument_list|,
literal|0
argument_list|,
name|body
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
DECL|method|toEnvArray (final Map<String, String> env)
specifier|private
specifier|static
name|String
index|[]
name|toEnvArray
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|envp
init|=
operator|new
name|String
index|[
name|env
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|env
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|envp
index|[
name|i
operator|++
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|envp
return|;
block|}
DECL|method|cloneEnv ()
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cloneEnv
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testName ()
specifier|private
name|String
name|testName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

