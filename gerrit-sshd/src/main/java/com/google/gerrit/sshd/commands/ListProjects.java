begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|BaseCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
DECL|class|ListProjects
specifier|final
class|class
name|ListProjects
extends|extends
name|BaseCommand
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ListProjects
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|FilterType
specifier|static
enum|enum
name|FilterType
block|{
DECL|enumConstant|CODE
name|CODE
block|{
annotation|@
name|Override
name|boolean
name|matches
parameter_list|(
name|Repository
name|git
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|!
name|PERMISSIONS
operator|.
name|matches
argument_list|(
name|git
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|PERMISSIONS
name|PERMISSIONS
block|{
annotation|@
name|Override
name|boolean
name|matches
parameter_list|(
name|Repository
name|git
parameter_list|)
throws|throws
name|IOException
block|{
name|Ref
name|head
init|=
name|git
operator|.
name|getRef
argument_list|(
name|Constants
operator|.
name|HEAD
argument_list|)
decl_stmt|;
return|return
name|head
operator|!=
literal|null
operator|&&
name|head
operator|.
name|isSymbolic
argument_list|()
operator|&&
name|GitRepositoryManager
operator|.
name|REF_CONFIG
operator|.
name|equals
argument_list|(
name|head
operator|.
name|getLeaf
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|ALL
name|ALL
block|{
annotation|@
name|Override
name|boolean
name|matches
parameter_list|(
name|Repository
name|git
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|;
DECL|method|matches (Repository git)
specifier|abstract
name|boolean
name|matches
parameter_list|(
name|Repository
name|git
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|Inject
DECL|field|currentUser
specifier|private
name|IdentifiedUser
name|currentUser
decl_stmt|;
annotation|@
name|Inject
DECL|field|projectCache
specifier|private
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|field|repoManager
specifier|private
name|GitRepositoryManager
name|repoManager
decl_stmt|;
annotation|@
name|Inject
DECL|field|projectNodeFactory
specifier|private
name|ProjectNode
operator|.
name|Factory
name|projectNodeFactory
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--show-branch"
argument_list|,
name|aliases
operator|=
block|{
literal|"-b"
block|}
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|usage
operator|=
literal|"displays the sha of each project in the specified branch"
argument_list|)
DECL|field|showBranch
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|showBranch
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--tree"
argument_list|,
name|aliases
operator|=
block|{
literal|"-t"
block|}
argument_list|,
name|usage
operator|=
literal|"displays project inheritance in a tree-like format\n"
operator|+
literal|"this option does not work together with the show-branch option"
argument_list|)
DECL|field|showTree
specifier|private
name|boolean
name|showTree
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--type"
argument_list|,
name|usage
operator|=
literal|"type of project"
argument_list|)
DECL|field|type
specifier|private
name|FilterType
name|type
init|=
name|FilterType
operator|.
name|CODE
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--description"
argument_list|,
name|aliases
operator|=
block|{
literal|"-d"
block|}
argument_list|,
name|usage
operator|=
literal|"include description of project in list"
argument_list|)
DECL|field|showDescription
specifier|private
name|boolean
name|showDescription
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--all"
argument_list|,
name|usage
operator|=
literal|"display all projects that are accessible by the calling user"
argument_list|)
DECL|field|all
specifier|private
name|boolean
name|all
decl_stmt|;
annotation|@
name|Override
DECL|method|start (final Environment env)
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|Environment
name|env
parameter_list|)
block|{
name|startThread
argument_list|(
operator|new
name|CommandRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|parseCommandLine
argument_list|()
expr_stmt|;
name|ListProjects
operator|.
name|this
operator|.
name|display
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|display ()
specifier|private
name|void
name|display
parameter_list|()
throws|throws
name|Failure
block|{
if|if
condition|(
name|showTree
operator|&&
operator|(
name|showBranch
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"fatal: --tree and --show-branch options are not compatible."
argument_list|)
throw|;
block|}
if|if
condition|(
name|showTree
operator|&&
name|showDescription
condition|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"fatal: --tree and --description options are not compatible."
argument_list|)
throw|;
block|}
specifier|final
name|PrintWriter
name|stdout
init|=
name|toPrintWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|TreeMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ProjectNode
argument_list|>
name|treeMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ProjectNode
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
range|:
name|projectCache
operator|.
name|all
argument_list|()
control|)
block|{
specifier|final
name|ProjectState
name|e
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
comment|// If we can't get it from the cache, pretend its not present.
comment|//
continue|continue;
block|}
specifier|final
name|ProjectControl
name|pctl
init|=
name|e
operator|.
name|controlFor
argument_list|(
name|currentUser
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isVisible
init|=
name|pctl
operator|.
name|isVisible
argument_list|()
operator|||
operator|(
name|all
operator|&&
name|pctl
operator|.
name|isOwner
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|showTree
condition|)
block|{
name|treeMap
operator|.
name|put
argument_list|(
name|projectName
argument_list|,
name|projectNodeFactory
operator|.
name|create
argument_list|(
name|pctl
operator|.
name|getProject
argument_list|()
argument_list|,
name|isVisible
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|isVisible
condition|)
block|{
comment|// Require the project itself to be visible to the user.
comment|//
continue|continue;
block|}
try|try
block|{
if|if
condition|(
name|showBranch
operator|!=
literal|null
condition|)
block|{
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|matches
argument_list|(
name|git
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|Ref
argument_list|>
name|refs
init|=
name|getBranchRefs
argument_list|(
name|projectName
argument_list|,
name|pctl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasValidRef
argument_list|(
name|refs
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Ref
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
comment|// Print stub (forty '-' symbols)
name|stdout
operator|.
name|print
argument_list|(
literal|"----------------------------------------"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stdout
operator|.
name|print
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|!=
name|FilterType
operator|.
name|ALL
condition|)
block|{
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|matches
argument_list|(
name|git
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|err
parameter_list|)
block|{
comment|// If the Git repository is gone, the project doesn't actually exist anymore.
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected error reading "
operator|+
name|projectName
argument_list|,
name|err
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|stdout
operator|.
name|print
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|desc
decl_stmt|;
if|if
condition|(
name|showDescription
operator|&&
operator|!
operator|(
name|desc
operator|=
name|e
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We still want to list every project as one-liners, hence escaping \n.
name|stdout
operator|.
name|print
argument_list|(
literal|" - "
operator|+
name|desc
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showTree
operator|&&
name|treeMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|printProjectTree
argument_list|(
name|stdout
argument_list|,
name|treeMap
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stdout
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|printProjectTree (final PrintWriter stdout, final TreeMap<Project.NameKey, ProjectNode> treeMap)
specifier|private
name|void
name|printProjectTree
parameter_list|(
specifier|final
name|PrintWriter
name|stdout
parameter_list|,
specifier|final
name|TreeMap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ProjectNode
argument_list|>
name|treeMap
parameter_list|)
block|{
specifier|final
name|SortedSet
argument_list|<
name|ProjectNode
argument_list|>
name|sortedNodes
init|=
operator|new
name|TreeSet
argument_list|<
name|ProjectNode
argument_list|>
argument_list|()
decl_stmt|;
comment|// Builds the inheritance tree using a list.
comment|//
for|for
control|(
specifier|final
name|ProjectNode
name|key
range|:
name|treeMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|isAllProjects
argument_list|()
condition|)
block|{
name|sortedNodes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ProjectNode
name|node
init|=
name|treeMap
operator|.
name|get
argument_list|(
name|key
operator|.
name|getParentName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|addChild
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortedNodes
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TreeFormatter
name|treeFormatter
init|=
operator|new
name|TreeFormatter
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
name|treeFormatter
operator|.
name|printTree
argument_list|(
name|sortedNodes
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|getBranchRefs (Project.NameKey projectName, ProjectControl projectControl)
specifier|private
name|List
argument_list|<
name|Ref
argument_list|>
name|getBranchRefs
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|ProjectControl
name|projectControl
parameter_list|)
block|{
name|Ref
index|[]
name|result
init|=
operator|new
name|Ref
index|[
name|showBranch
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|showBranch
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Ref
name|ref
init|=
name|git
operator|.
name|getRef
argument_list|(
name|showBranch
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|ref
operator|.
name|getObjectId
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|projectControl
operator|.
name|controlForRef
argument_list|(
name|ref
operator|.
name|getLeaf
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isVisible
argument_list|()
operator|)
operator|||
operator|(
name|all
operator|&&
name|projectControl
operator|.
name|isOwner
argument_list|()
operator|)
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|ref
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|git
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Fall through and return what is available.
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|hasValidRef (List<Ref> refs)
specifier|private
specifier|static
name|boolean
name|hasValidRef
parameter_list|(
name|List
argument_list|<
name|Ref
argument_list|>
name|refs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|refs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

