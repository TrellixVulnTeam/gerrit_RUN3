begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|RequiresCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|SshDaemon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoAcceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|WindowCacheStatAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/** Show the current cache states. */
end_comment

begin_class
annotation|@
name|RequiresCapability
argument_list|(
name|GlobalCapability
operator|.
name|VIEW_CACHES
argument_list|)
DECL|class|ShowCaches
specifier|final
class|class
name|ShowCaches
extends|extends
name|CacheCommand
block|{
DECL|field|serverStarted
specifier|private
specifier|static
specifier|volatile
name|long
name|serverStarted
decl_stmt|;
DECL|class|StartupListener
specifier|static
class|class
name|StartupListener
implements|implements
name|LifecycleListener
block|{
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|serverStarted
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--gc"
argument_list|,
name|usage
operator|=
literal|"perform Java GC before printing memory stats"
argument_list|)
DECL|field|gc
specifier|private
name|boolean
name|gc
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--show-jvm"
argument_list|,
name|usage
operator|=
literal|"show details about the JVM"
argument_list|)
DECL|field|showJVM
specifier|private
name|boolean
name|showJVM
decl_stmt|;
annotation|@
name|Inject
DECL|field|workQueue
specifier|private
name|WorkQueue
name|workQueue
decl_stmt|;
annotation|@
name|Inject
DECL|field|daemon
specifier|private
name|SshDaemon
name|daemon
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|SitePath
DECL|field|sitePath
specifier|private
name|File
name|sitePath
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
block|{
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"%-25s %-20s      now  %16s\n"
argument_list|,
literal|"Gerrit Code Review"
argument_list|,
name|Version
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|?
name|Version
operator|.
name|getVersion
argument_list|()
else|:
literal|""
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss   zzz"
argument_list|)
operator|.
name|format
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"%-25s %-20s   uptime %16s\n"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|uptime
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
operator|-
name|serverStarted
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
comment|//
literal|"%1s %-18s %-4s|%-20s|  %-5s  |%-14s|\n"
comment|//
argument_list|,
literal|""
comment|//
argument_list|,
literal|"Name"
comment|//
argument_list|,
literal|"Max"
comment|//
argument_list|,
literal|"Object Count"
comment|//
argument_list|,
literal|"AvgGet"
comment|//
argument_list|,
literal|"Hit Ratio"
comment|//
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
comment|//
literal|"%1s %-18s %-4s|%6s %6s %6s|  %-5s   |%-4s %-4s %-4s|\n"
comment|//
argument_list|,
literal|""
comment|//
argument_list|,
literal|""
comment|//
argument_list|,
literal|"Age"
comment|//
argument_list|,
literal|"Disk"
comment|//
argument_list|,
literal|"Mem"
comment|//
argument_list|,
literal|"Cnt"
comment|//
argument_list|,
literal|""
comment|//
argument_list|,
literal|"Disk"
comment|//
argument_list|,
literal|"Mem"
comment|//
argument_list|,
literal|"Agg"
comment|//
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
literal|"------------------"
operator|+
literal|"-------+--------------------+----------+--------------+\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Ehcache
name|cache
range|:
name|getAllCaches
argument_list|()
control|)
block|{
specifier|final
name|CacheConfiguration
name|cfg
init|=
name|cache
operator|.
name|getCacheConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|useDisk
init|=
name|cfg
operator|.
name|isDiskPersistent
argument_list|()
operator|||
name|cfg
operator|.
name|isOverflowToDisk
argument_list|()
decl_stmt|;
specifier|final
name|Statistics
name|stat
init|=
name|cache
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
specifier|final
name|long
name|total
init|=
name|stat
operator|.
name|getCacheHits
argument_list|()
operator|+
name|stat
operator|.
name|getCacheMisses
argument_list|()
decl_stmt|;
if|if
condition|(
name|useDisk
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
comment|//
literal|"D %-18s %-4s|%6s %6s %6s| %7s  |%4s %4s %4s|\n"
comment|//
argument_list|,
name|cache
operator|.
name|getName
argument_list|()
comment|//
argument_list|,
name|interval
argument_list|(
name|cfg
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
comment|//
argument_list|,
name|count
argument_list|(
name|stat
operator|.
name|getDiskStoreObjectCount
argument_list|()
argument_list|)
comment|//
argument_list|,
name|count
argument_list|(
name|stat
operator|.
name|getMemoryStoreObjectCount
argument_list|()
argument_list|)
comment|//
argument_list|,
name|count
argument_list|(
name|stat
operator|.
name|getObjectCount
argument_list|()
argument_list|)
comment|//
argument_list|,
name|duration
argument_list|(
name|stat
operator|.
name|getAverageGetTime
argument_list|()
argument_list|)
comment|//
argument_list|,
name|percent
argument_list|(
name|stat
operator|.
name|getOnDiskHits
argument_list|()
argument_list|,
name|total
argument_list|)
comment|//
argument_list|,
name|percent
argument_list|(
name|stat
operator|.
name|getInMemoryHits
argument_list|()
argument_list|,
name|total
argument_list|)
comment|//
argument_list|,
name|percent
argument_list|(
name|stat
operator|.
name|getCacheHits
argument_list|()
argument_list|,
name|total
argument_list|)
comment|//
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stdout
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
comment|//
literal|"  %-18s %-4s|%6s %6s %6s| %7s  |%4s %4s %4s|\n"
comment|//
argument_list|,
name|cache
operator|.
name|getName
argument_list|()
comment|//
argument_list|,
name|interval
argument_list|(
name|cfg
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
comment|//
argument_list|,
literal|""
argument_list|,
literal|""
comment|//
argument_list|,
name|count
argument_list|(
name|stat
operator|.
name|getObjectCount
argument_list|()
argument_list|)
comment|//
argument_list|,
name|duration
argument_list|(
name|stat
operator|.
name|getAverageGetTime
argument_list|()
argument_list|)
comment|//
argument_list|,
literal|""
argument_list|,
literal|""
comment|//
argument_list|,
name|percent
argument_list|(
name|stat
operator|.
name|getCacheHits
argument_list|()
argument_list|,
name|total
argument_list|)
comment|//
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|runFinalization
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|sshSummary
argument_list|()
expr_stmt|;
name|taskSummary
argument_list|()
expr_stmt|;
name|memSummary
argument_list|()
expr_stmt|;
if|if
condition|(
name|showJVM
condition|)
block|{
name|jvmSummary
argument_list|()
expr_stmt|;
block|}
name|stdout
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|memSummary ()
specifier|private
name|void
name|memSummary
parameter_list|()
block|{
specifier|final
name|Runtime
name|r
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|mMax
init|=
name|r
operator|.
name|maxMemory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|mFree
init|=
name|r
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|mTotal
init|=
name|r
operator|.
name|totalMemory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|mInuse
init|=
name|mTotal
operator|-
name|mFree
decl_stmt|;
specifier|final
name|int
name|jgitOpen
init|=
name|WindowCacheStatAccessor
operator|.
name|getOpenFiles
argument_list|()
decl_stmt|;
specifier|final
name|long
name|jgitBytes
init|=
name|WindowCacheStatAccessor
operator|.
name|getOpenBytes
argument_list|()
decl_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"Mem: %s total = %s used + %s free + %s buffers\n"
argument_list|,
name|bytes
argument_list|(
name|mTotal
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|mInuse
operator|-
name|jgitBytes
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|mFree
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|jgitBytes
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"     %s max\n"
argument_list|,
name|bytes
argument_list|(
name|mMax
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"    %8d open files, %8d cpus available, %8d threads\n"
argument_list|,
name|jgitOpen
argument_list|,
name|r
operator|.
name|availableProcessors
argument_list|()
argument_list|,
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|getThreadCount
argument_list|()
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
DECL|method|taskSummary ()
specifier|private
name|void
name|taskSummary
parameter_list|()
block|{
name|Collection
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|pending
init|=
name|workQueue
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|int
name|tasksTotal
init|=
name|pending
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|tasksRunning
init|=
literal|0
decl_stmt|,
name|tasksReady
init|=
literal|0
decl_stmt|,
name|tasksSleeping
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
range|:
name|pending
control|)
block|{
switch|switch
condition|(
name|task
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNING
case|:
name|tasksRunning
operator|++
expr_stmt|;
break|break;
case|case
name|READY
case|:
name|tasksReady
operator|++
expr_stmt|;
break|break;
case|case
name|SLEEPING
case|:
name|tasksSleeping
operator|++
expr_stmt|;
break|break;
block|}
block|}
name|stdout
operator|.
name|format
argument_list|(
literal|"Tasks: %4d  total = %4d running +   %4d ready + %4d sleeping\n"
argument_list|,
name|tasksTotal
argument_list|,
name|tasksRunning
argument_list|,
name|tasksReady
argument_list|,
name|tasksSleeping
argument_list|)
expr_stmt|;
block|}
DECL|method|sshSummary ()
specifier|private
name|void
name|sshSummary
parameter_list|()
block|{
name|IoAcceptor
name|acceptor
init|=
name|daemon
operator|.
name|getIoAcceptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|acceptor
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|IoSession
argument_list|>
name|list
init|=
name|acceptor
operator|.
name|getManagedSessions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|long
name|oldest
init|=
name|now
decl_stmt|;
for|for
control|(
name|IoSession
name|s
range|:
name|list
control|)
block|{
name|oldest
operator|=
name|Math
operator|.
name|min
argument_list|(
name|oldest
argument_list|,
name|s
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|format
argument_list|(
literal|"SSH:   %4d  users, oldest session started %s ago\n"
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|uptime
argument_list|(
name|now
operator|-
name|oldest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|jvmSummary ()
specifier|private
name|void
name|jvmSummary
parameter_list|()
block|{
name|OperatingSystemMXBean
name|osBean
init|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
decl_stmt|;
name|RuntimeMXBean
name|runtimeBean
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"JVM: %s %s %s\n"
argument_list|,
name|runtimeBean
operator|.
name|getVmVendor
argument_list|()
argument_list|,
name|runtimeBean
operator|.
name|getVmName
argument_list|()
argument_list|,
name|runtimeBean
operator|.
name|getVmVersion
argument_list|()
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"  on %s %s %s\n"
argument_list|,
literal|""
argument_list|,
name|osBean
operator|.
name|getName
argument_list|()
argument_list|,
name|osBean
operator|.
name|getVersion
argument_list|()
argument_list|,
name|osBean
operator|.
name|getArch
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|stdout
operator|.
name|format
argument_list|(
literal|"  running as %s on %s\n"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{     }
name|stdout
operator|.
name|format
argument_list|(
literal|"  cwd  %s\n"
argument_list|,
name|path
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|format
argument_list|(
literal|"  site %s\n"
argument_list|,
name|path
argument_list|(
name|sitePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|path (File file)
specifier|private
name|String
name|path
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
return|return
name|file
operator|.
name|getCanonicalPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
return|return
name|file
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
DECL|method|uptime (long uptimeMillis)
specifier|private
name|String
name|uptime
parameter_list|(
name|long
name|uptimeMillis
parameter_list|)
block|{
if|if
condition|(
name|uptimeMillis
operator|<
literal|1000
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%3d ms"
argument_list|,
name|uptimeMillis
argument_list|)
return|;
block|}
name|long
name|uptime
init|=
name|uptimeMillis
operator|/
literal|1000L
decl_stmt|;
name|long
name|min
init|=
name|uptime
operator|/
literal|60
decl_stmt|;
if|if
condition|(
name|min
operator|<
literal|60
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%2d min %2d sec"
argument_list|,
name|min
argument_list|,
name|uptime
operator|-
name|min
operator|*
literal|60
argument_list|)
return|;
block|}
name|long
name|hr
init|=
name|uptime
operator|/
literal|3600
decl_stmt|;
if|if
condition|(
name|hr
operator|<
literal|24
condition|)
block|{
name|min
operator|=
operator|(
name|uptime
operator|-
name|hr
operator|*
literal|3600
operator|)
operator|/
literal|60
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%2d hrs %2d min"
argument_list|,
name|hr
argument_list|,
name|min
argument_list|)
return|;
block|}
name|long
name|days
init|=
name|uptime
operator|/
operator|(
literal|24
operator|*
literal|3600
operator|)
decl_stmt|;
name|hr
operator|=
operator|(
name|uptime
operator|-
operator|(
name|days
operator|*
literal|24
operator|*
literal|3600
operator|)
operator|)
operator|/
literal|3600
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%4d days %2d hrs"
argument_list|,
name|days
argument_list|,
name|hr
argument_list|)
return|;
block|}
DECL|method|bytes (double value)
specifier|private
name|String
name|bytes
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|value
operator|/=
literal|1024
expr_stmt|;
name|String
name|suffix
init|=
literal|"k"
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|1024
condition|)
block|{
name|value
operator|/=
literal|1024
expr_stmt|;
name|suffix
operator|=
literal|"m"
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|>
literal|1024
condition|)
block|{
name|value
operator|/=
literal|1024
expr_stmt|;
name|suffix
operator|=
literal|"g"
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1$6.2f%2$s"
argument_list|,
name|value
argument_list|,
name|suffix
argument_list|)
return|;
block|}
DECL|method|count (long cnt)
specifier|private
name|String
name|count
parameter_list|(
name|long
name|cnt
parameter_list|)
block|{
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%6d"
argument_list|,
name|cnt
argument_list|)
return|;
block|}
DECL|method|duration (double ms)
specifier|private
name|String
name|duration
parameter_list|(
name|double
name|ms
parameter_list|)
block|{
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|ms
argument_list|)
operator|<=
literal|0.05
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|suffix
init|=
literal|"ms"
decl_stmt|;
if|if
condition|(
name|ms
operator|>=
literal|1000
condition|)
block|{
name|ms
operator|/=
literal|1000
expr_stmt|;
name|suffix
operator|=
literal|"s "
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%4.1f%s"
argument_list|,
name|ms
argument_list|,
name|suffix
argument_list|)
return|;
block|}
DECL|method|interval (double ttl)
specifier|private
name|String
name|interval
parameter_list|(
name|double
name|ttl
parameter_list|)
block|{
if|if
condition|(
name|ttl
operator|==
literal|0
condition|)
block|{
return|return
literal|"inf"
return|;
block|}
name|String
name|suffix
init|=
literal|"s"
decl_stmt|;
if|if
condition|(
name|ttl
operator|>=
literal|60
condition|)
block|{
name|ttl
operator|/=
literal|60
expr_stmt|;
name|suffix
operator|=
literal|"m"
expr_stmt|;
if|if
condition|(
name|ttl
operator|>=
literal|60
condition|)
block|{
name|ttl
operator|/=
literal|60
expr_stmt|;
name|suffix
operator|=
literal|"h"
expr_stmt|;
block|}
if|if
condition|(
name|ttl
operator|>=
literal|24
condition|)
block|{
name|ttl
operator|/=
literal|24
expr_stmt|;
name|suffix
operator|=
literal|"d"
expr_stmt|;
if|if
condition|(
name|ttl
operator|>=
literal|365
condition|)
block|{
name|ttl
operator|/=
literal|365
expr_stmt|;
name|suffix
operator|=
literal|"y"
expr_stmt|;
block|}
block|}
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|int
operator|)
name|ttl
argument_list|)
operator|+
name|suffix
return|;
block|}
DECL|method|percent (final long value, final long total)
specifier|private
name|String
name|percent
parameter_list|(
specifier|final
name|long
name|value
parameter_list|,
specifier|final
name|long
name|total
parameter_list|)
block|{
if|if
condition|(
name|total
operator|<=
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
specifier|final
name|long
name|pcent
init|=
operator|(
literal|100
operator|*
name|value
operator|)
operator|/
name|total
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%3d%%"
argument_list|,
operator|(
name|int
operator|)
name|pcent
argument_list|)
return|;
block|}
block|}
end_class

end_unit

