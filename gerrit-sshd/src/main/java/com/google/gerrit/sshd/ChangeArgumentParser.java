begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeFinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangesCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|BaseCommand
operator|.
name|UnloggedFailure
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
DECL|class|ChangeArgumentParser
specifier|public
class|class
name|ChangeArgumentParser
block|{
DECL|field|currentUser
specifier|private
specifier|final
name|CurrentUser
name|currentUser
decl_stmt|;
DECL|field|changesCollection
specifier|private
specifier|final
name|ChangesCollection
name|changesCollection
decl_stmt|;
DECL|field|changeFinder
specifier|private
specifier|final
name|ChangeFinder
name|changeFinder
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|changeNotesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
specifier|final
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeArgumentParser (CurrentUser currentUser, ChangesCollection changesCollection, ChangeFinder changeFinder, ReviewDb db, ChangeNotes.Factory changeNotesFactory, ChangeControl.GenericFactory changeControlFactory)
name|ChangeArgumentParser
parameter_list|(
name|CurrentUser
name|currentUser
parameter_list|,
name|ChangesCollection
name|changesCollection
parameter_list|,
name|ChangeFinder
name|changeFinder
parameter_list|,
name|ReviewDb
name|db
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
parameter_list|,
name|ChangeControl
operator|.
name|GenericFactory
name|changeControlFactory
parameter_list|)
block|{
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|changesCollection
operator|=
name|changesCollection
expr_stmt|;
name|this
operator|.
name|changeFinder
operator|=
name|changeFinder
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|changeNotesFactory
operator|=
name|changeNotesFactory
expr_stmt|;
name|this
operator|.
name|changeControlFactory
operator|=
name|changeControlFactory
expr_stmt|;
block|}
DECL|method|addChange (String id, Map<Change.Id, ChangeResource> changes)
specifier|public
name|void
name|addChange
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeResource
argument_list|>
name|changes
parameter_list|)
throws|throws
name|UnloggedFailure
throws|,
name|OrmException
block|{
name|addChange
argument_list|(
name|id
argument_list|,
name|changes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|addChange (String id, Map<Change.Id, ChangeResource> changes, ProjectControl projectControl)
specifier|public
name|void
name|addChange
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeResource
argument_list|>
name|changes
parameter_list|,
name|ProjectControl
name|projectControl
parameter_list|)
throws|throws
name|UnloggedFailure
throws|,
name|OrmException
block|{
name|addChange
argument_list|(
name|id
argument_list|,
name|changes
argument_list|,
name|projectControl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|addChange (String id, Map<Change.Id, ChangeResource> changes, ProjectControl projectControl, boolean useIndex)
specifier|public
name|void
name|addChange
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeResource
argument_list|>
name|changes
parameter_list|,
name|ProjectControl
name|projectControl
parameter_list|,
name|boolean
name|useIndex
parameter_list|)
throws|throws
name|UnloggedFailure
throws|,
name|OrmException
block|{
name|List
argument_list|<
name|ChangeControl
argument_list|>
name|matched
init|=
name|useIndex
condition|?
name|changeFinder
operator|.
name|find
argument_list|(
name|id
argument_list|,
name|currentUser
argument_list|)
else|:
name|changeFromNotesFactory
argument_list|(
name|id
argument_list|,
name|currentUser
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeControl
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeControl
name|ctl
range|:
name|matched
control|)
block|{
if|if
condition|(
operator|!
name|changes
operator|.
name|containsKey
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|inProject
argument_list|(
name|projectControl
argument_list|,
name|ctl
operator|.
name|getProject
argument_list|()
argument_list|)
operator|&&
name|ctl
operator|.
name|isVisible
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|toAdd
operator|.
name|add
argument_list|(
name|ctl
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"\""
operator|+
name|id
operator|+
literal|"\" no such change"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|toAdd
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"\""
operator|+
name|id
operator|+
literal|"\" matches multiple changes"
argument_list|)
throw|;
block|}
name|ChangeControl
name|ctl
init|=
name|toAdd
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|changes
operator|.
name|put
argument_list|(
name|ctl
operator|.
name|getId
argument_list|()
argument_list|,
name|changesCollection
operator|.
name|parse
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|changeFromNotesFactory (String id, CurrentUser currentUser)
specifier|private
name|List
argument_list|<
name|ChangeControl
argument_list|>
name|changeFromNotesFactory
parameter_list|(
name|String
name|id
parameter_list|,
name|CurrentUser
name|currentUser
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|changeNotesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|changeNote
lambda|->
name|controlForChange
argument_list|(
name|changeNote
argument_list|,
name|currentUser
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|changeControl
lambda|->
name|changeControl
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|changeControl
lambda|->
name|changeControl
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|controlForChange (ChangeNotes change, CurrentUser user)
specifier|private
name|Optional
argument_list|<
name|ChangeControl
argument_list|>
name|controlForChange
parameter_list|(
name|ChangeNotes
name|change
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|changeControlFactory
operator|.
name|controlFor
argument_list|(
name|change
argument_list|,
name|user
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|method|inProject (ProjectControl projectControl, Project project)
specifier|private
name|boolean
name|inProject
parameter_list|(
name|ProjectControl
name|projectControl
parameter_list|,
name|Project
name|project
parameter_list|)
block|{
if|if
condition|(
name|projectControl
operator|!=
literal|null
condition|)
block|{
return|return
name|projectControl
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
return|;
block|}
comment|// No --project option, so they want every project.
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

