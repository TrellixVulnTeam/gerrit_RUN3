begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_class
DECL|class|SshCommandSensitiveFieldsCacheImpl
specifier|public
class|class
name|SshCommandSensitiveFieldsCacheImpl
implements|implements
name|SshCommandSensitiveFieldsCache
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"sshd_sensitive_command_params"
decl_stmt|;
DECL|field|sshdCommandsCache
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|sshdCommandsCache
decl_stmt|;
DECL|method|module ()
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|cache
argument_list|(
name|CACHE_NAME
argument_list|,
operator|new
name|TypeLiteral
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
operator|new
name|TypeLiteral
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|.loader
parameter_list|(
name|Loader
operator|.
name|class
parameter_list|)
function|;
name|bind
argument_list|(
name|SshCommandSensitiveFieldsCache
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|SshCommandSensitiveFieldsCacheImpl
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_class

begin_decl_stmt
annotation|@
name|Inject
DECL|method|SshCommandSensitiveFieldsCacheImpl (@amedCACHE_NAME) LoadingCache<Class<?>, Set<String>> cache)
name|SshCommandSensitiveFieldsCacheImpl
argument_list|(
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
name|LoadingCache
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|cache
argument_list|)
block|{
name|sshdCommandsCache
operator|=
name|cache
expr_stmt|;
block|}
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|get (Class<?> cmd)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cmd
parameter_list|)
block|{
return|return
name|sshdCommandsCache
operator|.
name|getUnchecked
argument_list|(
name|cmd
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|evictAll ()
specifier|public
name|void
name|evictAll
parameter_list|()
block|{
name|sshdCommandsCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Loader
specifier|static
class|class
name|Loader
extends|extends
name|CacheLoader
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|load (Class<?> cmd)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|load
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|datas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|cmd
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|SensitiveData
operator|.
name|class
argument_list|)
condition|)
block|{
name|Option
name|option
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
name|datas
operator|.
name|add
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|option
operator|.
name|aliases
argument_list|()
control|)
block|{
name|datas
operator|.
name|add
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|datas
return|;
block|}
block|}
end_class

unit|}
end_unit

