begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|rules
operator|.
name|PrologEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|rules
operator|.
name|StoredValues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|AccountAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|SubmitLabelAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|SubmitRecordAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChangeControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|SshCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|compiler
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|BufferingPrologControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|JavaObjectTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|ListTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Prolog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|PrologClassLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|PrologException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|PrologMachineCopy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|SymbolTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|VariableTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Command that allows testing of prolog submit-rules in a live instance. */
end_comment

begin_class
DECL|class|TestSubmitRule
specifier|final
class|class
name|TestSubmitRule
extends|extends
name|SshCommand
block|{
annotation|@
name|Inject
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|field|envFactory
specifier|private
name|PrologEnvironment
operator|.
name|Factory
name|envFactory
decl_stmt|;
annotation|@
name|Inject
DECL|field|ccFactory
specifier|private
name|ChangeControl
operator|.
name|Factory
name|ccFactory
decl_stmt|;
annotation|@
name|Inject
DECL|field|accountCache
specifier|private
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|anonymousCowardName
specifier|final
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|usage
operator|=
literal|"ChangeId to load in prolog environment"
argument_list|)
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-s"
argument_list|,
name|usage
operator|=
literal|"Read prolog script from stdin instead of reading rules.pl from the refs/meta/config branch"
argument_list|)
DECL|field|useStdin
specifier|private
name|boolean
name|useStdin
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--format"
argument_list|,
name|metaVar
operator|=
literal|"FMT"
argument_list|,
name|usage
operator|=
literal|"Output display format"
argument_list|)
DECL|field|format
specifier|private
name|OutputFormat
name|format
init|=
name|OutputFormat
operator|.
name|TEXT
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--no-filters"
argument_list|,
name|aliases
operator|=
block|{
literal|"-n"
block|}
argument_list|,
name|usage
operator|=
literal|"Don't run the submit_filter/2 from the parent projects"
argument_list|)
DECL|field|skipSubmitFilters
specifier|private
name|boolean
name|skipSubmitFilters
decl_stmt|;
DECL|field|PACKAGE_LIST
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PACKAGE_LIST
init|=
block|{
name|Prolog
operator|.
name|BUILTIN
block|,
literal|"gerrit"
block|}
decl_stmt|;
annotation|@
name|Inject
DECL|method|TestSubmitRule (@nonymousCowardName String anonymous)
specifier|public
name|TestSubmitRule
parameter_list|(
annotation|@
name|AnonymousCowardName
name|String
name|anonymous
parameter_list|)
block|{
name|anonymousCowardName
operator|=
name|anonymous
expr_stmt|;
block|}
DECL|method|newMachine ()
specifier|private
name|PrologMachineCopy
name|newMachine
parameter_list|()
block|{
name|BufferingPrologControl
name|ctl
init|=
operator|new
name|BufferingPrologControl
argument_list|()
decl_stmt|;
name|ctl
operator|.
name|setMaxDatabaseSize
argument_list|(
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|ctl
operator|.
name|setPrologClassLoader
argument_list|(
operator|new
name|PrologClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|PrologMachineCopy
operator|.
name|save
argument_list|(
name|ctl
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|UnloggedFailure
block|{
name|PushbackReader
name|inReader
init|=
operator|new
name|PushbackReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|PrologEnvironment
name|pcl
decl_stmt|;
name|List
argument_list|<
name|Change
argument_list|>
name|changeList
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byKey
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|changeList
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"Invalid ChangeId"
argument_list|)
throw|;
name|Change
name|c
init|=
name|changeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Will throw exception if current user can not access this change, and
comment|// thus will leak information that a change-id is valid even though the
comment|// user are not allowed to see the change.
comment|// See http://code.google.com/p/gerrit/issues/detail?id=1586
name|ChangeControl
name|cc
init|=
name|ccFactory
operator|.
name|controlFor
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ProjectState
name|projectState
init|=
name|cc
operator|.
name|getProjectControl
argument_list|()
operator|.
name|getProjectState
argument_list|()
decl_stmt|;
if|if
condition|(
name|useStdin
condition|)
block|{
name|pcl
operator|=
name|envFactory
operator|.
name|create
argument_list|(
name|newMachine
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pcl
operator|=
name|projectState
operator|.
name|newPrologEnvironment
argument_list|()
expr_stmt|;
block|}
name|pcl
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|REVIEW_DB
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|PATCH_SET
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE_CONTROL
argument_list|,
name|cc
argument_list|)
expr_stmt|;
if|if
condition|(
name|useStdin
condition|)
block|{
name|pcl
operator|.
name|initialize
argument_list|(
name|PACKAGE_LIST
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|execute
argument_list|(
name|Prolog
operator|.
name|BUILTIN
argument_list|,
literal|"consult_stream"
argument_list|,
name|SymbolTerm
operator|.
name|intern
argument_list|(
literal|"stdin"
argument_list|)
argument_list|,
operator|new
name|JavaObjectTerm
argument_list|(
name|inReader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Term
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
name|Term
name|submitRule
init|=
name|pcl
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"locate_submit_rule"
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Term
index|[]
name|template
range|:
name|pcl
operator|.
name|all
argument_list|(
literal|"gerrit"
argument_list|,
literal|"can_submit"
argument_list|,
name|submitRule
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|template
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipSubmitFilters
condition|)
block|{
name|runSubmitFilters
argument_list|(
name|projectState
argument_list|,
name|results
argument_list|,
name|pcl
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|res
init|=
name|cc
operator|.
name|resultsToSubmitRecord
argument_list|(
name|submitRule
argument_list|,
name|results
argument_list|)
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|r
range|:
name|res
control|)
block|{
if|if
condition|(
name|format
operator|.
name|isJson
argument_list|()
condition|)
block|{
name|SubmitRecordAttribute
name|submitRecord
init|=
operator|new
name|SubmitRecordAttribute
argument_list|()
decl_stmt|;
name|submitRecord
operator|.
name|status
operator|=
name|r
operator|.
name|status
operator|.
name|name
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SubmitLabelAttribute
argument_list|>
name|submitLabels
init|=
operator|new
name|LinkedList
argument_list|<
name|SubmitLabelAttribute
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|l
range|:
name|r
operator|.
name|labels
control|)
block|{
name|SubmitLabelAttribute
name|label
init|=
operator|new
name|SubmitLabelAttribute
argument_list|()
decl_stmt|;
name|label
operator|.
name|label
operator|=
name|l
operator|.
name|label
expr_stmt|;
name|label
operator|.
name|status
operator|=
name|l
operator|.
name|status
operator|.
name|name
argument_list|()
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|appliedBy
operator|!=
literal|null
condition|)
block|{
name|Account
name|a
init|=
name|accountCache
operator|.
name|get
argument_list|(
name|l
operator|.
name|appliedBy
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|label
operator|.
name|by
operator|=
operator|new
name|AccountAttribute
argument_list|()
expr_stmt|;
name|label
operator|.
name|by
operator|.
name|email
operator|=
name|a
operator|.
name|getPreferredEmail
argument_list|()
expr_stmt|;
name|label
operator|.
name|by
operator|.
name|name
operator|=
name|a
operator|.
name|getFullName
argument_list|()
expr_stmt|;
name|label
operator|.
name|by
operator|.
name|username
operator|=
name|a
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|submitLabels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|submitRecord
operator|.
name|labels
operator|=
name|submitLabels
expr_stmt|;
name|format
operator|.
name|newGson
argument_list|()
operator|.
name|toJson
argument_list|(
name|submitRecord
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|SubmitRecordAttribute
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
name|stdout
argument_list|)
expr_stmt|;
name|stdout
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|l
range|:
name|r
operator|.
name|labels
control|)
block|{
name|stdout
operator|.
name|print
argument_list|(
name|l
operator|.
name|label
operator|+
literal|": "
operator|+
name|l
operator|.
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|appliedBy
operator|!=
literal|null
condition|)
block|{
name|AccountInfo
name|a
init|=
operator|new
name|AccountInfo
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|l
operator|.
name|appliedBy
argument_list|)
operator|.
name|getAccount
argument_list|()
argument_list|)
decl_stmt|;
name|stdout
operator|.
name|print
argument_list|(
literal|" by "
operator|+
name|a
operator|.
name|getNameEmail
argument_list|(
name|anonymousCowardName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|"\n"
operator|+
name|r
operator|.
name|status
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|"Processing of prolog script failed: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|runSubmitFilters (ProjectState projectState, List<Term> results, PrologEnvironment pcl)
specifier|private
name|void
name|runSubmitFilters
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|List
argument_list|<
name|Term
argument_list|>
name|results
parameter_list|,
name|PrologEnvironment
name|pcl
parameter_list|)
throws|throws
name|UnloggedFailure
block|{
name|ProjectState
name|parentState
init|=
name|projectState
operator|.
name|getParentState
argument_list|()
decl_stmt|;
name|PrologEnvironment
name|childEnv
init|=
name|pcl
decl_stmt|;
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projectsSeen
init|=
operator|new
name|HashSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
argument_list|()
decl_stmt|;
name|projectsSeen
operator|.
name|add
argument_list|(
name|projectState
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|parentState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|projectsSeen
operator|.
name|add
argument_list|(
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// parent has been seen before, stop walk up inheritance tree
break|break;
block|}
name|PrologEnvironment
name|parentEnv
decl_stmt|;
try|try
block|{
name|parentEnv
operator|=
name|parentState
operator|.
name|newPrologEnvironment
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompileException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|"Cannot consult rules.pl for "
operator|+
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|err
argument_list|)
throw|;
block|}
name|parentEnv
operator|.
name|copyStoredValues
argument_list|(
name|childEnv
argument_list|)
expr_stmt|;
name|Term
name|filterRule
init|=
name|parentEnv
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"locate_submit_filter"
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterRule
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Term
name|resultsTerm
init|=
name|ChangeControl
operator|.
name|toListTerm
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Term
index|[]
name|template
init|=
name|parentEnv
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
literal|"filter_submit_results"
argument_list|,
name|filterRule
argument_list|,
name|resultsTerm
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Term
argument_list|>
name|termList
init|=
operator|(
operator|(
name|ListTerm
operator|)
name|template
index|[
literal|2
index|]
operator|)
operator|.
name|toJava
argument_list|()
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|termList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrologException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|"Exception calling "
operator|+
name|filterRule
operator|+
literal|" of "
operator|+
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|err
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|"Exception calling "
operator|+
name|filterRule
operator|+
literal|" of "
operator|+
name|parentState
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|err
argument_list|)
throw|;
block|}
block|}
name|parentState
operator|=
name|parentState
operator|.
name|getParentState
argument_list|()
expr_stmt|;
name|childEnv
operator|=
name|parentEnv
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

