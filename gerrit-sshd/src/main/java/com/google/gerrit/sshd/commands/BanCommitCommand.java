begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|CommandMetaData
operator|.
name|Mode
operator|.
name|MASTER_OR_SLAVE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BanCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BanCommitResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|CommandMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|SshCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|ConcurrentRefUpdateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|CommandMetaData
argument_list|(
name|name
operator|=
literal|"ban-commit"
argument_list|,
name|description
operator|=
literal|"Ban a commit from a project's repository"
argument_list|,
name|runsAt
operator|=
name|MASTER_OR_SLAVE
argument_list|)
DECL|class|BanCommitCommand
specifier|public
class|class
name|BanCommitCommand
extends|extends
name|SshCommand
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--reason"
argument_list|,
name|aliases
operator|=
block|{
literal|"-r"
block|}
argument_list|,
name|metaVar
operator|=
literal|"REASON"
argument_list|,
name|usage
operator|=
literal|"reason for banning the commit"
argument_list|)
DECL|field|reason
specifier|private
name|String
name|reason
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"PROJECT"
argument_list|,
name|usage
operator|=
literal|"name of the project for which the commit should be banned"
argument_list|)
DECL|field|projectControl
specifier|private
name|ProjectControl
name|projectControl
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"COMMIT"
argument_list|,
name|usage
operator|=
literal|"commit(s) that should be banned"
argument_list|)
DECL|field|commitsToBan
specifier|private
name|List
argument_list|<
name|ObjectId
argument_list|>
name|commitsToBan
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|field|banCommitFactory
specifier|private
name|BanCommit
operator|.
name|Factory
name|banCommitFactory
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|Failure
block|{
try|try
block|{
specifier|final
name|BanCommitResult
name|result
init|=
name|banCommitFactory
operator|.
name|create
argument_list|()
operator|.
name|ban
argument_list|(
name|projectControl
argument_list|,
name|commitsToBan
argument_list|,
name|reason
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|newlyBannedCommits
init|=
name|result
operator|.
name|getNewlyBannedCommits
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newlyBannedCommits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
literal|"The following commits were banned:\n"
argument_list|)
expr_stmt|;
name|printCommits
argument_list|(
name|stdout
argument_list|,
name|newlyBannedCommits
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|alreadyBannedCommits
init|=
name|result
operator|.
name|getAlreadyBannedCommits
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyBannedCommits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
literal|"The following commits were already banned:\n"
argument_list|)
expr_stmt|;
name|printCommits
argument_list|(
name|stdout
argument_list|,
name|alreadyBannedCommits
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|ignoredIds
init|=
name|result
operator|.
name|getIgnoredObjectIds
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignoredIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
literal|"The following ids do not represent commits"
operator|+
literal|" and were ignored:\n"
argument_list|)
expr_stmt|;
name|printCommits
argument_list|(
name|stdout
argument_list|,
name|ignoredIds
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MergeException
name|e
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ConcurrentRefUpdateException
name|e
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|printCommits (final PrintWriter stdout, final List<ObjectId> commits)
specifier|private
specifier|static
name|void
name|printCommits
parameter_list|(
specifier|final
name|PrintWriter
name|stdout
parameter_list|,
specifier|final
name|List
argument_list|<
name|ObjectId
argument_list|>
name|commits
parameter_list|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectId
name|c
range|:
name|commits
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|stdout
operator|.
name|print
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|stdout
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

