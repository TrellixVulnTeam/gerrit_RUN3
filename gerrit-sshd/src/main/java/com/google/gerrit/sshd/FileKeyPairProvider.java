begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|com.google.gerrit.sshd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|AbstractKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMDecryptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMEncryptedKeyPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMKeyPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PasswordFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|jcajce
operator|.
name|JcaPEMKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|jcajce
operator|.
name|JcePEMDecryptorProviderBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * This host key provider loads private keys from the specified files.  *  * Note that this class has a direct dependency on BouncyCastle and won't work  * unless it has been correctly registered as a security provider.  *  * @author<a href="mailto:dev@mina.apache.org">Apache MINA SSHD Project</a>  */
end_comment

begin_class
DECL|class|FileKeyPairProvider
specifier|public
class|class
name|FileKeyPairProvider
extends|extends
name|AbstractKeyPairProvider
block|{
DECL|field|files
specifier|private
name|String
index|[]
name|files
decl_stmt|;
DECL|field|passwordFinder
specifier|private
name|PasswordFinder
name|passwordFinder
decl_stmt|;
DECL|method|FileKeyPairProvider ()
specifier|public
name|FileKeyPairProvider
parameter_list|()
block|{     }
DECL|method|FileKeyPairProvider (String[] files)
specifier|public
name|FileKeyPairProvider
parameter_list|(
name|String
index|[]
name|files
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
block|}
DECL|method|FileKeyPairProvider (String[] files, PasswordFinder passwordFinder)
specifier|public
name|FileKeyPairProvider
parameter_list|(
name|String
index|[]
name|files
parameter_list|,
name|PasswordFinder
name|passwordFinder
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|passwordFinder
operator|=
name|passwordFinder
expr_stmt|;
block|}
DECL|method|getFiles ()
specifier|public
name|String
index|[]
name|getFiles
parameter_list|()
block|{
return|return
name|files
return|;
block|}
DECL|method|setFiles (String[] files)
specifier|public
name|void
name|setFiles
parameter_list|(
name|String
index|[]
name|files
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
block|}
DECL|method|getPasswordFinder ()
specifier|public
name|PasswordFinder
name|getPasswordFinder
parameter_list|()
block|{
return|return
name|passwordFinder
return|;
block|}
DECL|method|setPasswordFinder (PasswordFinder passwordFinder)
specifier|public
name|void
name|setPasswordFinder
parameter_list|(
name|PasswordFinder
name|passwordFinder
parameter_list|)
block|{
name|this
operator|.
name|passwordFinder
operator|=
name|passwordFinder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadKeys ()
specifier|public
name|Iterable
argument_list|<
name|KeyPair
argument_list|>
name|loadKeys
parameter_list|()
block|{
if|if
condition|(
operator|!
name|SecurityUtils
operator|.
name|isBouncyCastleRegistered
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BouncyCastle must be registered as a JCE provider"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterable
argument_list|<
name|KeyPair
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|KeyPair
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|KeyPair
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|KeyPair
name|nextKeyPair
decl_stmt|;
specifier|private
name|boolean
name|nextKeyPairSet
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextKeyPairSet
operator|||
name|setNextObject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyPair
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nextKeyPairSet
condition|)
block|{
if|if
condition|(
operator|!
name|setNextObject
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
name|nextKeyPairSet
operator|=
literal|false
expr_stmt|;
return|return
name|nextKeyPair
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|boolean
name|setNextObject
parameter_list|()
block|{
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|file
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|nextKeyPair
operator|=
name|doLoadKey
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextKeyPair
operator|!=
literal|null
condition|)
block|{
name|nextKeyPairSet
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|doLoadKey (String file)
specifier|protected
name|KeyPair
name|doLoadKey
parameter_list|(
name|String
name|file
parameter_list|)
block|{
try|try
init|(
name|PEMParser
name|r
init|=
operator|new
name|PEMParser
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|Object
name|o
init|=
name|r
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|JcaPEMKeyConverter
name|pemConverter
init|=
operator|new
name|JcaPEMKeyConverter
argument_list|()
decl_stmt|;
name|pemConverter
operator|.
name|setProvider
argument_list|(
literal|"BC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|passwordFinder
operator|!=
literal|null
operator|&&
name|o
operator|instanceof
name|PEMEncryptedKeyPair
condition|)
block|{
name|JcePEMDecryptorProviderBuilder
name|decryptorBuilder
init|=
operator|new
name|JcePEMDecryptorProviderBuilder
argument_list|()
decl_stmt|;
name|PEMDecryptorProvider
name|pemDecryptor
init|=
name|decryptorBuilder
operator|.
name|build
argument_list|(
name|passwordFinder
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|=
name|pemConverter
operator|.
name|getKeyPair
argument_list|(
operator|(
operator|(
name|PEMEncryptedKeyPair
operator|)
name|o
operator|)
operator|.
name|decryptKeyPair
argument_list|(
name|pemDecryptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|PEMKeyPair
condition|)
block|{
name|o
operator|=
name|pemConverter
operator|.
name|getKeyPair
argument_list|(
operator|(
name|PEMKeyPair
operator|)
name|o
argument_list|)
expr_stmt|;
return|return
operator|(
name|KeyPair
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|KeyPair
condition|)
block|{
return|return
operator|(
name|KeyPair
operator|)
name|o
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read key "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

