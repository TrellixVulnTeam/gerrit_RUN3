begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|CommandMetaData
operator|.
name|Mode
operator|.
name|MASTER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|EventSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|RequiresCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|EventTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|SupplierSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
operator|.
name|CancelableRunnable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|BaseCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|CommandMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|StreamCommandExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_class
annotation|@
name|RequiresCapability
argument_list|(
name|GlobalCapability
operator|.
name|STREAM_EVENTS
argument_list|)
annotation|@
name|CommandMetaData
argument_list|(
name|name
operator|=
literal|"stream-events"
argument_list|,
name|description
operator|=
literal|"Monitor events occurring in real time"
argument_list|,
name|runsAt
operator|=
name|MASTER
argument_list|)
DECL|class|StreamEvents
specifier|final
class|class
name|StreamEvents
extends|extends
name|BaseCommand
block|{
comment|/** Maximum number of events that may be queued up for each connection. */
DECL|field|MAX_EVENTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_EVENTS
init|=
literal|128
decl_stmt|;
comment|/** Number of events to write before yielding off the thread. */
DECL|field|BATCH_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|32
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--subscribe"
argument_list|,
name|aliases
operator|=
block|{
literal|"-s"
block|}
argument_list|,
name|metaVar
operator|=
literal|"SUBSCRIBE"
argument_list|,
name|usage
operator|=
literal|"subscribe to specific stream-events"
argument_list|)
DECL|field|subscribedToEvents
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|subscribedToEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|field|currentUser
specifier|private
name|IdentifiedUser
name|currentUser
decl_stmt|;
annotation|@
name|Inject
DECL|field|source
specifier|private
name|EventSource
name|source
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|StreamCommandExecutor
DECL|field|pool
specifier|private
name|WorkQueue
operator|.
name|Executor
name|pool
decl_stmt|;
comment|/** Queue of events to stream to the connected user. */
DECL|field|queue
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Event
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|MAX_EVENTS
argument_list|)
decl_stmt|;
DECL|field|gson
specifier|private
name|Gson
name|gson
decl_stmt|;
comment|/** Special event to notify clients they missed other events. */
DECL|class|DroppedOutputEvent
specifier|private
specifier|static
specifier|final
class|class
name|DroppedOutputEvent
extends|extends
name|Event
block|{
DECL|field|TYPE
specifier|private
specifier|final
specifier|static
name|String
name|TYPE
init|=
literal|"dropped-output"
decl_stmt|;
DECL|method|DroppedOutputEvent ()
specifier|public
name|DroppedOutputEvent
parameter_list|()
block|{
name|super
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
block|}
block|}
static|static
block|{
name|EventTypes
operator|.
name|register
argument_list|(
name|DroppedOutputEvent
operator|.
name|TYPE
argument_list|,
name|DroppedOutputEvent
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|listener
specifier|private
specifier|final
name|EventListener
name|listener
init|=
operator|new
name|EventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|subscribedToEvents
operator|.
name|isEmpty
argument_list|()
operator|||
name|subscribedToEvents
operator|.
name|contains
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|offer
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|CancelableRunnable
name|writer
init|=
operator|new
name|CancelableRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|writeEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|onExit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Stream Events ("
operator|+
name|currentUser
operator|.
name|getAccount
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
decl_stmt|;
comment|/** True if {@link DroppedOutputEvent} needs to be sent. */
DECL|field|dropped
specifier|private
specifier|volatile
name|boolean
name|dropped
decl_stmt|;
comment|/** Lock to protect {@link #queue}, {@link #task}, {@link #done}. */
DECL|field|taskLock
specifier|private
specifier|final
name|Object
name|taskLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/** True if no more messages should be sent to the output. */
DECL|field|done
specifier|private
name|boolean
name|done
decl_stmt|;
comment|/**    * Currently scheduled task to spin out {@link #queue}.    *<p>    * This field is usually {@code null}, unless there is at least one object    * present inside of {@link #queue} ready for delivery. Tasks are only started    * when there are events to be sent.    */
DECL|field|task
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|task
decl_stmt|;
DECL|field|stdout
specifier|private
name|PrintWriter
name|stdout
decl_stmt|;
annotation|@
name|Override
DECL|method|start (final Environment env)
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|parseCommandLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnloggedFailure
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|msg
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|err
operator|.
name|write
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|onExit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|stdout
operator|=
name|toPrintWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|source
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|gson
operator|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|Supplier
operator|.
name|class
argument_list|,
operator|new
name|SupplierSerializer
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onExit (final int rc)
specifier|protected
name|void
name|onExit
parameter_list|(
specifier|final
name|int
name|rc
parameter_list|)
block|{
name|source
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|taskLock
init|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
name|super
operator|.
name|onExit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|source
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|exit
decl_stmt|;
synchronized|synchronized
init|(
name|taskLock
init|)
block|{
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|task
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exit
operator|=
literal|false
expr_stmt|;
comment|// onExit will be invoked by the task cancellation.
block|}
else|else
block|{
name|exit
operator|=
operator|!
name|done
expr_stmt|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|exit
condition|)
block|{
name|onExit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|offer (final Event event)
specifier|private
name|void
name|offer
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
synchronized|synchronized
init|(
name|taskLock
init|)
block|{
if|if
condition|(
operator|!
name|queue
operator|.
name|offer
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|dropped
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|==
literal|null
operator|&&
operator|!
name|done
condition|)
block|{
name|task
operator|=
name|pool
operator|.
name|submit
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|poll ()
specifier|private
name|Event
name|poll
parameter_list|()
block|{
synchronized|synchronized
init|(
name|taskLock
init|)
block|{
name|Event
name|event
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|task
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
block|}
DECL|method|writeEvents ()
specifier|private
name|void
name|writeEvents
parameter_list|()
block|{
name|int
name|processed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|processed
operator|<
name|BATCH_SIZE
condition|)
block|{
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
operator|||
name|stdout
operator|.
name|checkError
argument_list|()
condition|)
block|{
comment|// The other side either requested a shutdown by calling our
comment|// destroy() above, or it closed the stream and is no longer
comment|// accepting output. Either way terminate this instance.
comment|//
name|source
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|onExit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dropped
condition|)
block|{
name|write
argument_list|(
operator|new
name|DroppedOutputEvent
argument_list|()
argument_list|)
expr_stmt|;
name|dropped
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|Event
name|event
init|=
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|write
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|processed
operator|++
expr_stmt|;
block|}
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|BATCH_SIZE
operator|<=
name|processed
condition|)
block|{
comment|// We processed the limit, but more might remain in the queue.
comment|// Schedule the write task again so we will come back here and
comment|// can process more events.
comment|//
synchronized|synchronized
init|(
name|taskLock
init|)
block|{
name|task
operator|=
name|pool
operator|.
name|submit
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|write (final Object message)
specifier|private
name|void
name|write
parameter_list|(
specifier|final
name|Object
name|message
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
name|gson
operator|.
name|toJson
argument_list|(
name|message
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
synchronized|synchronized
init|(
name|stdout
init|)
block|{
name|stdout
operator|.
name|print
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flush ()
specifier|private
name|void
name|flush
parameter_list|()
block|{
synchronized|synchronized
init|(
name|stdout
init|)
block|{
name|stdout
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

