begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Command that dispatches to a subcommand from its command table.  */
end_comment

begin_class
DECL|class|DispatchCommand
specifier|final
class|class
name|DispatchCommand
extends|extends
name|BaseCommand
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (String prefix, Map<String, Provider<Command>> map)
name|DispatchCommand
name|create
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|Command
argument_list|>
argument_list|>
name|map
parameter_list|)
function_decl|;
block|}
DECL|field|currentUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|commands
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|Command
argument_list|>
argument_list|>
name|commands
decl_stmt|;
DECL|field|cmd
specifier|private
name|Command
name|cmd
decl_stmt|;
annotation|@
name|Inject
DECL|method|DispatchCommand (final Provider<CurrentUser> cu, @Assisted final String pfx, @Assisted final Map<String, Provider<Command>> all)
name|DispatchCommand
parameter_list|(
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|cu
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|String
name|pfx
parameter_list|,
annotation|@
name|Assisted
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|Command
argument_list|>
argument_list|>
name|all
parameter_list|)
block|{
name|currentUser
operator|=
name|cu
expr_stmt|;
name|prefix
operator|=
name|pfx
expr_stmt|;
name|commands
operator|=
name|all
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start (final Environment env)
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|commandLine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|name
decl_stmt|,
name|args
decl_stmt|;
name|int
name|sp
init|=
name|commandLine
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|sp
condition|)
block|{
name|name
operator|=
name|commandLine
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sp
argument_list|)
expr_stmt|;
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|commandLine
operator|.
name|charAt
argument_list|(
name|sp
argument_list|)
argument_list|)
condition|)
block|{
name|sp
operator|++
expr_stmt|;
block|}
name|args
operator|=
name|commandLine
operator|.
name|substring
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|commandLine
expr_stmt|;
name|args
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"help"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|Provider
argument_list|<
name|Command
argument_list|>
name|p
init|=
name|commands
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Command
name|cmd
init|=
name|p
operator|.
name|get
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|AdminCommand
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|CurrentUser
name|u
init|=
name|currentUser
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|u
operator|.
name|isAdministrator
argument_list|()
condition|)
block|{
name|err
operator|.
name|write
argument_list|(
literal|"fatal: Not a Gerrit administrator\n"
operator|.
name|getBytes
argument_list|(
name|ENC
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|onExit
argument_list|(
name|BaseCommand
operator|.
name|STATUS_NOT_ADMIN
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|provideStateTo
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|instanceof
name|BaseCommand
condition|)
block|{
specifier|final
name|BaseCommand
name|bc
init|=
operator|(
name|BaseCommand
operator|)
name|cmd
decl_stmt|;
if|if
condition|(
name|commandPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
name|bc
operator|.
name|setCommandPrefix
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|bc
operator|.
name|setCommandPrefix
argument_list|(
name|commandPrefix
operator|+
literal|" "
operator|+
name|name
argument_list|)
expr_stmt|;
name|bc
operator|.
name|setCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|start
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|msg
init|=
name|prefix
operator|+
literal|": "
operator|+
name|name
operator|+
literal|": not found\n"
decl_stmt|;
name|err
operator|.
name|write
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
name|ENC
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|onExit
argument_list|(
name|BaseCommand
operator|.
name|STATUS_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|cmd
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|cmd
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|usage ()
specifier|private
name|void
name|usage
parameter_list|()
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
block|{
specifier|final
name|StringBuilder
name|usage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|<
literal|0
condition|)
block|{
name|usage
operator|.
name|append
argument_list|(
literal|"usage: "
operator|+
name|prefix
operator|+
literal|" COMMAND [ARGS]\n"
argument_list|)
expr_stmt|;
block|}
name|usage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"Available commands of "
operator|+
name|prefix
operator|+
literal|" are:\n"
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|Command
argument_list|>
argument_list|>
name|e
range|:
name|commands
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|usage
operator|.
name|append
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|usage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"See '"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|<
literal|0
condition|)
block|{
name|usage
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|usage
operator|.
name|append
argument_list|(
literal|"COMMAND --help' for more information.\n"
argument_list|)
expr_stmt|;
name|usage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|err
operator|.
name|write
argument_list|(
name|usage
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|onExit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

