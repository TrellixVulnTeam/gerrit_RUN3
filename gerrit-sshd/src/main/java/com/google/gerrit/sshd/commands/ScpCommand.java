begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_comment
comment|/*  * NB: This code was primarly ripped out of MINA SSHD.  *  * @author<a href="mailto:dev@mina.apache.org">Apache MINA SSHD Project</a>  */
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|BaseCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
DECL|class|ScpCommand
specifier|final
class|class
name|ScpCommand
extends|extends
name|BaseCommand
block|{
DECL|field|TYPE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_DIR
init|=
literal|"D"
decl_stmt|;
DECL|field|TYPE_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_FILE
init|=
literal|"C"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScpCommand
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|opt_r
specifier|private
name|boolean
name|opt_r
decl_stmt|;
DECL|field|opt_t
specifier|private
name|boolean
name|opt_t
decl_stmt|;
DECL|field|opt_f
specifier|private
name|boolean
name|opt_f
decl_stmt|;
DECL|field|root
specifier|private
name|String
name|root
decl_stmt|;
DECL|field|toc
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
name|toc
decl_stmt|;
DECL|field|error
specifier|private
name|IOException
name|error
decl_stmt|;
annotation|@
name|Override
DECL|method|setCommandLine (final String line)
specifier|public
name|void
name|setCommandLine
parameter_list|(
specifier|final
name|String
name|line
parameter_list|)
block|{
name|super
operator|.
name|setCommandLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|args
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|root
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|args
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
switch|switch
condition|(
name|args
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
condition|)
block|{
case|case
literal|'f'
case|:
name|opt_f
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
break|break;
case|case
literal|'r'
case|:
name|opt_r
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|opt_t
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'v'
case|:
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|root
operator|=
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|opt_f
operator|&&
operator|!
name|opt_t
condition|)
block|{
name|error
operator|=
operator|new
name|IOException
argument_list|(
literal|"Either -f or -t option should be set"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|startThread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runImp
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|runImp ()
specifier|private
name|void
name|runImp
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|readToc
argument_list|()
expr_stmt|;
if|if
condition|(
name|opt_f
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|root
operator|=
name|root
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|root
operator|=
name|root
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|root
operator|=
literal|""
expr_stmt|;
block|}
specifier|final
name|Entry
name|ent
init|=
name|toc
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|ent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|root
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|TYPE_FILE
operator|.
name|equals
argument_list|(
name|ent
operator|.
name|type
argument_list|)
condition|)
block|{
name|readFile
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TYPE_DIR
operator|.
name|equals
argument_list|(
name|ent
operator|.
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|opt_r
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|root
operator|+
literal|" not a regular file"
argument_list|)
throw|;
block|}
name|readDir
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|root
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported mode"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|IOException
operator|.
name|class
operator|&&
literal|"Pipe closed"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// Ignore a pipe closed error, its the user disconnecting from us
comment|// while we are waiting for them to stalk.
comment|//
return|return;
block|}
try|try
block|{
name|out
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Error in scp command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readToc ()
specifier|private
name|void
name|readToc
parameter_list|()
throws|throws
name|IOException
block|{
name|toc
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|read
argument_list|(
literal|"TOC"
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
specifier|final
name|Entry
name|e
init|=
operator|new
name|Entry
argument_list|(
name|TYPE_FILE
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|toc
operator|.
name|put
argument_list|(
name|e
operator|.
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|(
name|toc
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|all
control|)
block|{
name|String
name|path
init|=
name|dirOf
argument_list|(
name|e
operator|.
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|Entry
name|d
init|=
name|toc
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|d
operator|=
operator|new
name|Entry
argument_list|(
name|TYPE_DIR
argument_list|,
literal|0755
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|toc
operator|.
name|put
argument_list|(
name|d
operator|.
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|d
operator|.
name|children
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|path
operator|=
name|dirOf
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|e
operator|=
name|d
expr_stmt|;
block|}
block|}
specifier|final
name|Entry
name|top
init|=
operator|new
name|Entry
argument_list|(
name|TYPE_DIR
argument_list|,
literal|0755
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|toc
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dirOf
argument_list|(
name|e
operator|.
name|path
argument_list|)
operator|==
literal|null
condition|)
block|{
name|top
operator|.
name|children
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|toc
operator|.
name|put
argument_list|(
name|top
operator|.
name|path
argument_list|,
name|top
argument_list|)
expr_stmt|;
block|}
DECL|method|readLine ()
specifier|private
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
block|{
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"End of stream"
argument_list|)
throw|;
block|}
else|else
block|{
name|baos
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|nameOf (String path)
specifier|private
specifier|static
name|String
name|nameOf
parameter_list|(
name|String
name|path
parameter_list|)
block|{
specifier|final
name|int
name|s
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
return|return
name|s
operator|<
literal|0
condition|?
name|path
else|:
name|path
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|dirOf (String path)
specifier|private
specifier|static
name|String
name|dirOf
parameter_list|(
name|String
name|path
parameter_list|)
block|{
specifier|final
name|int
name|s
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
return|return
name|s
operator|<
literal|0
condition|?
literal|null
else|:
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
return|;
block|}
DECL|method|read (String path)
specifier|private
specifier|static
name|byte
index|[]
name|read
parameter_list|(
name|String
name|path
parameter_list|)
block|{
specifier|final
name|InputStream
name|in
init|=
name|ScpCommand
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"com/google/gerrit/sshd/scproot/"
operator|+
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cannot read "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|readFile (final Entry ent)
specifier|private
name|void
name|readFile
parameter_list|(
specifier|final
name|Entry
name|ent
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|read
argument_list|(
name|ent
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|ent
operator|.
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|.
name|length
operator|>
literal|3
operator|&&
name|data
index|[
literal|0
index|]
operator|==
literal|'#'
operator|&&
name|data
index|[
literal|1
index|]
operator|==
literal|'!'
operator|&&
name|data
index|[
literal|2
index|]
operator|==
literal|'/'
condition|)
block|{
comment|// Embed Gerrit's version number into the top of the script.
comment|//
specifier|final
name|String
name|version
init|=
name|Version
operator|.
name|getVersion
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lf
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
name|lf
operator|<
name|data
operator|.
name|length
condition|)
block|{
specifier|final
name|byte
index|[]
name|versionHeader
init|=
operator|(
literal|"# From Gerrit Code Review "
operator|+
name|version
operator|+
literal|"\n"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|buf
decl_stmt|;
name|buf
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|data
operator|.
name|length
operator|+
name|versionHeader
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|lf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|versionHeader
argument_list|)
expr_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|lf
argument_list|,
name|data
operator|.
name|length
operator|-
name|lf
argument_list|)
expr_stmt|;
name|data
operator|=
name|buf
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
block|}
name|header
argument_list|(
name|ent
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|readAck
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ack
argument_list|()
expr_stmt|;
name|readAck
argument_list|()
expr_stmt|;
block|}
DECL|method|readDir (final Entry dir)
specifier|private
name|void
name|readDir
parameter_list|(
specifier|final
name|Entry
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|header
argument_list|(
name|dir
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|readAck
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|e
range|:
name|dir
operator|.
name|children
control|)
block|{
if|if
condition|(
name|TYPE_DIR
operator|.
name|equals
argument_list|(
name|e
operator|.
name|type
argument_list|)
condition|)
block|{
name|readDir
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readFile
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|write
argument_list|(
literal|"E\n"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|readAck
argument_list|()
expr_stmt|;
block|}
DECL|method|header (final Entry dir, final int len)
specifier|private
name|void
name|header
parameter_list|(
specifier|final
name|Entry
name|dir
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedEncodingException
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|dir
operator|.
name|type
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|dir
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// perms
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|len
argument_list|)
expr_stmt|;
comment|// length
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nameOf
argument_list|(
name|dir
operator|.
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|ack ()
specifier|private
name|void
name|ack
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|readAck ()
specifier|private
name|void
name|readAck
parameter_list|()
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|in
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|1
case|:
name|log
operator|.
name|debug
argument_list|(
literal|"Received warning: "
operator|+
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Received nack: "
operator|+
name|readLine
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|class|Entry
specifier|private
specifier|static
class|class
name|Entry
block|{
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|mode
name|String
name|mode
decl_stmt|;
DECL|field|path
name|String
name|path
decl_stmt|;
DECL|field|children
name|List
argument_list|<
name|Entry
argument_list|>
name|children
decl_stmt|;
DECL|method|Entry (String type, String line)
name|Entry
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|line
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|int
name|s
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|mode
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|path
operator|=
name|line
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mode
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|mode
operator|=
literal|"0"
operator|+
name|mode
expr_stmt|;
block|}
block|}
DECL|method|Entry (String type, int mode, String path)
name|Entry
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|mode
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|mode
operator|=
literal|"0"
operator|+
name|Integer
operator|.
name|toOctalString
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

