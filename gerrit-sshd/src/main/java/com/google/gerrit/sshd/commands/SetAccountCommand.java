begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.sshd.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidSshKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountSshKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Realm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshKeyCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
operator|.
name|BaseCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Set a user's account settings. **/
end_comment

begin_class
DECL|class|SetAccountCommand
specifier|final
class|class
name|SetAccountCommand
extends|extends
name|BaseCommand
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"USER"
argument_list|,
name|usage
operator|=
literal|"full name, email-address, ssh username or account id"
argument_list|)
DECL|field|id
specifier|private
name|Account
operator|.
name|Id
name|id
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--full-name"
argument_list|,
name|metaVar
operator|=
literal|"NAME"
argument_list|,
name|usage
operator|=
literal|"display name of the account"
argument_list|)
DECL|field|fullName
specifier|private
name|String
name|fullName
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--active"
argument_list|,
name|usage
operator|=
literal|"set account's state to active"
argument_list|)
DECL|field|active
specifier|private
name|boolean
name|active
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--inactive"
argument_list|,
name|usage
operator|=
literal|"set account's state to inactive"
argument_list|)
DECL|field|inactive
specifier|private
name|boolean
name|inactive
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--add-email"
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"EMAIL"
argument_list|,
name|usage
operator|=
literal|"email addresses to add to the account"
argument_list|)
DECL|field|addEmails
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addEmails
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--delete-email"
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"EMAIL"
argument_list|,
name|usage
operator|=
literal|"email addresses to delete from the account"
argument_list|)
DECL|field|deleteEmails
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|deleteEmails
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--add-ssh-key"
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"-|KEY"
argument_list|,
name|usage
operator|=
literal|"public keys to add to the account"
argument_list|)
DECL|field|addSshKeys
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addSshKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--delete-ssh-key"
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"-|KEY"
argument_list|,
name|usage
operator|=
literal|"public keys to delete from the account"
argument_list|)
DECL|field|deleteSshKeys
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|deleteSshKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--http-password"
argument_list|,
name|metaVar
operator|=
literal|"PASSWORD"
argument_list|,
name|usage
operator|=
literal|"password for HTTP authentication for the account"
argument_list|)
DECL|field|httpPassword
specifier|private
name|String
name|httpPassword
decl_stmt|;
annotation|@
name|Inject
DECL|field|currentUser
specifier|private
name|IdentifiedUser
name|currentUser
decl_stmt|;
annotation|@
name|Inject
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|field|manager
specifier|private
name|AccountManager
name|manager
decl_stmt|;
annotation|@
name|Inject
DECL|field|sshKeyCache
specifier|private
name|SshKeyCache
name|sshKeyCache
decl_stmt|;
annotation|@
name|Inject
DECL|field|byIdCache
specifier|private
name|AccountCache
name|byIdCache
decl_stmt|;
annotation|@
name|Inject
DECL|field|realm
specifier|private
name|Realm
name|realm
decl_stmt|;
annotation|@
name|Override
DECL|method|start (final Environment env)
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|Environment
name|env
parameter_list|)
block|{
name|startThread
argument_list|(
operator|new
name|CommandRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|currentUser
operator|.
name|getCapabilities
argument_list|()
operator|.
name|canAdministrateServer
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"fatal: %s does not have \"Administrator\" capability."
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
name|msg
argument_list|)
throw|;
block|}
name|parseCommandLine
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
name|setAccount
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|validate ()
specifier|private
name|void
name|validate
parameter_list|()
throws|throws
name|UnloggedFailure
block|{
if|if
condition|(
name|active
operator|&&
name|inactive
condition|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"--active and --inactive options are mutually exclusive."
argument_list|)
throw|;
block|}
if|if
condition|(
name|addSshKeys
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
operator|&&
name|deleteSshKeys
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"Only one option may use the stdin"
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleteSshKeys
operator|.
name|contains
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
name|deleteSshKeys
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"ALL"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteEmails
operator|.
name|contains
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
name|deleteEmails
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"ALL"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setAccount ()
specifier|private
name|void
name|setAccount
parameter_list|()
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|UnloggedFailure
block|{
specifier|final
name|Account
name|account
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|boolean
name|accountUpdated
init|=
literal|false
decl_stmt|;
name|boolean
name|sshKeysUpdated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|addEmails
control|)
block|{
name|link
argument_list|(
name|id
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|email
range|:
name|deleteEmails
control|)
block|{
name|deleteMail
argument_list|(
name|id
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fullName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|realm
operator|.
name|allowsEdit
argument_list|(
name|FieldName
operator|.
name|FULL_NAME
argument_list|)
condition|)
block|{
name|account
operator|.
name|setFullName
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"The realm doesn't allow editing names"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|httpPassword
operator|!=
literal|null
condition|)
block|{
name|setHttpPassword
argument_list|(
name|id
argument_list|,
name|httpPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|active
condition|)
block|{
name|accountUpdated
operator|=
literal|true
expr_stmt|;
name|account
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inactive
condition|)
block|{
name|accountUpdated
operator|=
literal|true
expr_stmt|;
name|account
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|addSshKeys
operator|=
name|readSshKey
argument_list|(
name|addSshKeys
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|addSshKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sshKeysUpdated
operator|=
literal|true
expr_stmt|;
name|addSshKeys
argument_list|(
name|addSshKeys
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
name|deleteSshKeys
operator|=
name|readSshKey
argument_list|(
name|deleteSshKeys
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deleteSshKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sshKeysUpdated
operator|=
literal|true
expr_stmt|;
name|deleteSshKeys
argument_list|(
name|deleteSshKeys
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accountUpdated
condition|)
block|{
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
name|byIdCache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sshKeysUpdated
condition|)
block|{
name|sshKeyCache
operator|.
name|evict
argument_list|(
name|account
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addSshKeys (final List<String> keys, final Account account)
specifier|private
name|void
name|addSshKeys
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|OrmException
throws|,
name|UnloggedFailure
block|{
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|accountKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountSshKey
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|seq
init|=
name|db
operator|.
name|accountSshKeys
argument_list|()
operator|.
name|byAccount
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
try|try
block|{
name|seq
operator|++
expr_stmt|;
name|AccountSshKey
name|accountSshKey
init|=
name|sshKeyCache
operator|.
name|create
argument_list|(
operator|new
name|AccountSshKey
operator|.
name|Id
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|seq
argument_list|)
argument_list|,
name|key
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|accountKeys
operator|.
name|add
argument_list|(
name|accountSshKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSshKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnloggedFailure
argument_list|(
literal|1
argument_list|,
literal|"fatal: invalid ssh key"
argument_list|)
throw|;
block|}
block|}
name|db
operator|.
name|accountSshKeys
argument_list|()
operator|.
name|insert
argument_list|(
name|accountKeys
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteSshKeys (final List<String> keys, final Account account)
specifier|private
name|void
name|deleteSshKeys
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|OrmException
block|{
name|ResultSet
argument_list|<
name|AccountSshKey
argument_list|>
name|allKeys
init|=
name|db
operator|.
name|accountSshKeys
argument_list|()
operator|.
name|byAccount
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|contains
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
name|db
operator|.
name|accountSshKeys
argument_list|()
operator|.
name|delete
argument_list|(
name|allKeys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|accountKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountSshKey
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
for|for
control|(
name|AccountSshKey
name|accountSshKey
range|:
name|allKeys
control|)
block|{
if|if
condition|(
name|key
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|accountSshKey
operator|.
name|getSshPublicKey
argument_list|()
argument_list|)
operator|||
name|accountSshKey
operator|.
name|getComment
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|accountKeys
operator|.
name|add
argument_list|(
name|accountSshKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|db
operator|.
name|accountSshKeys
argument_list|()
operator|.
name|delete
argument_list|(
name|accountKeys
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteMail (Account.Id id, final String mailAddress)
specifier|private
name|void
name|deleteMail
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
specifier|final
name|String
name|mailAddress
parameter_list|)
throws|throws
name|UnloggedFailure
throws|,
name|OrmException
block|{
if|if
condition|(
name|mailAddress
operator|.
name|equals
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
name|ResultSet
argument_list|<
name|AccountExternalId
argument_list|>
name|ids
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byAccount
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|AccountExternalId
name|extId
range|:
name|ids
control|)
block|{
if|if
condition|(
name|extId
operator|.
name|isScheme
argument_list|(
name|AccountExternalId
operator|.
name|SCHEME_MAILTO
argument_list|)
condition|)
block|{
name|unlink
argument_list|(
name|id
argument_list|,
name|extId
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|AccountExternalId
operator|.
name|Key
name|key
init|=
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|AccountExternalId
operator|.
name|SCHEME_MAILTO
argument_list|,
name|mailAddress
argument_list|)
decl_stmt|;
name|AccountExternalId
name|extId
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
condition|)
block|{
name|unlink
argument_list|(
name|id
argument_list|,
name|mailAddress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setHttpPassword (Account.Id id, final String httpPassword)
specifier|private
name|void
name|setHttpPassword
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
specifier|final
name|String
name|httpPassword
parameter_list|)
throws|throws
name|UnloggedFailure
throws|,
name|OrmException
block|{
name|ResultSet
argument_list|<
name|AccountExternalId
argument_list|>
name|ids
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byAccount
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|AccountExternalId
name|extId
range|:
name|ids
control|)
block|{
if|if
condition|(
name|extId
operator|.
name|isScheme
argument_list|(
name|AccountExternalId
operator|.
name|SCHEME_USERNAME
argument_list|)
condition|)
block|{
name|extId
operator|.
name|setPassword
argument_list|(
name|httpPassword
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
name|byIdCache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|unlink (Account.Id id, final String mailAddress)
specifier|private
name|void
name|unlink
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
specifier|final
name|String
name|mailAddress
parameter_list|)
throws|throws
name|UnloggedFailure
block|{
try|try
block|{
name|manager
operator|.
name|unlink
argument_list|(
name|id
argument_list|,
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|mailAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|ex
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|link (Account.Id id, final String mailAddress)
specifier|private
name|void
name|link
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
specifier|final
name|String
name|mailAddress
parameter_list|)
throws|throws
name|UnloggedFailure
block|{
try|try
block|{
name|manager
operator|.
name|link
argument_list|(
name|id
argument_list|,
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|mailAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|ex
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|readSshKey (final List<String> sshKeys)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readSshKey
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|sshKeys
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|sshKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|sshKey
init|=
literal|""
decl_stmt|;
name|int
name|idx
init|=
name|sshKeys
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|sshKey
operator|=
literal|""
expr_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sshKey
operator|+=
name|line
operator|+
literal|"\n"
expr_stmt|;
block|}
name|sshKeys
operator|.
name|set
argument_list|(
name|idx
argument_list|,
name|sshKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sshKeys
return|;
block|}
block|}
end_class

end_unit

