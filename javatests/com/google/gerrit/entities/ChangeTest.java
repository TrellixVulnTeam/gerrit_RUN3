begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.entities
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ChangeTest
specifier|public
class|class
name|ChangeTest
block|{
annotation|@
name|Test
DECL|method|parseInvalidRefNames ()
specifier|public
name|void
name|parseInvalidRefNames
parameter_list|()
block|{
name|assertNotRef
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"01/1/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/tags/v1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parsePatchSetRefNames ()
specifier|public
name|void
name|parsePatchSetRefNames
parameter_list|()
block|{
name|assertRef
argument_list|(
literal|1
argument_list|,
literal|"refs/changes/01/1/1"
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
literal|1234
argument_list|,
literal|"refs/changes/34/1234/56"
argument_list|)
expr_stmt|;
comment|// Invalid characters.
name|assertNotRef
argument_list|(
literal|"refs/changes/0x/1/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/x/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/x"
argument_list|)
expr_stmt|;
comment|// Truncations.
name|assertNotRef
argument_list|(
literal|"refs/changes/"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/1/"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01//1/1"
argument_list|)
expr_stmt|;
comment|// Leading zeroes.
name|assertNotRef
argument_list|(
literal|"refs/changes/01/01/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/01"
argument_list|)
expr_stmt|;
comment|// Mismatched last 2 digits.
name|assertNotRef
argument_list|(
literal|"refs/changes/35/1234/56"
argument_list|)
expr_stmt|;
comment|// Something other than patch set after change.
name|assertNotRef
argument_list|(
literal|"refs/changes/34/1234/0"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/34/1234/foo"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/34/1234|56"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/34/1234foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseEditRefNames ()
specifier|public
name|void
name|parseEditRefNames
parameter_list|()
block|{
name|assertRef
argument_list|(
literal|5
argument_list|,
literal|"refs/users/34/1234/edit-5/1"
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
literal|5
argument_list|,
literal|"refs/users/34/1234/edit-5"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/34/1234/edit-5/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/users/34/1234/EDIT-5/1"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/users/34/1234"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseChangeMetaRefNames ()
specifier|public
name|void
name|parseChangeMetaRefNames
parameter_list|()
block|{
name|assertRef
argument_list|(
literal|1
argument_list|,
literal|"refs/changes/01/1/meta"
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
literal|1234
argument_list|,
literal|"refs/changes/34/1234/meta"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/met"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/META"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/1/meta"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRobotCommentRefNames ()
specifier|public
name|void
name|parseRobotCommentRefNames
parameter_list|()
block|{
name|assertRef
argument_list|(
literal|1
argument_list|,
literal|"refs/changes/01/1/robot-comments"
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
literal|1234
argument_list|,
literal|"refs/changes/34/1234/robot-comments"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/robot-comment"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/ROBOT-COMMENTS"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/changes/01/1/1/robot-comments"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseStarredChangesRefNames ()
specifier|public
name|void
name|parseStarredChangesRefNames
parameter_list|()
block|{
name|assertAllUsersRef
argument_list|(
literal|1
argument_list|,
literal|"refs/starred-changes/01/1/1001"
argument_list|)
expr_stmt|;
name|assertAllUsersRef
argument_list|(
literal|1234
argument_list|,
literal|"refs/starred-changes/34/1234/1001"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/starred-changes/01/1/1001"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/starred-changes/01/1/1xx1"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/starred-changes/01/1/"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/starred-changes/01/1"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/starred-changes/35/1234/1001"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/starred-changeS/01/1/1001"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseDraftRefNames ()
specifier|public
name|void
name|parseDraftRefNames
parameter_list|()
block|{
name|assertAllUsersRef
argument_list|(
literal|1
argument_list|,
literal|"refs/draft-comments/01/1/1001"
argument_list|)
expr_stmt|;
name|assertAllUsersRef
argument_list|(
literal|1234
argument_list|,
literal|"refs/draft-comments/34/1234/1001"
argument_list|)
expr_stmt|;
name|assertNotRef
argument_list|(
literal|"refs/draft-comments/01/1/1001"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/draft-comments/01/1/1xx1"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/draft-comments/01/1/"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/draft-comments/01/1"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/draft-comments/35/1234/1001"
argument_list|)
expr_stmt|;
name|assertNotAllUsersRef
argument_list|(
literal|"refs/draft-commentS/01/1/1001"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toRefPrefix ()
specifier|public
name|void
name|toRefPrefix
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Change
operator|.
name|id
argument_list|(
literal|1
argument_list|)
operator|.
name|toRefPrefix
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"refs/changes/01/1/"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Change
operator|.
name|id
argument_list|(
literal|1234
argument_list|)
operator|.
name|toRefPrefix
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"refs/changes/34/1234/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRefNameParts ()
specifier|public
name|void
name|parseRefNameParts
parameter_list|()
block|{
name|assertRefPart
argument_list|(
literal|1
argument_list|,
literal|"01/1"
argument_list|)
expr_stmt|;
name|assertNotRefPart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotRefPart
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// This method assumes that the common prefix "refs/changes/" was removed.
name|assertNotRefPart
argument_list|(
literal|"refs/changes/01/1"
argument_list|)
expr_stmt|;
comment|// Invalid characters.
name|assertNotRefPart
argument_list|(
literal|"01a/1"
argument_list|)
expr_stmt|;
name|assertNotRefPart
argument_list|(
literal|"01/a1"
argument_list|)
expr_stmt|;
comment|// Mismatched shard.
name|assertNotRefPart
argument_list|(
literal|"01/23"
argument_list|)
expr_stmt|;
comment|// Shard too short.
name|assertNotRefPart
argument_list|(
literal|"1/1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idToString ()
specifier|public
name|void
name|idToString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Change
operator|.
name|id
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|keyToString ()
specifier|public
name|void
name|keyToString
parameter_list|()
block|{
name|String
name|key
init|=
literal|"Ideadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|assertThat
argument_list|(
name|ObjectId
operator|.
name|isId
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Change
operator|.
name|key
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRef (int changeId, String refName)
specifier|private
specifier|static
name|void
name|assertRef
parameter_list|(
name|int
name|changeId
parameter_list|,
name|String
name|refName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotRef (String refName)
specifier|private
specifier|static
name|void
name|assertNotRef
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAllUsersRef (int changeId, String refName)
specifier|private
specifier|static
name|void
name|assertAllUsersRef
parameter_list|(
name|int
name|changeId
parameter_list|,
name|String
name|refName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|fromAllUsersRef
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotAllUsersRef (String refName)
specifier|private
specifier|static
name|void
name|assertNotAllUsersRef
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|fromAllUsersRef
argument_list|(
name|refName
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertRefPart (int changeId, String refName)
specifier|private
specifier|static
name|void
name|assertRefPart
parameter_list|(
name|int
name|changeId
parameter_list|,
name|String
name|refName
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|Change
operator|.
name|Id
operator|.
name|fromRefPart
argument_list|(
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotRefPart (String refName)
specifier|private
specifier|static
name|void
name|assertNotRefPart
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
name|assertNull
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|fromRefPart
argument_list|(
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

