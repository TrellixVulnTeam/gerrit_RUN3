begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.events
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|data
operator|.
name|AccountAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|data
operator|.
name|ChangeAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|data
operator|.
name|RefUpdateAttribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|EventDeserializerTest
specifier|public
class|class
name|EventDeserializerTest
extends|extends
name|GerritBaseTests
block|{
DECL|field|gson
specifier|private
specifier|final
name|Gson
name|gson
init|=
operator|new
name|EventGsonProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|refUpdatedEvent ()
specifier|public
name|void
name|refUpdatedEvent
parameter_list|()
block|{
name|RefUpdatedEvent
name|orig
init|=
operator|new
name|RefUpdatedEvent
argument_list|()
decl_stmt|;
name|RefUpdateAttribute
name|refUpdatedAttribute
init|=
operator|new
name|RefUpdateAttribute
argument_list|()
decl_stmt|;
name|refUpdatedAttribute
operator|.
name|refName
operator|=
literal|"refs/heads/master"
expr_stmt|;
name|orig
operator|.
name|refUpdate
operator|=
name|createSupplier
argument_list|(
name|refUpdatedAttribute
argument_list|)
expr_stmt|;
name|AccountAttribute
name|accountAttribute
init|=
operator|new
name|AccountAttribute
argument_list|()
decl_stmt|;
name|accountAttribute
operator|.
name|email
operator|=
literal|"some.user@domain.com"
expr_stmt|;
name|orig
operator|.
name|submitter
operator|=
name|createSupplier
argument_list|(
name|accountAttribute
argument_list|)
expr_stmt|;
name|RefUpdatedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|refUpdate
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|Supplier
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|refUpdate
operator|.
name|get
argument_list|()
operator|.
name|refName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refUpdatedAttribute
operator|.
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|submitter
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|Supplier
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|submitter
operator|.
name|get
argument_list|()
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accountAttribute
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchSetCreatedEvent ()
specifier|public
name|void
name|patchSetCreatedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|PatchSetCreatedEvent
name|orig
init|=
operator|new
name|PatchSetCreatedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|orig
operator|.
name|uploader
operator|=
name|newAccount
argument_list|(
literal|"uploader"
argument_list|)
expr_stmt|;
name|PatchSetCreatedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|assertSameAccount
argument_list|(
name|e
operator|.
name|uploader
argument_list|,
name|orig
operator|.
name|uploader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assigneeChangedEvent ()
specifier|public
name|void
name|assigneeChangedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|AssigneeChangedEvent
name|orig
init|=
operator|new
name|AssigneeChangedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|orig
operator|.
name|changer
operator|=
name|newAccount
argument_list|(
literal|"changer"
argument_list|)
expr_stmt|;
name|orig
operator|.
name|oldAssignee
operator|=
name|newAccount
argument_list|(
literal|"oldAssignee"
argument_list|)
expr_stmt|;
name|AssigneeChangedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|assertSameAccount
argument_list|(
name|e
operator|.
name|changer
argument_list|,
name|orig
operator|.
name|changer
argument_list|)
expr_stmt|;
name|assertSameAccount
argument_list|(
name|e
operator|.
name|oldAssignee
argument_list|,
name|orig
operator|.
name|oldAssignee
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeDeletedEvent ()
specifier|public
name|void
name|changeDeletedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeDeletedEvent
name|orig
init|=
operator|new
name|ChangeDeletedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|orig
operator|.
name|deleter
operator|=
name|newAccount
argument_list|(
literal|"deleter"
argument_list|)
expr_stmt|;
name|ChangeDeletedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|assertSameAccount
argument_list|(
name|e
operator|.
name|deleter
argument_list|,
name|orig
operator|.
name|deleter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hashtagsChangedEvent ()
specifier|public
name|void
name|hashtagsChangedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|HashtagsChangedEvent
name|orig
init|=
operator|new
name|HashtagsChangedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|orig
operator|.
name|editor
operator|=
name|newAccount
argument_list|(
literal|"editor"
argument_list|)
expr_stmt|;
name|orig
operator|.
name|added
operator|=
operator|new
name|String
index|[]
block|{
literal|"added"
block|}
expr_stmt|;
name|orig
operator|.
name|removed
operator|=
operator|new
name|String
index|[]
block|{
literal|"removed"
block|}
expr_stmt|;
name|orig
operator|.
name|hashtags
operator|=
operator|new
name|String
index|[]
block|{
literal|"hashtags"
block|}
expr_stmt|;
name|HashtagsChangedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|assertSameAccount
argument_list|(
name|e
operator|.
name|editor
argument_list|,
name|orig
operator|.
name|editor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|added
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|orig
operator|.
name|added
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|removed
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|orig
operator|.
name|removed
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|hashtags
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|orig
operator|.
name|hashtags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeAbandonedEvent ()
specifier|public
name|void
name|changeAbandonedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeAbandonedEvent
name|orig
init|=
operator|new
name|ChangeAbandonedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|orig
operator|.
name|abandoner
operator|=
name|newAccount
argument_list|(
literal|"abandoner"
argument_list|)
expr_stmt|;
name|orig
operator|.
name|reason
operator|=
literal|"some reason"
expr_stmt|;
name|ChangeAbandonedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|assertSameAccount
argument_list|(
name|e
operator|.
name|abandoner
argument_list|,
name|orig
operator|.
name|abandoner
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|reason
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|orig
operator|.
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeMergedEvent ()
specifier|public
name|void
name|changeMergedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeMergedEvent
name|orig
init|=
operator|new
name|ChangeMergedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|ChangeMergedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeRestoredEvent ()
specifier|public
name|void
name|changeRestoredEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ChangeRestoredEvent
name|orig
init|=
operator|new
name|ChangeRestoredEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|ChangeRestoredEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentAddedEvent ()
specifier|public
name|void
name|commentAddedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|CommentAddedEvent
name|orig
init|=
operator|new
name|CommentAddedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|CommentAddedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|privateStateChangedEvent ()
specifier|public
name|void
name|privateStateChangedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|PrivateStateChangedEvent
name|orig
init|=
operator|new
name|PrivateStateChangedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|PrivateStateChangedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewerAddedEvent ()
specifier|public
name|void
name|reviewerAddedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ReviewerAddedEvent
name|orig
init|=
operator|new
name|ReviewerAddedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|ReviewerAddedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewerDeletedEvent ()
specifier|public
name|void
name|reviewerDeletedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|ReviewerDeletedEvent
name|orig
init|=
operator|new
name|ReviewerDeletedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|ReviewerDeletedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|voteDeletedEvent ()
specifier|public
name|void
name|voteDeletedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|VoteDeletedEvent
name|orig
init|=
operator|new
name|VoteDeletedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|VoteDeletedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|workinProgressStateChangedEvent ()
specifier|public
name|void
name|workinProgressStateChangedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|WorkInProgressStateChangedEvent
name|orig
init|=
operator|new
name|WorkInProgressStateChangedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|WorkInProgressStateChangedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|topicChangedEvent ()
specifier|public
name|void
name|topicChangedEvent
parameter_list|()
block|{
name|Change
name|change
init|=
name|newChange
argument_list|()
decl_stmt|;
name|TopicChangedEvent
name|orig
init|=
operator|new
name|TopicChangedEvent
argument_list|(
name|change
argument_list|)
decl_stmt|;
name|orig
operator|.
name|change
operator|=
name|asChangeAttribute
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|TopicChangedEvent
name|e
init|=
name|roundTrip
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertSameChangeEvent
argument_list|(
name|e
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|}
DECL|method|createSupplier (T value)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|createSupplier
parameter_list|(
name|T
name|value
parameter_list|)
block|{
return|return
name|Suppliers
operator|.
name|memoize
argument_list|(
parameter_list|()
lambda|->
name|value
argument_list|)
return|;
block|}
DECL|method|newChange ()
specifier|private
name|Change
name|newChange
parameter_list|()
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
name|Change
operator|.
name|key
argument_list|(
literal|"Ideadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|,
name|Change
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|BranchNameKey
operator|.
name|create
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"myproject"
argument_list|)
argument_list|,
literal|"mybranch"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|change
return|;
block|}
DECL|method|newAccount (String name)
specifier|private
name|Supplier
argument_list|<
name|AccountAttribute
argument_list|>
name|newAccount
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|AccountAttribute
name|account
init|=
operator|new
name|AccountAttribute
argument_list|()
decl_stmt|;
name|account
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|account
operator|.
name|email
operator|=
name|name
operator|+
literal|"@somewhere.com"
expr_stmt|;
name|account
operator|.
name|username
operator|=
name|name
expr_stmt|;
return|return
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|account
argument_list|)
return|;
block|}
DECL|method|assertSameChangeEvent (ChangeEvent current, ChangeEvent expected)
specifier|private
name|void
name|assertSameChangeEvent
parameter_list|(
name|ChangeEvent
name|current
parameter_list|,
name|ChangeEvent
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|current
operator|.
name|changeKey
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|changeKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|refName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertSameChange
argument_list|(
name|current
operator|.
name|change
argument_list|,
name|expected
operator|.
name|change
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSameChange ( Supplier<ChangeAttribute> currentSupplier, Supplier<ChangeAttribute> expectedSupplier)
specifier|private
name|void
name|assertSameChange
parameter_list|(
name|Supplier
argument_list|<
name|ChangeAttribute
argument_list|>
name|currentSupplier
parameter_list|,
name|Supplier
argument_list|<
name|ChangeAttribute
argument_list|>
name|expectedSupplier
parameter_list|)
block|{
name|ChangeAttribute
name|current
init|=
name|currentSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeAttribute
name|expected
init|=
name|expectedSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|branch
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|topic
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|number
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|commitMessage
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|commitMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|url
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|url
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|status
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|createdOn
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|createdOn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|wip
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|wip
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|isPrivate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|isPrivate
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSameAccount ( Supplier<AccountAttribute> currentSupplier, Supplier<AccountAttribute> expectedSupplier)
specifier|private
name|void
name|assertSameAccount
parameter_list|(
name|Supplier
argument_list|<
name|AccountAttribute
argument_list|>
name|currentSupplier
parameter_list|,
name|Supplier
argument_list|<
name|AccountAttribute
argument_list|>
name|expectedSupplier
parameter_list|)
block|{
name|AccountAttribute
name|current
init|=
name|currentSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountAttribute
name|expected
init|=
name|expectedSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|username
argument_list|)
expr_stmt|;
block|}
DECL|method|asChangeAttribute (Change change)
specifier|public
name|Supplier
argument_list|<
name|ChangeAttribute
argument_list|>
name|asChangeAttribute
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|ChangeAttribute
name|a
init|=
operator|new
name|ChangeAttribute
argument_list|()
decl_stmt|;
name|a
operator|.
name|project
operator|=
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|a
operator|.
name|branch
operator|=
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|shortName
argument_list|()
expr_stmt|;
name|a
operator|.
name|topic
operator|=
name|change
operator|.
name|getTopic
argument_list|()
expr_stmt|;
name|a
operator|.
name|id
operator|=
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|a
operator|.
name|number
operator|=
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|a
operator|.
name|subject
operator|=
name|change
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|a
operator|.
name|commitMessage
operator|=
literal|"This is a test commit message"
expr_stmt|;
name|a
operator|.
name|url
operator|=
literal|"http://somewhere.com"
expr_stmt|;
name|a
operator|.
name|status
operator|=
name|change
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|a
operator|.
name|createdOn
operator|=
name|change
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000L
expr_stmt|;
name|a
operator|.
name|wip
operator|=
name|change
operator|.
name|isWorkInProgress
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|a
operator|.
name|isPrivate
operator|=
name|change
operator|.
name|isPrivate
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
return|return
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|roundTrip (E event)
specifier|private
parameter_list|<
name|E
extends|extends
name|Event
parameter_list|>
name|E
name|roundTrip
parameter_list|(
name|E
name|event
parameter_list|)
block|{
name|String
name|json
init|=
name|gson
operator|.
name|toJson
argument_list|(
name|event
argument_list|)
decl_stmt|;
return|return
operator|(
name|E
operator|)
name|gson
operator|.
name|fromJson
argument_list|(
name|json
argument_list|,
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

