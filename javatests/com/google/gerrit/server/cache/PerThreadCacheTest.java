begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PerThreadCacheTest
specifier|public
class|class
name|PerThreadCacheTest
extends|extends
name|GerritBaseTests
block|{
annotation|@
name|Test
DECL|method|key_respectsClass ()
specifier|public
name|void
name|key_respectsClass
parameter_list|()
block|{
name|assertThat
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|key_respectsIdentifiers ()
specifier|public
name|void
name|key_respectsIdentifiers
parameter_list|()
block|{
name|assertThat
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"id1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"id1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"id1"
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"id2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|endToEndCache ()
specifier|public
name|void
name|endToEndCache
parameter_list|()
block|{
try|try
init|(
name|PerThreadCache
name|ignored
init|=
name|PerThreadCache
operator|.
name|create
argument_list|()
init|)
block|{
name|PerThreadCache
name|cache
init|=
name|PerThreadCache
operator|.
name|get
argument_list|()
decl_stmt|;
name|PerThreadCache
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|key1
init|=
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|value1
init|=
name|cache
operator|.
name|get
argument_list|(
name|key1
argument_list|,
parameter_list|()
lambda|->
literal|"value1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|Supplier
argument_list|<
name|String
argument_list|>
name|neverCalled
init|=
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this method must not be called"
argument_list|)
throw|;
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|key1
argument_list|,
name|neverCalled
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|PerThreadCache
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|key
init|=
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|PerThreadCache
name|ignored
init|=
name|PerThreadCache
operator|.
name|create
argument_list|()
init|)
block|{
name|PerThreadCache
name|cache
init|=
name|PerThreadCache
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|value1
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
literal|"value1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
block|}
comment|// Create a second cache and assert that it is not connected to the first one.
comment|// This ensures that the cleanup is actually working.
try|try
init|(
name|PerThreadCache
name|ignored
init|=
name|PerThreadCache
operator|.
name|create
argument_list|()
init|)
block|{
name|PerThreadCache
name|cache
init|=
name|PerThreadCache
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|value1
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
literal|"value2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|doubleInstantiationFails ()
specifier|public
name|void
name|doubleInstantiationFails
parameter_list|()
block|{
try|try
init|(
name|PerThreadCache
name|ignored
init|=
name|PerThreadCache
operator|.
name|create
argument_list|()
init|)
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"called create() twice on the same request"
argument_list|)
expr_stmt|;
name|PerThreadCache
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|enforceMaxSize ()
specifier|public
name|void
name|enforceMaxSize
parameter_list|()
block|{
try|try
init|(
name|PerThreadCache
name|cache
init|=
name|PerThreadCache
operator|.
name|create
argument_list|()
init|)
block|{
comment|// Fill the cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|PerThreadCache
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|key
init|=
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
literal|"cached value"
argument_list|)
expr_stmt|;
block|}
comment|// Assert that the value was not persisted
name|PerThreadCache
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|key
init|=
name|PerThreadCache
operator|.
name|Key
operator|.
name|create
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
literal|"new value"
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
parameter_list|()
lambda|->
literal|"directly served"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"directly served"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

