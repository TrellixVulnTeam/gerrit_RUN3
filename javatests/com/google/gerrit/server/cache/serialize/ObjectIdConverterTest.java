begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache.serialize
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|serialize
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|testing
operator|.
name|CacheSerializerTestUtil
operator|.
name|byteString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ObjectIdConverterTest
specifier|public
class|class
name|ObjectIdConverterTest
block|{
annotation|@
name|Test
DECL|method|objectIdFromByteString ()
specifier|public
name|void
name|objectIdFromByteString
parameter_list|()
block|{
name|ObjectIdConverter
name|idConverter
init|=
name|ObjectIdConverter
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|idConverter
operator|.
name|fromByteString
argument_list|(
name|byteString
argument_list|(
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|idConverter
operator|.
name|fromByteString
argument_list|(
name|byteString
argument_list|(
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|objectIdFromByteStringWrongSize ()
specifier|public
name|void
name|objectIdFromByteStringWrongSize
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ObjectIdConverter
operator|.
name|create
argument_list|()
operator|.
name|fromByteString
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|objectIdToByteString ()
specifier|public
name|void
name|objectIdToByteString
parameter_list|()
block|{
name|ObjectIdConverter
name|idConverter
init|=
name|ObjectIdConverter
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|idConverter
operator|.
name|toByteString
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|byteString
argument_list|(
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|,
literal|0xaa
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|idConverter
operator|.
name|toByteString
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|byteString
argument_list|(
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|,
literal|0xbb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

