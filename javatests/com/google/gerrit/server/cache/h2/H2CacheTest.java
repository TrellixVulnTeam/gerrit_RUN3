begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache.h2
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
operator|.
name|H2CacheImpl
operator|.
name|SqlStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
operator|.
name|H2CacheImpl
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|H2CacheTest
specifier|public
class|class
name|H2CacheTest
block|{
DECL|field|dbCnt
specifier|private
specifier|static
name|int
name|dbCnt
decl_stmt|;
DECL|field|mem
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|ValueHolder
argument_list|<
name|String
argument_list|>
argument_list|>
name|mem
decl_stmt|;
DECL|field|impl
specifier|private
name|H2CacheImpl
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|impl
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|mem
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|TypeLiteral
argument_list|<
name|String
argument_list|>
name|keyType
init|=
operator|new
name|TypeLiteral
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|SqlStore
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|store
init|=
operator|new
name|SqlStore
argument_list|<>
argument_list|(
literal|"jdbc:h2:mem:Test_"
operator|+
operator|(
operator|++
name|dbCnt
operator|)
argument_list|,
name|keyType
argument_list|,
name|StringSerializer
operator|.
name|INSTANCE
argument_list|,
name|StringSerializer
operator|.
name|INSTANCE
argument_list|,
literal|1
operator|<<
literal|20
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|impl
operator|=
operator|new
name|H2CacheImpl
argument_list|<>
argument_list|(
name|MoreExecutors
operator|.
name|directExecutor
argument_list|()
argument_list|,
name|store
argument_list|,
name|keyType
argument_list|,
name|mem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|get ()
specifier|public
name|void
name|get
parameter_list|()
throws|throws
name|ExecutionException
block|{
name|assertThat
argument_list|(
name|impl
operator|.
name|getIfPresent
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|impl
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
parameter_list|()
lambda|->
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|"bar"
return|;
block|}
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Callable was called"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|impl
operator|.
name|getIfPresent
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"in-memory value"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|mem
operator|.
name|invalidate
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|impl
operator|.
name|getIfPresent
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"persistent value"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|impl
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
parameter_list|()
lambda|->
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|"baz"
return|;
block|}
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"cached value"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Callable was called"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stringSerializer ()
specifier|public
name|void
name|stringSerializer
parameter_list|()
block|{
name|String
name|input
init|=
literal|"foo"
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|StringSerializer
operator|.
name|INSTANCE
operator|.
name|serialize
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|serialized
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'f'
block|,
literal|'o'
block|,
literal|'o'
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|StringSerializer
operator|.
name|INSTANCE
operator|.
name|deserialize
argument_list|(
name|serialized
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|// TODO(dborowitz): Won't be necessary when we use a real StringSerializer in the server code.
DECL|enum|StringSerializer
specifier|private
enum|enum
name|StringSerializer
implements|implements
name|CacheSerializer
argument_list|<
name|String
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|serialize (String object)
specifier|public
name|byte
index|[]
name|serialize
parameter_list|(
name|String
name|object
parameter_list|)
block|{
return|return
name|object
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deserialize (byte[] in)
specifier|public
name|String
name|deserialize
parameter_list|(
name|byte
index|[]
name|in
parameter_list|)
block|{
comment|// TODO(dborowitz): Consider using CharsetDecoder directly in the real implementation, to get
comment|// checked exceptions.
return|return
operator|new
name|String
argument_list|(
name|in
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

