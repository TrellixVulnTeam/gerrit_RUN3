begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|testing
operator|.
name|CommitInfoSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbTable
operator|.
name|GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
operator|.
name|DISABLE_REVIEW_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
operator|.
name|SECTION_NOTE_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|OptionalSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
operator|.
name|Basic
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|AccountInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|GroupMemberAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|UserMemberAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerIdProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CommitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupNameNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsConsistencyChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|testing
operator|.
name|InternalGroupSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryTestEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
operator|.
name|TempClockStep
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestUpdateUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|OptionalSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Month
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|Schema_166_to_167_WithGroupsInReviewDbTest
specifier|public
class|class
name|Schema_166_to_167_WithGroupsInReviewDbTest
block|{
DECL|method|createConfig ()
specifier|private
specifier|static
name|Config
name|createConfig
parameter_list|()
block|{
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setString
argument_list|(
name|GerritServerIdProvider
operator|.
name|SECTION
argument_list|,
literal|null
argument_list|,
name|GerritServerIdProvider
operator|.
name|KEY
argument_list|,
literal|"1234567"
argument_list|)
expr_stmt|;
comment|// Enable groups in ReviewDb. This means the primary storage for groups is ReviewDb.
name|config
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|GROUPS
operator|.
name|key
argument_list|()
argument_list|,
name|DISABLE_REVIEW_DB
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
annotation|@
name|Rule
DECL|field|testEnv
specifier|public
name|InMemoryTestEnvironment
name|testEnv
init|=
operator|new
name|InMemoryTestEnvironment
argument_list|(
name|Schema_166_to_167_WithGroupsInReviewDbTest
operator|::
name|createConfig
argument_list|)
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|private
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|schema167
annotation|@
name|Inject
specifier|private
name|Schema_167
name|schema167
decl_stmt|;
DECL|field|db
annotation|@
name|Inject
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|gitRepoManager
annotation|@
name|Inject
specifier|private
name|GitRepositoryManager
name|gitRepoManager
decl_stmt|;
DECL|field|allUsersName
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|consistencyChecker
annotation|@
name|Inject
specifier|private
name|GroupsConsistencyChecker
name|consistencyChecker
decl_stmt|;
DECL|field|currentUser
annotation|@
name|Inject
specifier|private
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|serverId
annotation|@
name|Inject
specifier|private
annotation|@
name|GerritServerId
name|String
name|serverId
decl_stmt|;
DECL|field|serverIdent
annotation|@
name|Inject
specifier|private
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|groupBundleFactory
annotation|@
name|Inject
specifier|private
name|GroupBundle
operator|.
name|Factory
name|groupBundleFactory
decl_stmt|;
DECL|field|groupBackend
annotation|@
name|Inject
specifier|private
name|GroupBackend
name|groupBackend
decl_stmt|;
DECL|field|backends
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|GroupBackend
argument_list|>
name|backends
decl_stmt|;
DECL|field|jdbcSchema
specifier|private
name|JdbcSchema
name|jdbcSchema
decl_stmt|;
annotation|@
name|Before
DECL|method|unwrapDb ()
specifier|public
name|void
name|unwrapDb
parameter_list|()
block|{
name|jdbcSchema
operator|=
name|ReviewDbWrapper
operator|.
name|unwrapJbdcSchema
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewDbOnlyGroupsAreMigratedToNoteDb ()
specifier|public
name|void
name|reviewDbOnlyGroupsAreMigratedToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create groups only in ReviewDb
name|AccountGroup
name|group1
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|"verifiers"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccountGroup
name|group2
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|"contributors"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|groups
init|=
name|getAllGroupsFromNoteDb
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"verifiers"
argument_list|,
literal|"contributors"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|alreadyExistingGroupsAreMigratedToNoteDb ()
specifier|public
name|void
name|alreadyExistingGroupsAreMigratedToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create group in NoteDb and ReviewDb
name|GroupInput
name|groupInput
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|groupInput
operator|.
name|name
operator|=
literal|"verifiers"
expr_stmt|;
name|groupInput
operator|.
name|description
operator|=
literal|"old"
expr_stmt|;
name|GroupInfo
name|group1
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|groupInput
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Update group only in ReviewDb
name|AccountGroup
name|group1InReviewDb
init|=
name|getFromReviewDb
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|group1
operator|.
name|groupId
argument_list|)
argument_list|)
decl_stmt|;
name|group1InReviewDb
operator|.
name|setDescription
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|updateInReviewDb
argument_list|(
name|group1InReviewDb
argument_list|)
expr_stmt|;
comment|// Create a second group in NoteDb and ReviewDb
name|GroupInfo
name|group2
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"contributors"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
comment|// Verify that both groups are present in NoteDb
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|groups
init|=
name|getAllGroupsFromNoteDb
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"verifiers"
argument_list|,
literal|"contributors"
argument_list|)
expr_stmt|;
comment|// Verify that group1 has the description from ReviewDb
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group1InNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group1
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group1InNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adminGroupIsMigratedToNoteDb ()
specifier|public
name|void
name|adminGroupIsMigratedToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Administrators group is automatically created for all Gerrit servers.
name|GroupInfo
name|adminGroup
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|groups
init|=
name|getAllGroupsFromNoteDb
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonInteractiveUsersGroupIsMigratedToNoteDb ()
specifier|public
name|void
name|nonInteractiveUsersGroupIsMigratedToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 'Non-Interactive Users' group is automatically created for all Gerrit servers.
name|GroupInfo
name|nonInteractiveUsersGroup
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Non-Interactive Users"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|nonInteractiveUsersGroup
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|groups
init|=
name|getAllGroupsFromNoteDb
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Non-Interactive Users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupsAreConsistentAfterMigrationToNoteDb ()
specifier|public
name|void
name|groupsAreConsistentAfterMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group1
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|"verifiers"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccountGroup
name|group2
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|"contributors"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConsistencyCheckInfo
operator|.
name|ConsistencyProblemInfo
argument_list|>
name|consistencyProblems
init|=
name|consistencyChecker
operator|.
name|check
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|consistencyProblems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|nameIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|"verifiers"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"verifiers"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyNameIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|emptyNameIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uuidIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|uuidIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"ABCDEF"
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setGroupUuid
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|groupUuid
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|idIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|Id
name|id
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
literal|12345
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|createdOnIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|createdOn
init|=
name|Timestamp
operator|.
name|from
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2018
argument_list|,
name|Month
operator|.
name|FEBRUARY
argument_list|,
literal|20
argument_list|)
operator|.
name|atTime
argument_list|(
literal|18
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|)
operator|.
name|atZone
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|toInstant
argument_list|()
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setCreatedOn
argument_list|(
name|createdOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|createdOn
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerUuidIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|ownerUuidIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|ownerGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"UVWXYZ"
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setOwnerGroupUuid
argument_list|(
name|ownerGroupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|ownerGroupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|descriptionIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A test group"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"A test group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|absentDescriptionIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|absentDescriptionIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|visibleToAllIsKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|visibleToAllIsKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|setVisibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|visibleToAll
argument_list|()
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersAreKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|membersAreKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|member1
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|23456
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|member2
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|93483
argument_list|)
decl_stmt|;
name|addMembersInReviewDb
argument_list|(
name|group
argument_list|,
name|member1
argument_list|,
name|member2
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|member1
argument_list|,
name|member2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsAreKeptDuringMigrationToNoteDb ()
specifier|public
name|void
name|subgroupsAreKeptDuringMigrationToNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
name|newGroup
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup1
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"FGHIKL"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup2
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"MNOPQR"
argument_list|)
decl_stmt|;
name|addSubgroupsInReviewDb
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|subgroup1
argument_list|,
name|subgroup2
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|groupInNoteDb
init|=
name|getGroupFromNoteDb
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|groupInNoteDb
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|subgroup1
argument_list|,
name|subgroup2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|logFormatWithAccountsAndGerritGroups ()
specifier|public
name|void
name|logFormatWithAccountsAndGerritGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|createAccount
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group1
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"group1"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"group2"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|GroupInfo
name|group3
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"group3"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Add some accounts
try|try
init|(
name|TempClockStep
name|step
init|=
name|TestTimeUtil
operator|.
name|freezeClock
argument_list|()
init|)
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
operator|.
name|id
argument_list|)
operator|.
name|addMembers
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|user1
operator|.
name|_accountId
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|user2
operator|.
name|_accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
comment|// Add some Gerrit groups
try|try
init|(
name|TempClockStep
name|step
init|=
name|TestTimeUtil
operator|.
name|freezeClock
argument_list|()
init|)
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|group2
operator|.
name|id
argument_list|,
name|group3
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|AccountGroup
operator|.
name|UUID
name|group1Uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group1
operator|.
name|id
argument_list|)
decl_stmt|;
name|deleteGroupRefs
argument_list|(
name|group1Uuid
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
expr_stmt|;
name|GroupBundle
name|noteDbBundle
init|=
name|readGroupBundleFromNoteDb
argument_list|(
name|group1Uuid
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|CommitInfo
argument_list|>
name|log
init|=
name|log
argument_list|(
name|group1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// Verify commit that created the group
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Create group"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|date
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|noteDbBundle
operator|.
name|group
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|tz
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getTimeZoneOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that the group creator as member
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nAdd: "
operator|+
name|currentUser
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that added members
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n"
operator|+
literal|"\n"
operator|+
operator|(
literal|"Add: user1<"
operator|+
name|user1
operator|.
name|_accountId
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">\n"
operator|)
operator|+
operator|(
literal|"Add: user2<"
operator|+
name|user2
operator|.
name|_accountId
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">"
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that added Gerrit groups
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n"
operator|+
literal|"\n"
operator|+
operator|(
literal|"Add-group: "
operator|+
name|group2
operator|.
name|name
operator|+
literal|"<"
operator|+
name|group2
operator|.
name|id
operator|+
literal|">\n"
operator|)
operator|+
operator|(
literal|"Add-group: "
operator|+
name|group3
operator|.
name|name
operator|+
literal|"<"
operator|+
name|group3
operator|.
name|id
operator|+
literal|">"
operator|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify that audit log is correctly read by Gerrit
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
operator|.
name|id
argument_list|)
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|AccountInfo
name|currentUserInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertMemberAuditEvents
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|auditEvents
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvents
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|logFormatWithSystemGroups ()
specifier|public
name|void
name|logFormatWithSystemGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"group1"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|TempClockStep
name|step
init|=
name|TestTimeUtil
operator|.
name|freezeClock
argument_list|()
init|)
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group
operator|.
name|id
argument_list|)
decl_stmt|;
name|deleteGroupRefs
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|GroupBundle
name|noteDbBundle
init|=
name|readGroupBundleFromNoteDb
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|CommitInfo
argument_list|>
name|log
init|=
name|log
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify commit that created the group
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Create group"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|date
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|noteDbBundle
operator|.
name|group
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|tz
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getTimeZoneOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that the group creator as member
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nAdd: "
operator|+
name|currentUser
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that added system groups
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n"
operator|+
literal|"\n"
operator|+
literal|"Add-group: Anonymous Users<global:Anonymous-Users>\n"
operator|+
literal|"Add-group: Registered Users<global:Registered-Users>"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify that audit log is correctly read by Gerrit
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|AccountInfo
name|currentUserInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvents
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|groupInfoForExternalGroup
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
argument_list|,
name|groupInfoForExternalGroup
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|logFormatWithExternalGroup ()
specifier|public
name|void
name|logFormatWithExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"group"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|backends
operator|.
name|add
argument_list|(
operator|new
name|TestGroupBackend
argument_list|()
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid
init|=
name|TestGroupBackend
operator|.
name|createUuuid
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupBackend
operator|.
name|handles
argument_list|(
name|subgroupUuid
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|addSubgroupsInReviewDb
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|group
operator|.
name|groupId
argument_list|)
argument_list|,
name|subgroupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group
operator|.
name|id
argument_list|)
decl_stmt|;
name|deleteGroupRefs
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|GroupBundle
name|noteDbBundle
init|=
name|readGroupBundleFromNoteDb
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|CommitInfo
argument_list|>
name|log
init|=
name|log
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify commit that created the group
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Create group"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|date
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|noteDbBundle
operator|.
name|group
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|tz
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getTimeZoneOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that the group creator as member
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nAdd: "
operator|+
name|currentUser
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that added system groups
comment|// Note: The schema migration can only resolve names of Gerrit groups, not of external groups
comment|// and system groups, hence the UUID shows up in commit messages where we would otherwise
comment|// expect the group name.
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n"
operator|+
literal|"\n"
operator|+
literal|"Add-group: "
operator|+
name|TestGroupBackend
operator|.
name|PREFIX
operator|+
literal|"foo<"
operator|+
name|TestGroupBackend
operator|.
name|PREFIX
operator|+
literal|"foo>"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify that audit log is correctly read by Gerrit
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|AccountInfo
name|currentUserInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|groupInfoForExternalGroup
argument_list|(
name|subgroupUuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|logFormatWithNonExistingExternalGroup ()
specifier|public
name|void
name|logFormatWithNonExistingExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"group"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"notExisting:foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupBackend
operator|.
name|handles
argument_list|(
name|subgroupUuid
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|addSubgroupsInReviewDb
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|group
operator|.
name|groupId
argument_list|)
argument_list|,
name|subgroupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group
operator|.
name|id
argument_list|)
decl_stmt|;
name|deleteGroupRefs
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|GroupBundle
name|noteDbBundle
init|=
name|readGroupBundleFromNoteDb
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|CommitInfo
argument_list|>
name|log
init|=
name|log
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify commit that created the group
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Create group"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|date
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|noteDbBundle
operator|.
name|group
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|tz
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|getTimeZoneOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that the group creator as member
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nAdd: "
operator|+
name|currentUser
operator|.
name|getName
argument_list|()
operator|+
literal|"<"
operator|+
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify commit that added system groups
comment|// Note: The schema migration can only resolve names of Gerrit groups, not of external groups
comment|// and system groups, hence the UUID shows up in commit messages where we would otherwise
comment|// expect the group name.
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|message
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n"
operator|+
literal|"\n"
operator|+
literal|"Add-group: notExisting:foo<notExisting:foo>"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|author
argument_list|()
operator|.
name|email
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|committer
argument_list|()
operator|.
name|hasSameDateAs
argument_list|(
name|log
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|author
argument_list|)
expr_stmt|;
comment|// Verify that audit log is correctly read by Gerrit
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|AccountInfo
name|currentUserInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|groupInfoForExternalGroup
argument_list|(
name|subgroupUuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newGroup ()
specifier|private
specifier|static
name|TestGroup
operator|.
name|Builder
name|newGroup
parameter_list|()
block|{
return|return
name|TestGroup
operator|.
name|builder
argument_list|()
return|;
block|}
DECL|method|storeInReviewDb (AccountGroup... groups)
specifier|private
name|void
name|storeInReviewDb
parameter_list|(
name|AccountGroup
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_groups"
operator|+
literal|" (group_uuid,"
operator|+
literal|" group_id,"
operator|+
literal|" name,"
operator|+
literal|" description,"
operator|+
literal|" created_on,"
operator|+
literal|" owner_group_uuid,"
operator|+
literal|" visible_to_all) VALUES (?, ?, ?, ?, ?, ?, ?)"
argument_list|)
init|)
block|{
for|for
control|(
name|AccountGroup
name|group
range|:
name|groups
control|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setTimestamp
argument_list|(
literal|5
argument_list|,
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|group
operator|.
name|isVisibleToAll
argument_list|()
condition|?
literal|"Y"
else|:
literal|"N"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateInReviewDb (AccountGroup... groups)
specifier|private
name|void
name|updateInReviewDb
parameter_list|(
name|AccountGroup
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"UPDATE account_groups SET"
operator|+
literal|" group_uuid = ?,"
operator|+
literal|" name = ?,"
operator|+
literal|" description = ?,"
operator|+
literal|" created_on = ?,"
operator|+
literal|" owner_group_uuid = ?,"
operator|+
literal|" visible_to_all = ?"
operator|+
literal|" WHERE group_id = ?"
argument_list|)
init|)
block|{
for|for
control|(
name|AccountGroup
name|group
range|:
name|groups
control|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setTimestamp
argument_list|(
literal|4
argument_list|,
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|group
operator|.
name|isVisibleToAll
argument_list|()
condition|?
literal|"Y"
else|:
literal|"N"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|7
argument_list|,
name|group
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getFromReviewDb (AccountGroup.Id groupId)
specifier|private
name|AccountGroup
name|getFromReviewDb
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT group_uuid,"
operator|+
literal|" name,"
operator|+
literal|" description,"
operator|+
literal|" created_on,"
operator|+
literal|" owner_group_uuid,"
operator|+
literal|" visible_to_all"
operator|+
literal|" FROM account_groups"
operator|+
literal|" WHERE group_id = "
operator|+
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group %s not found"
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|ownerGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|visibleToAll
init|=
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
operator|new
name|AccountGroup
argument_list|(
name|groupName
argument_list|,
name|groupId
argument_list|,
name|groupUuid
argument_list|,
name|createdOn
argument_list|)
decl_stmt|;
name|group
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|group
operator|.
name|setOwnerGroupUUID
argument_list|(
name|ownerGroupUuid
argument_list|)
expr_stmt|;
name|group
operator|.
name|setVisibleToAll
argument_list|(
name|visibleToAll
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group ID %s is ambiguous"
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|group
return|;
block|}
block|}
DECL|method|addMembersInReviewDb (AccountGroup group, Account.Id... memberIds)
specifier|private
name|void
name|addMembersInReviewDb
parameter_list|(
name|AccountGroup
name|group
parameter_list|,
name|Account
operator|.
name|Id
modifier|...
name|memberIds
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_group_members"
operator|+
literal|" (group_id,"
operator|+
literal|" account_id) VALUES ("
operator|+
name|group
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|", ?)"
argument_list|)
init|)
block|{
for|for
control|(
name|Account
operator|.
name|Id
name|memberId
range|:
name|memberIds
control|)
block|{
name|stmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|memberId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addSubgroupsInReviewDb (AccountGroup.Id groupId, AccountGroup.UUID... subgroupUuids)
specifier|private
name|void
name|addSubgroupsInReviewDb
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|AccountGroup
operator|.
name|UUID
modifier|...
name|subgroupUuids
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|addSubGroupStmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_group_by_id"
operator|+
literal|" (group_id,"
operator|+
literal|" include_uuid) VALUES ("
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|", ?)"
argument_list|)
init|;
name|PreparedStatement
name|addSubGroupAuditStmt
operator|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_group_by_id_aud"
operator|+
literal|" (group_id,"
operator|+
literal|" include_uuid,"
operator|+
literal|" added_by,"
operator|+
literal|" added_on) VALUES ("
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|", ?, "
operator|+
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|", ?)"
argument_list|)
init|)
block|{
name|Timestamp
name|addedOn
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid
range|:
name|subgroupUuids
control|)
block|{
name|addSubGroupStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|subgroupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|addSubGroupStmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
name|addSubGroupAuditStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|subgroupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|addSubGroupAuditStmt
operator|.
name|setTimestamp
argument_list|(
literal|2
argument_list|,
name|addedOn
argument_list|)
expr_stmt|;
name|addSubGroupAuditStmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|addSubGroupStmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|addSubGroupAuditStmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createAccount (String name)
specifier|private
name|AccountInfo
name|createAccount
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RestApiException
block|{
name|AccountInput
name|accountInput
init|=
operator|new
name|AccountInput
argument_list|()
decl_stmt|;
name|accountInput
operator|.
name|username
operator|=
name|name
expr_stmt|;
name|accountInput
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|accountInput
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|readGroupBundleFromNoteDb (AccountGroup.UUID groupUuid)
specifier|private
name|GroupBundle
name|readGroupBundleFromNoteDb
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|groupBundleFactory
operator|.
name|fromNoteDb
argument_list|(
name|allUsersRepo
argument_list|,
name|groupUuid
argument_list|)
return|;
block|}
block|}
DECL|method|deleteGroupRefs (AccountGroup.UUID groupUuid)
specifier|private
name|void
name|deleteGroupRefs
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Ref
name|oldRef
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldRef
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|oldRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeSchemaMigration (SchemaVersion schema, AccountGroup... groupsToVerify)
specifier|private
name|void
name|executeSchemaMigration
parameter_list|(
name|SchemaVersion
name|schema
parameter_list|,
name|AccountGroup
modifier|...
name|groupsToVerify
parameter_list|)
throws|throws
name|Exception
block|{
name|executeSchemaMigration
argument_list|(
name|schema
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|groupsToVerify
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroup
operator|::
name|getGroupUUID
argument_list|)
operator|.
name|toArray
argument_list|(
name|AccountGroup
operator|.
name|UUID
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeSchemaMigration (SchemaVersion schema, GroupInfo... groupsToVerify)
specifier|private
name|void
name|executeSchemaMigration
parameter_list|(
name|SchemaVersion
name|schema
parameter_list|,
name|GroupInfo
modifier|...
name|groupsToVerify
parameter_list|)
throws|throws
name|Exception
block|{
name|executeSchemaMigration
argument_list|(
name|schema
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|groupsToVerify
argument_list|)
operator|.
name|map
argument_list|(
name|i
lambda|->
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|i
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|AccountGroup
operator|.
name|UUID
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeSchemaMigration (SchemaVersion schema, AccountGroup.UUID... groupsToVerify)
specifier|private
name|void
name|executeSchemaMigration
parameter_list|(
name|SchemaVersion
name|schema
parameter_list|,
name|AccountGroup
operator|.
name|UUID
modifier|...
name|groupsToVerify
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|GroupBundle
argument_list|>
name|reviewDbBundles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
range|:
name|groupsToVerify
control|)
block|{
name|reviewDbBundles
operator|.
name|add
argument_list|(
name|GroupBundle
operator|.
name|Factory
operator|.
name|fromReviewDb
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|migrateData
argument_list|(
name|db
argument_list|,
operator|new
name|TestUpdateUI
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupBundle
name|reviewDbBundle
range|:
name|reviewDbBundles
control|)
block|{
name|assertMigratedCleanly
argument_list|(
name|readGroupBundleFromNoteDb
argument_list|(
name|reviewDbBundle
operator|.
name|uuid
argument_list|()
argument_list|)
argument_list|,
name|reviewDbBundle
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMigratedCleanly (GroupBundle noteDbBundle, GroupBundle expectedReviewDbBundle)
specifier|private
name|void
name|assertMigratedCleanly
parameter_list|(
name|GroupBundle
name|noteDbBundle
parameter_list|,
name|GroupBundle
name|expectedReviewDbBundle
parameter_list|)
block|{
name|assertThat
argument_list|(
name|GroupBundle
operator|.
name|compareWithAudits
argument_list|(
name|expectedReviewDbBundle
argument_list|,
name|noteDbBundle
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|log (GroupInfo g)
specifier|private
name|ImmutableList
argument_list|<
name|CommitInfo
argument_list|>
name|log
parameter_list|(
name|GroupInfo
name|g
parameter_list|)
throws|throws
name|Exception
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|CommitInfo
argument_list|>
name|result
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Date
argument_list|>
name|commitDates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|allUsersRepo
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|allUsersRepo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|g
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|rw
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CommitUtil
operator|.
name|toCommitInfo
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|commitDates
operator|.
name|add
argument_list|(
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|commitDates
argument_list|)
operator|.
name|named
argument_list|(
literal|"commit timestamps for %s"
argument_list|,
name|result
argument_list|)
operator|.
name|isOrdered
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getAllGroupsFromNoteDb ()
specifier|private
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|getAllGroupsFromNoteDb
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|GroupNameNotes
operator|.
name|loadAllGroups
argument_list|(
name|allUsersRepo
argument_list|)
return|;
block|}
block|}
DECL|method|getGroupFromNoteDb (AccountGroup.UUID groupUuid)
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|getGroupFromNoteDb
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|allUsersRepo
argument_list|,
name|groupUuid
argument_list|)
operator|.
name|getLoadedGroup
argument_list|()
return|;
block|}
block|}
DECL|method|assertThatGroup ( Optional<InternalGroup> group)
specifier|private
specifier|static
name|OptionalSubject
argument_list|<
name|InternalGroupSubject
argument_list|,
name|InternalGroup
argument_list|>
name|assertThatGroup
parameter_list|(
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
parameter_list|)
block|{
return|return
name|assertThat
argument_list|(
name|group
argument_list|,
name|InternalGroupSubject
operator|::
name|assertThat
argument_list|)
operator|.
name|named
argument_list|(
literal|"group"
argument_list|)
return|;
block|}
DECL|method|assertMemberAuditEvent ( GroupAuditEventInfo info, Type expectedType, Account.Id expectedUser, AccountInfo expectedMember)
specifier|private
name|void
name|assertMemberAuditEvent
parameter_list|(
name|GroupAuditEventInfo
name|info
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|AccountInfo
name|expectedMember
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|user
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UserMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertAccount
argument_list|(
operator|(
operator|(
name|UserMemberAuditEventInfo
operator|)
name|info
operator|)
operator|.
name|member
argument_list|,
name|expectedMember
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMemberAuditEvents ( GroupAuditEventInfo info1, GroupAuditEventInfo info2, Type expectedType, Account.Id expectedUser, AccountInfo expectedMember1, AccountInfo expectedMember2)
specifier|private
name|void
name|assertMemberAuditEvents
parameter_list|(
name|GroupAuditEventInfo
name|info1
parameter_list|,
name|GroupAuditEventInfo
name|info2
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|AccountInfo
name|expectedMember1
parameter_list|,
name|AccountInfo
name|expectedMember2
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info1
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UserMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info2
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UserMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserMemberAuditEventInfo
name|event1
init|=
operator|(
name|UserMemberAuditEventInfo
operator|)
name|info1
decl_stmt|;
name|UserMemberAuditEventInfo
name|event2
init|=
operator|(
name|UserMemberAuditEventInfo
operator|)
name|info2
decl_stmt|;
name|assertThat
argument_list|(
name|event1
operator|.
name|member
operator|.
name|_accountId
argument_list|)
operator|.
name|isAnyOf
argument_list|(
name|expectedMember1
operator|.
name|_accountId
argument_list|,
name|expectedMember2
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event2
operator|.
name|member
operator|.
name|_accountId
argument_list|)
operator|.
name|isAnyOf
argument_list|(
name|expectedMember1
operator|.
name|_accountId
argument_list|,
name|expectedMember2
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event1
operator|.
name|member
operator|.
name|_accountId
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|event2
operator|.
name|member
operator|.
name|_accountId
argument_list|)
expr_stmt|;
if|if
condition|(
name|event1
operator|.
name|member
operator|.
name|_accountId
operator|==
name|expectedMember1
operator|.
name|_accountId
condition|)
block|{
name|assertMemberAuditEvent
argument_list|(
name|info1
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedMember1
argument_list|)
expr_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|info2
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedMember2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertMemberAuditEvent
argument_list|(
name|info1
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedMember2
argument_list|)
expr_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|info2
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedMember1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSubgroupAuditEvent ( GroupAuditEventInfo info, Type expectedType, Account.Id expectedUser, GroupInfo expectedSubGroup)
specifier|private
name|void
name|assertSubgroupAuditEvent
parameter_list|(
name|GroupAuditEventInfo
name|info
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|GroupInfo
name|expectedSubGroup
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|user
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GroupMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertGroup
argument_list|(
operator|(
operator|(
name|GroupMemberAuditEventInfo
operator|)
name|info
operator|)
operator|.
name|member
argument_list|,
name|expectedSubGroup
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubgroupAuditEvents ( GroupAuditEventInfo info1, GroupAuditEventInfo info2, Type expectedType, Account.Id expectedUser, GroupInfo expectedSubGroup1, GroupInfo expectedSubGroup2)
specifier|private
name|void
name|assertSubgroupAuditEvents
parameter_list|(
name|GroupAuditEventInfo
name|info1
parameter_list|,
name|GroupAuditEventInfo
name|info2
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|GroupInfo
name|expectedSubGroup1
parameter_list|,
name|GroupInfo
name|expectedSubGroup2
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info1
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GroupMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info2
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GroupMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|GroupMemberAuditEventInfo
name|event1
init|=
operator|(
name|GroupMemberAuditEventInfo
operator|)
name|info1
decl_stmt|;
name|GroupMemberAuditEventInfo
name|event2
init|=
operator|(
name|GroupMemberAuditEventInfo
operator|)
name|info2
decl_stmt|;
name|assertThat
argument_list|(
name|event1
operator|.
name|member
operator|.
name|id
argument_list|)
operator|.
name|isAnyOf
argument_list|(
name|expectedSubGroup1
operator|.
name|id
argument_list|,
name|expectedSubGroup2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event2
operator|.
name|member
operator|.
name|id
argument_list|)
operator|.
name|isAnyOf
argument_list|(
name|expectedSubGroup1
operator|.
name|id
argument_list|,
name|expectedSubGroup2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event1
operator|.
name|member
operator|.
name|id
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|event2
operator|.
name|member
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|event1
operator|.
name|member
operator|.
name|id
operator|.
name|equals
argument_list|(
name|expectedSubGroup1
operator|.
name|id
argument_list|)
condition|)
block|{
name|assertSubgroupAuditEvent
argument_list|(
name|info1
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedSubGroup1
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|info2
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedSubGroup2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertSubgroupAuditEvent
argument_list|(
name|info1
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedSubGroup2
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|info2
argument_list|,
name|expectedType
argument_list|,
name|expectedUser
argument_list|,
name|expectedSubGroup1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertAccount (AccountInfo actual, AccountInfo expected)
specifier|private
name|void
name|assertAccount
parameter_list|(
name|AccountInfo
name|actual
parameter_list|,
name|AccountInfo
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|username
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGroup (GroupInfo actual, GroupInfo expected)
specifier|private
name|void
name|assertGroup
parameter_list|(
name|GroupInfo
name|actual
parameter_list|,
name|GroupInfo
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|groupId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|groupId
argument_list|)
expr_stmt|;
block|}
DECL|method|groupInfoForExternalGroup (AccountGroup.UUID groupUuid)
specifier|private
name|GroupInfo
name|groupInfoForExternalGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
name|GroupInfo
name|groupInfo
init|=
operator|new
name|GroupInfo
argument_list|()
decl_stmt|;
name|groupInfo
operator|.
name|id
operator|=
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|encoded
argument_list|()
expr_stmt|;
if|if
condition|(
name|groupBackend
operator|.
name|handles
argument_list|(
name|groupUuid
argument_list|)
condition|)
block|{
name|groupInfo
operator|.
name|name
operator|=
name|groupBackend
operator|.
name|get
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|groupInfo
return|;
block|}
DECL|class|TestGroupBackend
specifier|private
specifier|static
class|class
name|TestGroupBackend
implements|implements
name|GroupBackend
block|{
DECL|field|PREFIX
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"testbackend:"
decl_stmt|;
DECL|method|createUuuid (String name)
specifier|static
name|AccountGroup
operator|.
name|UUID
name|createUuuid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|PREFIX
operator|+
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|suggest (String name, ProjectState project)
specifier|public
name|Collection
argument_list|<
name|GroupReference
argument_list|>
name|suggest
parameter_list|(
name|String
name|name
parameter_list|,
name|ProjectState
name|project
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|membershipsOf (IdentifiedUser user)
specifier|public
name|GroupMembership
name|membershipsOf
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
operator|new
name|GroupMembership
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|intersection
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getKnownGroups
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAnyOf
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|isVisibleToAll (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|isVisibleToAll
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|handles (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|handles
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.UUID uuid)
specifier|public
name|Basic
name|get
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
operator|new
name|GroupDescription
operator|.
name|Basic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AccountGroup
operator|.
name|UUID
name|getGroupUUID
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|substring
argument_list|(
name|PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEmailAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

