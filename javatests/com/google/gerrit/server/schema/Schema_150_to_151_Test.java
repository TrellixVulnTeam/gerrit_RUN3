begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupUUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryTestEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestUpdateUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Month
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|Schema_150_to_151_Test
specifier|public
class|class
name|Schema_150_to_151_Test
block|{
DECL|field|testEnv
annotation|@
name|Rule
specifier|public
name|InMemoryTestEnvironment
name|testEnv
init|=
operator|new
name|InMemoryTestEnvironment
argument_list|()
decl_stmt|;
DECL|field|schema151
annotation|@
name|Inject
specifier|private
name|Schema_151
name|schema151
decl_stmt|;
DECL|field|db
annotation|@
name|Inject
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|currentUser
annotation|@
name|Inject
specifier|private
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|serverIdent
annotation|@
name|Inject
specifier|private
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|private
name|Sequences
name|seq
decl_stmt|;
DECL|field|connection
specifier|private
name|Connection
name|connection
decl_stmt|;
DECL|field|createdOnRetrieval
specifier|private
name|PreparedStatement
name|createdOnRetrieval
decl_stmt|;
DECL|field|createdOnUpdate
specifier|private
name|PreparedStatement
name|createdOnUpdate
decl_stmt|;
DECL|field|auditEntryDeletion
specifier|private
name|PreparedStatement
name|auditEntryDeletion
decl_stmt|;
DECL|field|jdbcSchema
specifier|private
name|JdbcSchema
name|jdbcSchema
decl_stmt|;
annotation|@
name|Before
DECL|method|unwrapDb ()
specifier|public
name|void
name|unwrapDb
parameter_list|()
block|{
name|jdbcSchema
operator|=
name|ReviewDbWrapper
operator|.
name|unwrapJbdcSchema
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|db
operator|instanceof
name|JdbcSchema
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|connection
operator|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE account_groups ("
operator|+
literal|" group_uuid varchar(255) DEFAULT '' NOT NULL,"
operator|+
literal|" group_id INTEGER DEFAULT 0 NOT NULL,"
operator|+
literal|" name varchar(255) DEFAULT '' NOT NULL,"
operator|+
literal|" created_on TIMESTAMP,"
operator|+
literal|" description CLOB,"
operator|+
literal|" owner_group_uuid varchar(255) DEFAULT '' NOT NULL,"
operator|+
literal|" visible_to_all CHAR(1) DEFAULT 'N' NOT NULL"
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE account_group_members ("
operator|+
literal|" group_id INTEGER DEFAULT 0 NOT NULL,"
operator|+
literal|" account_id INTEGER DEFAULT 0 NOT NULL"
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE account_group_members_audit ("
operator|+
literal|" group_id INTEGER DEFAULT 0 NOT NULL,"
operator|+
literal|" account_id INTEGER DEFAULT 0 NOT NULL,"
operator|+
literal|" added_by INTEGER DEFAULT 0 NOT NULL,"
operator|+
literal|" added_on TIMESTAMP,"
operator|+
literal|" removed_by INTEGER,"
operator|+
literal|" removed_on TIMESTAMP"
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|createdOnRetrieval
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT created_on FROM account_groups WHERE group_id = ?"
argument_list|)
expr_stmt|;
name|createdOnUpdate
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"UPDATE account_groups SET created_on = ? WHERE group_id = ?"
argument_list|)
expr_stmt|;
name|auditEntryDeletion
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"DELETE FROM account_group_members_audit WHERE group_id = ?"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|auditEntryDeletion
operator|!=
literal|null
condition|)
block|{
name|auditEntryDeletion
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|createdOnUpdate
operator|!=
literal|null
condition|)
block|{
name|createdOnUpdate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|createdOnRetrieval
operator|!=
literal|null
condition|)
block|{
name|createdOnRetrieval
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createdOnIsPopulatedForGroupsCreatedAfterAudit ()
specifier|public
name|void
name|createdOnIsPopulatedForGroupsCreatedAfterAudit
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|testStartTime
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
name|createGroupInReviewDb
argument_list|(
literal|"Group for schema migration"
argument_list|)
decl_stmt|;
name|setCreatedOnToVeryOldTimestamp
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|schema151
operator|.
name|migrateData
argument_list|(
name|db
argument_list|,
operator|new
name|TestUpdateUI
argument_list|()
argument_list|)
expr_stmt|;
name|Timestamp
name|createdOn
init|=
name|getCreatedOn
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|createdOn
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|testStartTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnIsPopulatedForGroupsCreatedBeforeAudit ()
specifier|public
name|void
name|createdOnIsPopulatedForGroupsCreatedBeforeAudit
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
name|createGroupInReviewDb
argument_list|(
literal|"Ancient group for schema migration"
argument_list|)
decl_stmt|;
name|setCreatedOnToVeryOldTimestamp
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|removeAuditEntriesFor
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|schema151
operator|.
name|migrateData
argument_list|(
name|db
argument_list|,
operator|new
name|TestUpdateUI
argument_list|()
argument_list|)
expr_stmt|;
name|Timestamp
name|createdOn
init|=
name|getCreatedOn
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|createdOn
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|AccountGroup
operator|.
name|auditCreationInstantTs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroupInReviewDb (String name)
specifier|private
name|AccountGroup
operator|.
name|Id
name|createGroupInReviewDb
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|AccountGroup
name|group
init|=
operator|new
name|AccountGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextGroupId
argument_list|()
argument_list|)
argument_list|,
name|GroupUUID
operator|.
name|make
argument_list|(
name|name
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|addMembersInReviewDb
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|group
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|getCreatedOn (Id groupId)
specifier|private
name|Timestamp
name|getCreatedOn
parameter_list|(
name|Id
name|groupId
parameter_list|)
throws|throws
name|Exception
block|{
name|createdOnRetrieval
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|results
init|=
name|createdOnRetrieval
operator|.
name|executeQuery
argument_list|()
init|)
block|{
if|if
condition|(
name|results
operator|.
name|first
argument_list|()
condition|)
block|{
return|return
name|results
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setCreatedOnToVeryOldTimestamp (Id groupId)
specifier|private
name|void
name|setCreatedOnToVeryOldTimestamp
parameter_list|(
name|Id
name|groupId
parameter_list|)
throws|throws
name|Exception
block|{
name|createdOnUpdate
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Instant
name|instant
init|=
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|1800
argument_list|,
name|Month
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInstant
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|createdOnUpdate
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
name|Timestamp
operator|.
name|from
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
name|createdOnUpdate
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|createdOnUpdate
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
DECL|method|removeAuditEntriesFor (AccountGroup.Id groupId)
specifier|private
name|void
name|removeAuditEntriesFor
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|Exception
block|{
name|auditEntryDeletion
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|auditEntryDeletion
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
DECL|method|storeInReviewDb (AccountGroup... groups)
specifier|private
name|void
name|storeInReviewDb
parameter_list|(
name|AccountGroup
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_groups"
operator|+
literal|" (group_uuid,"
operator|+
literal|" group_id,"
operator|+
literal|" name,"
operator|+
literal|" description,"
operator|+
literal|" created_on,"
operator|+
literal|" owner_group_uuid,"
operator|+
literal|" visible_to_all) VALUES (?, ?, ?, ?, ?, ?, ?)"
argument_list|)
init|)
block|{
for|for
control|(
name|AccountGroup
name|group
range|:
name|groups
control|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setTimestamp
argument_list|(
literal|5
argument_list|,
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|group
operator|.
name|isVisibleToAll
argument_list|()
condition|?
literal|"Y"
else|:
literal|"N"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addMembersInReviewDb (AccountGroup.Id groupId, Account.Id... memberIds)
specifier|private
name|void
name|addMembersInReviewDb
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|Account
operator|.
name|Id
modifier|...
name|memberIds
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|addMemberStmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_group_members"
operator|+
literal|" (group_id,"
operator|+
literal|" account_id) VALUES ("
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|", ?)"
argument_list|)
init|;
name|PreparedStatement
name|addMemberAuditStmt
operator|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_group_members_audit"
operator|+
literal|" (group_id,"
operator|+
literal|" account_id,"
operator|+
literal|" added_by,"
operator|+
literal|" added_on) VALUES ("
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|", ?, "
operator|+
name|currentUser
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|", ?)"
argument_list|)
init|)
block|{
name|Timestamp
name|addedOn
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|memberId
range|:
name|memberIds
control|)
block|{
name|addMemberStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|memberId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|addMemberStmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
name|addMemberAuditStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|memberId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|addMemberAuditStmt
operator|.
name|setTimestamp
argument_list|(
literal|2
argument_list|,
name|addedOn
argument_list|)
expr_stmt|;
name|addMemberAuditStmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|addMemberStmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
name|addMemberAuditStmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

