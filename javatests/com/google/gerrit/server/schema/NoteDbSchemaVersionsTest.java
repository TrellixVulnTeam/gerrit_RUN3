begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|NoteDbSchemaVersions
operator|.
name|guessVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NoteDbSchemaVersionsTest
specifier|public
class|class
name|NoteDbSchemaVersionsTest
block|{
annotation|@
name|Test
DECL|method|testGuessVersion ()
specifier|public
name|void
name|testGuessVersion
parameter_list|()
block|{
name|assertThat
argument_list|(
name|guessVersion
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|guessVersion
argument_list|(
name|Schema_180
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|180
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|contiguousVersions ()
specifier|public
name|void
name|contiguousVersions
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
name|NoteDbSchemaVersions
operator|.
name|ALL
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|IntStream
operator|.
name|rangeClosed
argument_list|(
name|keys
operator|.
name|first
argument_list|()
argument_list|,
name|keys
operator|.
name|last
argument_list|()
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keys
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exceedsReviewDbVersion ()
specifier|public
name|void
name|exceedsReviewDbVersion
parameter_list|()
block|{
name|assertThat
argument_list|(
name|NoteDbSchemaVersions
operator|.
name|ALL
operator|.
name|firstKey
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
literal|170
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|containsAllNoteDbSchemas ()
specifier|public
name|void
name|containsAllNoteDbSchemas
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|minNoteDbVersion
init|=
literal|180
decl_stmt|;
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|allSchemaVersions
init|=
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|getTopLevelClasses
argument_list|(
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ClassInfo
operator|::
name|load
argument_list|)
operator|.
name|map
argument_list|(
name|NoteDbSchemaVersions
operator|::
name|guessVersion
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Streams
operator|::
name|stream
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|>=
name|minNoteDbVersion
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|NoteDbSchemaVersions
operator|.
name|ALL
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|allSchemaVersions
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|schemaConstructors ()
specifier|public
name|void
name|schemaConstructors
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|version
range|:
name|NoteDbSchemaVersions
operator|.
name|ALL
operator|.
name|keySet
argument_list|()
control|)
block|{
name|NoteDbSchemaVersions
operator|.
name|get
argument_list|(
name|NoteDbSchemaVersions
operator|.
name|ALL
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

