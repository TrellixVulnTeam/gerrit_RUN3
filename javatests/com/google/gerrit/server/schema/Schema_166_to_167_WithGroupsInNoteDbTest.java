begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbTable
operator|.
name|GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
operator|.
name|DISABLE_REVIEW_DB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
operator|.
name|SECTION_NOTE_DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerIdProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupNameNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupCreation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryTestEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestUpdateUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|Schema_166_to_167_WithGroupsInNoteDbTest
specifier|public
class|class
name|Schema_166_to_167_WithGroupsInNoteDbTest
block|{
DECL|method|createConfig ()
specifier|private
specifier|static
name|Config
name|createConfig
parameter_list|()
block|{
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setString
argument_list|(
name|GerritServerIdProvider
operator|.
name|SECTION
argument_list|,
literal|null
argument_list|,
name|GerritServerIdProvider
operator|.
name|KEY
argument_list|,
literal|"1234567"
argument_list|)
expr_stmt|;
comment|// Disable groups in ReviewDb. This means the primary storage for groups is NoteDb.
name|config
operator|.
name|setBoolean
argument_list|(
name|SECTION_NOTE_DB
argument_list|,
name|GROUPS
operator|.
name|key
argument_list|()
argument_list|,
name|DISABLE_REVIEW_DB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
annotation|@
name|Rule
DECL|field|testEnv
specifier|public
name|InMemoryTestEnvironment
name|testEnv
init|=
operator|new
name|InMemoryTestEnvironment
argument_list|(
name|Schema_166_to_167_WithGroupsInNoteDbTest
operator|::
name|createConfig
argument_list|)
decl_stmt|;
DECL|field|schema167
annotation|@
name|Inject
specifier|private
name|Schema_167
name|schema167
decl_stmt|;
DECL|field|db
annotation|@
name|Inject
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|gitRepoManager
annotation|@
name|Inject
specifier|private
name|GitRepositoryManager
name|gitRepoManager
decl_stmt|;
DECL|field|allUsersName
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|groupsUpdate
annotation|@
name|Inject
specifier|private
annotation|@
name|ServerInitiated
name|GroupsUpdate
name|groupsUpdate
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|private
name|Sequences
name|seq
decl_stmt|;
DECL|field|jdbcSchema
specifier|private
name|JdbcSchema
name|jdbcSchema
decl_stmt|;
annotation|@
name|Before
DECL|method|initDb ()
specifier|public
name|void
name|initDb
parameter_list|()
throws|throws
name|Exception
block|{
name|jdbcSchema
operator|=
name|ReviewDbWrapper
operator|.
name|unwrapJbdcSchema
argument_list|(
name|db
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE account_groups ("
operator|+
literal|" group_uuid varchar(255) DEFAULT '' NOT NULL,"
operator|+
literal|" group_id INTEGER DEFAULT 0 NOT NULL,"
operator|+
literal|" name varchar(255) DEFAULT '' NOT NULL,"
operator|+
literal|" created_on TIMESTAMP,"
operator|+
literal|" description CLOB,"
operator|+
literal|" owner_group_uuid varchar(255) DEFAULT '' NOT NULL,"
operator|+
literal|" visible_to_all CHAR(1) DEFAULT 'N' NOT NULL"
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|migrationIsSkipped ()
specifier|public
name|void
name|migrationIsSkipped
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a group in NoteDb (doesn't create the group in ReviewDb since
comment|// disableReviewDb == true)
name|InternalGroup
name|internalGroup
init|=
name|groupsUpdate
operator|.
name|createGroup
argument_list|(
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"users"
argument_list|)
argument_list|)
operator|.
name|setGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"users"
argument_list|)
argument_list|)
operator|.
name|setId
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextGroupId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"description"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// Insert the group into ReviewDb
name|AccountGroup
name|group1
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
name|internalGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setGroupUuid
argument_list|(
name|internalGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|internalGroup
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCreatedOn
argument_list|(
name|internalGroup
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|internalGroup
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|setGroupUuid
argument_list|(
name|internalGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|.
name|setVisibleToAll
argument_list|(
name|internalGroup
operator|.
name|isVisibleToAll
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group1
argument_list|)
expr_stmt|;
comment|// Update the group description in ReviewDb so that the group state differs between ReviewDb and
comment|// NoteDb
name|group1
operator|.
name|setDescription
argument_list|(
literal|"outdated"
argument_list|)
expr_stmt|;
name|updateInReviewDb
argument_list|(
name|group1
argument_list|)
expr_stmt|;
comment|// Create a group that only exists in ReviewDb
name|AccountGroup
name|group2
init|=
name|newGroup
argument_list|()
operator|.
name|setName
argument_list|(
literal|"reviewDbOnlyGroup"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|storeInReviewDb
argument_list|(
name|group2
argument_list|)
expr_stmt|;
comment|// Remember the SHA1 of the group ref in NoteDb
name|ObjectId
name|groupSha1
init|=
name|getGroupSha1
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|executeSchemaMigration
argument_list|(
name|schema167
argument_list|)
expr_stmt|;
comment|// Verify the groups in NoteDb: "users" should still exist, "reviewDbOnlyGroup" should not have
comment|// been created
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|groupReferences
init|=
name|getAllGroupsFromNoteDb
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|groupReferences
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|contains
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"reviewDbOnlyGroup"
argument_list|)
expr_stmt|;
comment|// Verify that the group refs in NoteDb were not touched.
name|assertThat
argument_list|(
name|getGroupSha1
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupSha1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getGroupSha1
argument_list|(
name|group2
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|newGroup ()
specifier|private
specifier|static
name|TestGroup
operator|.
name|Builder
name|newGroup
parameter_list|()
block|{
return|return
name|TestGroup
operator|.
name|builder
argument_list|()
return|;
block|}
DECL|method|storeInReviewDb (AccountGroup... groups)
specifier|private
name|void
name|storeInReviewDb
parameter_list|(
name|AccountGroup
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"INSERT INTO account_groups"
operator|+
literal|" (group_uuid,"
operator|+
literal|" group_id,"
operator|+
literal|" name,"
operator|+
literal|" description,"
operator|+
literal|" created_on,"
operator|+
literal|" owner_group_uuid,"
operator|+
literal|" visible_to_all) VALUES (?, ?, ?, ?, ?, ?, ?)"
argument_list|)
init|)
block|{
for|for
control|(
name|AccountGroup
name|group
range|:
name|groups
control|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setTimestamp
argument_list|(
literal|5
argument_list|,
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|group
operator|.
name|isVisibleToAll
argument_list|()
condition|?
literal|"Y"
else|:
literal|"N"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateInReviewDb (AccountGroup... groups)
specifier|private
name|void
name|updateInReviewDb
parameter_list|(
name|AccountGroup
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PreparedStatement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
literal|"UPDATE account_groups SET"
operator|+
literal|" group_uuid = ?,"
operator|+
literal|" name = ?,"
operator|+
literal|" description = ?,"
operator|+
literal|" created_on = ?,"
operator|+
literal|" owner_group_uuid = ?,"
operator|+
literal|" visible_to_all = ?"
operator|+
literal|" WHERE group_id = ?"
argument_list|)
init|)
block|{
for|for
control|(
name|AccountGroup
name|group
range|:
name|groups
control|)
block|{
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setTimestamp
argument_list|(
literal|4
argument_list|,
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|group
operator|.
name|isVisibleToAll
argument_list|()
condition|?
literal|"Y"
else|:
literal|"N"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|7
argument_list|,
name|group
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|executeBatch
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|executeSchemaMigration (SchemaVersion schema)
specifier|private
name|void
name|executeSchemaMigration
parameter_list|(
name|SchemaVersion
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|schema
operator|.
name|migrateData
argument_list|(
name|db
argument_list|,
operator|new
name|TestUpdateUI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllGroupsFromNoteDb ()
specifier|private
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|getAllGroupsFromNoteDb
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|GroupNameNotes
operator|.
name|loadAllGroups
argument_list|(
name|allUsersRepo
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nullable
DECL|method|getGroupSha1 (AccountGroup.UUID groupUuid)
specifier|private
name|ObjectId
name|getGroupSha1
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|gitRepoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|allUsersRepo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

