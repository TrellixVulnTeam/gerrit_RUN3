begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|DisabledMetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|testing
operator|.
name|ExternalIdTestUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersNameProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|ExternalIDCacheLoaderTest
specifier|public
class|class
name|ExternalIDCacheLoaderTest
block|{
DECL|field|ALL_USERS
specifier|private
specifier|static
name|AllUsersName
name|ALL_USERS
init|=
operator|new
name|AllUsersName
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
DECL|field|externalIdCache
specifier|private
name|Cache
argument_list|<
name|ObjectId
argument_list|,
name|AllExternalIds
argument_list|>
name|externalIdCache
decl_stmt|;
DECL|field|loader
specifier|private
name|ExternalIdCacheLoader
name|loader
decl_stmt|;
DECL|field|repoManager
specifier|private
name|GitRepositoryManager
name|repoManager
init|=
operator|new
name|InMemoryRepositoryManager
argument_list|()
decl_stmt|;
DECL|field|externalIdReader
specifier|private
name|ExternalIdReader
name|externalIdReader
decl_stmt|;
DECL|field|externalIdReaderSpy
specifier|private
name|ExternalIdReader
name|externalIdReaderSpy
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|externalIdCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|repoManager
operator|.
name|createRepository
argument_list|(
name|ALL_USERS
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|externalIdReader
operator|=
operator|new
name|ExternalIdReader
argument_list|(
name|repoManager
argument_list|,
name|ALL_USERS
argument_list|,
operator|new
name|DisabledMetricMaker
argument_list|()
argument_list|)
expr_stmt|;
name|externalIdReaderSpy
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
name|externalIdReader
argument_list|)
expr_stmt|;
name|loader
operator|=
name|createLoader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|worksOnSingleCommit ()
specifier|public
name|void
name|worksOnSingleCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|firstState
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|firstState
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|firstState
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|externalIdReaderSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|all
argument_list|(
name|firstState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reloadsSingleUpdateUsingPartialReload ()
specifier|public
name|void
name|reloadsSingleUpdateUsingPartialReload
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|firstState
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|put
argument_list|(
name|firstState
argument_list|,
name|allFromGit
argument_list|(
name|firstState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reloadsMultipleUpdatesUsingPartialReload ()
specifier|public
name|void
name|reloadsMultipleUpdatesUsingPartialReload
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|firstState
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|insertExternalId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|insertExternalId
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|put
argument_list|(
name|firstState
argument_list|,
name|allFromGit
argument_list|(
name|firstState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reloadsAllExternalIdsWhenNoOldStateIsCached ()
specifier|public
name|void
name|reloadsAllExternalIdsWhenNoOldStateIsCached
parameter_list|()
throws|throws
name|Exception
block|{
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|externalIdReaderSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|all
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|partialReloadingDisabledAlwaysTriggersFullReload ()
specifier|public
name|void
name|partialReloadingDisabledAlwaysTriggersFullReload
parameter_list|()
throws|throws
name|Exception
block|{
name|loader
operator|=
name|createLoader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|externalIdReaderSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|all
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fallsBackToFullReloadOnManyUpdatesOnBranch ()
specifier|public
name|void
name|fallsBackToFullReloadOnManyUpdatesOnBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ObjectId
name|head
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|head
operator|=
name|insertExternalId
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|externalIdReaderSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|all
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doesFullReloadWhenNoCacheStateIsFound ()
specifier|public
name|void
name|doesFullReloadWhenNoCacheStateIsFound
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|externalIdReaderSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|all
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|handlesDeletionInPartialReload ()
specifier|public
name|void
name|handlesDeletionInPartialReload
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|firstState
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|head
init|=
name|deleteExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
operator|.
name|byAccount
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|externalIdCache
operator|.
name|put
argument_list|(
name|firstState
argument_list|,
name|allFromGit
argument_list|(
name|firstState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|handlesModifyInPartialReload ()
specifier|public
name|void
name|handlesModifyInPartialReload
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|firstState
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|head
init|=
name|modifyExternalId
argument_list|(
name|externalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ExternalId
operator|.
name|create
argument_list|(
literal|"fooschema"
argument_list|,
literal|"bar1"
argument_list|,
name|Account
operator|.
name|id
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"foo@bar.com"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
operator|.
name|byAccount
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|externalIdCache
operator|.
name|put
argument_list|(
name|firstState
argument_list|,
name|allFromGit
argument_list|(
name|firstState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ignoresInvalidExternalId ()
specifier|public
name|void
name|ignoresInvalidExternalId
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|firstState
init|=
name|insertExternalId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|head
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|ALL_USERS
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ExternalIdTestUtil
operator|.
name|insertExternalIdWithKeyThatDoesntMatchNoteId
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
operator|new
name|PersonIdent
argument_list|(
literal|"foo"
argument_list|,
literal|"foo@bar.com"
argument_list|)
argument_list|,
name|Account
operator|.
name|id
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|head
operator|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
block|}
name|externalIdCache
operator|.
name|put
argument_list|(
name|firstState
argument_list|,
name|allFromGit
argument_list|(
name|firstState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|handlesTreePrefixesInDifferentialReload ()
specifier|public
name|void
name|handlesTreePrefixesInDifferentialReload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create more than 256 notes (NoteMap's current sharding limit) and check that we really have
comment|// created a situation where NoteNames are sharded.
name|ObjectId
name|oldState
init|=
name|inserExternalIds
argument_list|(
literal|257
argument_list|)
decl_stmt|;
name|assertAllFilesHaveSlashesInPath
argument_list|()
expr_stmt|;
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|externalIdCache
operator|.
name|put
argument_list|(
name|oldState
argument_list|,
name|allFromGit
argument_list|(
name|oldState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|handlesReshard ()
specifier|public
name|void
name|handlesReshard
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create 256 notes (NoteMap's current sharding limit) and check that we are not yet sharding
name|ObjectId
name|oldState
init|=
name|inserExternalIds
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|assertNoFilesHaveSlashesInPath
argument_list|()
expr_stmt|;
comment|// Create one more external ID and then have the Loader compute the new state
name|ObjectId
name|head
init|=
name|insertExternalId
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|assertAllFilesHaveSlashesInPath
argument_list|()
expr_stmt|;
comment|// NoteMap resharded
name|externalIdCache
operator|.
name|put
argument_list|(
name|oldState
argument_list|,
name|allFromGit
argument_list|(
name|oldState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|head
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|allFromGit
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|externalIdReaderSpy
argument_list|)
expr_stmt|;
block|}
DECL|method|createLoader (boolean allowPartial)
specifier|private
name|ExternalIdCacheLoader
name|createLoader
parameter_list|(
name|boolean
name|allowPartial
parameter_list|)
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"cache"
argument_list|,
literal|"external_ids_map"
argument_list|,
literal|"enablePartialReloads"
argument_list|,
name|allowPartial
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExternalIdCacheLoader
argument_list|(
name|repoManager
argument_list|,
name|ALL_USERS
argument_list|,
name|externalIdReaderSpy
argument_list|,
name|Providers
operator|.
name|of
argument_list|(
name|externalIdCache
argument_list|)
argument_list|,
operator|new
name|DisabledMetricMaker
argument_list|()
argument_list|,
name|cfg
argument_list|)
return|;
block|}
DECL|method|allFromGit (ObjectId revision)
specifier|private
name|AllExternalIds
name|allFromGit
parameter_list|(
name|ObjectId
name|revision
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|AllExternalIds
operator|.
name|create
argument_list|(
name|externalIdReader
operator|.
name|all
argument_list|(
name|revision
argument_list|)
argument_list|)
return|;
block|}
DECL|method|inserExternalIds (int numberOfIdsToInsert)
specifier|private
name|ObjectId
name|inserExternalIds
parameter_list|(
name|int
name|numberOfIdsToInsert
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|oldState
init|=
literal|null
decl_stmt|;
comment|// Create more than 256 notes (NoteMap's current sharding limit) and check that we really have
comment|// created a situation where NoteNames are sharded.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIdsToInsert
condition|;
name|i
operator|++
control|)
block|{
name|oldState
operator|=
name|insertExternalId
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|oldState
return|;
block|}
DECL|method|insertExternalId (int key, int accountId)
specifier|private
name|ObjectId
name|insertExternalId
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|accountId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performExternalIdUpdate
argument_list|(
name|u
lambda|->
block|{
try|try
block|{
name|u
operator|.
name|insert
argument_list|(
name|externalId
argument_list|(
name|key
argument_list|,
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|modifyExternalId (ExternalId oldId, ExternalId newId)
specifier|private
name|ObjectId
name|modifyExternalId
parameter_list|(
name|ExternalId
name|oldId
parameter_list|,
name|ExternalId
name|newId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performExternalIdUpdate
argument_list|(
name|u
lambda|->
block|{
try|try
block|{
name|u
operator|.
name|replace
argument_list|(
name|oldId
argument_list|,
name|newId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|deleteExternalId (int key, int accountId)
specifier|private
name|ObjectId
name|deleteExternalId
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|accountId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performExternalIdUpdate
argument_list|(
name|u
lambda|->
name|u
operator|.
name|delete
argument_list|(
name|externalId
argument_list|(
name|key
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|externalId (int key, int accountId)
specifier|private
name|ExternalId
name|externalId
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|accountId
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|create
argument_list|(
literal|"fooschema"
argument_list|,
literal|"bar"
operator|+
name|key
argument_list|,
name|Account
operator|.
name|id
argument_list|(
name|accountId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|performExternalIdUpdate (Consumer<ExternalIdNotes> update)
specifier|private
name|ObjectId
name|performExternalIdUpdate
parameter_list|(
name|Consumer
argument_list|<
name|ExternalIdNotes
argument_list|>
name|update
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|ALL_USERS
argument_list|)
init|)
block|{
name|PersonIdent
name|updater
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Foo bar"
argument_list|,
literal|"foo@bar.com"
argument_list|)
decl_stmt|;
name|ExternalIdNotes
name|extIdNotes
init|=
name|ExternalIdNotes
operator|.
name|loadNoCacheUpdate
argument_list|(
name|ALL_USERS
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|update
operator|.
name|accept
argument_list|(
name|extIdNotes
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
literal|null
argument_list|,
name|repo
argument_list|)
init|)
block|{
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|updater
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|updater
argument_list|)
expr_stmt|;
return|return
name|extIdNotes
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|assertAllFilesHaveSlashesInPath ()
specifier|private
name|void
name|assertAllFilesHaveSlashesInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|allFilesInExternalIdRef
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|f
lambda|->
name|f
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoFilesHaveSlashesInPath ()
specifier|private
name|void
name|assertNoFilesHaveSlashesInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|allFilesInExternalIdRef
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|f
lambda|->
name|f
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|allFilesInExternalIdRef ()
specifier|private
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|allFilesInExternalIdRef
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|ALL_USERS
argument_list|)
init|;
name|TreeWalk
name|treeWalk
operator|=
operator|new
name|TreeWalk
argument_list|(
name|repo
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|treeWalk
operator|.
name|reset
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|treeWalk
operator|.
name|setRecursive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|allPaths
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
while|while
condition|(
name|treeWalk
operator|.
name|next
argument_list|()
condition|)
block|{
name|allPaths
operator|.
name|add
argument_list|(
name|treeWalk
operator|.
name|getPathString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|allPaths
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

