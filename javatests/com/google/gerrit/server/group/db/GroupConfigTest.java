begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|GroupConfigTest
specifier|public
class|class
name|GroupConfigTest
block|{
DECL|field|expectedException
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|repository
specifier|private
name|Repository
name|repository
decl_stmt|;
DECL|field|testRepository
specifier|private
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepository
decl_stmt|;
DECL|field|groupUuid
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"users-XYZ"
argument_list|)
decl_stmt|;
DECL|field|groupName
specifier|private
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
DECL|field|groupId
specifier|private
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
literal|123
argument_list|)
decl_stmt|;
DECL|field|auditLogFormatter
specifier|private
specifier|final
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"server-id"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|repository
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"Test Repository"
argument_list|)
argument_list|)
expr_stmt|;
name|testRepository
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameOfNewGroupMustNotBeNull ()
specifier|public
name|void
name|nameOfNewGroupMustNotBeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|nameOfNewGroupMustNotBeEmpty ()
specifier|public
name|void
name|nameOfNewGroupMustNotBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|idOfNewGroupMustNotBeNegative ()
specifier|public
name|void
name|idOfNewGroupMustNotBeNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setId
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"ID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ownerUuidOfNewGroupMustNotBeNull ()
specifier|public
name|void
name|ownerUuidOfNewGroupMustNotBeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ownerUuidOfNewGroupMustNotBeEmpty ()
specifier|public
name|void
name|ownerUuidOfNewGroupMustNotBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|nameInConfigMayBeUndefined ()
specifier|public
name|void
name|nameInConfigMayBeUndefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameInConfigMayBeEmpty ()
specifier|public
name|void
name|nameInConfigMayBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idInConfigMustBeDefined ()
specifier|public
name|void
name|idInConfigMustBeDefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"ID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idInConfigMustNotBeNegative ()
specifier|public
name|void
name|idInConfigMustNotBeNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = -5\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"ID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerUuidInConfigMustBeDefined ()
specifier|public
name|void
name|ownerUuidInConfigMustBeDefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = 42\n"
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameCannotBeUpdatedToNull ()
specifier|public
name|void
name|nameCannotBeUpdatedToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|nameCannotBeUpdatedToEmptyString ()
specifier|public
name|void
name|nameCannotBeUpdatedToEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ownerUuidCannotBeUpdatedToNull ()
specifier|public
name|void
name|ownerUuidCannotBeUpdatedToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ownerUuidCannotBeUpdatedToEmptyString ()
specifier|public
name|void
name|ownerUuidCannotBeUpdatedToEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|expectedException
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group users-XYZ"
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPrefilledGroupCreationBuilder ()
specifier|private
name|InternalGroupCreation
operator|.
name|Builder
name|getPrefilledGroupCreationBuilder
parameter_list|()
block|{
return|return
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
return|;
block|}
DECL|method|populateGroupConfig (AccountGroup.UUID uuid, String fileContent)
specifier|private
name|void
name|populateGroupConfig
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|fileContent
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Prepopulate group.config"
argument_list|)
operator|.
name|add
argument_list|(
name|GroupConfig
operator|.
name|GROUP_CONFIG_FILE
argument_list|,
name|fileContent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|createMetaDataUpdate ()
specifier|private
name|MetaDataUpdate
name|createMetaDataUpdate
parameter_list|()
block|{
name|TimeZone
name|tz
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
decl_stmt|;
name|PersonIdent
name|serverIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Gerrit Server"
argument_list|,
literal|"noreply@gerritcodereview.com"
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|MetaDataUpdate
name|metaDataUpdate
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"Test Repository"
argument_list|)
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
return|return
name|metaDataUpdate
return|;
block|}
block|}
end_class

end_unit

