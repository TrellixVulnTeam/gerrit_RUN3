begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|OptionalSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|testing
operator|.
name|InternalGroupSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|OptionalSubject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Month
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GroupConfigTest
specifier|public
class|class
name|GroupConfigTest
extends|extends
name|GerritBaseTests
block|{
DECL|field|projectName
specifier|private
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|repository
specifier|private
name|Repository
name|repository
decl_stmt|;
DECL|field|testRepository
specifier|private
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepository
decl_stmt|;
DECL|field|groupUuid
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"users-XYZ"
argument_list|)
decl_stmt|;
DECL|field|groupName
specifier|private
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
DECL|field|groupId
specifier|private
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
literal|123
argument_list|)
decl_stmt|;
DECL|field|auditLogFormatter
specifier|private
specifier|final
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"server-id"
argument_list|)
decl_stmt|;
DECL|field|timeZone
specifier|private
specifier|final
name|TimeZone
name|timeZone
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|projectName
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"Test Repository"
argument_list|)
expr_stmt|;
name|repository
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"Test Repository"
argument_list|)
argument_list|)
expr_stmt|;
name|testRepository
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedGroupUuidIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedGroupUuidIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|groupUuid
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedNameIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedNameIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|nameKey
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameOfGroupUpdateOverridesGroupCreation ()
specifier|public
name|void
name|nameOfGroupUpdateOverridesGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|NameKey
name|anotherName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
name|anotherName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|nameKey
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|anotherName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameOfNewGroupMustNotBeEmpty ()
specifier|public
name|void
name|nameOfNewGroupMustNotBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|nameOfNewGroupMustNotBeNull ()
specifier|public
name|void
name|nameOfNewGroupMustNotBeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|specifiedIdIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedIdIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idOfNewGroupMustNotBeNegative ()
specifier|public
name|void
name|idOfNewGroupMustNotBeNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setId
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"ID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|descriptionDefaultsToNull ()
specifier|public
name|void
name|descriptionDefaultsToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedDescriptionIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedDescriptionIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|description
init|=
literal|"This is a test group."
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyDescriptionForNewGroupIsIgnored ()
specifier|public
name|void
name|emptyDescriptionForNewGroupIsIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidDefaultsToGroupItself ()
specifier|public
name|void
name|ownerGroupUuidDefaultsToGroupItself
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedOwnerGroupUuidIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedOwnerGroupUuidIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|ownerGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"anotherOwnerUuid"
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
name|ownerGroupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|ownerGroupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidOfNewGroupMustNotBeNull ()
specifier|public
name|void
name|ownerGroupUuidOfNewGroupMustNotBeNull
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidOfNewGroupMustNotBeEmpty ()
specifier|public
name|void
name|ownerGroupUuidOfNewGroupMustNotBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|visibleToAllDefaultsToFalse ()
specifier|public
name|void
name|visibleToAllDefaultsToFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|visibleToAll
argument_list|()
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedVisibleToAllIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedVisibleToAllIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setVisibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|visibleToAll
argument_list|()
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnDefaultsToNow ()
specifier|public
name|void
name|createdOnDefaultsToNow
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Git timestamps are only precise to the second.
name|Timestamp
name|testStart
init|=
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|createdOn
argument_list|()
operator|.
name|isAtLeast
argument_list|(
name|testStart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedCreatedOnIsRespectedForNewGroup ()
specifier|public
name|void
name|specifiedCreatedOnIsRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|createdOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|11
argument_list|)
operator|.
name|atTime
argument_list|(
literal|13
argument_list|,
literal|44
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setUpdatedOn
argument_list|(
name|createdOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|createdOn
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedMembersAreRespectedForNewGroup ()
specifier|public
name|void
name|specifiedMembersAreRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|member1
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|member2
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|member1
argument_list|,
name|member2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|member1
argument_list|,
name|member2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedSubgroupsAreRespectedForNewGroup ()
specifier|public
name|void
name|specifiedSubgroupsAreRespectedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|subgroup1
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroup1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup2
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroup2"
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|subgroup1
argument_list|,
name|subgroup2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|subgroup1
argument_list|,
name|subgroup2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameInConfigMayBeUndefined ()
specifier|public
name|void
name|nameInConfigMayBeUndefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameInConfigMayBeEmpty ()
specifier|public
name|void
name|nameInConfigMayBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idInConfigMustBeDefined ()
specifier|public
name|void
name|idInConfigMustBeDefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"ID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idInConfigMustNotBeNegative ()
specifier|public
name|void
name|idInConfigMustNotBeNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = -5\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"ID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionInConfigMayBeUndefined ()
specifier|public
name|void
name|descriptionInConfigMayBeUndefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionInConfigMayBeEmpty ()
specifier|public
name|void
name|descriptionInConfigMayBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tdescription=\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidInConfigMustBeDefined ()
specifier|public
name|void
name|ownerGroupUuidInConfigMustBeDefined
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname = users\n\tid = 42\n"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersFileNeedNotExist ()
specifier|public
name|void
name|membersFileNeedNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersFileMayBeEmpty ()
specifier|public
name|void
name|membersFileMayBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateSubgroupsFile
argument_list|(
name|groupUuid
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersFileMayContainOnlyWhitespace ()
specifier|public
name|void
name|membersFileMayContainOnlyWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateMembersFile
argument_list|(
name|groupUuid
argument_list|,
literal|"\n\t\n\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersFileMayUseAnyLineBreakCharacters ()
specifier|public
name|void
name|membersFileMayUseAnyLineBreakCharacters
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateMembersFile
argument_list|(
name|groupUuid
argument_list|,
literal|"1\n2\n3\r4\r\n5\u20296"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|containsExactly
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersFileMustContainIntegers ()
specifier|public
name|void
name|membersFileMustContainIntegers
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateMembersFile
argument_list|(
name|groupUuid
argument_list|,
literal|"One"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid file members"
argument_list|)
expr_stmt|;
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersFileUsesLineBreaksToSeparateMembers ()
specifier|public
name|void
name|membersFileUsesLineBreaksToSeparateMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateMembersFile
argument_list|(
name|groupUuid
argument_list|,
literal|"1\t2"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid file members"
argument_list|)
expr_stmt|;
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsFileNeedNotExist ()
specifier|public
name|void
name|subgroupsFileNeedNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsFileMayBeEmpty ()
specifier|public
name|void
name|subgroupsFileMayBeEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateMembersFile
argument_list|(
name|groupUuid
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsFileMayContainOnlyWhitespace ()
specifier|public
name|void
name|subgroupsFileMayContainOnlyWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateSubgroupsFile
argument_list|(
name|groupUuid
argument_list|,
literal|"\n\t\n\n"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsFileMayUseAnyLineBreakCharacters ()
specifier|public
name|void
name|subgroupsFileMayUseAnyLineBreakCharacters
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateSubgroupsFile
argument_list|(
name|groupUuid
argument_list|,
literal|"1\n2\n3\r4\r\n5\u20296"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"1"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"2"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"3"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"4"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"5"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsFileMayContainSubgroupsWithWhitespaceInUuid ()
specifier|public
name|void
name|subgroupsFileMayContainSubgroupsWithWhitespaceInUuid
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateSubgroupsFile
argument_list|(
name|groupUuid
argument_list|,
literal|"1\t2 3"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"1\t2 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsFileUsesLineBreaksToSeparateSubgroups ()
specifier|public
name|void
name|subgroupsFileUsesLineBreaksToSeparateSubgroups
parameter_list|()
throws|throws
name|Exception
block|{
name|populateGroupConfig
argument_list|(
name|groupUuid
argument_list|,
literal|"[group]\n\tname=users\n\tid = 42\n\townerGroupUuid = owners\n"
argument_list|)
expr_stmt|;
name|populateSubgroupsFile
argument_list|(
name|groupUuid
argument_list|,
literal|"1\t2\n3"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"1\t2"
argument_list|)
argument_list|,
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameCanBeUpdated ()
specifier|public
name|void
name|nameCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|newName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"New name"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
name|newName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|nameKey
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameCannotBeUpdatedToNull ()
specifier|public
name|void
name|nameCannotBeUpdatedToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|nameCannotBeUpdatedToEmptyString ()
specifier|public
name|void
name|nameCannotBeUpdatedToEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Name of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|nameCanBeUpdatedToEmptyStringIfExplicitlySpecified ()
specifier|public
name|void
name|nameCanBeUpdatedToEmptyStringIfExplicitlySpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|emptyName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setAllowSaveEmptyName
argument_list|()
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
name|emptyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|nameKey
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|emptyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionCanBeUpdated ()
specifier|public
name|void
name|descriptionCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|String
name|newDescription
init|=
literal|"New description"
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
name|newDescription
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|newDescription
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionCanBeRemoved ()
specifier|public
name|void
name|descriptionCanBeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidCanBeUpdated ()
specifier|public
name|void
name|ownerGroupUuidCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|newOwnerGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"New owner"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
name|newOwnerGroupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|newOwnerGroupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidCannotBeUpdatedToNull ()
specifier|public
name|void
name|ownerGroupUuidCannotBeUpdatedToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidCannotBeUpdatedToEmptyString ()
specifier|public
name|void
name|ownerGroupUuidCannotBeUpdatedToEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|exception
operator|.
name|expectCause
argument_list|(
name|instanceOf
argument_list|(
name|ConfigInvalidException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Owner UUID of the group "
operator|+
name|groupUuid
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|visibleToAllCanBeUpdated ()
specifier|public
name|void
name|visibleToAllCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|boolean
name|oldVisibleAll
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|isVisibleToAll
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setVisibleToAll
argument_list|(
operator|!
name|oldVisibleAll
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|visibleToAll
argument_list|()
operator|.
name|isEqualTo
argument_list|(
operator|!
name|oldVisibleAll
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnIsNotAffectedByFurtherUpdates ()
specifier|public
name|void
name|createdOnIsNotAffectedByFurtherUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|createdOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|MAY
argument_list|,
literal|11
argument_list|)
operator|.
name|atTime
argument_list|(
literal|13
argument_list|,
literal|44
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|updatedOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|12
argument_list|)
operator|.
name|atTime
argument_list|(
literal|10
argument_list|,
literal|21
argument_list|,
literal|49
argument_list|)
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|initialGroupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setUpdatedOn
argument_list|(
name|createdOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|initialGroupUpdate
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|laterGroupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
name|updatedOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|updateGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|laterGroupUpdate
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|createdOn
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|reloadedGroup
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|reloadedGroup
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|createdOn
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersCanBeAdded ()
specifier|public
name|void
name|membersCanBeAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|member1
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|member2
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|member1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|members
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|member2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|member1
argument_list|,
name|member2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersCanBeDeleted ()
specifier|public
name|void
name|membersCanBeDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|member1
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|member2
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|member1
argument_list|,
name|member2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|Sets
operator|.
name|difference
argument_list|(
name|members
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|member1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|member2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsCanBeAdded ()
specifier|public
name|void
name|subgroupsCanBeAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup1
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroups1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup2
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroups2"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|subgroup1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|subgroups
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|subgroup2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|subgroup1
argument_list|,
name|subgroup2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsCanBeDeleted ()
specifier|public
name|void
name|subgroupsCanBeDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup1
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroups1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroup2
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroups2"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|subgroup1
argument_list|,
name|subgroup2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|members
lambda|->
name|Sets
operator|.
name|difference
argument_list|(
name|members
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|subgroup1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|subgroups
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|subgroup2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdGroupIsLoadedAutomatically ()
specifier|public
name|void
name|createdGroupIsLoadedAutomatically
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|group
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|loadedNewGroupWithMandatoryPropertiesDoesNotChangeOnReload ()
specifier|public
name|void
name|loadedNewGroupWithMandatoryPropertiesDoesNotChangeOnReload
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|createdGroup
init|=
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|reloadedGroup
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|createdGroup
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|reloadedGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|loadedNewGroupWithAllPropertiesDoesNotChangeOnReload ()
specifier|public
name|void
name|loadedNewGroupWithAllPropertiesDoesNotChangeOnReload
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A test group"
argument_list|)
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"another owner"
argument_list|)
argument_list|)
operator|.
name|setVisibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|92900892
argument_list|)
argument_list|)
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroup"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|createdGroup
init|=
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|reloadedGroup
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|createdGroup
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|reloadedGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|loadedGroupAfterUpdatesForAllPropertiesDoesNotChangeOnReload ()
specifier|public
name|void
name|loadedGroupAfterUpdatesForAllPropertiesDoesNotChangeOnReload
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A test group"
argument_list|)
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"another owner"
argument_list|)
argument_list|)
operator|.
name|setVisibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|92900892
argument_list|)
argument_list|)
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroup"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|updatedGroup
init|=
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|reloadedGroup
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedGroup
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|reloadedGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|loadedGroupWithAllPropertiesAndUpdateOfSinglePropertyDoesNotChangeOnReload ()
specifier|public
name|void
name|loadedGroupWithAllPropertiesAndUpdateOfSinglePropertyDoesNotChangeOnReload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a group with all properties set.
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|initialGroupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A test group"
argument_list|)
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"another owner"
argument_list|)
argument_list|)
operator|.
name|setVisibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|92900892
argument_list|)
argument_list|)
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroup"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|initialGroupUpdate
argument_list|)
expr_stmt|;
comment|// Only update one of the properties.
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|updatedGroup
init|=
name|updateGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|reloadedGroup
init|=
name|loadGroup
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedGroup
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|reloadedGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupConfigMayBeReusedForFurtherUpdates ()
specifier|public
name|void
name|groupConfigMayBeReusedForFurtherUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|name
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Robots"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate1
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|String
name|description
init|=
literal|"Test group for robots"
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate2
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|nameKey
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|description
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newGroupIsRepresentedByARefPointingToARootCommit ()
specifier|public
name|void
name|newGroupIsRepresentedByARefPointingToARootCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|Ref
name|ref
init|=
name|repository
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
try|try
init|(
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|repository
argument_list|)
init|)
block|{
name|RevCommit
name|revCommit
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|updatedGroupIsRepresentedByARefPointingToACommitSequence ()
specifier|public
name|void
name|updatedGroupIsRepresentedByARefPointingToACommitSequence
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterCreation
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|commitAfterCreation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
operator|.
name|getParents
argument_list|()
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|containsExactly
argument_list|(
name|commitAfterCreation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForEmptyUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForEmptyUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForPureUpdatedOnUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForPureUpdatedOnUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|Timestamp
name|updatedOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|3017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|12
argument_list|)
operator|.
name|atTime
argument_list|(
literal|10
argument_list|,
literal|21
argument_list|,
literal|49
argument_list|)
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setUpdatedOn
argument_list|(
name|updatedOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForRedundantNameUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForRedundantNameUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
name|groupName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForRedundantDescriptionUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForRedundantDescriptionUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A test group"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForRedundantVisibleToAllUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForRedundantVisibleToAllUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setVisibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForRedundantOwnerGroupUuidUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForRedundantOwnerGroupUuidUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"Another owner"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForRedundantMemberUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForRedundantMemberUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|members
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedForRedundantSubgroupsUpdate ()
specifier|public
name|void
name|newCommitIsNotCreatedForRedundantSubgroupsUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|subgroups
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"subgroup"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterUpdate
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedWhenCommittingGroupCreationTwice ()
specifier|public
name|void
name|newCommitIsNotCreatedWhenCommittingGroupCreationTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeSecondCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterSecondCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterSecondCommit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeSecondCommit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newCommitIsNotCreatedWhenCommittingGroupUpdateTwice ()
specifier|public
name|void
name|newCommitIsNotCreatedWhenCommittingGroupUpdateTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A test group"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|RevCommit
name|commitBeforeSecondCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterSecondCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitAfterSecondCommit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBeforeSecondCommit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitTimeMatchesDefaultCreatedOnOfNewGroup ()
specifier|public
name|void
name|commitTimeMatchesDefaultCreatedOnOfNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Git timestamps are only precise to the second.
name|long
name|testStartAsSecondsSinceEpoch
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitTime
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
operator|(
name|int
operator|)
name|testStartAsSecondsSinceEpoch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitTimeMatchesSpecifiedCreatedOnOfNewGroup ()
specifier|public
name|void
name|commitTimeMatchesSpecifiedCreatedOnOfNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Git timestamps are only precise to the second.
name|long
name|createdOnAsSecondsSinceEpoch
init|=
literal|9082093
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setUpdatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|createdOnAsSecondsSinceEpoch
operator|*
literal|1000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitTime
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createdOnAsSecondsSinceEpoch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timestampOfCommitterMatchesSpecifiedCreatedOnOfNewGroup ()
specifier|public
name|void
name|timestampOfCommitterMatchesSpecifiedCreatedOnOfNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|committerTimestamp
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|13
argument_list|)
operator|.
name|atTime
argument_list|(
literal|15
argument_list|,
literal|5
argument_list|,
literal|27
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
name|Month
operator|.
name|MARCH
argument_list|,
literal|11
argument_list|)
operator|.
name|atTime
argument_list|(
literal|23
argument_list|,
literal|49
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
name|createdOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|PersonIdent
name|committerIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Jane"
argument_list|,
literal|"Jane@gerritcodereview.com"
argument_list|,
name|committerTimestamp
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|committerIdent
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getRawOffset
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|timeZone
operator|.
name|getRawOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timestampOfAuthorMatchesSpecifiedCreatedOnOfNewGroup ()
specifier|public
name|void
name|timestampOfAuthorMatchesSpecifiedCreatedOnOfNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|authorTimestamp
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|13
argument_list|)
operator|.
name|atTime
argument_list|(
literal|15
argument_list|,
literal|5
argument_list|,
literal|27
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
name|Month
operator|.
name|MARCH
argument_list|,
literal|11
argument_list|)
operator|.
name|atTime
argument_list|(
literal|23
argument_list|,
literal|49
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
name|createdOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|PersonIdent
name|authorIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Jane"
argument_list|,
literal|"Jane@gerritcodereview.com"
argument_list|,
name|authorTimestamp
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getRawOffset
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|timeZone
operator|.
name|getRawOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitTimeMatchesDefaultUpdatedOnOfUpdatedGroup ()
specifier|public
name|void
name|commitTimeMatchesDefaultUpdatedOnOfUpdatedGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Git timestamps are only precise to the second.
name|long
name|testStartAsSecondsSinceEpoch
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitTime
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
operator|(
name|int
operator|)
name|testStartAsSecondsSinceEpoch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitTimeMatchesSpecifiedUpdatedOnOfUpdatedGroup ()
specifier|public
name|void
name|commitTimeMatchesSpecifiedUpdatedOnOfUpdatedGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Git timestamps are only precise to the second.
name|long
name|updatedOnAsSecondsSinceEpoch
init|=
literal|9082093
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|updatedOnAsSecondsSinceEpoch
operator|*
literal|1000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitTime
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|updatedOnAsSecondsSinceEpoch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timestampOfCommitterMatchesSpecifiedUpdatedOnOfUpdatedGroup ()
specifier|public
name|void
name|timestampOfCommitterMatchesSpecifiedUpdatedOnOfUpdatedGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|committerTimestamp
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|13
argument_list|)
operator|.
name|atTime
argument_list|(
literal|15
argument_list|,
literal|5
argument_list|,
literal|27
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|updatedOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
name|Month
operator|.
name|MARCH
argument_list|,
literal|11
argument_list|)
operator|.
name|atTime
argument_list|(
literal|23
argument_list|,
literal|49
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
name|updatedOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|PersonIdent
name|committerIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Jane"
argument_list|,
literal|"Jane@gerritcodereview.com"
argument_list|,
name|committerTimestamp
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|committerIdent
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|updatedOn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getRawOffset
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|timeZone
operator|.
name|getRawOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timestampOfAuthorMatchesSpecifiedUpdatedOnOfUpdatedGroup ()
specifier|public
name|void
name|timestampOfAuthorMatchesSpecifiedUpdatedOnOfUpdatedGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Timestamp
name|authorTimestamp
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2017
argument_list|,
name|Month
operator|.
name|DECEMBER
argument_list|,
literal|13
argument_list|)
operator|.
name|atTime
argument_list|(
literal|15
argument_list|,
literal|5
argument_list|,
literal|27
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|updatedOn
init|=
name|toTimestamp
argument_list|(
name|LocalDate
operator|.
name|of
argument_list|(
literal|2016
argument_list|,
name|Month
operator|.
name|MARCH
argument_list|,
literal|11
argument_list|)
operator|.
name|atTime
argument_list|(
literal|23
argument_list|,
literal|49
argument_list|,
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|setUpdatedOn
argument_list|(
name|updatedOn
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|PersonIdent
name|authorIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Jane"
argument_list|,
literal|"Jane@gerritcodereview.com"
argument_list|,
name|authorTimestamp
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|updatedOn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getRawOffset
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|timeZone
operator|.
name|getRawOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|refStateOfLoadedGroupIsPopulatedWithCommitSha1 ()
specifier|public
name|void
name|refStateOfLoadedGroupIsPopulatedWithCommitSha1
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|loadGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|refState
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|revCommit
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupCanBeLoadedAtASpecificRevision ()
specifier|public
name|void
name|groupCanBeLoadedAtASpecificRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|firstName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Bots"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
name|firstName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|)
expr_stmt|;
name|RevCommit
name|commitAfterUpdate1
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Robots"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|)
expr_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroupSnapshot
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupUuid
argument_list|,
name|commitAfterUpdate1
operator|.
name|copy
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
decl_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|nameKey
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|firstName
argument_list|)
expr_stmt|;
name|assertThatGroup
argument_list|(
name|group
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|refState
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|commitAfterUpdate1
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfNewGroupWithoutMembersOrSubgroupsContainsNoFooters ()
specifier|public
name|void
name|commitMessageOfNewGroupWithoutMembersOrSubgroupsContainsNoFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfNewGroupWithAdditionalNameSpecificationContainsNoFooters ()
specifier|public
name|void
name|commitMessageOfNewGroupWithAdditionalNameSpecificationContainsNoFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Another name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfNewGroupWithMembersContainsFooters ()
specifier|public
name|void
name|commitMessageOfNewGroupWithMembersContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
name|account13
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"John"
argument_list|)
decl_stmt|;
name|Account
name|account7
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"Jane"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
argument_list|>
name|accounts
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
argument_list|,
name|account7
argument_list|)
decl_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|accounts
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"server-id"
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
operator|.
name|getId
argument_list|()
argument_list|,
name|account7
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create group\n\nAdd: Jane<7@server-id>\nAdd: John<13@server-id>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfNewGroupWithSubgroupsContainsFooters ()
specifier|public
name|void
name|commitMessageOfNewGroupWithSubgroupsContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupDescription
operator|.
name|Basic
name|group1
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"129403"
argument_list|)
argument_list|,
literal|"Bots"
argument_list|)
decl_stmt|;
name|GroupDescription
operator|.
name|Basic
name|group2
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"8903493"
argument_list|)
argument_list|,
literal|"Verifiers"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|GroupDescription
operator|.
name|Basic
argument_list|>
name|groups
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
decl_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|groups
argument_list|,
literal|"serverId"
argument_list|)
decl_stmt|;
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|group2
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create group\n\nAdd-group: Bots<129403>\nAdd-group: Verifiers<8903493>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfMemberAdditionContainsFooters ()
specifier|public
name|void
name|commitMessageOfMemberAdditionContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
name|account13
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"John"
argument_list|)
decl_stmt|;
name|Account
name|account7
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"Jane"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
argument_list|>
name|accounts
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
argument_list|,
name|account7
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|accounts
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"GerritServer1"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
operator|.
name|getId
argument_list|()
argument_list|,
name|account7
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nAdd: Jane<7@GerritServer1>\nAdd: John<13@GerritServer1>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfMemberRemovalContainsFooters ()
specifier|public
name|void
name|commitMessageOfMemberRemovalContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
name|account13
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"John"
argument_list|)
decl_stmt|;
name|Account
name|account7
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"Jane"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
argument_list|>
name|accounts
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
argument_list|,
name|account7
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|accounts
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
literal|"server-id"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
operator|.
name|getId
argument_list|()
argument_list|,
name|account7
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account7
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nRemove: John<13@server-id>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfSubgroupAdditionContainsFooters ()
specifier|public
name|void
name|commitMessageOfSubgroupAdditionContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupDescription
operator|.
name|Basic
name|group1
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"129403"
argument_list|)
argument_list|,
literal|"Bots"
argument_list|)
decl_stmt|;
name|GroupDescription
operator|.
name|Basic
name|group2
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"8903493"
argument_list|)
argument_list|,
literal|"Verifiers"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|GroupDescription
operator|.
name|Basic
argument_list|>
name|groups
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|groups
argument_list|,
literal|"serverId"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|group2
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nAdd-group: Bots<129403>\nAdd-group: Verifiers<8903493>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfSubgroupRemovalContainsFooters ()
specifier|public
name|void
name|commitMessageOfSubgroupRemovalContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupDescription
operator|.
name|Basic
name|group1
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"129403"
argument_list|)
argument_list|,
literal|"Bots"
argument_list|)
decl_stmt|;
name|GroupDescription
operator|.
name|Basic
name|group2
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"8903493"
argument_list|)
argument_list|,
literal|"Verifiers"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|GroupDescription
operator|.
name|Basic
argument_list|>
name|groups
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|groups
argument_list|,
literal|"serverId"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|group2
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nRemove-group: Verifiers<8903493>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOfGroupRenameContainsFooters ()
specifier|public
name|void
name|commitMessageOfGroupRenameContainsFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Old name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"New name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n\nRename from Old name to New name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageFootersCanBeMixed ()
specifier|public
name|void
name|commitMessageFootersCanBeMixed
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
name|account13
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"John"
argument_list|)
decl_stmt|;
name|Account
name|account7
init|=
name|createAccount
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"Jane"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
argument_list|>
name|accounts
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
argument_list|,
name|account7
argument_list|)
decl_stmt|;
name|GroupDescription
operator|.
name|Basic
name|group1
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"129403"
argument_list|)
argument_list|,
literal|"Bots"
argument_list|)
decl_stmt|;
name|GroupDescription
operator|.
name|Basic
name|group2
init|=
name|createGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"8903493"
argument_list|)
argument_list|,
literal|"Verifiers"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|GroupDescription
operator|.
name|Basic
argument_list|>
name|groups
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
argument_list|,
name|group2
argument_list|)
decl_stmt|;
name|createArbitraryGroup
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|accounts
argument_list|,
name|groups
argument_list|,
literal|"serverId"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate1
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Old name"
argument_list|)
argument_list|)
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account7
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group2
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate1
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate2
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"New name"
argument_list|)
argument_list|)
operator|.
name|setMemberModification
argument_list|(
name|members
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|account13
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSubgroupModification
argument_list|(
name|subgroups
lambda|->
name|ImmutableSet
operator|.
name|of
argument_list|(
name|group1
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate2
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|RevCommit
name|revCommit
init|=
name|getLatestCommitForGroup
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update group\n"
operator|+
literal|"\n"
operator|+
literal|"Add-group: Bots<129403>\n"
operator|+
literal|"Add: John<13@serverId>\n"
operator|+
literal|"Remove-group: Verifiers<8903493>\n"
operator|+
literal|"Remove: Jane<7@serverId>\n"
operator|+
literal|"Rename from Old name to New name"
argument_list|)
expr_stmt|;
block|}
DECL|method|toTimestamp (LocalDateTime localDateTime)
specifier|private
specifier|static
name|Timestamp
name|toTimestamp
parameter_list|(
name|LocalDateTime
name|localDateTime
parameter_list|)
block|{
return|return
name|Timestamp
operator|.
name|from
argument_list|(
name|localDateTime
operator|.
name|atZone
argument_list|(
name|ZoneId
operator|.
name|systemDefault
argument_list|()
argument_list|)
operator|.
name|toInstant
argument_list|()
argument_list|)
return|;
block|}
DECL|method|populateGroupConfig (AccountGroup.UUID uuid, String fileContent)
specifier|private
name|void
name|populateGroupConfig
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|fileContent
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Prepopulate group.config"
argument_list|)
operator|.
name|add
argument_list|(
name|GroupConfig
operator|.
name|GROUP_CONFIG_FILE
argument_list|,
name|fileContent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|populateMembersFile (AccountGroup.UUID uuid, String fileContent)
specifier|private
name|void
name|populateMembersFile
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|fileContent
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Prepopulate members"
argument_list|)
operator|.
name|add
argument_list|(
name|GroupConfig
operator|.
name|MEMBERS_FILE
argument_list|,
name|fileContent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|populateSubgroupsFile (AccountGroup.UUID uuid, String fileContent)
specifier|private
name|void
name|populateSubgroupsFile
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|fileContent
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Prepopulate subgroups"
argument_list|)
operator|.
name|add
argument_list|(
name|GroupConfig
operator|.
name|SUBGROUPS_FILE
argument_list|,
name|fileContent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|createArbitraryGroup (AccountGroup.UUID uuid)
specifier|private
name|void
name|createArbitraryGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getPrefilledGroupCreationBuilder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|uuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrefilledGroupCreationBuilder ()
specifier|private
name|InternalGroupCreation
operator|.
name|Builder
name|getPrefilledGroupCreationBuilder
parameter_list|()
block|{
return|return
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|groupName
argument_list|)
operator|.
name|setId
argument_list|(
name|groupId
argument_list|)
return|;
block|}
DECL|method|createGroup (InternalGroupCreation groupCreation)
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|createGroup
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
return|return
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
return|;
block|}
DECL|method|createGroup ( InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|createGroup
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
return|return
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
return|;
block|}
DECL|method|updateGroup ( AccountGroup.UUID uuid, InternalGroupUpdate groupUpdate)
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|updateGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|updateGroup
argument_list|(
name|uuid
argument_list|,
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
return|;
block|}
DECL|method|updateGroup ( AccountGroup.UUID uuid, InternalGroupUpdate groupUpdate, AuditLogFormatter auditLogFormatter)
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|updateGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|,
name|AuditLogFormatter
name|auditLogFormatter
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
return|return
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
return|;
block|}
DECL|method|loadGroup (AccountGroup.UUID uuid)
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|loadGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
return|return
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
return|;
block|}
DECL|method|commit (GroupConfig groupConfig)
specifier|private
name|void
name|commit
parameter_list|(
name|GroupConfig
name|groupConfig
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|()
init|)
block|{
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createMetaDataUpdate ()
specifier|private
name|MetaDataUpdate
name|createMetaDataUpdate
parameter_list|()
block|{
name|PersonIdent
name|serverIdent
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"Gerrit Server"
argument_list|,
literal|"noreply@gerritcodereview.com"
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|timeZone
argument_list|)
decl_stmt|;
name|MetaDataUpdate
name|metaDataUpdate
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"Test Repository"
argument_list|)
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
return|return
name|metaDataUpdate
return|;
block|}
DECL|method|getLatestCommitForGroup (AccountGroup.UUID uuid)
specifier|private
name|RevCommit
name|getLatestCommitForGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|IOException
block|{
name|Ref
name|ref
init|=
name|repository
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Precondition: Assumed that ref for group "
operator|+
name|uuid
operator|+
literal|" exists."
argument_list|)
operator|.
name|that
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
try|try
init|(
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|repository
argument_list|)
init|)
block|{
return|return
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|createAccount (Account.Id id, String name)
specifier|private
specifier|static
name|Account
name|createAccount
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Account
name|account
init|=
operator|new
name|Account
argument_list|(
name|id
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|account
operator|.
name|setFullName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
DECL|method|createGroup (AccountGroup.UUID uuid, String name)
specifier|private
specifier|static
name|GroupDescription
operator|.
name|Basic
name|createGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|GroupDescription
operator|.
name|Basic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AccountGroup
operator|.
name|UUID
name|getGroupUUID
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getEmailAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
DECL|method|assertThatGroup ( Optional<InternalGroup> loadedGroup)
specifier|private
specifier|static
name|OptionalSubject
argument_list|<
name|InternalGroupSubject
argument_list|,
name|InternalGroup
argument_list|>
name|assertThatGroup
parameter_list|(
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|loadedGroup
parameter_list|)
block|{
return|return
name|assertThat
argument_list|(
name|loadedGroup
argument_list|,
name|InternalGroupSubject
operator|::
name|assertThat
argument_list|)
return|;
block|}
block|}
end_class

end_unit

