begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|AccessSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PermissionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PermissionRuleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|ProjectAccessInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|Accounts
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListAccountsOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectWatchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountExternalIdInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|FieldDef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|FieldBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Accounts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|InternalAccountUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ManualRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|OneOffRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritServerTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|AbstractQueryAccountsTest
specifier|public
specifier|abstract
class|class
name|AbstractQueryAccountsTest
extends|extends
name|GerritServerTests
block|{
DECL|field|accounts
annotation|@
name|Inject
specifier|protected
name|Accounts
name|accounts
decl_stmt|;
DECL|field|accountsUpdate
annotation|@
name|Inject
annotation|@
name|ServerInitiated
specifier|protected
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdate
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Inject
specifier|protected
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|accountIndexer
annotation|@
name|Inject
specifier|protected
name|AccountIndexer
name|accountIndexer
decl_stmt|;
DECL|field|accountManager
annotation|@
name|Inject
specifier|protected
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|protected
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|serverIdent
annotation|@
name|Inject
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|anonymousUser
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUser
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|protected
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|protected
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
DECL|field|oneOffRequestContext
annotation|@
name|Inject
specifier|protected
name|OneOffRequestContext
name|oneOffRequestContext
decl_stmt|;
DECL|field|queryProvider
annotation|@
name|Inject
specifier|protected
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|allProjects
annotation|@
name|Inject
specifier|protected
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|allUsers
annotation|@
name|Inject
specifier|protected
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|protected
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|indexes
annotation|@
name|Inject
specifier|protected
name|AccountIndexCollection
name|indexes
decl_stmt|;
DECL|field|externalIds
annotation|@
name|Inject
specifier|protected
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|lifecycle
specifier|protected
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|injector
specifier|protected
name|Injector
name|injector
decl_stmt|;
DECL|field|currentUserInfo
specifier|protected
name|AccountInfo
name|currentUserInfo
decl_stmt|;
DECL|field|admin
specifier|protected
name|CurrentUser
name|admin
decl_stmt|;
DECL|method|createInjector ()
specifier|protected
specifier|abstract
name|Injector
name|createInjector
parameter_list|()
function_decl|;
annotation|@
name|Before
DECL|method|setUpInjector ()
specifier|public
name|void
name|setUpInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|injector
operator|=
name|createInjector
argument_list|()
expr_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|initAfterLifecycleStart
argument_list|()
expr_stmt|;
name|setUpDatabase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpDatabase ()
specifier|protected
name|void
name|setUpDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaCreator
operator|.
name|create
argument_list|()
expr_stmt|;
name|Account
operator|.
name|Id
name|adminId
init|=
name|createAccount
argument_list|(
literal|"admin"
argument_list|,
literal|"Administrator"
argument_list|,
literal|"admin@example.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|admin
operator|=
name|userFactory
operator|.
name|create
argument_list|(
name|adminId
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|adminId
argument_list|)
argument_list|)
expr_stmt|;
name|currentUserInfo
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|adminId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|initAfterLifecycleStart ()
specifier|protected
name|void
name|initAfterLifecycleStart
parameter_list|()
throws|throws
name|Exception
block|{}
DECL|method|newRequestContext (Account.Id requestUserId)
specifier|protected
name|RequestContext
name|newRequestContext
parameter_list|(
name|Account
operator|.
name|Id
name|requestUserId
parameter_list|)
block|{
specifier|final
name|CurrentUser
name|requestUser
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|requestUserId
argument_list|)
decl_stmt|;
return|return
parameter_list|()
lambda|->
name|requestUser
return|;
block|}
DECL|method|setAnonymous ()
specifier|protected
name|void
name|setAnonymous
parameter_list|()
block|{
name|requestContext
operator|.
name|setContext
argument_list|(
name|anonymousUser
operator|::
name|get
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownInjector ()
specifier|public
name|void
name|tearDownInjector
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byId ()
specifier|public
name|void
name|byId
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user
init|=
name|newAccount
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"9999999"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|currentUserInfo
operator|.
name|_accountId
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|user
operator|.
name|_accountId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bySelf ()
specifier|public
name|void
name|bySelf
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQuery
argument_list|(
literal|"self"
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byEmail ()
specifier|public
name|void
name|byEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"user1"
argument_list|,
name|name
argument_list|(
literal|"user1@example.com"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|domain
init|=
name|name
argument_list|(
literal|"test.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithEmail
argument_list|(
literal|"user2"
argument_list|,
literal|"user2@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccountWithEmail
argument_list|(
literal|"user3"
argument_list|,
literal|"user3@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|name
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user4
init|=
name|newAccountWithEmail
argument_list|(
literal|"user4"
argument_list|,
name|prefix
operator|+
literal|"user4@example.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user5
init|=
name|newAccountWithEmail
argument_list|(
literal|"user5"
argument_list|,
name|name
argument_list|(
literal|"user5MixedCase@example.com"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"notexisting@test.com"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|currentUserInfo
operator|.
name|email
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|currentUserInfo
operator|.
name|email
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|user1
operator|.
name|email
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|user1
operator|.
name|email
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|domain
argument_list|,
name|user2
argument_list|,
name|user3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|prefix
argument_list|,
name|user4
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|user5
operator|.
name|email
argument_list|,
name|user5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|user5
operator|.
name|email
argument_list|,
name|user5
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|user5
operator|.
name|email
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|user5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bySecondaryEmail ()
specifier|public
name|void
name|bySecondaryEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
name|name
argument_list|(
literal|"secondary"
argument_list|)
decl_stmt|;
name|String
name|domain
init|=
name|name
argument_list|(
literal|"test.com"
argument_list|)
decl_stmt|;
name|String
name|secondaryEmail
init|=
name|prefix
operator|+
literal|"@"
operator|+
name|domain
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"user1"
argument_list|,
name|name
argument_list|(
literal|"user1@example.com"
argument_list|)
argument_list|)
decl_stmt|;
name|addEmails
argument_list|(
name|user1
argument_list|,
name|secondaryEmail
argument_list|)
expr_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithEmail
argument_list|(
literal|"user2"
argument_list|,
name|name
argument_list|(
literal|"user2@example.com"
argument_list|)
argument_list|)
decl_stmt|;
name|addEmails
argument_list|(
name|user2
argument_list|,
name|name
argument_list|(
literal|"other@"
operator|+
name|domain
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|secondaryEmail
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|secondaryEmail
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|prefix
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|domain
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byEmailWithoutModifyAccountCapability ()
specifier|public
name|void
name|byEmailWithoutModifyAccountCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|preferredEmail
init|=
name|name
argument_list|(
literal|"primary@test.com"
argument_list|)
decl_stmt|;
name|String
name|secondaryEmail
init|=
name|name
argument_list|(
literal|"secondary@test.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"user1"
argument_list|,
name|preferredEmail
argument_list|)
decl_stmt|;
name|addEmails
argument_list|(
name|user1
argument_list|,
name|secondaryEmail
argument_list|)
expr_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccount
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|user2
operator|.
name|_accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSchemaVersion
argument_list|()
operator|<
literal|5
condition|)
block|{
name|assertMissingField
argument_list|(
name|AccountField
operator|.
name|PREFERRED_EMAIL
argument_list|)
expr_stmt|;
name|assertFailingQuery
argument_list|(
literal|"email:foo"
argument_list|,
literal|"'email' operator is not supported by account index version"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// This at least needs the PREFERRED_EMAIL field which is available from schema version 5.
if|if
condition|(
name|getSchemaVersion
argument_list|()
operator|>=
literal|5
condition|)
block|{
name|assertQuery
argument_list|(
name|preferredEmail
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQuery
argument_list|(
name|preferredEmail
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
name|secondaryEmail
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|preferredEmail
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"email:"
operator|+
name|secondaryEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byUsername ()
specifier|public
name|void
name|byUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccount
argument_list|(
literal|"myuser"
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"notexisting"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Not Existing"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"username:"
operator|+
name|user1
operator|.
name|username
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"username:"
operator|+
name|user1
operator|.
name|username
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isActive ()
specifier|public
name|void
name|isActive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|domain
init|=
name|name
argument_list|(
literal|"test.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"user1"
argument_list|,
literal|"user1@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithEmail
argument_list|(
literal|"user2"
argument_list|,
literal|"user2@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccount
argument_list|(
literal|"user3"
argument_list|,
literal|"user3@"
operator|+
name|domain
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AccountInfo
name|user4
init|=
name|newAccount
argument_list|(
literal|"user4"
argument_list|,
literal|"user4@"
operator|+
name|domain
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// by default only active accounts are returned
name|assertQuery
argument_list|(
name|domain
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|domain
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:active name:"
operator|+
name|domain
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:inactive name:"
operator|+
name|domain
argument_list|,
name|user3
argument_list|,
name|user4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byName ()
specifier|public
name|void
name|byName
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccountWithFullName
argument_list|(
literal|"jdoe"
argument_list|,
literal|"John Doe"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithFullName
argument_list|(
literal|"jroe"
argument_list|,
literal|"Jane Roe"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccountWithFullName
argument_list|(
literal|"user3"
argument_list|,
literal|"Mr Selfish"
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"notexisting"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Not Existing"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|quote
argument_list|(
name|user1
operator|.
name|name
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|user1
operator|.
name|name
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"John"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"john"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"DOE"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Jo Do"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"jo do"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"self"
argument_list|,
name|currentUserInfo
argument_list|,
name|user3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"me"
argument_list|,
name|currentUserInfo
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:John"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:john"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:Doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:DOE"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:self"
argument_list|,
name|user3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|quote
argument_list|(
name|user2
operator|.
name|name
argument_list|)
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|user2
operator|.
name|name
argument_list|)
argument_list|,
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byNameWithoutModifyAccountCapability ()
specifier|public
name|void
name|byNameWithoutModifyAccountCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccountWithFullName
argument_list|(
literal|"jdoe"
argument_list|,
literal|"John Doe"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithFullName
argument_list|(
literal|"jroe"
argument_list|,
literal|"Jane Roe"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccount
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|user3
operator|.
name|_accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"notexisting"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Not Existing"
argument_list|)
expr_stmt|;
comment|// by full name works with any index version
name|assertQuery
argument_list|(
name|quote
argument_list|(
name|user1
operator|.
name|name
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|user1
operator|.
name|name
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|quote
argument_list|(
name|user2
operator|.
name|name
argument_list|)
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|user2
operator|.
name|name
argument_list|)
argument_list|,
name|user2
argument_list|)
expr_stmt|;
comment|// by self/me works with any index version
name|assertQuery
argument_list|(
literal|"self"
argument_list|,
name|user3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"me"
argument_list|,
name|user3
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSchemaVersion
argument_list|()
operator|<
literal|8
condition|)
block|{
name|assertMissingField
argument_list|(
name|AccountField
operator|.
name|NAME_PART_NO_SECONDARY_EMAIL
argument_list|)
expr_stmt|;
comment|// prefix queries only work if the NAME_PART_NO_SECONDARY_EMAIL field is available
name|assertQuery
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertQuery
argument_list|(
literal|"John"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"john"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"DOE"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"Jo Do"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"jo do"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:John"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:john"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:Doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:doe"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:DOE"
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byCansee ()
specifier|public
name|void
name|byCansee
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|domain
init|=
name|name
argument_list|(
literal|"test.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"account1"
argument_list|,
literal|"account1@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithEmail
argument_list|(
literal|"account2"
argument_list|,
literal|"account2@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccountWithEmail
argument_list|(
literal|"account3"
argument_list|,
literal|"account3@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"p"
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|createChange
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|domain
operator|+
literal|" cansee:"
operator|+
name|c
operator|.
name|changeId
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|,
name|user3
argument_list|)
expr_stmt|;
name|GroupInfo
name|group
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|blockRead
argument_list|(
name|p
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|domain
operator|+
literal|" cansee:"
operator|+
name|c
operator|.
name|changeId
argument_list|,
name|user3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byWatchedProject ()
specifier|public
name|void
name|byWatchedProject
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"p"
argument_list|)
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
name|createProject
argument_list|(
name|name
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithFullName
argument_list|(
literal|"jdoe"
argument_list|,
literal|"John Doe"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithFullName
argument_list|(
literal|"jroe"
argument_list|,
literal|"Jane Roe"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccountWithFullName
argument_list|(
literal|"user3"
argument_list|,
literal|"Mr Selfish"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byWatchedProject
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|watch
argument_list|(
name|user1
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertAccounts
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byWatchedProject
argument_list|(
name|p
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|user2
argument_list|,
name|p
argument_list|,
literal|"keyword"
argument_list|)
expr_stmt|;
name|assertAccounts
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byWatchedProject
argument_list|(
name|p
argument_list|)
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|user3
argument_list|,
name|p2
argument_list|,
literal|"keyword"
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|user3
argument_list|,
name|allProjects
argument_list|,
literal|"keyword"
argument_list|)
expr_stmt|;
name|assertAccounts
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byWatchedProject
argument_list|(
name|p
argument_list|)
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertAccounts
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byWatchedProject
argument_list|(
name|p2
argument_list|)
argument_list|,
name|user3
argument_list|)
expr_stmt|;
name|assertAccounts
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byWatchedProject
argument_list|(
name|allProjects
argument_list|)
argument_list|,
name|user3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDeletedAccount ()
specifier|public
name|void
name|byDeletedAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user
init|=
name|newAccountWithFullName
argument_list|(
literal|"jdoe"
argument_list|,
literal|"John Doe"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|userId
init|=
name|Account
operator|.
name|Id
operator|.
name|tryParse
argument_list|(
name|user
operator|.
name|_accountId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"John"
argument_list|,
name|user
argument_list|)
expr_stmt|;
for|for
control|(
name|AccountIndex
name|index
range|:
name|indexes
operator|.
name|getWriteIndexes
argument_list|()
control|)
block|{
name|index
operator|.
name|delete
argument_list|(
name|userId
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"John"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withLimit ()
specifier|public
name|void
name|withLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|domain
init|=
name|name
argument_list|(
literal|"test.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"user1"
argument_list|,
literal|"user1@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithEmail
argument_list|(
literal|"user2"
argument_list|,
literal|"user2@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccountWithEmail
argument_list|(
literal|"user3"
argument_list|,
literal|"user3@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|assertQuery
argument_list|(
name|domain
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|,
name|user3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|result
argument_list|)
operator|.
name|_moreAccounts
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|domain
argument_list|)
operator|.
name|withLimit
argument_list|(
literal|2
argument_list|)
argument_list|,
name|result
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|result
argument_list|)
operator|.
name|_moreAccounts
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withStart ()
specifier|public
name|void
name|withStart
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|domain
init|=
name|name
argument_list|(
literal|"test.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user1
init|=
name|newAccountWithEmail
argument_list|(
literal|"user1"
argument_list|,
literal|"user1@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|newAccountWithEmail
argument_list|(
literal|"user2"
argument_list|,
literal|"user2@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|AccountInfo
name|user3
init|=
name|newAccountWithEmail
argument_list|(
literal|"user3"
argument_list|,
literal|"user3@"
operator|+
name|domain
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|assertQuery
argument_list|(
name|domain
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|,
name|user3
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|domain
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|,
name|result
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortedByFullname ()
specifier|public
name|void
name|sortedByFullname
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|appendix
init|=
name|name
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
comment|// Use an account creation order that ensures that sorting by fullname differs from sorting by
comment|// account ID.
name|AccountInfo
name|userFoo
init|=
name|newAccountWithFullName
argument_list|(
literal|"user1"
argument_list|,
literal|"foo-"
operator|+
name|appendix
argument_list|)
decl_stmt|;
name|AccountInfo
name|userBar
init|=
name|newAccountWithFullName
argument_list|(
literal|"user2"
argument_list|,
literal|"bar-"
operator|+
name|appendix
argument_list|)
decl_stmt|;
name|AccountInfo
name|userBaz
init|=
name|newAccountWithFullName
argument_list|(
literal|"user3"
argument_list|,
literal|"baz-"
operator|+
name|appendix
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userFoo
operator|.
name|_accountId
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|userBar
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|userBar
operator|.
name|_accountId
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|userBaz
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"name:"
operator|+
name|userFoo
operator|.
name|name
operator|+
literal|" OR name:"
operator|+
name|userBar
operator|.
name|name
operator|+
literal|" OR name:"
operator|+
name|userBaz
operator|.
name|name
decl_stmt|;
comment|// Must request details to populate fullname in the results. If fullname is not set sorting by
comment|// fullname is not possible.
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListAccountsOption
operator|.
name|DETAILS
argument_list|)
argument_list|,
name|userBar
argument_list|,
name|userBaz
argument_list|,
name|userFoo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortedByPreferredEmail ()
specifier|public
name|void
name|sortedByPreferredEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|appendix
init|=
name|name
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
comment|// Use an account creation order that ensures that sorting by preferred email differs from
comment|// sorting by account ID. Use the same fullname for all accounts so that sorting must be done by
comment|// preferred email.
name|AccountInfo
name|userFoo3
init|=
name|newAccount
argument_list|(
literal|"user3"
argument_list|,
literal|"foo-"
operator|+
name|appendix
argument_list|,
literal|"foo3-"
operator|+
name|appendix
operator|+
literal|"@test.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccountInfo
name|userFoo1
init|=
name|newAccount
argument_list|(
literal|"user1"
argument_list|,
literal|"foo-"
operator|+
name|appendix
argument_list|,
literal|"foo1-"
operator|+
name|appendix
operator|+
literal|"@test.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccountInfo
name|userFoo2
init|=
name|newAccount
argument_list|(
literal|"user2"
argument_list|,
literal|"foo-"
operator|+
name|appendix
argument_list|,
literal|"foo2-"
operator|+
name|appendix
operator|+
literal|"@test.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userFoo3
operator|.
name|_accountId
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|userFoo1
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|userFoo1
operator|.
name|_accountId
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|userFoo2
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"name:"
operator|+
name|userFoo1
operator|.
name|name
operator|+
literal|" OR name:"
operator|+
name|userFoo2
operator|.
name|name
operator|+
literal|" OR name:"
operator|+
name|userFoo3
operator|.
name|name
decl_stmt|;
comment|// Must request details to populate fullname and preferred email in the results. If fullname and
comment|// preferred email are not set sorting by fullname and preferred email is not possible. Since
comment|// all 3 accounts have the same fullname we expect sorting by preferred email.
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListAccountsOption
operator|.
name|DETAILS
argument_list|)
argument_list|,
name|userFoo1
argument_list|,
name|userFoo2
argument_list|,
name|userFoo3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortedById ()
specifier|public
name|void
name|sortedById
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|appendix
init|=
name|name
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
comment|// Each new account gets a higher account ID. Create the accounts in an order that sorting by
comment|// fullname differs from sorting by accout ID.
name|AccountInfo
name|userFoo
init|=
name|newAccountWithFullName
argument_list|(
literal|"user1"
argument_list|,
literal|"foo-"
operator|+
name|appendix
argument_list|)
decl_stmt|;
name|AccountInfo
name|userBar
init|=
name|newAccountWithFullName
argument_list|(
literal|"user2"
argument_list|,
literal|"bar-"
operator|+
name|appendix
argument_list|)
decl_stmt|;
name|AccountInfo
name|userBaz
init|=
name|newAccountWithFullName
argument_list|(
literal|"user3"
argument_list|,
literal|"baz-"
operator|+
name|appendix
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userFoo
operator|.
name|_accountId
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|userBar
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|userBar
operator|.
name|_accountId
argument_list|)
operator|.
name|isLessThan
argument_list|(
name|userBaz
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"name:"
operator|+
name|userFoo
operator|.
name|name
operator|+
literal|" OR name:"
operator|+
name|userBar
operator|.
name|name
operator|+
literal|" OR name:"
operator|+
name|userBaz
operator|.
name|name
decl_stmt|;
comment|// Normally sorting is done by fullname and preferred email, but if no details are requested
comment|// fullname and preferred email are not set and then sorting is done by account ID.
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|,
name|userFoo
argument_list|,
name|userBar
argument_list|,
name|userBaz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withDetails ()
specifier|public
name|void
name|withDetails
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccount
argument_list|(
literal|"myuser"
argument_list|,
literal|"My User"
argument_list|,
literal|"my.user@example.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|assertQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|,
name|user1
argument_list|)
decl_stmt|;
name|AccountInfo
name|ai
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user1
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|name
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|username
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|email
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|avatars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListAccountsOption
operator|.
name|DETAILS
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|ai
operator|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user1
operator|.
name|_accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user1
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user1
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user1
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ai
operator|.
name|avatars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSecondaryEmails ()
specifier|public
name|void
name|withSecondaryEmails
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccount
argument_list|(
literal|"myuser"
argument_list|,
literal|"My User"
argument_list|,
literal|"my.user@example.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|secondaryEmails
init|=
operator|new
name|String
index|[]
block|{
literal|"bar@example.com"
block|,
literal|"foo@example.com"
block|}
decl_stmt|;
name|addEmails
argument_list|(
name|user1
argument_list|,
name|secondaryEmails
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|assertQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|,
name|user1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|)
operator|.
name|withSuggest
argument_list|(
literal|true
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|secondaryEmails
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListAccountsOption
operator|.
name|DETAILS
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListAccountsOption
operator|.
name|ALL_EMAILS
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|secondaryEmails
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|user1
operator|.
name|username
argument_list|)
operator|.
name|withOptions
argument_list|(
name|ListAccountsOption
operator|.
name|DETAILS
argument_list|,
name|ListAccountsOption
operator|.
name|ALL_EMAILS
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|secondaryEmails
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSecondaryEmailsWithoutModifyAccountCapability ()
specifier|public
name|void
name|withSecondaryEmailsWithoutModifyAccountCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user
init|=
name|newAccount
argument_list|(
literal|"myuser"
argument_list|,
literal|"My User"
argument_list|,
literal|"other@example.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccountInfo
name|otherUser
init|=
name|newAccount
argument_list|(
literal|"otheruser"
argument_list|,
literal|"Other User"
argument_list|,
literal|"abc@example.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|secondaryEmails
init|=
operator|new
name|String
index|[]
block|{
literal|"dfg@example.com"
block|,
literal|"hij@example.com"
block|}
decl_stmt|;
name|addEmails
argument_list|(
name|otherUser
argument_list|,
name|secondaryEmails
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|user
operator|.
name|_accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|newQuery
argument_list|(
name|otherUser
operator|.
name|username
argument_list|)
operator|.
name|withSuggest
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|newQuery
argument_list|(
name|otherUser
operator|.
name|username
argument_list|)
operator|.
name|withOption
argument_list|(
name|ListAccountsOption
operator|.
name|ALL_EMAILS
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asAnonymous ()
specifier|public
name|void
name|asAnonymous
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccount
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|setAnonymous
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"9999999"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"self"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"username:"
operator|+
name|user1
operator|.
name|username
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
comment|// reindex permissions are tested by {@link AccountIT#reindexPermissions}
annotation|@
name|Test
DECL|method|reindex ()
specifier|public
name|void
name|reindex
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|user1
init|=
name|newAccountWithFullName
argument_list|(
literal|"tester"
argument_list|,
literal|"Test Usre"
argument_list|)
decl_stmt|;
comment|// update account without reindex so that account index is stale
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|user1
operator|.
name|_accountId
argument_list|)
decl_stmt|;
name|String
name|newName
init|=
literal|"Test User"
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allUsers
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
operator|new
name|AccountConfig
argument_list|(
name|accountId
argument_list|,
name|allUsers
argument_list|,
name|repo
argument_list|)
operator|.
name|load
argument_list|()
operator|.
name|setAccountUpdate
argument_list|(
name|InternalAccountUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setFullName
argument_list|(
name|newName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|user1
operator|.
name|name
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user1
operator|.
name|username
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|user1
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|quote
argument_list|(
name|newName
argument_list|)
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rawDocument ()
specifier|public
name|void
name|rawDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|userInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|FieldBundle
argument_list|>
name|rawFields
init|=
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|getRaw
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|userInfo
operator|.
name|_accountId
argument_list|)
argument_list|,
name|QueryOptions
operator|.
name|create
argument_list|(
name|IndexConfig
operator|.
name|createDefault
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getStoredFields
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rawFields
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rawFields
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|AccountField
operator|.
name|ID
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userInfo
operator|.
name|_accountId
argument_list|)
expr_stmt|;
comment|// The field EXTERNAL_ID_STATE is only supported from schema version 6.
if|if
condition|(
name|getSchemaVersion
argument_list|()
operator|<
literal|6
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|externalIdInfos
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ByteArrayWrapper
argument_list|>
name|blobs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountExternalIdInfo
name|info
range|:
name|externalIdInfos
control|)
block|{
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|extId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|info
operator|.
name|identity
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|extId
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|blobs
operator|.
name|add
argument_list|(
operator|new
name|ByteArrayWrapper
argument_list|(
name|extId
operator|.
name|get
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rawFields
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|AccountField
operator|.
name|EXTERNAL_ID_STATE
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|blobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Streams
operator|.
name|stream
argument_list|(
name|rawFields
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|AccountField
operator|.
name|EXTERNAL_ID_STATE
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ByteArrayWrapper
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|blobs
argument_list|)
expr_stmt|;
block|}
DECL|method|newAccount (String username)
specifier|protected
name|AccountInfo
name|newAccount
parameter_list|(
name|String
name|username
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newAccountWithEmail
argument_list|(
name|username
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newAccountWithEmail (String username, String email)
specifier|protected
name|AccountInfo
name|newAccountWithEmail
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newAccount
argument_list|(
name|username
argument_list|,
name|email
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|newAccountWithFullName (String username, String fullName)
specifier|protected
name|AccountInfo
name|newAccountWithFullName
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|fullName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newAccount
argument_list|(
name|username
argument_list|,
name|fullName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|newAccount (String username, String email, boolean active)
specifier|protected
name|AccountInfo
name|newAccount
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|email
parameter_list|,
name|boolean
name|active
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newAccount
argument_list|(
name|username
argument_list|,
literal|null
argument_list|,
name|email
argument_list|,
name|active
argument_list|)
return|;
block|}
DECL|method|newAccount (String username, String fullName, String email, boolean active)
specifier|protected
name|AccountInfo
name|newAccount
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|email
parameter_list|,
name|boolean
name|active
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uniqueName
init|=
name|name
argument_list|(
name|username
argument_list|)
decl_stmt|;
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|uniqueName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"user "
operator|+
name|uniqueName
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
comment|// expected: user does not exist yet
block|}
name|Account
operator|.
name|Id
name|id
init|=
name|createAccount
argument_list|(
name|uniqueName
argument_list|,
name|fullName
argument_list|,
name|email
argument_list|,
name|active
argument_list|)
decl_stmt|;
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createProject (String name)
specifier|protected
name|Project
operator|.
name|NameKey
name|createProject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|in
operator|.
name|createEmptyCommit
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|Project
operator|.
name|nameKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|blockRead (Project.NameKey project, GroupInfo group)
specifier|protected
name|void
name|blockRead
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|GroupInfo
name|group
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ProjectAccessInput
name|in
init|=
operator|new
name|ProjectAccessInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|add
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|AccessSectionInfo
name|a
init|=
operator|new
name|AccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|p
init|=
operator|new
name|PermissionInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|p
operator|.
name|rules
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|group
operator|.
name|id
argument_list|,
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|BLOCK
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|permissions
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"read"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|in
operator|.
name|add
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"refs/*"
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|createChange (Project.NameKey project)
specifier|protected
name|ChangeInfo
name|createChange
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"A change"
expr_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|branch
operator|=
literal|"master"
expr_stmt|;
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createGroup (String name, AccountInfo... members)
specifier|protected
name|GroupInfo
name|createGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|AccountInfo
modifier|...
name|members
parameter_list|)
throws|throws
name|RestApiException
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|in
operator|.
name|members
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|members
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|a
operator|.
name|_accountId
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|watch (AccountInfo account, Project.NameKey project, String filter)
specifier|protected
name|void
name|watch
parameter_list|(
name|AccountInfo
name|account
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|RestApiException
block|{
name|List
argument_list|<
name|ProjectWatchInfo
argument_list|>
name|projectsToWatch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ProjectWatchInfo
name|pwi
init|=
operator|new
name|ProjectWatchInfo
argument_list|()
decl_stmt|;
name|pwi
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|pwi
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|pwi
operator|.
name|notifyAbandonedChanges
operator|=
literal|true
expr_stmt|;
name|pwi
operator|.
name|notifyNewChanges
operator|=
literal|true
expr_stmt|;
name|pwi
operator|.
name|notifyAllComments
operator|=
literal|true
expr_stmt|;
name|projectsToWatch
operator|.
name|add
argument_list|(
name|pwi
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|account
operator|.
name|_accountId
argument_list|)
operator|.
name|setWatchedProjects
argument_list|(
name|projectsToWatch
argument_list|)
expr_stmt|;
block|}
DECL|method|quote (String s)
specifier|protected
name|String
name|quote
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|"\""
operator|+
name|s
operator|+
literal|"\""
return|;
block|}
DECL|method|name (String name)
specifier|protected
name|String
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|suffix
init|=
name|getSanitizedMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
return|return
name|name
operator|+
literal|"."
operator|+
name|suffix
return|;
block|}
return|return
name|name
operator|+
literal|"_"
operator|+
name|suffix
return|;
block|}
DECL|method|createAccount (String username, String fullName, String email, boolean active)
specifier|private
name|Account
operator|.
name|Id
name|createAccount
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|email
parameter_list|,
name|boolean
name|active
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ManualRequestContext
name|ctx
init|=
name|oneOffRequestContext
operator|.
name|open
argument_list|()
init|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
condition|)
block|{
name|accountManager
operator|.
name|link
argument_list|(
name|id
argument_list|,
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountsUpdate
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Update Test Account"
argument_list|,
name|id
argument_list|,
name|u
lambda|->
block|{
name|u
operator|.
name|setFullName
argument_list|(
name|fullName
argument_list|)
operator|.
name|setPreferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|setActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
DECL|method|addEmails (AccountInfo account, String... emails)
specifier|private
name|void
name|addEmails
parameter_list|(
name|AccountInfo
name|account
parameter_list|,
name|String
modifier|...
name|emails
parameter_list|)
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|Account
operator|.
name|id
argument_list|(
name|account
operator|.
name|_accountId
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|emails
control|)
block|{
name|accountManager
operator|.
name|link
argument_list|(
name|id
argument_list|,
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountCache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|newQuery (Object query)
specifier|protected
name|QueryRequest
name|newQuery
parameter_list|(
name|Object
name|query
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|query
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertQuery (Object query, AccountInfo... accounts)
specifier|protected
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|assertQuery
parameter_list|(
name|Object
name|query
parameter_list|,
name|AccountInfo
modifier|...
name|accounts
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|,
name|accounts
argument_list|)
return|;
block|}
DECL|method|assertQuery (QueryRequest query, AccountInfo... accounts)
specifier|protected
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|assertQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|AccountInfo
modifier|...
name|accounts
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertQuery
argument_list|(
name|query
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|accounts
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertQuery (QueryRequest query, List<AccountInfo> accounts)
specifier|protected
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|assertQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|accounts
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|query
operator|.
name|get
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
name|ids
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|format
argument_list|(
name|query
argument_list|,
name|result
argument_list|,
name|accounts
argument_list|)
argument_list|)
operator|.
name|that
argument_list|(
name|ids
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ids
argument_list|(
name|accounts
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|assertAccounts (List<AccountState> accounts, AccountInfo... expectedAccounts)
specifier|protected
name|void
name|assertAccounts
parameter_list|(
name|List
argument_list|<
name|AccountState
argument_list|>
name|accounts
parameter_list|,
name|AccountInfo
modifier|...
name|expectedAccounts
parameter_list|)
block|{
name|assertThat
argument_list|(
name|accounts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedAccounts
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|format ( QueryRequest query, List<AccountInfo> actualIds, List<AccountInfo> expectedAccounts)
specifier|private
name|String
name|format
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|actualIds
parameter_list|,
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|expectedAccounts
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"query '"
argument_list|)
operator|.
name|append
argument_list|(
name|query
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' with expected accounts "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|expectedAccounts
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" and result "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|actualIds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|format (Iterable<AccountInfo> accounts)
specifier|private
name|String
name|format
parameter_list|(
name|Iterable
argument_list|<
name|AccountInfo
argument_list|>
name|accounts
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|AccountInfo
argument_list|>
name|it
init|=
name|accounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AccountInfo
name|a
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"name="
argument_list|)
operator|.
name|append
argument_list|(
name|a
operator|.
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"email="
argument_list|)
operator|.
name|append
argument_list|(
name|a
operator|.
name|email
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"username="
argument_list|)
operator|.
name|append
argument_list|(
name|a
operator|.
name|username
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|ids (AccountInfo... accounts)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|(
name|AccountInfo
modifier|...
name|accounts
parameter_list|)
block|{
return|return
name|ids
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|accounts
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ids (List<AccountInfo> accounts)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|ids
parameter_list|(
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|accounts
parameter_list|)
block|{
return|return
name|accounts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertMissingField (FieldDef<AccountState, ?> field)
specifier|protected
name|void
name|assertMissingField
parameter_list|(
name|FieldDef
argument_list|<
name|AccountState
argument_list|,
name|?
argument_list|>
name|field
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"schema %s has field %s"
argument_list|,
name|getSchemaVersion
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertFailingQuery (String query, String expectedMessage)
specifier|protected
name|void
name|assertFailingQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|assertQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected BadRequestException for query '"
operator|+
name|query
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSchemaVersion ()
specifier|protected
name|int
name|getSchemaVersion
parameter_list|()
block|{
return|return
name|getSchema
argument_list|()
operator|.
name|getVersion
argument_list|()
return|;
block|}
DECL|method|getSchema ()
specifier|protected
name|Schema
argument_list|<
name|AccountState
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|getSchema
argument_list|()
return|;
block|}
comment|/** Boiler plate code to check two byte arrays for equality */
DECL|class|ByteArrayWrapper
specifier|private
specifier|static
class|class
name|ByteArrayWrapper
block|{
DECL|field|arr
specifier|private
name|byte
index|[]
name|arr
decl_stmt|;
DECL|method|ByteArrayWrapper (byte[] arr)
specifier|private
name|ByteArrayWrapper
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
name|this
operator|.
name|arr
operator|=
name|arr
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ByteArrayWrapper
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|arr
argument_list|,
operator|(
operator|(
name|ByteArrayWrapper
operator|)
name|other
operator|)
operator|.
name|arr
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|arr
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

