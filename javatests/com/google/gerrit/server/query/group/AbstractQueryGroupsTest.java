begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|AccountInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|Groups
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|FieldDef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|FieldBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Accounts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ManualRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|OneOffRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritServerTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
DECL|class|AbstractQueryGroupsTest
specifier|public
specifier|abstract
class|class
name|AbstractQueryGroupsTest
extends|extends
name|GerritServerTests
block|{
DECL|field|accounts
annotation|@
name|Inject
specifier|protected
name|Accounts
name|accounts
decl_stmt|;
DECL|field|accountsUpdate
annotation|@
name|Inject
specifier|protected
name|AccountsUpdate
operator|.
name|Server
name|accountsUpdate
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Inject
specifier|protected
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|accountManager
annotation|@
name|Inject
specifier|protected
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|protected
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|anonymousUser
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUser
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|protected
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|protected
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|protected
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
DECL|field|oneOffRequestContext
annotation|@
name|Inject
specifier|protected
name|OneOffRequestContext
name|oneOffRequestContext
decl_stmt|;
DECL|field|allProjects
annotation|@
name|Inject
specifier|protected
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|groupCache
annotation|@
name|Inject
specifier|protected
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|groupsUpdateProvider
annotation|@
name|Inject
annotation|@
name|ServerInitiated
specifier|protected
name|Provider
argument_list|<
name|GroupsUpdate
argument_list|>
name|groupsUpdateProvider
decl_stmt|;
DECL|field|indexes
annotation|@
name|Inject
specifier|protected
name|GroupIndexCollection
name|indexes
decl_stmt|;
DECL|field|lifecycle
specifier|protected
name|LifecycleManager
name|lifecycle
decl_stmt|;
DECL|field|injector
specifier|protected
name|Injector
name|injector
decl_stmt|;
DECL|field|db
specifier|protected
name|ReviewDb
name|db
decl_stmt|;
DECL|field|currentUserInfo
specifier|protected
name|AccountInfo
name|currentUserInfo
decl_stmt|;
DECL|field|user
specifier|protected
name|CurrentUser
name|user
decl_stmt|;
DECL|method|createInjector ()
specifier|protected
specifier|abstract
name|Injector
name|createInjector
parameter_list|()
function_decl|;
annotation|@
name|Before
DECL|method|setUpInjector ()
specifier|public
name|void
name|setUpInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|injector
operator|=
name|createInjector
argument_list|()
expr_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
name|setUpDatabase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpDatabase ()
specifier|protected
name|void
name|setUpDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|schemaCreator
operator|.
name|create
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|userId
init|=
name|createAccountOutsideRequestContext
argument_list|(
literal|"user"
argument_list|,
literal|"User"
argument_list|,
literal|"user@example.com"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|user
operator|=
name|userFactory
operator|.
name|create
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
name|newRequestContext
argument_list|(
name|userId
argument_list|)
argument_list|)
expr_stmt|;
name|currentUserInfo
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|userId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|newRequestContext (Account.Id requestUserId)
specifier|protected
name|RequestContext
name|newRequestContext
parameter_list|(
name|Account
operator|.
name|Id
name|requestUserId
parameter_list|)
block|{
specifier|final
name|CurrentUser
name|requestUser
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|requestUserId
argument_list|)
decl_stmt|;
return|return
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|requestUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|setAnonymous ()
specifier|protected
name|void
name|setAnonymous
parameter_list|()
block|{
name|requestContext
operator|.
name|setContext
argument_list|(
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|anonymousUser
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownInjector ()
specifier|public
name|void
name|tearDownInjector
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|requestContext
operator|!=
literal|null
condition|)
block|{
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byUuid ()
specifier|public
name|void
name|byUuid
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQuery
argument_list|(
literal|"uuid:6d70856bc40ded50f2585c4c0f7e179f3544a272"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"uuid:non-existing"
argument_list|)
expr_stmt|;
name|GroupInfo
name|group
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"uuid:"
operator|+
name|group
operator|.
name|id
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|GroupInfo
name|admins
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertQuery
argument_list|(
literal|"uuid:"
operator|+
name|admins
operator|.
name|id
argument_list|,
name|admins
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byName ()
specifier|public
name|void
name|byName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQuery
argument_list|(
literal|"name:non-existing"
argument_list|)
expr_stmt|;
name|GroupInfo
name|group
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"Group"
argument_list|)
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|group
operator|.
name|name
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|group
operator|.
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
comment|// only exact match
name|GroupInfo
name|groupWithHyphen
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group-with-hyphen"
argument_list|)
argument_list|)
decl_stmt|;
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group-no-match-with-hyphen"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"name:"
operator|+
name|groupWithHyphen
operator|.
name|name
argument_list|,
name|groupWithHyphen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byInname ()
specifier|public
name|void
name|byInname
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namePart
init|=
name|getSanitizedMethodName
argument_list|()
decl_stmt|;
name|namePart
operator|=
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'_'
argument_list|)
operator|.
name|removeFrom
argument_list|(
name|namePart
argument_list|)
expr_stmt|;
name|GroupInfo
name|group1
init|=
name|createGroup
argument_list|(
literal|"group-"
operator|+
name|namePart
argument_list|)
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|createGroup
argument_list|(
literal|"group-"
operator|+
name|namePart
operator|+
literal|"-2"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group3
init|=
name|createGroup
argument_list|(
literal|"group-"
operator|+
name|namePart
operator|+
literal|"3"
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"inname:"
operator|+
name|namePart
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"inname:"
operator|+
name|namePart
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"inname:"
operator|+
name|namePart
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDescription ()
specifier|public
name|void
name|byDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group1
init|=
name|createGroupWithDescription
argument_list|(
name|name
argument_list|(
literal|"group1"
argument_list|)
argument_list|,
literal|"This is a test group."
argument_list|)
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|createGroupWithDescription
argument_list|(
name|name
argument_list|(
literal|"group2"
argument_list|)
argument_list|,
literal|"ANOTHER TEST GROUP."
argument_list|)
decl_stmt|;
name|createGroupWithDescription
argument_list|(
name|name
argument_list|(
literal|"group3"
argument_list|)
argument_list|,
literal|"Maintainers of project foo."
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:test"
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:non-existing"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"description operator requires a value"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:\"\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byOwner ()
specifier|public
name|void
name|byOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|ownerGroup
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"owner-group"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|createGroupWithOwner
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|,
name|ownerGroup
argument_list|)
decl_stmt|;
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|group
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// ownerGroup owns itself
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|ownerGroup
operator|.
name|id
argument_list|,
name|group
argument_list|,
name|ownerGroup
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"owner:"
operator|+
name|ownerGroup
operator|.
name|name
argument_list|,
name|group
argument_list|,
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byIsVisibleToAll ()
specifier|public
name|void
name|byIsVisibleToAll
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQuery
argument_list|(
literal|"is:visibletoall"
argument_list|)
expr_stmt|;
name|GroupInfo
name|groupThatIsVisibleToAll
init|=
name|createGroupThatIsVisibleToAll
argument_list|(
name|name
argument_list|(
literal|"group-that-is-visible-to-all"
argument_list|)
argument_list|)
decl_stmt|;
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"is:visibletoall"
argument_list|,
name|groupThatIsVisibleToAll
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byMember ()
specifier|public
name|void
name|byMember
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSchemaVersion
argument_list|()
operator|<
literal|4
condition|)
block|{
name|assertMissingField
argument_list|(
name|GroupField
operator|.
name|MEMBER
argument_list|)
expr_stmt|;
name|assertFailingQuery
argument_list|(
literal|"member:someName"
argument_list|,
literal|"'member' operator is not supported by group index version"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AccountInfo
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|,
literal|"User1"
argument_list|,
literal|"user1@example.com"
argument_list|)
decl_stmt|;
name|AccountInfo
name|user2
init|=
name|createAccount
argument_list|(
literal|"user2"
argument_list|,
literal|"User2"
argument_list|,
literal|"user2@example.com"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group1
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group1"
argument_list|)
argument_list|,
name|user1
argument_list|)
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group2"
argument_list|)
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|GroupInfo
name|group3
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group3"
argument_list|)
argument_list|,
name|user1
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"member:"
operator|+
name|user1
operator|.
name|name
argument_list|,
name|group1
argument_list|,
name|group3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"member:"
operator|+
name|user1
operator|.
name|email
argument_list|,
name|group1
argument_list|,
name|group3
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group3
operator|.
name|id
argument_list|)
operator|.
name|removeMembers
argument_list|(
name|user1
operator|.
name|username
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group2
operator|.
name|id
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user1
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"member:"
operator|+
name|user1
operator|.
name|name
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bySubgroups ()
specifier|public
name|void
name|bySubgroups
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSchemaVersion
argument_list|()
operator|<
literal|4
condition|)
block|{
name|assertMissingField
argument_list|(
name|GroupField
operator|.
name|SUBGROUP
argument_list|)
expr_stmt|;
name|assertFailingQuery
argument_list|(
literal|"subgroup:someGroupName"
argument_list|,
literal|"'subgroup' operator is not supported by group index version"
argument_list|)
expr_stmt|;
return|return;
block|}
name|GroupInfo
name|superParentGroup
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"superParentGroup"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|parentGroup1
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"parentGroup1"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|parentGroup2
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"parentGroup2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|subGroup
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"subGroup"
argument_list|)
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|superParentGroup
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|parentGroup1
operator|.
name|id
argument_list|,
name|parentGroup2
operator|.
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|parentGroup1
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|subGroup
operator|.
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|parentGroup2
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|subGroup
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"subgroup:"
operator|+
name|subGroup
operator|.
name|id
argument_list|,
name|parentGroup1
argument_list|,
name|parentGroup2
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"subgroup:"
operator|+
name|parentGroup1
operator|.
name|id
argument_list|,
name|superParentGroup
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|superParentGroup
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|subGroup
operator|.
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|parentGroup1
operator|.
name|id
argument_list|)
operator|.
name|removeGroups
argument_list|(
name|subGroup
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"subgroup:"
operator|+
name|subGroup
operator|.
name|id
argument_list|,
name|superParentGroup
argument_list|,
name|parentGroup2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|byDefaultField ()
specifier|public
name|void
name|byDefaultField
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group1
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"foo-group"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group3
init|=
name|createGroupWithDescription
argument_list|(
name|name
argument_list|(
literal|"group3"
argument_list|)
argument_list|,
literal|"decription that contains foo and the UUID of group2: "
operator|+
name|group2
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
literal|"non-existing"
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"foo"
argument_list|,
name|group1
argument_list|,
name|group3
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
name|group2
operator|.
name|id
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withLimit ()
specifier|public
name|void
name|withLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group1
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group3
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group3"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"uuid:"
operator|+
name|group1
operator|.
name|id
operator|+
literal|" OR uuid:"
operator|+
name|group2
operator|.
name|id
operator|+
literal|" OR uuid:"
operator|+
name|group3
operator|.
name|id
decl_stmt|;
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|result
init|=
name|assertQuery
argument_list|(
name|query
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_moreGroups
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
operator|.
name|withLimit
argument_list|(
literal|2
argument_list|)
argument_list|,
name|result
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_moreGroups
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withStart ()
specifier|public
name|void
name|withStart
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group1
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group2
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupInfo
name|group3
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group3"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"uuid:"
operator|+
name|group1
operator|.
name|id
operator|+
literal|" OR uuid:"
operator|+
name|group2
operator|.
name|id
operator|+
literal|" OR uuid:"
operator|+
name|group3
operator|.
name|id
decl_stmt|;
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|result
init|=
name|assertQuery
argument_list|(
name|query
argument_list|,
name|group1
argument_list|,
name|group2
argument_list|,
name|group3
argument_list|)
decl_stmt|;
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|,
name|result
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asAnonymous ()
specifier|public
name|void
name|asAnonymous
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
decl_stmt|;
name|setAnonymous
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"uuid:"
operator|+
name|group
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
comment|// reindex permissions are tested by {@link GroupsIT#reindexPermissions}
annotation|@
name|Test
DECL|method|reindex ()
specifier|public
name|void
name|reindex
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group1
init|=
name|createGroupWithDescription
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|,
literal|"barX"
argument_list|)
decl_stmt|;
comment|// update group in the database so that group index is stale
name|String
name|newDescription
init|=
literal|"barY"
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group1
operator|.
name|id
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
name|newDescription
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|groupsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|updateGroupInDb
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:"
operator|+
name|group1
operator|.
name|description
argument_list|,
name|group1
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:"
operator|+
name|newDescription
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:"
operator|+
name|group1
operator|.
name|description
argument_list|)
expr_stmt|;
name|assertQuery
argument_list|(
literal|"description:"
operator|+
name|newDescription
argument_list|,
name|group1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rawDocument ()
specifier|public
name|void
name|rawDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group1
init|=
name|createGroup
argument_list|(
name|name
argument_list|(
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group1
operator|.
name|id
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|FieldBundle
argument_list|>
name|rawFields
init|=
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|getRaw
argument_list|(
name|uuid
argument_list|,
name|QueryOptions
operator|.
name|create
argument_list|(
name|IndexConfig
operator|.
name|createDefault
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getStoredFields
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rawFields
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rawFields
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|GroupField
operator|.
name|UUID
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createAccountOutsideRequestContext ( String username, String fullName, String email, boolean active)
specifier|private
name|Account
operator|.
name|Id
name|createAccountOutsideRequestContext
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|email
parameter_list|,
name|boolean
name|active
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ManualRequestContext
name|ctx
init|=
name|oneOffRequestContext
operator|.
name|open
argument_list|()
init|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
condition|)
block|{
name|accountManager
operator|.
name|link
argument_list|(
name|id
argument_list|,
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountsUpdate
operator|.
name|create
argument_list|()
operator|.
name|update
argument_list|(
name|id
argument_list|,
name|u
lambda|->
block|{
name|u
operator|.
name|setFullName
argument_list|(
name|fullName
argument_list|)
operator|.
name|setPreferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|setActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
DECL|method|createAccount (String username, String fullName, String email)
specifier|protected
name|AccountInfo
name|createAccount
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uniqueName
init|=
name|name
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AccountInput
name|accountInput
init|=
operator|new
name|AccountInput
argument_list|()
decl_stmt|;
name|accountInput
operator|.
name|username
operator|=
name|uniqueName
expr_stmt|;
name|accountInput
operator|.
name|name
operator|=
name|fullName
expr_stmt|;
name|accountInput
operator|.
name|email
operator|=
name|email
expr_stmt|;
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|accountInput
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createGroup (String name, AccountInfo... members)
specifier|protected
name|GroupInfo
name|createGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|AccountInfo
modifier|...
name|members
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createGroupWithDescription
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|members
argument_list|)
return|;
block|}
DECL|method|createGroupWithDescription ( String name, String description, AccountInfo... members)
specifier|protected
name|GroupInfo
name|createGroupWithDescription
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|AccountInfo
modifier|...
name|members
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|in
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|in
operator|.
name|members
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|members
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|a
operator|.
name|_accountId
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createGroupWithOwner (String name, GroupInfo ownerGroup)
specifier|protected
name|GroupInfo
name|createGroupWithOwner
parameter_list|(
name|String
name|name
parameter_list|,
name|GroupInfo
name|ownerGroup
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|ownerGroup
operator|.
name|id
expr_stmt|;
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|createGroupThatIsVisibleToAll (String name)
specifier|protected
name|GroupInfo
name|createGroupThatIsVisibleToAll
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getGroup (AccountGroup.UUID uuid)
specifier|protected
name|GroupInfo
name|getGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|uuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|assertQuery (Object query, GroupInfo... groups)
specifier|protected
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|assertQuery
parameter_list|(
name|Object
name|query
parameter_list|,
name|GroupInfo
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertQuery
argument_list|(
name|newQuery
argument_list|(
name|query
argument_list|)
argument_list|,
name|groups
argument_list|)
return|;
block|}
DECL|method|assertQuery (QueryRequest query, GroupInfo... groups)
specifier|protected
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|assertQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|GroupInfo
modifier|...
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertQuery
argument_list|(
name|query
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|groups
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertQuery (QueryRequest query, List<GroupInfo> groups)
specifier|protected
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|assertQuery
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|groups
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|result
init|=
name|query
operator|.
name|get
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|uuids
init|=
name|uuids
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uuids
argument_list|)
operator|.
name|named
argument_list|(
name|format
argument_list|(
name|query
argument_list|,
name|result
argument_list|,
name|groups
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|uuids
argument_list|(
name|groups
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|newQuery (Object query)
specifier|protected
name|QueryRequest
name|newQuery
parameter_list|(
name|Object
name|query
parameter_list|)
block|{
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|query
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|format ( QueryRequest query, List<GroupInfo> actualGroups, List<GroupInfo> expectedGroups)
specifier|protected
name|String
name|format
parameter_list|(
name|QueryRequest
name|query
parameter_list|,
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|actualGroups
parameter_list|,
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|expectedGroups
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"query '"
argument_list|)
operator|.
name|append
argument_list|(
name|query
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' with expected groups "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|expectedGroups
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" and result "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|actualGroups
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|format (Iterable<GroupInfo> groups)
specifier|protected
name|String
name|format
parameter_list|(
name|Iterable
argument_list|<
name|GroupInfo
argument_list|>
name|groups
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|GroupInfo
argument_list|>
name|it
init|=
name|groups
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|GroupInfo
name|g
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"name="
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"groupId="
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|groupId
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"url="
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|url
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"ownerId="
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|ownerId
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"owner="
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|owner
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"description="
argument_list|)
operator|.
name|append
argument_list|(
name|g
operator|.
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"visibleToAll="
argument_list|)
operator|.
name|append
argument_list|(
name|toBoolean
argument_list|(
name|g
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toBoolean (Boolean b)
specifier|protected
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
condition|?
literal|false
else|:
name|b
return|;
block|}
DECL|method|ids (GroupInfo... groups)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|(
name|GroupInfo
modifier|...
name|groups
parameter_list|)
block|{
return|return
name|uuids
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|groups
argument_list|)
argument_list|)
return|;
block|}
DECL|method|uuids (List<GroupInfo> groups)
specifier|protected
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|uuids
parameter_list|(
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|groups
parameter_list|)
block|{
return|return
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|g
lambda|->
name|g
operator|.
name|id
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|name (String name)
specifier|protected
name|String
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|name
operator|+
literal|"_"
operator|+
name|getSanitizedMethodName
argument_list|()
return|;
block|}
DECL|method|assertMissingField (FieldDef<InternalGroup, ?> field)
specifier|protected
name|void
name|assertMissingField
parameter_list|(
name|FieldDef
argument_list|<
name|InternalGroup
argument_list|,
name|?
argument_list|>
name|field
parameter_list|)
block|{
name|assertThat
argument_list|(
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"schema %s has field %s"
argument_list|,
name|getSchemaVersion
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertFailingQuery (String query, String expectedMessage)
specifier|protected
name|void
name|assertFailingQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|assertQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected BadRequestException for query '"
operator|+
name|query
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSchemaVersion ()
specifier|protected
name|int
name|getSchemaVersion
parameter_list|()
block|{
return|return
name|getSchema
argument_list|()
operator|.
name|getVersion
argument_list|()
return|;
block|}
DECL|method|getSchema ()
specifier|protected
name|Schema
argument_list|<
name|InternalGroup
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|indexes
operator|.
name|getSearchIndex
argument_list|()
operator|.
name|getSchema
argument_list|()
return|;
block|}
block|}
end_class

end_unit

