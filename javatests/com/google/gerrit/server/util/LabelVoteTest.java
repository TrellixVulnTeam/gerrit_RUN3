begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
operator|.
name|parse
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
operator|.
name|parseWithEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LabelVoteTest
specifier|public
class|class
name|LabelVoteTest
extends|extends
name|GerritBaseTests
block|{
annotation|@
name|Test
DECL|method|labelVoteParse ()
specifier|public
name|void
name|labelVoteParse
parameter_list|()
block|{
name|assertLabelVoteEquals
argument_list|(
name|parse
argument_list|(
literal|"Code-Review-2"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parse
argument_list|(
literal|"Code-Review-1"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parse
argument_list|(
literal|"-Code-Review"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parse
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parse
argument_list|(
literal|"Code-Review+1"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parse
argument_list|(
literal|"Code-Review+2"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|labelVoteFormat ()
specifier|public
name|void
name|labelVoteFormat
parameter_list|()
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"Code-Review-2"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"Code-Review-1"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review-1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"-Code-Review"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"-Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"Code-Review+1"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review+1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"Code-Review+2"
argument_list|)
operator|.
name|format
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review+2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|labelVoteParseWithEquals ()
specifier|public
name|void
name|labelVoteParseWithEquals
parameter_list|()
block|{
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=-2"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=-1"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=0"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=1"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=+1"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=2"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=+2"
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
literal|"R=0"
argument_list|)
argument_list|,
literal|"R"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|longName
init|=
literal|"A-loooooooooooooooooooooooooooooooooooooooooooooooooong-label"
decl_stmt|;
comment|// Regression test: an old bug passed the string length as a radix to Short#parseShort.
name|assertThat
argument_list|(
name|longName
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|Character
operator|.
name|MAX_RADIX
argument_list|)
expr_stmt|;
name|assertLabelVoteEquals
argument_list|(
name|parseWithEquals
argument_list|(
name|longName
operator|+
literal|"=+1"
argument_list|)
argument_list|,
name|longName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|"=1"
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|"=.1"
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|"=a1"
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|"=1a"
argument_list|)
expr_stmt|;
name|assertParseWithEqualsFails
argument_list|(
literal|"=."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|labelVoteFormatWithEquals ()
specifier|public
name|void
name|labelVoteFormatWithEquals
parameter_list|()
block|{
name|assertThat
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=-2"
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review=-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=-1"
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review=-1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=0"
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review=0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=+1"
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review=+1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseWithEquals
argument_list|(
literal|"Code-Review=+2"
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review=+2"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLabelVoteEquals (LabelVote actual, String expectedLabel, int expectedValue)
specifier|private
name|void
name|assertLabelVoteEquals
parameter_list|(
name|LabelVote
name|actual
parameter_list|,
name|String
name|expectedLabel
parameter_list|,
name|int
name|expectedValue
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|label
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedLabel
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|actual
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedValue
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParseWithEqualsFails (String value)
specifier|private
name|void
name|assertParseWithEqualsFails
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
name|parseWithEquals
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected IllegalArgumentException when parsing \"%s\""
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
block|}
end_class

end_unit

