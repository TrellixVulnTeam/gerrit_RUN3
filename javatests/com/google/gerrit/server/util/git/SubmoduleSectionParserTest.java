begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.util.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|SubmoduleSubscription
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SubmoduleSectionParserTest
specifier|public
class|class
name|SubmoduleSectionParserTest
block|{
DECL|field|THIS_SERVER
specifier|private
specifier|static
specifier|final
name|String
name|THIS_SERVER
init|=
literal|"http://localhost/"
decl_stmt|;
annotation|@
name|Test
DECL|method|followMasterBranch ()
specifier|public
name|void
name|followMasterBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"proj"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = localpath-to-a\n"
operator|+
literal|"url = ssh://localhost/"
operator|+
name|p
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"localpath-to-a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|followMatchingBranch ()
specifier|public
name|void
name|followMatchingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = ssh://localhost/"
operator|+
name|p
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = .\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch1
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res1
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch1
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected1
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch1
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res1
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected1
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch2
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"somebranch"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res2
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch2
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected2
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch2
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"somebranch"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res2
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|followAnotherBranch ()
specifier|public
name|void
name|followAnotherBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = ssh://localhost/"
operator|+
name|p
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = anotherbranch\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"anotherbranch"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withAnotherURI ()
specifier|public
name|void
name|withAnotherURI
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = http://localhost:80/"
operator|+
name|p
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSlashesInProjectName ()
specifier|public
name|void
name|withSlashesInProjectName
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project/with/slashes/a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"project/with/slashes/a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = http://localhost:80/"
operator|+
name|p
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSlashesInPath ()
specifier|public
name|void
name|withSlashesInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a/b/c/d/e\n"
operator|+
literal|"url = http://localhost:80/"
operator|+
name|p
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a/b/c/d/e"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withMoreSections ()
specifier|public
name|void
name|withMoreSections
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"     path = a\n"
operator|+
literal|"     url = ssh://localhost/"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"     branch = .\n"
operator|+
literal|"[submodule \"b\"]\n"
operator|+
literal|"		path = b\n"
operator|+
literal|"		url = http://localhost:80/"
operator|+
name|p2
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"		branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p2
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSubProjectFound ()
specifier|public
name|void
name|withSubProjectFound
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a/b"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|"\n"
operator|+
literal|"[submodule \"a/b\"]\n"
operator|+
literal|"path = a/b\n"
operator|+
literal|"url = ssh://localhost/"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = .\n"
operator|+
literal|"[submodule \"b\"]\n"
operator|+
literal|"path = b\n"
operator|+
literal|"url = http://localhost/"
operator|+
name|p2
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = .\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p2
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"b"
argument_list|)
argument_list|,
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withAnInvalidSection ()
specifier|public
name|void
name|withAnInvalidSection
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p3
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p4
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|"\n"
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"    path = a\n"
operator|+
literal|"    url = ssh://localhost/"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"    branch = .\n"
operator|+
literal|"[submodule \"b\"]\n"
comment|// path missing
operator|+
literal|"    url = http://localhost:80/"
operator|+
name|p2
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"    branch = master\n"
operator|+
literal|"[submodule \"c\"]\n"
operator|+
literal|"    path = c\n"
comment|// url missing
operator|+
literal|"    branch = .\n"
operator|+
literal|"[submodule \"d\"]\n"
operator|+
literal|"    path = d-parent/the-d-folder\n"
operator|+
literal|"    url = ssh://localhost/"
operator|+
name|p3
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
comment|// branch missing
operator|+
literal|"[submodule \"e\"]\n"
operator|+
literal|"    path = e\n"
operator|+
literal|"    url = ssh://localhost/"
operator|+
name|p4
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"    branch = refs/heads/master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p4
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"e"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSectionOfNonexistingProject ()
specifier|public
name|void
name|withSectionOfNonexistingProject
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|"\n"
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = ssh://non-localhost/a\n"
comment|// Project "a" doesn't exist
operator|+
literal|"branch = .\\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSectionToOtherServer ()
specifier|public
name|void
name|withSectionToOtherServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]"
operator|+
literal|"path = a"
operator|+
literal|"url = ssh://non-localhost/"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = ."
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withRelativeURI ()
specifier|public
name|void
name|withRelativeURI
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = ../"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withDeepRelativeURI ()
specifier|public
name|void
name|withDeepRelativeURI
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = ../../"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"nested/project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withOverlyDeepRelativeURI ()
specifier|public
name|void
name|withOverlyDeepRelativeURI
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"nested/a"
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|""
operator|+
literal|"[submodule \"a\"]\n"
operator|+
literal|"path = a\n"
operator|+
literal|"url = ../../"
operator|+
name|p1
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"branch = master\n"
argument_list|)
expr_stmt|;
name|Branch
operator|.
name|NameKey
name|targetBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"nested/project"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|res
init|=
operator|new
name|SubmoduleSectionParser
argument_list|(
name|cfg
argument_list|,
name|THIS_SERVER
argument_list|,
name|targetBranch
argument_list|)
operator|.
name|parseAllSections
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SubmoduleSubscription
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
operator|new
name|SubmoduleSubscription
argument_list|(
name|targetBranch
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

