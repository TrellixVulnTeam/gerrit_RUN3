begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail.send
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|CommentFormatter
operator|.
name|BlockType
operator|.
name|LIST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|CommentFormatter
operator|.
name|BlockType
operator|.
name|PARAGRAPH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|CommentFormatter
operator|.
name|BlockType
operator|.
name|PRE_FORMATTED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|CommentFormatter
operator|.
name|BlockType
operator|.
name|QUOTE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CommentFormatterTest
specifier|public
class|class
name|CommentFormatterTest
extends|extends
name|GerritBaseTests
block|{
DECL|method|assertBlock ( List<CommentFormatter.Block> list, int index, CommentFormatter.BlockType type, String text)
specifier|private
name|void
name|assertBlock
parameter_list|(
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|CommentFormatter
operator|.
name|BlockType
name|type
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|CommentFormatter
operator|.
name|Block
name|block
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|text
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|items
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|quotedBlocks
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertListBlock ( List<CommentFormatter.Block> list, int index, int itemIndex, String text)
specifier|private
name|void
name|assertListBlock
parameter_list|(
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|itemIndex
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|CommentFormatter
operator|.
name|Block
name|block
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LIST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|items
operator|.
name|get
argument_list|(
name|itemIndex
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|text
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|quotedBlocks
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertQuoteBlock (List<CommentFormatter.Block> list, int index, int size)
specifier|private
name|void
name|assertQuoteBlock
parameter_list|(
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|CommentFormatter
operator|.
name|Block
name|block
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|QUOTE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|items
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|text
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|block
operator|.
name|quotedBlocks
argument_list|)
operator|.
name|hasSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNullAsEmpty ()
specifier|public
name|void
name|parseNullAsEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|CommentFormatter
operator|.
name|parse
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseEmpty ()
specifier|public
name|void
name|parseEmpty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|CommentFormatter
operator|.
name|parse
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseSimple ()
specifier|public
name|void
name|parseSimple
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"Para1"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseMultilinePara ()
specifier|public
name|void
name|parseMultilinePara
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"Para 1\nStill para 1"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseParaBreak ()
specifier|public
name|void
name|parseParaBreak
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"Para 1\n\nPara 2\n\nPara 3"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Para 1"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Para 2"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Para 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseQuote ()
specifier|public
name|void
name|parseQuote
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"> Quote text"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Quote text"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseExcludesEmpty ()
specifier|public
name|void
name|parseExcludesEmpty
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"Para 1\n\n\n\nPara 2"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Para 1"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Para 2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseQuoteLeadSpace ()
specifier|public
name|void
name|parseQuoteLeadSpace
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"> Quote text"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Quote text"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseMultiLineQuote ()
specifier|public
name|void
name|parseMultiLineQuote
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"> Quote line 1\n> Quote line 2\n> Quote line 3\n"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Quote line 1\nQuote line 2\nQuote line 3\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parsePre ()
specifier|public
name|void
name|parsePre
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"    Four space indent."
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PRE_FORMATTED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseOneSpacePre ()
specifier|public
name|void
name|parseOneSpacePre
parameter_list|()
block|{
name|String
name|comment
init|=
literal|" One space indent.\n Another line."
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PRE_FORMATTED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseTabPre ()
specifier|public
name|void
name|parseTabPre
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"\tOne tab indent.\n\tAnother line.\n  Yet another!"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PRE_FORMATTED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseIntermediateLeadingWhitespacePre ()
specifier|public
name|void
name|parseIntermediateLeadingWhitespacePre
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"No indent.\n\tNonzero indent.\nNo indent again."
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PRE_FORMATTED
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseStarList ()
specifier|public
name|void
name|parseStarList
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"* Item 1\n* Item 2\n* Item 3"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Item 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"Item 2"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"Item 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseDashList ()
specifier|public
name|void
name|parseDashList
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"- Item 1\n- Item 2\n- Item 3"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Item 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"Item 2"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"Item 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseMixedList ()
specifier|public
name|void
name|parseMixedList
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"- Item 1\n* Item 2\n- Item 3\n* Item 4"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Item 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"Item 2"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"Item 3"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|"Item 4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseMixedBlockTypes ()
specifier|public
name|void
name|parseMixedBlockTypes
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"Paragraph\nacross\na\nfew\nlines."
operator|+
literal|"\n\n"
operator|+
literal|"> Quote\n> across\n> not many lines."
operator|+
literal|"\n\n"
operator|+
literal|"Another paragraph"
operator|+
literal|"\n\n"
operator|+
literal|"* Series\n* of\n* list\n* items"
operator|+
literal|"\n\n"
operator|+
literal|"Yet another paragraph"
operator|+
literal|"\n\n"
operator|+
literal|"\tPreformatted text."
operator|+
literal|"\n\n"
operator|+
literal|"Parting words."
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph\nacross\na\nfew\nlines."
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Quote\nacross\nnot many lines."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Another paragraph"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|"Series"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|"of"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|"items"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|4
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Yet another paragraph"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|5
argument_list|,
name|PRE_FORMATTED
argument_list|,
literal|"\tPreformatted text."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|6
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Parting words."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulletList1 ()
specifier|public
name|void
name|bulletList1
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n* line 1\n* 2nd line"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"line 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"2nd line"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulletList2 ()
specifier|public
name|void
name|bulletList2
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n* line 1\n* 2nd line\n\nB"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"line 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"2nd line"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulletList3 ()
specifier|public
name|void
name|bulletList3
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"* line 1\n* 2nd line\n\nB"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"line 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"2nd line"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulletList4 ()
specifier|public
name|void
name|bulletList4
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"To see this bug, you have to:\n"
comment|//
operator|+
literal|"* Be on IMAP or EAS (not on POP)\n"
comment|//
operator|+
literal|"* Be very unlucky\n"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"To see this bug, you have to:"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Be on IMAP or EAS (not on POP)"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"Be very unlucky"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|bulletList5 ()
specifier|public
name|void
name|bulletList5
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"To see this bug,\n"
comment|//
operator|+
literal|"you have to:\n"
comment|//
operator|+
literal|"* Be on IMAP or EAS (not on POP)\n"
comment|//
operator|+
literal|"* Be very unlucky\n"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"To see this bug, you have to:"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Be on IMAP or EAS (not on POP)"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"Be very unlucky"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dashList1 ()
specifier|public
name|void
name|dashList1
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n- line 1\n- 2nd line"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"line 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"2nd line"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dashList2 ()
specifier|public
name|void
name|dashList2
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n- line 1\n- 2nd line\n\nB"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"line 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"2nd line"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dashList3 ()
specifier|public
name|void
name|dashList3
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"- line 1\n- 2nd line\n\nB"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"line 1"
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"2nd line"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preformat1 ()
specifier|public
name|void
name|preformat1
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n  This is pre\n  formatted"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PRE_FORMATTED
argument_list|,
literal|"  This is pre\n  formatted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preformat2 ()
specifier|public
name|void
name|preformat2
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n  This is pre\n  formatted\n\nbut this is not"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PRE_FORMATTED
argument_list|,
literal|"  This is pre\n  formatted"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"but this is not"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preformat3 ()
specifier|public
name|void
name|preformat3
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"A\n\n  Q\n<R>\n  S\n\nB"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PRE_FORMATTED
argument_list|,
literal|"  Q\n<R>\n  S"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|preformat4 ()
specifier|public
name|void
name|preformat4
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"  Q\n<R>\n  S\n\nB"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PRE_FORMATTED
argument_list|,
literal|"  Q\n<R>\n  S"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|quote1 ()
specifier|public
name|void
name|quote1
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"> I'm happy\n> with quotes!\n\nSee above."
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"I'm happy\nwith quotes!"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"See above."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|quote2 ()
specifier|public
name|void
name|quote2
parameter_list|()
block|{
name|String
name|comment
init|=
literal|"See this said:\n\n> a quoted\n> string block\n\nOK?"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"See this said:"
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"a quoted\nstring block"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"OK?"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nestedQuotes1 ()
specifier|public
name|void
name|nestedQuotes1
parameter_list|()
block|{
name|String
name|comment
init|=
literal|">> prior\n> \n> next\n"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"prior"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"next\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|largeMixedQuote ()
specifier|public
name|void
name|largeMixedQuote
parameter_list|()
block|{
name|String
name|comment
init|=
literal|">> Paragraph 1.\n"
operator|+
literal|">> \n"
operator|+
literal|">>> Paragraph 2.\n"
operator|+
literal|">> \n"
operator|+
literal|">> Paragraph 3.\n"
operator|+
literal|">> \n"
operator|+
literal|">>    pre line 1;\n"
operator|+
literal|">>    pre line 2;\n"
operator|+
literal|">> \n"
operator|+
literal|">> Paragraph 4.\n"
operator|+
literal|">> \n"
operator|+
literal|">> * List item 1.\n"
operator|+
literal|">> * List item 2.\n"
operator|+
literal|">> \n"
operator|+
literal|">> Paragraph 5.\n"
operator|+
literal|"> \n"
operator|+
literal|"> Paragraph 6.\n"
operator|+
literal|"\n"
operator|+
literal|"Paragraph 7.\n"
decl_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|result
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|bigQuote
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
decl_stmt|;
name|assertBlock
argument_list|(
name|bigQuote
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 1."
argument_list|)
expr_stmt|;
name|assertQuoteBlock
argument_list|(
name|bigQuote
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|bigQuote
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|0
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 2."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|bigQuote
argument_list|,
literal|2
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 3."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|bigQuote
argument_list|,
literal|3
argument_list|,
name|PRE_FORMATTED
argument_list|,
literal|"   pre line 1;\n   pre line 2;"
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|bigQuote
argument_list|,
literal|4
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 4."
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|bigQuote
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|"List item 1."
argument_list|)
expr_stmt|;
name|assertListBlock
argument_list|(
name|bigQuote
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|"List item 2."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|bigQuote
argument_list|,
literal|6
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 5."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|quotedBlocks
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 6."
argument_list|)
expr_stmt|;
name|assertBlock
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
name|PARAGRAPH
argument_list|,
literal|"Paragraph 7.\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

