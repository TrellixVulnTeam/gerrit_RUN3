begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.fixes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LineIdentifierTest
specifier|public
class|class
name|LineIdentifierTest
extends|extends
name|GerritBaseTests
block|{
annotation|@
name|Test
DECL|method|lineNumberMustBePositive ()
specifier|public
name|void
name|lineNumberMustBePositive
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"First line\nSecond line"
argument_list|)
decl_stmt|;
name|StringIndexOutOfBoundsException
name|thrown
init|=
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"positive"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lineNumberMustIndicateAnAvailableLine ()
specifier|public
name|void
name|lineNumberMustIndicateAnAvailableLine
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"First line\nSecond line"
argument_list|)
decl_stmt|;
name|StringIndexOutOfBoundsException
name|thrown
init|=
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Line 3 isn't available"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexOfFirstLineIsRecognized ()
specifier|public
name|void
name|startIndexOfFirstLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfFirstLineIsCorrect ()
specifier|public
name|void
name|lengthOfFirstLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexOfSecondLineIsRecognized ()
specifier|public
name|void
name|startIndexOfSecondLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfSecondLineIsCorrect ()
specifier|public
name|void
name|lengthOfSecondLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexOfLastLineIsRecognized ()
specifier|public
name|void
name|startIndexOfLastLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfLastLineIsCorrect ()
specifier|public
name|void
name|lengthOfLastLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyFirstLineIsRecognized ()
specifier|public
name|void
name|emptyFirstLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfEmptyFirstLineIsCorrect ()
specifier|public
name|void
name|lengthOfEmptyFirstLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"\n123\n1234567"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyIntermediaryLineIsRecognized ()
specifier|public
name|void
name|emptyIntermediaryLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n\n1234567"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfEmptyIntermediaryLineIsCorrect ()
specifier|public
name|void
name|lengthOfEmptyIntermediaryLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n\n1234567"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lineAfterIntermediaryLineIsRecognized ()
specifier|public
name|void
name|lineAfterIntermediaryLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n\n1234567"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyLastLineIsRecognized ()
specifier|public
name|void
name|emptyLastLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfEmptyLastLineIsCorrect ()
specifier|public
name|void
name|lengthOfEmptyLastLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexOfSingleLineIsRecognized ()
specifier|public
name|void
name|startIndexOfSingleLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfSingleLineIsCorrect ()
specifier|public
name|void
name|lengthOfSingleLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexOfSingleEmptyLineIsRecognized ()
specifier|public
name|void
name|startIndexOfSingleEmptyLineIsRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfSingleEmptyLineIsCorrect ()
specifier|public
name|void
name|lengthOfSingleEmptyLineIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lookingUpSubsequentLinesIsPossible ()
specifier|public
name|void
name|lookingUpSubsequentLinesIsPossible
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567\n12"
argument_list|)
decl_stmt|;
name|int
name|firstLineStartIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstLineStartIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|secondLineStartIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondLineStartIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lookingUpNotSubsequentLinesInAscendingOrderIsPossible ()
specifier|public
name|void
name|lookingUpNotSubsequentLinesInAscendingOrderIsPossible
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567\n12"
argument_list|)
decl_stmt|;
name|int
name|firstLineStartIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstLineStartIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|fourthLineStartIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fourthLineStartIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|21
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lookingUpNotSubsequentLinesInDescendingOrderIsPossible ()
specifier|public
name|void
name|lookingUpNotSubsequentLinesInDescendingOrderIsPossible
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\n123\n1234567\n12"
argument_list|)
decl_stmt|;
name|int
name|fourthLineStartIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fourthLineStartIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|int
name|secondLineStartIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondLineStartIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|linesSeparatedByOnlyCarriageReturnAreRecognized ()
specifier|public
name|void
name|linesSeparatedByOnlyCarriageReturnAreRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\r123\r12"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfLinesSeparatedByOnlyCarriageReturnIsCorrect ()
specifier|public
name|void
name|lengthOfLinesSeparatedByOnlyCarriageReturnIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\r123\r12"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|linesSeparatedByLineFeedAndCarriageReturnAreRecognized ()
specifier|public
name|void
name|linesSeparatedByLineFeedAndCarriageReturnAreRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\r\n123\r\n12"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfLinesSeparatedByLineFeedAndCarriageReturnIsCorrect ()
specifier|public
name|void
name|lengthOfLinesSeparatedByLineFeedAndCarriageReturnIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\r\n123\r\n12"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|linesSeparatedByMixtureOfCarriageReturnAndLineFeedAreRecognized ()
specifier|public
name|void
name|linesSeparatedByMixtureOfCarriageReturnAndLineFeedAreRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\r123\r\n12\n123456\r\n1234"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|25
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|linesSeparatedBySomeUnicodeLinebreakCharacterAreRecognized ()
specifier|public
name|void
name|linesSeparatedBySomeUnicodeLinebreakCharacterAreRecognized
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\u2029123\u202912"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lengthOfLinesSeparatedBySomeUnicodeLinebreakCharacterIsCorrect ()
specifier|public
name|void
name|lengthOfLinesSeparatedBySomeUnicodeLinebreakCharacterIsCorrect
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"12345678\u2029123\u202912"
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|lineIdentifier
operator|.
name|getLengthOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lineLength
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blanksAreNotInterpretedAsLineSeparators ()
specifier|public
name|void
name|blanksAreNotInterpretedAsLineSeparators
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"1 2345678\n123\n12"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tabsAreNotInterpretedAsLineSeparators ()
specifier|public
name|void
name|tabsAreNotInterpretedAsLineSeparators
parameter_list|()
block|{
name|LineIdentifier
name|lineIdentifier
init|=
operator|new
name|LineIdentifier
argument_list|(
literal|"123\t45678\n123\n12"
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
name|lineIdentifier
operator|.
name|getStartIndexOfLine
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|startIndex
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

