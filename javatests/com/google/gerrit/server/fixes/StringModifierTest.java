begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.fixes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|StringModifierTest
specifier|public
class|class
name|StringModifierTest
block|{
DECL|field|originalString
specifier|private
specifier|final
name|String
name|originalString
init|=
literal|"This is the original, unmodified string."
decl_stmt|;
DECL|field|stringModifier
specifier|private
name|StringModifier
name|stringModifier
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|stringModifier
operator|=
operator|new
name|StringModifier
argument_list|(
name|originalString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singlePartIsReplaced ()
specifier|public
name|void
name|singlePartIsReplaced
parameter_list|()
block|{
name|stringModifier
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|,
literal|"An"
argument_list|)
expr_stmt|;
name|String
name|modifiedString
init|=
name|stringModifier
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|modifiedString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"An original, unmodified string."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoPartsCanBeReplacedWithInsertionFirst ()
specifier|public
name|void
name|twoPartsCanBeReplacedWithInsertionFirst
parameter_list|()
block|{
name|stringModifier
operator|.
name|replace
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|"string "
argument_list|)
expr_stmt|;
name|stringModifier
operator|.
name|replace
argument_list|(
literal|8
argument_list|,
literal|39
argument_list|,
literal|"a modified version"
argument_list|)
expr_stmt|;
name|String
name|modifiedString
init|=
name|stringModifier
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|modifiedString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"This string is a modified version."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoPartsCanBeReplacedWithDeletionFirst ()
specifier|public
name|void
name|twoPartsCanBeReplacedWithDeletionFirst
parameter_list|()
block|{
name|stringModifier
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|stringModifier
operator|.
name|replace
argument_list|(
literal|12
argument_list|,
literal|32
argument_list|,
literal|"modified"
argument_list|)
expr_stmt|;
name|String
name|modifiedString
init|=
name|stringModifier
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|modifiedString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"the modified string."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replacedPartsMayTouch ()
specifier|public
name|void
name|replacedPartsMayTouch
parameter_list|()
block|{
name|stringModifier
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|stringModifier
operator|.
name|replace
argument_list|(
literal|8
argument_list|,
literal|32
argument_list|,
literal|"The modified"
argument_list|)
expr_stmt|;
name|String
name|modifiedString
init|=
name|stringModifier
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|modifiedString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"The modified string."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replacedPartsMustNotOverlap ()
specifier|public
name|void
name|replacedPartsMustNotOverlap
parameter_list|()
block|{
name|stringModifier
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|stringModifier
operator|.
name|replace
argument_list|(
literal|8
argument_list|,
literal|32
argument_list|,
literal|"The modified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexMustNotBeGreaterThanEndIndex ()
specifier|public
name|void
name|startIndexMustNotBeGreaterThanEndIndex
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|stringModifier
operator|.
name|replace
argument_list|(
literal|10
argument_list|,
literal|9
argument_list|,
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexMustNotBeNegative ()
specifier|public
name|void
name|startIndexMustNotBeNegative
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|stringModifier
operator|.
name|replace
argument_list|(
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|newContentCanBeInsertedAtEndOfString ()
specifier|public
name|void
name|newContentCanBeInsertedAtEndOfString
parameter_list|()
block|{
name|stringModifier
operator|.
name|replace
argument_list|(
name|originalString
operator|.
name|length
argument_list|()
argument_list|,
name|originalString
operator|.
name|length
argument_list|()
argument_list|,
literal|" And this an addition."
argument_list|)
expr_stmt|;
name|String
name|modifiedString
init|=
name|stringModifier
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|modifiedString
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"This is the original, unmodified string. And this an addition."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|startIndexMustNotBeGreaterThanLengthOfString ()
specifier|public
name|void
name|startIndexMustNotBeGreaterThanLengthOfString
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|stringModifier
operator|.
name|replace
argument_list|(
name|originalString
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|originalString
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|endIndexMustNotBeGreaterThanLengthOfString ()
specifier|public
name|void
name|endIndexMustNotBeGreaterThanLengthOfString
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|StringIndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|stringModifier
operator|.
name|replace
argument_list|(
literal|8
argument_list|,
name|originalString
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

