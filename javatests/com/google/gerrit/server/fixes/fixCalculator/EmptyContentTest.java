begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.fixes.fixCalculator
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|fixCalculator
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|testing
operator|.
name|FixResultSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|testing
operator|.
name|GitEditSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|FixCalculator
operator|.
name|FixResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|EmptyContentTest
specifier|public
class|class
name|EmptyContentTest
block|{
annotation|@
name|Test
DECL|method|insertSingleLineNoEOL ()
specifier|public
name|void
name|insertSingleLineNoEOL
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|onlyElement
argument_list|()
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertSingleLineWithEOL ()
specifier|public
name|void
name|insertSingleLineWithEOL
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|onlyElement
argument_list|()
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertMultilineNoEOL ()
specifier|public
name|void
name|insertMultilineNoEOL
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc\nDEFGH"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nDEFGH"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|onlyElement
argument_list|()
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertMultilineWithEOL ()
specifier|public
name|void
name|insertMultilineWithEOL
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc\nDEFGH\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nDEFGH\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|onlyElement
argument_list|()
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

