begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.fixes.fixCalculator
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|fixCalculator
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|testing
operator|.
name|FixResultSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|testing
operator|.
name|GitEditSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
operator|.
name|FixCalculator
operator|.
name|FixResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|OneLineContentWithEOLTest
specifier|public
class|class
name|OneLineContentWithEOLTest
block|{
annotation|@
name|Test
DECL|method|insertSingleLineNoEOLAtStart ()
specifier|public
name|void
name|insertSingleLineNoEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"AbcFirst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertSingleLineNoEOLInTheMiddle ()
specifier|public
name|void
name|insertSingleLineNoEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirstAbc line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertSingleLineNoEOLAtEnd ()
specifier|public
name|void
name|insertSingleLineNoEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First line\nAbc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertSingleLineWithEOLAtStart ()
specifier|public
name|void
name|insertSingleLineWithEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nFirst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertSingleLineWithEOLInTheMiddle ()
specifier|public
name|void
name|insertSingleLineWithEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirstAbc\n line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertSingleLineWithEOLAtEnd ()
specifier|public
name|void
name|insertSingleLineWithEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First line\nAbc\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertMultilineLineWithEOLAtStart ()
specifier|public
name|void
name|insertMultilineLineWithEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Abc\nDefgh\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nDefgh\nFirst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertMultilineLineWithEOLInTheMiddle ()
specifier|public
name|void
name|insertMultilineLineWithEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc\nDefgh\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirstAbc\nDefgh\n line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|insertMultilineLineWithEOLAtEnd ()
specifier|public
name|void
name|insertMultilineLineWithEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc\nDefgh\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First line\nAbc\nDefgh\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isInsert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isInsert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithSingleLineNoEOLAtStart ()
specifier|public
name|void
name|replaceWithSingleLineNoEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abcrst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithSingleLineNoEOLInTheMiddle ()
specifier|public
name|void
name|replaceWithSingleLineNoEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirAbc line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithSingleLineNoEOLAtEnd ()
specifier|public
name|void
name|replaceWithSingleLineNoEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First linAbc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|9
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithSingleLineWithEOLAtStart ()
specifier|public
name|void
name|replaceWithSingleLineWithEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nrst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithSingleLineWithEOLInTheMiddle ()
specifier|public
name|void
name|replaceWithSingleLineWithEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirAbc\n line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithSingleLineWithEOLAtEnd ()
specifier|public
name|void
name|replaceWithSingleLineWithEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First liAbc\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|8
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceMultilineLineWithEOLAtStart ()
specifier|public
name|void
name|replaceMultilineLineWithEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"Abc\nDefgh\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nDefgh\nrst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceMultilineLineWithEOLInTheMiddle ()
specifier|public
name|void
name|replaceMultilineLineWithEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc\nDefgh\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirAbc\nDefgh\n line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceMultilineLineWithEOLAtEnd ()
specifier|public
name|void
name|replaceMultilineLineWithEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc\nDefgh\n"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First liAbc\nDefgh\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|8
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceMultilineLineNoEOLAtStart ()
specifier|public
name|void
name|replaceMultilineLineNoEOLAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"Abc\nDefgh"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc\nDefghrst line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceMultilineLineNoEOLInTheMiddle ()
specifier|public
name|void
name|replaceMultilineLineNoEOLInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|"Abc\nDefgh"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"FirAbc\nDefgh line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceMultilineLineNoEOLAtEnd ()
specifier|public
name|void
name|replaceMultilineLineNoEOLAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc\nDefgh"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First liAbc\nDefgh"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|8
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWholeContent ()
specifier|public
name|void
name|replaceWholeContent
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"Abc"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Abc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteWholeContent ()
specifier|public
name|void
name|deleteWholeContent
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isDelete
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isDelete
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAtStart ()
specifier|public
name|void
name|deleteAtStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"t line\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isDelete
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteInTheMiddle ()
specifier|public
name|void
name|deleteInTheMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Firstne\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isDelete
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAtEnd ()
specifier|public
name|void
name|deleteAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|FixResult
name|fixResult
init|=
name|FixCalculatorVariousTest
operator|.
name|calculateFixSingleReplacement
argument_list|(
literal|"First line\n"
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|text
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"First l"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fixResult
argument_list|)
operator|.
name|edits
argument_list|()
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Edit
name|edit
init|=
name|fixResult
operator|.
name|edits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isReplace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|internalEdits
argument_list|()
operator|.
name|onlyElement
argument_list|()
operator|.
name|isDelete
argument_list|(
literal|7
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

