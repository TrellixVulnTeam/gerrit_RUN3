begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ContributorAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|PluginConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ProjectConfigTest
specifier|public
class|class
name|ProjectConfigTest
extends|extends
name|GerritBaseTests
block|{
DECL|field|LABEL_SCORES_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|LABEL_SCORES_CONFIG
init|=
literal|"  copyMinScore = "
operator|+
operator|!
name|LabelType
operator|.
name|DEF_COPY_MIN_SCORE
operator|+
literal|"\n"
operator|+
literal|"  copyMaxScore = "
operator|+
operator|!
name|LabelType
operator|.
name|DEF_COPY_MAX_SCORE
operator|+
literal|"\n"
operator|+
literal|"  copyAllScoresOnMergeFirstParentUpdate = "
operator|+
operator|!
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
operator|+
literal|"\n"
operator|+
literal|"  copyAllScoresOnTrivialRebase = "
operator|+
operator|!
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
operator|+
literal|"\n"
operator|+
literal|"  copyAllScoresIfNoCodeChange = "
operator|+
operator|!
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
operator|+
literal|"\n"
operator|+
literal|"  copyAllScoresIfNoChange = "
operator|+
operator|!
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CHANGE
operator|+
literal|"\n"
decl_stmt|;
DECL|field|developers
specifier|private
specifier|final
name|GroupReference
name|developers
init|=
operator|new
name|GroupReference
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"X"
argument_list|)
argument_list|,
literal|"Developers"
argument_list|)
decl_stmt|;
DECL|field|staff
specifier|private
specifier|final
name|GroupReference
name|staff
init|=
operator|new
name|GroupReference
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"Y"
argument_list|)
argument_list|,
literal|"Staff"
argument_list|)
decl_stmt|;
DECL|field|db
specifier|private
name|Repository
name|db
decl_stmt|;
DECL|field|tr
specifier|private
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"repo"
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfig ()
specifier|public
name|void
name|readConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[access \"refs/heads/*\"]\n"
operator|+
literal|"  exclusiveGroupPermissions = read submit create\n"
operator|+
literal|"  submit = group Developers\n"
operator|+
literal|"  push = group Developers\n"
operator|+
literal|"  read = group Developers\n"
operator|+
literal|"[accounts]\n"
operator|+
literal|"  sameGroupVisibility = deny group Developers\n"
operator|+
literal|"  sameGroupVisibility = block group Staff\n"
operator|+
literal|"[contributor-agreement \"Individual\"]\n"
operator|+
literal|"  description = A simple description\n"
operator|+
literal|"  accepted = group Developers\n"
operator|+
literal|"  accepted = group Staff\n"
operator|+
literal|"  autoVerify = group Developers\n"
operator|+
literal|"  agreementUrl = http://www.example.com/agree\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getAccountsSection
argument_list|()
operator|.
name|getSameGroupVisibility
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ContributorAgreement
name|ca
init|=
name|cfg
operator|.
name|getContributorAgreement
argument_list|(
literal|"Individual"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Individual"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A simple description"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getAgreementUrl
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"http://www.example.com/agree"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getAccepted
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getAccepted
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|developers
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getAccepted
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Staff"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ca
operator|.
name|getAutoVerify
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Developers"
argument_list|)
expr_stmt|;
name|AccessSection
name|section
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|section
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|Permission
name|create
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|Permission
name|submit
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
decl_stmt|;
name|Permission
name|read
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|Permission
name|push
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|submit
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|read
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|push
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigLabelDefaultValue ()
specifier|public
name|void
name|readConfigLabelDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[label \"CustomLabel\"]\n"
operator|+
literal|"  value = -1 Negative\n"
comment|// No leading space before 0.
operator|+
literal|"  value = 0 No Score\n"
operator|+
literal|"  value =  1 Positive\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|labels
init|=
name|cfg
operator|.
name|getLabelSections
argument_list|()
decl_stmt|;
name|Short
name|dv
init|=
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|dv
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigLabelOldStyleWithLeadingSpace ()
specifier|public
name|void
name|readConfigLabelOldStyleWithLeadingSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[label \"CustomLabel\"]\n"
operator|+
literal|"  value = -1 Negative\n"
comment|// Leading space before 0.
operator|+
literal|"  value =  0 No Score\n"
operator|+
literal|"  value =  1 Positive\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|labels
init|=
name|cfg
operator|.
name|getLabelSections
argument_list|()
decl_stmt|;
name|Short
name|dv
init|=
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|dv
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigLabelDefaultValueInRange ()
specifier|public
name|void
name|readConfigLabelDefaultValueInRange
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[label \"CustomLabel\"]\n"
operator|+
literal|"  value = -1 Negative\n"
operator|+
literal|"  value = 0 No Score\n"
operator|+
literal|"  value =  1 Positive\n"
operator|+
literal|"  defaultValue = -1\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|labels
init|=
name|cfg
operator|.
name|getLabelSections
argument_list|()
decl_stmt|;
name|Short
name|dv
init|=
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|dv
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigLabelDefaultValueNotInRange ()
specifier|public
name|void
name|readConfigLabelDefaultValueNotInRange
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[label \"CustomLabel\"]\n"
operator|+
literal|"  value = -1 Negative\n"
operator|+
literal|"  value = 0 No Score\n"
operator|+
literal|"  value =  1 Positive\n"
operator|+
literal|"  defaultValue = -2\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"project.config: Invalid defaultValue \"-2\" for label \"CustomLabel\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigLabelScores ()
specifier|public
name|void
name|readConfigLabelScores
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[label \"CustomLabel\"]\n"
operator|+
name|LABEL_SCORES_CONFIG
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|labels
init|=
name|cfg
operator|.
name|getLabelSections
argument_list|()
decl_stmt|;
name|LabelType
name|type
init|=
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|type
operator|.
name|isCopyMinScore
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|LabelType
operator|.
name|DEF_COPY_MIN_SCORE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|type
operator|.
name|isCopyMaxScore
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|LabelType
operator|.
name|DEF_COPY_MAX_SCORE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|type
operator|.
name|isCopyAllScoresOnMergeFirstParentUpdate
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|type
operator|.
name|isCopyAllScoresOnTrivialRebase
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|type
operator|.
name|isCopyAllScoresIfNoCodeChange
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|type
operator|.
name|isCopyAllScoresIfNoChange
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CHANGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editConfig ()
specifier|public
name|void
name|editConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[access \"refs/heads/*\"]\n"
operator|+
literal|"  exclusiveGroupPermissions = read submit\n"
operator|+
literal|"  submit = group Developers\n"
operator|+
literal|"  upload = group Developers\n"
operator|+
literal|"  read = group Developers\n"
operator|+
literal|"[accounts]\n"
operator|+
literal|"  sameGroupVisibility = deny group Developers\n"
operator|+
literal|"  sameGroupVisibility = block group Staff\n"
operator|+
literal|"[contributor-agreement \"Individual\"]\n"
operator|+
literal|"  description = A simple description\n"
operator|+
literal|"  accepted = group Developers\n"
operator|+
literal|"  autoVerify = group Developers\n"
operator|+
literal|"  agreementUrl = http://www.example.com/agree\n"
operator|+
literal|"[label \"CustomLabel\"]\n"
operator|+
name|LABEL_SCORES_CONFIG
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|AccessSection
name|section
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|getAccountsSection
argument_list|()
operator|.
name|setSameGroupVisibility
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|cfg
operator|.
name|resolve
argument_list|(
name|staff
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Permission
name|submit
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
decl_stmt|;
name|submit
operator|.
name|add
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|cfg
operator|.
name|resolve
argument_list|(
name|staff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ContributorAgreement
name|ca
init|=
name|cfg
operator|.
name|getContributorAgreement
argument_list|(
literal|"Individual"
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setAccepted
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|cfg
operator|.
name|resolve
argument_list|(
name|staff
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAutoVerify
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setDescription
argument_list|(
literal|"A new description"
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"project.config"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"[access \"refs/heads/*\"]\n"
operator|+
literal|"  exclusiveGroupPermissions = read submit\n"
operator|+
literal|"  submit = group Developers\n"
operator|+
literal|"\tsubmit = group Staff\n"
operator|+
literal|"  upload = group Developers\n"
operator|+
literal|"  read = group Developers\n"
operator|+
literal|"[accounts]\n"
operator|+
literal|"  sameGroupVisibility = group Staff\n"
operator|+
literal|"[contributor-agreement \"Individual\"]\n"
operator|+
literal|"  description = A new description\n"
operator|+
literal|"  accepted = group Staff\n"
operator|+
literal|"  agreementUrl = http://www.example.com/agree\n"
operator|+
literal|"[label \"CustomLabel\"]\n"
operator|+
name|LABEL_SCORES_CONFIG
operator|+
literal|"\tfunction = MaxWithBlock\n"
comment|// label gets this function when it is created
operator|+
literal|"\tdefaultValue = 0\n"
argument_list|)
expr_stmt|;
comment|//  label gets this value when it is created
block|}
annotation|@
name|Test
DECL|method|editConfigLabelValues ()
specifier|public
name|void
name|editConfigLabelValues
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
literal|"My-Label"
argument_list|,
name|Util
operator|.
name|category
argument_list|(
literal|"My-Label"
argument_list|,
name|Util
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|,
name|Util
operator|.
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|Util
operator|.
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"project.config"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"[label \"My-Label\"]\n"
operator|+
literal|"\tfunction = MaxWithBlock\n"
operator|+
literal|"\tdefaultValue = 0\n"
operator|+
literal|"\tvalue = -1 Negative\n"
operator|+
literal|"\tvalue = 0 No score\n"
operator|+
literal|"\tvalue = +1 Positive\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addCommentLink ()
specifier|public
name|void
name|addCommentLink
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|CommentLinkInfoImpl
name|cm
init|=
operator|new
name|CommentLinkInfoImpl
argument_list|(
literal|"Test"
argument_list|,
literal|"abc.*"
argument_list|,
literal|null
argument_list|,
literal|"<a>link</a>"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|addCommentLinkSection
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"project.config"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"[commentlink \"Test\"]\n\tmatch = abc.*\n\thtml =<a>link</a>\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editConfigMissingGroupTableEntry ()
specifier|public
name|void
name|editConfigMissingGroupTableEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[access \"refs/heads/*\"]\n"
operator|+
literal|"  exclusiveGroupPermissions = read submit\n"
operator|+
literal|"  submit = group People Who Can Submit\n"
operator|+
literal|"  upload = group Developers\n"
operator|+
literal|"  read = group Developers\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|AccessSection
name|section
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|Permission
name|submit
init|=
name|section
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
decl_stmt|;
name|submit
operator|.
name|add
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|cfg
operator|.
name|resolve
argument_list|(
name|staff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"project.config"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"[access \"refs/heads/*\"]\n"
operator|+
literal|"  exclusiveGroupPermissions = read submit\n"
operator|+
literal|"  submit = group People Who Can Submit\n"
operator|+
literal|"\tsubmit = group Staff\n"
operator|+
literal|"  upload = group Developers\n"
operator|+
literal|"  read = group Developers\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readExistingPluginConfig ()
specifier|public
name|void
name|readExistingPluginConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[plugin \"somePlugin\"]\n"
operator|+
literal|"  key1 = value1\n"
operator|+
literal|"  key2 = value2a\n"
operator|+
literal|"  key2 = value2b\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
literal|"somePlugin"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getNames
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getString
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getStringList
argument_list|(
operator|(
literal|"key2"
operator|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"value2a"
block|,
literal|"value2b"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readUnexistingPluginConfig ()
specifier|public
name|void
name|readUnexistingPluginConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
literal|"somePlugin"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getNames
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editPluginConfig ()
specifier|public
name|void
name|editPluginConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[plugin \"somePlugin\"]\n"
operator|+
literal|"  key1 = value1\n"
operator|+
literal|"  key2 = value2a\n"
operator|+
literal|"  key2 = value2b\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
literal|"somePlugin"
argument_list|)
decl_stmt|;
name|pluginCfg
operator|.
name|setString
argument_list|(
literal|"key1"
argument_list|,
literal|"updatedValue1"
argument_list|)
expr_stmt|;
name|pluginCfg
operator|.
name|setStringList
argument_list|(
literal|"key2"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"updatedValue2a"
argument_list|,
literal|"updatedValue2b"
argument_list|)
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"project.config"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"[plugin \"somePlugin\"]\n"
operator|+
literal|"\tkey1 = updatedValue1\n"
operator|+
literal|"\tkey2 = updatedValue2a\n"
operator|+
literal|"\tkey2 = updatedValue2b\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readPluginConfigGroupReference ()
specifier|public
name|void
name|readPluginConfigGroupReference
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[plugin \"somePlugin\"]\nkey1 = "
operator|+
name|developers
operator|.
name|toConfigValue
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
literal|"somePlugin"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getNames
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getGroupReference
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|developers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readPluginConfigGroupReferenceNotInGroupsFile ()
specifier|public
name|void
name|readPluginConfigGroupReferenceNotInGroupsFile
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[plugin \"somePlugin\"]\nkey1 = "
operator|+
name|staff
operator|.
name|toConfigValue
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"project.config: group \""
operator|+
name|staff
operator|.
name|getName
argument_list|()
operator|+
literal|"\" not in "
operator|+
name|GroupList
operator|.
name|FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editPluginConfigGroupReference ()
specifier|public
name|void
name|editPluginConfigGroupReference
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[plugin \"somePlugin\"]\nkey1 = "
operator|+
name|developers
operator|.
name|toConfigValue
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
literal|"somePlugin"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getNames
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginCfg
operator|.
name|getGroupReference
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|developers
argument_list|)
expr_stmt|;
name|pluginCfg
operator|.
name|setGroupReference
argument_list|(
literal|"key1"
argument_list|,
name|staff
argument_list|)
expr_stmt|;
name|rev
operator|=
name|commit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"project.config"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"[plugin \"somePlugin\"]\n\tkey1 = "
operator|+
name|staff
operator|.
name|toConfigValue
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|text
argument_list|(
name|rev
argument_list|,
literal|"groups"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"# UUID\tGroup Name\n"
operator|+
literal|"#\n"
operator|+
name|staff
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"     \t"
operator|+
name|staff
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readCommentLinks ()
specifier|public
name|void
name|readCommentLinks
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[commentlink \"bugzilla\"]\n"
operator|+
literal|"\tmatch = \"(bug\\\\s+#?)(\\\\d+)\"\n"
operator|+
literal|"\tlink = http://bugs.example.com/show_bug.cgi?id=$2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCommentLinkSections
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|CommentLinkInfoImpl
argument_list|(
literal|"bugzilla"
argument_list|,
literal|"(bug\\s+#?)(\\d+)"
argument_list|,
literal|"http://bugs.example.com/show_bug.cgi?id=$2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readCommentLinksNoHtmlOrLinkButEnabled ()
specifier|public
name|void
name|readCommentLinksNoHtmlOrLinkButEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[commentlink \"bugzilla\"]\n \tenabled = true"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCommentLinkSections
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|CommentLinkInfoImpl
operator|.
name|Enabled
argument_list|(
literal|"bugzilla"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readCommentLinksNoHtmlOrLinkAndDisabled ()
specifier|public
name|void
name|readCommentLinksNoHtmlOrLinkAndDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[commentlink \"bugzilla\"]\n \tenabled = false"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCommentLinkSections
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|CommentLinkInfoImpl
operator|.
name|Disabled
argument_list|(
literal|"bugzilla"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readCommentLinkInvalidPattern ()
specifier|public
name|void
name|readCommentLinkInvalidPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[commentlink \"bugzilla\"]\n"
operator|+
literal|"\tmatch = \"(bugs{+#?)(d+)\"\n"
operator|+
literal|"\tlink = http://bugs.example.com/show_bug.cgi?id=$2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCommentLinkSections
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|ValidationError
argument_list|(
literal|"project.config: Invalid pattern \"(bugs{+#?)(d+)\" in commentlink.bugzilla.match: "
operator|+
literal|"Illegal repetition near index 4\n"
operator|+
literal|"(bugs{+#?)(d+)\n"
operator|+
literal|"    ^"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readCommentLinkRawHtml ()
specifier|public
name|void
name|readCommentLinkRawHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[commentlink \"bugzilla\"]\n"
operator|+
literal|"\tmatch = \"(bugs#?)(d+)\"\n"
operator|+
literal|"\thtml = http://bugs.example.com/show_bug.cgi?id=$2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCommentLinkSections
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|ValidationError
argument_list|(
literal|"project.config: Error in pattern \"(bugs#?)(d+)\" in commentlink.bugzilla.match: "
operator|+
literal|"Raw html replacement not allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigPushRefsForStarIsMigrated ()
specifier|public
name|void
name|readConfigPushRefsForStarIsMigrated
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[access \"refs/for/*\"]\n"
operator|+
literal|"  push = group Developers\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|AccessSection
name|as
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/for/*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|as
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|as
operator|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|as
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|as
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|false
argument_list|)
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|developers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigPushRefsStarIsMigrated ()
specifier|public
name|void
name|readConfigPushRefsStarIsMigrated
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[access \"refs/*\"]\n"
operator|+
literal|"  push = group Developers\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|AccessSection
name|as
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|as
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|as
operator|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|as
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|as
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|false
argument_list|)
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|developers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readConfigPushRefsForRefsHeadsMasterIsMigrated ()
specifier|public
name|void
name|readConfigPushRefsForRefsHeadsMasterIsMigrated
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"groups"
argument_list|,
name|group
argument_list|(
name|developers
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[access \"refs/for/refs/heads/master\"]\n"
operator|+
literal|"  push = group Developers\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|AccessSection
name|as
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|as
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|as
operator|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|as
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|as
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|false
argument_list|)
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|developers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readCommentLinkMatchButNoHtmlOrLink ()
specifier|public
name|void
name|readCommentLinkMatchButNoHtmlOrLink
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|rev
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"project.config"
argument_list|,
literal|"[commentlink \"bugzilla\"]\n"
operator|+
literal|"\tmatch = \"(bugs#?)(d+)\"\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|read
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getCommentLinkSections
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getValidationErrors
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|ValidationError
argument_list|(
literal|"project.config: Error in pattern \"(bugs#?)(d+)\" in commentlink.bugzilla.match: "
operator|+
literal|"commentlink.bugzilla must have either link or html"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|read (RevCommit rev)
specifier|private
name|ProjectConfig
name|read
parameter_list|(
name|RevCommit
name|rev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|db
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|commit (ProjectConfig cfg)
specifier|private
name|RevCommit
name|commit
parameter_list|(
name|ProjectConfig
name|cfg
parameter_list|)
throws|throws
name|IOException
throws|,
name|MissingObjectException
throws|,
name|IncorrectObjectTypeException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|cfg
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|db
argument_list|)
init|)
block|{
name|tr
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setAuthorAndCommitter
argument_list|(
name|md
operator|.
name|getCommitBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|md
operator|.
name|setMessage
argument_list|(
literal|"Edit\n"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|Ref
name|ref
init|=
name|db
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
return|return
name|tr
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|update (RevCommit rev)
specifier|private
name|void
name|update
parameter_list|(
name|RevCommit
name|rev
parameter_list|)
throws|throws
name|Exception
block|{
name|RefUpdate
name|u
init|=
name|db
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|u
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
name|u
operator|.
name|setNewObjectId
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|u
operator|.
name|forceUpdate
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Cannot update ref for test: "
operator|+
name|result
argument_list|)
operator|.
name|that
argument_list|(
name|result
argument_list|)
operator|.
name|isAnyOf
argument_list|(
name|Result
operator|.
name|FAST_FORWARD
argument_list|,
name|Result
operator|.
name|FORCED
argument_list|,
name|Result
operator|.
name|NEW
argument_list|,
name|Result
operator|.
name|NO_CHANGE
argument_list|)
expr_stmt|;
block|}
DECL|method|text (RevCommit rev, String path)
specifier|private
name|String
name|text
parameter_list|(
name|RevCommit
name|rev
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|RevObject
name|blob
init|=
name|tr
operator|.
name|get
argument_list|(
name|rev
operator|.
name|getTree
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|open
argument_list|(
name|blob
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|data
argument_list|)
return|;
block|}
DECL|method|group (GroupReference g)
specifier|private
specifier|static
name|String
name|group
parameter_list|(
name|GroupReference
name|g
parameter_list|)
block|{
return|return
name|g
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"\t"
operator|+
name|g
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
return|;
block|}
block|}
end_class

end_unit

