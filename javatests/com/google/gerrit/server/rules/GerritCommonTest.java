begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.rules
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rules
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|TestLabels
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|ReductionLimitException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|JavaObjectTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Prolog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|StructureTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|SymbolTerm
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GerritCommonTest
specifier|public
class|class
name|GerritCommonTest
extends|extends
name|PrologTestCase
block|{
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|load
argument_list|(
literal|"gerrit"
argument_list|,
literal|"gerrit_common_test.pl"
argument_list|,
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"rules"
argument_list|,
literal|null
argument_list|,
literal|"reductionLimit"
argument_list|,
literal|1300
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"rules"
argument_list|,
literal|null
argument_list|,
literal|"compileReductionLimit"
argument_list|,
operator|(
name|int
operator|)
literal|1e6
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|PrologEnvironment
operator|.
name|Args
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|PrologEnvironment
operator|.
name|Args
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cfg
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUpEnvironment (PrologEnvironment env)
specifier|protected
name|void
name|setUpEnvironment
parameter_list|(
name|PrologEnvironment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|LabelTypes
name|labelTypes
init|=
operator|new
name|LabelTypes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TestLabels
operator|.
name|codeReview
argument_list|()
argument_list|,
name|TestLabels
operator|.
name|verified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ChangeData
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|cd
operator|.
name|getLabelTypes
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|labelTypes
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE_DATA
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|gerritCommon ()
specifier|public
name|void
name|gerritCommon
parameter_list|()
throws|throws
name|Exception
block|{
name|runPrologBasedTests
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reductionLimit ()
specifier|public
name|void
name|reductionLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|PrologEnvironment
name|env
init|=
name|envFactory
operator|.
name|create
argument_list|(
name|machine
argument_list|)
decl_stmt|;
name|setUpEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|String
name|script
init|=
literal|"loopy :- b(5).\nb(N) :- N> 0, !, S = N - 1, b(S).\nb(_) :- true.\n"
decl_stmt|;
name|SymbolTerm
name|nameTerm
init|=
name|SymbolTerm
operator|.
name|create
argument_list|(
literal|"testReductionLimit"
argument_list|)
decl_stmt|;
name|JavaObjectTerm
name|inTerm
init|=
operator|new
name|JavaObjectTerm
argument_list|(
operator|new
name|PushbackReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|script
argument_list|)
argument_list|,
name|Prolog
operator|.
name|PUSHBACK_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|execute
argument_list|(
name|Prolog
operator|.
name|BUILTIN
argument_list|,
literal|"consult_stream"
argument_list|,
name|nameTerm
argument_list|,
name|inTerm
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CompileException
argument_list|(
literal|"Cannot consult "
operator|+
name|nameTerm
argument_list|)
throw|;
block|}
name|ReductionLimitException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ReductionLimitException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|env
operator|.
name|once
argument_list|(
name|Prolog
operator|.
name|BUILTIN
argument_list|,
literal|"call"
argument_list|,
operator|new
name|StructureTerm
argument_list|(
literal|":"
argument_list|,
name|SymbolTerm
operator|.
name|create
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|SymbolTerm
operator|.
name|create
argument_list|(
literal|"loopy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exceeded reduction limit of 1300"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

