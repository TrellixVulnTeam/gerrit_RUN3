begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.permissions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|EDIT_TOPIC_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|SUBMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|ADMIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|DEVS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|allowExclusive
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|deny
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|doNotInherit
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryRepositoryManager
operator|.
name|newRepository
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|CommentLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|CapabilityCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ListGroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsNameProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersNameProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|TransferConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|SingleVersionModule
operator|.
name|SingleVersionListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RefControlTest
specifier|public
class|class
name|RefControlTest
block|{
DECL|method|assertAdminsAreOwnersAndDevsAreNot ()
specifier|private
name|void
name|assertAdminsAreOwnersAndDevsAreNot
parameter_list|()
block|{
name|ProjectControl
name|uBlah
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|uAdmin
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|,
name|ADMIN
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uBlah
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"not owner"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|uAdmin
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"is owner"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertOwner (String ref, ProjectControl u)
specifier|private
name|void
name|assertOwner
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"OWN "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotOwner (ProjectControl u)
specifier|private
name|void
name|assertNotOwner
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"not owner"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotOwner (String ref, ProjectControl u)
specifier|private
name|void
name|assertNotOwner
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"NOT OWN "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanAccess (ProjectControl u)
specifier|private
name|void
name|assertCanAccess
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|access
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|testOrFalse
argument_list|(
name|ProjectPermission
operator|.
name|ACCESS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|access
argument_list|)
operator|.
name|named
argument_list|(
literal|"can access"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAccessDenied (ProjectControl u)
specifier|private
name|void
name|assertAccessDenied
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|access
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|testOrFalse
argument_list|(
name|ProjectPermission
operator|.
name|ACCESS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|access
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot access"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanRead (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanRead
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can read "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotRead (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotRead
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot read "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanSubmit (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanSubmit
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"can submit "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotSubmit (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotSubmit
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"can submit "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanUpload (ProjectControl u)
specifier|private
name|void
name|assertCanUpload
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|canPushToAtLeastOneRef
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"can upload"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCreateChange (String ref, ProjectControl u)
specifier|private
name|void
name|assertCreateChange
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|create
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|CREATE_CHANGE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|create
argument_list|)
operator|.
name|named
argument_list|(
literal|"can create change "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotUpload (ProjectControl u)
specifier|private
name|void
name|assertCannotUpload
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertThat
argument_list|(
name|u
operator|.
name|canPushToAtLeastOneRef
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot upload"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotCreateChange (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotCreateChange
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|create
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|CREATE_CHANGE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|create
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot create change "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|update
argument_list|)
operator|.
name|named
argument_list|(
literal|"can update "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|update
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot update "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanForceUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanForceUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|FORCE_UPDATE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|update
argument_list|)
operator|.
name|named
argument_list|(
literal|"can force push "
operator|+
name|ref
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotForceUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotForceUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|FORCE_UPDATE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|update
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot force push "
operator|+
name|ref
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanVote (int score, PermissionRange range)
specifier|private
name|void
name|assertCanVote
parameter_list|(
name|int
name|score
parameter_list|,
name|PermissionRange
name|range
parameter_list|)
block|{
name|assertThat
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|score
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"can vote "
operator|+
name|score
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotVote (int score, PermissionRange range)
specifier|private
name|void
name|assertCannotVote
parameter_list|(
name|int
name|score
parameter_list|,
name|PermissionRange
name|range
parameter_list|)
block|{
name|assertThat
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|score
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"cannot vote "
operator|+
name|score
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
init|=
operator|new
name|AllProjectsName
argument_list|(
name|AllProjectsNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
init|=
operator|new
name|AllUsersName
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
DECL|field|fixers
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|fixers
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"test.fixers"
argument_list|)
decl_stmt|;
DECL|field|all
specifier|private
specifier|final
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ProjectState
argument_list|>
name|all
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|localKey
specifier|private
name|Project
operator|.
name|NameKey
name|localKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"local"
argument_list|)
decl_stmt|;
DECL|field|local
specifier|private
name|ProjectConfig
name|local
decl_stmt|;
DECL|field|parentKey
specifier|private
name|Project
operator|.
name|NameKey
name|parentKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|ProjectConfig
name|parent
decl_stmt|;
DECL|field|repoManager
specifier|private
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|projectCache
specifier|private
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|sectionSorter
specifier|private
name|PermissionCollection
operator|.
name|Factory
name|sectionSorter
decl_stmt|;
DECL|field|changeControlFactory
specifier|private
name|ChangeControl
operator|.
name|Factory
name|changeControlFactory
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|permissionBackend
annotation|@
name|Inject
specifier|private
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|capabilityCollectionFactory
annotation|@
name|Inject
specifier|private
name|CapabilityCollection
operator|.
name|Factory
name|capabilityCollectionFactory
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|private
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|singleVersionListener
annotation|@
name|Inject
specifier|private
name|SingleVersionListener
name|singleVersionListener
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|private
name|InMemoryDatabase
name|schemaFactory
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|private
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
DECL|field|refFilterFactory
annotation|@
name|Inject
specifier|private
name|DefaultRefFilter
operator|.
name|Factory
name|refFilterFactory
decl_stmt|;
DECL|field|transferConfig
annotation|@
name|Inject
specifier|private
name|TransferConfig
name|transferConfig
decl_stmt|;
DECL|field|metricMaker
annotation|@
name|Inject
specifier|private
name|MetricMaker
name|metricMaker
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|repoManager
operator|=
operator|new
name|InMemoryRepositoryManager
argument_list|()
expr_stmt|;
name|projectCache
operator|=
operator|new
name|ProjectCache
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ProjectState
name|getAllProjects
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|allProjectsName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectState
name|getAllUsers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectState
name|get
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
return|return
name|all
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evict
parameter_list|(
name|Project
name|p
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Project
name|p
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|ImmutableSortedSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|all
parameter_list|()
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableSortedSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|byName
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|newProjectName
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|guessRelevantGroupUUIDs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProjectState
name|checkedGet
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|all
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evict
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|ProjectState
name|checkedGet
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|boolean
name|strict
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|all
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|InMemoryModule
argument_list|()
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allProjectsName
argument_list|)
decl_stmt|;
name|ProjectConfig
name|allProjects
init|=
operator|new
name|ProjectConfig
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|allProjectsName
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|allProjects
operator|.
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|LabelType
name|cr
init|=
name|Util
operator|.
name|codeReview
argument_list|()
decl_stmt|;
name|allProjects
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|cr
operator|.
name|getName
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|allProjects
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|singleVersionListener
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|schemaCreator
operator|.
name|create
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|singleVersionListener
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|Cache
argument_list|<
name|SectionSortCache
operator|.
name|EntryKey
argument_list|,
name|SectionSortCache
operator|.
name|EntryVal
argument_list|>
name|c
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|sectionSorter
operator|=
operator|new
name|PermissionCollection
operator|.
name|Factory
argument_list|(
operator|new
name|SectionSortCache
argument_list|(
name|c
argument_list|)
argument_list|,
name|metricMaker
argument_list|)
expr_stmt|;
name|parent
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|parent
operator|.
name|load
argument_list|(
name|newRepository
argument_list|(
name|parentKey
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|local
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|localKey
argument_list|)
expr_stmt|;
name|local
operator|.
name|load
argument_list|(
name|newRepository
argument_list|(
name|localKey
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|getProject
argument_list|()
operator|.
name|setParentName
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|changeControlFactory
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ChangeControl
operator|.
name|Factory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|schemaFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerProject ()
specifier|public
name|void
name|ownerProject
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|denyOwnerProject ()
specifier|public
name|void
name|denyOwnerProject
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockOwnerProject ()
specifier|public
name|void
name|blockOwnerProject
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchDelegation1 ()
specifier|public
name|void
name|branchDelegation1
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/x/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|uDev
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchDelegation2 ()
specifier|public
name|void
name|branchDelegation2
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/x/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|fixers
argument_list|,
literal|"refs/heads/x/y/*"
argument_list|)
expr_stmt|;
name|doNotInherit
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
literal|"refs/heads/x/y/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|uDev
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|ProjectControl
name|uFix
init|=
name|user
argument_list|(
name|local
argument_list|,
name|fixers
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uFix
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/bar"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_SingleBranchDeniesUpload ()
specifier|public
name|void
name|inheritRead_SingleBranchDeniesUpload
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/for/refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/foobar"
argument_list|)
expr_stmt|;
name|doNotInherit
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
literal|"refs/heads/foobar"
argument_list|)
expr_stmt|;
name|doNotInherit
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
literal|"refs/for/refs/heads/foobar"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotCreateChange
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockPushDrafts ()
specifier|public
name|void
name|blockPushDrafts
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/for/refs/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|PUSH
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockPushDraftsUnblockAdmin ()
specifier|public
name|void
name|blockPushDraftsUnblockAdmin
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/drafts/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|ProjectControl
name|a
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"a"
argument_list|,
name|ADMIN
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|PUSH
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"push is allowed"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|PUSH
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"push is not allowed"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_SingleBranchDoesNotOverrideInherited ()
specifier|public
name|void
name|inheritRead_SingleBranchDoesNotOverrideInherited
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/for/refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/foobar"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritDuplicateSections ()
specifier|public
name|void
name|inheritDuplicateSections
parameter_list|()
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|assertCanAccess
argument_list|(
name|user
argument_list|(
name|local
argument_list|,
literal|"a"
argument_list|,
name|ADMIN
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|=
operator|new
name|ProjectConfig
argument_list|(
name|localKey
argument_list|)
expr_stmt|;
name|local
operator|.
name|load
argument_list|(
name|newRepository
argument_list|(
name|localKey
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|getProject
argument_list|()
operator|.
name|setParentName
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertCanAccess
argument_list|(
name|user
argument_list|(
name|local
argument_list|,
literal|"d"
argument_list|,
name|DEVS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_OverrideWithDeny ()
specifier|public
name|void
name|inheritRead_OverrideWithDeny
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertAccessDenied
argument_list|(
name|user
argument_list|(
name|local
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_AppendWithDenyOfRef ()
specifier|public
name|void
name|inheritRead_AppendWithDenyOfRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanAccess
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_OverridesAndDeniesOfRef ()
specifier|public
name|void
name|inheritRead_OverridesAndDeniesOfRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCanAccess
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritSubmit_OverridesAndDeniesOfRef ()
specifier|public
name|void
name|inheritSubmit_OverridesAndDeniesOfRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|deny
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCannotSubmit
argument_list|(
literal|"refs/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotSubmit
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanSubmit
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotUploadToAnyRef ()
specifier|public
name|void
name|cannotUploadToAnyRef
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/for/refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCannotUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCannotCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernamePatternCanUploadToAnyRef ()
specifier|public
name|void
name|usernamePatternCanUploadToAnyRef
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/users/${username}/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"a-registered-user"
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernamePatternNonRegex ()
specifier|public
name|void
name|usernamePatternNonRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"refs/sb/${username}/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"u"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"d"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/d/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/d/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernamePatternWithRegex ()
specifier|public
name|void
name|usernamePatternWithRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"^refs/sb/${username}/heads/.*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"d.v"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"dev"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/dev/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/dev/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernameEmailPatternWithRegex ()
specifier|public
name|void
name|usernameEmailPatternWithRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"^refs/sb/${username}/heads/.*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"d.v@ger-rit.org"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|local
argument_list|,
literal|"dev@ger-rit.org"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/dev@ger-rit.org/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/dev@ger-rit.org/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortWithRegex ()
specifier|public
name|void
name|sortWithRegex
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|DEVS
argument_list|,
literal|"^refs/heads/.*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"^refs/heads/.*-QA-.*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foo-QA-bar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foo-QA-bar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockRule_ParentBlocksChild ()
specifier|public
name|void
name|blockRule_ParentBlocksChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/tags/V10"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockRule_ParentBlocksChildEvenIfAlreadyBlockedInChild ()
specifier|public
name|void
name|blockRule_ParentBlocksChildEvenIfAlreadyBlockedInChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/tags/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/tags/V10"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockLabelRange_ParentBlocksChild ()
specifier|public
name|void
name|blockLabelRange_ParentBlocksChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockLabelRange_ParentBlocksChildEvenIfAlreadyBlockedInChild ()
specifier|public
name|void
name|blockLabelRange_ParentBlocksChildEvenIfAlreadyBlockedInChild
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritSubmit_AllowInChildDoesntAffectUnblockInParent ()
specifier|public
name|void
name|inheritSubmit_AllowInChildDoesntAffectUnblockInParent
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|SUBMIT
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|SUBMIT
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"submit is allowed"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockNoForce ()
specifier|public
name|void
name|unblockNoForce
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockForce ()
specifier|public
name|void
name|unblockForce
parameter_list|()
block|{
name|PermissionRule
name|r
init|=
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanForceUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRead_NotPossible ()
specifier|public
name|void
name|unblockRead_NotPossible
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|READ
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|READ
argument_list|,
name|ADMIN
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockForceWithAllowNoForce_NotPossible ()
specifier|public
name|void
name|unblockForceWithAllowNoForce_NotPossible
parameter_list|()
block|{
name|PermissionRule
name|r
init|=
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotForceUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRef_Fails ()
specifier|public
name|void
name|unblockMoreSpecificRef_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRefInLocal_Fails ()
specifier|public
name|void
name|unblockMoreSpecificRefInLocal_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRefWithExclusiveFlag ()
specifier|public
name|void
name|unblockMoreSpecificRefWithExclusiveFlag
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockVoteMoreSpecificRefWithExclusiveFlag ()
specifier|public
name|void
name|unblockVoteMoreSpecificRefWithExclusiveFlag
parameter_list|()
block|{
name|String
name|perm
init|=
name|LABEL
operator|+
literal|"Code-Review"
decl_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|perm
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allowExclusive
argument_list|(
name|local
argument_list|,
name|perm
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|perm
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockFromParentDoesNotAffectChild ()
specifier|public
name|void
name|unblockFromParentDoesNotAffectChild
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockFromParentDoesNotAffectChildDifferentGroups ()
specifier|public
name|void
name|unblockFromParentDoesNotAffectChildDifferentGroups
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRefInLocalWithExclusiveFlag_Fails ()
specifier|public
name|void
name|unblockMoreSpecificRefInLocalWithExclusiveFlag_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockMoreSpecificRefWithinProject ()
specifier|public
name|void
name|blockMoreSpecificRefWithinProject
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/secret"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/secret"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockOtherPermissionWithMoreSpecificRefAndExclusiveFlag_Fails ()
specifier|public
name|void
name|unblockOtherPermissionWithMoreSpecificRefAndExclusiveFlag_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|SUBMIT
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockLargerScope_Fails ()
specifier|public
name|void
name|unblockLargerScope_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInLocal_Fails ()
specifier|public
name|void
name|unblockInLocal_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|fixers
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|f
init|=
name|user
argument_list|(
name|local
argument_list|,
name|fixers
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInParentBlockInLocal ()
specifier|public
name|void
name|unblockInParentBlockInLocal
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|parent
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|PUSH
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockForceEditTopicName ()
specifier|public
name|void
name|unblockForceEditTopicName
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canForceEditTopicName
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"u can edit topic name"
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInLocalForceEditTopicName_Fails ()
specifier|public
name|void
name|unblockInLocalForceEditTopicName_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|EDIT_TOPIC_NAME
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canForceEditTopicName
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"u can't edit topic name"
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRange ()
specifier|public
name|void
name|unblockRange
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeOnMoreSpecificRef_Fails ()
specifier|public
name|void
name|unblockRangeOnMoreSpecificRef_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeOnLargerScope_Fails ()
specifier|public
name|void
name|unblockRangeOnLargerScope_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonconfiguredCannotVote ()
specifier|public
name|void
name|nonconfiguredCannotVote
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInLocalRange_Fails ()
specifier|public
name|void
name|unblockInLocalRange_Fails
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeForChangeOwner ()
specifier|public
name|void
name|unblockRangeForChangeOwner
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeForNotChangeOwner ()
specifier|public
name|void
name|unblockRangeForNotChangeOwner
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockChangeOwnerVote ()
specifier|public
name|void
name|blockChangeOwnerVote
parameter_list|()
block|{
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|CHANGE_OWNER
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unionOfPermissibleVotes ()
specifier|public
name|void
name|unionOfPermissibleVotes
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unionOfPermissibleVotesPermissionOrder ()
specifier|public
name|void
name|unionOfPermissibleVotesPermissionOrder
parameter_list|()
block|{
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unionOfBlockedVotes ()
specifier|public
name|void
name|unionOfBlockedVotes
parameter_list|()
block|{
name|allow
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|,
name|DEVS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|parent
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|local
argument_list|,
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|+
literal|1
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockOwner ()
specifier|public
name|void
name|blockOwner
parameter_list|()
block|{
name|block
argument_list|(
name|parent
argument_list|,
name|OWNER
argument_list|,
name|ANONYMOUS_USERS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|allow
argument_list|(
name|local
argument_list|,
name|OWNER
argument_list|,
name|DEVS
argument_list|,
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|user
argument_list|(
name|local
argument_list|,
name|DEVS
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateRefPatternsOK ()
specifier|public
name|void
name|validateRefPatternsOK
parameter_list|()
throws|throws
name|Exception
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"refs/*"
argument_list|)
expr_stmt|;
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/heads/*"
argument_list|)
expr_stmt|;
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/tags/[0-9a-zA-Z-_.]+"
argument_list|)
expr_stmt|;
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"refs/heads/review/${username}/*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidNameException
operator|.
name|class
argument_list|)
DECL|method|testValidateBadRefPatternDoubleCaret ()
specifier|public
name|void
name|testValidateBadRefPatternDoubleCaret
parameter_list|()
throws|throws
name|Exception
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^^refs/*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidNameException
operator|.
name|class
argument_list|)
DECL|method|testValidateBadRefPatternDanglingCharacter ()
specifier|public
name|void
name|testValidateBadRefPatternDanglingCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateRefPatternNoDanglingCharacter ()
specifier|public
name|void
name|validateRefPatternNoDanglingCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}"
argument_list|)
expr_stmt|;
block|}
DECL|method|add (ProjectConfig pc)
specifier|private
name|InMemoryRepository
name|add
parameter_list|(
name|ProjectConfig
name|pc
parameter_list|)
block|{
name|SitePaths
name|sitePaths
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|CommentLinkInfo
argument_list|>
name|commentLinks
init|=
literal|null
decl_stmt|;
name|InMemoryRepository
name|repo
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|pc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pc
operator|.
name|getProject
argument_list|()
operator|==
literal|null
condition|)
block|{
name|pc
operator|.
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|all
operator|.
name|put
argument_list|(
name|pc
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ProjectState
argument_list|(
name|sitePaths
argument_list|,
name|projectCache
argument_list|,
name|allProjectsName
argument_list|,
name|allUsersName
argument_list|,
name|repoManager
argument_list|,
name|commentLinks
argument_list|,
name|capabilityCollectionFactory
argument_list|,
name|transferConfig
argument_list|,
name|metricMaker
argument_list|,
name|pc
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
DECL|method|user (ProjectConfig local, AccountGroup.UUID... memberOf)
specifier|private
name|ProjectControl
name|user
parameter_list|(
name|ProjectConfig
name|local
parameter_list|,
name|AccountGroup
operator|.
name|UUID
modifier|...
name|memberOf
parameter_list|)
block|{
return|return
name|user
argument_list|(
name|local
argument_list|,
literal|null
argument_list|,
name|memberOf
argument_list|)
return|;
block|}
DECL|method|user ( ProjectConfig local, @Nullable String name, AccountGroup.UUID... memberOf)
specifier|private
name|ProjectControl
name|user
parameter_list|(
name|ProjectConfig
name|local
parameter_list|,
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
name|AccountGroup
operator|.
name|UUID
modifier|...
name|memberOf
parameter_list|)
block|{
return|return
operator|new
name|ProjectControl
argument_list|(
name|Collections
operator|.
expr|<
name|AccountGroup
operator|.
name|UUID
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|AccountGroup
operator|.
name|UUID
operator|>
name|emptySet
argument_list|()
argument_list|,
name|sectionSorter
argument_list|,
name|changeControlFactory
argument_list|,
name|permissionBackend
argument_list|,
name|refFilterFactory
argument_list|,
operator|new
name|MockUser
argument_list|(
name|name
argument_list|,
name|memberOf
argument_list|)
argument_list|,
name|newProjectState
argument_list|(
name|local
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newProjectState (ProjectConfig local)
specifier|private
name|ProjectState
name|newProjectState
parameter_list|(
name|ProjectConfig
name|local
parameter_list|)
block|{
name|add
argument_list|(
name|local
argument_list|)
expr_stmt|;
return|return
name|all
operator|.
name|get
argument_list|(
name|local
operator|.
name|getProject
argument_list|()
operator|.
name|getNameKey
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MockUser
specifier|private
specifier|static
class|class
name|MockUser
extends|extends
name|CurrentUser
block|{
DECL|field|username
annotation|@
name|Nullable
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|GroupMembership
name|groups
decl_stmt|;
DECL|method|MockUser (@ullable String name, AccountGroup.UUID[] groupId)
name|MockUser
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
name|AccountGroup
operator|.
name|UUID
index|[]
name|groupId
parameter_list|)
block|{
name|username
operator|=
name|name
expr_stmt|;
name|ArrayList
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|groupIds
operator|.
name|add
argument_list|(
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|groupIds
operator|.
name|add
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
name|groups
operator|=
operator|new
name|ListGroupMembership
argument_list|(
name|groupIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEffectiveGroups ()
specifier|public
name|GroupMembership
name|getEffectiveGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheKey ()
specifier|public
name|Object
name|getCacheKey
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getUserName
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|username
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

