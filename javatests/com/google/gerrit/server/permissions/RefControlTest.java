begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.permissions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|blockLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|deny
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|labelPermissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|permissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|EDIT_TOPIC_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|PUSH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|SUBMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CONFIG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ListGroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|SingleVersionModule
operator|.
name|SingleVersionListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|TestLabels
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RefControlTest
specifier|public
class|class
name|RefControlTest
block|{
DECL|field|ADMIN
specifier|private
specifier|static
specifier|final
name|AccountGroup
operator|.
name|UUID
name|ADMIN
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"test.admin"
argument_list|)
decl_stmt|;
DECL|field|DEVS
specifier|private
specifier|static
specifier|final
name|AccountGroup
operator|.
name|UUID
name|DEVS
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"test.devs"
argument_list|)
decl_stmt|;
DECL|method|assertAdminsAreOwnersAndDevsAreNot ()
specifier|private
name|void
name|assertAdminsAreOwnersAndDevsAreNot
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectControl
name|uBlah
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|uAdmin
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|,
name|ADMIN
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"not owner"
argument_list|)
operator|.
name|that
argument_list|(
name|uBlah
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"is owner"
argument_list|)
operator|.
name|that
argument_list|(
name|uAdmin
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertOwner (String ref, ProjectControl u)
specifier|private
name|void
name|assertOwner
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"OWN "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotOwner (ProjectControl u)
specifier|private
name|void
name|assertNotOwner
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"not owner"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotOwner (String ref, ProjectControl u)
specifier|private
name|void
name|assertNotOwner
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"NOT OWN "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanAccess (ProjectControl u)
specifier|private
name|void
name|assertCanAccess
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|access
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|testOrFalse
argument_list|(
name|ProjectPermission
operator|.
name|ACCESS
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"can access"
argument_list|)
operator|.
name|that
argument_list|(
name|access
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAccessDenied (ProjectControl u)
specifier|private
name|void
name|assertAccessDenied
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|access
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|testOrFalse
argument_list|(
name|ProjectPermission
operator|.
name|ACCESS
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"cannot access"
argument_list|)
operator|.
name|that
argument_list|(
name|access
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanRead (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanRead
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"can read "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotRead (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotRead
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"cannot read "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanSubmit (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanSubmit
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"can submit "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotSubmit (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotSubmit
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"can submit "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
name|ref
argument_list|)
operator|.
name|canSubmit
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanUpload (ProjectControl u)
specifier|private
name|void
name|assertCanUpload
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"can upload"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|canPushToAtLeastOneRef
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCreateChange (String ref, ProjectControl u)
specifier|private
name|void
name|assertCreateChange
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|create
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|CREATE_CHANGE
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"can create change "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|create
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotUpload (ProjectControl u)
specifier|private
name|void
name|assertCannotUpload
parameter_list|(
name|ProjectControl
name|u
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"cannot upload"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|canPushToAtLeastOneRef
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotCreateChange (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotCreateChange
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|create
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|CREATE_CHANGE
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"cannot create change "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|create
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"can update "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|update
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"cannot update "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|update
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanForceUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCanForceUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|FORCE_UPDATE
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"can force push "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|update
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotForceUpdate (String ref, ProjectControl u)
specifier|private
name|void
name|assertCannotForceUpdate
parameter_list|(
name|String
name|ref
parameter_list|,
name|ProjectControl
name|u
parameter_list|)
block|{
name|boolean
name|update
init|=
name|u
operator|.
name|asForProject
argument_list|()
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|testOrFalse
argument_list|(
name|RefPermission
operator|.
name|FORCE_UPDATE
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"cannot force push "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|update
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCanVote (int score, PermissionRange range)
specifier|private
name|void
name|assertCanVote
parameter_list|(
name|int
name|score
parameter_list|,
name|PermissionRange
name|range
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"can vote "
operator|+
name|score
argument_list|)
operator|.
name|that
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|score
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCannotVote (int score, PermissionRange range)
specifier|private
name|void
name|assertCannotVote
parameter_list|(
name|int
name|score
parameter_list|,
name|PermissionRange
name|range
parameter_list|)
block|{
name|assertWithMessage
argument_list|(
literal|"cannot vote "
operator|+
name|score
argument_list|)
operator|.
name|that
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|score
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|field|fixers
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|fixers
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"test.fixers"
argument_list|)
decl_stmt|;
DECL|field|localKey
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|localKey
init|=
name|Project
operator|.
name|nameKey
argument_list|(
literal|"local"
argument_list|)
decl_stmt|;
DECL|field|parentKey
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|parentKey
init|=
name|Project
operator|.
name|nameKey
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
DECL|field|allProjectsName
annotation|@
name|Inject
specifier|private
name|AllProjectsName
name|allProjectsName
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|private
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|metaDataUpdateFactory
annotation|@
name|Inject
specifier|private
name|MetaDataUpdate
operator|.
name|Server
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|projectCache
annotation|@
name|Inject
specifier|private
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|projectControlFactory
annotation|@
name|Inject
specifier|private
name|ProjectControl
operator|.
name|Factory
name|projectControlFactory
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|private
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|singleVersionListener
annotation|@
name|Inject
specifier|private
name|SingleVersionListener
name|singleVersionListener
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|private
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|InMemoryModule
argument_list|()
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Tests previously used ProjectConfig.Factory to create ProjectConfigs without going through
comment|// the ProjectCache, which was wrong. Manually call getInstance so we don't store it in a
comment|// field that is accessible to test methods.
name|ProjectConfig
operator|.
name|Factory
name|projectConfigFactory
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ProjectConfig
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
name|singleVersionListener
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|schemaCreator
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|singleVersionListener
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Clear out All-Projects and use the lowest-level API possible for project creation, so the
comment|// only ACL entries are exactly what is initialized by this test, and we aren't subject to
comment|// changing defaults in SchemaCreator or ProjectCreator.
try|try
init|(
name|Repository
name|allProjectsRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allProjectsName
argument_list|)
init|;
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|tr
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|allProjectsRepo
argument_list|)
init|)
block|{
name|tr
operator|.
name|delete
argument_list|(
name|REFS_CONFIG
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allProjectsName
argument_list|)
init|)
block|{
name|ProjectConfig
name|allProjectsConfig
init|=
name|projectConfigFactory
operator|.
name|create
argument_list|(
name|allProjectsName
argument_list|)
decl_stmt|;
name|allProjectsConfig
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|LabelType
name|cr
init|=
name|TestLabels
operator|.
name|codeReview
argument_list|()
decl_stmt|;
name|allProjectsConfig
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|cr
operator|.
name|getName
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
name|allProjectsConfig
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
name|repoManager
operator|.
name|createRepository
argument_list|(
name|parentKey
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|repoManager
operator|.
name|createRepository
argument_list|(
name|localKey
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|localKey
argument_list|)
init|)
block|{
name|ProjectConfig
name|newLocal
init|=
name|projectConfigFactory
operator|.
name|create
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|newLocal
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|newLocal
operator|.
name|getProject
argument_list|()
operator|.
name|setParentName
argument_list|(
name|parentKey
argument_list|)
expr_stmt|;
name|newLocal
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|requestContext
operator|.
name|setContext
argument_list|(
parameter_list|()
lambda|->
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerProject ()
specifier|public
name|void
name|ownerProject
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|denyOwnerProject ()
specifier|public
name|void
name|denyOwnerProject
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockOwnerProject ()
specifier|public
name|void
name|blockOwnerProject
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertAdminsAreOwnersAndDevsAreNot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchDelegation1 ()
specifier|public
name|void
name|branchDelegation1
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/x/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|uDev
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchDelegation2 ()
specifier|public
name|void
name|branchDelegation2
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/x/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|)
operator|.
name|group
argument_list|(
name|fixers
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|uDev
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uDev
argument_list|)
expr_stmt|;
name|ProjectControl
name|uFix
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|fixers
argument_list|)
decl_stmt|;
name|assertNotOwner
argument_list|(
name|uFix
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertOwner
argument_list|(
literal|"refs/heads/x/y/bar"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/x/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/x/y"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/*"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
name|assertNotOwner
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|uFix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_SingleBranchDeniesUpload ()
specifier|public
name|void
name|inheritRead_SingleBranchDeniesUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/foobar"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/foobar"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/foobar"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotCreateChange
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockPushDrafts ()
specifier|public
name|void
name|blockPushDrafts
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/drafts/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/drafts/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|PUSH
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockPushDraftsUnblockAdmin ()
specifier|public
name|void
name|blockPushDraftsUnblockAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/drafts/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/drafts/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/drafts/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|ProjectControl
name|a
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"a"
argument_list|,
name|ADMIN
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"push is allowed"
argument_list|)
operator|.
name|that
argument_list|(
name|a
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|PUSH
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"push is not allowed"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|PUSH
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_SingleBranchDoesNotOverrideInherited ()
specifier|public
name|void
name|inheritRead_SingleBranchDoesNotOverrideInherited
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/foobar"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCreateChange
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritDuplicateSections ()
specifier|public
name|void
name|inheritDuplicateSections
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertCanAccess
argument_list|(
name|user
argument_list|(
name|localKey
argument_list|,
literal|"a"
argument_list|,
name|ADMIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertCanAccess
argument_list|(
name|user
argument_list|(
name|localKey
argument_list|,
literal|"d"
argument_list|,
name|DEVS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_OverrideWithDeny ()
specifier|public
name|void
name|inheritRead_OverrideWithDeny
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertAccessDenied
argument_list|(
name|user
argument_list|(
name|localKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_AppendWithDenyOfRef ()
specifier|public
name|void
name|inheritRead_AppendWithDenyOfRef
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCanAccess
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritRead_OverridesAndDeniesOfRef ()
specifier|public
name|void
name|inheritRead_OverridesAndDeniesOfRef
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCanAccess
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritSubmit_OverridesAndDeniesOfRef ()
specifier|public
name|void
name|inheritSubmit_OverridesAndDeniesOfRef
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCannotSubmit
argument_list|(
literal|"refs/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCannotSubmit
argument_list|(
literal|"refs/tags/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanSubmit
argument_list|(
literal|"refs/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotUploadToAnyRef ()
specifier|public
name|void
name|cannotUploadToAnyRef
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCannotUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertCannotCreateChange
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernamePatternCanUploadToAnyRef ()
specifier|public
name|void
name|usernamePatternCanUploadToAnyRef
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/users/${username}/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"a-registered-user"
argument_list|)
decl_stmt|;
name|assertCanUpload
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernamePatternNonRegex ()
specifier|public
name|void
name|usernamePatternNonRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/sb/${username}/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"u"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"d"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/d/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/d/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernamePatternWithRegex ()
specifier|public
name|void
name|usernamePatternWithRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"^refs/sb/${username}/heads/.*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"d.v"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"dev"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/dev/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/dev/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usernameEmailPatternWithRegex ()
specifier|public
name|void
name|usernameEmailPatternWithRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"^refs/sb/${username}/heads/.*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"d.v@ger-rit.org"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|localKey
argument_list|,
literal|"dev@ger-rit.org"
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/sb/dev@ger-rit.org/heads/foobar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/sb/dev@ger-rit.org/heads/foobar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sortWithRegex ()
specifier|public
name|void
name|sortWithRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"^refs/heads/.*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"^refs/heads/.*-QA-.*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foo-QA-bar"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanRead
argument_list|(
literal|"refs/heads/foo-QA-bar"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockRule_ParentBlocksChild ()
specifier|public
name|void
name|blockRule_ParentBlocksChild
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/tags/V10"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockRule_ParentBlocksChildEvenIfAlreadyBlockedInChild ()
specifier|public
name|void
name|blockRule_ParentBlocksChildEvenIfAlreadyBlockedInChild
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/tags/V10"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockPartialRangeLocally ()
specifier|public
name|void
name|blockPartialRangeLocally
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|+
literal|1
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockLabelRange_ParentBlocksChild ()
specifier|public
name|void
name|blockLabelRange_ParentBlocksChild
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockLabelRange_ParentBlocksChildEvenIfAlreadyBlockedInChild ()
specifier|public
name|void
name|blockLabelRange_ParentBlocksChildEvenIfAlreadyBlockedInChild
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inheritSubmit_AllowInChildDoesntAffectUnblockInParent ()
specifier|public
name|void
name|inheritSubmit_AllowInChildDoesntAffectUnblockInParent
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"submit is allowed"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canPerform
argument_list|(
name|SUBMIT
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockNoForce ()
specifier|public
name|void
name|unblockNoForce
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockForce ()
specifier|public
name|void
name|unblockForce
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|force
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|force
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanForceUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRead_NotPossible ()
specifier|public
name|void
name|unblockRead_NotPossible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ADMIN
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|)
decl_stmt|;
name|assertCannotRead
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockForceWithAllowNoForce_NotPossible ()
specifier|public
name|void
name|unblockForceWithAllowNoForce_NotPossible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|force
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotForceUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRef_Fails ()
specifier|public
name|void
name|unblockMoreSpecificRef_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRefInLocal_Fails ()
specifier|public
name|void
name|unblockMoreSpecificRefInLocal_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRefWithExclusiveFlag ()
specifier|public
name|void
name|unblockMoreSpecificRefWithExclusiveFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockVoteMoreSpecificRefWithExclusiveFlag ()
specifier|public
name|void
name|unblockVoteMoreSpecificRefWithExclusiveFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|labelPermissionKey
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockFromParentDoesNotAffectChild ()
specifier|public
name|void
name|unblockFromParentDoesNotAffectChild
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockFromParentDoesNotAffectChildDifferentGroups ()
specifier|public
name|void
name|unblockFromParentDoesNotAffectChildDifferentGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockMoreSpecificRefInLocalWithExclusiveFlag_Fails ()
specifier|public
name|void
name|unblockMoreSpecificRefInLocalWithExclusiveFlag_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockMoreSpecificRefWithinProject ()
specifier|public
name|void
name|blockMoreSpecificRefWithinProject
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/secret"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/secret"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertCanUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockOtherPermissionWithMoreSpecificRefAndExclusiveFlag_Fails ()
specifier|public
name|void
name|unblockOtherPermissionWithMoreSpecificRefAndExclusiveFlag_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockLargerScope_Fails ()
specifier|public
name|void
name|unblockLargerScope_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInLocal_Fails ()
specifier|public
name|void
name|unblockInLocal_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|fixers
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|f
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|fixers
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInParentBlockInLocal ()
specifier|public
name|void
name|unblockInParentBlockInLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|d
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertCannotUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockForceEditTopicName ()
specifier|public
name|void
name|unblockForceEditTopicName
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|EDIT_TOPIC_NAME
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|EDIT_TOPIC_NAME
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|force
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"u can edit topic name"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canForceEditTopicName
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInLocalForceEditTopicName_Fails ()
specifier|public
name|void
name|unblockInLocalForceEditTopicName_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|EDIT_TOPIC_NAME
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|EDIT_TOPIC_NAME
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|force
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"u can't edit topic name"
argument_list|)
operator|.
name|that
argument_list|(
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|canForceEditTopicName
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRange ()
specifier|public
name|void
name|unblockRange
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeOnMoreSpecificRef_Fails ()
specifier|public
name|void
name|unblockRangeOnMoreSpecificRef_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeOnLargerScope_Fails ()
specifier|public
name|void
name|unblockRangeOnLargerScope_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonconfiguredCannotVote ()
specifier|public
name|void
name|nonconfiguredCannotVote
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockInLocalRange_Fails ()
specifier|public
name|void
name|unblockInLocalRange_Fails
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeForChangeOwner ()
specifier|public
name|void
name|unblockRangeForChangeOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unblockRangeForNotChangeOwner ()
specifier|public
name|void
name|unblockRangeForNotChangeOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockChangeOwnerVote ()
specifier|public
name|void
name|blockChangeOwnerVote
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCannotVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unionOfPermissibleVotes ()
specifier|public
name|void
name|unionOfPermissibleVotes
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unionOfPermissibleVotesPermissionOrder ()
specifier|public
name|void
name|unionOfPermissibleVotesPermissionOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCanVote
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unionOfBlockedVotes ()
specifier|public
name|void
name|unionOfBlockedVotes
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ProjectControl
name|u
init|=
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
decl_stmt|;
name|PermissionRange
name|range
init|=
name|u
operator|.
name|controlForRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getRange
argument_list|(
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertCanVote
argument_list|(
operator|-
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|assertCannotVote
argument_list|(
literal|1
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|blockOwner ()
specifier|public
name|void
name|blockOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|parentKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|localKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|DEVS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|user
argument_list|(
name|localKey
argument_list|,
name|DEVS
argument_list|)
operator|.
name|isOwner
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateRefPatternsOK ()
specifier|public
name|void
name|validateRefPatternsOK
parameter_list|()
throws|throws
name|Exception
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"refs/*"
argument_list|)
expr_stmt|;
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/heads/*"
argument_list|)
expr_stmt|;
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/tags/[0-9a-zA-Z-_.]+"
argument_list|)
expr_stmt|;
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"refs/heads/review/${username}/*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateBadRefPatternDoubleCaret ()
specifier|public
name|void
name|testValidateBadRefPatternDoubleCaret
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|InvalidNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^^refs/*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateBadRefPatternDanglingCharacter ()
specifier|public
name|void
name|testValidateBadRefPatternDanglingCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|InvalidNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateRefPatternNoDanglingCharacter ()
specifier|public
name|void
name|validateRefPatternNoDanglingCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
literal|"^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}"
argument_list|)
expr_stmt|;
block|}
DECL|method|getProjectState (Project.NameKey nameKey)
specifier|private
name|ProjectState
name|getProjectState
parameter_list|(
name|Project
operator|.
name|NameKey
name|nameKey
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|nameKey
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|user (Project.NameKey localKey, AccountGroup.UUID... memberOf)
specifier|private
name|ProjectControl
name|user
parameter_list|(
name|Project
operator|.
name|NameKey
name|localKey
parameter_list|,
name|AccountGroup
operator|.
name|UUID
modifier|...
name|memberOf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|user
argument_list|(
name|localKey
argument_list|,
literal|null
argument_list|,
name|memberOf
argument_list|)
return|;
block|}
DECL|method|user ( Project.NameKey localKey, @Nullable String name, AccountGroup.UUID... memberOf)
specifier|private
name|ProjectControl
name|user
parameter_list|(
name|Project
operator|.
name|NameKey
name|localKey
parameter_list|,
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
name|AccountGroup
operator|.
name|UUID
modifier|...
name|memberOf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|projectControlFactory
operator|.
name|create
argument_list|(
operator|new
name|MockUser
argument_list|(
name|name
argument_list|,
name|memberOf
argument_list|)
argument_list|,
name|getProjectState
argument_list|(
name|localKey
argument_list|)
argument_list|)
return|;
block|}
DECL|class|MockUser
specifier|private
specifier|static
class|class
name|MockUser
extends|extends
name|CurrentUser
block|{
DECL|field|username
annotation|@
name|Nullable
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|GroupMembership
name|groups
decl_stmt|;
DECL|method|MockUser (@ullable String name, AccountGroup.UUID[] groupId)
name|MockUser
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
name|AccountGroup
operator|.
name|UUID
index|[]
name|groupId
parameter_list|)
block|{
name|username
operator|=
name|name
expr_stmt|;
name|ArrayList
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|groupIds
operator|.
name|add
argument_list|(
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|groupIds
operator|.
name|add
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
name|groups
operator|=
operator|new
name|ListGroupMembership
argument_list|(
name|groupIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEffectiveGroups ()
specifier|public
name|GroupMembership
name|getEffectiveGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheKey ()
specifier|public
name|Object
name|getCacheKey
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getUserName
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|username
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

