begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.logging
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Expect
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LoggingContextAwareThreadFactoryTest
specifier|public
class|class
name|LoggingContextAwareThreadFactoryTest
block|{
DECL|field|expect
annotation|@
name|Rule
specifier|public
specifier|final
name|Expect
name|expect
init|=
name|Expect
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|loggingContextPropagationToNewThread ()
specifier|public
name|void
name|loggingContextPropagationToNewThread
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
init|(
name|TraceContext
name|traceContext
init|=
operator|new
name|TraceContext
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
init|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tagMap
init|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|LoggingContextAwareThreadFactory
argument_list|(
name|r
lambda|->
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"test-thread"
argument_list|)
argument_list|)
operator|.
name|newThread
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Verify that the tags have been propagated to the new thread.
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|Object
argument_list|>
argument_list|>
name|threadTagMap
operator|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|;
name|expect
operator|.
name|that
argument_list|(
name|threadTagMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|)
argument_list|;
name|expect
operator|.
name|that
argument_list|(
name|threadTagMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|)
argument_list|;
block|}
block|)
function|;
comment|// Execute in background.
name|thread
operator|.
name|start
parameter_list|()
constructor_decl|;
name|thread
operator|.
name|join
parameter_list|()
constructor_decl|;
comment|// Verify that tags in the outer thread are still set.
name|tagMap
operator|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
block|}
end_class

begin_expr_stmt
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
DECL|method|loggingContextPropagationToSameThread ()
specifier|public
name|void
name|loggingContextPropagationToSameThread
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
try|try
init|(
name|TraceContext
name|traceContext
init|=
operator|new
name|TraceContext
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
init|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tagMap
init|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|LoggingContextAwareThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Verify that the tags have been propagated to the new thread.
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|Object
argument_list|>
argument_list|>
name|threadTagMap
init|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|expect
operator|.
name|that
argument_list|(
name|threadTagMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|expect
operator|.
name|that
argument_list|(
name|threadTagMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
comment|// Execute in the same thread.
name|thread
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Verify that tags in the outer thread are still set.
name|tagMap
operator|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tagMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTags
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

