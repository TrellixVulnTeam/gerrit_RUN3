begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.logging
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PerformanceLogContextTest
specifier|public
class|class
name|PerformanceLogContextTest
block|{
DECL|field|performanceLoggers
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|PerformanceLogger
argument_list|>
name|performanceLoggers
decl_stmt|;
comment|// In this test setup this gets the DisabledMetricMaker injected. This means it doesn't record any
comment|// metric, but performance log records are still created.
DECL|field|metricMaker
annotation|@
name|Inject
specifier|private
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|testPerformanceLogger
specifier|private
name|TestPerformanceLogger
name|testPerformanceLogger
decl_stmt|;
DECL|field|performanceLoggerRegistrationHandle
specifier|private
name|RegistrationHandle
name|performanceLoggerRegistrationHandle
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|InMemoryModule
argument_list|()
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|testPerformanceLogger
operator|=
operator|new
name|TestPerformanceLogger
argument_list|()
expr_stmt|;
name|performanceLoggerRegistrationHandle
operator|=
name|performanceLoggers
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
name|testPerformanceLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|performanceLoggerRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|clearPerformanceLogEntries
argument_list|()
expr_stmt|;
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|performanceLogging
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|traceTimersInsidePerformanceLogContextCreatePerformanceLog ()
specifier|public
name|void
name|traceTimersInsidePerformanceLogContextCreatePerformanceLog
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test3"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test4"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test5"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|,
literal|"foo4"
argument_list|,
literal|"bar4"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test1"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test2"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test3"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar1"
argument_list|)
argument_list|,
literal|"foo2"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar2"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test4"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar1"
argument_list|)
argument_list|,
literal|"foo2"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar2"
argument_list|)
argument_list|,
literal|"foo3"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar3"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test5"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar1"
argument_list|)
argument_list|,
literal|"foo2"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar2"
argument_list|)
argument_list|,
literal|"foo3"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar3"
argument_list|)
argument_list|,
literal|"foo4"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"bar4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|traceTimersInsidePerformanceLogContextCreatePerformanceLogNullValuesAllowed ()
specifier|public
name|void
name|traceTimersInsidePerformanceLogContextCreatePerformanceLogNullValuesAllowed
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test2"
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test3"
argument_list|,
literal|"foo1"
argument_list|,
literal|null
argument_list|,
literal|"foo2"
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test4"
argument_list|,
literal|"foo1"
argument_list|,
literal|null
argument_list|,
literal|"foo2"
argument_list|,
literal|null
argument_list|,
literal|"foo3"
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test5"
argument_list|,
literal|"foo1"
argument_list|,
literal|null
argument_list|,
literal|"foo2"
argument_list|,
literal|null
argument_list|,
literal|"foo3"
argument_list|,
literal|null
argument_list|,
literal|"foo4"
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test1"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test2"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test3"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"foo2"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test4"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"foo2"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"foo3"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test5"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo1"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"foo2"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"foo3"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"foo4"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|traceTimersOutsidePerformanceLogContextDoNotCreatePerformanceLog ()
specifier|public
name|void
name|traceTimersOutsidePerformanceLogContextDoNotCreatePerformanceLog
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test3"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test4"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test5"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|,
literal|"foo4"
argument_list|,
literal|"bar4"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|traceTimersInsidePerformanceLogContextDoNotCreatePerformanceLogIfNoPerformanceLoggers ()
name|traceTimersInsidePerformanceLogContextDoNotCreatePerformanceLogIfNoPerformanceLoggers
parameter_list|()
block|{
comment|// Remove test performance logger so that there are no registered performance loggers.
name|performanceLoggerRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test3"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test4"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test5"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"bar3"
argument_list|,
literal|"foo4"
argument_list|,
literal|"bar4"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timerMetricsInsidePerformanceLogContextCreatePerformanceLog ()
specifier|public
name|void
name|timerMetricsInsidePerformanceLogContextCreatePerformanceLog
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|Timer0
name|timer0
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test1/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|)
decl_stmt|;
name|timer0
operator|.
name|start
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer1
argument_list|<
name|String
argument_list|>
name|timer1
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test2/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|timer1
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|timer2
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test3/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|timer2
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|timer3
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test4/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|timer3
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|,
literal|"value2"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test1/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test2/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"field1"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test3/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"field1"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test4/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"field1"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
literal|"field2"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"value2"
argument_list|)
argument_list|,
literal|"field3"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timerMetricsInsidePerformanceLogContextCreatePerformanceLogNullValuesAllowed ()
specifier|public
name|void
name|timerMetricsInsidePerformanceLogContextCreatePerformanceLogNullValuesAllowed
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|Timer1
argument_list|<
name|String
argument_list|>
name|timer1
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test1/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|timer1
operator|.
name|start
argument_list|(
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|timer2
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test2/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|timer2
operator|.
name|start
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|timer3
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test3/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|timer3
operator|.
name|start
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test1/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"field1"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test2/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"field1"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"field2"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
literal|"test3/latency"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"field1"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"field2"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|"field3"
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|timerMetricsOutsidePerformanceLogContextDoNotCreatePerformanceLog ()
specifier|public
name|void
name|timerMetricsOutsidePerformanceLogContextDoNotCreatePerformanceLog
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Timer0
name|timer0
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test1/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|)
decl_stmt|;
name|timer0
operator|.
name|start
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer1
argument_list|<
name|String
argument_list|>
name|timer1
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test2/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|timer1
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|timer2
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test3/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|timer2
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|timer3
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test4/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|timer3
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|,
literal|"value2"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|timerMetricssInsidePerformanceLogContextDoNotCreatePerformanceLogIfNoPerformanceLoggers ()
name|timerMetricssInsidePerformanceLogContextDoNotCreatePerformanceLogIfNoPerformanceLoggers
parameter_list|()
block|{
comment|// Remove test performance logger so that there are no registered performance loggers.
name|performanceLoggerRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|Timer0
name|timer0
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test1/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|)
decl_stmt|;
name|timer0
operator|.
name|start
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer1
argument_list|<
name|String
argument_list|>
name|timer1
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test2/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|timer1
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|timer2
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test3/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|timer2
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Timer3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|timer3
init|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"test4/latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency metric for testing"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
decl_stmt|;
name|timer3
operator|.
name|start
argument_list|(
literal|"value1"
argument_list|,
literal|"value2"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nestingPerformanceLogContextsIsPossible ()
specifier|public
name|void
name|nestingPerformanceLogContextsIsPossible
parameter_list|()
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext1
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|PerformanceLogContext
name|traceContext2
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|performanceLoggers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|isPerformanceLogging
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getPerformanceLogRecords
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|class|TestPerformanceLogger
specifier|private
specifier|static
class|class
name|TestPerformanceLogger
implements|implements
name|PerformanceLogger
block|{
DECL|field|logEntries
specifier|private
name|List
argument_list|<
name|PerformanceLogEntry
argument_list|>
name|logEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|log (String operation, long durationMs, Map<String, Optional<Object>> metaData)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|Object
argument_list|>
argument_list|>
name|metaData
parameter_list|)
block|{
name|logEntries
operator|.
name|add
argument_list|(
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
name|operation
argument_list|,
name|metaData
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|logEntries ()
name|ImmutableList
argument_list|<
name|PerformanceLogEntry
argument_list|>
name|logEntries
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|logEntries
argument_list|)
return|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|PerformanceLogEntry
specifier|abstract
specifier|static
class|class
name|PerformanceLogEntry
block|{
DECL|method|create (String operation, Map<String, Optional<Object>> metaData)
specifier|static
name|PerformanceLogEntry
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|Object
argument_list|>
argument_list|>
name|metaData
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PerformanceLogContextTest_PerformanceLogEntry
argument_list|(
name|operation
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|metaData
argument_list|)
argument_list|)
return|;
block|}
DECL|method|operation ()
specifier|abstract
name|String
name|operation
parameter_list|()
function_decl|;
DECL|method|metaData ()
specifier|abstract
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

