begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectIdRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Tests for {@link ReceivePackRefCache}. */
end_comment

begin_class
DECL|class|ReceivePackRefCacheTest
specifier|public
class|class
name|ReceivePackRefCacheTest
block|{
annotation|@
name|Test
DECL|method|noCache_prefixDelegatesToRefDb ()
specifier|public
name|void
name|noCache_prefixDelegatesToRefDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|ref
init|=
name|newRef
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|,
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
decl_stmt|;
name|RefDatabase
name|mockRefDb
init|=
name|mock
argument_list|(
name|RefDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|noCache
argument_list|(
name|mockRefDb
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRefDb
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|REFS_HEADS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|byPrefix
argument_list|(
name|RefNames
operator|.
name|REFS_HEADS
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRefDb
argument_list|)
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|REFS_HEADS
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|mockRefDb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noCache_exactRefDelegatesToRefDb ()
specifier|public
name|void
name|noCache_exactRefDelegatesToRefDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|ref
init|=
name|newRef
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|,
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
decl_stmt|;
name|RefDatabase
name|mockRefDb
init|=
name|mock
argument_list|(
name|RefDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|noCache
argument_list|(
name|mockRefDb
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRefDb
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRefDb
argument_list|)
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|mockRefDb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noCache_tipsFromObjectIdDelegatesToRefDbAndFiltersByPrefix ()
specifier|public
name|void
name|noCache_tipsFromObjectIdDelegatesToRefDbAndFiltersByPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|refBla
init|=
name|newRef
argument_list|(
literal|"refs/bla"
argument_list|,
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
decl_stmt|;
name|Ref
name|refheads
init|=
name|newRef
argument_list|(
name|RefNames
operator|.
name|REFS_HEADS
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|RefDatabase
name|mockRefDb
init|=
name|mock
argument_list|(
name|RefDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|noCache
argument_list|(
name|mockRefDb
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRefDb
operator|.
name|getTipsWithSha1
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|refBla
argument_list|,
name|refheads
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|tipsFromObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|RefNames
operator|.
name|REFS_HEADS
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|refheads
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRefDb
argument_list|)
operator|.
name|getTipsWithSha1
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|mockRefDb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedRefs_prefixScans ()
specifier|public
name|void
name|advertisedRefs_prefixScans
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|refBla
init|=
operator|new
name|ObjectIdRef
operator|.
name|Unpeeled
argument_list|(
name|Ref
operator|.
name|Storage
operator|.
name|NEW
argument_list|,
literal|"refs/bla/1"
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|withAdvertisedRefs
argument_list|(
parameter_list|()
lambda|->
name|ImmutableMap
operator|.
name|of
argument_list|(
name|refBla
operator|.
name|getName
argument_list|()
argument_list|,
name|refBla
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|byPrefix
argument_list|(
literal|"refs/bla"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|refBla
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedRefs_prefixScansChangeId ()
specifier|public
name|void
name|advertisedRefs_prefixScansChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|setupTwoChanges
argument_list|()
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|withAdvertisedRefs
argument_list|(
parameter_list|()
lambda|->
name|refs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|byPrefix
argument_list|(
name|RefNames
operator|.
name|changeRefPrefix
argument_list|(
name|Change
operator|.
name|id
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|refs
operator|.
name|get
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedRefs_exactRef ()
specifier|public
name|void
name|advertisedRefs_exactRef
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|setupTwoChanges
argument_list|()
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|withAdvertisedRefs
argument_list|(
parameter_list|()
lambda|->
name|refs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|exactRef
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refs
operator|.
name|get
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedRefs_tipsFromObjectIdWithNoPrefix ()
specifier|public
name|void
name|advertisedRefs_tipsFromObjectIdWithNoPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|setupTwoChanges
argument_list|()
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|withAdvertisedRefs
argument_list|(
parameter_list|()
lambda|->
name|refs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|tipsFromObjectId
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|refs
operator|.
name|get
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedRefs_tipsFromObjectIdWithPrefix ()
specifier|public
name|void
name|advertisedRefs_tipsFromObjectIdWithPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|setupTwoChanges
argument_list|()
decl_stmt|;
name|ReceivePackRefCache
name|cache
init|=
name|ReceivePackRefCache
operator|.
name|withAdvertisedRefs
argument_list|(
parameter_list|()
lambda|->
name|refs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cache
operator|.
name|tipsFromObjectId
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
argument_list|,
literal|"/refs/some"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|newRef (String name, String sha1)
specifier|private
specifier|static
name|Ref
name|newRef
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|sha1
parameter_list|)
block|{
return|return
operator|new
name|ObjectIdRef
operator|.
name|Unpeeled
argument_list|(
name|Ref
operator|.
name|Storage
operator|.
name|NEW
argument_list|,
name|name
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|sha1
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|setupTwoChanges ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|setupTwoChanges
parameter_list|()
block|{
name|Ref
name|ref1
init|=
name|newRef
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|,
literal|"badc0feebadc0feebadc0feebadc0feebadc0fee"
argument_list|)
decl_stmt|;
name|Ref
name|ref2
init|=
name|newRef
argument_list|(
literal|"refs/changes/02/2/1"
argument_list|,
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|ref1
operator|.
name|getName
argument_list|()
argument_list|,
name|ref1
argument_list|,
name|ref2
operator|.
name|getName
argument_list|()
argument_list|,
name|ref2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

