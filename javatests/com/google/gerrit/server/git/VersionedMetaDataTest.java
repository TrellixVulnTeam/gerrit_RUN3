begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|VersionedMetaDataTest
specifier|public
class|class
name|VersionedMetaDataTest
block|{
comment|// If you're considering fleshing out this test and making it more comprehensive, please consider
comment|// instead coming up with a replacement interface for
comment|// VersionedMetaData/BatchMetaDataUpdate/MetaDataUpdate that is easier to use correctly.
DECL|field|TZ
specifier|private
specifier|static
specifier|final
name|TimeZone
name|TZ
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
decl_stmt|;
DECL|field|project
specifier|private
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|project
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"repo"
argument_list|)
expr_stmt|;
name|repo
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleUpdate ()
specifier|public
name|void
name|singleUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
name|load
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|3
argument_list|,
literal|"Increment conf.value by 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noOpNoSetter ()
specifier|public
name|void
name|noOpNoSetter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
name|load
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noOpWithSetter ()
specifier|public
name|void
name|noOpWithSetter
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
name|load
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
comment|// First commit is actually not a no-op because it creates an empty config file.
name|assertMyMetaData
argument_list|(
literal|0
argument_list|,
literal|"Increment conf.value by 0"
argument_list|)
expr_stmt|;
name|d
operator|=
name|load
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|0
argument_list|,
literal|"Increment conf.value by 0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleSeparateUpdatesWithSameObject ()
specifier|public
name|void
name|multipleSeparateUpdatesWithSameObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
name|load
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|1
argument_list|,
literal|"Increment conf.value by 1"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|3
argument_list|,
literal|"Increment conf.value by 1"
argument_list|,
literal|"Increment conf.value by 2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleSeparateUpdatesWithDifferentObject ()
specifier|public
name|void
name|multipleSeparateUpdatesWithDifferentObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
name|load
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|1
argument_list|,
literal|"Increment conf.value by 1"
argument_list|)
expr_stmt|;
name|d
operator|=
name|load
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|setIncrement
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|d
operator|.
name|commit
argument_list|(
name|newMetaDataUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertMyMetaData
argument_list|(
literal|3
argument_list|,
literal|"Increment conf.value by 1"
argument_list|,
literal|"Increment conf.value by 2"
argument_list|)
expr_stmt|;
block|}
DECL|method|load (int expectedValue)
specifier|private
name|MyMetaData
name|load
parameter_list|(
name|int
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
operator|new
name|MyMetaData
argument_list|()
decl_stmt|;
name|d
operator|.
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|d
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedValue
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
DECL|method|newMetaDataUpdate ()
specifier|private
name|MetaDataUpdate
name|newMetaDataUpdate
parameter_list|()
block|{
name|MetaDataUpdate
name|u
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|project
argument_list|,
name|repo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PersonIdent
name|author
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"J. Author"
argument_list|,
literal|"author@example.com"
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|TZ
argument_list|)
decl_stmt|;
name|u
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|u
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
literal|"M. Committer"
argument_list|,
literal|"committer@example.com"
argument_list|,
name|author
operator|.
name|getWhen
argument_list|()
argument_list|,
name|author
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|u
return|;
block|}
DECL|method|assertMyMetaData (int expectedValue, String... expectedLog)
specifier|private
name|void
name|assertMyMetaData
parameter_list|(
name|int
name|expectedValue
parameter_list|,
name|String
modifier|...
name|expectedLog
parameter_list|)
throws|throws
name|Exception
block|{
name|MyMetaData
name|d
init|=
name|load
argument_list|(
name|expectedValue
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|(
name|d
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedLog
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|log (MyMetaData d)
specifier|private
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|log
parameter_list|(
name|MyMetaData
name|d
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|d
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Streams
operator|.
name|stream
argument_list|(
name|rw
argument_list|)
operator|.
name|map
argument_list|(
name|RevCommit
operator|::
name|getFullMessage
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|MyMetaData
specifier|private
specifier|static
class|class
name|MyMetaData
extends|extends
name|VersionedMetaData
block|{
DECL|field|CONFIG_FILE
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_FILE
init|=
literal|"my.config"
decl_stmt|;
DECL|field|SECTION
specifier|private
specifier|static
specifier|final
name|String
name|SECTION
init|=
literal|"conf"
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"value"
decl_stmt|;
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
literal|"refs/my/config"
return|;
block|}
DECL|field|curr
specifier|private
name|int
name|curr
decl_stmt|;
DECL|field|increment
specifier|private
name|Optional
argument_list|<
name|Integer
argument_list|>
name|increment
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Config
name|cfg
init|=
name|readConfig
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
name|curr
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
name|SECTION
argument_list|,
literal|null
argument_list|,
name|NAME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getValue ()
name|int
name|getValue
parameter_list|()
block|{
return|return
name|curr
return|;
block|}
DECL|method|setIncrement (int increment)
name|void
name|setIncrement
parameter_list|(
name|int
name|increment
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|increment
operator|>=
literal|0
argument_list|,
literal|"increment must be positive: %s"
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|this
operator|.
name|increment
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|increment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder cb)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|cb
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
comment|// Two ways to produce a no-op: don't call setIncrement, and call setIncrement(0);
if|if
condition|(
operator|!
name|increment
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Config
name|cfg
init|=
name|readConfig
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
name|SECTION
argument_list|,
literal|null
argument_list|,
name|NAME
argument_list|,
name|cfg
operator|.
name|getInt
argument_list|(
name|SECTION
argument_list|,
literal|null
argument_list|,
name|NAME
argument_list|,
literal|0
argument_list|)
operator|+
name|increment
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Increment %s.%s by %d"
argument_list|,
name|SECTION
argument_list|,
name|NAME
argument_list|,
name|increment
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveConfig
argument_list|(
name|CONFIG_FILE
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|increment
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

