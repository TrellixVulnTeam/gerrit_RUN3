begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createNiceMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|QueryListTest
specifier|public
class|class
name|QueryListTest
extends|extends
name|TestCase
block|{
DECL|field|Q_P
specifier|public
specifier|static
specifier|final
name|String
name|Q_P
init|=
literal|"project:foo"
decl_stmt|;
DECL|field|Q_B
specifier|public
specifier|static
specifier|final
name|String
name|Q_B
init|=
literal|"branch:bar"
decl_stmt|;
DECL|field|Q_COMPLEX
specifier|public
specifier|static
specifier|final
name|String
name|Q_COMPLEX
init|=
literal|"branch:bar AND peers:'is:open\t'"
decl_stmt|;
DECL|field|N_FOO
specifier|public
specifier|static
specifier|final
name|String
name|N_FOO
init|=
literal|"foo"
decl_stmt|;
DECL|field|N_BAR
specifier|public
specifier|static
specifier|final
name|String
name|N_BAR
init|=
literal|"bar"
decl_stmt|;
DECL|field|L_FOO
specifier|public
specifier|static
specifier|final
name|String
name|L_FOO
init|=
name|N_FOO
operator|+
literal|"\t"
operator|+
name|Q_P
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_BAR
specifier|public
specifier|static
specifier|final
name|String
name|L_BAR
init|=
name|N_BAR
operator|+
literal|"\t"
operator|+
name|Q_B
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_FOO_PROP
specifier|public
specifier|static
specifier|final
name|String
name|L_FOO_PROP
init|=
name|N_FOO
operator|+
literal|"   \t"
operator|+
name|Q_P
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_BAR_PROP
specifier|public
specifier|static
specifier|final
name|String
name|L_BAR_PROP
init|=
name|N_BAR
operator|+
literal|"   \t"
operator|+
name|Q_B
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_FOO_PAD_F
specifier|public
specifier|static
specifier|final
name|String
name|L_FOO_PAD_F
init|=
literal|" "
operator|+
name|N_FOO
operator|+
literal|"\t"
operator|+
name|Q_P
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_FOO_PAD_E
specifier|public
specifier|static
specifier|final
name|String
name|L_FOO_PAD_E
init|=
name|N_FOO
operator|+
literal|" \t"
operator|+
name|Q_P
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_BAR_PAD_F
specifier|public
specifier|static
specifier|final
name|String
name|L_BAR_PAD_F
init|=
name|N_BAR
operator|+
literal|"\t "
operator|+
name|Q_B
operator|+
literal|"\n"
decl_stmt|;
DECL|field|L_BAR_PAD_E
specifier|public
specifier|static
specifier|final
name|String
name|L_BAR_PAD_E
init|=
name|N_BAR
operator|+
literal|"\t"
operator|+
name|Q_B
operator|+
literal|" \n"
decl_stmt|;
DECL|field|L_COMPLEX
specifier|public
specifier|static
specifier|final
name|String
name|L_COMPLEX
init|=
name|N_FOO
operator|+
literal|"\t"
operator|+
name|Q_COMPLEX
operator|+
literal|"\t \n"
decl_stmt|;
DECL|field|L_BAD
specifier|public
specifier|static
specifier|final
name|String
name|L_BAD
init|=
name|N_FOO
operator|+
literal|"\n"
decl_stmt|;
DECL|field|HEADER
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"# Name\tQuery\n"
decl_stmt|;
DECL|field|C1
specifier|public
specifier|static
specifier|final
name|String
name|C1
init|=
literal|"# A Simple Comment\n"
decl_stmt|;
DECL|field|C2
specifier|public
specifier|static
specifier|final
name|String
name|C2
init|=
literal|"# Comment with a tab\t and multi # # #\n"
decl_stmt|;
DECL|field|F_SIMPLE
specifier|public
specifier|static
specifier|final
name|String
name|F_SIMPLE
init|=
name|L_FOO
operator|+
name|L_BAR
decl_stmt|;
DECL|field|F_PROPER
specifier|public
specifier|static
specifier|final
name|String
name|F_PROPER
init|=
name|L_BAR_PROP
operator|+
name|L_FOO_PROP
decl_stmt|;
comment|// alpha order
DECL|field|F_PAD_F
specifier|public
specifier|static
specifier|final
name|String
name|F_PAD_F
init|=
name|L_FOO_PAD_F
operator|+
name|L_BAR_PAD_F
decl_stmt|;
DECL|field|F_PAD_E
specifier|public
specifier|static
specifier|final
name|String
name|F_PAD_E
init|=
name|L_FOO_PAD_E
operator|+
name|L_BAR_PAD_E
decl_stmt|;
annotation|@
name|Test
DECL|method|testParseSimple ()
specifier|public
name|void
name|testParseSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|F_SIMPLE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_P
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_BAR
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseWHeader ()
specifier|public
name|void
name|testParseWHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|HEADER
operator|+
name|F_SIMPLE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_P
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_BAR
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseWComments ()
specifier|public
name|void
name|testParseWComments
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|C1
operator|+
name|F_SIMPLE
operator|+
name|C2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_P
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_BAR
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseFooComment ()
specifier|public
name|void
name|testParseFooComment
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
literal|"#"
operator|+
name|L_FOO
operator|+
name|L_BAR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_BAR
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParsePaddedFronts ()
specifier|public
name|void
name|testParsePaddedFronts
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|F_PAD_F
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_P
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_BAR
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParsePaddedEnds ()
specifier|public
name|void
name|testParsePaddedEnds
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|F_PAD_E
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_P
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_BAR
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_B
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseComplex ()
specifier|public
name|void
name|testParseComplex
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|L_COMPLEX
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ql
operator|.
name|getQuery
argument_list|(
name|N_FOO
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Q_COMPLEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testParseBad ()
specifier|public
name|void
name|testParseBad
parameter_list|()
throws|throws
name|Exception
block|{
name|ValidationError
operator|.
name|Sink
name|sink
init|=
name|createNiceMock
argument_list|(
name|ValidationError
operator|.
name|Sink
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|sink
argument_list|)
expr_stmt|;
name|QueryList
operator|.
name|parse
argument_list|(
name|L_BAD
argument_list|,
name|sink
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsText ()
specifier|public
name|void
name|testAsText
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expectedText
init|=
name|HEADER
operator|+
literal|"#\n"
operator|+
name|F_PROPER
decl_stmt|;
name|QueryList
name|ql
init|=
name|QueryList
operator|.
name|parse
argument_list|(
name|F_SIMPLE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|asText
init|=
name|ql
operator|.
name|asText
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|asText
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedText
argument_list|)
expr_stmt|;
name|ql
operator|=
name|QueryList
operator|.
name|parse
argument_list|(
name|asText
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|asText
operator|=
name|ql
operator|.
name|asText
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|asText
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedText
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

