begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|toImmutableMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|CommentJsonMigrator
operator|.
name|ProjectMigrationResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CommentJsonMigratorTest
specifier|public
class|class
name|CommentJsonMigratorTest
extends|extends
name|AbstractChangeNotesTest
block|{
DECL|field|migrator
specifier|private
name|CommentJsonMigrator
name|migrator
decl_stmt|;
DECL|field|noteUtil
annotation|@
name|Inject
specifier|private
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
DECL|field|commentsUtil
annotation|@
name|Inject
specifier|private
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|legacyChangeNoteWrite
annotation|@
name|Inject
specifier|private
name|LegacyChangeNoteWrite
name|legacyChangeNoteWrite
decl_stmt|;
DECL|field|allUsersName
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|uuidCounter
specifier|private
name|AtomicInteger
name|uuidCounter
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpCounter ()
specifier|public
name|void
name|setUpCounter
parameter_list|()
block|{
name|uuidCounter
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|migrator
operator|=
operator|new
name|CommentJsonMigrator
argument_list|(
operator|new
name|ChangeNoteJson
argument_list|()
argument_list|,
literal|"gerrit"
argument_list|,
name|allUsersName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noOpIfAllCommentsAreJson ()
specifier|public
name|void
name|noOpIfAllCommentsAreJson
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|Comment
name|ps1Comment
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|,
literal|"comment on ps1"
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|ps1Comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|update
operator|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
expr_stmt|;
name|Comment
name|ps2Comment
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|,
literal|"comment on ps2"
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|ps2Comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ps2Comment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeNotes
name|oldNotes
init|=
name|notes
decl_stmt|;
name|migrate
argument_list|(
name|project
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNoDifferences
argument_list|(
name|notes
argument_list|,
name|oldNotes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notes
operator|.
name|getMetaId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldNotes
operator|.
name|getMetaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|migratePublishedComments ()
specifier|public
name|void
name|migratePublishedComments
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Comment
name|ps1Comment1
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|,
literal|"first comment on ps1"
argument_list|)
decl_stmt|;
name|Comment
name|ps2Comment1
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|,
literal|"first comment on ps2"
argument_list|)
decl_stmt|;
name|Comment
name|ps1Comment2
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|,
literal|"second comment on ps1"
argument_list|)
decl_stmt|;
comment|// Construct legacy format 'by hand'.
name|ByteArrayOutputStream
name|out1
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ps1Comment1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out1
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out2
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|ps2Comment1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out2
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out3
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ps1Comment2
argument_list|)
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ps1Comment1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out3
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|testRepository
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|)
decl_stmt|;
name|String
name|metaRefName
init|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|metaRefName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 1\n\nPatch-set: 1"
argument_list|)
operator|.
name|add
argument_list|(
name|ps1Comment1
operator|.
name|revId
argument_list|,
name|out1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|metaRefName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 2\n\nPatch-set: 2"
argument_list|)
operator|.
name|add
argument_list|(
name|ps2Comment1
operator|.
name|revId
argument_list|,
name|out2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|ps1Comment1
operator|.
name|revId
argument_list|,
name|out3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment1
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment2
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ps2Comment1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comments at each commit all have legacy format.
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|oldLog
init|=
name|log
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldLog
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment1
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment1
operator|.
name|key
argument_list|,
literal|true
argument_list|,
name|ps1Comment2
operator|.
name|key
argument_list|,
literal|true
argument_list|,
name|ps2Comment1
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|oldNotes
init|=
name|notes
decl_stmt|;
name|migrate
argument_list|(
name|project
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Comment content is the same.
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertNoDifferences
argument_list|(
name|notes
argument_list|,
name|oldNotes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment1
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment2
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ps2Comment1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comments at each commit all have JSON format.
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|newLog
init|=
name|log
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertLogEqualExceptTrees
argument_list|(
name|newLog
argument_list|,
name|oldLog
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment1
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment1
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ps1Comment2
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ps2Comment1
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|migrateDraftComments ()
specifier|public
name|void
name|migrateDraftComments
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ObjectId
name|origMetaId
init|=
name|notes
operator|.
name|getMetaId
argument_list|()
decl_stmt|;
name|Comment
name|ownerCommentPs1
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|,
literal|"owner comment on ps1"
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|Comment
name|ownerCommentPs2
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|,
literal|"owner comment on ps2"
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|Comment
name|otherCommentPs1
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|,
literal|"other user comment on ps1"
argument_list|,
name|otherUser
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out1
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ownerCommentPs1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out1
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out2
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|ownerCommentPs2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out2
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out3
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|otherCommentPs1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out3
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|allUsersRw
operator|=
operator|new
name|RevWalk
argument_list|(
name|allUsersRepo
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|testRepository
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|allUsersRepo
argument_list|,
name|allUsersRw
argument_list|)
decl_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 1\n\nPatch-set: 1"
argument_list|)
operator|.
name|add
argument_list|(
name|ownerCommentPs1
operator|.
name|revId
argument_list|,
name|out1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 1\n\nPatch-set: 2"
argument_list|)
operator|.
name|add
argument_list|(
name|ownerCommentPs2
operator|.
name|revId
argument_list|,
name|out2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 2\n\nPatch-set: 2"
argument_list|)
operator|.
name|add
argument_list|(
name|otherCommentPs1
operator|.
name|revId
argument_list|,
name|out3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ownerCommentPs1
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ownerCommentPs2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|otherCommentPs1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comments at each commit all have legacy format.
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|oldOwnerLog
init|=
name|log
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldOwnerLog
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForDraftComments
argument_list|(
name|notes
argument_list|,
name|oldOwnerLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ownerCommentPs1
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForDraftComments
argument_list|(
name|notes
argument_list|,
name|oldOwnerLog
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ownerCommentPs1
operator|.
name|key
argument_list|,
literal|true
argument_list|,
name|ownerCommentPs2
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|oldOtherLog
init|=
name|log
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldOtherLog
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForDraftComments
argument_list|(
name|notes
argument_list|,
name|oldOtherLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|otherCommentPs1
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|oldNotes
init|=
name|notes
decl_stmt|;
name|migrate
argument_list|(
name|allUsers
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNoDifferences
argument_list|(
name|notes
argument_list|,
name|oldNotes
argument_list|)
expr_stmt|;
comment|// Migration doesn't touch change ref.
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|origMetaId
argument_list|)
expr_stmt|;
comment|// Comment content is the same.
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ownerCommentPs1
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ownerCommentPs2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getDraftComments
argument_list|(
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|otherCommentPs1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comments at each commit all have JSON format.
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|newOwnerLog
init|=
name|log
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|changeOwner
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertLogEqualExceptTrees
argument_list|(
name|newOwnerLog
argument_list|,
name|oldOwnerLog
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForDraftComments
argument_list|(
name|notes
argument_list|,
name|newOwnerLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ownerCommentPs1
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForDraftComments
argument_list|(
name|notes
argument_list|,
name|newOwnerLog
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ownerCommentPs1
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ownerCommentPs2
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|newOtherLog
init|=
name|log
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|otherUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertLogEqualExceptTrees
argument_list|(
name|newOtherLog
argument_list|,
name|oldOtherLog
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForDraftComments
argument_list|(
name|notes
argument_list|,
name|newOtherLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|otherCommentPs1
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|migrateMixOfJsonAndLegacyComments ()
specifier|public
name|void
name|migrateMixOfJsonAndLegacyComments
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 3 comments: legacy, JSON, legacy. Because adding a comment necessarily rewrites the entire
comment|// note, these comments need to be on separate patch sets.
name|Change
name|c
init|=
name|newChange
argument_list|()
decl_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeNotes
name|notes
init|=
name|newNotes
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Comment
name|ps1Comment
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|,
literal|"comment on ps1 (legacy)"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out1
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ps1Comment
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out1
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|testRepository
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|)
decl_stmt|;
name|String
name|metaRefName
init|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|metaRefName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 1\n\nPatch-set: 1"
argument_list|)
operator|.
name|add
argument_list|(
name|ps1Comment
operator|.
name|revId
argument_list|,
name|out1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|Comment
name|ps2Comment
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|,
literal|"comment on ps2 (JSON)"
argument_list|)
decl_stmt|;
name|update
operator|.
name|putComment
argument_list|(
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|ps2Comment
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Comment
name|ps3Comment
init|=
name|newComment
argument_list|(
name|notes
argument_list|,
literal|3
argument_list|,
literal|"comment on ps3 (legacy)"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out3
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|legacyChangeNoteWrite
operator|.
name|buildNote
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|Comment
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|3
argument_list|,
name|ps3Comment
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|out3
argument_list|)
expr_stmt|;
name|testRepository
operator|.
name|branch
argument_list|(
name|metaRefName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Review ps 3\n\nPatch-set: 3"
argument_list|)
operator|.
name|add
argument_list|(
name|ps3Comment
operator|.
name|revId
argument_list|,
name|out3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|committer
argument_list|(
name|serverIdent
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ps2Comment
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ps3Comment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comments at each commit match expected format.
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|oldLog
init|=
name|log
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldLog
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment
operator|.
name|key
argument_list|,
literal|true
argument_list|,
name|ps2Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|oldLog
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment
operator|.
name|key
argument_list|,
literal|true
argument_list|,
name|ps2Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ps3Comment
operator|.
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChangeNotes
name|oldNotes
init|=
name|notes
decl_stmt|;
name|migrate
argument_list|(
name|project
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoDifferences
argument_list|(
name|notes
argument_list|,
name|oldNotes
argument_list|)
expr_stmt|;
comment|// Comment content is the same.
name|notes
operator|=
name|newNotes
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getToStringRepresentations
argument_list|(
name|notes
operator|.
name|getComments
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ps1Comment
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ps2Comment
operator|.
name|toString
argument_list|()
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ps3Comment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Comments at each commit all have JSON format.
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|newLog
init|=
name|log
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertLogEqualExceptTrees
argument_list|(
name|newLog
argument_list|,
name|oldLog
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ps2Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLegacyFormatMapForPublishedComments
argument_list|(
name|notes
argument_list|,
name|newLog
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ps1Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ps2Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|,
name|ps3Comment
operator|.
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|MigrateFunction
interface|interface
name|MigrateFunction
block|{
DECL|method|call ( Project.NameKey project, Repository repo, RevWalk rw, ObjectInserter ins, BatchRefUpdate bru)
name|boolean
name|call
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|BatchRefUpdate
name|bru
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|method|migrate (Project.NameKey project, int expectedCommands)
specifier|private
name|void
name|migrate
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|int
name|expectedCommands
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|ProjectMigrationResult
name|progress
init|=
name|migrator
operator|.
name|migrateProject
argument_list|(
name|project
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|progress
operator|.
name|ok
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|progress
operator|.
name|refsUpdated
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedCommands
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newComment (ChangeNotes notes, int psNum, String message)
specifier|private
name|Comment
name|newComment
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|int
name|psNum
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|newComment
argument_list|(
name|notes
argument_list|,
name|psNum
argument_list|,
name|message
argument_list|,
name|changeOwner
argument_list|)
return|;
block|}
DECL|method|newComment ( ChangeNotes notes, int psNum, String message, IdentifiedUser commenter)
specifier|private
name|Comment
name|newComment
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|int
name|psNum
parameter_list|,
name|String
name|message
parameter_list|,
name|IdentifiedUser
name|commenter
parameter_list|)
block|{
return|return
name|newComment
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psNum
argument_list|)
argument_list|,
literal|"filename"
argument_list|,
literal|"uuid-"
operator|+
name|uuidCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|commenter
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|message
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|getRevId
argument_list|(
name|notes
argument_list|,
name|psNum
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|incrementPatchSet (Change c)
specifier|private
name|void
name|incrementPatchSet
parameter_list|(
name|Change
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|TestChanges
operator|.
name|incrementPatchSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|RevCommit
name|commit
init|=
name|tr
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"PS"
operator|+
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|newUpdate
argument_list|(
name|c
argument_list|,
name|changeOwner
argument_list|)
decl_stmt|;
name|update
operator|.
name|setCommit
argument_list|(
name|rw
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|update
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|getRevId (ChangeNotes notes, int psNum)
specifier|private
specifier|static
name|RevId
name|getRevId
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|int
name|psNum
parameter_list|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psNum
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|notes
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|ps
operator|!=
literal|null
argument_list|,
literal|"no patch set %s: %s"
argument_list|,
name|psNum
argument_list|,
name|notes
operator|.
name|getPatchSets
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ps
operator|.
name|getRevision
argument_list|()
return|;
block|}
DECL|method|getToStringRepresentations ( ListMultimap<RevId, Comment> comments)
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|RevId
argument_list|,
name|String
argument_list|>
name|getToStringRepresentations
parameter_list|(
name|ListMultimap
argument_list|<
name|RevId
argument_list|,
name|Comment
argument_list|>
name|comments
parameter_list|)
block|{
comment|// Use string representation for equality comparison in this test, because Comment#equals only
comment|// compares keys.
return|return
name|Multimaps
operator|.
name|transformValues
argument_list|(
name|comments
argument_list|,
name|Comment
operator|::
name|toString
argument_list|)
return|;
block|}
DECL|method|getLegacyFormatMapForPublishedComments ( ChangeNotes notes, ObjectId metaId)
specifier|private
name|ImmutableMap
argument_list|<
name|Comment
operator|.
name|Key
argument_list|,
name|Boolean
argument_list|>
name|getLegacyFormatMapForPublishedComments
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|ObjectId
name|metaId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getLegacyFormatMap
argument_list|(
name|project
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|metaId
argument_list|,
name|Status
operator|.
name|PUBLISHED
argument_list|)
return|;
block|}
DECL|method|getLegacyFormatMapForDraftComments ( ChangeNotes notes, ObjectId metaId)
specifier|private
name|ImmutableMap
argument_list|<
name|Comment
operator|.
name|Key
argument_list|,
name|Boolean
argument_list|>
name|getLegacyFormatMapForDraftComments
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|ObjectId
name|metaId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getLegacyFormatMap
argument_list|(
name|allUsers
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|metaId
argument_list|,
name|Status
operator|.
name|DRAFT
argument_list|)
return|;
block|}
DECL|method|getLegacyFormatMap ( Project.NameKey project, Change.Id changeId, ObjectId metaId, Status status)
specifier|private
name|ImmutableMap
argument_list|<
name|Comment
operator|.
name|Key
argument_list|,
name|Boolean
argument_list|>
name|getLegacyFormatMap
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|ObjectId
name|metaId
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ObjectReader
name|reader
operator|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|NoteMap
name|noteMap
init|=
name|NoteMap
operator|.
name|read
argument_list|(
name|reader
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|metaId
argument_list|)
argument_list|)
decl_stmt|;
name|RevisionNoteMap
argument_list|<
name|ChangeRevisionNote
argument_list|>
name|revNoteMap
init|=
name|RevisionNoteMap
operator|.
name|parse
argument_list|(
name|noteUtil
operator|.
name|getChangeNoteJson
argument_list|()
argument_list|,
name|noteUtil
operator|.
name|getLegacyChangeNoteRead
argument_list|()
argument_list|,
name|changeId
argument_list|,
name|reader
argument_list|,
name|noteMap
argument_list|,
name|status
argument_list|)
decl_stmt|;
return|return
name|revNoteMap
operator|.
name|revisionNotes
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|crn
lambda|->
name|crn
operator|.
name|getComments
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableMap
argument_list|(
name|c
lambda|->
name|c
operator|.
name|key
argument_list|,
name|c
lambda|->
name|c
operator|.
name|legacyFormat
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|log (Project.NameKey project, String refName)
specifier|private
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|log
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|refName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|ref
operator|!=
literal|null
argument_list|,
literal|"missing ref: %s"
argument_list|,
name|refName
argument_list|)
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rw
argument_list|)
return|;
block|}
block|}
DECL|method|assertLogEqualExceptTrees ( ImmutableList<RevCommit> actualLog, ImmutableList<RevCommit> expectedLog)
specifier|private
specifier|static
name|void
name|assertLogEqualExceptTrees
parameter_list|(
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|actualLog
parameter_list|,
name|ImmutableList
argument_list|<
name|RevCommit
argument_list|>
name|expectedLog
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actualLog
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedLog
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedLog
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|actual
init|=
name|actualLog
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RevCommit
name|expected
init|=
name|expectedLog
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"author of entry %s"
argument_list|,
name|i
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"committer of entry %s"
argument_list|,
name|i
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"message of entry %s"
argument_list|,
name|i
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"message of entry %s"
argument_list|,
name|i
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNoDifferences (ChangeNotes actual, ChangeNotes expected)
specifier|private
name|void
name|assertNoDifferences
parameter_list|(
name|ChangeNotes
name|actual
parameter_list|,
name|ChangeNotes
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|actual
argument_list|)
operator|.
name|differencesFrom
argument_list|(
name|ChangeBundle
operator|.
name|fromNotes
argument_list|(
name|commentsUtil
argument_list|,
name|expected
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

