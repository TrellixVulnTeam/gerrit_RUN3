begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|OptionalSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|IntBlobTest
specifier|public
class|class
name|IntBlobTest
block|{
comment|// Note: Can't easily test GitRefUpdated behavior, since binding GitRefUpdated requires a thick
comment|// stack of dependencies, and it's not just a simple interface or abstract class.
DECL|field|projectName
specifier|private
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|repo
specifier|private
name|InMemoryRepository
name|repo
decl_stmt|;
DECL|field|tr
specifier|private
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|tr
decl_stmt|;
DECL|field|rw
specifier|private
name|RevWalk
name|rw
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|projectName
operator|=
name|Project
operator|.
name|nameKey
argument_list|(
literal|"repo"
argument_list|)
expr_stmt|;
name|repo
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|rw
operator|=
name|tr
operator|.
name|getRevWalk
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNoRef ()
specifier|public
name|void
name|parseNoRef
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
literal|"refs/nothing"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseNonBlob ()
specifier|public
name|void
name|parseNonBlob
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo/master"
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|refName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
try|try
block|{
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"Expected IncorrectObjectTypeException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
annotation|@
name|Test
DECL|method|parseValid ()
specifier|public
name|void
name|parseValid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|ObjectId
name|id
init|=
name|tr
operator|.
name|update
argument_list|(
name|refName
argument_list|,
name|tr
operator|.
name|blob
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|id
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseWithWhitespace ()
specifier|public
name|void
name|parseWithWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|ObjectId
name|id
init|=
name|tr
operator|.
name|update
argument_list|(
name|refName
argument_list|,
name|tr
operator|.
name|blob
argument_list|(
literal|" 123 "
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|id
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseInvalid ()
specifier|public
name|void
name|parseInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|ObjectId
name|id
init|=
name|tr
operator|.
name|update
argument_list|(
name|refName
argument_list|,
name|tr
operator|.
name|blob
argument_list|(
literal|"1 2 3"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"Expected StorageException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"invalid value in refs/foo blob at "
operator|+
name|id
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|tryStoreNoOldId ()
specifier|public
name|void
name|tryStoreNoOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|IntBlob
operator|.
name|tryStore
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|ru
operator|.
name|getNewObjectId
argument_list|()
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tryStoreOldIdZero ()
specifier|public
name|void
name|tryStoreOldIdZero
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|IntBlob
operator|.
name|tryStore
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
literal|123
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|ru
operator|.
name|getNewObjectId
argument_list|()
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tryStoreCorrectOldId ()
specifier|public
name|void
name|tryStoreCorrectOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|ObjectId
name|id
init|=
name|tr
operator|.
name|update
argument_list|(
name|refName
argument_list|,
name|tr
operator|.
name|blob
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|IntBlob
operator|.
name|tryStore
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|id
argument_list|,
literal|456
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|ru
operator|.
name|getNewObjectId
argument_list|()
argument_list|,
literal|456
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tryStoreWrongOldId ()
specifier|public
name|void
name|tryStoreWrongOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|RefUpdate
name|ru
init|=
name|IntBlob
operator|.
name|tryStore
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|,
literal|123
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|LOCK_FAILURE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|storeNoOldId ()
specifier|public
name|void
name|storeNoOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|IntBlob
operator|.
name|store
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|getRef
argument_list|(
name|refName
argument_list|)
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|storeOldIdZero ()
specifier|public
name|void
name|storeOldIdZero
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|IntBlob
operator|.
name|store
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
literal|123
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|getRef
argument_list|(
name|refName
argument_list|)
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|storeCorrectOldId ()
specifier|public
name|void
name|storeCorrectOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
name|ObjectId
name|id
init|=
name|tr
operator|.
name|update
argument_list|(
name|refName
argument_list|,
name|tr
operator|.
name|blob
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|IntBlob
operator|.
name|store
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|id
argument_list|,
literal|456
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|getRef
argument_list|(
name|refName
argument_list|)
argument_list|,
literal|456
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|storeWrongOldId ()
specifier|public
name|void
name|storeWrongOldId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|"refs/foo"
decl_stmt|;
try|try
block|{
name|IntBlob
operator|.
name|store
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
argument_list|,
literal|123
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected LockFailureException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockFailureException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getFailedRefs
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/foo"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|getRef (String refName)
specifier|private
name|ObjectId
name|getRef
parameter_list|(
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
operator|.
name|getObjectId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

