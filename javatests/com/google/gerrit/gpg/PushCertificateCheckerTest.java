begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyIdToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|expiredKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|validKeyWithExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|validKeyWithoutExpiration
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|BCPGOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignatureGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignatureSubpacketGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPGPContentSignerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificateIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificateParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|SignedPushConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PushCertificateCheckerTest
specifier|public
class|class
name|PushCertificateCheckerTest
block|{
DECL|field|repo
specifier|private
name|InMemoryRepository
name|repo
decl_stmt|;
DECL|field|store
specifier|private
name|PublicKeyStore
name|store
decl_stmt|;
DECL|field|signedPushConfig
specifier|private
name|SignedPushConfig
name|signedPushConfig
decl_stmt|;
DECL|field|checker
specifier|private
name|PushCertificateChecker
name|checker
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key1
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|TestKey
name|key3
init|=
name|expiredKey
argument_list|()
decl_stmt|;
name|repo
operator|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"repo"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PublicKeyStore
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|key1
operator|.
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|key3
operator|.
name|getPublicKeyRing
argument_list|()
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
operator|new
name|PersonIdent
argument_list|(
literal|"A U Thor"
argument_list|,
literal|"author@example.com"
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
name|store
operator|.
name|save
argument_list|(
name|cb
argument_list|)
argument_list|)
expr_stmt|;
name|signedPushConfig
operator|=
operator|new
name|SignedPushConfig
argument_list|()
expr_stmt|;
name|signedPushConfig
operator|.
name|setCertNonceSeed
argument_list|(
literal|"sekret"
argument_list|)
expr_stmt|;
name|signedPushConfig
operator|.
name|setCertNonceSlopLimit
argument_list|(
literal|60
operator|*
literal|24
argument_list|)
expr_stmt|;
name|checker
operator|=
name|newChecker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|newChecker (boolean checkNonce)
specifier|private
name|PushCertificateChecker
name|newChecker
parameter_list|(
name|boolean
name|checkNonce
parameter_list|)
block|{
name|PublicKeyChecker
name|keyChecker
init|=
operator|new
name|PublicKeyChecker
argument_list|()
operator|.
name|setStore
argument_list|(
name|store
argument_list|)
decl_stmt|;
return|return
operator|new
name|PushCertificateChecker
argument_list|(
name|keyChecker
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldClose
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
operator|.
name|setCheckNonce
argument_list|(
name|checkNonce
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|validCert ()
specifier|public
name|void
name|validCert
parameter_list|()
throws|throws
name|Exception
block|{
name|PushCertificate
name|cert
init|=
name|newSignedCert
argument_list|(
name|validNonce
argument_list|()
argument_list|,
name|validKeyWithoutExpiration
argument_list|()
argument_list|)
decl_stmt|;
name|assertNoProblems
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidNonce ()
specifier|public
name|void
name|invalidNonce
parameter_list|()
throws|throws
name|Exception
block|{
name|PushCertificate
name|cert
init|=
name|newSignedCert
argument_list|(
literal|"invalid-nonce"
argument_list|,
name|validKeyWithoutExpiration
argument_list|()
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|cert
argument_list|,
literal|"Invalid nonce"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidNonceNotChecked ()
specifier|public
name|void
name|invalidNonceNotChecked
parameter_list|()
throws|throws
name|Exception
block|{
name|checker
operator|=
name|newChecker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PushCertificate
name|cert
init|=
name|newSignedCert
argument_list|(
literal|"invalid-nonce"
argument_list|,
name|validKeyWithoutExpiration
argument_list|()
argument_list|)
decl_stmt|;
name|assertNoProblems
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|missingKey ()
specifier|public
name|void
name|missingKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key2
init|=
name|validKeyWithExpiration
argument_list|()
decl_stmt|;
name|PushCertificate
name|cert
init|=
name|newSignedCert
argument_list|(
name|validNonce
argument_list|()
argument_list|,
name|key2
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|cert
argument_list|,
literal|"No public keys found for key ID "
operator|+
name|keyIdToString
argument_list|(
name|key2
operator|.
name|getKeyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidKey ()
specifier|public
name|void
name|invalidKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key3
init|=
name|expiredKey
argument_list|()
decl_stmt|;
name|PushCertificate
name|cert
init|=
name|newSignedCert
argument_list|(
name|validNonce
argument_list|()
argument_list|,
name|key3
argument_list|)
decl_stmt|;
name|assertProblems
argument_list|(
name|cert
argument_list|,
literal|"Invalid public key "
operator|+
name|keyToString
argument_list|(
name|key3
operator|.
name|getPublicKey
argument_list|()
argument_list|)
operator|+
literal|":\n  Key is expired"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|signatureByExpiredKeyBeforeExpiration ()
specifier|public
name|void
name|signatureByExpiredKeyBeforeExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key3
init|=
name|expiredKey
argument_list|()
decl_stmt|;
name|Date
name|now
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss Z"
argument_list|)
operator|.
name|parse
argument_list|(
literal|"2005-07-10 12:00:00 -0400"
argument_list|)
decl_stmt|;
name|PushCertificate
name|cert
init|=
name|newSignedCert
argument_list|(
name|validNonce
argument_list|()
argument_list|,
name|key3
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|assertNoProblems
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
DECL|method|validNonce ()
specifier|private
name|String
name|validNonce
parameter_list|()
block|{
return|return
name|signedPushConfig
operator|.
name|getNonceGenerator
argument_list|()
operator|.
name|createNonce
argument_list|(
name|repo
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
return|;
block|}
DECL|method|newSignedCert (String nonce, TestKey signingKey)
specifier|private
name|PushCertificate
name|newSignedCert
parameter_list|(
name|String
name|nonce
parameter_list|,
name|TestKey
name|signingKey
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newSignedCert
argument_list|(
name|nonce
argument_list|,
name|signingKey
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newSignedCert (String nonce, TestKey signingKey, Date now)
specifier|private
name|PushCertificate
name|newSignedCert
parameter_list|(
name|String
name|nonce
parameter_list|,
name|TestKey
name|signingKey
parameter_list|,
name|Date
name|now
parameter_list|)
throws|throws
name|Exception
block|{
name|PushCertificateIdent
name|ident
init|=
operator|new
name|PushCertificateIdent
argument_list|(
name|signingKey
operator|.
name|getFirstUserId
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|-
literal|7
operator|*
literal|60
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
literal|"certificate version 0.1\n"
operator|+
literal|"pusher "
operator|+
name|ident
operator|.
name|getRaw
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"pushee test://localhost/repo.git\n"
operator|+
literal|"nonce "
operator|+
name|nonce
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"0000000000000000000000000000000000000000"
operator|+
literal|" deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
operator|+
literal|" refs/heads/master\n"
decl_stmt|;
name|PGPSignatureGenerator
name|gen
init|=
operator|new
name|PGPSignatureGenerator
argument_list|(
operator|new
name|BcPGPContentSignerBuilder
argument_list|(
name|signingKey
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|PGPUtil
operator|.
name|SHA1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|now
operator|!=
literal|null
condition|)
block|{
name|PGPSignatureSubpacketGenerator
name|subGen
init|=
operator|new
name|PGPSignatureSubpacketGenerator
argument_list|()
decl_stmt|;
name|subGen
operator|.
name|setSignatureCreationTime
argument_list|(
literal|false
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setHashedSubpackets
argument_list|(
name|subGen
operator|.
name|generate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gen
operator|.
name|init
argument_list|(
name|PGPSignature
operator|.
name|BINARY_DOCUMENT
argument_list|,
name|signingKey
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|gen
operator|.
name|update
argument_list|(
name|payload
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|PGPSignature
name|sig
init|=
name|gen
operator|.
name|generate
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|BCPGOutputStream
name|out
init|=
operator|new
name|BCPGOutputStream
argument_list|(
operator|new
name|ArmoredOutputStream
argument_list|(
name|bout
argument_list|)
argument_list|)
init|)
block|{
name|sig
operator|.
name|encode
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|String
name|cert
init|=
name|payload
operator|+
operator|new
name|String
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|cert
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|PushCertificateParser
name|parser
init|=
operator|new
name|PushCertificateParser
argument_list|(
name|repo
argument_list|,
name|signedPushConfig
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
return|;
block|}
DECL|method|assertProblems (PushCertificate cert, String first, String... rest)
specifier|private
name|void
name|assertProblems
parameter_list|(
name|PushCertificate
name|cert
parameter_list|,
name|String
name|first
parameter_list|,
name|String
modifier|...
name|rest
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rest
argument_list|)
argument_list|)
expr_stmt|;
name|CheckResult
name|result
init|=
name|checker
operator|.
name|check
argument_list|(
name|cert
argument_list|)
operator|.
name|getCheckResult
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoProblems (PushCertificate cert)
specifier|private
name|void
name|assertNoProblems
parameter_list|(
name|PushCertificate
name|cert
parameter_list|)
block|{
name|CheckResult
name|result
init|=
name|checker
operator|.
name|check
argument_list|(
name|cert
argument_list|)
operator|.
name|getCheckResult
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|result
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

