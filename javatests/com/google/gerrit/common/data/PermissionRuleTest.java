begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PermissionRuleTest
specifier|public
class|class
name|PermissionRuleTest
block|{
DECL|field|groupReference
specifier|private
name|GroupReference
name|groupReference
decl_stmt|;
DECL|field|permissionRule
specifier|private
name|PermissionRule
name|permissionRule
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|this
operator|.
name|groupReference
operator|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid"
argument_list|)
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|this
operator|.
name|permissionRule
operator|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAndSetAction ()
specifier|public
name|void
name|getAndSetAction
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Action
operator|.
name|ALLOW
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|DENY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Action
operator|.
name|DENY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetActionToNull ()
specifier|public
name|void
name|cannotSetActionToNull
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|permissionRule
operator|.
name|setAction
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setDeny ()
specifier|public
name|void
name|setDeny
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setDeny
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setBlock ()
specifier|public
name|void
name|setBlock
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setBlock
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setForce ()
specifier|public
name|void
name|setForce
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setForce
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setMin ()
specifier|public
name|void
name|setMin
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setMin
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setMin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setMax ()
specifier|public
name|void
name|setMax
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setMax
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setMax
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setRange ()
specifier|public
name|void
name|setRange
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setRange
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setRange
argument_list|(
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setRange
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasRange ()
specifier|public
name|void
name|hasRange
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|hasRange
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setMin
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|hasRange
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setMax
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|hasRange
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getGroup ()
specifier|public
name|void
name|getGroup
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setGroup ()
specifier|public
name|void
name|setGroup
parameter_list|()
block|{
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference2
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|groupReference
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupReference
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setGroup
argument_list|(
name|groupReference2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupReference2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeFromAnyBlock ()
specifier|public
name|void
name|mergeFromAnyBlock
parameter_list|()
block|{
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference1
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setBlock
argument_list|()
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setDeny
argument_list|()
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isBlock
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeFromAnyDeny ()
specifier|public
name|void
name|mergeFromAnyDeny
parameter_list|()
block|{
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference1
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setDeny
argument_list|()
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|isDeny
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeFromAnyBatch ()
specifier|public
name|void
name|mergeFromAnyBatch
parameter_list|()
block|{
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference1
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|permissionRule2
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|permissionRule2
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|ALLOW
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeFromAnyForce ()
specifier|public
name|void
name|mergeFromAnyForce
parameter_list|()
block|{
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference1
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule2
operator|.
name|setForce
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeFromMergeRange ()
specifier|public
name|void
name|mergeFromMergeRange
parameter_list|()
block|{
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference1
argument_list|)
decl_stmt|;
name|permissionRule1
operator|.
name|setRange
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|permissionRule2
operator|.
name|setRange
argument_list|(
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeFromGroupNotChanged ()
specifier|public
name|void
name|mergeFromGroupNotChanged
parameter_list|()
block|{
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference1
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|permissionRule1
operator|.
name|mergeFrom
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule1
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupReference1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule2
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupReference2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asString ()
specifier|public
name|void
name|asString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setDeny
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"deny group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setBlock
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"block group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|BATCH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"batch group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|INTERACTIVE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"interactive group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"interactive +force group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setAction
argument_list|(
name|Action
operator|.
name|ALLOW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"+force group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setMax
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"+force +0..+1 group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|permissionRule
operator|.
name|setMin
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"+force -1..+1 group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|asString
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"+force group "
operator|+
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromString ()
specifier|public
name|void
name|fromString
parameter_list|()
block|{
name|PermissionRule
name|permissionRule
init|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"group A"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"deny group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"block group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|BLOCK
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"batch group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|BATCH
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"interactive group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|INTERACTIVE
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"interactive +force group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|INTERACTIVE
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"+force group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"+force +0..+1 group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"+force -1..+1 group A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|permissionRule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
literal|"+force group A"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permissionRule
argument_list|,
literal|"A"
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseInt ()
specifier|public
name|void
name|parseInt
parameter_list|()
block|{
name|assertThat
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
literal|"+0"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
literal|"-0"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
literal|"+1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRuleOther
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRuleOther
operator|.
name|setGroup
argument_list|(
name|groupReference
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setDeny
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRuleOther
operator|.
name|setDeny
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRuleOther
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setMin
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRuleOther
operator|.
name|setMin
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permissionRule
operator|.
name|setMax
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionRuleOther
operator|.
name|setMax
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|equals
argument_list|(
name|permissionRuleOther
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertPermissionRule ( PermissionRule permissionRule, String expectedGroupName, Action expectedAction, boolean expectedForce, int expectedMin, int expectedMax)
specifier|private
name|void
name|assertPermissionRule
parameter_list|(
name|PermissionRule
name|permissionRule
parameter_list|,
name|String
name|expectedGroupName
parameter_list|,
name|Action
name|expectedAction
parameter_list|,
name|boolean
name|expectedForce
parameter_list|,
name|int
name|expectedMin
parameter_list|,
name|int
name|expectedMax
parameter_list|)
block|{
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGroupName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAction
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedForce
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permissionRule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMax
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

