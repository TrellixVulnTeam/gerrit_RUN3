begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PermissionTest
specifier|public
class|class
name|PermissionTest
block|{
DECL|field|PERMISSION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PERMISSION_NAME
init|=
literal|"foo"
decl_stmt|;
DECL|field|permission
specifier|private
name|Permission
name|permission
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|this
operator|.
name|permission
operator|=
operator|new
name|Permission
argument_list|(
name|PERMISSION_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isPermission ()
specifier|public
name|void
name|isPermission
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|isPermission
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isPermission
argument_list|(
literal|"no-permission"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isPermission
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isPermission
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isPermission
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasRange ()
specifier|public
name|void
name|hasRange
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|hasRange
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|hasRange
argument_list|(
literal|"no-permission"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|hasRange
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|hasRange
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|hasRange
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isLabel ()
specifier|public
name|void
name|isLabel
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabel
argument_list|(
literal|"no-permission"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabel
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabel
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isLabelAs ()
specifier|public
name|void
name|isLabelAs
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabelAs
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabelAs
argument_list|(
literal|"no-permission"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabelAs
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabelAs
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|isLabelAs
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forLabel ()
specifier|public
name|void
name|forLabel
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forLabelAs ()
specifier|public
name|void
name|forLabelAs
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|forLabelAs
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|extractLabel ()
specifier|public
name|void
name|extractLabel
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|extractLabel
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|extractLabel
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|extractLabel
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|extractLabel
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canBeOnAllProjects ()
specifier|public
name|void
name|canBeOnAllProjects
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
name|AccessSection
operator|.
name|ALL
argument_list|,
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
name|AccessSection
operator|.
name|ALL
argument_list|,
name|Permission
operator|.
name|OWNER
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
name|AccessSection
operator|.
name|ALL
argument_list|,
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
name|AccessSection
operator|.
name|ALL
argument_list|,
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|ABANDON
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|OWNER
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Permission
operator|.
name|canBeOnAllProjects
argument_list|(
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getName ()
specifier|public
name|void
name|getName
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PERMISSION_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getLabel ()
specifier|public
name|void
name|getLabel
parameter_list|()
block|{
name|assertThat
argument_list|(
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
literal|"Code-Review"
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|LABEL_AS
operator|+
literal|"Code-Review"
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|Permission
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|ABANDON
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exclusiveGroup ()
specifier|public
name|void
name|exclusiveGroup
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permission
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|permission
operator|.
name|setExclusiveGroup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noExclusiveGroupOnOwnerPermission ()
specifier|public
name|void
name|noExclusiveGroupOnOwnerPermission
parameter_list|()
block|{
name|Permission
name|permission
init|=
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|OWNER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permission
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getEmptyRules ()
specifier|public
name|void
name|getEmptyRules
parameter_list|()
block|{
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setAndGetRules ()
specifier|public
name|void
name|setAndGetRules
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|PermissionRule
name|permissionRule3
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-3"
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|permissionRule3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAddPermissionByModifyingListThatWasProvidedToAccessSection ()
specifier|public
name|void
name|cannotAddPermissionByModifyingListThatWasProvidedToAccessSection
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference3
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-3"
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|permissionRule1
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|PermissionRule
name|permissionRule3
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference3
argument_list|)
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
name|permissionRule3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getNonExistingRule ()
specifier|public
name|void
name|getNonExistingRule
parameter_list|()
block|{
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRule ()
specifier|public
name|void
name|getRule
parameter_list|()
block|{
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|permissionRule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMissingRuleOnGet ()
specifier|public
name|void
name|createMissingRuleOnGet
parameter_list|()
block|{
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|groupReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addRule ()
specifier|public
name|void
name|addRule
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|GroupReference
name|groupReference3
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-3"
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|PermissionRule
name|permissionRule3
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference3
argument_list|)
decl_stmt|;
name|permission
operator|.
name|add
argument_list|(
name|permissionRule3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|permissionRule3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|,
name|permissionRule3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeRule ()
specifier|public
name|void
name|removeRule
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference3
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-3"
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule3
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference3
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|,
name|permissionRule3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|permission
operator|.
name|remove
argument_list|(
name|permissionRule3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeRuleByGroupReference ()
specifier|public
name|void
name|removeRuleByGroupReference
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference3
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-3"
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule3
init|=
operator|new
name|PermissionRule
argument_list|(
name|groupReference3
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|,
name|permissionRule3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|permission
operator|.
name|removeRule
argument_list|(
name|groupReference3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|clearRules ()
specifier|public
name|void
name|clearRules
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|permission
operator|.
name|clearRules
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergePermissions ()
specifier|public
name|void
name|mergePermissions
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule3
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-3"
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
argument_list|)
decl_stmt|;
name|Permission
name|permission1
init|=
operator|new
name|Permission
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|permission1
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|Permission
name|permission2
init|=
operator|new
name|Permission
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|permission2
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule2
argument_list|,
name|permissionRule3
argument_list|)
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|mergeFrom
argument_list|(
name|permission2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission1
operator|.
name|getRules
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|,
name|permissionRule3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|PermissionRule
name|permissionRule1
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-1"
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionRule
name|permissionRule2
init|=
operator|new
name|PermissionRule
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-2"
argument_list|)
argument_list|,
literal|"group2"
argument_list|)
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|Permission
name|permissionSameRulesOtherName
init|=
operator|new
name|Permission
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|permissionSameRulesOtherName
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|equals
argument_list|(
name|permissionSameRulesOtherName
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|Permission
name|permissionSameRulesSameNameOtherExclusiveGroup
init|=
operator|new
name|Permission
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|permissionSameRulesSameNameOtherExclusiveGroup
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|,
name|permissionRule2
argument_list|)
argument_list|)
expr_stmt|;
name|permissionSameRulesSameNameOtherExclusiveGroup
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|equals
argument_list|(
name|permissionSameRulesSameNameOtherExclusiveGroup
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|Permission
name|permissionOther
init|=
operator|new
name|Permission
argument_list|(
name|PERMISSION_NAME
argument_list|)
decl_stmt|;
name|permissionOther
operator|.
name|setRules
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|permissionRule1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|equals
argument_list|(
name|permissionOther
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|permissionOther
operator|.
name|add
argument_list|(
name|permissionRule2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|equals
argument_list|(
name|permissionOther
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

