begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GroupReferenceTest
specifier|public
class|class
name|GroupReferenceTest
block|{
annotation|@
name|Test
DECL|method|forGroupDescription ()
specifier|public
name|void
name|forGroupDescription
parameter_list|()
block|{
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-foo"
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference
init|=
name|GroupReference
operator|.
name|forGroup
argument_list|(
operator|new
name|GroupDescription
operator|.
name|Basic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|UUID
name|getGroupUUID
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEmailAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|create ()
specifier|public
name|void
name|create
parameter_list|()
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createWithoutUuid ()
specifier|public
name|void
name|createWithoutUuid
parameter_list|()
block|{
comment|// GroupReferences where the UUID is null are used to represent groups from project.config that
comment|// cannot be resolved.
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateWithoutName ()
specifier|public
name|void
name|cannotCreateWithoutName
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isGroupReference ()
specifier|public
name|void
name|isGroupReference
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|isGroupReference
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|isGroupReference
argument_list|(
literal|"groupfoo"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|isGroupReference
argument_list|(
literal|"group foo"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|isGroupReference
argument_list|(
literal|"group foo-bar"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|isGroupReference
argument_list|(
literal|"group foo bar"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|extractGroupName ()
specifier|public
name|void
name|extractGroupName
parameter_list|()
block|{
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
literal|"groupfoo"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
literal|"group foo"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
literal|"group foo-bar"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"foo-bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
literal|"group foo bar"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"foo bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAndSetUuid ()
specifier|public
name|void
name|getAndSetUuid
parameter_list|()
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-foo"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-bar"
argument_list|)
decl_stmt|;
name|groupReference
operator|.
name|setUUID
argument_list|(
name|uuid2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid2
argument_list|)
expr_stmt|;
comment|// GroupReferences where the UUID is null are used to represent groups from project.config that
comment|// cannot be resolved.
name|groupReference
operator|.
name|setUUID
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAndSetName ()
specifier|public
name|void
name|getAndSetName
parameter_list|()
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-foo"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|name2
init|=
literal|"bar"
decl_stmt|;
name|groupReference
operator|.
name|setName
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|groupReference
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toConfigValue ()
specifier|public
name|void
name|toConfigValue
parameter_list|()
block|{
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|GroupReference
name|groupReference
init|=
operator|new
name|GroupReference
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-foo"
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference
operator|.
name|toConfigValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"group "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-foo"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid-bar"
argument_list|)
decl_stmt|;
name|String
name|name1
init|=
literal|"foo"
decl_stmt|;
name|String
name|name2
init|=
literal|"bar"
decl_stmt|;
name|GroupReference
name|groupReference1
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid1
argument_list|,
name|name1
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference2
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid1
argument_list|,
name|name2
argument_list|)
decl_stmt|;
name|GroupReference
name|groupReference3
init|=
operator|new
name|GroupReference
argument_list|(
name|uuid2
argument_list|,
name|name1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupReference1
operator|.
name|equals
argument_list|(
name|groupReference2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference1
operator|.
name|equals
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groupReference2
operator|.
name|equals
argument_list|(
name|groupReference3
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashcode ()
specifier|public
name|void
name|testHashcode
parameter_list|()
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"uuid1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|uuid1
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|GroupReference
argument_list|(
name|uuid1
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the following calls don't fail with an exception.
operator|new
name|GroupReference
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

