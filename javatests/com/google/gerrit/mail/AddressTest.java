begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.mail
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AddressTest
specifier|public
class|class
name|AddressTest
block|{
annotation|@
name|Test
DECL|method|parse_NameEmail1 ()
specifier|public
name|void
name|parse_NameEmail1
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"A U Thor<author@example.com>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A U Thor"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"author@example.com"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_NameEmail2 ()
specifier|public
name|void
name|parse_NameEmail2
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"A<a@b>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"a@b"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_NameEmail3 ()
specifier|public
name|void
name|parse_NameEmail3
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"<a@b>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"a@b"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_NameEmail4 ()
specifier|public
name|void
name|parse_NameEmail4
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"A U Thor<author@example.com>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A U Thor"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"author@example.com"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_NameEmail5 ()
specifier|public
name|void
name|parse_NameEmail5
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"A U Thor<author@example.com>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A U Thor"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"author@example.com"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_Email1 ()
specifier|public
name|void
name|parse_Email1
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"author@example.com"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"author@example.com"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_Email2 ()
specifier|public
name|void
name|parse_Email2
parameter_list|()
block|{
specifier|final
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"a@b"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"a@b"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parse_NewTLD ()
specifier|public
name|void
name|parse_NewTLD
parameter_list|()
block|{
name|Address
name|a
init|=
name|Address
operator|.
name|parse
argument_list|(
literal|"A U Thor<author@example.systems>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A U Thor"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"author@example.systems"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseInvalid ()
specifier|public
name|void
name|parseInvalid
parameter_list|()
block|{
name|assertInvalid
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"<a"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"<a>"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<a>"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<a>"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<@"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"<a@"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"<a@>"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<a@>"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<a@>"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"a<@a>"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalid (String in)
specifier|private
name|void
name|assertInvalid
parameter_list|(
name|String
name|in
parameter_list|)
block|{
try|try
block|{
name|Address
operator|.
name|parse
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException for "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Invalid email address: "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail1 ()
specifier|public
name|void
name|toHeaderString_NameEmail1
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail2 ()
specifier|public
name|void
name|toHeaderString_NameEmail2
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A B"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A B<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail3 ()
specifier|public
name|void
name|toHeaderString_NameEmail3
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A B. C"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"\"A B. C\"<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail4 ()
specifier|public
name|void
name|toHeaderString_NameEmail4
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A B, C"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"\"A B, C\"<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail5 ()
specifier|public
name|void
name|toHeaderString_NameEmail5
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A \" C"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"\"A \\\" C\"<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail6 ()
specifier|public
name|void
name|toHeaderString_NameEmail6
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A \u20ac B"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"=?UTF-8?Q?A_=E2=82=AC_B?=<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_NameEmail7 ()
specifier|public
name|void
name|toHeaderString_NameEmail7
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|"A \u20ac B (Code Review)"
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"=?UTF-8?Q?A_=E2=82=AC_B_=28Code_Review=29?=<a@a>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_Email1 ()
specifier|public
name|void
name|toHeaderString_Email1
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|null
argument_list|,
literal|"a@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"a@a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toHeaderString_Email2 ()
specifier|public
name|void
name|toHeaderString_Email2
parameter_list|()
block|{
name|assertThat
argument_list|(
name|format
argument_list|(
literal|null
argument_list|,
literal|"a,b@a"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"<a,b@a>"
argument_list|)
expr_stmt|;
block|}
DECL|method|format (String name, String email)
specifier|private
specifier|static
name|String
name|format
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|email
parameter_list|)
block|{
return|return
operator|new
name|Address
argument_list|(
name|name
argument_list|,
name|email
argument_list|)
operator|.
name|toHeaderString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

