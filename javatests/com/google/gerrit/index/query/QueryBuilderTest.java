begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.index.query
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|ThrowableSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|QueryBuilderTest
specifier|public
class|class
name|QueryBuilderTest
extends|extends
name|GerritBaseTests
block|{
DECL|class|TestPredicate
specifier|private
specifier|static
class|class
name|TestPredicate
extends|extends
name|Predicate
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|TestPredicate (String field, String value)
name|TestPredicate
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy (Collection<? extends Predicate<Object>> children)
specifier|public
name|Predicate
argument_list|<
name|Object
argument_list|>
name|copy
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|>
name|children
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|TestPredicate
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TestPredicate
name|p
init|=
operator|(
name|TestPredicate
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|field
argument_list|,
name|p
operator|.
name|field
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|p
operator|.
name|value
argument_list|)
return|;
block|}
block|}
DECL|class|TestQueryBuilder
specifier|private
specifier|static
class|class
name|TestQueryBuilder
extends|extends
name|QueryBuilder
argument_list|<
name|Object
argument_list|,
name|TestQueryBuilder
argument_list|>
block|{
DECL|method|TestQueryBuilder ()
name|TestQueryBuilder
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|QueryBuilder
operator|.
name|Definition
argument_list|<>
argument_list|(
name|TestQueryBuilder
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Operator
DECL|method|a (String value)
specifier|public
name|Predicate
argument_list|<
name|Object
argument_list|>
name|a
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValue ()
specifier|public
name|void
name|fieldNameAndValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:foo"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldWithParenthesizedValues ()
specifier|public
name|void
name|fieldWithParenthesizedValues
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThatParseException
argument_list|(
literal|"a:(foo bar)"
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no viable alternative"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueThatLooksLikeFieldNameColonValue ()
specifier|public
name|void
name|fieldNameAndValueThatLooksLikeFieldNameColonValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:foo:bar"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueThatLooksLikeWordColonValue ()
specifier|public
name|void
name|fieldNameAndValueThatLooksLikeWordColonValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:*:bar"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"*:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueWithMultipleColons ()
specifier|public
name|void
name|fieldNameAndValueWithMultipleColons
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:*:*:*"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"*:*:*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exactPhraseWithQuotes ()
specifier|public
name|void
name|exactPhraseWithQuotes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:\"foo bar\""
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exactPhraseWithQuotesAndColon ()
specifier|public
name|void
name|exactPhraseWithQuotesAndColon
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:\"foo:bar\""
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exactPhraseWithBraces ()
specifier|public
name|void
name|exactPhraseWithBraces
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:{foo bar}"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|exactPhraseWithBracesAndColon ()
specifier|public
name|void
name|exactPhraseWithBracesAndColon
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|parse
argument_list|(
literal|"a:{foo:bar}"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|TestPredicate
argument_list|(
literal|"a"
argument_list|,
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parse (String query)
specifier|private
specifier|static
name|Predicate
argument_list|<
name|Object
argument_list|>
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|TestQueryBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|assertThatParseException (String query)
specifier|private
specifier|static
name|ThrowableSubject
name|assertThatParseException
parameter_list|(
name|String
name|query
parameter_list|)
block|{
try|try
block|{
operator|new
name|TestQueryBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|query
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"expected QueryParseException for "
operator|+
name|query
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
return|return
name|assertThat
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

