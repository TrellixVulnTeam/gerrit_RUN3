begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.index.query
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
operator|.
name|AND
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
operator|.
name|COLON
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
operator|.
name|DEFAULT_FIELD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
operator|.
name|FIELD_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
operator|.
name|SINGLE_WORD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
operator|.
name|parse
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|testing
operator|.
name|TreeSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|QueryParserTest
specifier|public
class|class
name|QueryParserTest
block|{
annotation|@
name|Test
DECL|method|fieldNameAndValue ()
specifier|public
name|void
name|fieldNameAndValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"project:tools/gerrit"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"tools/gerrit"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueThatLooksLikeFieldNameColon ()
specifier|public
name|void
name|fieldNameAndValueThatLooksLikeFieldNameColon
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This should work, but doesn't due to a known issue.
name|assertParseFails
argument_list|(
literal|"project:foo:"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueThatLooksLikeFieldNameColonValue ()
specifier|public
name|void
name|fieldNameAndValueThatLooksLikeFieldNameColonValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"project:foo:bar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueThatLooksLikeWordColonValue ()
specifier|public
name|void
name|fieldNameAndValueThatLooksLikeWordColonValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"project:x*y:a*b"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"x*y"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"a*b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueThatLooksLikeWordColon ()
specifier|public
name|void
name|fieldNameAndValueThatLooksLikeWordColon
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This should work, but doesn't due to a known issue.
name|assertParseFails
argument_list|(
literal|"project:x*y:"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueWithMultipleColons ()
specifier|public
name|void
name|fieldNameAndValueWithMultipleColons
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"project:*:*:*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|3
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|3
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|3
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|4
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|4
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|4
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueWithColonFollowedByAnotherField ()
specifier|public
name|void
name|fieldNameAndValueWithColonFollowedByAnotherField
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"project:foo:bar file:baz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueWithColonFollowedByOpenParen ()
specifier|public
name|void
name|fieldNameAndValueWithColonFollowedByOpenParen
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"project:foo:bar (file:baz)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fieldNameAndValueWithColonFollowedByCloseParen ()
specifier|public
name|void
name|fieldNameAndValueWithColonFollowedByCloseParen
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"(project:foo:bar) file:baz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultFieldWithColon ()
specifier|public
name|void
name|defaultFieldWithColon
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|r
init|=
name|parse
argument_list|(
literal|"CodeReview:+2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasType
argument_list|(
name|DEFAULT_FIELD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasChildCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"CodeReview"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasType
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasText
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|1
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasType
argument_list|(
name|SINGLE_WORD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasText
argument_list|(
literal|"+2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|child
argument_list|(
literal|2
argument_list|)
operator|.
name|hasNoChildren
argument_list|()
expr_stmt|;
block|}
DECL|method|assertParseFails (String query)
specifier|private
specifier|static
name|void
name|assertParseFails
parameter_list|(
name|String
name|query
parameter_list|)
block|{
try|try
block|{
name|parse
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected parse to fail: %s"
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
block|}
end_class

end_unit

