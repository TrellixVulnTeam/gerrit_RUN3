begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|DfsRepositoryDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|JUnit4
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4
operator|.
name|class
argument_list|)
DECL|class|RefUpdateUtilTest
specifier|public
class|class
name|RefUpdateUtilTest
block|{
DECL|field|OK
specifier|private
specifier|static
specifier|final
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
name|OK
init|=
name|c
lambda|->
name|c
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
argument_list|)
decl_stmt|;
DECL|field|LOCK_FAILURE
specifier|private
specifier|static
specifier|final
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
name|LOCK_FAILURE
init|=
name|c
lambda|->
name|c
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|LOCK_FAILURE
argument_list|)
decl_stmt|;
DECL|field|REJECTED
specifier|private
specifier|static
specifier|final
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
name|REJECTED
init|=
name|c
lambda|->
name|c
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
decl_stmt|;
DECL|field|ABORTED
specifier|private
specifier|static
specifier|final
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
name|ABORTED
init|=
name|c
lambda|->
block|{
name|c
operator|.
name|setResult
argument_list|(
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
argument_list|)
expr_stmt|;
name|ReceiveCommand
operator|.
name|abort
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|c
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
operator|&&
name|c
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|LOCK_FAILURE
operator|&&
name|c
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
argument_list|,
literal|"unexpected state after abort: %s"
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|checkBatchRefUpdateResults ()
specifier|public
name|void
name|checkBatchRefUpdateResults
parameter_list|()
throws|throws
name|Exception
block|{
name|checkResults
argument_list|()
expr_stmt|;
name|checkResults
argument_list|(
name|OK
argument_list|)
expr_stmt|;
name|checkResults
argument_list|(
name|OK
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|REJECTED
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|OK
argument_list|,
name|REJECTED
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|REJECTED
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|REJECTED
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|LOCK_FAILURE
argument_list|,
name|REJECTED
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|ABORTED
argument_list|,
name|REJECTED
argument_list|)
expr_stmt|;
name|assertIoException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|ABORTED
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertLockFailureException
argument_list|(
name|LOCK_FAILURE
argument_list|)
expr_stmt|;
name|assertLockFailureException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|LOCK_FAILURE
argument_list|)
expr_stmt|;
name|assertLockFailureException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|LOCK_FAILURE
argument_list|,
name|ABORTED
argument_list|)
expr_stmt|;
name|assertLockFailureException
argument_list|(
name|LOCK_FAILURE
argument_list|,
name|LOCK_FAILURE
argument_list|,
name|ABORTED
argument_list|,
name|ABORTED
argument_list|)
expr_stmt|;
name|assertLockFailureException
argument_list|(
name|ABORTED
argument_list|)
expr_stmt|;
name|assertLockFailureException
argument_list|(
name|ABORTED
argument_list|,
name|ABORTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SafeVarargs
DECL|method|checkResults (Consumer<ReceiveCommand>.... resultSetters)
specifier|private
specifier|static
name|void
name|checkResults
parameter_list|(
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
modifier|...
name|resultSetters
parameter_list|)
throws|throws
name|Exception
block|{
name|RefUpdateUtil
operator|.
name|checkResults
argument_list|(
name|newBatchRefUpdate
argument_list|(
name|resultSetters
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SafeVarargs
DECL|method|assertIoException (Consumer<ReceiveCommand>.... resultSetters)
specifier|private
specifier|static
name|void
name|assertIoException
parameter_list|(
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
modifier|...
name|resultSetters
parameter_list|)
block|{
name|IOException
name|thrown
init|=
name|assertThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|RefUpdateUtil
operator|.
name|checkResults
argument_list|(
name|newBatchRefUpdate
argument_list|(
name|resultSetters
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|isNotInstanceOf
argument_list|(
name|LockFailureException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SafeVarargs
DECL|method|assertLockFailureException (Consumer<ReceiveCommand>.... resultSetters)
specifier|private
specifier|static
name|void
name|assertLockFailureException
parameter_list|(
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
modifier|...
name|resultSetters
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|LockFailureException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|RefUpdateUtil
operator|.
name|checkResults
argument_list|(
name|newBatchRefUpdate
argument_list|(
name|resultSetters
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SafeVarargs
DECL|method|newBatchRefUpdate (Consumer<ReceiveCommand>.... resultSetters)
specifier|private
specifier|static
name|BatchRefUpdate
name|newBatchRefUpdate
parameter_list|(
name|Consumer
argument_list|<
name|ReceiveCommand
argument_list|>
modifier|...
name|resultSetters
parameter_list|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
operator|new
name|InMemoryRepository
argument_list|(
operator|new
name|DfsRepositoryDescription
argument_list|(
literal|"repo"
argument_list|)
argument_list|)
init|)
block|{
name|BatchRefUpdate
name|bru
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultSetters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ReceiveCommand
name|cmd
init|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%039x1"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%039x2"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"refs/heads/branch"
operator|+
name|i
argument_list|)
decl_stmt|;
name|bru
operator|.
name|addCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|resultSetters
index|[
name|i
index|]
operator|.
name|accept
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
return|return
name|bru
return|;
block|}
block|}
block|}
end_class

end_unit

