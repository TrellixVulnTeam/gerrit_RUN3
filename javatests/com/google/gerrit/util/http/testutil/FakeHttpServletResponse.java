begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.util.http.testutil
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|testutil
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|WriteListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_comment
comment|/** Simple fake implementation of {@link HttpServletResponse}. */
end_comment

begin_class
DECL|class|FakeHttpServletResponse
specifier|public
class|class
name|FakeHttpServletResponse
implements|implements
name|HttpServletResponse
block|{
DECL|field|actualBody
specifier|private
specifier|final
name|ByteArrayOutputStream
name|actualBody
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|status
specifier|private
name|int
name|status
init|=
name|SC_OK
decl_stmt|;
DECL|field|committed
specifier|private
name|boolean
name|committed
decl_stmt|;
DECL|field|outputStream
specifier|private
name|ServletOutputStream
name|outputStream
decl_stmt|;
DECL|field|writer
specifier|private
name|PrintWriter
name|writer
decl_stmt|;
DECL|method|FakeHttpServletResponse ()
specifier|public
name|FakeHttpServletResponse
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|flushBuffer ()
specifier|public
specifier|synchronized
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBufferSize ()
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getCharacterEncoding ()
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
name|UTF_8
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLocale ()
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|Locale
operator|.
name|US
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream ()
specifier|public
specifier|synchronized
name|ServletOutputStream
name|getOutputStream
parameter_list|()
block|{
name|checkState
argument_list|(
name|writer
operator|==
literal|null
argument_list|,
literal|"getWriter() already called"
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
name|outputStream
operator|=
operator|new
name|ServletOutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|actualBody
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriteListener
parameter_list|(
name|WriteListener
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|outputStream
return|;
block|}
annotation|@
name|Override
DECL|method|getWriter ()
specifier|public
specifier|synchronized
name|PrintWriter
name|getWriter
parameter_list|()
block|{
name|checkState
argument_list|(
name|outputStream
operator|==
literal|null
argument_list|,
literal|"getOutputStream() already called"
argument_list|)
expr_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
name|actualBody
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
return|;
block|}
annotation|@
name|Override
DECL|method|isCommitted ()
specifier|public
specifier|synchronized
name|boolean
name|isCommitted
parameter_list|()
block|{
return|return
name|committed
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|resetBuffer ()
specifier|public
name|void
name|resetBuffer
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setBufferSize (int sz)
specifier|public
name|void
name|setBufferSize
parameter_list|(
name|int
name|sz
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setCharacterEncoding (String name)
specifier|public
name|void
name|setCharacterEncoding
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|UTF_8
operator|.
name|equals
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
literal|"unsupported charset: %s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setContentLength (int length)
specifier|public
name|void
name|setContentLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|setContentLengthLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setContentLengthLong (long length)
specifier|public
name|void
name|setContentLengthLong
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|headers
operator|.
name|removeAll
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setContentType (String type)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|headers
operator|.
name|removeAll
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setLocale (Locale locale)
specifier|public
name|void
name|setLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addCookie (Cookie cookie)
specifier|public
name|void
name|addCookie
parameter_list|(
name|Cookie
name|cookie
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addDateHeader (String name, long value)
specifier|public
name|void
name|addDateHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addHeader (String name, String value)
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addIntHeader (String name, int value)
specifier|public
name|void
name|addIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|addHeader
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|containsHeader (String name)
specifier|public
name|boolean
name|containsHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|headers
operator|.
name|containsKey
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|encodeRedirectURL (String url)
specifier|public
name|String
name|encodeRedirectURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|encodeRedirectUrl (String url)
specifier|public
name|String
name|encodeRedirectUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|encodeURL (String url)
specifier|public
name|String
name|encodeURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|encodeUrl (String url)
specifier|public
name|String
name|encodeUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|sendError (int sc)
specifier|public
specifier|synchronized
name|void
name|sendError
parameter_list|(
name|int
name|sc
parameter_list|)
block|{
name|status
operator|=
name|sc
expr_stmt|;
name|committed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendError (int sc, String msg)
specifier|public
specifier|synchronized
name|void
name|sendError
parameter_list|(
name|int
name|sc
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|status
operator|=
name|sc
expr_stmt|;
name|committed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendRedirect (String loc)
specifier|public
specifier|synchronized
name|void
name|sendRedirect
parameter_list|(
name|String
name|loc
parameter_list|)
block|{
name|status
operator|=
name|SC_FOUND
expr_stmt|;
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
name|loc
argument_list|)
expr_stmt|;
name|committed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDateHeader (String name, long value)
specifier|public
name|void
name|setDateHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|setHeader
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setHeader (String name, String value)
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|headers
operator|.
name|removeAll
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setIntHeader (String name, int value)
specifier|public
name|void
name|setIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|headers
operator|.
name|removeAll
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|addIntHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStatus (int sc)
specifier|public
specifier|synchronized
name|void
name|setStatus
parameter_list|(
name|int
name|sc
parameter_list|)
block|{
name|status
operator|=
name|sc
expr_stmt|;
name|committed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setStatus (int sc, String msg)
specifier|public
specifier|synchronized
name|void
name|setStatus
parameter_list|(
name|int
name|sc
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|status
operator|=
name|sc
expr_stmt|;
name|committed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStatus ()
specifier|public
specifier|synchronized
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getHeader (String name)
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|getFirst
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|checkNotNull
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaderNames ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getHeaderNames
parameter_list|()
block|{
return|return
name|headers
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaders (String name)
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getHeaders
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|headers
operator|.
name|get
argument_list|(
name|checkNotNull
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getActualBody ()
specifier|public
name|byte
index|[]
name|getActualBody
parameter_list|()
block|{
return|return
name|actualBody
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getActualBodyString ()
specifier|public
name|String
name|getActualBodyString
parameter_list|()
block|{
return|return
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|getActualBody
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

