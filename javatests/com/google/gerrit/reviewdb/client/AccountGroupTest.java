begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.reviewdb.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
operator|.
name|UUID
operator|.
name|fromRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
operator|.
name|UUID
operator|.
name|fromRefPart
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Month
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AccountGroupTest
specifier|public
class|class
name|AccountGroupTest
block|{
DECL|field|TEST_UUID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_UUID
init|=
literal|"ccab3195282a8ce4f5014efa391e82d10f884c64"
decl_stmt|;
DECL|field|TEST_SHARDED_UUID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SHARDED_UUID
init|=
name|TEST_UUID
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
literal|"/"
operator|+
name|TEST_UUID
decl_stmt|;
annotation|@
name|Test
DECL|method|auditCreationInstant ()
specifier|public
name|void
name|auditCreationInstant
parameter_list|()
block|{
name|Instant
name|instant
init|=
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|2009
argument_list|,
name|Month
operator|.
name|JUNE
argument_list|,
literal|8
argument_list|,
literal|19
argument_list|,
literal|31
argument_list|)
operator|.
name|toInstant
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|AccountGroup
operator|.
name|auditCreationInstantTs
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Timestamp
operator|.
name|from
argument_list|(
name|instant
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRefName ()
specifier|public
name|void
name|parseRefName
parameter_list|()
block|{
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/"
operator|+
name|TEST_SHARDED_UUID
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|(
name|TEST_UUID
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/"
operator|+
name|TEST_SHARDED_UUID
operator|+
literal|"-2"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|(
name|TEST_UUID
operator|+
literal|"-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/7e/7ec4775d"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|(
literal|"7ec4775d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/fo/foo"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Missing prefix.
name|assertThat
argument_list|(
name|fromRef
argument_list|(
name|TEST_SHARDED_UUID
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Invalid shards.
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/c/"
operator|+
name|TEST_UUID
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/cca/"
operator|+
name|TEST_UUID
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Mismatched shard.
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/ca/"
operator|+
name|TEST_UUID
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/64/"
operator|+
name|TEST_UUID
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Wrong number of segments.
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/cc"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|fromRef
argument_list|(
literal|"refs/groups/"
operator|+
name|TEST_SHARDED_UUID
operator|+
literal|"/1"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseRefNameParts ()
specifier|public
name|void
name|parseRefNameParts
parameter_list|()
block|{
name|assertThat
argument_list|(
name|fromRefPart
argument_list|(
name|TEST_SHARDED_UUID
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|uuid
argument_list|(
name|TEST_UUID
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mismatched shard.
name|assertThat
argument_list|(
name|fromRefPart
argument_list|(
literal|"ab/"
operator|+
name|TEST_UUID
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|uuid (String uuid)
specifier|private
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
return|return
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|uuid
argument_list|)
return|;
block|}
block|}
end_class

end_unit

