begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.reviewdb.converter
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|proto
operator|.
name|Protos
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|CodecFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|ProtobufCodec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|// TODO(aliceks): Delete after proving binary compatibility.
end_comment

begin_class
DECL|class|ChangeConverterCompatibilityTest
specifier|public
class|class
name|ChangeConverterCompatibilityTest
block|{
DECL|field|changeCodec
specifier|private
specifier|final
name|ProtobufCodec
argument_list|<
name|Change
argument_list|>
name|changeCodec
init|=
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|Change
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|changeProtoConverter
specifier|private
specifier|final
name|ChangeProtoConverter
name|changeProtoConverter
init|=
name|ChangeProtoConverter
operator|.
name|INSTANCE
decl_stmt|;
annotation|@
name|Test
DECL|method|changeIndexFieldWithAllValuesIsBinaryCompatible ()
specifier|public
name|void
name|changeIndexFieldWithAllValuesIsBinaryCompatible
parameter_list|()
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"change 1"
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project 67"
argument_list|)
argument_list|,
literal|"branch-74"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|987654L
argument_list|)
argument_list|)
decl_stmt|;
name|change
operator|.
name|setLastUpdatedOn
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|1234567L
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|23
argument_list|)
argument_list|,
literal|"subject XYZ"
argument_list|,
literal|"original subject ABC"
argument_list|)
expr_stmt|;
name|change
operator|.
name|setTopic
argument_list|(
literal|"my topic"
argument_list|)
expr_stmt|;
name|change
operator|.
name|setSubmissionId
argument_list|(
literal|"submission ID 234"
argument_list|)
expr_stmt|;
name|change
operator|.
name|setAssignee
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|100001
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|change
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|change
operator|.
name|setReviewStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|change
operator|.
name|setRevertOf
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|180
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|resultOfOldConverter
init|=
name|convertToProto_old
argument_list|(
name|changeCodec
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultOfNewConverter
init|=
name|convertToProto_new
argument_list|(
name|changeProtoConverter
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resultOfNewConverter
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|resultOfOldConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeIndexFieldWithMandatoryValuesIsBinaryCompatible ()
specifier|public
name|void
name|changeIndexFieldWithMandatoryValuesIsBinaryCompatible
parameter_list|()
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"change 1"
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project 67"
argument_list|)
argument_list|,
literal|"branch-74"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|987654L
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultOfOldConverter
init|=
name|convertToProto_old
argument_list|(
name|changeCodec
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultOfNewConverter
init|=
name|convertToProto_new
argument_list|(
name|changeProtoConverter
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resultOfNewConverter
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|resultOfOldConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeIndexFieldWithSubjectButNotOriginalSubjectIsBinaryCompatible ()
specifier|public
name|void
name|changeIndexFieldWithSubjectButNotOriginalSubjectIsBinaryCompatible
parameter_list|()
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"change 1"
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project 67"
argument_list|)
argument_list|,
literal|"branch-74"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|987654L
argument_list|)
argument_list|)
decl_stmt|;
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|23
argument_list|)
argument_list|,
literal|"subject XYZ"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|resultOfOldConverter
init|=
name|convertToProto_old
argument_list|(
name|changeCodec
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultOfNewConverter
init|=
name|convertToProto_new
argument_list|(
name|changeProtoConverter
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resultOfNewConverter
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|resultOfOldConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeIndexFieldWithoutPatchSetIsBinaryCompatible ()
specifier|public
name|void
name|changeIndexFieldWithoutPatchSetIsBinaryCompatible
parameter_list|()
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"change 1"
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|35
argument_list|)
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"project 67"
argument_list|)
argument_list|,
literal|"branch-74"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|987654L
argument_list|)
argument_list|)
decl_stmt|;
comment|// O for patch set ID means that there isn't any current patch set.
name|change
operator|.
name|setCurrentPatchSet
argument_list|(
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|resultOfOldConverter
init|=
name|convertToProto_old
argument_list|(
name|changeCodec
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultOfNewConverter
init|=
name|convertToProto_new
argument_list|(
name|changeProtoConverter
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resultOfNewConverter
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|resultOfOldConverter
argument_list|)
expr_stmt|;
block|}
comment|// Copied from ChangeField.
DECL|method|convertToProto_old (ProtobufCodec<T> codec, T object)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|byte
index|[]
name|convertToProto_old
parameter_list|(
name|ProtobufCodec
argument_list|<
name|T
argument_list|>
name|codec
parameter_list|,
name|T
name|object
parameter_list|)
block|{
return|return
name|codec
operator|.
name|encodeToByteArray
argument_list|(
name|object
argument_list|)
return|;
block|}
comment|// Copied from ChangeField.
DECL|method|convertToProto_new (ProtoConverter<?, T> converter, T object)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|byte
index|[]
name|convertToProto_new
parameter_list|(
name|ProtoConverter
argument_list|<
name|?
argument_list|,
name|T
argument_list|>
name|converter
parameter_list|,
name|T
name|object
parameter_list|)
block|{
return|return
name|Protos
operator|.
name|toByteArray
argument_list|(
name|converter
operator|.
name|toProto
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

