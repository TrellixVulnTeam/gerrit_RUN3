begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.integration.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|integration
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|deny
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AccountCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritServer
operator|.
name|TestSshServerAddress
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitClientVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|StandaloneSiteTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseSsh
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|UseSsh
DECL|class|GitProtocolV2IT
specifier|public
class|class
name|GitProtocolV2IT
extends|extends
name|StandaloneSiteTest
block|{
DECL|field|ADMIN_PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|ADMIN_PASSWORD
init|=
literal|"secret"
decl_stmt|;
DECL|field|SSH_KEYGEN_CMD
specifier|private
specifier|final
name|String
index|[]
name|SSH_KEYGEN_CMD
init|=
operator|new
name|String
index|[]
block|{
literal|"ssh-keygen"
block|,
literal|"-t"
block|,
literal|"rsa"
block|,
literal|"-q"
block|,
literal|"-P"
block|,
literal|""
block|,
literal|"-f"
block|}
decl_stmt|;
DECL|field|GIT_LS_REMOTE
specifier|private
specifier|final
name|String
index|[]
name|GIT_LS_REMOTE
init|=
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"-c"
block|,
literal|"protocol.version=2"
block|,
literal|"ls-remote"
block|,
literal|"-o"
block|,
literal|"trace=12345"
block|}
decl_stmt|;
DECL|field|GIT_CLONE_MIRROR
specifier|private
specifier|final
name|String
index|[]
name|GIT_CLONE_MIRROR
init|=
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"-c"
block|,
literal|"protocol.version=2"
block|,
literal|"clone"
block|,
literal|"--mirror"
block|}
decl_stmt|;
DECL|field|GIT_FETCH
specifier|private
specifier|final
name|String
index|[]
name|GIT_FETCH
init|=
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"-c"
block|,
literal|"protocol.version=2"
block|,
literal|"fetch"
block|}
decl_stmt|;
DECL|field|GIT_INIT
specifier|private
specifier|final
name|String
index|[]
name|GIT_INIT
init|=
operator|new
name|String
index|[]
block|{
literal|"git"
block|,
literal|"init"
block|}
decl_stmt|;
DECL|field|GIT_SSH_COMMAND
specifier|private
specifier|final
name|String
name|GIT_SSH_COMMAND
init|=
literal|"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i"
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|private
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|accountCreator
annotation|@
name|Inject
specifier|private
name|AccountCreator
name|accountCreator
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|sshAddress
annotation|@
name|Inject
specifier|private
annotation|@
name|TestSshServerAddress
name|InetSocketAddress
name|sshAddress
decl_stmt|;
DECL|field|config
annotation|@
name|Inject
specifier|private
annotation|@
name|GerritServerConfig
name|Config
name|config
decl_stmt|;
DECL|field|allProjectsName
annotation|@
name|Inject
specifier|private
name|AllProjectsName
name|allProjectsName
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|assertGitClientVersion ()
specifier|public
specifier|static
name|void
name|assertGitClientVersion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Minimum required git-core version that supports wire protocol v2 is 2.18.0
name|GitClientVersion
name|requiredGitVersion
init|=
operator|new
name|GitClientVersion
argument_list|(
literal|2
argument_list|,
literal|18
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|GitClientVersion
name|actualGitVersion
init|=
operator|new
name|GitClientVersion
argument_list|(
name|execute
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"git"
argument_list|,
literal|"version"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// If git client version cannot be updated, consider to skip this tests. Due to
comment|// an existing issue in bazel, JUnit assumption violation feature cannot be used.
name|assertThat
argument_list|(
name|actualGitVersion
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|requiredGitVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGitWireProtocolV2WithSsh ()
specifier|public
name|void
name|testGitWireProtocolV2WithSsh
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ServerContext
name|ctx
init|=
name|startServer
argument_list|()
init|)
block|{
name|ctx
operator|.
name|getInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Create project
name|Project
operator|.
name|NameKey
name|project
init|=
name|Project
operator|.
name|nameKey
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up project permission
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Set protocol.version=2 in target repository
name|execute
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"git"
argument_list|,
literal|"config"
argument_list|,
literal|"protocol.version"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|sitePaths
operator|.
name|site_path
operator|.
name|resolve
argument_list|(
literal|"git"
argument_list|)
operator|.
name|resolve
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
name|Constants
operator|.
name|DOT_GIT
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve HTTP url
name|String
name|url
init|=
name|config
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalweburl"
argument_list|)
decl_stmt|;
name|String
name|urlDestinationTemplate
init|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
operator|+
literal|"%s:secret@"
operator|+
name|url
operator|.
name|substring
argument_list|(
literal|7
argument_list|,
name|url
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"/a/"
operator|+
name|project
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Retrieve SSH host and port
name|String
name|sshDestinationTemplate
init|=
literal|"ssh://%s@"
operator|+
name|sshAddress
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|sshAddress
operator|.
name|getPort
argument_list|()
operator|+
literal|"/"
operator|+
name|project
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Admin user was already created by the base class
name|setUpUserAuthentication
argument_list|(
name|admin
operator|.
name|username
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create non-admin user
name|TestAccount
name|user
init|=
name|accountCreator
operator|.
name|user
argument_list|()
decl_stmt|;
name|setUpUserAuthentication
argument_list|(
name|user
operator|.
name|username
argument_list|()
argument_list|)
expr_stmt|;
comment|// Prepare data for new change on master branch
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test public change"
argument_list|)
decl_stmt|;
name|in
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
comment|// Create new change and retrieve SHA1 for the created patch set
name|String
name|commit
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
comment|// Prepare new change on secret branch
name|in
operator|=
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|ADMIN_PASSWORD
argument_list|,
literal|"Test secret change"
argument_list|)
expr_stmt|;
name|in
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
comment|// Create new change and retrieve SHA1 for the created patch set
name|String
name|secretCommit
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
comment|// Read refs from target repository using git wire protocol v2 over HTTP for admin user
name|String
name|out
init|=
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|GIT_LS_REMOTE
argument_list|)
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|urlDestinationTemplate
argument_list|,
name|admin
operator|.
name|username
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"GIT_TRACE_PACKET"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertGitProtocolV2Refs
argument_list|(
name|commit
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|contains
argument_list|(
name|secretCommit
argument_list|)
expr_stmt|;
comment|// Read refs from target repository using git wire protocol v2 over SSH for admin user
name|out
operator|=
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|GIT_LS_REMOTE
argument_list|)
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|sshDestinationTemplate
argument_list|,
name|admin
operator|.
name|username
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"GIT_SSH_COMMAND"
argument_list|,
name|GIT_SSH_COMMAND
operator|+
name|sitePaths
operator|.
name|data_dir
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"id_rsa_%s"
argument_list|,
name|admin
operator|.
name|username
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"GIT_TRACE_PACKET"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertGitProtocolV2Refs
argument_list|(
name|commit
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|contains
argument_list|(
name|secretCommit
argument_list|)
expr_stmt|;
comment|// Read refs from target repository using git wire protocol v2 over HTTP for non-admin user
name|out
operator|=
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|GIT_LS_REMOTE
argument_list|)
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|urlDestinationTemplate
argument_list|,
name|user
operator|.
name|username
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"GIT_TRACE_PACKET"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertGitProtocolV2Refs
argument_list|(
name|commit
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|secretCommit
argument_list|)
expr_stmt|;
comment|// Read refs from target repository using git wire protocol v2 over SSH for non-admin user
name|out
operator|=
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|GIT_LS_REMOTE
argument_list|)
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|sshDestinationTemplate
argument_list|,
name|user
operator|.
name|username
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"GIT_SSH_COMMAND"
argument_list|,
name|GIT_SSH_COMMAND
operator|+
name|sitePaths
operator|.
name|data_dir
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"id_rsa_%s"
argument_list|,
name|user
operator|.
name|username
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"GIT_TRACE_PACKET"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertGitProtocolV2Refs
argument_list|(
name|commit
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|secretCommit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGitWireProtocolV2HidesRefMetaConfig ()
specifier|public
name|void
name|testGitWireProtocolV2HidesRefMetaConfig
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ServerContext
name|ctx
init|=
name|startServer
argument_list|()
init|)
block|{
name|ctx
operator|.
name|getInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|config
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalweburl"
argument_list|)
decl_stmt|;
comment|// Create project
name|Project
operator|.
name|NameKey
name|allRefsVisibleProject
init|=
name|Project
operator|.
name|nameKey
argument_list|(
literal|"all-refs-visible"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|allRefsVisibleProject
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set protocol.version=2 in target repository
name|execute
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"git"
argument_list|,
literal|"config"
argument_list|,
literal|"protocol.version"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|sitePaths
operator|.
name|site_path
operator|.
name|resolve
argument_list|(
literal|"git"
argument_list|)
operator|.
name|resolve
argument_list|(
name|allRefsVisibleProject
operator|.
name|get
argument_list|()
operator|+
name|Constants
operator|.
name|DOT_GIT
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up project permission to allow reading all refs
name|projectOperations
operator|.
name|project
argument_list|(
name|allRefsVisibleProject
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/changes/*"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create new change and retrieve refs for the created patch set
name|ChangeInput
name|visibleChangeIn
init|=
operator|new
name|ChangeInput
argument_list|(
name|allRefsVisibleProject
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test public change"
argument_list|)
decl_stmt|;
name|visibleChangeIn
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|int
name|visibleChangeNumber
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|visibleChangeIn
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|_number
decl_stmt|;
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|id
argument_list|(
name|visibleChangeNumber
argument_list|)
decl_stmt|;
name|String
name|visibleChangeNumberRef
init|=
name|RefNames
operator|.
name|patchSetRef
argument_list|(
name|PatchSet
operator|.
name|id
argument_list|(
name|changeId
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|visibleChangeNumberMetaRef
init|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
comment|// Read refs from target repository using git wire protocol v2 over HTTP anonymously
name|String
name|outAnonymousLsRemote
init|=
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|GIT_CLONE_MIRROR
argument_list|)
operator|.
name|add
argument_list|(
name|url
operator|+
literal|"/"
operator|+
name|allRefsVisibleProject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"GIT_TRACE_PACKET"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|outAnonymousLsRemote
argument_list|)
operator|.
name|contains
argument_list|(
literal|"git< version 2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outAnonymousLsRemote
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outAnonymousLsRemote
argument_list|)
operator|.
name|contains
argument_list|(
name|visibleChangeNumberRef
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outAnonymousLsRemote
argument_list|)
operator|.
name|contains
argument_list|(
name|visibleChangeNumberMetaRef
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGitWireProtocolV2FetchIndividualRef ()
specifier|public
name|void
name|testGitWireProtocolV2FetchIndividualRef
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ServerContext
name|ctx
init|=
name|startServer
argument_list|()
init|)
block|{
name|ctx
operator|.
name|getInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Setup admin password
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|username
argument_list|()
argument_list|)
operator|.
name|setHttpPassword
argument_list|(
name|ADMIN_PASSWORD
argument_list|)
expr_stmt|;
comment|// Get authenticated Git/HTTP URL
name|String
name|urlWithCredentials
init|=
name|config
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalweburl"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"http://"
argument_list|,
literal|"http://"
operator|+
name|admin
operator|.
name|username
argument_list|()
operator|+
literal|":"
operator|+
name|ADMIN_PASSWORD
operator|+
literal|"@"
argument_list|)
decl_stmt|;
comment|// Create project
name|Project
operator|.
name|NameKey
name|privateProject
init|=
name|Project
operator|.
name|nameKey
argument_list|(
literal|"private-project"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|privateProject
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set protocol.version=2 in target repository
name|execute
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"git"
argument_list|,
literal|"config"
argument_list|,
literal|"protocol.version"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|sitePaths
operator|.
name|site_path
operator|.
name|resolve
argument_list|(
literal|"git"
argument_list|)
operator|.
name|resolve
argument_list|(
name|privateProject
operator|.
name|get
argument_list|()
operator|+
name|Constants
operator|.
name|DOT_GIT
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disallow general read permissions for anonymous users
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjectsName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Set up project permission to allow registered users fetching changes/*
name|projectOperations
operator|.
name|project
argument_list|(
name|privateProject
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/changes/*"
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create new change and retrieve refs for the created patch set
name|ChangeInput
name|visibleChangeIn
init|=
operator|new
name|ChangeInput
argument_list|(
name|privateProject
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test private change"
argument_list|)
decl_stmt|;
name|visibleChangeIn
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|int
name|visibleChangeNumber
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|visibleChangeIn
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|_number
decl_stmt|;
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|id
argument_list|(
name|visibleChangeNumber
argument_list|)
decl_stmt|;
name|String
name|visibleChangeNumberRef
init|=
name|RefNames
operator|.
name|patchSetRef
argument_list|(
name|PatchSet
operator|.
name|id
argument_list|(
name|changeId
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Fetch a single ref using git wire protocol v2 over HTTP with authentication
name|execute
argument_list|(
name|GIT_INIT
argument_list|)
expr_stmt|;
name|String
name|outFetchRef
init|=
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|GIT_FETCH
argument_list|)
operator|.
name|add
argument_list|(
name|urlWithCredentials
operator|+
literal|"/"
operator|+
name|privateProject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|visibleChangeNumberRef
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"GIT_TRACE_PACKET"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|outFetchRef
argument_list|)
operator|.
name|contains
argument_list|(
literal|"git< version 2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outFetchRef
argument_list|)
operator|.
name|contains
argument_list|(
name|visibleChangeNumberRef
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUpUserAuthentication (String username)
specifier|private
name|void
name|setUpUserAuthentication
parameter_list|(
name|String
name|username
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Assign HTTP password to user
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|username
argument_list|)
operator|.
name|setHttpPassword
argument_list|(
name|ADMIN_PASSWORD
argument_list|)
expr_stmt|;
comment|// Generate private/public key for user
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|SSH_KEYGEN_CMD
argument_list|)
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"id_rsa_%s"
argument_list|,
name|username
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the content of generated public key and add it for the user in Gerrit
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|username
argument_list|)
operator|.
name|addSshKey
argument_list|(
operator|new
name|String
argument_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|readAllBytes
argument_list|(
name|sitePaths
operator|.
name|data_dir
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"id_rsa_%s.pub"
argument_list|,
name|username
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGitProtocolV2Refs (String commit, String out)
specifier|private
specifier|static
name|void
name|assertGitProtocolV2Refs
parameter_list|(
name|String
name|commit
parameter_list|,
name|String
name|out
parameter_list|)
block|{
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|contains
argument_list|(
literal|"git< version 2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|contains
argument_list|(
literal|"refs/changes/01/1/1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|contains
argument_list|(
literal|"refs/changes/01/1/meta"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|contains
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (String... cmds)
specifier|private
name|String
name|execute
parameter_list|(
name|String
modifier|...
name|cmds
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|cmds
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|execute (ImmutableList<String> cmd)
specifier|private
name|String
name|execute
parameter_list|(
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
name|cmd
argument_list|,
name|sitePaths
operator|.
name|data_dir
operator|.
name|toFile
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|execute (ImmutableList<String> cmd, ImmutableMap<String, String> env)
specifier|private
name|String
name|execute
parameter_list|(
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
name|cmd
argument_list|,
name|sitePaths
operator|.
name|data_dir
operator|.
name|toFile
argument_list|()
argument_list|,
name|env
argument_list|)
return|;
block|}
DECL|method|execute (ImmutableList<String> cmd, File dir)
specifier|private
specifier|static
name|String
name|execute
parameter_list|(
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|cmd
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
name|cmd
argument_list|,
name|dir
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

