begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.prettify.common
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|testing
operator|.
name|SparseFileContentSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SparseFileContentBuilderTest
specifier|public
class|class
name|SparseFileContentBuilderTest
block|{
annotation|@
name|Test
DECL|method|addLineWithNegativeNumber ()
specifier|public
name|void
name|addLineWithNegativeNumber
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
operator|-
literal|1
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
operator|-
literal|5
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|addLineNumberZeroFileSize ()
specifier|public
name|void
name|addLineNumberZeroFileSize
parameter_list|()
block|{
comment|// Temporary ignore - see comments in SparseFileContentBuilder.build() method
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|addLineNumberNonZeroFileSize ()
specifier|public
name|void
name|addLineNumberNonZeroFileSize
parameter_list|()
block|{
comment|// Temporary ignore - see comments in SparseFileContentBuilder.build() method
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
literal|5
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
literal|6
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
literal|7
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addLineIncorrectOrder ()
specifier|public
name|void
name|addLineIncorrectOrder
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|1
argument_list|,
literal|"Second line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|3
argument_list|,
literal|"Third line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|4
argument_list|,
literal|"Fourth line"
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
literal|4
argument_list|,
literal|"Other Line"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addLine
argument_list|(
literal|2
argument_list|,
literal|"Other Line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyContentZeroSize ()
specifier|public
name|void
name|emptyContentZeroSize
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyContentNonZeroSize ()
specifier|public
name|void
name|emptyContentNonZeroSize
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oneLineContentLineNumberZero ()
specifier|public
name|void
name|oneLineContentLineNumberZero
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
expr_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oneLineContentLineNumberNotZero ()
specifier|public
name|void
name|oneLineContentLineNumberNotZero
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|5
argument_list|,
literal|"First line"
argument_list|)
expr_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|"First line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiLineContinuousContentStartingFromZero ()
specifier|public
name|void
name|multiLineContinuousContentStartingFromZero
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|1
argument_list|,
literal|"Second line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|2
argument_list|,
literal|"Third line"
argument_list|)
expr_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|,
literal|1
argument_list|,
literal|"Second line"
argument_list|,
literal|2
argument_list|,
literal|"Third line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiLineContentStartingFromNonZeroLine ()
specifier|public
name|void
name|multiLineContentStartingFromNonZeroLine
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|5
argument_list|,
literal|"First line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|6
argument_list|,
literal|"Second line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|7
argument_list|,
literal|"Third line"
argument_list|)
expr_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|"First line"
argument_list|,
literal|6
argument_list|,
literal|"Second line"
argument_list|,
literal|7
argument_list|,
literal|"Third line"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiLineContentWithGaps ()
specifier|public
name|void
name|multiLineContentWithGaps
parameter_list|()
block|{
name|SparseFileContentBuilder
name|builder
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|1
argument_list|,
literal|"Second line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|3
argument_list|,
literal|"Third line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|4
argument_list|,
literal|"Fourth line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|5
argument_list|,
literal|"Fifth line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|6
argument_list|,
literal|"Sixth line"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLine
argument_list|(
literal|10
argument_list|,
literal|"Seventh line"
argument_list|)
expr_stmt|;
name|SparseFileContent
name|content
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getSize
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|getRangesCount
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|lines
argument_list|()
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|"First line"
argument_list|)
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"Second line"
argument_list|)
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"Third line"
argument_list|)
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"Fourth line"
argument_list|)
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|"Fifth line"
argument_list|)
operator|.
name|put
argument_list|(
literal|6
argument_list|,
literal|"Sixth line"
argument_list|)
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|"Seventh line"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

