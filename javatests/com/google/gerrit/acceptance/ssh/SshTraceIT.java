begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.ssh
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ssh
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseSsh
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|LoggingContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|PerformanceLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|CreateProjectArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ProjectCreationValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|UseSsh
DECL|class|SshTraceIT
specifier|public
class|class
name|SshTraceIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|projectCreationValidationListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|ProjectCreationValidationListener
argument_list|>
name|projectCreationValidationListeners
decl_stmt|;
DECL|field|performanceLoggers
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|PerformanceLogger
argument_list|>
name|performanceLoggers
decl_stmt|;
DECL|field|projectCreationListener
specifier|private
name|TraceValidatingProjectCreationValidationListener
name|projectCreationListener
decl_stmt|;
DECL|field|projectCreationListenerRegistrationHandle
specifier|private
name|RegistrationHandle
name|projectCreationListenerRegistrationHandle
decl_stmt|;
DECL|field|testPerformanceLogger
specifier|private
name|TestPerformanceLogger
name|testPerformanceLogger
decl_stmt|;
DECL|field|performanceLoggerRegistrationHandle
specifier|private
name|RegistrationHandle
name|performanceLoggerRegistrationHandle
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|projectCreationListener
operator|=
operator|new
name|TraceValidatingProjectCreationValidationListener
argument_list|()
expr_stmt|;
name|projectCreationListenerRegistrationHandle
operator|=
name|projectCreationValidationListeners
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
name|projectCreationListener
argument_list|)
expr_stmt|;
name|testPerformanceLogger
operator|=
operator|new
name|TestPerformanceLogger
argument_list|()
expr_stmt|;
name|performanceLoggerRegistrationHandle
operator|=
name|performanceLoggers
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
name|testPerformanceLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|projectCreationListenerRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|performanceLoggerRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sshCallWithoutTrace ()
specifier|public
name|void
name|sshCallWithoutTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|adminSshSession
operator|.
name|exec
argument_list|(
literal|"gerrit create-project new1"
argument_list|)
expr_stmt|;
name|adminSshSession
operator|.
name|assertSuccess
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sshCallWithTrace ()
specifier|public
name|void
name|sshCallWithTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|adminSshSession
operator|.
name|exec
argument_list|(
literal|"gerrit create-project --trace new2"
argument_list|)
expr_stmt|;
comment|// The trace ID is written to stderr.
name|adminSshSession
operator|.
name|assertFailure
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|TRACE_ID
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sshCallWithTraceAndProvidedTraceId ()
specifier|public
name|void
name|sshCallWithTraceAndProvidedTraceId
parameter_list|()
throws|throws
name|Exception
block|{
name|adminSshSession
operator|.
name|exec
argument_list|(
literal|"gerrit create-project --trace --trace-id issue/123 new3"
argument_list|)
expr_stmt|;
comment|// The trace ID is written to stderr.
name|adminSshSession
operator|.
name|assertFailure
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|TRACE_ID
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"issue/123"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sshCallWithTraceIdAndWithoutTraceFails ()
specifier|public
name|void
name|sshCallWithTraceIdAndWithoutTraceFails
parameter_list|()
throws|throws
name|Exception
block|{
name|adminSshSession
operator|.
name|exec
argument_list|(
literal|"gerrit create-project --trace-id issue/123 new4"
argument_list|)
expr_stmt|;
name|adminSshSession
operator|.
name|assertFailure
argument_list|(
literal|"A trace ID can only be set if --trace was specified."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|performanceLoggingForSshCall ()
specifier|public
name|void
name|performanceLoggingForSshCall
parameter_list|()
throws|throws
name|Exception
block|{
name|adminSshSession
operator|.
name|exec
argument_list|(
literal|"gerrit create-project new5"
argument_list|)
expr_stmt|;
name|adminSshSession
operator|.
name|assertSuccess
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|testPerformanceLogger
operator|.
name|logEntries
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
DECL|class|TraceValidatingProjectCreationValidationListener
specifier|private
specifier|static
class|class
name|TraceValidatingProjectCreationValidationListener
implements|implements
name|ProjectCreationValidationListener
block|{
DECL|field|traceId
name|String
name|traceId
decl_stmt|;
DECL|field|foundTraceId
name|Boolean
name|foundTraceId
decl_stmt|;
DECL|field|isLoggingForced
name|Boolean
name|isLoggingForced
decl_stmt|;
annotation|@
name|Override
DECL|method|validateNewProject (CreateProjectArgs args)
specifier|public
name|void
name|validateNewProject
parameter_list|(
name|CreateProjectArgs
name|args
parameter_list|)
throws|throws
name|ValidationException
block|{
name|this
operator|.
name|traceId
operator|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTagsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"TRACE_ID"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|foundTraceId
operator|=
name|traceId
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|isLoggingForced
operator|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|shouldForceLogging
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestPerformanceLogger
specifier|private
specifier|static
class|class
name|TestPerformanceLogger
implements|implements
name|PerformanceLogger
block|{
DECL|field|logEntries
specifier|private
name|List
argument_list|<
name|PerformanceLogEntry
argument_list|>
name|logEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|log (String operation, long durationMs, Metadata metadata)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|logEntries
operator|.
name|add
argument_list|(
name|PerformanceLogEntry
operator|.
name|create
argument_list|(
name|operation
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|logEntries ()
name|ImmutableList
argument_list|<
name|PerformanceLogEntry
argument_list|>
name|logEntries
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|logEntries
argument_list|)
return|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|PerformanceLogEntry
specifier|abstract
specifier|static
class|class
name|PerformanceLogEntry
block|{
DECL|method|create (String operation, Metadata metadata)
specifier|static
name|PerformanceLogEntry
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_SshTraceIT_PerformanceLogEntry
argument_list|(
name|operation
argument_list|,
name|metadata
argument_list|)
return|;
block|}
DECL|method|operation ()
specifier|abstract
name|String
name|operation
parameter_list|()
function_decl|;
DECL|method|metadata ()
specifier|abstract
name|Metadata
name|metadata
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

