begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupCreation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryTestEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|GroupsUpdateIT
specifier|public
class|class
name|GroupsUpdateIT
block|{
DECL|field|testEnvironment
annotation|@
name|Rule
specifier|public
name|InMemoryTestEnvironment
name|testEnvironment
init|=
operator|new
name|InMemoryTestEnvironment
argument_list|()
decl_stmt|;
DECL|field|expectedException
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|groupsUpdateProvider
annotation|@
name|Inject
annotation|@
name|ServerInitiated
specifier|private
name|Provider
argument_list|<
name|GroupsUpdate
argument_list|>
name|groupsUpdateProvider
decl_stmt|;
DECL|field|groups
annotation|@
name|Inject
specifier|private
name|Groups
name|groups
decl_stmt|;
annotation|@
name|Test
DECL|method|groupCreationIsRetriedWhenFailedDueToConcurrentNameModification ()
specifier|public
name|void
name|groupCreationIsRetriedWhenFailedDueToConcurrentNameModification
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getGroupCreation
argument_list|(
literal|"users"
argument_list|,
literal|"users-UUID"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
operator|new
name|CreateAnotherGroupOnceAsSideEffectOfMemberModification
argument_list|(
literal|"verifiers"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|allGroupNames
init|=
name|getAllGroupNames
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|allGroupNames
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"users"
argument_list|,
literal|"verifiers"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupRenameIsRetriedWhenFailedDueToConcurrentNameModification ()
specifier|public
name|void
name|groupRenameIsRetriedWhenFailedDueToConcurrentNameModification
parameter_list|()
throws|throws
name|Exception
block|{
name|createGroup
argument_list|(
literal|"users"
argument_list|,
literal|"users-UUID"
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setName
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"contributors"
argument_list|)
argument_list|)
operator|.
name|setMemberModification
argument_list|(
operator|new
name|CreateAnotherGroupOnceAsSideEffectOfMemberModification
argument_list|(
literal|"verifiers"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"users-UUID"
argument_list|)
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|allGroupNames
init|=
name|getAllGroupNames
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|allGroupNames
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"contributors"
argument_list|,
literal|"verifiers"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupUpdateFailsWithExceptionForNotExistingGroup ()
specifier|public
name|void
name|groupUpdateFailsWithExceptionForNotExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"A description for the group"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|NoSuchGroupException
operator|.
name|class
argument_list|)
expr_stmt|;
name|updateGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
literal|"nonexistent-group-UUID"
argument_list|)
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroup (String groupName, String groupUuid)
specifier|private
name|void
name|createGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|groupUuid
parameter_list|)
throws|throws
name|Exception
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getGroupCreation
argument_list|(
name|groupName
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroup (InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|private
name|void
name|createGroup
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|groupsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|updateGroup (AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|private
name|void
name|updateGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|Exception
block|{
name|groupsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllGroupNames ()
specifier|private
name|Stream
argument_list|<
name|String
argument_list|>
name|getAllGroupNames
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|groups
operator|.
name|getAllGroupReferences
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
return|;
block|}
DECL|method|getGroupCreation (String groupName, String groupUuid)
specifier|private
specifier|static
name|InternalGroupCreation
name|getGroupCreation
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|groupUuid
parameter_list|)
block|{
return|return
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|setId
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|groupName
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|class|CreateAnotherGroupOnceAsSideEffectOfMemberModification
specifier|private
class|class
name|CreateAnotherGroupOnceAsSideEffectOfMemberModification
implements|implements
name|InternalGroupUpdate
operator|.
name|MemberModification
block|{
DECL|field|groupCreated
specifier|private
name|boolean
name|groupCreated
init|=
literal|false
decl_stmt|;
DECL|field|groupName
specifier|private
name|String
name|groupName
decl_stmt|;
DECL|method|CreateAnotherGroupOnceAsSideEffectOfMemberModification (String groupName)
specifier|public
name|CreateAnotherGroupOnceAsSideEffectOfMemberModification
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ImmutableSet<Account.Id> members)
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|apply
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
parameter_list|)
block|{
if|if
condition|(
operator|!
name|groupCreated
condition|)
block|{
name|createGroup
argument_list|()
expr_stmt|;
name|groupCreated
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|members
return|;
block|}
DECL|method|createGroup ()
specifier|private
name|void
name|createGroup
parameter_list|()
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getGroupCreation
argument_list|(
name|groupName
argument_list|,
name|groupName
operator|+
literal|"-UUID"
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|groupsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|createGroup
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

