begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|deleteRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|fetch
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|group
operator|.
name|GroupAssert
operator|.
name|assertGroupInfo
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|account
operator|.
name|AccountAssert
operator|.
name|assertAccountInfos
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
operator|.
name|METHOD
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
operator|.
name|RUNTIME
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicLongMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ProjectResetter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|Sandboxed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|Groups
operator|.
name|ListRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|GroupMemberAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupAuditEventInfo
operator|.
name|UserMemberAuditEventInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupOptionsInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|GroupIndexedListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupIncludeCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|PeriodicGroupIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsConsistencyChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupCreation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|StalenessChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|GroupsIT
specifier|public
class|class
name|GroupsIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|groups
annotation|@
name|Inject
specifier|private
name|Groups
name|groups
decl_stmt|;
DECL|field|groupsUpdate
annotation|@
name|Inject
annotation|@
name|ServerInitiated
specifier|private
name|GroupsUpdate
name|groupsUpdate
decl_stmt|;
DECL|field|groupIncludeCache
annotation|@
name|Inject
specifier|private
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|stalenessChecker
annotation|@
name|Inject
specifier|private
name|StalenessChecker
name|stalenessChecker
decl_stmt|;
DECL|field|groupIndexer
annotation|@
name|Inject
specifier|private
name|GroupIndexer
name|groupIndexer
decl_stmt|;
DECL|field|consistencyChecker
annotation|@
name|Inject
specifier|private
name|GroupsConsistencyChecker
name|consistencyChecker
decl_stmt|;
DECL|field|slaveGroupIndexer
annotation|@
name|Inject
specifier|private
name|PeriodicGroupIndexer
name|slaveGroupIndexer
decl_stmt|;
DECL|field|groupIndexedListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|GroupIndexedListener
argument_list|>
name|groupIndexedListeners
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|private
name|Sequences
name|seq
decl_stmt|;
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|consistencyCheck ()
specifier|public
name|void
name|consistencyCheck
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|description
operator|.
name|getAnnotation
argument_list|(
name|IgnoreGroupInconsistencies
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|consistencyChecker
operator|.
name|check
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resetProjects ()
specifier|protected
name|ProjectResetter
operator|.
name|Config
name|resetProjects
parameter_list|()
block|{
comment|// Don't reset All-Users since deleting users makes groups inconsistent (e.g. groups would
comment|// contain members that no longer exist) and as result of this the group consistency checker
comment|// that is executed after each test would fail.
return|return
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|allProjects
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|systemGroupCanBeRetrievedFromIndex ()
specifier|public
name|void
name|systemGroupCanBeRetrievedFromIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|groupInfos
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|query
argument_list|(
literal|"name:Administrators"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groupInfos
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addToNonExistingGroup_NotFound ()
specifier|public
name|void
name|addToNonExistingGroup_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeFromNonExistingGroup_NotFound ()
specifier|public
name|void
name|removeFromNonExistingGroup_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|removeMembers
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addRemoveMember ()
specifier|public
name|void
name|addRemoveMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|removeMembers
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|assertNoMembers
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cachedGroupsForMemberAreUpdatedOnMemberAdditionAndRemoval ()
specifier|public
name|void
name|cachedGroupsForMemberAreUpdatedOnMemberAdditionAndRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|account
init|=
name|createUniqueAccount
argument_list|(
literal|"user"
argument_list|,
literal|"User"
argument_list|)
decl_stmt|;
comment|// Fill the cache for the observed account.
name|groupIncludeCache
operator|.
name|getGroupsWithMember
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|groupName
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|groupName
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|groupName
argument_list|)
operator|.
name|addMembers
argument_list|(
name|account
operator|.
name|username
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupsWithMemberAfterAddition
init|=
name|groupIncludeCache
operator|.
name|getGroupsWithMember
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupsWithMemberAfterAddition
argument_list|)
operator|.
name|contains
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|groupName
argument_list|)
operator|.
name|removeMembers
argument_list|(
name|account
operator|.
name|username
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupsWithMemberAfterRemoval
init|=
name|groupIncludeCache
operator|.
name|getGroupsWithMember
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupsWithMemberAfterRemoval
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addExistingMember_OK ()
specifier|public
name|void
name|addExistingMember_OK
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
literal|"Administrators"
decl_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNonExistingMember_UnprocessableEntity ()
specifier|public
name|void
name|addNonExistingMember_UnprocessableEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Administrators"
argument_list|)
operator|.
name|addMembers
argument_list|(
literal|"non-existing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMultipleMembers ()
specifier|public
name|void
name|addMultipleMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|TestAccount
name|u1
init|=
name|createUniqueAccount
argument_list|(
literal|"u1"
argument_list|,
literal|"Full Name 1"
argument_list|)
decl_stmt|;
name|TestAccount
name|u2
init|=
name|createUniqueAccount
argument_list|(
literal|"u2"
argument_list|,
literal|"Full Name 2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addMembers
argument_list|(
name|u1
operator|.
name|username
argument_list|,
name|u2
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|u1
argument_list|,
name|u2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMembersWithAtSign ()
specifier|public
name|void
name|addMembersWithAtSign
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|TestAccount
name|u1
init|=
name|createUniqueAccount
argument_list|(
literal|"u1"
argument_list|,
literal|"Full Name 1"
argument_list|)
decl_stmt|;
name|TestAccount
name|u2_at
init|=
name|createUniqueAccount
argument_list|(
literal|"u2@something"
argument_list|,
literal|"Full Name 2 With At"
argument_list|)
decl_stmt|;
name|TestAccount
name|u2
init|=
name|createUniqueAccount
argument_list|(
literal|"u2"
argument_list|,
literal|"Full Name 2 Without At"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addMembers
argument_list|(
name|u1
operator|.
name|username
argument_list|,
name|u2_at
operator|.
name|username
argument_list|,
name|u2
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|g
argument_list|,
name|u1
argument_list|,
name|u2_at
argument_list|,
name|u2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeRemoveGroup ()
specifier|public
name|void
name|includeRemoveGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|p
init|=
name|createGroup
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|removeGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertNoIncludes
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeExternalGroup ()
specifier|public
name|void
name|includeExternalGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|subgroupUuid
init|=
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|addGroups
argument_list|(
name|subgroupUuid
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|subgroups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|includedGroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subgroups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|subgroupUuid
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"%3A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subgroups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Registered Users"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subgroups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|groupId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|g
argument_list|)
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
literal|"Registered Users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeExistingGroup_OK ()
specifier|public
name|void
name|includeExistingGroup_OK
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|p
init|=
name|createGroup
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|String
name|g
init|=
name|createGroup
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMultipleIncludes ()
specifier|public
name|void
name|addMultipleIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|p
init|=
name|createGroup
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|String
name|g1
init|=
name|createGroup
argument_list|(
literal|"newGroup1"
argument_list|)
decl_stmt|;
name|String
name|g2
init|=
name|createGroup
argument_list|(
literal|"newGroup2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|p
argument_list|)
operator|.
name|addGroups
argument_list|(
name|g1
argument_list|,
name|g2
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|p
argument_list|,
name|g1
argument_list|,
name|g2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createGroup ()
specifier|public
name|void
name|createGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertGroupInfo
argument_list|(
name|group
argument_list|(
name|newGroupName
argument_list|)
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateInternalGroupCaseSensitiveName_Conflict ()
specifier|public
name|void
name|createDuplicateInternalGroupCaseSensitiveName_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dupGroupName
init|=
name|name
argument_list|(
literal|"dupGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group '"
operator|+
name|dupGroupName
operator|+
literal|"' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateInternalGroupCaseInsensitiveName ()
specifier|public
name|void
name|createDuplicateInternalGroupCaseInsensitiveName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dupGroupName
init|=
name|name
argument_list|(
literal|"dupGroupA"
argument_list|)
decl_stmt|;
name|String
name|dupGroupNameLowerCase
init|=
name|name
argument_list|(
literal|"dupGroupA"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|dupGroupNameLowerCase
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|dupGroupName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|dupGroupNameLowerCase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateSystemGroupCaseSensitiveName_Conflict ()
specifier|public
name|void
name|createDuplicateSystemGroupCaseSensitiveName_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
literal|"Registered Users"
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group 'Registered Users' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDuplicateSystemGroupCaseInsensitiveName_Conflict ()
specifier|public
name|void
name|createDuplicateSystemGroupCaseInsensitiveName_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
literal|"registered users"
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group 'Registered Users' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|createGroupWithConfiguredNameOfSystemGroup_Conflict ()
specifier|public
name|void
name|createGroupWithConfiguredNameOfSystemGroup_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group 'All Users' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"all users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|createGroupWithDefaultNameOfSystemGroup_Conflict ()
specifier|public
name|void
name|createGroupWithDefaultNameOfSystemGroup_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group name 'Anonymous Users' is reserved"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
literal|"anonymous users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createGroupWithProperties ()
specifier|public
name|void
name|createGroupWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
expr_stmt|;
name|in
operator|.
name|description
operator|=
literal|"Test description"
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|adminGroupUuid
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|description
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|visibleToAll
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|ownerId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|ownerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createGroupWithoutCapability_Forbidden ()
specifier|public
name|void
name|createGroupWithoutCapability_Forbidden
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"newGroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnFieldIsPopulatedForNewGroup ()
specifier|public
name|void
name|createdOnFieldIsPopulatedForNewGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NoteDb allows only second precision.
name|Timestamp
name|testStartTime
init|=
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|createdOn
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|testStartTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cachedGroupsForMemberAreUpdatedOnGroupCreation ()
specifier|public
name|void
name|cachedGroupsForMemberAreUpdatedOnGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|account
init|=
name|createUniqueAccount
argument_list|(
literal|"user"
argument_list|,
literal|"User"
argument_list|)
decl_stmt|;
comment|// Fill the cache for the observed account.
name|groupIncludeCache
operator|.
name|getGroupsWithMember
argument_list|(
name|account
operator|.
name|id
argument_list|)
expr_stmt|;
name|GroupInput
name|groupInput
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|groupInput
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"Users"
argument_list|)
expr_stmt|;
name|groupInput
operator|.
name|members
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|account
operator|.
name|username
argument_list|)
expr_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|groupInput
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groups
init|=
name|groupIncludeCache
operator|.
name|getGroupsWithMember
argument_list|(
name|account
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|group
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getGroup ()
specifier|public
name|void
name|getGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroup
name|adminGroup
init|=
name|adminGroup
argument_list|()
decl_stmt|;
name|testGetGroup
argument_list|(
name|adminGroup
operator|.
name|getGroupUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
name|testGetGroup
argument_list|(
name|adminGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
name|testGetGroup
argument_list|(
name|adminGroup
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|adminGroup
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGroup (Object id, InternalGroup expectedGroup)
specifier|private
name|void
name|testGetGroup
parameter_list|(
name|Object
name|id
parameter_list|,
name|InternalGroup
name|expectedGroup
parameter_list|)
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertGroupInfo
argument_list|(
name|expectedGroup
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|getSystemGroupByConfiguredName ()
specifier|public
name|void
name|getSystemGroupByConfiguredName
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupReference
name|anonymousUsersGroup
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"All Users"
argument_list|)
expr_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|anonymousUsersGroup
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
operator|(
name|anonymousUsersGroup
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getSystemGroupByDefaultName ()
specifier|public
name|void
name|getSystemGroupByDefaultName
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupReference
name|anonymousUsersGroup
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Anonymous Users"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|anonymousUsersGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
operator|(
name|anonymousUsersGroup
operator|.
name|getUUID
argument_list|()
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"groups.global:Anonymous-Users.name"
argument_list|,
name|value
operator|=
literal|"All Users"
argument_list|)
DECL|method|getSystemGroupByDefaultName_NotFound ()
specifier|public
name|void
name|getSystemGroupByDefaultName_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"Anonymous-Users"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupIsCreatedForSpecifiedName ()
specifier|public
name|void
name|groupIsCreatedForSpecifiedName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Users"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupCannotBeCreatedWithNameOfAnotherGroup ()
specifier|public
name|void
name|groupCannotBeCreatedWithNameOfAnotherGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Users"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupCanBeRenamed ()
specifier|public
name|void
name|groupCanBeRenamed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Name1"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|name
argument_list|(
literal|"Name2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|name
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupCanBeRenamedToItsCurrentName ()
specifier|public
name|void
name|groupCanBeRenamedToItsCurrentName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Users"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupCannotBeRenamedToNameOfAnotherGroup ()
specifier|public
name|void
name|groupCannotBeRenamedToNameOfAnotherGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name1
init|=
name|name
argument_list|(
literal|"Name1"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group1
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|name
argument_list|(
literal|"Name2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name2
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|(
name|name2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|renamedGroupCanBeLookedUpByNewName ()
specifier|public
name|void
name|renamedGroupCanBeLookedUpByNewName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Name1"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|name
argument_list|(
literal|"Name2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|newName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|group
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oldNameOfRenamedGroupIsNotAccessibleAnymore ()
specifier|public
name|void
name|oldNameOfRenamedGroupIsNotAccessibleAnymore
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Name1"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|name
argument_list|(
literal|"Name2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|assertGroupDoesNotExist
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|oldNameOfRenamedGroupIsFreeForUseAgain ()
specifier|public
name|void
name|oldNameOfRenamedGroupIsFreeForUseAgain
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"Name1"
argument_list|)
decl_stmt|;
name|GroupInfo
name|group1
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|name
argument_list|(
literal|"Name2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
operator|.
name|id
argument_list|)
operator|.
name|name
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|GroupInfo
name|group2
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group2
operator|.
name|id
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|group1
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupDescription ()
specifier|public
name|void
name|groupDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get description
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set description
name|String
name|desc
init|=
literal|"New description for the group."
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// set description to null
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set description to empty string
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupOptions ()
specifier|public
name|void
name|groupOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// get options
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|()
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// set options
name|GroupOptionsInfo
name|options
init|=
operator|new
name|GroupOptionsInfo
argument_list|()
decl_stmt|;
name|options
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|options
argument_list|()
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupOwner ()
specifier|public
name|void
name|groupOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|GroupInfo
name|info
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|adminUUID
init|=
name|adminGroupUuid
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|registeredUUID
init|=
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// get owner
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|info
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// set owner by name
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
literal|"Registered Users"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|registeredUUID
argument_list|)
expr_stmt|;
comment|// set owner by UUID
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
name|adminUUID
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminUUID
argument_list|)
expr_stmt|;
comment|// set non existing owner
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|name
argument_list|)
operator|.
name|owner
argument_list|(
literal|"Non-Existing Group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonExistingGroupIncludes_NotFound ()
specifier|public
name|void
name|listNonExistingGroupIncludes_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|includedGroups
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listEmptyGroupIncludes ()
specifier|public
name|void
name|listEmptyGroupIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeNonExistingGroup ()
specifier|public
name|void
name|includeNonExistingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
literal|"non-existing"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonEmptyGroupIncludes ()
specifier|public
name|void
name|listNonEmptyGroupIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|createGroup
argument_list|(
literal|"gy"
argument_list|)
decl_stmt|;
name|String
name|gz
init|=
name|createGroup
argument_list|(
literal|"gz"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gy
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|,
name|gy
argument_list|,
name|gz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listOneIncludeMember ()
specifier|public
name|void
name|listOneIncludeMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|createGroup
argument_list|(
literal|"gy"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gy
argument_list|)
expr_stmt|;
name|assertIncludes
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|,
name|gy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonExistingGroupMembers_NotFound ()
specifier|public
name|void
name|listNonExistingGroupMembers_NotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|members
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listEmptyGroupMembers ()
specifier|public
name|void
name|listEmptyGroupMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listNonEmptyGroupMembers ()
specifier|public
name|void
name|listNonEmptyGroupMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|user1
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|String
name|user2
init|=
name|createAccount
argument_list|(
literal|"user2"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|user1
argument_list|,
name|user2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listOneGroupMember ()
specifier|public
name|void
name|listOneGroupMember
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|createAccount
argument_list|(
literal|"user1"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listGroupMembersRecursively ()
specifier|public
name|void
name|listGroupMembersRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|gx
init|=
name|createGroup
argument_list|(
literal|"gx"
argument_list|)
decl_stmt|;
name|String
name|ux
init|=
name|createAccount
argument_list|(
literal|"ux"
argument_list|,
name|gx
argument_list|)
decl_stmt|;
name|String
name|gy
init|=
name|createGroup
argument_list|(
literal|"gy"
argument_list|)
decl_stmt|;
name|String
name|uy
init|=
name|createAccount
argument_list|(
literal|"uy"
argument_list|,
name|gy
argument_list|)
decl_stmt|;
name|String
name|gz
init|=
name|createGroup
argument_list|(
literal|"gz"
argument_list|)
decl_stmt|;
name|String
name|uz
init|=
name|createAccount
argument_list|(
literal|"uz"
argument_list|,
name|gz
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gy
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gy
argument_list|)
operator|.
name|addGroups
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|ux
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|gx
argument_list|)
operator|.
name|members
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ux
argument_list|,
name|uy
argument_list|,
name|uz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usersSeeTheirDirectMembershipWhenListingMembersRecursively ()
specifier|public
name|void
name|usersSeeTheirDirectMembershipWhenListingMembersRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|createGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|(
literal|true
argument_list|)
argument_list|,
name|user
operator|.
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|usersDoNotSeeTheirIndirectMembershipWhenListingMembersRecursively ()
specifier|public
name|void
name|usersDoNotSeeTheirIndirectMembershipWhenListingMembersRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group1
init|=
name|createGroup
argument_list|(
literal|"group1"
argument_list|)
decl_stmt|;
name|String
name|group2
init|=
name|createGroup
argument_list|(
literal|"group2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
argument_list|)
operator|.
name|addGroups
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group2
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|listedMembers
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
argument_list|)
operator|.
name|members
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|listedMembers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adminsSeeTheirIndirectMembershipWhenListingMembersRecursively ()
specifier|public
name|void
name|adminsSeeTheirIndirectMembershipWhenListingMembersRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ownerGroup
init|=
name|createGroup
argument_list|(
literal|"ownerGroup"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|group1
init|=
name|createGroup
argument_list|(
literal|"group1"
argument_list|,
name|ownerGroup
argument_list|)
decl_stmt|;
name|String
name|group2
init|=
name|createGroup
argument_list|(
literal|"group2"
argument_list|,
name|ownerGroup
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
argument_list|)
operator|.
name|addGroups
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group2
argument_list|)
operator|.
name|addMembers
argument_list|(
name|admin
operator|.
name|username
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|listedMembers
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
argument_list|)
operator|.
name|members
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|listedMembers
argument_list|,
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownersSeeTheirIndirectMembershipWhenListingMembersRecursively ()
specifier|public
name|void
name|ownersSeeTheirIndirectMembershipWhenListingMembersRecursively
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ownerGroup
init|=
name|createGroup
argument_list|(
literal|"ownerGroup"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|group1
init|=
name|createGroup
argument_list|(
literal|"group1"
argument_list|,
name|ownerGroup
argument_list|)
decl_stmt|;
name|String
name|group2
init|=
name|createGroup
argument_list|(
literal|"group2"
argument_list|,
name|ownerGroup
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
argument_list|)
operator|.
name|addGroups
argument_list|(
name|group2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|ownerGroup
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group2
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|listedMembers
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group1
argument_list|)
operator|.
name|members
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertMembers
argument_list|(
name|listedMembers
argument_list|,
name|user
operator|.
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultGroupsCreated ()
specifier|public
name|void
name|defaultGroupsCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|names
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|)
operator|.
name|containsAllOf
argument_list|(
literal|"Administrators"
argument_list|,
literal|"Non-Interactive Users"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listAllGroups ()
specifier|public
name|void
name|listAllGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedGroups
init|=
name|groups
operator|.
name|getAllGroupReferences
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getName
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectedGroups
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedGroups
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getGroupsByOwner ()
specifier|public
name|void
name|getGroupsByOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent
init|=
name|createGroup
argument_list|(
literal|"test-parent"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createGroup
argument_list|(
literal|"test-child1"
argument_list|,
name|parent
argument_list|)
argument_list|,
name|createGroup
argument_list|(
literal|"test-child2"
argument_list|,
name|parent
argument_list|)
argument_list|)
decl_stmt|;
comment|// By UUID
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|owned
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withOwnedBy
argument_list|(
name|groupUuid
argument_list|(
name|parent
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|owned
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|g
lambda|->
name|g
operator|.
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|children
argument_list|)
expr_stmt|;
comment|// By name
name|owned
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withOwnedBy
argument_list|(
name|parent
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|owned
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|g
lambda|->
name|g
operator|.
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|children
argument_list|)
expr_stmt|;
comment|// By group that does not own any others
name|owned
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withOwnedBy
argument_list|(
name|owned
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|owned
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// By non-existing group
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Group Not Found: does-not-exist"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withOwnedBy
argument_list|(
literal|"does-not-exist"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyVisibleGroupsReturned ()
specifier|public
name|void
name|onlyVisibleGroupsReturned
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newGroupName
init|=
name|name
argument_list|(
literal|"newGroup"
argument_list|)
decl_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|newGroupName
expr_stmt|;
name|in
operator|.
name|description
operator|=
literal|"a hidden group"
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|ownerId
operator|=
name|adminGroupUuid
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suggestGroup ()
specifier|public
name|void
name|suggestGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|withSubstring
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|withRegex
argument_list|(
literal|"foo.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|withUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|withOwned
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|withVisibleToAll
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSuggest
argument_list|(
literal|"adm"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withSubstring ()
specifier|public
name|void
name|withSubstring
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
name|name
argument_list|(
literal|"Abcdefghijklmnop"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|// Choose a substring which isn't part of any group or test method within this class.
name|String
name|substring
init|=
literal|"efghijk"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
name|substring
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|groups
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
literal|"abcdefghi"
argument_list|)
operator|.
name|getAsMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|otherGroup
init|=
name|name
argument_list|(
literal|"Abcdefghijklmnop2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|groups
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
name|substring
argument_list|)
operator|.
name|getAsMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|groups
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
literal|"non-existing-substring"
argument_list|)
operator|.
name|getAsMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withRegex ()
specifier|public
name|void
name|withRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|"Admin.*"
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|groups
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|"admin.*"
argument_list|)
operator|.
name|getAsMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|groups
operator|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|".*istrators"
argument_list|)
operator|.
name|getAsMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|".*istrators"
argument_list|)
operator|.
name|withSubstring
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allGroupInfoFieldsSetCorrectly ()
specifier|public
name|void
name|allGroupInfoFieldsSetCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|InternalGroup
name|adminGroup
init|=
name|adminGroup
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|addGroup
argument_list|(
name|adminGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Administrators"
argument_list|)
expr_stmt|;
name|assertGroupInfo
argument_list|(
name|adminGroup
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|groups
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAuditLog ()
specifier|public
name|void
name|getAuditLog
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupApi
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|g
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
name|g
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|g
operator|.
name|removeMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|REMOVE_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|String
name|otherGroup
init|=
name|name
argument_list|(
literal|"otherGroup"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|g
operator|.
name|addGroups
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
name|g
operator|.
name|removeGroups
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|REMOVE_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
comment|// Add a removed member back again.
name|g
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertMemberAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_USER
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// Add a removed group back again.
name|g
operator|.
name|addGroups
argument_list|(
name|otherGroup
argument_list|)
expr_stmt|;
name|auditEvents
operator|=
name|g
operator|.
name|auditLog
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
name|Timestamp
name|lastDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|GroupAuditEventInfo
name|auditEvent
range|:
name|auditEvents
control|)
block|{
if|if
condition|(
name|lastDate
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|lastDate
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|auditEvent
operator|.
name|date
argument_list|)
expr_stmt|;
block|}
name|lastDate
operator|=
name|auditEvent
operator|.
name|date
expr_stmt|;
block|}
block|}
comment|/**    * @Sandboxed is used by this test because it deletes a group reference which introduces an    * inconsistency for the group storage. Once group deletion is supported, this test should be    * updated to use the API instead.    */
annotation|@
name|Test
annotation|@
name|Sandboxed
annotation|@
name|IgnoreGroupInconsistencies
DECL|method|getAuditLogAfterDeletingASubgroup ()
specifier|public
name|void
name|getAuditLogAfterDeletingASubgroup
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|parentGroup
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"parent-group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Creates a subgroup and adds it to "parent-group" as a subgroup.
name|GroupInfo
name|subgroup
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"sub-group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|parentGroup
operator|.
name|id
argument_list|)
operator|.
name|addGroups
argument_list|(
name|subgroup
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// Deletes the subgroup.
name|deleteGroupRef
argument_list|(
name|subgroup
operator|.
name|id
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|GroupAuditEventInfo
argument_list|>
name|auditEvents
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|parentGroup
operator|.
name|id
argument_list|)
operator|.
name|auditLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|auditEvents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Verify the unavailable subgroup's name is null.
name|assertSubgroupAuditEvent
argument_list|(
name|auditEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|admin
operator|.
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteGroupRef (String groupId)
specifier|private
name|void
name|deleteGroupRef
parameter_list|(
name|String
name|groupId
parameter_list|)
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
comment|// Reindex the group.
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|uuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
comment|// Verify "sub-group" has been deleted.
try|try
block|{
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|uuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{     }
block|}
comment|// reindex is tested by {@link AbstractQueryGroupsTest#reindex}
annotation|@
name|Test
DECL|method|reindexPermissions ()
specifier|public
name|void
name|reindexPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|groupOwner
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|GroupInput
name|in
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|in
operator|.
name|members
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|groupOwner
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|u
lambda|->
name|u
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// admin can reindex any group
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
comment|// group owner can reindex own group (group is owned by itself)
name|setApiUser
argument_list|(
name|groupOwner
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
comment|// user cannot reindex any group
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"not allowed to index group"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
operator|.
name|id
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToGroupBranchIsRejectedForAllUsersRepo ()
specifier|public
name|void
name|pushToGroupBranchIsRejectedForAllUsersRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPushToGroupBranch
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|,
literal|"group update not allowed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToDeletedGroupBranchIsRejectedForAllUsersRepo ()
specifier|public
name|void
name|pushToDeletedGroupBranchIsRejectedForAllUsersRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|groupRef
init|=
name|RefNames
operator|.
name|refsDeletedGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
name|allUsers
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
name|assertPushToGroupBranch
argument_list|(
name|allUsers
argument_list|,
name|groupRef
argument_list|,
literal|"group update not allowed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToGroupNamesBranchIsRejectedForAllUsersRepo ()
specifier|public
name|void
name|pushToGroupNamesBranchIsRejectedForAllUsersRepo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// refs/meta/group-names isn't usually available for fetch, so grant ACCESS_DATABASE
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|assertPushToGroupBranch
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
literal|"group update not allowed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToGroupsBranchForNonAllUsersRepo ()
specifier|public
name|void
name|pushToGroupsBranchForNonAllUsersRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCreateGroupBranch
argument_list|(
name|project
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|groupRef
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
name|project
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
name|assertPushToGroupBranch
argument_list|(
name|project
argument_list|,
name|groupRef
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToDeletedGroupsBranchForNonAllUsersRepo ()
specifier|public
name|void
name|pushToDeletedGroupsBranchForNonAllUsersRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCreateGroupBranch
argument_list|(
name|project
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|groupRef
init|=
name|RefNames
operator|.
name|refsDeletedGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
name|project
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
name|assertPushToGroupBranch
argument_list|(
name|project
argument_list|,
name|groupRef
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToGroupNamesBranchForNonAllUsersRepo ()
specifier|public
name|void
name|pushToGroupNamesBranchForNonAllUsersRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
expr_stmt|;
name|assertPushToGroupBranch
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPushToGroupBranch ( Project.NameKey project, String groupRefName, String expectedErrorOnUpdate)
specifier|private
name|void
name|assertPushToGroupBranch
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|groupRefName
parameter_list|,
name|String
name|expectedErrorOnUpdate
parameter_list|)
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_DELETED_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_DELETED_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|)
decl_stmt|;
comment|// update existing branch
name|fetch
argument_list|(
name|repo
argument_list|,
name|groupRefName
operator|+
literal|":groupRef"
argument_list|)
expr_stmt|;
name|repo
operator|.
name|reset
argument_list|(
literal|"groupRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
literal|"Update group"
argument_list|,
literal|"arbitraryFile.txt"
argument_list|,
literal|"some content"
argument_list|)
operator|.
name|to
argument_list|(
name|groupRefName
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedErrorOnUpdate
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|assertErrorStatus
argument_list|(
name|expectedErrorOnUpdate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertCreateGroupBranch (Project.NameKey project, String expectedErrorOnCreate)
specifier|private
name|void
name|assertCreateGroupBranch
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|expectedErrorOnCreate
parameter_list|)
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
literal|"Update group"
argument_list|,
literal|"arbitraryFile.txt"
argument_list|,
literal|"some content"
argument_list|)
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
name|name
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedErrorOnCreate
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|assertErrorStatus
argument_list|(
name|expectedErrorOnCreate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit ()
specifier|public
name|void
name|pushToGroupBranchForReviewForAllUsersRepoIsRejectedOnSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|pushToGroupBranchForReviewAndSubmit
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|,
literal|"group update not allowed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToGroupBranchForReviewForNonAllUsersRepoAndSubmit ()
specifier|public
name|void
name|pushToGroupBranchForReviewForNonAllUsersRepoAndSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|groupRef
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
name|project
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
name|pushToGroupBranchForReviewAndSubmit
argument_list|(
name|project
argument_list|,
name|groupRef
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCustomInheritanceForAllUsersFails ()
specifier|public
name|void
name|pushCustomInheritanceForAllUsersFails
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|String
name|config
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allUsers
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|file
argument_list|(
literal|"project.config"
argument_list|)
operator|.
name|asString
argument_list|()
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"access"
argument_list|,
literal|null
argument_list|,
literal|"inheritFrom"
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|=
name|cfg
operator|.
name|toText
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
literal|"Subject"
argument_list|,
literal|"project.config"
argument_list|,
name|config
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"All-Users must inherit from All-Projects"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateGroupBranch ()
specifier|public
name|void
name|cannotCreateGroupBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|testCannotCreateGroupBranch
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateDeletedGroupBranch ()
specifier|public
name|void
name|cannotCreateDeletedGroupBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|testCannotCreateGroupBranch
argument_list|(
name|RefNames
operator|.
name|REFS_DELETED_GROUPS
operator|+
literal|"*"
argument_list|,
name|RefNames
operator|.
name|refsDeletedGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|IgnoreGroupInconsistencies
DECL|method|cannotCreateGroupNamesBranch ()
specifier|public
name|void
name|cannotCreateGroupNamesBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Use ProjectResetter to restore the group names ref
try|try
init|(
name|ProjectResetter
name|resetter
init|=
name|projectResetter
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
argument_list|)
init|)
block|{
comment|// Manually delete group names ref
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|commit
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
comment|// refs/meta/group-names is only visible with ACCESS_DATABASE
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|testCannotCreateGroupBranch
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCannotCreateGroupBranch (String refPattern, String groupRef)
specifier|private
name|void
name|testCannotCreateGroupBranch
parameter_list|(
name|String
name|refPattern
parameter_list|,
name|String
name|groupRef
parameter_list|)
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|allUsers
argument_list|,
name|refPattern
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|refPattern
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|to
argument_list|(
name|groupRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Not allowed to create group branch."
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|groupRef
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|cannotDeleteGroupBranch ()
specifier|public
name|void
name|cannotDeleteGroupBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|testCannotDeleteGroupBranch
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotDeleteDeletedGroupBranch ()
specifier|public
name|void
name|cannotDeleteDeletedGroupBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|groupRef
init|=
name|RefNames
operator|.
name|refsDeletedGroups
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
name|allUsers
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
name|testCannotDeleteGroupBranch
argument_list|(
name|RefNames
operator|.
name|REFS_DELETED_GROUPS
operator|+
literal|"*"
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotDeleteGroupNamesBranch ()
specifier|public
name|void
name|cannotDeleteGroupNamesBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// refs/meta/group-names is only visible with ACCESS_DATABASE
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|testCannotDeleteGroupBranch
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
expr_stmt|;
block|}
DECL|method|testCannotDeleteGroupBranch (String refPattern, String groupRef)
specifier|private
name|void
name|testCannotDeleteGroupBranch
parameter_list|(
name|String
name|refPattern
parameter_list|,
name|String
name|groupRef
parameter_list|)
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|allUsers
argument_list|,
name|refPattern
argument_list|,
name|Permission
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|PushResult
name|r
init|=
name|deleteRef
argument_list|(
name|allUsersRepo
argument_list|,
name|groupRef
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|refUpdate
init|=
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|groupRef
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Not allowed to delete group branch."
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|groupRef
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|defaultPermissionsOnGroupBranches ()
specifier|public
name|void
name|defaultPermissionsOnGroupBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPermissions
argument_list|(
name|allUsers
argument_list|,
name|groupRef
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
literal|true
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|IgnoreGroupInconsistencies
DECL|method|stalenessChecker ()
specifier|public
name|void
name|stalenessChecker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Newly created group is not stale
name|GroupInfo
name|groupInfo
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|groupInfo
operator|.
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Manual update makes index document stale
name|String
name|groupRef
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|groupRef
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|emptyCommit
init|=
name|createCommit
argument_list|(
name|repo
argument_list|,
name|commit
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|commit
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|groupRef
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|commit
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|emptyCommit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|forceUpdate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertStaleGroupAndReindex
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
comment|// Manually delete group
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|groupRef
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|groupRef
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|commit
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertStaleGroupAndReindex
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupNamesWithLeadingAndTrailingWhitespace ()
specifier|public
name|void
name|groupNamesWithLeadingAndTrailingWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|leading
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|" "
argument_list|,
literal|"  "
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|trailing
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|" "
argument_list|,
literal|"  "
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|leading
operator|+
name|name
argument_list|(
literal|"group"
argument_list|)
operator|+
name|trailing
decl_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|g
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|Sandboxed
DECL|method|groupsOfUserCanBeListedInSlaveMode ()
specifier|public
name|void
name|groupsOfUserCanBeListedInSlaveMode
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInput
name|groupInput
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|groupInput
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"contributors"
argument_list|)
expr_stmt|;
name|groupInput
operator|.
name|members
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
operator|.
name|username
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|groupInput
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|restartAsSlave
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withUser
argument_list|(
name|user
operator|.
name|username
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|group
lambda|->
name|group
operator|.
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groupNames
argument_list|)
operator|.
name|contains
argument_list|(
name|groupInput
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Sandboxed
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.scheduledIndexer.enabled"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.autoReindexIfStale"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
annotation|@
name|IgnoreGroupInconsistencies
DECL|method|reindexGroupsInSlaveMode ()
specifier|public
name|void
name|reindexGroupsInSlaveMode
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|expectedGroups
init|=
name|groups
operator|.
name|getAllGroupReferences
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getUUID
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectedGroups
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Restart the server as slave, on startup of the slave all groups are indexed.
name|restartAsSlave
argument_list|()
expr_stmt|;
name|GroupIndexedCounter
name|groupIndexedCounter
init|=
operator|new
name|GroupIndexedCounter
argument_list|()
decl_stmt|;
name|RegistrationHandle
name|groupIndexEventCounterHandle
init|=
name|groupIndexedListeners
operator|.
name|add
argument_list|(
name|groupIndexedCounter
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Running the reindexer right after startup should not need to reindex any group since
comment|// reindexing was already done on startup.
name|slaveGroupIndexer
operator|.
name|run
argument_list|()
expr_stmt|;
name|groupIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
comment|// Create a group without updating the cache or index,
comment|// then run the reindexer -> only the new group is reindexed.
name|String
name|groupName
init|=
literal|"foo"
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|groupName
operator|+
literal|"-UUID"
argument_list|)
decl_stmt|;
name|groupsUpdate
operator|.
name|createGroupInNoteDb
argument_list|(
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|setId
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextGroupId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|slaveGroupIndexer
operator|.
name|run
argument_list|()
expr_stmt|;
name|groupIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
comment|// Update a group without updating the cache or index,
comment|// then run the reindexer -> only the updated group is reindexed.
name|groupsUpdate
operator|.
name|updateGroupInNoteDb
argument_list|(
name|groupUuid
argument_list|,
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|slaveGroupIndexer
operator|.
name|run
argument_list|()
expr_stmt|;
name|groupIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
comment|// Delete a group  without updating the cache or index,
comment|// then run the reindexer -> only the deleted group is reindexed.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|slaveGroupIndexer
operator|.
name|run
argument_list|()
expr_stmt|;
name|groupIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|groupIndexEventCounterHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Sandboxed
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.scheduledIndexer.runOnStartup"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.scheduledIndexer.enabled"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.autoReindexIfStale"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
annotation|@
name|IgnoreGroupInconsistencies
DECL|method|disabledReindexGroupsOnStartupSlaveMode ()
specifier|public
name|void
name|disabledReindexGroupsOnStartupSlaveMode
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|expectedGroups
init|=
name|groups
operator|.
name|getAllGroupReferences
argument_list|()
operator|.
name|map
argument_list|(
name|GroupReference
operator|::
name|getUUID
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectedGroups
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|restartAsSlave
argument_list|()
expr_stmt|;
name|GroupIndexedCounter
name|groupIndexedCounter
init|=
operator|new
name|GroupIndexedCounter
argument_list|()
decl_stmt|;
name|RegistrationHandle
name|groupIndexEventCounterHandle
init|=
name|groupIndexedListeners
operator|.
name|add
argument_list|(
name|groupIndexedCounter
argument_list|)
decl_stmt|;
try|try
block|{
comment|// No group indexing happened on startup. All groups should be reindexed now.
name|slaveGroupIndexer
operator|.
name|run
argument_list|()
expr_stmt|;
name|groupIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|expectedGroups
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|groupIndexEventCounterHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertStaleGroupAndReindex (AccountGroup.UUID groupUuid)
specifier|private
name|void
name|assertStaleGroupAndReindex
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Evict group from cache to be sure that we use the index state for staleness checks.
name|groupCache
operator|.
name|evict
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Reindex fixes staleness
name|groupIndexer
operator|.
name|index
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|pushToGroupBranchForReviewAndSubmit ( Project.NameKey project, String groupRef, String expectedError)
specifier|private
name|void
name|pushToGroupBranchForReviewAndSubmit
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|groupRef
parameter_list|,
name|String
name|expectedError
parameter_list|)
throws|throws
name|Exception
block|{
name|grantLabel
argument_list|(
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|repo
argument_list|,
name|groupRef
operator|+
literal|":groupRef"
argument_list|)
expr_stmt|;
name|repo
operator|.
name|reset
argument_list|(
literal|"groupRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
literal|"Update group config"
argument_list|,
literal|"group.config"
argument_list|,
literal|"some content"
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|groupRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupRef
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedError
operator|!=
literal|null
condition|)
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"group update not allowed"
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
DECL|method|createBranch (Project.NameKey project, String ref)
specifier|private
name|void
name|createBranch
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|r
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|r
operator|.
name|newObjectInserter
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|r
argument_list|)
init|)
block|{
name|ObjectId
name|emptyCommit
init|=
name|createCommit
argument_list|(
name|r
argument_list|,
literal|"Test change"
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|r
operator|.
name|updateRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|emptyCommit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|update
argument_list|(
name|rw
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCommit (Repository repo, String commitMessage)
specifier|private
name|ObjectId
name|createCommit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createCommit
argument_list|(
name|repo
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createCommit (Repository repo, String commitMessage, @Nullable ObjectId treeId)
specifier|private
name|ObjectId
name|createCommit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|commitMessage
parameter_list|,
annotation|@
name|Nullable
name|ObjectId
name|treeId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
if|if
condition|(
name|treeId
operator|==
literal|null
condition|)
block|{
name|treeId
operator|=
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
name|PersonIdent
name|ident
init|=
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|treeId
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|ObjectId
name|commit
init|=
name|oi
operator|.
name|insert
argument_list|(
name|cb
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|commit
return|;
block|}
block|}
DECL|method|assertMemberAuditEvent ( GroupAuditEventInfo info, Type expectedType, Account.Id expectedUser, Account.Id expectedMember)
specifier|private
name|void
name|assertMemberAuditEvent
parameter_list|(
name|GroupAuditEventInfo
name|info
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|Account
operator|.
name|Id
name|expectedMember
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|user
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|UserMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|UserMemberAuditEventInfo
operator|)
name|info
operator|)
operator|.
name|member
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMember
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubgroupAuditEvent ( GroupAuditEventInfo info, Type expectedType, Account.Id expectedUser, String expectedMemberGroupName)
specifier|private
name|void
name|assertSubgroupAuditEvent
parameter_list|(
name|GroupAuditEventInfo
name|info
parameter_list|,
name|Type
name|expectedType
parameter_list|,
name|Account
operator|.
name|Id
name|expectedUser
parameter_list|,
name|String
name|expectedMemberGroupName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|user
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|type
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GroupMemberAuditEventInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|GroupMemberAuditEventInfo
operator|)
name|info
operator|)
operator|.
name|member
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMemberGroupName
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMembers (String group, TestAccount... expectedMembers)
specifier|private
name|void
name|assertMembers
parameter_list|(
name|String
name|group
parameter_list|,
name|TestAccount
modifier|...
name|expectedMembers
parameter_list|)
throws|throws
name|Exception
block|{
name|assertMembers
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|,
name|TestAccount
operator|.
name|names
argument_list|(
name|expectedMembers
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|assertAccountInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedMembers
argument_list|)
argument_list|,
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMembers (Iterable<AccountInfo> members, String... expectedNames)
specifier|private
name|void
name|assertMembers
parameter_list|(
name|Iterable
argument_list|<
name|AccountInfo
argument_list|>
name|members
parameter_list|,
name|String
modifier|...
name|expectedNames
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|members
argument_list|,
name|i
lambda|->
name|i
operator|.
name|name
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedNames
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoMembers (String group)
specifier|private
name|void
name|assertNoMembers
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertIncludes (String group, String... expectedNames)
specifier|private
name|void
name|assertIncludes
parameter_list|(
name|String
name|group
parameter_list|,
name|String
modifier|...
name|expectedNames
parameter_list|)
throws|throws
name|Exception
block|{
name|assertIncludes
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|,
name|expectedNames
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIncludes (Iterable<GroupInfo> includes, String... expectedNames)
specifier|private
specifier|static
name|void
name|assertIncludes
parameter_list|(
name|Iterable
argument_list|<
name|GroupInfo
argument_list|>
name|includes
parameter_list|,
name|String
modifier|...
name|expectedNames
parameter_list|)
block|{
name|assertThat
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|includes
argument_list|,
name|i
lambda|->
name|i
operator|.
name|name
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedNames
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoIncludes (String group)
specifier|private
name|void
name|assertNoIncludes
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|includedGroups
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertBadRequest (ListRequest req)
specifier|private
name|void
name|assertBadRequest
parameter_list|(
name|ListRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|req
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected BadRequestException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
annotation|@
name|Target
argument_list|(
block|{
name|METHOD
block|}
argument_list|)
annotation|@
name|Retention
argument_list|(
name|RUNTIME
argument_list|)
DECL|annotation|IgnoreGroupInconsistencies
specifier|private
annotation_defn|@interface
name|IgnoreGroupInconsistencies
block|{}
comment|/** Checks if a group is indexed the correct number of times. */
DECL|class|GroupIndexedCounter
specifier|private
specifier|static
class|class
name|GroupIndexedCounter
implements|implements
name|GroupIndexedListener
block|{
DECL|field|countsByGroup
specifier|private
specifier|final
name|AtomicLongMap
argument_list|<
name|String
argument_list|>
name|countsByGroup
init|=
name|AtomicLongMap
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onGroupIndexed (String uuid)
specifier|public
name|void
name|onGroupIndexed
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|countsByGroup
operator|.
name|incrementAndGet
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|countsByGroup
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getCount (AccountGroup.UUID groupUuid)
name|long
name|getCount
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
return|return
name|countsByGroup
operator|.
name|get
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertReindexOf (AccountGroup.UUID groupUuid)
name|void
name|assertReindexOf
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
name|assertReindexOf
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReindexOf (List<AccountGroup.UUID> groupUuids)
name|void
name|assertReindexOf
parameter_list|(
name|List
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupUuids
parameter_list|)
block|{
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
range|:
name|groupUuids
control|)
block|{
name|assertThat
argument_list|(
name|getCount
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|countsByGroup
argument_list|)
operator|.
name|hasSize
argument_list|(
name|groupUuids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNoReindex ()
name|void
name|assertNoReindex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|countsByGroup
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

