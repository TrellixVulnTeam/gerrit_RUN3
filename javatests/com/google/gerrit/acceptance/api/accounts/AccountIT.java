begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.accounts
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|accounts
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|deleteRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|fetch
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|REFS_GPG_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
operator|.
name|keyToString
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|allValidKeys
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|validKeyWithExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|validKeyWithSecondUserId
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKeys
operator|.
name|validKeyWithoutExpiration
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|IGNORE_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_GPGKEY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|StopStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Correspondence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Correspondence
operator|.
name|BinaryPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicLongMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Runnables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|Sandboxed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseSsh
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|AccountOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|TestSshKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|group
operator|.
name|GroupOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|AccountInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|DeleteDraftCommentsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|DeletedDraftCommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|EmailInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|StarsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInfo
operator|.
name|ConsistencyProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInput
operator|.
name|CheckAccountsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountDetailInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EmailInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GpgKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|SshKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|AccountIndexedListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdatedListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|Fingerprint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|PublicKeyStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
operator|.
name|testing
operator|.
name|TestKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Emails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ProjectWatches
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ProjectWatches
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|VersionedAuthorizedKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|StalenessChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|account
operator|.
name|InternalAccountQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|AccountActivationValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPublicKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificateIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AccountIT
specifier|public
class|class
name|AccountIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|enableSignedPushConfig ()
specifier|public
specifier|static
name|Config
name|enableSignedPushConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"enableSignedPush"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Disable the staleness checker so that tests that verify the number of expected index events
comment|// are stable.
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"autoReindexIfStale"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|field|accountsUpdateProvider
annotation|@
name|Inject
specifier|private
annotation|@
name|ServerInitiated
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
decl_stmt|;
DECL|field|accountIndexer
annotation|@
name|Inject
specifier|private
name|AccountIndexer
name|accountIndexer
decl_stmt|;
DECL|field|accountIndexedListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|AccountIndexedListener
argument_list|>
name|accountIndexedListeners
decl_stmt|;
DECL|field|refUpdateListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|GitReferenceUpdatedListener
argument_list|>
name|refUpdateListeners
decl_stmt|;
DECL|field|extIdNotesFactory
annotation|@
name|Inject
specifier|private
name|ExternalIdNotes
operator|.
name|Factory
name|extIdNotesFactory
decl_stmt|;
DECL|field|externalIds
annotation|@
name|Inject
specifier|private
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|gitReferenceUpdated
annotation|@
name|Inject
specifier|private
name|GitReferenceUpdated
name|gitReferenceUpdated
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|accountQueryProvider
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|accountQueryProvider
decl_stmt|;
DECL|field|metaDataUpdateInternalFactory
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
decl_stmt|;
DECL|field|publicKeyStoreProvider
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|PublicKeyStore
argument_list|>
name|publicKeyStoreProvider
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|retryMetrics
annotation|@
name|Inject
specifier|private
name|RetryHelper
operator|.
name|Metrics
name|retryMetrics
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|private
name|Sequences
name|seq
decl_stmt|;
DECL|field|stalenessChecker
annotation|@
name|Inject
specifier|private
name|StalenessChecker
name|stalenessChecker
decl_stmt|;
DECL|field|authorizedKeys
annotation|@
name|Inject
specifier|private
name|VersionedAuthorizedKeys
operator|.
name|Accessor
name|authorizedKeys
decl_stmt|;
DECL|field|emails
annotation|@
name|Inject
specifier|protected
name|Emails
name|emails
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"accounts"
argument_list|)
DECL|field|accountsCache
specifier|private
name|LoadingCache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|AccountState
argument_list|>
argument_list|>
name|accountsCache
decl_stmt|;
DECL|field|accountOperations
annotation|@
name|Inject
specifier|private
name|AccountOperations
name|accountOperations
decl_stmt|;
annotation|@
name|Inject
DECL|field|accountActivationValidationListeners
specifier|private
name|DynamicSet
argument_list|<
name|AccountActivationValidationListener
argument_list|>
name|accountActivationValidationListeners
decl_stmt|;
DECL|field|groupOperations
annotation|@
name|Inject
specifier|protected
name|GroupOperations
name|groupOperations
decl_stmt|;
DECL|field|accountIndexedCounter
specifier|private
name|AccountIndexedCounter
name|accountIndexedCounter
decl_stmt|;
DECL|field|accountIndexEventCounterHandle
specifier|private
name|RegistrationHandle
name|accountIndexEventCounterHandle
decl_stmt|;
DECL|field|refUpdateCounter
specifier|private
name|RefUpdateCounter
name|refUpdateCounter
decl_stmt|;
DECL|field|refUpdateCounterHandle
specifier|private
name|RegistrationHandle
name|refUpdateCounterHandle
decl_stmt|;
annotation|@
name|Before
DECL|method|addAccountIndexEventCounter ()
specifier|public
name|void
name|addAccountIndexEventCounter
parameter_list|()
block|{
name|accountIndexedCounter
operator|=
operator|new
name|AccountIndexedCounter
argument_list|()
expr_stmt|;
name|accountIndexEventCounterHandle
operator|=
name|accountIndexedListeners
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
name|accountIndexedCounter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|removeAccountIndexEventCounter ()
specifier|public
name|void
name|removeAccountIndexEventCounter
parameter_list|()
block|{
if|if
condition|(
name|accountIndexEventCounterHandle
operator|!=
literal|null
condition|)
block|{
name|accountIndexEventCounterHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|addRefUpdateCounter ()
specifier|public
name|void
name|addRefUpdateCounter
parameter_list|()
block|{
name|refUpdateCounter
operator|=
operator|new
name|RefUpdateCounter
argument_list|()
expr_stmt|;
name|refUpdateCounterHandle
operator|=
name|refUpdateListeners
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
name|refUpdateCounter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|removeRefUpdateCounter ()
specifier|public
name|void
name|removeRefUpdateCounter
parameter_list|()
block|{
if|if
condition|(
name|refUpdateCounterHandle
operator|!=
literal|null
condition|)
block|{
name|refUpdateCounterHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|clearPublicKeyStore ()
specifier|public
name|void
name|clearPublicKeyStore
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|REFS_GPG_KEYS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|REFS_GPG_KEYS
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|After
DECL|method|deleteGpgKeys ()
specifier|public
name|void
name|deleteGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ref
init|=
name|REFS_GPG_KEYS
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
if|if
condition|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|ref
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"Failed to delete "
operator|+
name|ref
argument_list|)
operator|.
name|that
argument_list|(
name|ru
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertLabelPermission ( Project.NameKey project, GroupReference groupReference, String ref, boolean exclusive, String labelName, int min, int max)
specifier|protected
name|void
name|assertLabelPermission
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|GroupReference
name|groupReference
parameter_list|,
name|String
name|ref
parameter_list|,
name|boolean
name|exclusive
parameter_list|,
name|String
name|labelName
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|AccessSection
name|accessSection
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accessSection
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|String
name|permissionName
init|=
name|Permission
operator|.
name|LABEL
operator|+
name|labelName
decl_stmt|;
name|Permission
name|permission
init|=
name|accessSection
operator|.
name|getPermission
argument_list|(
name|permissionName
argument_list|)
decl_stmt|;
name|assertPermission
argument_list|(
name|permission
argument_list|,
name|permissionName
argument_list|,
name|exclusive
argument_list|,
name|labelName
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|)
argument_list|,
name|groupReference
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createByAccountCreator ()
specifier|public
name|void
name|createByAccountCreator
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
name|createByAccountCreator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|refUpdateCounter
operator|.
name|assertRefUpdateFor
argument_list|(
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
argument_list|,
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
argument_list|,
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_SEQUENCES
operator|+
name|Sequences
operator|.
name|NAME_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createByAccountCreator (int expectedAccountReindexCalls)
specifier|private
name|Account
operator|.
name|Id
name|createByAccountCreator
parameter_list|(
name|int
name|expectedAccountReindexCalls
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"foo"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|foo
argument_list|,
name|expectedAccountReindexCalls
argument_list|)
expr_stmt|;
name|assertUserBranch
argument_list|(
name|foo
operator|.
name|getId
argument_list|()
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|foo
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|createAnonymousCowardByAccountCreator ()
specifier|public
name|void
name|createAnonymousCowardByAccountCreator
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|anonymousCoward
init|=
name|accountCreator
operator|.
name|create
argument_list|()
decl_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|anonymousCoward
argument_list|)
expr_stmt|;
name|assertUserBranchWithoutAccountConfig
argument_list|(
name|anonymousCoward
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|create ()
specifier|public
name|void
name|create
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInput
name|input
init|=
operator|new
name|AccountInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|username
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|input
operator|.
name|email
operator|=
literal|"foo@example.com"
expr_stmt|;
name|AccountInfo
name|accountInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|_accountId
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|accountInfo
operator|.
name|_accountId
argument_list|)
decl_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|accountId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|accountId
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ExternalId
operator|.
name|createUsername
argument_list|(
name|input
operator|.
name|username
argument_list|,
name|accountId
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ExternalId
operator|.
name|createEmail
argument_list|(
name|accountId
argument_list|,
name|input
operator|.
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createAccountUsernameAlreadyTaken ()
specifier|public
name|void
name|createAccountUsernameAlreadyTaken
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInput
name|input
init|=
operator|new
name|AccountInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|username
operator|=
name|admin
operator|.
name|username
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"username '"
operator|+
name|admin
operator|.
name|username
operator|+
literal|"' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createAccountEmailAlreadyTaken ()
specifier|public
name|void
name|createAccountEmailAlreadyTaken
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInput
name|input
init|=
operator|new
name|AccountInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|username
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|email
operator|=
name|admin
operator|.
name|email
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"email '"
operator|+
name|admin
operator|.
name|email
operator|+
literal|"' already exists"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageOnAccountUpdates ()
specifier|public
name|void
name|commitMessageOnAccountUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountsUpdate
name|au
init|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|au
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|assertLastCommitMessageOfUserBranch
argument_list|(
name|accountId
argument_list|,
literal|"Create Test Account"
argument_list|)
expr_stmt|;
name|au
operator|.
name|update
argument_list|(
literal|"Set Status"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setStatus
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertLastCommitMessageOfUserBranch
argument_list|(
name|accountId
argument_list|,
literal|"Set Status"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLastCommitMessageOfUserBranch (Account.Id accountId, String expectedMessage)
specifier|private
name|void
name|assertLastCommitMessageOfUserBranch
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Ref
name|exactRef
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|exactRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createAtomically ()
specifier|public
name|void
name|createAtomically
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fullName
init|=
literal|"Foo"
decl_stmt|;
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|createEmail
argument_list|(
name|accountId
argument_list|,
literal|"foo@example.com"
argument_list|)
decl_stmt|;
name|AccountState
name|accountState
init|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|insert
argument_list|(
literal|"Create Account Atomically"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setFullName
argument_list|(
name|fullName
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|extId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EmailInfo
argument_list|>
name|emails
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getEmails
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emails
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|email
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|extId
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|commitUserBranch
init|=
name|getRemoteHead
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|commitRefsMetaExternalIds
init|=
name|getRemoteHead
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitUserBranch
operator|.
name|getCommitTime
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitRefsMetaExternalIds
operator|.
name|getCommitTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|updateNonExistingAccount ()
specifier|public
name|void
name|updateNonExistingAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|nonExistingAccountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|999999
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|consumerCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Update Non-Existing Account"
argument_list|,
name|nonExistingAccountId
argument_list|,
name|a
lambda|->
name|consumerCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|consumerCalled
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateAccountWithoutAccountConfigNoteDb ()
specifier|public
name|void
name|updateAccountWithoutAccountConfigNoteDb
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|anonymousCoward
init|=
name|accountCreator
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertUserBranchWithoutAccountConfig
argument_list|(
name|anonymousCoward
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|status
init|=
literal|"OOO"
decl_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set status"
argument_list|,
name|anonymousCoward
operator|.
name|getId
argument_list|()
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|Account
name|account
init|=
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|account
operator|.
name|getFullName
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|account
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertUserBranch
argument_list|(
name|anonymousCoward
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUserBranchWithoutAccountConfig (Account.Id accountId)
specifier|private
name|void
name|assertUserBranchWithoutAccountConfig
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertUserBranch
argument_list|(
name|accountId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUserBranch ( Account.Id accountId, @Nullable String name, @Nullable String status)
specifier|private
name|void
name|assertUserBranch
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
annotation|@
name|Nullable
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|status
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|;
name|ObjectReader
name|or
operator|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|timestampDiffMs
init|=
name|Math
operator|.
name|abs
argument_list|(
name|c
operator|.
name|getCommitTime
argument_list|()
operator|*
literal|1000L
operator|-
name|getAccount
argument_list|(
name|accountId
argument_list|)
operator|.
name|getRegisteredOn
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timestampDiffMs
argument_list|)
operator|.
name|isAtMost
argument_list|(
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the 'account.config' file.
try|try
init|(
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|or
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|||
name|status
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|tw
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
operator|new
name|String
argument_list|(
name|or
operator|.
name|open
argument_list|(
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_FULL_NAME
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_STATUS
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No account properties were set, hence an 'account.config' file was not created.
name|assertThat
argument_list|(
name|tw
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|get ()
specifier|public
name|void
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"admin"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getByIntId ()
specifier|public
name|void
name|getByIntId
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"admin"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountInfo
name|infoByIntId
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|info
operator|.
name|_accountId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|infoByIntId
operator|.
name|name
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|self ()
specifier|public
name|void
name|self
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertUser
argument_list|(
name|info
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"self"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertUser
argument_list|(
name|info
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|active ()
specifier|public
name|void
name|active
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|id
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_accountId
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// Inactive users may only be resolved by ID.
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected ResourceNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Account 'user' only matches inactive accounts. To use an inactive account, retry"
operator|+
literal|" with one of the following exact account IDs:\n"
operator|+
name|id
operator|+
literal|": User<user@example.com>"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|validateAccountActivation ()
specifier|public
name|void
name|validateAccountActivation
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|activatableAccountId
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|inactive
argument_list|()
operator|.
name|preferredEmail
argument_list|(
literal|"foo@activatable.com"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|deactivatableAccountId
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|preferredEmail
argument_list|(
literal|"foo@deactivatable.com"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RegistrationHandle
name|registrationHandle
init|=
name|accountActivationValidationListeners
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
operator|new
name|AccountActivationValidationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|validateActivation
parameter_list|(
name|AccountState
name|account
parameter_list|)
throws|throws
name|ValidationException
block|{
name|String
name|preferredEmail
init|=
name|account
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferredEmail
operator|==
literal|null
operator|||
operator|!
name|preferredEmail
operator|.
name|endsWith
argument_list|(
literal|"@activatable.com"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"not allowed to active account"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateDeactivation
parameter_list|(
name|AccountState
name|account
parameter_list|)
throws|throws
name|ValidationException
block|{
name|String
name|preferredEmail
init|=
name|account
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferredEmail
operator|==
literal|null
operator|||
operator|!
name|preferredEmail
operator|.
name|endsWith
argument_list|(
literal|"@deactivatable.com"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"not allowed to deactive account"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
comment|/* Test account that can be activated, but not deactivated */
comment|// Deactivate account that is already inactive
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|activatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"account not active"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|activatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Activate account that can be activated
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|activatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|activatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Activate account that is already active
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|activatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|activatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Try deactivating account that cannot be deactivated
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|activatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"not allowed to deactive account"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|activatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|/* Test account that can be deactivated, but not activated */
comment|// Activate account that is already inactive
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|deactivatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|deactivatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Deactivate account that can be deactivated
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|deactivatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|deactivatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Deactivate account that is already inactive
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|deactivatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"account not active"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|deactivatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Try activating account that cannot be activated
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|deactivatableAccountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"not allowed to active account"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|accountOperations
operator|.
name|account
argument_list|(
name|deactivatableAccountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|active
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|registrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deactivateSelf ()
specifier|public
name|void
name|deactivateSelf
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"cannot deactivate own account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deactivateNotActive ()
specifier|public
name|void
name|deactivateNotActive
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|id
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_accountId
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
literal|"user"
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"account not active"
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starUnstarChange ()
specifier|public
name|void
name|starUnstarChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|refUpdateCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|contains
argument_list|(
name|DEFAULT_LABEL
argument_list|)
expr_stmt|;
name|refUpdateCounter
operator|.
name|assertRefUpdateFor
argument_list|(
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|change
operator|.
name|_number
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|unstarChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|change
operator|=
name|info
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|refUpdateCounter
operator|.
name|assertRefUpdateFor
argument_list|(
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|change
operator|.
name|_number
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starUnstarChangeWithLabels ()
specifier|public
name|void
name|starUnstarChangeWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|refUpdateCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
name|DEFAULT_LABEL
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
name|DEFAULT_LABEL
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|starredChanges
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|starredChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeInfo
name|starredChange
init|=
name|starredChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|,
name|DEFAULT_LABEL
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|refUpdateCounter
operator|.
name|assertRefUpdateFor
argument_list|(
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|change
operator|.
name|_number
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"yellow"
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|=
name|info
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"red"
argument_list|,
literal|"yellow"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"red"
argument_list|,
literal|"yellow"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|starredChanges
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStarredChanges
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|starredChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|starredChange
operator|=
name|starredChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|starredChange
operator|.
name|stars
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"red"
argument_list|,
literal|"yellow"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|refUpdateCounter
operator|.
name|assertRefUpdateFor
argument_list|(
name|RefUpdateCounter
operator|.
name|projectRef
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|change
operator|.
name|_number
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"not allowed to get stars of another account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starWithInvalidLabels ()
specifier|public
name|void
name|starWithInvalidLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"invalid labels: another invalid label, invalid label"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"invalid label"
argument_list|,
literal|"blue"
argument_list|,
literal|"another invalid label"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteStarLabelsFromChangeWithoutStarLabels ()
specifier|public
name|void
name|deleteStarLabelsFromChangeWithoutStarLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|triplet
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starWithDefaultAndIgnoreLabel ()
specifier|public
name|void
name|starWithDefaultAndIgnoreLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"The labels "
operator|+
name|DEFAULT_LABEL
operator|+
literal|" and "
operator|+
name|IGNORE_LABEL
operator|+
literal|" are mutually exclusive."
operator|+
literal|" Only one of them can be set."
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|triplet
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_LABEL
argument_list|,
literal|"blue"
argument_list|,
name|IGNORE_LABEL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ignoreChangeBySetStars ()
specifier|public
name|void
name|ignoreChangeBySetStars
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|AddReviewerInput
argument_list|()
expr_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user2
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IGNORE_LABEL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerToIgnoredChange ()
specifier|public
name|void
name|addReviewerToIgnoredChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|IGNORE_LABEL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|assertMailReplyTo
argument_list|(
name|message
argument_list|,
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suggestAccounts ()
specifier|public
name|void
name|suggestAccounts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|adminUsername
init|=
literal|"admin"
decl_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|()
operator|.
name|withQuery
argument_list|(
name|adminUsername
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|adminUsername
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|resultShortcutApi
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|(
name|adminUsername
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultShortcutApi
argument_list|)
operator|.
name|hasSize
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|emptyResult
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|suggestAccounts
argument_list|(
literal|"unknown"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|emptyResult
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getOwnDetail ()
specifier|public
name|void
name|getOwnDetail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"preferred@example.com"
decl_stmt|;
name|String
name|name
init|=
literal|"Foo"
decl_stmt|;
name|String
name|username
init|=
name|name
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|username
argument_list|,
name|email
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|secondaryEmail
init|=
literal|"secondary@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|secondaryEmail
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|String
name|status
init|=
literal|"OOO"
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|foo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|AccountDetailInfo
name|detail
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|secondaryEmail
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|registeredOn
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getAccount
argument_list|(
name|foo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getRegisteredOn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|inactive
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|_moreAccounts
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|detailOfOtherAccountDoesntIncludeSecondaryEmailsWithoutModifyAccount ()
specifier|public
name|void
name|detailOfOtherAccountDoesntIncludeSecondaryEmailsWithoutModifyAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"preferred@example.com"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|email
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|String
name|secondaryEmail
init|=
literal|"secondary@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|secondaryEmail
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|AccountDetailInfo
name|detail
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|detailOfOtherAccountIncludeSecondaryEmailsWithModifyAccount ()
specifier|public
name|void
name|detailOfOtherAccountIncludeSecondaryEmailsWithModifyAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"preferred@example.com"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|email
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|String
name|secondaryEmail
init|=
literal|"secondary@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|secondaryEmail
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|AccountDetailInfo
name|detail
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|detail
operator|.
name|secondaryEmails
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|secondaryEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getOwnEmails ()
specifier|public
name|void
name|getOwnEmails
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"preferred@example.com"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|email
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|foo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|secondaryEmail
init|=
literal|"secondary@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|secondaryEmail
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|foo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email
argument_list|,
name|secondaryEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotGetEmailsOfOtherAccountWithoutModifyAccount ()
specifier|public
name|void
name|cannotGetEmailsOfOtherAccountWithoutModifyAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"preferred2@example.com"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|email
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"modify account not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getEmails
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getEmailsOfOtherAccount ()
specifier|public
name|void
name|getEmailsOfOtherAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"preferred3@example.com"
decl_stmt|;
name|String
name|secondaryEmail
init|=
literal|"secondary3@example.com"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|email
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|secondaryEmail
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getEmails
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|email
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email
argument_list|,
name|secondaryEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addEmail ()
specifier|public
name|void
name|addEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|emails
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"new.email@example.com"
argument_list|,
literal|"new.email@example.systems"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|currentEmails
init|=
name|getEmails
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|emails
control|)
block|{
name|assertThat
argument_list|(
name|currentEmails
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|containsAtLeastElementsIn
argument_list|(
name|emails
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addInvalidEmail ()
specifier|public
name|void
name|addInvalidEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|emails
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
comment|// Missing domain part
literal|"new.email"
argument_list|,
comment|// Missing domain part
literal|"new.email@"
argument_list|,
comment|// Missing user part
literal|"@example.com"
argument_list|,
comment|// Non-supported TLD  (see tlds-alpha-by-domain.txt)
literal|"new.email@example.africa"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|emails
control|)
block|{
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|email
argument_list|)
decl_stmt|;
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected BadRequestException for invalid email address: "
operator|+
name|email
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"invalid email address"
argument_list|)
expr_stmt|;
block|}
block|}
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAddNonConfirmedEmailWithoutModifyAccountPermission ()
specifier|public
name|void
name|cannotAddNonConfirmedEmailWithoutModifyAccountPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|account
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"user"
argument_list|)
argument_list|)
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
literal|"test@test.com"
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|account
operator|.
name|username
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAddEmailAddressUsedByAnotherAccount ()
specifier|public
name|void
name|cannotAddEmailAddressUsedByAnotherAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"new.email@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Identity 'mailto:"
operator|+
name|email
operator|+
literal|"' in use by another account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|username
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.registerEmailPrivateKey"
argument_list|,
name|value
operator|=
literal|"HsOc6l+2lhS9G7sE/RsnS7Z6GJjdRDX14co="
argument_list|)
DECL|method|addEmailSendsConfirmationEmail ()
specifier|public
name|void
name|addEmailSendsConfirmationEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"new.email@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|email
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|Address
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.registerEmailPrivateKey"
argument_list|,
name|value
operator|=
literal|"HsOc6l+2lhS9G7sE/RsnS7Z6GJjdRDX14co="
argument_list|)
DECL|method|addEmailToBeConfirmedToOwnAccount ()
specifier|public
name|void
name|addEmailToBeConfirmedToOwnAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user
init|=
name|accountCreator
operator|.
name|create
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|email
init|=
literal|"self@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|email
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAddEmailToBeConfirmedToOtherAccountWithoutModifyAccountPermission ()
specifier|public
name|void
name|cannotAddEmailToBeConfirmedToOtherAccountWithoutModifyAccountPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user
init|=
name|accountCreator
operator|.
name|create
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"modify account not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|newEmailInput
argument_list|(
literal|"foo@example.com"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.registerEmailPrivateKey"
argument_list|,
name|value
operator|=
literal|"HsOc6l+2lhS9G7sE/RsnS7Z6GJjdRDX14co="
argument_list|)
DECL|method|addEmailToBeConfirmedToOtherAccount ()
specifier|public
name|void
name|addEmailToBeConfirmedToOtherAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user
init|=
name|accountCreator
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|email
init|=
literal|"me@example.com"
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|newEmailInput
argument_list|(
name|email
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEmail ()
specifier|public
name|void
name|deleteEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo.bar@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
name|newEmailInput
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteEmail
argument_list|(
name|input
operator|.
name|email
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEmailFromCustomExternalIdSchemes ()
specifier|public
name|void
name|deleteEmailFromCustomExternalIdSchemes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo.bar@example.com"
decl_stmt|;
name|String
name|extId1
init|=
literal|"foo:bar"
decl_stmt|;
name|String
name|extId2
init|=
literal|"foo:baz"
decl_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Add External IDs"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|extId1
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|email
argument_list|)
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|extId2
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|identity
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsAtLeast
argument_list|(
name|extId1
argument_list|,
name|extId2
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|identity
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsNoneOf
argument_list|(
name|extId1
argument_list|,
name|extId2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteEmailOfOtherUser ()
specifier|public
name|void
name|deleteEmailOfOtherUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo.bar@example.com"
decl_stmt|;
name|EmailInput
name|input
init|=
operator|new
name|EmailInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|email
operator|=
name|email
expr_stmt|;
name|input
operator|.
name|noConfirmation
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|addEmail
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|email
argument_list|)
expr_stmt|;
comment|// admin can delete email of user
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|deleteEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getEmails
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|email
argument_list|)
expr_stmt|;
comment|// user cannot delete email of admin
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"modify account not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|deleteEmail
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lookUpByEmail ()
specifier|public
name|void
name|lookUpByEmail
parameter_list|()
throws|throws
name|Exception
block|{
comment|// exact match with scheme "mailto:"
name|assertEmail
argument_list|(
name|emails
operator|.
name|getAccountFor
argument_list|(
name|admin
operator|.
name|email
argument_list|)
argument_list|,
name|admin
argument_list|)
expr_stmt|;
comment|// exact match with other scheme
name|String
name|email
init|=
literal|"foo.bar@example.com"
decl_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Add Email"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEmail
argument_list|(
name|emails
operator|.
name|getAccountFor
argument_list|(
name|email
argument_list|)
argument_list|,
name|admin
argument_list|)
expr_stmt|;
comment|// wrong case doesn't match
name|assertThat
argument_list|(
name|emails
operator|.
name|getAccountFor
argument_list|(
name|admin
operator|.
name|email
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// prefix doesn't match
name|assertThat
argument_list|(
name|emails
operator|.
name|getAccountFor
argument_list|(
name|admin
operator|.
name|email
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|admin
operator|.
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// non-existing doesn't match
name|assertThat
argument_list|(
name|emails
operator|.
name|getAccountFor
argument_list|(
literal|"non-existing@example.com"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// lookup several accounts by email at once
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|byEmails
init|=
name|emails
operator|.
name|getAccountsFor
argument_list|(
name|admin
operator|.
name|email
argument_list|,
name|user
operator|.
name|email
argument_list|)
decl_stmt|;
name|assertEmail
argument_list|(
name|byEmails
operator|.
name|get
argument_list|(
name|admin
operator|.
name|email
argument_list|)
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertEmail
argument_list|(
name|byEmails
operator|.
name|get
argument_list|(
name|user
operator|.
name|email
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lookUpByPreferredEmail ()
specifier|public
name|void
name|lookUpByPreferredEmail
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create an inconsistent account that has a preferred email without external ID
name|String
name|prefix
init|=
literal|"foo.preferred"
decl_stmt|;
name|String
name|prefEmail
init|=
name|prefix
operator|+
literal|"@example.com"
decl_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Preferred Email"
argument_list|,
name|foo
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|prefEmail
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the account is still found when using the preferred email to lookup the account
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountsByPrefEmail
init|=
name|emails
operator|.
name|getAccountFor
argument_list|(
name|prefEmail
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountsByPrefEmail
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|accountsByPrefEmail
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|foo
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// look up by email prefix doesn't find the account
name|accountsByPrefEmail
operator|=
name|emails
operator|.
name|getAccountFor
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountsByPrefEmail
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// look up by other case doesn't find the account
name|accountsByPrefEmail
operator|=
name|emails
operator|.
name|getAccountFor
argument_list|(
name|prefEmail
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountsByPrefEmail
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putStatus ()
specifier|public
name|void
name|putStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|statuses
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"OOO"
argument_list|,
literal|"Busy"
argument_list|)
decl_stmt|;
name|AccountInfo
name|info
decl_stmt|;
for|for
control|(
name|String
name|status
range|:
name|statuses
control|)
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertUser
argument_list|(
name|info
argument_list|,
name|admin
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertUser
argument_list|(
name|info
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setName ()
specifier|public
name|void
name|setName
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Admin McAdminface"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Admin McAdminface"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|adminCanSetNameOfOtherUser ()
specifier|public
name|void
name|adminCanSetNameOfOtherUser
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|username
argument_list|)
operator|.
name|setName
argument_list|(
literal|"User McUserface"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|username
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"User McUserface"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|userCannotSetNameOfOtherUser ()
specifier|public
name|void
name|userCannotSetNameOfOtherUser
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|username
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Admin McAdminface"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Sandboxed
DECL|method|userCanSetNameOfOtherUserWithModifyAccountPermission ()
specifier|public
name|void
name|userCanSetNameOfOtherUserWithModifyAccountPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|MODIFY_ACCOUNT
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|username
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Admin McAdminface"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|username
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Admin McAdminface"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fetchUserBranch ()
specifier|public
name|void
name|fetchUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|String
name|userRefName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|id
argument_list|)
decl_stmt|;
comment|// remove default READ permissions
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getAccessSection
argument_list|(
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
literal|true
argument_list|)
operator|.
name|remove
argument_list|(
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// deny READ permission that is inherited from All-Projects
name|deny
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
comment|// fetching user branch without READ permission fails
try|try
block|{
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRefName
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"user branch is visible although no READ permission is granted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
comment|// expected because no READ granted on user branch
block|}
comment|// allow each user to read its own user branch
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
comment|// fetch user branch using refs/users/YY/XXXXXXX
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRefName
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|Ref
name|userRef
init|=
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"userRef"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// fetch user branch using refs/users/self
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_SELF
operator|+
literal|":userSelfRef"
argument_list|)
expr_stmt|;
name|Ref
name|userSelfRef
init|=
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"userSelfRef"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|userSelfRef
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|userSelfRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
comment|// fetching user branch of another user fails
name|String
name|otherUserRefName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|TransportException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Remote does not have "
operator|+
name|otherUserRefName
operator|+
literal|" available for fetch."
argument_list|)
expr_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|otherUserRefName
operator|+
literal|":otherUserRef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToUserBranch ()
specifier|public
name|void
name|pushToUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToUserBranchForReview ()
specifier|public
name|void
name|pushToUserBranchForReview
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRefName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRefName
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRefName
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchForReviewAndSubmit ()
specifier|public
name|void
name|pushAccountConfigToUserBranchForReviewAndSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_STATUS
argument_list|,
literal|"out-of-office"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"out-of-office"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigWithPrefEmailThatDoesNotExistAsExtIdToUserBranchForReviewAndSubmit ()
specifier|public
name|void
name|pushAccountConfigWithPrefEmailThatDoesNotExistAsExtIdToUserBranchForReviewAndSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|name
argument_list|(
literal|"foo"
argument_list|)
operator|+
literal|"@example.com"
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|foo
operator|.
name|id
argument_list|)
decl_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|foo
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|String
name|email
init|=
literal|"some.email@example.com"
decl_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_PREFERRED_EMAIL
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|foo
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|foo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|foo
operator|.
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfConfigIsInvalid ()
specifier|public
name|void
name|pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfConfigIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
literal|"invalid config"
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"invalid account configuration: commit '%s' has an invalid '%s' file for account '%s':"
operator|+
literal|" Invalid config file %s in commit %s"
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid ()
specifier|public
name|void
name|pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|String
name|noEmail
init|=
literal|"no.email"
decl_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_PREFERRED_EMAIL
argument_list|,
name|noEmail
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"invalid account configuration: invalid preferred email '%s' for account '%s'"
argument_list|,
name|noEmail
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfOwnAccountIsDeactivated ()
specifier|public
name|void
name|pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfOwnAccountIsDeactivated
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setBoolean
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_ACTIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"invalid account configuration: cannot deactivate own account"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchForReviewDeactivateOtherAccount ()
specifier|public
name|void
name|pushAccountConfigToUserBranchForReviewDeactivateOtherAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|foo
operator|.
name|id
argument_list|)
decl_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|userRef
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|adminGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
name|grantLabel
argument_list|(
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|allUsers
argument_list|,
name|userRef
argument_list|,
literal|false
argument_list|,
name|adminGroupUuid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|userRef
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
literal|false
argument_list|,
name|adminGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setBoolean
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_ACTIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
operator|+
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|userRef
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWatchConfigToUserBranch ()
specifier|public
name|void
name|pushWatchConfigToUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|wc
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|wc
operator|.
name|setString
argument_list|(
name|ProjectWatches
operator|.
name|PROJECT
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|ProjectWatches
operator|.
name|KEY_NOTIFY
argument_list|,
name|ProjectWatches
operator|.
name|NotifyValue
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NotifyType
operator|.
name|ALL_COMMENTS
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Add project watch"
argument_list|,
name|ProjectWatches
operator|.
name|WATCH_CONFIG
argument_list|,
name|wc
operator|.
name|toText
argument_list|()
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|String
name|invalidNotifyValue
init|=
literal|"]invalid["
decl_stmt|;
name|wc
operator|.
name|setString
argument_list|(
name|ProjectWatches
operator|.
name|PROJECT
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|ProjectWatches
operator|.
name|KEY_NOTIFY
argument_list|,
name|invalidNotifyValue
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Add invalid project watch"
argument_list|,
name|ProjectWatches
operator|.
name|WATCH_CONFIG
argument_list|,
name|wc
operator|.
name|toText
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"invalid account configuration"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: Invalid project watch of account %d for project %s: %s"
argument_list|,
name|ProjectWatches
operator|.
name|WATCH_CONFIG
argument_list|,
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|invalidNotifyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranch ()
specifier|public
name|void
name|pushAccountConfigToUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|oooUser
init|=
name|accountCreator
operator|.
name|create
argument_list|(
literal|"away"
argument_list|,
literal|"away@mail.invalid"
argument_list|,
literal|"Ambrose Way"
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|oooUser
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Must clone as oooUser to ensure the push is allowed.
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|oooUser
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|oooUser
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_STATUS
argument_list|,
literal|"out-of-office"
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|oooUser
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|oooUser
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|oooUser
argument_list|)
expr_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oooUser
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oooUser
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"out-of-office"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchIsRejectedIfConfigIsInvalid ()
specifier|public
name|void
name|pushAccountConfigToUserBranchIsRejectedIfConfigIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
literal|"invalid config"
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"invalid account configuration"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"commit '%s' has an invalid '%s' file for account '%s':"
operator|+
literal|" Invalid config file %s in commit %s"
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid ()
specifier|public
name|void
name|pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|String
name|noEmail
init|=
literal|"no.email"
decl_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_PREFERRED_EMAIL
argument_list|,
name|noEmail
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"invalid account configuration"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"invalid preferred email '%s' for account '%s'"
argument_list|,
name|noEmail
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged ()
specifier|public
name|void
name|pushAccountConfigToUserBranchInvalidPreferredEmailButNotChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|name
argument_list|(
literal|"foo"
argument_list|)
operator|+
literal|"@example.com"
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|foo
operator|.
name|id
argument_list|)
decl_stmt|;
name|String
name|noEmail
init|=
literal|"no.email"
decl_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Preferred Email"
argument_list|,
name|foo
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|noEmail
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|userRef
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|foo
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|String
name|status
init|=
literal|"in vacation"
decl_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_STATUS
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|foo
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|userRef
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|noEmail
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|foo
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchIfPreferredEmailDoesNotExistAsExtId ()
specifier|public
name|void
name|pushAccountConfigToUserBranchIfPreferredEmailDoesNotExistAsExtId
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|name
argument_list|(
literal|"foo"
argument_list|)
operator|+
literal|"@example.com"
argument_list|,
literal|"Foo"
argument_list|)
decl_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|foo
operator|.
name|id
argument_list|)
decl_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|userRef
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|adminGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|foo
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|String
name|email
init|=
literal|"some.email@example.com"
decl_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setString
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_PREFERRED_EMAIL
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|foo
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|userRef
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|AccountInfo
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|foo
operator|.
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchIsRejectedIfOwnAccountIsDeactivated ()
specifier|public
name|void
name|pushAccountConfigToUserBranchIsRejectedIfOwnAccountIsDeactivated
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setBoolean
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_ACTIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"invalid account configuration"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"cannot deactivate own account"
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAccountConfigToUserBranchDeactivateOtherAccount ()
specifier|public
name|void
name|pushAccountConfigToUserBranchDeactivateOtherAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestAccount
name|foo
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|foo
operator|.
name|id
argument_list|)
decl_stmt|;
name|accountIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|userRef
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
name|adminGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|Config
name|ac
init|=
name|getAccountConfig
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ac
operator|.
name|setBoolean
argument_list|(
name|AccountProperties
operator|.
name|ACCOUNT
argument_list|,
literal|null
argument_list|,
name|AccountProperties
operator|.
name|KEY_ACTIVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
literal|"Update account config"
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|ac
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|userRef
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateUserBranch ()
specifier|public
name|void
name|cannotCreateUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|to
argument_list|(
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Not allowed to create user branch."
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createUserBranchWithAccessDatabaseCapability ()
specifier|public
name|void
name|createUserBranchWithAccessDatabaseCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|to
argument_list|(
name|userRef
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|cannotCreateNonUserBranchUnderRefsUsersWithAccessDatabaseCapability ()
specifier|public
name|void
name|cannotCreateNonUserBranchUnderRefsUsersWithAccessDatabaseCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"foo"
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|to
argument_list|(
name|userRef
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Not allowed to create non-user branch under refs/users/."
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createDefaultUserBranch ()
specifier|public
name|void
name|createDefaultUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|cannotDeleteUserBranch ()
specifier|public
name|void
name|cannotDeleteUserBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
name|Permission
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|PushResult
name|r
init|=
name|deleteRef
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|refUpdate
init|=
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|userRef
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Not allowed to delete user branch."
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteUserBranchWithAccessDatabaseCapability ()
specifier|public
name|void
name|deleteUserBranchWithAccessDatabaseCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
name|Permission
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|PushResult
name|r
init|=
name|deleteRef
argument_list|(
name|allUsersRepo
argument_list|,
name|userRef
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|refUpdate
init|=
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|userRef
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|byDefault
argument_list|(
name|admin
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGpgKey ()
specifier|public
name|void
name|addGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|key
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test1@example.com"
argument_list|)
expr_stmt|;
name|assertKeyMapContains
argument_list|(
name|key
argument_list|,
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reAddExistingGpgKey ()
specifier|public
name|void
name|reAddExistingGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test5@example.com"
argument_list|)
expr_stmt|;
name|TestKey
name|key
init|=
name|validKeyWithSecondUserId
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|key
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|PGPPublicKey
name|pk
init|=
name|key
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|GpgKeyInfo
name|info
init|=
name|addGpgKey
argument_list|(
name|armor
argument_list|(
name|pk
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|userIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertIteratorSize
argument_list|(
literal|2
argument_list|,
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
operator|.
name|getUserIDs
argument_list|()
argument_list|)
expr_stmt|;
name|pk
operator|=
name|PGPPublicKey
operator|.
name|removeCertification
argument_list|(
name|pk
argument_list|,
literal|"foo:myId"
argument_list|)
expr_stmt|;
name|info
operator|=
name|addGpgKeyNoReindex
argument_list|(
name|armor
argument_list|(
name|pk
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|userIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertIteratorSize
argument_list|(
literal|1
argument_list|,
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
operator|.
name|getUserIDs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addOtherUsersGpgKey_Conflict ()
specifier|public
name|void
name|addOtherUsersGpgKey_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Both users have a matching external ID for this key.
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test5@example.com"
argument_list|)
expr_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Add External ID"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"myId"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|TestKey
name|key
init|=
name|validKeyWithSecondUserId
argument_list|()
decl_stmt|;
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"GPG key already associated with another account"
argument_list|)
expr_stmt|;
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listGpgKeys ()
specifier|public
name|void
name|listGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestKey
argument_list|>
name|keys
init|=
name|allValidKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TestKey
name|key
range|:
name|keys
control|)
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
name|PushCertificateIdent
operator|.
name|parse
argument_list|(
name|key
operator|.
name|getFirstUserId
argument_list|()
argument_list|)
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|toAdd
operator|.
name|add
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|toAdd
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteGpgKey ()
specifier|public
name|void
name|deleteGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestKey
name|key
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|key
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
literal|"test1@example.com"
argument_list|)
expr_stmt|;
name|addGpgKey
argument_list|(
name|key
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addAndRemoveGpgKeys ()
specifier|public
name|void
name|addAndRemoveGpgKeys
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|TestKey
name|key
range|:
name|allValidKeys
argument_list|()
control|)
block|{
name|addExternalIdEmail
argument_list|(
name|admin
argument_list|,
name|PushCertificateIdent
operator|.
name|parse
argument_list|(
name|key
operator|.
name|getFirstUserId
argument_list|()
argument_list|)
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestKey
name|key1
init|=
name|validKeyWithoutExpiration
argument_list|()
decl_stmt|;
name|TestKey
name|key2
init|=
name|validKeyWithExpiration
argument_list|()
decl_stmt|;
name|TestKey
name|key5
init|=
name|validKeyWithSecondUserId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|infos
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key1
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|,
name|key2
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|key5
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|infos
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|,
name|key2
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeys
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|infos
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key5
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infos
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|,
name|key5
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyMapContains
argument_list|(
name|key5
argument_list|,
name|infos
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infos
operator|.
name|get
argument_list|(
name|key1
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
operator|.
name|key
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertKeys
argument_list|(
name|key2
argument_list|,
name|key5
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cannot both add and delete key: "
operator|+
name|keyToString
argument_list|(
name|key2
operator|.
name|getPublicKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|key2
operator|.
name|getPublicKeyArmored
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|key2
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addMalformedGpgKey ()
specifier|public
name|void
name|addMalformedGpgKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|key
init|=
literal|"-----BEGIN PGP PUBLIC KEY BLOCK-----\n\ntest\n-----END PGP PUBLIC KEY BLOCK-----"
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Failed to parse GPG keys"
argument_list|)
expr_stmt|;
name|addGpgKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseSsh
DECL|method|sshKeys ()
specifier|public
name|void
name|sshKeys
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The test account should initially have exactly one ssh key
name|List
argument_list|<
name|SshKeyInfo
argument_list|>
name|info
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|SshKeyInfo
name|key
init|=
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|sshKeys
operator|.
name|getKeyPair
argument_list|(
name|admin
argument_list|)
decl_stmt|;
name|String
name|inital
init|=
name|TestSshKeys
operator|.
name|publicKey
argument_list|(
name|keyPair
argument_list|,
name|admin
operator|.
name|email
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|key
operator|.
name|sshPublicKey
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|inital
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
comment|// Add a new key
name|String
name|newKey
init|=
name|TestSshKeys
operator|.
name|publicKey
argument_list|(
name|TestSshKeys
operator|.
name|genSshKey
argument_list|()
argument_list|,
name|admin
operator|.
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addSshKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// Add an existing key (the request succeeds, but the key isn't added again)
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addSshKey
argument_list|(
name|inital
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertNoReindex
argument_list|()
expr_stmt|;
comment|// Add another new key
name|String
name|newKey2
init|=
name|TestSshKeys
operator|.
name|publicKey
argument_list|(
name|TestSshKeys
operator|.
name|genSshKey
argument_list|()
argument_list|,
name|admin
operator|.
name|email
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|addSshKey
argument_list|(
name|newKey2
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertSequenceNumbers
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// Delete second key
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteSshKey
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// Mark first key as invalid
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|valid
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|authorizedKeys
operator|.
name|markKeyInvalid
argument_list|(
name|admin
operator|.
name|id
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listSshKeys
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|valid
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
comment|// reindex is tested by {@link AbstractQueryAccountsTest#reindex}
annotation|@
name|Test
DECL|method|reindexPermissions ()
specifier|public
name|void
name|reindexPermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// admin can reindex any account
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|username
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// user can reindex own account
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|index
argument_list|()
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// user cannot reindex any account
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"modify account not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|username
argument_list|)
operator|.
name|index
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkConsistency ()
specifier|public
name|void
name|checkConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
comment|// Create an account with a preferred email.
name|String
name|username
init|=
name|name
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|username
operator|+
literal|"@example.com"
decl_stmt|;
name|TestAccount
name|account
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|username
argument_list|,
name|email
argument_list|,
literal|"Foo Bar"
argument_list|)
decl_stmt|;
name|ConsistencyCheckInput
name|input
init|=
operator|new
name|ConsistencyCheckInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|checkAccounts
operator|=
operator|new
name|CheckAccountsInput
argument_list|()
expr_stmt|;
name|ConsistencyCheckInfo
name|checkInfo
init|=
name|gApi
operator|.
name|config
argument_list|()
operator|.
name|server
argument_list|()
operator|.
name|checkConsistency
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|checkInfo
operator|.
name|checkAccountsResult
operator|.
name|problems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|expectedProblems
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Delete the external ID for the preferred email. This makes the account inconsistent since it
comment|// now doesn't have an external ID for its preferred email.
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Delete External ID"
argument_list|,
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|u
lambda|->
name|u
operator|.
name|deleteExternalId
argument_list|(
name|ExternalId
operator|.
name|createEmail
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
operator|new
name|ConsistencyProblemInfo
argument_list|(
name|ConsistencyProblemInfo
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
literal|"Account '"
operator|+
name|account
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"' has no external ID for its preferred email '"
operator|+
name|email
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
name|checkInfo
operator|=
name|gApi
operator|.
name|config
argument_list|()
operator|.
name|server
argument_list|()
operator|.
name|checkConsistency
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkInfo
operator|.
name|checkAccountsResult
operator|.
name|problems
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedProblems
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkInfo
operator|.
name|checkAccountsResult
operator|.
name|problems
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedProblems
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|internalQueryFindActiveAndInactiveAccounts ()
specifier|public
name|void
name|internalQueryFindActiveAndInactiveAccounts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|name
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|byDefault
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|TestAccount
name|foo1
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
operator|+
literal|"-1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo1
operator|.
name|username
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|TestAccount
name|foo2
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|name
operator|+
literal|"-2"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo2
operator|.
name|username
argument_list|)
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|foo2
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|byDefault
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkMetaId ()
specifier|public
name|void
name|checkMetaId
parameter_list|()
throws|throws
name|Exception
block|{
comment|// metaId is set when account is loaded
name|assertThat
argument_list|(
name|accounts
operator|.
name|get
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|getMetaId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getMetaId
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// metaId is set when account is created
name|AccountsUpdate
name|au
init|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|AccountState
name|accountState
init|=
name|au
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
block|{}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|getAccount
argument_list|()
operator|.
name|getMetaId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getMetaId
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
comment|// metaId is set when account is updated
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|updatedAccountState
init|=
name|au
operator|.
name|update
argument_list|(
literal|"Set Full Name"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setFullName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedAccountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|Account
name|updatedAccount
init|=
name|updatedAccountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|getAccount
argument_list|()
operator|.
name|getMetaId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|updatedAccount
operator|.
name|getMetaId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
operator|.
name|getMetaId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getMetaId
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newEmailInput (String email, boolean noConfirmation)
specifier|private
name|EmailInput
name|newEmailInput
parameter_list|(
name|String
name|email
parameter_list|,
name|boolean
name|noConfirmation
parameter_list|)
block|{
name|EmailInput
name|input
init|=
operator|new
name|EmailInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|email
operator|=
name|email
expr_stmt|;
name|input
operator|.
name|noConfirmation
operator|=
name|noConfirmation
expr_stmt|;
return|return
name|input
return|;
block|}
DECL|method|newEmailInput (String email)
specifier|private
name|EmailInput
name|newEmailInput
parameter_list|(
name|String
name|email
parameter_list|)
block|{
return|return
name|newEmailInput
argument_list|(
name|email
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getMetaId (Account.Id accountId)
specifier|private
name|String
name|getMetaId
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|;
name|ObjectReader
name|or
operator|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|allGroupsForAnAdminAccountCanBeRetrieved ()
specifier|public
name|void
name|allGroupsForAnAdminAccountCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|groups
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|username
argument_list|)
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groups
argument_list|)
operator|.
name|comparingElementsUsing
argument_list|(
name|getGroupToNameCorrespondence
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Anonymous Users"
argument_list|,
literal|"Registered Users"
argument_list|,
literal|"Administrators"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createUserWithValidUsername ()
specifier|public
name|void
name|createUserWithValidUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"user@domain"
argument_list|,
literal|"user-name"
argument_list|,
literal|"user_name"
argument_list|,
literal|"1234"
argument_list|,
literal|"user1234"
argument_list|,
literal|"1234@domain"
argument_list|,
literal|"user!+alias{*}#$%&â^=~|@domain"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createUserWithInvalidUsername ()
specifier|public
name|void
name|createUserWithInvalidUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|invalidNames
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"@"
argument_list|,
literal|"@foo"
argument_list|,
literal|"-"
argument_list|,
literal|"-foo"
argument_list|,
literal|"_"
argument_list|,
literal|"_foo"
argument_list|,
literal|"!"
argument_list|,
literal|"+"
argument_list|,
literal|"{"
argument_list|,
literal|"}"
argument_list|,
literal|"*"
argument_list|,
literal|"%"
argument_list|,
literal|"#"
argument_list|,
literal|"$"
argument_list|,
literal|"&"
argument_list|,
literal|"â"
argument_list|,
literal|"^"
argument_list|,
literal|"="
argument_list|,
literal|"~"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|invalidNames
control|)
block|{
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected BadRequestException for username [%s]"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid username '%s'"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|allGroupsForAUserAccountCanBeRetrieved ()
specifier|public
name|void
name|allGroupsForAUserAccountCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
name|name
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|username
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupID
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"group"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupID
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|group
argument_list|)
operator|.
name|addMembers
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GroupInfo
argument_list|>
name|allGroups
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|username
argument_list|)
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|allGroups
argument_list|)
operator|.
name|comparingElementsUsing
argument_list|(
name|getGroupToNameCorrespondence
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Anonymous Users"
argument_list|,
literal|"Registered Users"
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultPermissionsOnUserBranches ()
specifier|public
name|void
name|defaultPermissionsOnUserBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userRef
init|=
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
decl_stmt|;
name|assertPermissions
argument_list|(
name|allUsers
argument_list|,
name|groupRef
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|,
name|userRef
argument_list|,
literal|true
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|)
expr_stmt|;
name|assertLabelPermission
argument_list|(
name|allUsers
argument_list|,
name|groupRef
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|,
name|userRef
argument_list|,
literal|true
argument_list|,
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPermissions
argument_list|(
name|allUsers
argument_list|,
name|adminGroupRef
argument_list|()
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|,
literal|true
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retryOnLockFailure ()
specifier|public
name|void
name|retryOnLockFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|status
init|=
literal|"happy"
decl_stmt|;
name|String
name|fullName
init|=
literal|"Foo"
decl_stmt|;
name|AtomicBoolean
name|doneBgUpdate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountsUpdate
name|update
init|=
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitReferenceUpdated
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|allUsers
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
operator|new
name|RetryHelper
argument_list|(
name|cfg
argument_list|,
name|retryMetrics
argument_list|,
literal|null
argument_list|,
name|r
lambda|->
name|r
operator|.
name|withBlockStrategy
argument_list|(
name|noSleepBlockStrategy
argument_list|)
argument_list|)
argument_list|,
name|extIdNotesFactory
argument_list|,
name|ident
argument_list|,
name|ident
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
operator|!
name|doneBgUpdate
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Status"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
decl||
name|OrmException
name|e
parameter_list|)
block|{
comment|// Ignore, the successful update of the account is asserted later
block|}
block|}
block|}
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doneBgUpdate
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|AccountInfo
name|accountInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|name
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|updatedAccountState
init|=
name|update
operator|.
name|update
argument_list|(
literal|"Set Full Name"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setFullName
argument_list|(
name|fullName
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doneBgUpdate
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|Account
name|updatedAccount
init|=
name|updatedAccountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
operator|.
name|getFullName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
name|accountInfo
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|failAfterRetryerGivesUp ()
specifier|public
name|void
name|failAfterRetryerGivesUp
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|status
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|String
name|fullName
init|=
literal|"Foo"
decl_stmt|;
name|AtomicInteger
name|bgCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountsUpdate
name|update
init|=
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitReferenceUpdated
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|allUsers
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
operator|new
name|RetryHelper
argument_list|(
name|cfg
argument_list|,
name|retryMetrics
argument_list|,
literal|null
argument_list|,
name|r
lambda|->
name|r
operator|.
name|withStopStrategy
argument_list|(
name|StopStrategies
operator|.
name|stopAfterAttempt
argument_list|(
name|status
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withBlockStrategy
argument_list|(
name|noSleepBlockStrategy
argument_list|)
argument_list|)
argument_list|,
name|extIdNotesFactory
argument_list|,
name|ident
argument_list|,
name|ident
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Status"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setStatus
argument_list|(
name|status
operator|.
name|get
argument_list|(
name|bgCounter
operator|.
name|getAndAdd
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
decl||
name|OrmException
name|e
parameter_list|)
block|{
comment|// Ignore, the expected exception is asserted later
block|}
block|}
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bgCounter
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|AccountInfo
name|accountInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|status
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|name
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|fullName
argument_list|)
expr_stmt|;
try|try
block|{
name|update
operator|.
name|update
argument_list|(
literal|"Set Full Name"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setFullName
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected LockFailureException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockFailureException
name|e
parameter_list|)
block|{
comment|// Ignore, expected
block|}
name|assertThat
argument_list|(
name|bgCounter
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|status
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Account
name|updatedAccount
init|=
name|accounts
operator|.
name|get
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
operator|.
name|getFullName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|accountInfo
operator|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accountInfo
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|atomicReadMofifyWrite ()
specifier|public
name|void
name|atomicReadMofifyWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"A-1"
argument_list|)
expr_stmt|;
name|AtomicInteger
name|bgCounterA1
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|bgCounterA2
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountsUpdate
name|update
init|=
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitReferenceUpdated
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|allUsers
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
operator|new
name|RetryHelper
argument_list|(
name|cfg
argument_list|,
name|retryMetrics
argument_list|,
literal|null
argument_list|,
name|r
lambda|->
name|r
operator|.
name|withBlockStrategy
argument_list|(
name|noSleepBlockStrategy
argument_list|)
argument_list|)
argument_list|,
name|extIdNotesFactory
argument_list|,
name|ident
argument_list|,
name|ident
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Status"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setStatus
argument_list|(
literal|"A-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
decl||
name|OrmException
name|e
parameter_list|)
block|{
comment|// Ignore, the expected exception is asserted later
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bgCounterA1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bgCounterA2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"A-1"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|updatedAccountState
init|=
name|update
operator|.
name|update
argument_list|(
literal|"Set Status"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
if|if
condition|(
literal|"A-1"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|bgCounterA1
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|u
operator|.
name|setStatus
argument_list|(
literal|"B-1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"A-2"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|bgCounterA2
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|u
operator|.
name|setStatus
argument_list|(
literal|"B-2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bgCounterA1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bgCounterA2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"B-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accounts
operator|.
name|get
argument_list|(
name|admin
operator|.
name|id
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"B-2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"B-2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|atomicReadMofifyWriteExternalIds ()
specifier|public
name|void
name|atomicReadMofifyWriteExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
name|extIdA1
init|=
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"A-1"
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|extIdA1
argument_list|)
argument_list|)
expr_stmt|;
name|AtomicInteger
name|bgCounterA1
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|bgCounterA2
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|ExternalId
name|extIdA2
init|=
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"A-2"
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|AccountsUpdate
name|update
init|=
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitReferenceUpdated
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|allUsers
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
operator|new
name|RetryHelper
argument_list|(
name|cfg
argument_list|,
name|retryMetrics
argument_list|,
literal|null
argument_list|,
name|r
lambda|->
name|r
operator|.
name|withBlockStrategy
argument_list|(
name|noSleepBlockStrategy
argument_list|)
argument_list|)
argument_list|,
name|extIdNotesFactory
argument_list|,
name|ident
argument_list|,
name|ident
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Update External ID"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|replaceExternalId
argument_list|(
name|extIdA1
argument_list|,
name|extIdA2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
decl||
name|OrmException
name|e
parameter_list|)
block|{
comment|// Ignore, the expected exception is asserted later
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bgCounterA1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bgCounterA2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|i
operator|.
name|identity
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|extIdA1
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ExternalId
name|extIdB1
init|=
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"B-1"
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|ExternalId
name|extIdB2
init|=
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"B-2"
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|updatedAccount
init|=
name|update
operator|.
name|update
argument_list|(
literal|"Update External ID"
argument_list|,
name|accountId
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|a
operator|.
name|getExternalIds
argument_list|()
operator|.
name|contains
argument_list|(
name|extIdA1
argument_list|)
condition|)
block|{
name|bgCounterA1
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|u
operator|.
name|replaceExternalId
argument_list|(
name|extIdA1
argument_list|,
name|extIdB1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getExternalIds
argument_list|()
operator|.
name|contains
argument_list|(
name|extIdA2
argument_list|)
condition|)
block|{
name|bgCounterA2
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|u
operator|.
name|replaceExternalId
argument_list|(
name|extIdA2
argument_list|,
name|extIdB2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bgCounterA1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bgCounterA2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updatedAccount
operator|.
name|get
argument_list|()
operator|.
name|getExternalIds
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|extIdB2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getExternalIds
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|extIdB2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|i
operator|.
name|identity
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|extIdB2
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stalenessChecker ()
specifier|public
name|void
name|stalenessChecker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Newly created account is not stale.
name|AccountInfo
name|accountInfo
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|accountInfo
operator|.
name|_accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|accountId
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Manually updating the user ref makes the index document stale.
name|String
name|userRef
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|PersonIdent
name|ident
init|=
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|commit
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setMessage
argument_list|(
name|commit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectId
name|emptyCommit
init|=
name|oi
operator|.
name|insert
argument_list|(
name|cb
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|userRef
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|commit
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|emptyCommit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|forceUpdate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertStaleAccountAndReindex
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
comment|// Manually inserting/updating/deleting an external ID of the user makes the index document
comment|// stale.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|ExternalIdNotes
name|extIdNotes
init|=
name|ExternalIdNotes
operator|.
name|loadNoCacheUpdate
argument_list|(
name|allUsers
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|key
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|extIdNotes
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|update
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|extIdNotes
operator|.
name|commit
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|assertStaleAccountAndReindex
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|extIdNotes
operator|.
name|upsert
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|key
argument_list|,
name|accountId
argument_list|,
literal|"foo@example.com"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|update
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|extIdNotes
operator|.
name|commit
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|assertStaleAccountAndReindex
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|extIdNotes
operator|.
name|delete
argument_list|(
name|accountId
argument_list|,
name|key
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|update
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|extIdNotes
operator|.
name|commit
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
name|assertStaleAccountAndReindex
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
comment|// Manually delete account
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|userRef
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|userRef
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|commit
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertStaleAccountAndReindex
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStaleAccountAndReindex (Account.Id accountId)
specifier|private
name|void
name|assertStaleAccountAndReindex
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Evict account from cache to be sure that we use the index state for staleness checks. This
comment|// has to happen directly on the accounts cache because AccountCacheImpl triggers a reindex for
comment|// the account.
name|accountsCache
operator|.
name|invalidate
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|accountId
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Reindex fixes staleness
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|accountId
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAllDraftComments ()
specifier|public
name|void
name|deleteAllDraftComments
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|project2
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr2
init|=
name|cloneProject
argument_list|(
name|project2
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|(
name|tr2
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"Change in project2"
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"content2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Create 2 drafts each on both changes for user.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r1
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft 1a"
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r1
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft 1b"
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r2
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft 2a"
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r2
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft 2b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Create 1 draft on first change for admin.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r1
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"admin draft"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Delete user's draft comments; leave admin's alone.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DeletedDraftCommentInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteDraftComments
argument_list|(
operator|new
name|DeleteDraftCommentsInput
argument_list|()
argument_list|)
decl_stmt|;
comment|// Results are ordered according to the change search, most recently updated first.
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|DeletedDraftCommentInfo
name|del2
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|del2
operator|.
name|change
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|del2
operator|.
name|deleted
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"draft 2a"
argument_list|,
literal|"draft 2b"
argument_list|)
expr_stmt|;
name|DeletedDraftCommentInfo
name|del1
init|=
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|del1
operator|.
name|change
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|del1
operator|.
name|deleted
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"draft 1a"
argument_list|,
literal|"draft 1b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpDrafts
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteDraftCommentsByQuery ()
specifier|public
name|void
name|deleteDraftCommentsByQuery
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|createDraft
argument_list|(
name|r1
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft a"
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r2
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DeletedDraftCommentInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteDraftComments
argument_list|(
operator|new
name|DeleteDraftCommentsInput
argument_list|(
literal|"change:"
operator|+
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|change
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|deleted
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"draft a"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpDrafts
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteOtherUsersDraftCommentsDisallowed ()
specifier|public
name|void
name|deleteOtherUsersDraftCommentsDisallowed
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft"
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|deleteDraftComments
argument_list|(
operator|new
name|DeleteDraftCommentsInput
argument_list|()
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected AuthException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot delete drafts of other user"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanUpDrafts
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteDraftCommentsSkipsInvisibleChanges ()
specifier|public
name|void
name|deleteDraftCommentsSkipsInvisibleChanges
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"secret"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|(
literal|"refs/for/secret"
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r1
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft a"
argument_list|)
expr_stmt|;
name|createDraft
argument_list|(
name|r2
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"draft b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|project
argument_list|,
literal|"refs/heads/secret"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DeletedDraftCommentInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteDraftComments
argument_list|(
operator|new
name|DeleteDraftCommentsInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|change
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|deleted
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"draft a"
argument_list|)
expr_stmt|;
name|removePermission
argument_list|(
name|project
argument_list|,
literal|"refs/heads/secret"
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Draft still exists since change wasn't visible when drafts where deleted.
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|draftsAsList
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUpDrafts
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createDraft (PushOneCommit.Result r, String path, String message)
specifier|private
name|void
name|createDraft
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|DraftInput
name|in
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|in
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUpDrafts ()
specifier|private
name|void
name|cleanUpDrafts
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|TestAccount
name|testAccount
range|:
name|accountCreator
operator|.
name|getAll
argument_list|()
control|)
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|testAccount
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeInfo
name|changeInfo
range|:
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
literal|"has:draft"
argument_list|)
operator|.
name|get
argument_list|()
control|)
block|{
for|for
control|(
name|CommentInfo
name|c
range|:
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|id
argument_list|)
operator|.
name|drafts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|List
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
control|)
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|id
argument_list|)
operator|.
name|revision
argument_list|(
name|c
operator|.
name|patchSet
argument_list|)
operator|.
name|draft
argument_list|(
name|c
operator|.
name|id
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getGroupToNameCorrespondence ()
specifier|private
specifier|static
name|Correspondence
argument_list|<
name|GroupInfo
argument_list|,
name|String
argument_list|>
name|getGroupToNameCorrespondence
parameter_list|()
block|{
return|return
name|Correspondence
operator|.
name|from
argument_list|(
operator|new
name|BinaryPredicate
argument_list|<
name|GroupInfo
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|GroupInfo
name|actualGroup
parameter_list|,
name|String
name|expectedName
parameter_list|)
block|{
name|String
name|groupName
init|=
name|actualGroup
operator|==
literal|null
condition|?
literal|null
else|:
name|actualGroup
operator|.
name|name
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|groupName
argument_list|,
name|expectedName
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|"has name"
argument_list|)
return|;
block|}
DECL|method|assertSequenceNumbers (List<SshKeyInfo> sshKeys)
specifier|private
name|void
name|assertSequenceNumbers
parameter_list|(
name|List
argument_list|<
name|SshKeyInfo
argument_list|>
name|sshKeys
parameter_list|)
block|{
name|int
name|seq
init|=
literal|1
decl_stmt|;
for|for
control|(
name|SshKeyInfo
name|key
range|:
name|sshKeys
control|)
block|{
name|assertThat
argument_list|(
name|key
operator|.
name|seq
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|seq
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOnlyKeyFromStore (TestKey key)
specifier|private
name|PGPPublicKey
name|getOnlyKeyFromStore
parameter_list|(
name|TestKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|PublicKeyStore
name|store
init|=
name|publicKeyStoreProvider
operator|.
name|get
argument_list|()
init|)
block|{
name|Iterable
argument_list|<
name|PGPPublicKeyRing
argument_list|>
name|keys
init|=
name|store
operator|.
name|get
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keys
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|keys
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
block|}
DECL|method|armor (PGPPublicKey key)
specifier|private
specifier|static
name|String
name|armor
parameter_list|(
name|PGPPublicKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
try|try
init|(
name|ArmoredOutputStream
name|aout
init|=
operator|new
name|ArmoredOutputStream
argument_list|(
name|out
argument_list|)
init|)
block|{
name|key
operator|.
name|encode
argument_list|(
name|aout
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|assertIteratorSize (int size, Iterator<?> it)
specifier|private
specifier|static
name|void
name|assertIteratorSize
parameter_list|(
name|int
name|size
parameter_list|,
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|lst
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lst
argument_list|)
operator|.
name|hasSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeyMapContains (TestKey expected, Map<String, GpgKeyInfo> actualMap)
specifier|private
specifier|static
name|void
name|assertKeyMapContains
parameter_list|(
name|TestKey
name|expected
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|actualMap
parameter_list|)
block|{
name|GpgKeyInfo
name|actual
init|=
name|actualMap
operator|.
name|get
argument_list|(
name|expected
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|id
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|actual
operator|.
name|id
operator|=
name|expected
operator|.
name|getKeyIdString
argument_list|()
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeys (TestKey... expectedKeys)
specifier|private
name|void
name|assertKeys
parameter_list|(
name|TestKey
modifier|...
name|expectedKeys
parameter_list|)
throws|throws
name|Exception
block|{
name|assertKeys
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeys (Iterable<TestKey> expectedKeys)
specifier|private
name|void
name|assertKeys
parameter_list|(
name|Iterable
argument_list|<
name|TestKey
argument_list|>
name|expectedKeys
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check via API.
name|FluentIterable
argument_list|<
name|TestKey
argument_list|>
name|expected
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|expectedKeys
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|keyMap
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|listGpgKeys
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|keyMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"keys returned by listGpgKeys()"
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
operator|.
name|transform
argument_list|(
name|TestKey
operator|::
name|getKeyIdString
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TestKey
name|key
range|:
name|expected
control|)
block|{
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|key
operator|.
name|getKeyIdString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyEquals
argument_list|(
name|key
argument_list|,
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|gpgKey
argument_list|(
name|Fingerprint
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertKeyMapContains
argument_list|(
name|key
argument_list|,
name|keyMap
argument_list|)
expr_stmt|;
block|}
comment|// Check raw external IDs.
name|Account
operator|.
name|Id
name|currAccountId
init|=
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|expectedFps
init|=
name|expected
operator|.
name|transform
argument_list|(
name|k
lambda|->
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|encode
argument_list|(
name|k
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|actualFps
init|=
name|externalIds
operator|.
name|byAccount
argument_list|(
name|currAccountId
argument_list|,
name|SCHEME_GPGKEY
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualFps
argument_list|)
operator|.
name|named
argument_list|(
literal|"external IDs in database"
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedFps
argument_list|)
expr_stmt|;
comment|// Check raw stored keys.
for|for
control|(
name|TestKey
name|key
range|:
name|expected
control|)
block|{
name|getOnlyKeyFromStore
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertKeyEquals (TestKey expected, GpgKeyInfo actual)
specifier|private
specifier|static
name|void
name|assertKeyEquals
parameter_list|(
name|TestKey
name|expected
parameter_list|,
name|GpgKeyInfo
name|actual
parameter_list|)
block|{
name|String
name|id
init|=
name|expected
operator|.
name|getKeyIdString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|id
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|fingerprint
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Fingerprint
operator|.
name|toString
argument_list|(
name|expected
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getFingerprint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|userIds
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|expected
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getUserIDs
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|userIds
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|userIds
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|actual
operator|.
name|key
decl_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-----BEGIN PGP PUBLIC KEY BLOCK-----\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
argument_list|)
operator|.
name|named
argument_list|(
name|id
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"-----END PGP PUBLIC KEY BLOCK-----\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|GpgKeyInfo
operator|.
name|Status
operator|.
name|TRUSTED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|problems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|addExternalIdEmail (TestAccount account, String email)
specifier|private
name|void
name|addExternalIdEmail
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
name|requireNonNull
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Add Email"
argument_list|,
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|name
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|email
argument_list|,
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addGpgKey (String armored)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|addGpgKey
parameter_list|(
name|String
name|armored
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|gpgKeys
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|armored
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|accountIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|gpgKeys
return|;
block|}
DECL|method|addGpgKeyNoReindex (String armored)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GpgKeyInfo
argument_list|>
name|addGpgKeyNoReindex
parameter_list|(
name|String
name|armored
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|putGpgKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|armored
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertUser (AccountInfo info, TestAccount account)
specifier|private
name|void
name|assertUser
parameter_list|(
name|AccountInfo
name|info
parameter_list|,
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
name|assertUser
argument_list|(
name|info
argument_list|,
name|account
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUser (AccountInfo info, TestAccount account, @Nullable String expectedStatus)
specifier|private
name|void
name|assertUser
parameter_list|(
name|AccountInfo
name|info
parameter_list|,
name|TestAccount
name|account
parameter_list|,
annotation|@
name|Nullable
name|String
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|account
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|account
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|account
operator|.
name|username
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedStatus
argument_list|)
expr_stmt|;
block|}
DECL|method|getEmails ()
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getEmails
parameter_list|()
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getEmails
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|email
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertEmail (Set<Account.Id> accounts, TestAccount expectedAccount)
specifier|private
name|void
name|assertEmail
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|,
name|TestAccount
name|expectedAccount
parameter_list|)
block|{
name|assertThat
argument_list|(
name|accounts
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|accounts
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAccount
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAccountConfig (TestRepository<?> allUsersRepo)
specifier|private
name|Config
name|getAccountConfig
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|allUsersRepo
parameter_list|)
throws|throws
name|Exception
block|{
name|Config
name|ac
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
try|try
init|(
name|TreeWalk
name|tw
init|=
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|AccountProperties
operator|.
name|ACCOUNT_CONFIG
argument_list|,
name|getHead
argument_list|(
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
literal|"HEAD"
argument_list|)
operator|.
name|getTree
argument_list|()
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|tw
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ac
operator|.
name|fromText
argument_list|(
operator|new
name|String
argument_list|(
name|allUsersRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ac
return|;
block|}
comment|/** Checks if an account is indexed the correct number of times. */
DECL|class|AccountIndexedCounter
specifier|private
specifier|static
class|class
name|AccountIndexedCounter
implements|implements
name|AccountIndexedListener
block|{
DECL|field|countsByAccount
specifier|private
specifier|final
name|AtomicLongMap
argument_list|<
name|Integer
argument_list|>
name|countsByAccount
init|=
name|AtomicLongMap
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onAccountIndexed (int id)
specifier|public
name|void
name|onAccountIndexed
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|countsByAccount
operator|.
name|incrementAndGet
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|countsByAccount
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getCount (Account.Id accountId)
name|long
name|getCount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
return|return
name|countsByAccount
operator|.
name|get
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|assertReindexOf (TestAccount testAccount)
name|void
name|assertReindexOf
parameter_list|(
name|TestAccount
name|testAccount
parameter_list|)
block|{
name|assertReindexOf
argument_list|(
name|testAccount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReindexOf (AccountInfo accountInfo)
name|void
name|assertReindexOf
parameter_list|(
name|AccountInfo
name|accountInfo
parameter_list|)
block|{
name|assertReindexOf
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|accountInfo
operator|.
name|_accountId
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReindexOf (TestAccount testAccount, int expectedCount)
name|void
name|assertReindexOf
parameter_list|(
name|TestAccount
name|testAccount
parameter_list|,
name|int
name|expectedCount
parameter_list|)
block|{
name|assertThat
argument_list|(
name|getCount
argument_list|(
name|testAccount
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|countsByAccount
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|assertReindexOf (Account.Id accountId, int expectedCount)
name|void
name|assertReindexOf
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|int
name|expectedCount
parameter_list|)
block|{
name|assertThat
argument_list|(
name|getCount
argument_list|(
name|accountId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedCount
argument_list|)
expr_stmt|;
name|countsByAccount
operator|.
name|remove
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoReindex ()
name|void
name|assertNoReindex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|countsByAccount
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RefUpdateCounter
specifier|private
specifier|static
class|class
name|RefUpdateCounter
implements|implements
name|GitReferenceUpdatedListener
block|{
DECL|field|countsByProjectRefs
specifier|private
specifier|final
name|AtomicLongMap
argument_list|<
name|String
argument_list|>
name|countsByProjectRefs
init|=
name|AtomicLongMap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|method|projectRef (Project.NameKey project, String ref)
specifier|static
name|String
name|projectRef
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
return|return
name|projectRef
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|ref
argument_list|)
return|;
block|}
DECL|method|projectRef (String project, String ref)
specifier|static
name|String
name|projectRef
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
return|return
name|project
operator|+
literal|":"
operator|+
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|onGitReferenceUpdated (Event event)
specifier|public
name|void
name|onGitReferenceUpdated
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|countsByProjectRefs
operator|.
name|incrementAndGet
argument_list|(
name|projectRef
argument_list|(
name|event
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|event
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|countsByProjectRefs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getCount (String projectRef)
name|long
name|getCount
parameter_list|(
name|String
name|projectRef
parameter_list|)
block|{
return|return
name|countsByProjectRefs
operator|.
name|get
argument_list|(
name|projectRef
argument_list|)
return|;
block|}
DECL|method|assertRefUpdateFor (String... projectRefs)
name|void
name|assertRefUpdateFor
parameter_list|(
name|String
modifier|...
name|projectRefs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedRefUpdateCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|projectRef
range|:
name|projectRefs
control|)
block|{
name|expectedRefUpdateCounts
operator|.
name|put
argument_list|(
name|projectRef
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertRefUpdateFor
argument_list|(
name|expectedRefUpdateCounts
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRefUpdateFor (Map<String, Integer> expectedProjectRefUpdateCounts)
name|void
name|assertRefUpdateFor
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedProjectRefUpdateCounts
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|expectedProjectRefUpdateCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|getCount
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|countsByProjectRefs
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedProjectRefUpdateCounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

