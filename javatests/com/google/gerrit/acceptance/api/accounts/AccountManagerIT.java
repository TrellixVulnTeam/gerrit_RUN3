begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.accounts
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|accounts
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|OptionalSubject
operator|.
name|optionals
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AccountManagerIT
specifier|public
class|class
name|AccountManagerIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|accountManager
annotation|@
name|Inject
specifier|private
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|externalIds
annotation|@
name|Inject
specifier|private
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|seq
annotation|@
name|Inject
specifier|private
name|Sequences
name|seq
decl_stmt|;
DECL|field|accountsUpdate
annotation|@
name|Inject
annotation|@
name|ServerInitiated
specifier|private
name|AccountsUpdate
name|accountsUpdate
decl_stmt|;
DECL|field|extIdNotesFactory
annotation|@
name|Inject
specifier|private
name|ExternalIdNotes
operator|.
name|Factory
name|extIdNotesFactory
decl_stmt|;
annotation|@
name|Test
DECL|method|authenticateNewAccountWithEmail ()
specifier|public
name|void
name|authenticateNewAccountWithEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|mailtoExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_MAILTO
argument_list|,
name|email
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|mailtoExtIdKey
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForNewAccount
argument_list|(
name|authResult
argument_list|,
name|mailtoExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalId
argument_list|(
name|mailtoExtIdKey
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateNewAccountWithUsername ()
specifier|public
name|void
name|authenticateNewAccountWithUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|usernameExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_USERNAME
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|gerritExtIdKey
argument_list|,
name|usernameExtIdKey
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForNewAccount
argument_list|(
name|authResult
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalIdsWithoutEmail
argument_list|(
name|gerritExtIdKey
argument_list|,
name|usernameExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateNewAccountWithUsernameAndEmail ()
specifier|public
name|void
name|authenticateNewAccountWithUsernameAndEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|usernameExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_USERNAME
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|gerritExtIdKey
argument_list|,
name|usernameExtIdKey
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|who
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForNewAccount
argument_list|(
name|authResult
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalId
argument_list|(
name|gerritExtIdKey
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|assertExternalIdsWithoutEmail
argument_list|(
name|usernameExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateNewAccountWithExternalUser ()
specifier|public
name|void
name|authenticateNewAccountWithExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|usernameExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_USERNAME
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|externalExtIdKey
argument_list|,
name|usernameExtIdKey
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forExternalUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForNewAccount
argument_list|(
name|authResult
argument_list|,
name|externalExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalIdsWithoutEmail
argument_list|(
name|externalExtIdKey
argument_list|,
name|usernameExtIdKey
argument_list|)
expr_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|gerritExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateNewAccountWithExternalUserAndEmail ()
specifier|public
name|void
name|authenticateNewAccountWithExternalUserAndEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|usernameExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_USERNAME
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|externalExtIdKey
argument_list|,
name|usernameExtIdKey
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forExternalUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|who
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForNewAccount
argument_list|(
name|authResult
argument_list|,
name|externalExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalId
argument_list|(
name|externalExtIdKey
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|assertExternalIdsWithoutEmail
argument_list|(
name|usernameExtIdKey
argument_list|)
expr_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|gerritExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateWithEmail ()
specifier|public
name|void
name|authenticateWithEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|mailtoExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_MAILTO
argument_list|,
name|email
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|mailtoExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|mailtoExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateWithUsername ()
specifier|public
name|void
name|authenticateWithUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateWithExternalUser ()
specifier|public
name|void
name|authenticateWithExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forExternalUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|externalExtIdKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateWithUsernameAndUpdateEmail ()
specifier|public
name|void
name|authenticateWithUsernameAndUpdateEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|String
name|newEmail
init|=
literal|"bar@example.com"
decl_stmt|;
name|who
operator|.
name|setEmailAddress
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|gerritExtId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|gerritExtIdKey
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gerritExtId
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gerritExtId
operator|.
name|get
argument_list|()
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authenticateWithUsernameAndUpdateDisplayName ()
specifier|public
name|void
name|authenticateWithUsernameAndUpdateDisplayName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setFullName
argument_list|(
literal|"Initial Name"
argument_list|)
operator|.
name|setPreferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|String
name|newName
init|=
literal|"Updated Name"
decl_stmt|;
name|who
operator|.
name|setDisplayName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAuthenticateWithOrphanedExtId ()
specifier|public
name|void
name|cannotAuthenticateWithOrphanedExtId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|gerritExtIdKey
argument_list|)
expr_stmt|;
comment|// Create orphaned SCHEME_GERRIT external ID.
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
name|gerritExtId
init|=
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|MetaDataUpdate
name|md
operator|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|ExternalIdNotes
name|extIdNotes
init|=
name|extIdNotesFactory
operator|.
name|load
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|extIdNotes
operator|.
name|insert
argument_list|(
name|gerritExtId
argument_list|)
expr_stmt|;
name|extIdNotes
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Authentication error, account not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAuthenticateWithInactiveAccount ()
specifier|public
name|void
name|cannotAuthenticateWithInactiveAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Authentication error, account inactive"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotActivateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsDisabled ()
specifier|public
name|void
name|cannotActivateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|who
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|who
operator|.
name|setAuthProvidesAccountActiveStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Authentication error, account inactive"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.autoUpdateAccountActiveStatus"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|activateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsEnabled ()
specifier|public
name|void
name|activateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|who
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|who
operator|.
name|setAuthProvidesAccountActiveStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|isActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotDeactivateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsDisabled ()
specifier|public
name|void
name|cannotDeactivateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|who
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|who
operator|.
name|setAuthProvidesAccountActiveStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|gerritExtIdKey
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|isActive
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.autoUpdateAccountActiveStatus"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|deactivateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsEnabled ()
specifier|public
name|void
name|deactivateAccountOnAuthenticationWhenAutoUpdateAccountActiveStatusIsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|who
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|who
operator|.
name|setAuthProvidesAccountActiveStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AccountException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Authentication error, account inactive"
argument_list|)
expr_stmt|;
block|}
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|isActive
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAuthenticateNewAccountWithEmailThatIsAlreadyUsed ()
specifier|public
name|void
name|cannotAuthenticateNewAccountWithEmailThatIsAlreadyUsed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
comment|// Create an account with an SCHEME_EXTERNAL external ID that occupies the email.
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to authenticate with this email to create a new account with a SCHEME_MAILTO external ID.
comment|// Expect that this fails because the email is already assigned to the other account.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Email 'foo@example.com' in use by another account"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotAuthenticateNewAccountWithUsernameAndEmailThatIsAlreadyUsed ()
specifier|public
name|void
name|cannotAuthenticateNewAccountWithUsernameAndEmailThatIsAlreadyUsed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
comment|// Create an account with an SCHEME_EXTERNAL external ID that occupies the email.
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to authenticate with a new username and claim the same email.
comment|// Expect that this fails because the email is already assigned to the other account.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|who
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Email 'foo@example.com' in use by another account"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotUpdateToEmailThatIsAlreadyUsed ()
specifier|public
name|void
name|cannotUpdateToEmailThatIsAlreadyUsed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|String
name|newEmail
init|=
literal|"bar@example.com"
decl_stmt|;
comment|// Create an account with a SCHEME_GERRIT external ID and an email.
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another account with an SCHEME_EXTERNAL external ID that occupies the new email.
name|Account
operator|.
name|Id
name|accountId2
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId2
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId2
argument_list|,
name|newEmail
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to authenticate and update the email for the first account.
comment|// Expect that this fails because the new email is already assigned to the other account.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|who
operator|.
name|setEmailAddress
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
try|try
block|{
name|accountManager
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AccountException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Email 'bar@example.com' in use by another account"
argument_list|)
expr_stmt|;
block|}
comment|// Verify that the email in the external ID was not updated.
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|gerritExtId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|gerritExtIdKey
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gerritExtId
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gerritExtId
operator|.
name|get
argument_list|()
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|email
argument_list|)
expr_stmt|;
comment|// Verify that the preferred email was not updated.
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accounts
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|linkNewExternalId ()
specifier|public
name|void
name|linkNewExternalId
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an account with a SCHEME_GERRIT external ID and no email
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that email is not used yet.
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|mailtoExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_MAILTO
argument_list|,
name|email
argument_list|)
decl_stmt|;
name|assertNoSuchExternalIds
argument_list|(
name|mailtoExtIdKey
argument_list|)
expr_stmt|;
comment|// Link the email to the account.
comment|// Expect that a MAILTO external ID is created.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|link
argument_list|(
name|accountId
argument_list|,
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|mailtoExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalId
argument_list|(
name|mailtoExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateExternalIdOnLink ()
specifier|public
name|void
name|updateExternalIdOnLink
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an account with a SCHEME_GERRIT external ID and no email
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId
argument_list|,
literal|"old@example.com"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Link the email to the existing SCHEME_EXTERNAL external ID, but with a new email.
comment|// Expect that the email of the existing external ID is updated.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forExternalUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|String
name|newEmail
init|=
literal|"new@example.com"
decl_stmt|;
name|who
operator|.
name|setEmailAddress
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
name|AuthResult
name|authResult
init|=
name|accountManager
operator|.
name|link
argument_list|(
name|accountId
argument_list|,
name|who
argument_list|)
decl_stmt|;
name|assertAuthResultForExistingAccount
argument_list|(
name|authResult
argument_list|,
name|accountId
argument_list|,
name|externalExtIdKey
argument_list|)
expr_stmt|;
name|assertExternalId
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId
argument_list|,
name|newEmail
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotLinkExternalIdThatIsAlreadyUsed ()
specifier|public
name|void
name|cannotLinkExternalIdThatIsAlreadyUsed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an account with a SCHEME_EXTERNAL external ID
name|String
name|username1
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId1
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey1
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username1
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId1
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|externalExtIdKey1
argument_list|,
name|accountId1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another account with a SCHEME_EXTERNAL external ID
name|String
name|username2
init|=
literal|"bar"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId2
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey2
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username2
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId2
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|externalExtIdKey2
argument_list|,
name|accountId2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to link external ID of the first account to the second account.
comment|// Expect that this fails because the external ID is already assigned to the first account.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forExternalUser
argument_list|(
name|username1
argument_list|)
decl_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|link
argument_list|(
name|accountId2
argument_list|,
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Identity 'external:foo' in use by another account"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotLinkEmailThatIsAlreadyUsed ()
specifier|public
name|void
name|cannotLinkEmailThatIsAlreadyUsed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"foo@example.com"
decl_stmt|;
comment|// Create an account with an SCHEME_EXTERNAL external ID that occupies the email.
name|String
name|username
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|externalExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_EXTERNAL
argument_list|,
name|username
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|externalExtIdKey
argument_list|,
name|accountId
argument_list|,
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another account with a SCHEME_GERRIT external ID and no email
name|String
name|username2
init|=
literal|"foo"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId2
init|=
name|Account
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|gerritExtIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|SCHEME_GERRIT
argument_list|,
name|username2
argument_list|)
decl_stmt|;
name|accountsUpdate
operator|.
name|insert
argument_list|(
literal|"Create Test Account"
argument_list|,
name|accountId2
argument_list|,
name|u
lambda|->
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|gerritExtIdKey
argument_list|,
name|accountId2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to link the email to the second account (via a new MAILTO external ID) and expect that
comment|// this fails because the email is already assigned to the first account.
name|AuthRequest
name|who
init|=
name|AuthRequest
operator|.
name|forEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
name|AccountException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AccountException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|accountManager
operator|.
name|link
argument_list|(
name|accountId
argument_list|,
name|who
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Email 'foo@example.com' in use by another account"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoSuchExternalIds (ExternalId.Key... extIdKeys)
specifier|private
name|void
name|assertNoSuchExternalIds
parameter_list|(
name|ExternalId
operator|.
name|Key
modifier|...
name|extIdKeys
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|assertWithMessage
argument_list|(
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|about
argument_list|(
name|optionals
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|externalIds
operator|.
name|get
argument_list|(
name|extIdKey
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertExternalIdsWithoutEmail (ExternalId.Key... extIdKeys)
specifier|private
name|void
name|assertExternalIdsWithoutEmail
parameter_list|(
name|ExternalId
operator|.
name|Key
modifier|...
name|extIdKeys
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|assertExternalId
argument_list|(
name|extIdKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertExternalId (ExternalId.Key extIdKey, @Nullable String expectedEmail)
specifier|private
name|void
name|assertExternalId
parameter_list|(
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|,
annotation|@
name|Nullable
name|String
name|expectedEmail
parameter_list|)
throws|throws
name|Exception
block|{
name|assertExternalId
argument_list|(
name|extIdKey
argument_list|,
literal|null
argument_list|,
name|expectedEmail
argument_list|)
expr_stmt|;
block|}
DECL|method|assertExternalId ( ExternalId.Key extIdKey, @Nullable Account.Id expectedAccountId, @Nullable String expectedEmail)
specifier|private
name|void
name|assertExternalId
parameter_list|(
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|,
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|expectedAccountId
parameter_list|,
annotation|@
name|Nullable
name|String
name|expectedEmail
parameter_list|)
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|extId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|extIdKey
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|about
argument_list|(
name|optionals
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|extId
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectedAccountId
operator|!=
literal|null
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"account ID of "
operator|+
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|extId
operator|.
name|get
argument_list|()
operator|.
name|accountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAccountId
argument_list|)
expr_stmt|;
block|}
name|assertWithMessage
argument_list|(
literal|"email of "
operator|+
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|extId
operator|.
name|get
argument_list|()
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedEmail
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAuthResultForNewAccount ( AuthResult authResult, ExternalId.Key expectedExtIdKey)
specifier|private
name|void
name|assertAuthResultForNewAccount
parameter_list|(
name|AuthResult
name|authResult
parameter_list|,
name|ExternalId
operator|.
name|Key
name|expectedExtIdKey
parameter_list|)
block|{
name|assertThat
argument_list|(
name|authResult
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|authResult
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedExtIdKey
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authResult
operator|.
name|isNew
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAuthResultForExistingAccount ( AuthResult authResult, Account.Id expectedAccountId, ExternalId.Key expectedExtIdKey)
specifier|private
name|void
name|assertAuthResultForExistingAccount
parameter_list|(
name|AuthResult
name|authResult
parameter_list|,
name|Account
operator|.
name|Id
name|expectedAccountId
parameter_list|,
name|ExternalId
operator|.
name|Key
name|expectedExtIdKey
parameter_list|)
block|{
name|assertThat
argument_list|(
name|authResult
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAccountId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authResult
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedExtIdKey
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authResult
operator|.
name|isNew
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

