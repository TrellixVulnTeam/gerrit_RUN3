begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|config
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevertInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|PureRevertInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevertSubmissionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RevertIT
specifier|public
class|class
name|RevertIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
annotation|@
name|Test
DECL|method|pureRevertFactBlocksSubmissionOfNonReverts ()
specifier|public
name|void
name|pureRevertFactBlocksSubmissionOfNonReverts
parameter_list|()
throws|throws
name|Exception
block|{
name|addPureRevertSubmitRule
argument_list|()
expr_stmt|;
comment|// Create a change that is not a revert of another change
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to submit 1 change due to the following problems"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"needs Is-Pure-Revert"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertFactBlocksSubmissionOfNonPureReverts ()
specifier|public
name|void
name|pureRevertFactBlocksSubmissionOfNonPureReverts
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|addPureRevertSubmitRule
argument_list|()
expr_stmt|;
comment|// Create a revert and push a content change
name|String
name|revertId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|changeId
decl_stmt|;
name|amendChange
argument_list|(
name|revertId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|revertId
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to submit 1 change due to the following problems"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"needs Is-Pure-Revert"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertFactAllowsSubmissionOfPureReverts ()
specifier|public
name|void
name|pureRevertFactAllowsSubmissionOfPureReverts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a change that we can later revert
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|addPureRevertSubmitRule
argument_list|()
expr_stmt|;
comment|// Create a revert and submit it
name|String
name|revertId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|changeId
decl_stmt|;
name|approve
argument_list|(
name|revertId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertReturnsTrueForPureRevert ()
specifier|public
name|void
name|pureRevertReturnsTrueForPureRevert
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|String
name|revertId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|id
decl_stmt|;
comment|// Without query parameter
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|()
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// With query parameter
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|toObjectId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertReturnsFalseOnContentChange ()
specifier|public
name|void
name|pureRevertReturnsFalseOnContentChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
comment|// Create a revert and expect pureRevert to be true
name|String
name|revertId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|changeId
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|()
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Create a new PS and expect pureRevert to be false
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|amendChange
argument_list|(
name|revertId
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|()
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertParameterTakesPrecedence ()
specifier|public
name|void
name|pureRevertParameterTakesPrecedence
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content1"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|String
name|oldHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|toObjectId
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content2"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|String
name|revertId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|changeId
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|()
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|(
name|oldHead
argument_list|)
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertReturnsFalseOnInvalidInput ()
specifier|public
name|void
name|pureRevertReturnsFalseOnInvalidInput
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|pureRevert
argument_list|(
literal|"invalid id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid object ID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertReturnsTrueWithCleanRebase ()
specifier|public
name|void
name|pureRevertReturnsTrueWithCleanRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content1"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content2"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|String
name|revertId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|changeId
decl_stmt|;
comment|// Rebase revert onto HEAD
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|rebase
argument_list|()
expr_stmt|;
comment|// Check that pureRevert is true which implies that the commit can be rebased onto the original
comment|// commit.
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertId
argument_list|)
operator|.
name|pureRevert
argument_list|()
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertReturnsFalseWithRebaseConflict ()
specifier|public
name|void
name|pureRevertReturnsFalseWithRebaseConflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an initial commit to serve as claimed original
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content1"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|String
name|claimedOriginal
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|toObjectId
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// Change contents of the file to provoke a conflict
name|merge
argument_list|(
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a commit that we can revert
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|(
literal|"commit message"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content3"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r2
argument_list|)
expr_stmt|;
comment|// Create a revert of r2
name|String
name|revertR3Id
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
comment|// Assert that the change is a pure revert of it's 'revertOf'
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertR3Id
argument_list|)
operator|.
name|pureRevert
argument_list|()
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Assert that the change is not a pure revert of claimedOriginal because pureRevert is trying
comment|// to rebase this on claimed original, which fails.
name|PureRevertInfo
name|pureRevert
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertR3Id
argument_list|)
operator|.
name|pureRevert
argument_list|(
name|claimedOriginal
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pureRevert
operator|.
name|isPureRevert
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pureRevertThrowsExceptionWhenChangeIsNotARevertAndNoIdProvided ()
specifier|public
name|void
name|pureRevertThrowsExceptionWhenChangeIsNotARevertAndNoIdProvided
parameter_list|()
throws|throws
name|Exception
block|{
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|pureRevert
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"revertOf not set"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revert ()
specifier|public
name|void
name|revert
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeInfo
name|revertChange
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// expected messages on source change:
comment|// 1. Uploaded patch set 1.
comment|// 2. Patch Set 1: Code-Review+2
comment|// 3. Change has been successfully merged by Administrator
comment|// 4. Patch Set 1: Reverted
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|sourceMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sourceMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Created a revert of this change as %s"
argument_list|,
name|revertChange
operator|.
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sourceMessages
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChange
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChange
operator|.
name|messages
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChange
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertWithDefaultTopic ()
specifier|public
name|void
name|revertWithDefaultTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|(
name|revertInput
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertWithSetTopic ()
specifier|public
name|void
name|revertWithSetTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|topic
operator|=
literal|"reverted-not-default"
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|(
name|revertInput
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|revertInput
operator|.
name|topic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertWithSetMessage ()
specifier|public
name|void
name|revertWithSetMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|message
operator|=
literal|"Message from input"
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|(
name|revertInput
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|revertInput
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertNotifications ()
specifier|public
name|void
name|revertNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ChangeInfo
name|revertChange
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|(
name|revertChange
operator|.
name|changeId
argument_list|,
literal|"newchange"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"revert"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suppressRevertNotifications ()
specifier|public
name|void
name|suppressRevertNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|(
name|revertInput
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertPreservesReviewersAndCcs ()
specifier|public
name|void
name|revertPreservesReviewersAndCcs
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|reviewer
argument_list|(
name|accountCreator
operator|.
name|user2
argument_list|()
operator|.
name|email
argument_list|()
argument_list|,
name|ReviewerState
operator|.
name|CC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add user as reviewer that will create the revert
name|in
operator|.
name|reviewer
argument_list|(
name|accountCreator
operator|.
name|admin2
argument_list|()
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// expect both the original reviewers and CCs to be preserved
comment|// original owner should be added as reviewer, user requesting the revert (new owner) removed
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|accountCreator
operator|.
name|admin2
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ReviewerState
argument_list|,
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
argument_list|>
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|reviewers
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|reviewers
init|=
name|result
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ccs
init|=
name|result
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ccs
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|accountCreator
operator|.
name|user2
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|revertInitialCommit ()
specifier|public
name|void
name|revertInitialCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot revert initial commit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cantRevertNonMergedCommit ()
specifier|public
name|void
name|cantRevertNonMergedCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"change is "
operator|+
name|ChangeUtil
operator|.
name|status
argument_list|(
name|result
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cantCreateRevertWithoutProjectWritePermission ()
specifier|public
name|void
name|cantCreateRevertWithoutProjectWritePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|setState
argument_list|(
name|ProjectState
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"project state "
operator|+
name|ProjectState
operator|.
name|READ_ONLY
operator|+
literal|" does not permit write"
decl_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cantCreateRevertWithoutCreateChangePermission ()
specifier|public
name|void
name|cantCreateRevertWithoutCreateChangePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PermissionDeniedException
name|thrown
init|=
name|assertThrows
argument_list|(
name|PermissionDeniedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not permitted: create change on refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cantCreateRevertWithoutReadPermission ()
specifier|public
name|void
name|cantCreateRevertWithoutReadPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not found: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|cantCreateRevertSubmissionWithoutProjectWritePermission ()
specifier|public
name|void
name|cantCreateRevertSubmissionWithoutProjectWritePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|secondProject
init|=
literal|"secondProject"
decl_stmt|;
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|secondProject
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|secondRepo
init|=
name|cloneProject
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"secondProject"
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|String
name|change1
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|change2
init|=
name|createChange
argument_list|(
name|secondRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// revoke write permissions for the first repository.
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getProject
argument_list|()
operator|.
name|setState
argument_list|(
name|ProjectState
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"project state "
operator|+
name|ProjectState
operator|.
name|READ_ONLY
operator|+
literal|" does not permit write"
decl_stmt|;
comment|// assert that if first repository has no write permissions, it will fail.
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// assert that if the first repository has no write permissions and a change from another
comment|// repository is trying to revert the submission, it will fail.
name|thrown
operator|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|cantCreateRevertSubmissionWithoutCreateChangePermission ()
specifier|public
name|void
name|cantCreateRevertSubmissionWithoutCreateChangePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|secondProject
init|=
literal|"secondProject"
decl_stmt|;
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|secondProject
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|secondRepo
init|=
name|cloneProject
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"secondProject"
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|String
name|change1
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|change2
init|=
name|createChange
argument_list|(
name|secondRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// revoke create change permissions for the first repository.
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// assert that if first repository has no write create change, it will fail.
name|PermissionDeniedException
name|thrown
init|=
name|assertThrows
argument_list|(
name|PermissionDeniedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not permitted: create change on refs/heads/master"
argument_list|)
expr_stmt|;
comment|// assert that if the first repository has no create change permissions and a change from
comment|// another repository is trying to revert the submission, it will fail.
name|thrown
operator|=
name|assertThrows
argument_list|(
name|PermissionDeniedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not permitted: create change on refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|cantCreateRevertSubmissionWithoutReadPermission ()
specifier|public
name|void
name|cantCreateRevertSubmissionWithoutReadPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|secondProject
init|=
literal|"secondProject"
decl_stmt|;
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|secondProject
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|secondRepo
init|=
name|cloneProject
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"secondProject"
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|String
name|change1
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|change2
init|=
name|createChange
argument_list|(
name|secondRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// revoke read permissions for the first repository.
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// assert that if first repository has no read permissions, it will fail.
name|ResourceNotFoundException
name|resourceNotFoundException
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|resourceNotFoundException
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Not found: "
operator|+
name|change1
argument_list|)
expr_stmt|;
comment|// assert that if the first repository has no READ permissions and a change from another
comment|// repository is trying to revert the submission, it will fail.
name|AuthException
name|authException
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|authException
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"read not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionPreservesReviewersAndCcs ()
specifier|public
name|void
name|revertSubmissionPreservesReviewersAndCcs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|change
init|=
name|createChange
argument_list|(
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|reviewer
argument_list|(
name|accountCreator
operator|.
name|user2
argument_list|()
operator|.
name|email
argument_list|()
argument_list|,
name|ReviewerState
operator|.
name|CC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add user as reviewer that will create the revert
name|in
operator|.
name|reviewer
argument_list|(
name|accountCreator
operator|.
name|admin2
argument_list|()
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// expect both the original reviewers and CCs to be preserved
comment|// original owner should be added as reviewer, user requesting the revert (new owner) removed
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|accountCreator
operator|.
name|admin2
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ReviewerState
argument_list|,
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
argument_list|>
name|result
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewers
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|reviewers
init|=
name|result
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ccs
init|=
name|result
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ccs
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|accountCreator
operator|.
name|user2
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionNotifications ()
specifier|public
name|void
name|revertSubmissionNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|firstResult
init|=
name|createChange
argument_list|(
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|firstResult
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|firstResult
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|secondResult
init|=
name|createChange
argument_list|(
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|secondResult
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|ALL
expr_stmt|;
name|RevertSubmissionInfo
name|revertChanges
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
argument_list|)
operator|.
name|revertSubmission
argument_list|(
name|revertInput
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|(
name|revertChanges
operator|.
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|changeId
argument_list|,
literal|"newchange"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|(
name|firstResult
argument_list|,
literal|"revert"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|(
name|revertChanges
operator|.
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|changeId
argument_list|,
literal|"newchange"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|(
name|secondResult
argument_list|,
literal|"revert"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionIdenticalTreeIsAllowed ()
specifier|public
name|void
name|revertSubmissionIdenticalTreeIsAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unrelatedChange
init|=
name|createChange
argument_list|(
literal|"change1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|unrelatedChange
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|unrelatedChange
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|emptyChange
init|=
name|createChange
argument_list|(
literal|"change1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|emptyChange
argument_list|)
expr_stmt|;
name|String
name|changeToBeReverted
init|=
name|createChange
argument_list|(
literal|"change2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeToBeReverted
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeToBeReverted
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|ALL
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeToBeReverted
argument_list|)
operator|.
name|revertSubmission
argument_list|(
name|revertInput
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|suppressRevertSubmissionNotifications ()
specifier|public
name|void
name|suppressRevertSubmissionNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|firstResult
init|=
name|createChange
argument_list|(
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|firstResult
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|firstResult
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|secondResult
init|=
name|createChange
argument_list|(
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|secondResult
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
argument_list|)
operator|.
name|revertSubmission
argument_list|(
name|revertInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionOfSingleChange ()
specifier|public
name|void
name|revertSubmissionOfSingleChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
literal|"Change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|resultId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|resultId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultId
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sha1Commit
init|=
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1Commit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"revert-"
operator|+
name|result
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getSubmissionId
argument_list|()
operator|+
literal|"-"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionWithSetTopic ()
specifier|public
name|void
name|revertSubmissionWithSetTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|topic
argument_list|(
literal|"topic"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|topic
operator|=
literal|"reverted-not-default"
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|revertSubmission
argument_list|(
name|revertInput
argument_list|)
operator|.
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|revertInput
operator|.
name|topic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionWithSetMessage ()
specifier|public
name|void
name|revertSubmissionWithSetMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevertInput
name|revertInput
init|=
operator|new
name|RevertInput
argument_list|()
decl_stmt|;
name|revertInput
operator|.
name|message
operator|=
literal|"Message from input"
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|revertSubmission
argument_list|(
name|revertInput
argument_list|)
operator|.
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|revertInput
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|revertSubmissionDifferentRepositoriesWithDependantChange ()
specifier|public
name|void
name|revertSubmissionDifferentRepositoriesWithDependantChange
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"secondProject"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|secondRepo
init|=
name|cloneProject
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"secondProject"
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|resultCommits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|resultCommits
operator|.
name|add
argument_list|(
name|createChange
argument_list|(
name|secondRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|resultCommits
operator|.
name|add
argument_list|(
name|createChange
argument_list|(
name|secondRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"Other message"
argument_list|,
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|resultCommits
operator|.
name|add
argument_list|(
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"main repo change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PushOneCommit
operator|.
name|Result
name|result
range|:
name|resultCommits
control|)
block|{
name|approve
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// submit all changes
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|sha1RevertOfTheSecondChange
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
name|String
name|sha1SecondChange
init|=
name|resultCommits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|sha1ThirdChange
init|=
name|resultCommits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1RevertOfTheSecondChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1ThirdChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// has size 3 because of the same topic, and submitWholeTopic is true.
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_number
argument_list|)
operator|.
name|submittedTogether
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// expected messages on source change:
comment|// 1. Uploaded patch set 1.
comment|// 2. Patch Set 1: Code-Review+2
comment|// 3. Change has been successfully merged by Administrator
comment|// 4. Created a revert of this change as %s
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultCommits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|sourceMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sourceMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|String
name|expectedMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Created a revert of this change as %s"
argument_list|,
name|revertChanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sourceMessages
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
comment|// Expected message on the created change: "Uploaded patch set 1."
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
init|=
name|revertChanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_number
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"revert-"
operator|+
name|resultCommits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|cantRevertSubmissionWithAnOpenChange ()
specifier|public
name|void
name|cantRevertSubmissionWithAnOpenChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|createChange
argument_list|(
literal|"change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"change is new."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionWithDependantChange ()
specifier|public
name|void
name|revertSubmissionWithDependantChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|firstResult
init|=
name|createChange
argument_list|(
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|secondResult
init|=
name|createChange
argument_list|(
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|revertChanges
argument_list|)
expr_stmt|;
name|String
name|sha1SecondChange
init|=
name|secondResult
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|sha1FirstRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1FirstRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|secondResult
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|firstResult
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|revertSubmissionWithDependantChangeWithoutRevertingLastOne ()
specifier|public
name|void
name|revertSubmissionWithDependantChangeWithoutRevertingLastOne
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|firstResult
init|=
name|createChange
argument_list|(
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|secondResult
init|=
name|createChange
argument_list|(
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|String
name|unrelated
init|=
name|createChange
argument_list|(
literal|"other change"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"message other"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|unrelated
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|unrelated
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|revertChanges
argument_list|)
expr_stmt|;
name|String
name|sha1SecondChange
init|=
name|secondResult
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|sha1FirstRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1FirstRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|secondResult
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|firstResult
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|revertSubmissionDifferentRepositories ()
specifier|public
name|void
name|revertSubmissionDifferentRepositories
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"secondProject"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|secondRepo
init|=
name|cloneProject
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"secondProject"
argument_list|)
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|firstResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|secondResult
init|=
name|createChange
argument_list|(
name|secondRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit both changes
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
comment|// has size 2 because of the same topic, and submitWholeTopic is true.
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_number
argument_list|)
operator|.
name|submittedTogether
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|String
name|sha1SecondChange
init|=
name|secondResult
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|sha1FirstChange
init|=
name|firstResult
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1FirstChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|firstResult
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revertOf
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|secondResult
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|revertSubmissionMultipleBranches ()
specifier|public
name|void
name|revertSubmissionMultipleBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|resultCommits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|resultCommits
operator|.
name|add
argument_list|(
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|resultCommits
operator|.
name|add
argument_list|(
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"other"
argument_list|,
literal|"second change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|resultCommits
operator|.
name|add
argument_list|(
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"other"
argument_list|,
literal|"third change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"Other message"
argument_list|,
name|topic
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PushOneCommit
operator|.
name|Result
name|result
range|:
name|resultCommits
control|)
block|{
name|approve
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// submit all changes
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|resultCommits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"c.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|sha1FirstChange
init|=
name|resultCommits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|sha1ThirdChange
init|=
name|resultCommits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|sha1SecondRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1FirstChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1ThirdChange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|revertSubmissionDependantAndUnrelatedWithMerge ()
specifier|public
name|void
name|revertSubmissionDependantAndUnrelatedWithMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|firstResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|secondResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|thirdResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"third change"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|thirdResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// put the head on the merge commit created by submitting the second and third change.
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master:merge"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"merge"
argument_list|)
expr_stmt|;
comment|// Create another change that should be ignored. The reverts should be rebased on top of the
comment|// merge commit.
name|PushOneCommit
operator|.
name|Result
name|fourthResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"fourth change"
argument_list|,
literal|"d.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|fourthResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|fourthResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|revertChanges
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"c.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|sha1FirstRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
name|String
name|sha1SecondRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
comment|// parent of the first revert is the merged change of previous changes.
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|subject
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Merge"
argument_list|)
expr_stmt|;
comment|// Next reverts would stack on top of the previous ones.
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1FirstRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.submitWholeTopic"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|revertSubmissionUnrelatedWithTwoMergeCommits ()
specifier|public
name|void
name|revertSubmissionUnrelatedWithTwoMergeCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|topic
init|=
literal|"topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|firstResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|secondResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"second change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|thirdResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"third change"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|thirdResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|firstResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// put the head on the most recent merge commit.
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master:merge"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"merge"
argument_list|)
expr_stmt|;
comment|// Create another change that should be ignored. The reverts should be rebased on top of the
comment|// merge commit.
name|PushOneCommit
operator|.
name|Result
name|fourthResult
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"fourth change"
argument_list|,
literal|"d.txt"
argument_list|,
literal|"message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|fourthResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|fourthResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|revertChanges
init|=
name|getChangeApis
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|secondResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revertSubmission
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|revertChanges
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"c.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"b.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|files
argument_list|()
operator|.
name|get
argument_list|(
literal|"a.txt"
argument_list|)
operator|.
name|linesDeleted
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|sha1FirstRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
name|String
name|sha1SecondRevert
init|=
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|commit
decl_stmt|;
comment|// parent of the first revert is the merged change of previous changes.
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|subject
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Merge \"third change\""
argument_list|)
expr_stmt|;
comment|// Next reverts would stack on top of the previous ones.
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1FirstRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|sha1SecondRevert
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revertChanges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createChange ()
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createChange
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createChange (String ref)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|addPureRevertSubmitRule ()
specifier|private
name|void
name|addPureRevertSubmitRule
parameter_list|()
throws|throws
name|Exception
block|{
name|modifySubmitRules
argument_list|(
literal|"submit_rule(submit(R)) :- \n"
operator|+
literal|"gerrit:pure_revert(1), \n"
operator|+
literal|"!,"
operator|+
literal|"gerrit:uploader(U), \n"
operator|+
literal|"R = label('Is-Pure-Revert', ok(U)).\n"
operator|+
literal|"submit_rule(submit(R)) :- \n"
operator|+
literal|"gerrit:pure_revert(U), \n"
operator|+
literal|"U \\= 1,"
operator|+
literal|"R = label('Is-Pure-Revert', need(_)). \n\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|modifySubmitRules (String newContent)
specifier|private
name|void
name|modifySubmitRules
parameter_list|(
name|String
name|newContent
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|testRepo
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|testRepo
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|author
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"rules.pl"
argument_list|,
name|newContent
argument_list|)
operator|.
name|message
argument_list|(
literal|"Modify rules.pl"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getChangeApis (RevertSubmissionInfo revertSubmissionInfo)
specifier|private
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|getChangeApis
parameter_list|(
name|RevertSubmissionInfo
name|revertSubmissionInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeApi
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeInfo
name|changeInfo
range|:
name|revertSubmissionInfo
operator|.
name|revertChanges
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

