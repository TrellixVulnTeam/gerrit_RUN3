begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CharStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseSsh
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|Exports
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|PluginDefinedInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryProcessor
operator|.
name|ChangeAttributeFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|OutputStreamQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|UseSsh
DECL|class|PluginFieldsIT
specifier|public
class|class
name|PluginFieldsIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|class|MyInfo
specifier|static
class|class
name|MyInfo
extends|extends
name|PluginDefinedInfo
block|{
DECL|field|theAttribute
annotation|@
name|Nullable
name|String
name|theAttribute
decl_stmt|;
DECL|method|MyInfo (@ullable String theAttribute)
name|MyInfo
parameter_list|(
annotation|@
name|Nullable
name|String
name|theAttribute
parameter_list|)
block|{
name|this
operator|.
name|theAttribute
operator|=
name|theAttribute
expr_stmt|;
block|}
DECL|method|MyInfo (String name, @Nullable String theAttribute)
name|MyInfo
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|theAttribute
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|theAttribute
operator|=
name|theAttribute
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|MyInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MyInfo
name|i
init|=
operator|(
name|MyInfo
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|i
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|theAttribute
argument_list|,
name|i
operator|.
name|theAttribute
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|theAttribute
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|add
argument_list|(
literal|"theAttribute"
argument_list|,
name|theAttribute
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|NullAttributeModule
specifier|static
class|class
name|NullAttributeModule
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|ChangeAttributeFactory
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|Exports
operator|.
name|named
argument_list|(
literal|"always-null"
argument_list|)
argument_list|)
operator|.
name|toInstance
argument_list|(
parameter_list|(
name|cd
parameter_list|,
name|qp
parameter_list|,
name|p
parameter_list|)
lambda|->
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SimpleAttributeModule
specifier|static
class|class
name|SimpleAttributeModule
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|ChangeAttributeFactory
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|Exports
operator|.
name|named
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
operator|.
name|toInstance
argument_list|(
parameter_list|(
name|cd
parameter_list|,
name|qp
parameter_list|,
name|p
parameter_list|)
lambda|->
operator|new
name|MyInfo
argument_list|(
literal|"change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|queryChangeApiWithNullAttribute ()
specifier|public
name|void
name|queryChangeApiWithNullAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|queryChangeWithNullAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonList
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeRestWithNullAttribute ()
specifier|public
name|void
name|queryChangeRestWithNullAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|queryChangeWithNullAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonListRest
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeQueryUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeSshWithNullAttribute ()
specifier|public
name|void
name|queryChangeSshWithNullAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|queryChangeWithNullAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonListSsh
argument_list|(
name|adminSshSession
operator|.
name|exec
argument_list|(
name|changeQueryCmd
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|queryChangeWithNullAttribute (PluginInfoGetter getter)
specifier|private
name|void
name|queryChangeWithNullAttribute
parameter_list|(
name|PluginInfoGetter
name|getter
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getter
operator|.
name|call
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|installPlugin
argument_list|(
literal|"my-plugin"
argument_list|,
name|NullAttributeModule
operator|.
name|class
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|getter
operator|.
name|call
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|getter
operator|.
name|call
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeApiWithSimpleAttribute ()
specifier|public
name|void
name|queryChangeApiWithSimpleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|queryChangeWithSimpleAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonList
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeRestWithSimpleAttribute ()
specifier|public
name|void
name|queryChangeRestWithSimpleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|queryChangeWithSimpleAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonListRest
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeQueryUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeSshWithSimpleAttribute ()
specifier|public
name|void
name|queryChangeSshWithSimpleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|queryChangeWithSimpleAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonListSsh
argument_list|(
name|adminSshSession
operator|.
name|exec
argument_list|(
name|changeQueryCmd
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|queryChangeWithSimpleAttribute (PluginInfoGetter getter)
specifier|private
name|void
name|queryChangeWithSimpleAttribute
parameter_list|(
name|PluginInfoGetter
name|getter
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getter
operator|.
name|call
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|installPlugin
argument_list|(
literal|"my-plugin"
argument_list|,
name|SimpleAttributeModule
operator|.
name|class
argument_list|)
init|)
block|{
name|List
argument_list|<
name|MyInfo
argument_list|>
name|infos
init|=
name|getter
operator|.
name|call
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|infos
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|MyInfo
argument_list|(
literal|"my-plugin"
argument_list|,
literal|"change "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|getter
operator|.
name|call
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|changeQueryUrl (Change.Id id)
specifier|private
name|String
name|changeQueryUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
literal|"/changes/?q="
operator|+
name|id
return|;
block|}
DECL|method|changeQueryCmd (Change.Id id)
specifier|private
name|String
name|changeQueryCmd
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
literal|"gerrit query --format json "
operator|+
name|id
return|;
block|}
DECL|method|pluginInfoFromSingletonList (List<ChangeInfo> changeInfos)
specifier|private
specifier|static
name|List
argument_list|<
name|MyInfo
argument_list|>
name|pluginInfoFromSingletonList
parameter_list|(
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changeInfos
parameter_list|)
block|{
name|assertThat
argument_list|(
name|changeInfos
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PluginDefinedInfo
argument_list|>
name|pluginInfo
init|=
name|changeInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|plugins
decl_stmt|;
if|if
condition|(
name|pluginInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|pluginInfo
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MyInfo
operator|.
name|class
operator|::
name|cast
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|pluginInfoFromSingletonListRest (RestResponse res)
specifier|private
specifier|static
name|List
argument_list|<
name|MyInfo
argument_list|>
name|pluginInfoFromSingletonListRest
parameter_list|(
name|RestResponse
name|res
parameter_list|)
throws|throws
name|Exception
block|{
name|res
operator|.
name|assertOK
argument_list|()
expr_stmt|;
comment|// Don't deserialize to ChangeInfo directly, since that would treat the plugins field as
comment|// List<PluginDefinedInfo> and ignore the unknown keys found in MyInfo.
name|Gson
name|gson
init|=
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|changeInfos
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|res
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfos
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|plugins
init|=
name|changeInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"plugins"
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|gson
operator|.
name|fromJson
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|plugins
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|MyInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|pluginInfoFromSingletonListSsh (String sshOutput)
specifier|private
specifier|static
name|List
argument_list|<
name|MyInfo
argument_list|>
name|pluginInfoFromSingletonListSsh
parameter_list|(
name|String
name|sshOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|Gson
name|gson
init|=
name|OutputStreamQuery
operator|.
name|GSON
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|changeAttrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|CharStreams
operator|.
name|readLines
argument_list|(
operator|new
name|StringReader
argument_list|(
name|sshOutput
argument_list|)
argument_list|)
control|)
block|{
comment|// Don't deserialize to ChangeAttribute directly, since that would treat the plugins field as
comment|// List<PluginDefinedInfo> and ignore the unknown keys found in MyInfo.
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|changeAttr
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|line
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"stats"
operator|.
name|equals
argument_list|(
name|changeAttr
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|changeAttrs
operator|.
name|add
argument_list|(
name|changeAttr
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|changeAttrs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|plugins
init|=
name|changeAttrs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"plugins"
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|gson
operator|.
name|fromJson
argument_list|(
name|gson
operator|.
name|toJson
argument_list|(
name|plugins
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|MyInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|PluginInfoGetter
specifier|private
interface|interface
name|PluginInfoGetter
block|{
DECL|method|call (Change.Id id)
name|List
argument_list|<
name|MyInfo
argument_list|>
name|call
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

