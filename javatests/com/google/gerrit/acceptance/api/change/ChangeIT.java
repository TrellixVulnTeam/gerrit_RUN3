begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|assertPushOk
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_CONTENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|SUBJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowCapability
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|blockLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|labelPermissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|permissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CHANGE_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CHECK
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|COMMIT_FOOTERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|MESSAGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|PUSH_CERTIFICATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|REVIEWED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|TRACKING_IDS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|CC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|REMOVED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|TestLabels
operator|.
name|label
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|TestLabels
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|CacheStatsSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|truth
operator|.
name|CacheStatsSubject
operator|.
name|cloneStats
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|ThrowableSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ChangeIndexedCounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ExtensionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ExtensionRegistry
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseClockStep
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseTimezone
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|config
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|AccountOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|group
operator|.
name|GroupOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|Exports
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|accounts
operator|.
name|DeleteDraftCommentsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DeleteReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DeleteVoteInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RebaseInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RelatedChangeAndCommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewerInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevisionApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|StarsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GitPerson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|MergeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|MergePatchSetInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|TrackingIdInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MethodNotAllowedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|PostFilterPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|testing
operator|.
name|TestChangeETagComputation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|IndexedChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffSummaryKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|IntraLineDiff
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|IntraLineDiffKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|TestLabels
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryBuilder
operator|.
name|ChangeOperatorFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|PostReview
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
annotation|@
name|UseTimezone
argument_list|(
name|timezone
operator|=
literal|"US/Eastern"
argument_list|)
DECL|class|ChangeIT
specifier|public
class|class
name|ChangeIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|accountOperations
annotation|@
name|Inject
specifier|private
name|AccountOperations
name|accountOperations
decl_stmt|;
DECL|field|changeIndexCollection
annotation|@
name|Inject
specifier|private
name|ChangeIndexCollection
name|changeIndexCollection
decl_stmt|;
DECL|field|groupOperations
annotation|@
name|Inject
specifier|private
name|GroupOperations
name|groupOperations
decl_stmt|;
DECL|field|indexConfig
annotation|@
name|Inject
specifier|private
name|IndexConfig
name|indexConfig
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|extensionRegistry
annotation|@
name|Inject
specifier|private
name|ExtensionRegistry
name|extensionRegistry
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"diff"
argument_list|)
DECL|field|fileCache
specifier|private
name|Cache
argument_list|<
name|PatchListKey
argument_list|,
name|PatchList
argument_list|>
name|fileCache
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"diff_intraline"
argument_list|)
DECL|field|intraCache
specifier|private
name|Cache
argument_list|<
name|IntraLineDiffKey
argument_list|,
name|IntraLineDiff
argument_list|>
name|intraCache
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|Named
argument_list|(
literal|"diff_summary"
argument_list|)
DECL|field|diffSummaryCache
specifier|private
name|Cache
argument_list|<
name|DiffSummaryKey
argument_list|,
name|DiffSummary
argument_list|>
name|diffSummaryCache
decl_stmt|;
annotation|@
name|Test
DECL|method|get ()
specifier|public
name|void
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submitType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|mergeable
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|created
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|updated
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|name
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|email
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|username
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|owner
operator|.
name|avatars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submissionId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffStatShouldComputeInsertionsAndDeletions ()
specifier|public
name|void
name|diffStatShouldComputeInsertionsAndDeletions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|"a_new_file.txt"
decl_stmt|;
name|String
name|fileContent
init|=
literal|"First line\nSecond line\n"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
literal|"Add a file"
argument_list|,
name|fileName
argument_list|,
name|fileContent
argument_list|)
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|insertions
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|deletions
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|diffStatShouldSkipInsertionsAndDeletions ()
specifier|public
name|void
name|diffStatShouldSkipInsertionsAndDeletions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|"a_new_file.txt"
decl_stmt|;
name|String
name|fileContent
init|=
literal|"First line\nSecond line\n"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
literal|"Add a file"
argument_list|,
name|fileName
argument_list|,
name|fileContent
argument_list|)
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|SKIP_DIFFSTAT
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|insertions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|deletions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|skipDiffstatOptionAvoidsAllDiffComputations ()
specifier|public
name|void
name|skipDiffstatOptionAvoidsAllDiffComputations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
literal|"a_new_file.txt"
decl_stmt|;
name|String
name|fileContent
init|=
literal|"First line\nSecond line\n"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
literal|"Add a file"
argument_list|,
name|fileName
argument_list|,
name|fileContent
argument_list|)
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|CacheStats
name|startPatch
init|=
name|cloneStats
argument_list|(
name|fileCache
operator|.
name|stats
argument_list|()
argument_list|)
decl_stmt|;
name|CacheStats
name|startIntra
init|=
name|cloneStats
argument_list|(
name|intraCache
operator|.
name|stats
argument_list|()
argument_list|)
decl_stmt|;
name|CacheStats
name|startSummary
init|=
name|cloneStats
argument_list|(
name|diffSummaryCache
operator|.
name|stats
argument_list|()
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|SKIP_DIFFSTAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileCache
operator|.
name|stats
argument_list|()
argument_list|)
operator|.
name|since
argument_list|(
name|startPatch
argument_list|)
operator|.
name|hasMissCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileCache
operator|.
name|stats
argument_list|()
argument_list|)
operator|.
name|since
argument_list|(
name|startPatch
argument_list|)
operator|.
name|hasHitCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|intraCache
operator|.
name|stats
argument_list|()
argument_list|)
operator|.
name|since
argument_list|(
name|startIntra
argument_list|)
operator|.
name|hasMissCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|intraCache
operator|.
name|stats
argument_list|()
argument_list|)
operator|.
name|since
argument_list|(
name|startIntra
argument_list|)
operator|.
name|hasHitCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffSummaryCache
operator|.
name|stats
argument_list|()
argument_list|)
operator|.
name|since
argument_list|(
name|startSummary
argument_list|)
operator|.
name|hasMissCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diffSummaryCache
operator|.
name|stats
argument_list|()
argument_list|)
operator|.
name|since
argument_list|(
name|startSummary
argument_list|)
operator|.
name|hasHitCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|skipMergeable ()
specifier|public
name|void
name|skipMergeable
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|SKIP_MERGEABLE
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|mergeable
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|mergeable
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.api.excludeMergeableInChangeInfo"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|excludeMergeableInChangeInfo ()
specifier|public
name|void
name|excludeMergeableInChangeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|mergeable
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getSubmissionId ()
specifier|public
name|void
name|getSubmissionId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|changeResult
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|submissionId
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setWorkInProgressNotAllowedWithoutPermission ()
specifier|public
name|void
name|setWorkInProgressNotAllowedWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|rwip
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|rwip
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"toggle work in progress state not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setWorkInProgressAllowedAsAdmin ()
specifier|public
name|void
name|setWorkInProgressAllowedAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test Change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setWorkInProgressAllowedAsProjectOwner ()
specifier|public
name|void
name|setWorkInProgressAllowedAsProjectOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test Change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user2
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createWipChangeWithWorkInProgressByDefaultForProject ()
specifier|public
name|void
name|createWipChangeWithWorkInProgressByDefaultForProject
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInput
name|input
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|workInProgressByDefault
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test Change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setReadyForReviewNotAllowedWithoutPermission ()
specifier|public
name|void
name|setReadyForReviewNotAllowedWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|rready
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|rready
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"toggle work in progress state not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setReadyForReviewAllowedAsAdmin ()
specifier|public
name|void
name|setReadyForReviewAllowedAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test Change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setReadyForReviewAllowedAsProjectOwner ()
specifier|public
name|void
name|setReadyForReviewAllowedAsProjectOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"Test Change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|OWNER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user2
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasReviewStarted ()
specifier|public
name|void
name|hasReviewStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createWorkInProgressChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|hasReviewStarted
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|()
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|hasReviewStarted
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pendingReviewers ()
specifier|public
name|void
name|pendingReviewers
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInput
name|conf
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|conf
operator|.
name|enableReviewerByEmail
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createWorkInProgressChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|pendingReviewers
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Add some pending reviewers.
name|String
name|email1
init|=
name|name
argument_list|(
literal|"user1"
argument_list|)
operator|+
literal|"@example.com"
decl_stmt|;
name|String
name|email2
init|=
name|name
argument_list|(
literal|"user2"
argument_list|)
operator|+
literal|"@example.com"
decl_stmt|;
name|String
name|email3
init|=
name|name
argument_list|(
literal|"user3"
argument_list|)
operator|+
literal|"@example.com"
decl_stmt|;
name|String
name|email4
init|=
name|name
argument_list|(
literal|"user4"
argument_list|)
operator|+
literal|"@example.com"
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|name
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email1
argument_list|)
operator|.
name|fullname
argument_list|(
literal|"User 1"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|name
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email2
argument_list|)
operator|.
name|fullname
argument_list|(
literal|"User 2"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|name
argument_list|(
literal|"user3"
argument_list|)
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email3
argument_list|)
operator|.
name|fullname
argument_list|(
literal|"User 3"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|name
argument_list|(
literal|"user4"
argument_list|)
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email4
argument_list|)
operator|.
name|fullname
argument_list|(
literal|"User 4"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|reviewer
argument_list|(
name|email1
argument_list|)
operator|.
name|reviewer
argument_list|(
name|email2
argument_list|)
operator|.
name|reviewer
argument_list|(
name|email3
argument_list|,
name|CC
argument_list|,
literal|false
argument_list|)
operator|.
name|reviewer
argument_list|(
name|email4
argument_list|,
name|CC
argument_list|,
literal|false
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"byemail1@example.com"
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"byemail2@example.com"
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"byemail3@example.com"
argument_list|,
name|CC
argument_list|,
literal|false
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"byemail4@example.com"
argument_list|,
name|CC
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReviewResult
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|reviewers
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|toEmails
init|=
name|ais
lambda|->
name|ais
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ai
lambda|->
name|ai
operator|.
name|email
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email1
argument_list|,
name|email2
argument_list|,
literal|"byemail1@example.com"
argument_list|,
literal|"byemail2@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email3
argument_list|,
name|email4
argument_list|,
literal|"byemail3@example.com"
argument_list|,
literal|"byemail4@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|REMOVED
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Stage some pending reviewer removals.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|email1
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|email3
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"byemail1@example.com"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"byemail3@example.com"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email2
argument_list|,
literal|"byemail2@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email4
argument_list|,
literal|"byemail4@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|REMOVED
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email1
argument_list|,
name|email3
argument_list|,
literal|"byemail1@example.com"
argument_list|,
literal|"byemail3@example.com"
argument_list|)
expr_stmt|;
comment|// "Undo" a removal.
name|in
operator|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|reviewer
argument_list|(
name|email1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email1
argument_list|,
name|email2
argument_list|,
literal|"byemail2@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email4
argument_list|,
literal|"byemail4@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|pendingReviewers
operator|.
name|get
argument_list|(
name|REMOVED
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email3
argument_list|,
literal|"byemail1@example.com"
argument_list|,
literal|"byemail3@example.com"
argument_list|)
expr_stmt|;
comment|// "Commit" by moving out of WIP.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|()
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|pendingReviewers
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email1
argument_list|,
name|email2
argument_list|,
literal|"byemail2@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toEmails
operator|.
name|apply
argument_list|(
name|info
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|email4
argument_list|,
literal|"byemail4@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REMOVED
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toggleWorkInProgressState ()
specifier|public
name|void
name|toggleWorkInProgressState
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// With message
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|(
literal|"Needs some refactoring"
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Needs some refactoring"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_WIP
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|(
literal|"PTAL"
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
literal|"PTAL"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_READY
argument_list|)
expr_stmt|;
comment|// No message
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Set Work In Progress"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_WIP
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|()
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Set Ready For Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_READY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|toggleWorkInProgressStateByNonOwnerWithPermission ()
specifier|public
name|void
name|toggleWorkInProgressStateByNonOwnerWithPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|refactor
init|=
literal|"Needs some refactoring"
decl_stmt|;
name|String
name|ptal
init|=
literal|"PTAL"
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|TOGGLE_WORK_IN_PROGRESS_STATE
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|(
name|refactor
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
name|refactor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_WIP
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|setReadyForReview
argument_list|(
name|ptal
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
name|ptal
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|contains
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_SET_READY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewAndStartReview ()
specifier|public
name|void
name|reviewAndStartReview
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createWorkInProgressChange
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setWorkInProgress
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ReviewResult
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|ready
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewAndMoveToWorkInProgress ()
specifier|public
name|void
name|reviewAndMoveToWorkInProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ReviewResult
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|ready
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewAndSetWorkInProgressAndAddReviewerAndVote ()
specifier|public
name|void
name|reviewAndSetWorkInProgressAndAddReviewerAndVote
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ai
lambda|->
name|ai
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|recommended
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewWithWorkInProgressAndReadyReturnsError ()
specifier|public
name|void
name|reviewWithWorkInProgressAndReadyReturnsError
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
decl_stmt|;
name|in
operator|.
name|ready
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|workInProgress
operator|=
literal|true
expr_stmt|;
name|ReviewResult
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|error
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PostReview
operator|.
name|ERROR_WIP_READY_MUTUALLY_EXCLUSIVE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|cloneAs
operator|=
literal|"user"
argument_list|)
DECL|method|reviewWithWorkInProgressChangeOwner ()
specifier|public
name|void
name|reviewWithWorkInProgressChangeOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|cloneAs
operator|=
literal|"user"
argument_list|)
DECL|method|reviewWithWithWorkInProgressAdmin ()
specifier|public
name|void
name|reviewWithWithWorkInProgressAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewWithWorkInProgressByNonOwnerReturnsError ()
specifier|public
name|void
name|reviewWithWorkInProgressByNonOwnerReturnsError
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"toggle work in progress state not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewWithWorkInProgressByNonOwnerWithPermission ()
specifier|public
name|void
name|reviewWithWorkInProgressByNonOwnerWithPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setWorkInProgress
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|TOGGLE_WORK_IN_PROGRESS_STATE
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewWithReadyByNonOwnerReturnsError ()
specifier|public
name|void
name|reviewWithReadyByNonOwnerReturnsError
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|setReady
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"toggle work in progress state not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getAmbiguous ()
specifier|public
name|void
name|getAmbiguous
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|BranchInput
name|b
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|b
operator|.
name|revision
operator|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"other"
argument_list|)
operator|.
name|create
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/for/other"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Multiple changes found for "
operator|+
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|Rebase
specifier|private
interface|interface
name|Rebase
block|{
DECL|method|call (String id)
name|void
name|call
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RestApiException
function_decl|;
block|}
annotation|@
name|Test
DECL|method|rebaseViaRevisionApi ()
specifier|public
name|void
name|rebaseViaRevisionApi
parameter_list|()
throws|throws
name|Exception
block|{
name|testRebase
argument_list|(
name|id
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseViaChangeApi ()
specifier|public
name|void
name|rebaseViaChangeApi
parameter_list|()
throws|throws
name|Exception
block|{
name|testRebase
argument_list|(
name|id
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRebase (Rebase rebase)
specifier|private
name|void
name|testRebase
parameter_list|(
name|Rebase
name|rebase
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Approve and submit the first change
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Add an approval whose score should be copied on trivial rebase
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// Rebase the second change
name|rebase
operator|.
name|call
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
comment|// Second change should have 2 patch sets and an approval
name|ChangeInfo
name|c2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|CURRENT_REVISION
argument_list|,
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c2
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|c2
operator|.
name|currentRevision
argument_list|)
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// ...and the committer and description should be correct
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
decl_stmt|;
name|GitPerson
name|committer
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|committer
decl_stmt|;
name|assertThat
argument_list|(
name|committer
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|committer
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|description
decl_stmt|;
name|assertThat
argument_list|(
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Rebase"
argument_list|)
expr_stmt|;
comment|// ...and the approval was copied
name|LabelInfo
name|cr
init|=
name|c2
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Rebasing the second change again should fail
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Change is already up to date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseOnChangeNumber ()
specifier|public
name|void
name|rebaseOnChangeNumber
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchTip
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|ci2
init|=
name|get
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
decl_stmt|;
name|RevisionInfo
name|ri2
init|=
name|ci2
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|ci2
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ri2
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|RebaseInput
name|in
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|base
operator|=
name|id1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ci2
operator|=
name|get
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
expr_stmt|;
name|ri2
operator|=
name|ci2
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|ci2
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ri2
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RelatedChangeAndCommitInfo
argument_list|>
name|related
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ri2
operator|.
name|_number
argument_list|)
operator|.
name|related
argument_list|()
operator|.
name|changes
decl_stmt|;
name|assertThat
argument_list|(
name|related
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|related
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_changeNumber
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|related
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_revisionNumber
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|related
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_changeNumber
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|related
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_revisionNumber
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseOnClosedChange ()
specifier|public
name|void
name|rebaseOnClosedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchTip
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|ci2
init|=
name|get
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
decl_stmt|;
name|RevisionInfo
name|ri2
init|=
name|ci2
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|ci2
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ri2
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
comment|// Submit first change.
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Rebase second change on first change.
name|RebaseInput
name|in
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|base
operator|=
name|id1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ci2
operator|=
name|get
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
expr_stmt|;
name|ri2
operator|=
name|ci2
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|ci2
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ri2
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ri2
operator|.
name|_number
argument_list|)
operator|.
name|related
argument_list|()
operator|.
name|changes
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseOnNonExistingChange ()
specifier|public
name|void
name|rebaseOnNonExistingChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|RebaseInput
name|in
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|base
operator|=
literal|"999999"
expr_stmt|;
name|UnprocessableEntityException
name|exception
init|=
name|assertThrows
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|rebase
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Base change not found: "
operator|+
name|in
operator|.
name|base
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseFromRelationChainToClosedChange ()
specifier|public
name|void
name|rebaseFromRelationChainToClosedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r3
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Submit first change.
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Rebase third change on first change.
name|RebaseInput
name|in
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|base
operator|=
name|id1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r3
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|id3
init|=
name|r3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|ci3
init|=
name|get
argument_list|(
name|r3
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
decl_stmt|;
name|RevisionInfo
name|ri3
init|=
name|ci3
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|ci3
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ri3
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id3
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ri3
operator|.
name|_number
argument_list|)
operator|.
name|related
argument_list|()
operator|.
name|changes
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseNotAllowedWithoutPermission ()
specifier|public
name|void
name|rebaseNotAllowedWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Approve and submit the first change
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Rebase the second
name|String
name|changeId
init|=
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rebase not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseAllowedWithPermission ()
specifier|public
name|void
name|rebaseAllowedWithPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Approve and submit the first change
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|REBASE
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Rebase the second
name|String
name|changeId
init|=
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|rebase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseNotAllowedWithoutPushPermission ()
specifier|public
name|void
name|rebaseNotAllowedWithoutPushPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Approve and submit the first change
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|REBASE
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Rebase the second
name|String
name|changeId
init|=
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rebase not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseNotAllowedForOwnerWithoutPushPermission ()
specifier|public
name|void
name|rebaseNotAllowedForOwnerWithoutPushPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Approve and submit the first change
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Rebase the second
name|String
name|changeId
init|=
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rebase not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNewChangeAsAdmin ()
specifier|public
name|void
name|deleteNewChangeAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteChangeAsUser
argument_list|(
name|admin
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|cloneAs
operator|=
literal|"user"
argument_list|)
DECL|method|deleteNewChangeAsNormalUser ()
specifier|public
name|void
name|deleteNewChangeAsNormalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delete not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNewChangeAsUserWithDeleteChangesPermissionForGroup ()
specifier|public
name|void
name|deleteNewChangeAsUserWithDeleteChangesPermissionForGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|deleteChangeAsUser
argument_list|(
name|admin
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNewChangeAsUserWithDeleteChangesPermissionForProjectOwners ()
specifier|public
name|void
name|deleteNewChangeAsUserWithDeleteChangesPermissionForProjectOwners
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupApi
name|groupApi
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"delete-change"
argument_list|)
argument_list|)
decl_stmt|;
name|groupApi
operator|.
name|addMembers
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|nameKey
init|=
name|Project
operator|.
name|nameKey
argument_list|(
name|name
argument_list|(
literal|"delete-change"
argument_list|)
argument_list|)
decl_stmt|;
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|nameKey
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|owners
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|owners
operator|.
name|add
argument_list|(
name|groupApi
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|createEmptyCommit
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|nameKey
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|PROJECT_OWNERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|deleteChangeAsUser
argument_list|(
name|nameKey
argument_list|,
name|admin
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteChangeAsUserWithDeleteOwnChangesPermissionForGroup ()
specifier|public
name|void
name|deleteChangeAsUserWithDeleteOwnChangesPermissionForGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|deleteChangeAsUser
argument_list|(
name|user
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteChangeAsUserWithDeleteOwnChangesPermissionForOwners ()
specifier|public
name|void
name|deleteChangeAsUserWithDeleteOwnChangesPermissionForOwners
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|deleteChangeAsUser
argument_list|(
name|user
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteChangeAsUser ( com.google.gerrit.acceptance.TestAccount owner, com.google.gerrit.acceptance.TestAccount deleteAs)
specifier|private
name|void
name|deleteChangeAsUser
parameter_list|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|owner
parameter_list|,
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|deleteAs
parameter_list|)
throws|throws
name|Exception
block|{
name|deleteChangeAsUser
argument_list|(
name|project
argument_list|,
name|owner
argument_list|,
name|deleteAs
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteChangeAsUser ( Project.NameKey projectName, com.google.gerrit.acceptance.TestAccount owner, com.google.gerrit.acceptance.TestAccount deleteAs)
specifier|private
name|void
name|deleteChangeAsUser
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|owner
parameter_list|,
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|deleteAs
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|owner
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|project
operator|=
name|projectName
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|branch
operator|=
literal|"refs/heads/master"
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"test"
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeInfo
operator|.
name|changeId
decl_stmt|;
name|int
name|id
init|=
name|changeInfo
operator|.
name|_number
decl_stmt|;
name|String
name|commit
init|=
name|changeInfo
operator|.
name|currentRevision
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|owner
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|deleteAs
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|String
name|ref
init|=
name|Change
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|toRefPrefix
argument_list|()
operator|+
literal|"1"
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|null
argument_list|,
name|commit
argument_list|,
name|commit
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|eventRecorder
operator|.
name|assertChangeDeletedEvents
argument_list|(
name|changeId
argument_list|,
name|deleteAs
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|DELETE_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteNewChangeOfAnotherUserAsAdmin ()
specifier|public
name|void
name|deleteNewChangeOfAnotherUserAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteChangeAsUser
argument_list|(
name|user
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNewChangeOfAnotherUserWithDeleteOwnChangesPermission ()
specifier|public
name|void
name|deleteNewChangeOfAnotherUserWithDeleteOwnChangesPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
try|try
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delete not permitted"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|deleteNewChangeForBranchWithoutCommits ()
specifier|public
name|void
name|deleteNewChangeForBranchWithoutCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|cloneAs
operator|=
literal|"user"
argument_list|)
DECL|method|deleteAbandonedChangeAsNormalUser ()
specifier|public
name|void
name|deleteAbandonedChangeAsNormalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delete not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|cloneAs
operator|=
literal|"user"
argument_list|)
DECL|method|deleteAbandonedChangeOfAnotherUserAsAdmin ()
specifier|public
name|void
name|deleteAbandonedChangeOfAnotherUserAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteMergedChange ()
specifier|public
name|void
name|deleteMergedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|changeResult
argument_list|)
expr_stmt|;
name|MethodNotAllowedException
name|thrown
init|=
name|assertThrows
argument_list|(
name|MethodNotAllowedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delete not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|cloneAs
operator|=
literal|"user"
argument_list|)
DECL|method|deleteMergedChangeWithDeleteOwnChangesPermission ()
specifier|public
name|void
name|deleteMergedChangeWithDeleteOwnChangesPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
try|try
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|changeResult
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|MethodNotAllowedException
name|thrown
init|=
name|assertThrows
argument_list|(
name|MethodNotAllowedException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delete not permitted"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|DELETE_OWN_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteNewChangeWithMergedPatchSet ()
specifier|public
name|void
name|deleteNewChangeWithMergedPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|changeResult
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|merge
argument_list|(
name|changeResult
argument_list|)
expr_stmt|;
name|setChangeStatus
argument_list|(
name|id
argument_list|,
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot delete change %s: patch set 1 is already merged"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteChangeUpdatesIndex ()
specifier|public
name|void
name|deleteChangeUpdatesIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|changeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|changeResult
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeIndex
name|idx
init|=
name|changeIndexCollection
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|ChangeData
argument_list|>
name|result
init|=
name|idx
operator|.
name|get
argument_list|(
name|id
argument_list|,
name|IndexedChangeQuery
operator|.
name|createOptions
argument_list|(
name|indexConfig
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|result
operator|=
name|idx
operator|.
name|get
argument_list|(
name|id
argument_list|,
name|IndexedChangeQuery
operator|.
name|createOptions
argument_list|(
name|indexConfig
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteChangeRemovesDraftComment ()
specifier|public
name|void
name|deleteChangeRemovesDraftComment
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|DraftInput
name|dri
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|dri
operator|.
name|message
operator|=
literal|"hello"
expr_stmt|;
name|dri
operator|.
name|path
operator|=
literal|"a.txt"
expr_stmt|;
name|dri
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|dri
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|num
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|num
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|num
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteChangeRemovesItsChangeEdit ()
specifier|public
name|void
name|deleteChangeRemovesItsChangeEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|String
name|expected
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
operator|+
literal|"/edit-"
operator|+
name|result
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
decl_stmt|;
name|assertThat
argument_list|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|expected
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteChangeDoesntRemoveOtherChangeEdits ()
specifier|public
name|void
name|deleteChangeDoesntRemoveOtherChangeEdits
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|irrelevantChangeResult
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|irrelevantChangeId
init|=
name|irrelevantChangeResult
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|irrelevantChangeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|irrelevantChangeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|FILE_NAME
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|irrelevantChangeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseUpToDateChange ()
specifier|public
name|void
name|rebaseUpToDateChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Change is already up to date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseConflict ()
specifier|public
name|void
name|rebaseConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"other content"
argument_list|,
literal|"If09d8782c1e59dd0b33de2b1ec3595d69cc10ad5"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseChangeBase ()
specifier|public
name|void
name|rebaseChangeBase
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r3
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RebaseInput
name|ri
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
comment|// rebase r3 directly onto master (break dep. towards r2)
name|ri
operator|.
name|base
operator|=
literal|""
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r3
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r3
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|PatchSet
name|ps3
init|=
name|r3
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps3
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// rebase r2 onto r3 (referenced by ref)
name|ri
operator|.
name|base
operator|=
name|ps3
operator|.
name|id
argument_list|()
operator|.
name|toRefName
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|PatchSet
name|ps2
init|=
name|r2
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps2
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// rebase r1 onto r2 (referenced by commit)
name|ri
operator|.
name|base
operator|=
name|ps2
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|PatchSet
name|ps1
init|=
name|r1
operator|.
name|getPatchSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ps1
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// rebase r1 onto r3 (referenced by change number)
name|ri
operator|.
name|base
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|r3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|ps1
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r1
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseChangeBaseRecursion ()
specifier|public
name|void
name|rebaseChangeBaseRecursion
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RebaseInput
name|ri
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|ri
operator|.
name|base
operator|=
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|String
name|expectedMessage
init|=
literal|"base change "
operator|+
name|r2
operator|.
name|getChangeId
argument_list|()
operator|+
literal|" is a descendant of the current change - recursion not allowed"
decl_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseAbandonedChange ()
specifier|public
name|void
name|rebaseAbandonedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|info
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"change is abandoned"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseOntoAbandonedChange ()
specifier|public
name|void
name|rebaseOntoAbandonedChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two changes both with the same parent
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~1"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Abandon the first change
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|info
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|RebaseInput
name|ri
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|ri
operator|.
name|base
operator|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"base change is abandoned: "
operator|+
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebaseOntoSelf ()
specifier|public
name|void
name|rebaseOntoSelf
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|commit
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|RebaseInput
name|ri
init|=
operator|new
name|RebaseInput
argument_list|()
decl_stmt|;
name|ri
operator|.
name|base
operator|=
name|commit
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|commit
argument_list|)
operator|.
name|rebase
argument_list|(
name|ri
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cannot rebase change onto itself"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|changeNoParentToOneParent ()
specifier|public
name|void
name|changeNoParentToOneParent
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create initial commit with no parent and push it as change, so that patch
comment|// set 1 has no parent
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// create another initial commit with no parent and push it directly into
comment|// the remote repository
name|c
operator|=
name|testRepo
operator|.
name|amend
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|message
argument_list|(
literal|"Initial Empty Commit"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|pr
operator|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
comment|// create a successor commit and push it as second patch set to the change,
comment|// so that patch set 2 has 1 parent
name|RevCommit
name|c2
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|parent
argument_list|(
name|c
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|pr
operator|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|RevisionInfo
name|rev
init|=
name|change
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|commit
operator|.
name|parents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that change kind is correctly detected as REWORK
name|assertThat
argument_list|(
name|rev
operator|.
name|kind
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeKind
operator|.
name|REWORK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitOfOtherUser ()
specifier|public
name|void
name|pushCommitOfOtherUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// admin pushes commit of user
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|CommitInfo
name|commit
init|=
name|change
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
decl_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|author
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|committer
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the author/committer was added as reviewer
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|from
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator (Code Review)"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"I'd like you to do a code review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: "
operator|+
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertMailReplyTo
argument_list|(
name|m
argument_list|,
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitOfOtherUserThatCannotSeeChange ()
specifier|public
name|void
name|pushCommitOfOtherUserThatCannotSeeChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create hidden project that is only visible to administrators
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// admin pushes commit of user
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|CommitInfo
name|commit
init|=
name|change
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
decl_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|author
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|committer
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the user cannot see the change
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the author/committer was NOT added as reviewer (he can't see
comment|// the change)
name|assertThat
argument_list|(
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitWithFooterOfOtherUser ()
specifier|public
name|void
name|pushCommitWithFooterOfOtherUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// admin pushes commit that references 'user' in a footer
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n\n"
operator|+
name|FooterConstants
operator|.
name|REVIEWED_BY
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|user
operator|.
name|newIdent
argument_list|()
operator|.
name|toExternalString
argument_list|()
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// check that 'user' was added as reviewer
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|user
operator|.
name|fullName
argument_list|()
operator|+
literal|",\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"I'd like you to do a code review."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: "
operator|+
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertMailReplyTo
argument_list|(
name|m
argument_list|,
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitWithFooterOfOtherUserThatCannotSeeChange ()
specifier|public
name|void
name|pushCommitWithFooterOfOtherUserThatCannotSeeChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create hidden project that is only visible to administrators
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// admin pushes commit that references 'user' in a footer
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n\n"
operator|+
name|FooterConstants
operator|.
name|REVIEWED_BY
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|user
operator|.
name|newIdent
argument_list|()
operator|.
name|toExternalString
argument_list|()
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// check that 'user' cannot see the change
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that 'user' was NOT added as cc ('user' can't see the change)
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerThatCannotSeeChange ()
specifier|public
name|void
name|addReviewerThatCannotSeeChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create hidden project that is only visible to administrators
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// create change
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// check the user cannot see the change
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to add user as reviewer
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|AddReviewerResult
name|r
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|input
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|error
argument_list|)
operator|.
name|contains
argument_list|(
literal|"does not have permission to see this change"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|reviewers
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerThatIsInactive ()
specifier|public
name|void
name|addReviewerThatIsInactive
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|name
argument_list|(
literal|"new-user"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|username
argument_list|)
operator|.
name|inactive
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|username
expr_stmt|;
name|AddReviewerResult
name|r
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|input
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|error
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Account '"
operator|+
name|username
operator|+
literal|"' only matches inactive accounts. To use an inactive account, retry with one of"
operator|+
literal|" the following exact account IDs:\n"
operator|+
name|id
operator|+
literal|": Name of user not set ("
operator|+
name|id
operator|+
literal|")\n"
operator|+
name|username
operator|+
literal|" does not identify a registered user or group"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|reviewers
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerThatIsInactiveById ()
specifier|public
name|void
name|addReviewerThatIsInactiveById
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|name
argument_list|(
literal|"new-user"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|username
argument_list|)
operator|.
name|inactive
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|AddReviewerResult
name|r
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|input
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|error
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ReviewerInfo
name|reviewer
init|=
name|r
operator|.
name|reviewers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewer
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewer
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerThatIsInactiveEmailFallback ()
specifier|public
name|void
name|addReviewerThatIsInactiveEmailFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInput
name|conf
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|conf
operator|.
name|enableReviewerByEmail
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|username
init|=
literal|"user@domain.com"
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|username
argument_list|)
operator|.
name|inactive
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|username
expr_stmt|;
name|in
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|CC
expr_stmt|;
name|AddReviewerResult
name|r
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|input
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|error
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// When adding by email, the reviewers field is also empty because we can't
comment|// render a ReviewerInfo object for a non-account.
name|assertThat
argument_list|(
name|r
operator|.
name|reviewers
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseClockStep
DECL|method|addReviewer ()
specifier|public
name|void
name|addReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddReviewerViaPostReview
argument_list|(
parameter_list|(
name|changeId
parameter_list|,
name|reviewer
parameter_list|)
lambda|->
block|{
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|reviewer
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseClockStep
DECL|method|addReviewerViaPostReview ()
specifier|public
name|void
name|addReviewerViaPostReview
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddReviewerViaPostReview
argument_list|(
parameter_list|(
name|changeId
parameter_list|,
name|reviewer
parameter_list|)
lambda|->
block|{
name|AddReviewerInput
name|addReviewerInput
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|addReviewerInput
operator|.
name|reviewer
operator|=
name|reviewer
expr_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|reviewInput
operator|.
name|reviewers
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|addReviewerInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddReviewerViaPostReview (AddReviewerCaller addReviewer)
specifier|private
name|void
name|testAddReviewerViaPostReview
parameter_list|(
name|AddReviewerCaller
name|addReviewer
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeResource
name|rsrc
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|oldETag
init|=
name|rsrc
operator|.
name|getETag
argument_list|()
decl_stmt|;
name|Timestamp
name|oldTs
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|addReviewer
operator|.
name|call
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|user
operator|.
name|fullName
argument_list|()
operator|+
literal|",\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"I'd like you to do a code review."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: "
operator|+
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertMailReplyTo
argument_list|(
name|m
argument_list|,
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Adding a reviewer records that user as reviewer.
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nobody was added as CC.
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Ensure ETag and lastUpdatedOn are updated.
name|rsrc
operator|=
name|parseResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldTs
argument_list|)
expr_stmt|;
comment|// Change status of reviewer and ensure ETag is updated.
name|oldETag
operator|=
name|rsrc
operator|.
name|getETag
argument_list|()
expr_stmt|;
name|accountOperations
operator|.
name|account
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|status
argument_list|(
literal|"new status"
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|rsrc
operator|=
name|parseResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postingMessageOnOwnChangeDoesntAddCallerAsReviewer ()
specifier|public
name|void
name|postingMessageOnOwnChangeDoesntAddCallerAsReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|reviewInput
operator|.
name|message
operator|=
literal|"Foo Bar"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listReviewers ()
specifier|public
name|void
name|listReviewers
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewers
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|username1
init|=
name|name
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|String
name|email1
init|=
name|username1
operator|+
literal|"@example.com"
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
name|username1
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email1
argument_list|)
operator|.
name|fullname
argument_list|(
literal|"User 1"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|email1
expr_stmt|;
name|in
operator|.
name|state
operator|=
name|ReviewerState
operator|.
name|CC
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|username
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|username
argument_list|()
argument_list|,
name|username1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notificationsForAddedWorkInProgressReviewers ()
specifier|public
name|void
name|notificationsForAddedWorkInProgressReviewers
parameter_list|()
throws|throws
name|Exception
block|{
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|ReviewInput
name|batchIn
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|batchIn
operator|.
name|reviewers
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Added reviewers not notified by default.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createWorkInProgressChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Default notification handling can be overridden.
name|r
operator|=
name|createWorkInProgressChange
argument_list|()
expr_stmt|;
name|in
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Reviewers added via PostReview also not notified by default.
comment|// In this case, the child ReviewerInput has a notify=OWNER_REVIEWERS
comment|// that should be ignored.
name|r
operator|=
name|createWorkInProgressChange
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|batchIn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Top-level notify property can force notifications when adding reviewer
comment|// via PostReview.
name|r
operator|=
name|createWorkInProgressChange
argument_list|()
expr_stmt|;
name|batchIn
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|batchIn
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseClockStep
DECL|method|addReviewerThatIsNotPerfectMatch ()
specifier|public
name|void
name|addReviewerThatIsNotPerfectMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeResource
name|rsrc
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|oldETag
init|=
name|rsrc
operator|.
name|getETag
argument_list|()
decl_stmt|;
name|Timestamp
name|oldTs
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
comment|// create a group named "ab" with one user: testUser
name|String
name|email
init|=
literal|"abcd@test.com"
decl_stmt|;
name|String
name|fullname
init|=
literal|"abcd"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountIdOfTestUser
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|fullname
argument_list|(
name|fullname
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|testGroup
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"ab"
argument_list|)
operator|.
name|create
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|GroupApi
name|groupApi
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|testGroup
argument_list|)
decl_stmt|;
name|groupApi
operator|.
name|description
argument_list|(
literal|"test group"
argument_list|)
expr_stmt|;
name|groupApi
operator|.
name|addMembers
argument_list|(
name|user
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
literal|"abc"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|Address
argument_list|(
name|fullname
argument_list|,
name|email
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|fullname
operator|+
literal|",\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"I'd like you to do a code review."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: "
operator|+
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertMailReplyTo
argument_list|(
name|m
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Adding a reviewer records that user as reviewer.
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accountIdOfTestUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure ETag and lastUpdatedOn are updated.
name|rsrc
operator|=
name|parseResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldTs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseClockStep
DECL|method|addGroupAsReviewersWhenANotPerfectMatchedUserExists ()
specifier|public
name|void
name|addGroupAsReviewersWhenANotPerfectMatchedUserExists
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeResource
name|rsrc
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|oldETag
init|=
name|rsrc
operator|.
name|getETag
argument_list|()
decl_stmt|;
name|Timestamp
name|oldTs
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
comment|// create a group named "kobe" with one user: lee
name|String
name|testUserFullname
init|=
literal|"kobebryant"
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
literal|"kobebryant"
argument_list|)
operator|.
name|preferredEmail
argument_list|(
literal|"kobebryant@test.com"
argument_list|)
operator|.
name|fullname
argument_list|(
name|testUserFullname
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|String
name|myGroupUserEmail
init|=
literal|"lee@test.com"
decl_stmt|;
name|String
name|myGroupUserFullname
init|=
literal|"lee"
decl_stmt|;
name|Account
operator|.
name|Id
name|accountIdOfGroupUser
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
literal|"lee"
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|myGroupUserEmail
argument_list|)
operator|.
name|fullname
argument_list|(
name|myGroupUserFullname
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|testGroup
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"kobe"
argument_list|)
operator|.
name|create
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|GroupApi
name|groupApi
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|testGroup
argument_list|)
decl_stmt|;
name|groupApi
operator|.
name|description
argument_list|(
literal|"test group"
argument_list|)
expr_stmt|;
name|groupApi
operator|.
name|addMembers
argument_list|(
name|myGroupUserFullname
argument_list|)
expr_stmt|;
comment|// ensure that user "user" is not in the group
name|groupApi
operator|.
name|removeMembers
argument_list|(
name|testUserFullname
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|testGroup
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|Address
argument_list|(
name|myGroupUserFullname
argument_list|,
name|myGroupUserEmail
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|myGroupUserFullname
operator|+
literal|",\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"I'd like you to do a code review."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change subject: "
operator|+
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertMailReplyTo
argument_list|(
name|m
argument_list|,
name|myGroupUserEmail
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Adding a reviewer records that user as reviewer.
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accountIdOfGroupUser
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure ETag and lastUpdatedOn are updated.
name|rsrc
operator|=
name|parseResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldTs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseClockStep
DECL|method|addSelfAsReviewer ()
specifier|public
name|void
name|addSelfAsReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeResource
name|rsrc
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|oldETag
init|=
name|rsrc
operator|.
name|getETag
argument_list|()
decl_stmt|;
name|Timestamp
name|oldTs
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// There should be no email notification when adding self
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Adding a reviewer records that user as reviewer.
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure ETag and lastUpdatedOn are updated.
name|rsrc
operator|=
name|parseResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldTs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|implicitlyCcOnNonVotingReviewPgStyle ()
specifier|public
name|void
name|implicitlyCcOnNonVotingReviewPgStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|testImplicitlyCcOnNonVotingReviewPgStyle
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|implicitlyCcOnNonVotingReviewForUserWithoutUserNamePgStyle ()
specifier|public
name|void
name|implicitlyCcOnNonVotingReviewForUserWithoutUserNamePgStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|accountWithoutUsername
init|=
name|accountCreator
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|accountWithoutUsername
operator|.
name|username
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|testImplicitlyCcOnNonVotingReviewPgStyle
argument_list|(
name|accountWithoutUsername
argument_list|)
expr_stmt|;
block|}
DECL|method|testImplicitlyCcOnNonVotingReviewPgStyle ( com.google.gerrit.acceptance.TestAccount testAccount)
specifier|private
name|void
name|testImplicitlyCcOnNonVotingReviewPgStyle
parameter_list|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|testAccount
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|testAccount
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewerState
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|testAccount
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Exact request format made by PG UI at ddc6b7160fe416fed9e7e3180489d44c82fd64f8.
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|drafts
operator|=
name|DraftHandling
operator|.
name|PUBLISH_ALL_REVISIONS
expr_stmt|;
name|in
operator|.
name|labels
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"comment"
expr_stmt|;
name|in
operator|.
name|reviewers
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewerState
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|testAccount
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|CC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|implicitlyAddReviewerOnVotingReview ()
specifier|public
name|void
name|implicitlyAddReviewerOnVotingReview
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
operator|.
name|message
argument_list|(
literal|"LGTM"
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ai
lambda|->
name|ai
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Further test: remove the vote, then comment again. The user should be
comment|// implicitly re-added to the ReviewerSet, as a CC.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|message
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ai
lambda|->
name|ai
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addReviewerToClosedChange ()
specifier|public
name|void
name|addReviewerToClosedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|CC
argument_list|)
expr_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|reviewers
operator|=
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|AccountInfo
argument_list|>
name|reviewerIt
init|=
name|reviewers
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|CC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|eTagChangesWhenOwnerUpdatesAccountStatus ()
specifier|public
name|void
name|eTagChangesWhenOwnerUpdatesAccountStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeResource
name|rsrc
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|String
name|oldETag
init|=
name|rsrc
operator|.
name|getETag
argument_list|()
decl_stmt|;
name|accountOperations
operator|.
name|account
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|status
argument_list|(
literal|"new status"
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|rsrc
operator|=
name|parseResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rsrc
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pluginCanContributeToETagComputation ()
specifier|public
name|void
name|pluginCanContributeToETagComputation
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|oldETag
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|TestChangeETagComputation
operator|.
name|withETag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|returningNullFromETagComputationDoesNotBreakGerrit ()
specifier|public
name|void
name|returningNullFromETagComputationDoesNotBreakGerrit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|oldETag
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|TestChangeETagComputation
operator|.
name|withETag
argument_list|(
literal|null
argument_list|)
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|throwingExceptionFromETagComputationDoesNotBreakGerrit ()
specifier|public
name|void
name|throwingExceptionFromETagComputationDoesNotBreakGerrit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|oldETag
init|=
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|TestChangeETagComputation
operator|.
name|withException
argument_list|(
operator|new
name|StorageException
argument_list|(
literal|"exception during test"
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|parseResource
argument_list|(
name|r
argument_list|)
operator|.
name|getETag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|emailNotificationForFileLevelComment ()
specifier|public
name|void
name|emailNotificationForFileLevelComment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ReviewInput
name|review
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|path
operator|=
name|PushOneCommit
operator|.
name|FILE_NAME
expr_stmt|;
name|comment
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"comment 1"
expr_stmt|;
name|review
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|review
operator|.
name|comments
operator|.
name|put
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|review
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidRange ()
specifier|public
name|void
name|invalidRange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ReviewInput
name|review
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|comment
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|range
operator|=
operator|new
name|Range
argument_list|()
expr_stmt|;
name|comment
operator|.
name|range
operator|.
name|startLine
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|range
operator|.
name|endLine
operator|=
literal|1
expr_stmt|;
name|comment
operator|.
name|range
operator|.
name|startCharacter
operator|=
operator|-
literal|1
expr_stmt|;
name|comment
operator|.
name|range
operator|.
name|endCharacter
operator|=
literal|0
expr_stmt|;
name|comment
operator|.
name|path
operator|=
name|PushOneCommit
operator|.
name|FILE_NAME
expr_stmt|;
name|comment
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"comment 1"
expr_stmt|;
name|review
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|comment
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|review
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listVotes ()
specifier|public
name|void
name|listVotes
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|dislike
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"accounts.visibility"
argument_list|,
name|value
operator|=
literal|"NONE"
argument_list|)
DECL|method|listVotesEvenWhenAccountsAreNotVisible ()
specifier|public
name|void
name|listVotesEvenWhenAccountsAreNotVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// check finding by address works
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check finding by id works
name|m
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsEntry
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeReviewerNoVotes ()
specifier|public
name|void
name|removeReviewerNoVotes
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelType
name|verified
init|=
name|label
argument_list|(
literal|"Verified"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_HEADS
operator|+
literal|"*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|ListChangesOption
operator|.
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewers
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Removed reviewer "
operator|+
name|user
operator|.
name|fullName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"with the following votes"
argument_list|)
expr_stmt|;
comment|// Make sure the reviewer can still be added again.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove again, and then try to remove once more to verify 404 is
comment|// returned.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeReviewer ()
specifier|public
name|void
name|removeReviewer
parameter_list|()
throws|throws
name|Exception
block|{
name|testRemoveReviewer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeNoNotify ()
specifier|public
name|void
name|removeNoNotify
parameter_list|()
throws|throws
name|Exception
block|{
name|testRemoveReviewer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveReviewer (boolean notify)
specifier|private
name|void
name|testRemoveReviewer
parameter_list|(
name|boolean
name|notify
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|AccountInfo
argument_list|>
name|reviewerIt
init|=
name|reviewers
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|DeleteReviewerInput
name|input
init|=
operator|new
name|DeleteReviewerInput
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|notify
condition|)
block|{
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|notify
condition|)
block|{
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Removed reviewer "
operator|+
name|user
operator|.
name|fullName
argument_list|()
operator|+
literal|" with the following votes"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"* Code-Review+1 by "
operator|+
name|user
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|reviewers
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reviewerIt
operator|=
name|reviewers
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewerIt
operator|.
name|next
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|eventRecorder
operator|.
name|assertReviewerDeletedEvents
argument_list|(
name|changeId
argument_list|,
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeReviewerNotPermitted ()
specifier|public
name|void
name|removeReviewerNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"remove reviewer not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeReviewerSelfFromMergedChangeNotPermitted ()
specifier|public
name|void
name|removeReviewerSelfFromMergedChangeNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"self"
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"remove reviewer not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeReviewerSelfFromAbandonedChangePermitted ()
specifier|public
name|void
name|removeReviewerSelfFromAbandonedChangePermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
literal|"self"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|eventRecorder
operator|.
name|assertReviewerDeletedEvents
argument_list|(
name|changeId
argument_list|,
name|user
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeOtherReviewerFromAbandonedChangeNotPermitted ()
specifier|public
name|void
name|removeOtherReviewerFromAbandonedChangeNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"remove reviewer not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVote ()
specifier|public
name|void
name|deleteVote
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|admin
operator|.
name|fullName
argument_list|()
operator|+
literal|" has removed a vote from this change."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Removed Code-Review+1 by "
operator|+
name|user
operator|.
name|fullName
argument_list|()
operator|+
literal|"<"
operator|+
name|user
operator|.
name|email
argument_list|()
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
comment|// Dummy 0 approval on the change to block vote copying to this patch set.
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessageInfo
name|message
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|c
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Removed Code-Review+1 by User<user@example.com>\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVoteNotifyNone ()
specifier|public
name|void
name|deleteVoteNotifyNone
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DeleteVoteInput
name|in
init|=
operator|new
name|DeleteVoteInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|label
operator|=
literal|"Code-Review"
expr_stmt|;
name|in
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVoteNotifyAccount ()
specifier|public
name|void
name|deleteVoteNotifyAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|DeleteVoteInput
name|in
init|=
operator|new
name|DeleteVoteInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|label
operator|=
literal|"Code-Review"
expr_stmt|;
name|in
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
comment|// notify unrelated account as TO
name|String
name|email
init|=
literal|"user2@example.com"
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|fullname
argument_list|(
literal|"User2"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|in
operator|.
name|notifyDetails
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|in
operator|.
name|notifyDetails
operator|.
name|put
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|NotifyInfo
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertNotifyTo
argument_list|(
name|email
argument_list|,
literal|"User2"
argument_list|)
expr_stmt|;
comment|// notify unrelated account as CC
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|in
operator|.
name|notifyDetails
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|in
operator|.
name|notifyDetails
operator|.
name|put
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
operator|new
name|NotifyInfo
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertNotifyCc
argument_list|(
name|email
argument_list|,
literal|"User2"
argument_list|)
expr_stmt|;
comment|// notify unrelated account as BCC
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|in
operator|.
name|notifyDetails
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|in
operator|.
name|notifyDetails
operator|.
name|put
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
operator|new
name|NotifyInfo
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertNotifyBcc
argument_list|(
name|email
argument_list|,
literal|"User2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVoteNotPermitted ()
specifier|public
name|void
name|deleteVoteNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delete vote not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonVotingReviewerStaysAfterSubmit ()
specifier|public
name|void
name|nonVotingReviewerStaysAfterSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelType
name|verified
init|=
name|label
argument_list|(
literal|"Verified"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|heads
init|=
literal|"refs/heads/*"
decl_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Set Code-Review+2 and Verified+1 as admin (change owner)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|commit
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|ReviewInput
name|input
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
decl_stmt|;
name|input
operator|.
name|label
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|commit
argument_list|)
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
comment|// Reviewers should only be "admin"
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|CC
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Add the user as reviewer
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Approve the change as user, then remove the approval
comment|// (only to confirm that the user does have Code-Review+2 permission)
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|commit
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|commit
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|noScore
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the change
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|commit
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// User should still be on the change
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange ()
specifier|public
name|void
name|createEmptyChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|branch
operator|=
name|Constants
operator|.
name|MASTER
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"Create a change from the API"
expr_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|info
operator|.
name|branch
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|in
operator|.
name|branch
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoQuery ()
specifier|public
name|void
name|queryChangesNoQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ChangeInfo
name|info
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|forChangeStatus
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isOpen
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|info
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ids
argument_list|)
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoResults ()
specifier|public
name|void
name|queryChangesNoResults
parameter_list|()
throws|throws
name|Exception
block|{
name|createChange
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"message:test"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"message:{"
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"fhqwhgads}"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChanges ()
specifier|public
name|void
name|queryChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} "
operator|+
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|results
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesLimit ()
specifier|public
name|void
name|queryChangesLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createChange
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|withLimit
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|results
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoLimit ()
specifier|public
name|void
name|queryChangesNoLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|QUERY_LIMIT
argument_list|)
operator|.
name|group
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|createChange
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|resultsWithDefaultLimit
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|resultsWithNoLimit
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|withNoLimit
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultsWithDefaultLimit
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resultsWithNoLimit
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesStart ()
specifier|public
name|void
name|queryChangesStart
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"}"
argument_list|)
operator|.
name|withStart
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|results
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesNoOptions ()
specifier|public
name|void
name|queryChangesNoOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|query
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|labels
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|messages
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|revisions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|actions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesOptions ()
specifier|public
name|void
name|queryChangesOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|labels
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|messages
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|actions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|revisions
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|withOptions
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|CHANGE_ACTIONS
argument_list|,
name|CURRENT_ACTIONS
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|MESSAGES
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|actions
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|RevisionInfo
name|rev
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|result
operator|.
name|revisions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|created
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|uploader
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|ref
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rev
operator|.
name|actions
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangesOwnerWithDifferentUsers ()
specifier|public
name|void
name|queryChangesOwnerWithDifferentUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|query
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} owner:self"
argument_list|)
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"owner:self project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"}"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|class|OperatorModule
specifier|private
specifier|static
class|class
name|OperatorModule
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|ChangeOperatorFactory
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|Exports
operator|.
name|named
argument_list|(
literal|"mytopic"
argument_list|)
argument_list|)
operator|.
name|toInstance
argument_list|(
parameter_list|(
name|cqb
parameter_list|,
name|value
parameter_list|)
lambda|->
operator|new
name|MyTopicPredicate
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MyTopicPredicate
specifier|private
specifier|static
class|class
name|MyTopicPredicate
extends|extends
name|PostFilterPredicate
argument_list|<
name|ChangeData
argument_list|>
block|{
DECL|method|MyTopicPredicate (String value)
name|MyTopicPredicate
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
literal|"mytopic"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (ChangeData cd)
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getTopic
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|queryChangesPluginOperator ()
specifier|public
name|void
name|queryChangesPluginOperator
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"mytopic_myplugin:foo"
decl_stmt|;
name|String
name|expectedMessage
init|=
literal|"Unsupported operator mytopic_myplugin:foo"
decl_stmt|;
name|assertThatQueryException
argument_list|(
name|query
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|installPlugin
argument_list|(
literal|"myplugin"
argument_list|,
name|OperatorModule
operator|.
name|class
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|i
operator|.
name|changeId
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThatQueryException
argument_list|(
name|query
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkReviewedFlagBeforeAndAfterReview ()
specifier|public
name|void
name|checkReviewedFlagBeforeAndAfterReview
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|REVIEWED
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|REVIEWED
argument_list|)
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|topic ()
specifier|public
name|void
name|topic
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"mytopic"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"mytopic"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editTopicWithoutPermissionNotAllowed ()
specifier|public
name|void
name|editTopicWithoutPermissionNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"mytopic"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"edit topic name not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editTopicWithPermissionAllowed ()
specifier|public
name|void
name|editTopicWithPermissionAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|EDIT_TOPIC_NAME
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|(
literal|"mytopic"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|topic
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"mytopic"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitted ()
specifier|public
name|void
name|submitted
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submitted
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submitter
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submitted
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submitter
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|submitter
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitStaleChange ()
specifier|public
name|void
name|submitStaleChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|disableChangeIndexWrites
argument_list|()
expr_stmt|;
try|try
block|{
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableChangeIndexWrites
argument_list|()
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitNotAllowedWithoutPermission ()
specifier|public
name|void
name|submitNotAllowedWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"submit not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitAllowedWithPermission ()
specifier|public
name|void
name|submitAllowedWithPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|check ()
specifier|public
name|void
name|check
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|problems
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|CHECK
argument_list|)
operator|.
name|problems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitFooters ()
specifier|public
name|void
name|commitFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelType
name|verified
init|=
name|label
argument_list|(
literal|"Verified"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
decl_stmt|;
name|LabelType
name|custom1
init|=
name|label
argument_list|(
literal|"Custom1"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|)
decl_stmt|;
name|LabelType
name|custom2
init|=
name|label
argument_list|(
literal|"Custom2"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|custom1
operator|.
name|getName
argument_list|()
argument_list|,
name|custom1
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|custom2
operator|.
name|getName
argument_list|()
argument_list|,
name|custom2
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|custom1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|custom2
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"new content"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Verified"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Custom1"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Custom2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|COMMIT_FOOTERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// No footers except on latest patch set.
name|assertThat
argument_list|(
name|actual
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|commitWithFooters
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|footers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|actual
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|commitWithFooters
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// remove subject + blank line
name|footers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|footers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedFooters
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Change-Id: "
operator|+
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Reviewed-on: "
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
literal|"c/"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"/+/"
operator|+
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Reviewed-by: Administrator<admin@example.com>"
argument_list|,
literal|"Custom2: Administrator<admin@example.com>"
argument_list|,
literal|"Tested-by: Administrator<admin@example.com>"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|footers
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedFooters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|customCommitFooters ()
specifier|public
name|void
name|customCommitFooters
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|actual
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
parameter_list|(
name|newCommitMessage
parameter_list|,
name|original
parameter_list|,
name|mergeTip
parameter_list|,
name|destination
parameter_list|)
lambda|->
block|{
name|assertThat
argument_list|(
name|original
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|mergeTip
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newCommitMessage
operator|+
literal|"Custom: "
operator|+
name|destination
operator|.
name|branch
argument_list|()
return|;
block|}
argument_list|)
init|)
block|{
name|actual
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|COMMIT_FOOTERS
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|footers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|actual
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|commitWithFooters
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// remove subject + blank line
name|footers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|footers
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedFooters
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Change-Id: "
operator|+
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Reviewed-on: "
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
literal|"c/"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"/+/"
operator|+
name|change
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Custom: refs/heads/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|footers
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedFooters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultSearchDoesNotTouchDatabase ()
specifier|public
name|void
name|defaultSearchDoesNotTouchDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|createChange
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableNoteDb
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|withQuery
argument_list|(
literal|"project:{"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"} (status:open OR status:closed)"
argument_list|)
comment|// Options should match defaults in AccountDashboardScreen.
operator|.
name|withOption
argument_list|(
name|LABELS
argument_list|)
operator|.
name|withOption
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
operator|.
name|withOption
argument_list|(
name|REVIEWED
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|votable ()
specifier|public
name|void
name|votable
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|username
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|codeReview
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|approval
init|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
expr_stmt|;
name|codeReview
operator|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|approval
operator|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"gerrit.editGpgKeys"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.enableSignedPush"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|pushCertificates ()
specifier|public
name|void
name|pushCertificates
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|amendChange
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|PUSH_CERTIFICATES
argument_list|)
decl_stmt|;
name|RevisionInfo
name|rev1
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev1
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev1
operator|.
name|pushCertificate
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev1
operator|.
name|pushCertificate
operator|.
name|certificate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev1
operator|.
name|pushCertificate
operator|.
name|key
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|RevisionInfo
name|rev2
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rev2
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev2
operator|.
name|pushCertificate
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev2
operator|.
name|pushCertificate
operator|.
name|certificate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rev2
operator|.
name|pushCertificate
operator|.
name|key
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|anonymousRestApi ()
specifier|public
name|void
name|anonymousRestApi
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|info
operator|.
name|_number
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitsOnPatchSetCreation ()
specifier|public
name|void
name|commitsOnPatchSetCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"4711"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commitPatchSetCreation
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|changeMetaRef
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|c
operator|.
name|_number
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitPatchSetCreation
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create patch set 2"
argument_list|)
expr_stmt|;
name|PersonIdent
name|expectedAuthor
init|=
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|getAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|c
operator|.
name|updated
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitPatchSetCreation
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAuthor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitPatchSetCreation
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|c
operator|.
name|updated
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitPatchSetCreation
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RevCommit
name|commitChangeCreation
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitPatchSetCreation
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitChangeCreation
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create change"
argument_list|)
expr_stmt|;
name|expectedAuthor
operator|=
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|getAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|c
operator|.
name|created
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitChangeCreation
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAuthor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitChangeCreation
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|c
operator|.
name|created
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitChangeCreation
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createEmptyChangeOnNonExistingBranch ()
specifier|public
name|void
name|createEmptyChangeOnNonExistingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|branch
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"Create a change on new branch from the API"
expr_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|info
operator|.
name|branch
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|in
operator|.
name|branch
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChangeOnExistingBranchWithNewBranch ()
specifier|public
name|void
name|createEmptyChangeOnExistingBranchWithNewBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|branch
operator|=
name|Constants
operator|.
name|MASTER
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"Create a change on new branch from the API"
expr_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewPatchSetWithoutPermission ()
specifier|public
name|void
name|createNewPatchSetWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create new project with clean permissions
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Clone separate repositories of the same project as admin and as user
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|adminTestRepo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|userTestRepo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// Block default permission
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|ADD_PATCH_SET
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create change as admin
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|adminTestRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Fetch change
name|GitUtil
operator|.
name|fetch
argument_list|(
name|userTestRepo
argument_list|,
name|r1
operator|.
name|getPatchSet
argument_list|()
operator|.
name|refName
argument_list|()
operator|+
literal|":ps"
argument_list|)
expr_stmt|;
name|userTestRepo
operator|.
name|reset
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
comment|// Amend change as user
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|amendChange
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|,
name|user
argument_list|,
name|userTestRepo
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertErrorStatus
argument_list|(
literal|"cannot add patch set to "
operator|+
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewSetPatchWithPermission ()
specifier|public
name|void
name|createNewSetPatchWithPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clone separate repositories of the same project as admin and as user
name|TestRepository
argument_list|<
name|?
argument_list|>
name|adminTestRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// Create change as admin
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|adminTestRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Fetch change
name|GitUtil
operator|.
name|fetch
argument_list|(
name|userTestRepo
argument_list|,
name|r1
operator|.
name|getPatchSet
argument_list|()
operator|.
name|refName
argument_list|()
operator|+
literal|":ps"
argument_list|)
expr_stmt|;
name|userTestRepo
operator|.
name|reset
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
comment|// Amend change as user
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|amendChange
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|,
name|user
argument_list|,
name|userTestRepo
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewPatchSetAsOwnerWithoutPermission ()
specifier|public
name|void
name|createNewPatchSetAsOwnerWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create new project with clean permissions
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Clone separate repositories of the same project as admin and as user
name|TestRepository
argument_list|<
name|?
argument_list|>
name|adminTestRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|admin
argument_list|)
decl_stmt|;
comment|// Block default permission
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|ADD_PATCH_SET
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create change as admin
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|adminTestRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Fetch change
name|GitUtil
operator|.
name|fetch
argument_list|(
name|adminTestRepo
argument_list|,
name|r1
operator|.
name|getPatchSet
argument_list|()
operator|.
name|refName
argument_list|()
operator|+
literal|":ps"
argument_list|)
expr_stmt|;
name|adminTestRepo
operator|.
name|reset
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
comment|// Amend change as admin
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|amendChange
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|,
name|admin
argument_list|,
name|adminTestRepo
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergePatchSet ()
specifier|public
name|void
name|createMergePatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|start
init|=
name|pushTo
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|start
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// create a change for master
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|start
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|currentMaster
init|=
name|pushTo
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|currentMaster
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|parent
init|=
name|currentMaster
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// push a commit into dev branch
name|createBranch
argument_list|(
literal|"dev"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeA
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change A"
argument_list|,
literal|"A.txt"
argument_list|,
literal|"A content"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/dev"
argument_list|)
decl_stmt|;
name|changeA
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|MergeInput
name|mergeInput
init|=
operator|new
name|MergeInput
argument_list|()
decl_stmt|;
name|mergeInput
operator|.
name|source
operator|=
literal|"dev"
expr_stmt|;
name|MergePatchSetInput
name|in
init|=
operator|new
name|MergePatchSetInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|merge
operator|=
name|mergeInput
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"update change by merge ps2"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|createMergePatchSet
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|CURRENT_COMMIT
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergePatchSetInheritParent ()
specifier|public
name|void
name|createMergePatchSetInheritParent
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|start
init|=
name|pushTo
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|start
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// create a change for master
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// advance master branch
name|testRepo
operator|.
name|reset
argument_list|(
name|start
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|currentMaster
init|=
name|pushTo
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|currentMaster
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// push a commit into dev branch
name|createBranch
argument_list|(
literal|"dev"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeA
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change A"
argument_list|,
literal|"A.txt"
argument_list|,
literal|"A content"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/dev"
argument_list|)
decl_stmt|;
name|changeA
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|MergeInput
name|mergeInput
init|=
operator|new
name|MergeInput
argument_list|()
decl_stmt|;
name|mergeInput
operator|.
name|source
operator|=
literal|"dev"
expr_stmt|;
name|MergePatchSetInput
name|in
init|=
operator|new
name|MergePatchSetInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|merge
operator|=
name|mergeInput
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"update change by merge ps2 inherit parent of ps1"
expr_stmt|;
name|in
operator|.
name|inheritParent
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|createMergePatchSet
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|CURRENT_COMMIT
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|currentMaster
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergePatchSetCannotBaseOnInvisibleChange ()
specifier|public
name|void
name|createMergePatchSetCannotBaseOnInvisibleChange
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
comment|// Create a merged commit on 'foo' branch.
name|merge
argument_list|(
name|createChange
argument_list|(
literal|"refs/for/foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the base change on 'bar' branch.
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|String
name|baseChange
init|=
name|createChange
argument_list|(
literal|"refs/for/bar"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|baseChange
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|"set private"
argument_list|)
expr_stmt|;
comment|// Create the destination change on 'master' branch.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|UnprocessableEntityException
name|thrown
init|=
name|assertThrows
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|createMergePatchSet
argument_list|(
name|createMergePatchSetInput
argument_list|(
name|baseChange
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Read not permitted for "
operator|+
name|baseChange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergePatchSetBaseOnChange ()
specifier|public
name|void
name|createMergePatchSetBaseOnChange
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|createBranch
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
comment|// Create a merged commit on 'foo' branch.
name|merge
argument_list|(
name|createChange
argument_list|(
literal|"refs/for/foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the base change on 'bar' branch.
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
literal|"refs/for/bar"
argument_list|)
decl_stmt|;
name|String
name|baseChange
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|expectedParent
init|=
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Create the destination change on 'master' branch.
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|createMergePatchSet
argument_list|(
name|createMergePatchSetInput
argument_list|(
name|baseChange
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|,
name|CURRENT_COMMIT
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"create ps2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedParent
argument_list|)
expr_stmt|;
block|}
DECL|method|createMergePatchSetInput (String baseChange)
specifier|private
name|MergePatchSetInput
name|createMergePatchSetInput
parameter_list|(
name|String
name|baseChange
parameter_list|)
block|{
name|MergeInput
name|mergeInput
init|=
operator|new
name|MergeInput
argument_list|()
decl_stmt|;
name|mergeInput
operator|.
name|source
operator|=
literal|"foo"
expr_stmt|;
name|MergePatchSetInput
name|in
init|=
operator|new
name|MergePatchSetInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|merge
operator|=
name|mergeInput
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"create ps2"
expr_stmt|;
name|in
operator|.
name|inheritParent
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|baseChange
operator|=
name|baseChange
expr_stmt|;
return|return
name|in
return|;
block|}
annotation|@
name|Test
DECL|method|checkLabelsForUnsubmittedChange ()
specifier|public
name|void
name|checkLabelsForUnsubmittedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
comment|// add new label and assert that it's returned for existing changes
name|AccountGroup
operator|.
name|UUID
name|registeredUsers
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|LabelType
name|verified
init|=
name|TestLabels
operator|.
name|verified
argument_list|()
decl_stmt|;
name|String
name|heads
init|=
name|RefNames
operator|.
name|REFS_HEADS
operator|+
literal|"*"
decl_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|registeredUsers
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Verified"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// add an approval on the new label
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// remove label and assert that it's no longer returned for existing
comment|// changes, even if there is an approval for it
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|remove
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|forLabel
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|registeredUsers
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
comment|// abandon the change and see that the returned labels stay the same
comment|// while all permitted labels disappear.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkLabelsForMergedChange ()
specifier|public
name|void
name|checkLabelsForMergedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|LabelType
name|verified
init|=
name|TestLabels
operator|.
name|verified
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|registeredUsers
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|heads
init|=
name|RefNames
operator|.
name|REFS_HEADS
operator|+
literal|"*"
decl_stmt|;
comment|// add new label and assert that it's returned for existing changes
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|registeredUsers
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Verified"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// ignore the new label by Prolog submit rule and assert that the label is
comment|// no longer returned
name|GitUtil
operator|.
name|fetch
argument_list|(
name|testRepo
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
operator|+
literal|":config"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"config"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Ignore Verified"
argument_list|,
literal|"rules.pl"
argument_list|,
literal|"submit_rule(submit(CR)) :-\n  gerrit:max_with_block(-2, 2, 'Code-Review', CR)."
argument_list|)
decl_stmt|;
name|push2
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
comment|// add an approval on the new label and assert that the label is now
comment|// returned although it is ignored by the Prolog submit rule and hence not
comment|// included in the submit records
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Verified"
argument_list|)
expr_stmt|;
comment|// remove label and assert that it's no longer returned for existing
comment|// changes, even if there is an approval for it
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|remove
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|registeredUsers
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notifyConfigForDirectoryTriggersEmail ()
specifier|public
name|void
name|notifyConfigForDirectoryTriggersEmail
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Configure notifications on project level.
name|RevCommit
name|oldHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|GitUtil
operator|.
name|fetch
argument_list|(
name|testRepo
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
operator|+
literal|":config"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"config"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Configure Notifications"
argument_list|,
literal|"project.config"
argument_list|,
literal|"[notify \"my=notify-config\"]\n"
operator|+
literal|"  email = foo@test.com\n"
operator|+
literal|"  filter = dir:\\\"foo/bar/baz\\\""
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|oldHead
argument_list|)
expr_stmt|;
comment|// Push a change that matches the filter.
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Test change"
argument_list|,
literal|"foo/bar/baz/test.txt"
argument_list|,
literal|"some content"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Address
operator|.
name|parse
argument_list|(
literal|"foo@test.com"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Comment on the change.
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|reviewInput
operator|.
name|message
operator|=
literal|"some message"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Address
operator|.
name|parse
argument_list|(
literal|"foo@test.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkLabelsForMergedChangeWithNonAuthorCodeReview ()
specifier|public
name|void
name|checkLabelsForMergedChangeWithNonAuthorCodeReview
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Configure Non-Author-Code-Review
name|RevCommit
name|oldHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|GitUtil
operator|.
name|fetch
argument_list|(
name|testRepo
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
operator|+
literal|":config"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"config"
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Configure Non-Author-Code-Review"
argument_list|,
literal|"rules.pl"
argument_list|,
literal|"submit_rule(S) :-\n"
operator|+
literal|"  gerrit:default_submit(X),\n"
operator|+
literal|"  X =.. [submit | Ls],\n"
operator|+
literal|"  add_non_author_approval(Ls, R),\n"
operator|+
literal|"  S =.. [submit | R].\n"
operator|+
literal|"\n"
operator|+
literal|"add_non_author_approval(S1, S2) :-\n"
operator|+
literal|"  gerrit:commit_author(A),\n"
operator|+
literal|"  gerrit:commit_label(label('Code-Review', 2), R),\n"
operator|+
literal|"  R \\= A, !,\n"
operator|+
literal|"  S2 = [label('Non-Author-Code-Review', ok(R)) | S1].\n"
operator|+
literal|"add_non_author_approval(S1,"
operator|+
literal|" [label('Non-Author-Code-Review', need(_)) | S1])."
argument_list|)
decl_stmt|;
name|push2
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|oldHead
argument_list|)
expr_stmt|;
name|String
name|heads
init|=
name|RefNames
operator|.
name|REFS_HEADS
operator|+
literal|"*"
decl_stmt|;
comment|// Allow user to approve
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|TestLabels
operator|.
name|codeReview
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
literal|"Non-Author-Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|permittedLabels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkLabelsForAutoClosedChange ()
specifier|public
name|void
name|checkLabelsForAutoClosedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|labels
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
literal|"Code-Review"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxPermittedValueAllowed ()
specifier|public
name|void
name|maxPermittedValueAllowed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|minPermittedValue
init|=
operator|-
literal|2
decl_stmt|;
specifier|final
name|int
name|maxPermittedValue
init|=
operator|+
literal|2
decl_stmt|;
name|String
name|heads
init|=
literal|"refs/heads/*"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|username
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|codeReview
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|approval
init|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// default values
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
operator|.
name|min
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
operator|.
name|max
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
name|heads
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
name|minPermittedValue
argument_list|,
name|maxPermittedValue
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|c
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
expr_stmt|;
name|codeReview
operator|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|approval
operator|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
operator|.
name|min
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|minPermittedValue
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
operator|.
name|max
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|maxPermittedValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|maxPermittedValueBlocked ()
specifier|public
name|void
name|maxPermittedValueBlocked
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|blockLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|username
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|codeReview
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|codeReview
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|approval
init|=
name|codeReview
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|permittedVotingRange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonStrictLabelWithInvalidLabelPerDefault ()
specifier|public
name|void
name|nonStrictLabelWithInvalidLabelPerDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// Add a review with invalid labels.
name|ReviewInput
name|input
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Style"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|votes
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|votes
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|votes
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonStrictLabelWithInvalidValuePerDefault ()
specifier|public
name|void
name|nonStrictLabelWithInvalidValuePerDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// Add a review with invalid label values.
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.strictLabels"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|strictLabelWithInvalidLabel ()
specifier|public
name|void
name|strictLabelWithInvalidLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Style"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label \"Code-Style\" is not a configured label"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.strictLabels"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|strictLabelWithInvalidValue ()
specifier|public
name|void
name|strictLabelWithInvalidValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label \"Code-Review\": 3 is not a valid value"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unresolvedCommentsBlocked ()
specifier|public
name|void
name|unresolvedCommentsBlocked
parameter_list|()
throws|throws
name|Exception
block|{
name|modifySubmitRules
argument_list|(
literal|"submit_rule(submit(R)) :- \n"
operator|+
literal|"gerrit:unresolved_comments_count(0), \n"
operator|+
literal|"!,"
operator|+
literal|"gerrit:uploader(U), \n"
operator|+
literal|"R = label('All-Comments-Resolved', ok(U)).\n"
operator|+
literal|"submit_rule(submit(R)) :- \n"
operator|+
literal|"gerrit:unresolved_comments_count(U), \n"
operator|+
literal|"U> 0,"
operator|+
literal|"R = label('All-Comments-Resolved', need(_)). \n\n"
argument_list|)
expr_stmt|;
name|String
name|oldHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|oldHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|addComment
argument_list|(
name|result1
argument_list|,
literal|"comment 1"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addComment
argument_list|(
name|result2
argument_list|,
literal|"comment 2"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to submit 1 change due to the following problems"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"needs All-Comments-Resolved"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessage ()
specifier|public
name|void
name|changeCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests mutating the commit message as both the owner of the change and a regular user with
comment|// addPatchSet permission. Asserts that both cases succeed.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|acc
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|admin
argument_list|,
name|user
argument_list|)
control|)
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|acc
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newMessage
init|=
literal|"modified commit by "
operator|+
name|acc
operator|.
name|username
argument_list|()
operator|+
literal|"\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
name|newMessage
argument_list|)
expr_stmt|;
name|RevisionApi
name|rApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rApi
operator|.
name|files
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"/COMMIT_MSG"
argument_list|,
literal|"a.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rApi
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Edit commit message"
argument_list|)
expr_stmt|;
block|}
comment|// Verify tags, which should differ according to whether the change was WIP
comment|// at the time the commit message was edited. First, look at the last edit
comment|// we created above, when the change was not WIP.
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Move the change to WIP and edit the commit message again, to observe a
comment|// different tag. Must switch to change owner to move into WIP.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
name|String
name|newMessage
init|=
literal|"modified commit in WIP change\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
name|newMessage
argument_list|)
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_WIP_PATCH_SET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessageWithNoChangeIdSucceedsIfChangeIdNotRequired ()
specifier|public
name|void
name|changeCommitMessageWithNoChangeIdSucceedsIfChangeIdNotRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInput
name|configInput
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|configInput
operator|.
name|requireChangeId
operator|=
name|InheritableBoolean
operator|.
name|FALSE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|configInput
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|newMessage
init|=
literal|"modified commit\n"
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
name|newMessage
argument_list|)
expr_stmt|;
name|RevisionApi
name|rApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rApi
operator|.
name|files
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"/COMMIT_MSG"
argument_list|,
literal|"a.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessageWithNoChangeIdRetainsChangeID ()
specifier|public
name|void
name|changeCommitMessageWithNoChangeIdRetainsChangeID
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
literal|"modified commit\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"modified commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessageNullNotAllowed ()
specifier|public
name|void
name|changeCommitMessageNullNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
literal|"test\0commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"NUL character"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessageWithWrongChangeIdFails ()
specifier|public
name|void
name|changeCommitMessageWithWrongChangeIdFails
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|otherChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
literal|"modified commit\n\nChange-Id: "
operator|+
name|otherChange
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"wrong Change-Id footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessageWithoutPermissionFails ()
specifier|public
name|void
name|changeCommitMessageWithoutPermissionFails
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create new project with clean permissions
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|userTestRepo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// Block default permission
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|ADD_PATCH_SET
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create change as user
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|userTestRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Try to change the commit message
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"modifying commit message not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeCommitMessageWithSameMessageFails ()
specifier|public
name|void
name|changeCommitMessageWithSameMessageFails
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"test commit\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setMessage
argument_list|(
name|getCommitMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"new and existing commit message are the same"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fourByteEmoji ()
specifier|public
name|void
name|fourByteEmoji
parameter_list|()
throws|throws
name|Exception
block|{
comment|// U+1F601 GRINNING FACE WITH SMILING EYES
name|String
name|smile
init|=
operator|new
name|String
argument_list|(
name|Character
operator|.
name|toChars
argument_list|(
literal|0x1f601
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|smile
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"ð"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|smile
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Thanks, Java.
name|assertThat
argument_list|(
name|smile
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|String
name|subject
init|=
literal|"A happy change "
operator|+
name|smile
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|id
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ReviewInput
name|ri
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
decl_stmt|;
name|ri
operator|.
name|message
operator|=
literal|"I like it "
operator|+
name|smile
expr_stmt|;
name|ReviewInput
operator|.
name|CommentInput
name|ci
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|ci
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|ci
operator|.
name|message
operator|=
literal|"Good "
operator|+
name|smile
expr_stmt|;
name|ri
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|FILE_NAME
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ri
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|MESSAGES
argument_list|,
name|CURRENT_COMMIT
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|endsWith
argument_list|(
name|ri
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|startsWith
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|comments
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|comments
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ci
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putTopicExceedLimitFails ()
specifier|public
name|void
name|putTopicExceedLimitFails
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|topic
init|=
name|Stream
operator|.
name|generate
argument_list|(
parameter_list|()
lambda|->
literal|"t"
argument_list|)
operator|.
name|limit
argument_list|(
literal|2049
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|()
argument_list|)
decl_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|topic
argument_list|(
name|topic
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"topic length exceeds the limit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submittableAfterLosingPermissions_MaxWithBlock ()
specifier|public
name|void
name|submittableAfterLosingPermissions_MaxWithBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Label"
argument_list|,
name|LabelFunction
operator|.
name|MAX_WITH_BLOCK
argument_list|)
expr_stmt|;
name|submittableAfterLosingPermissions
argument_list|(
literal|"Label"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submittableAfterLosingPermissions_AnyWithBlock ()
specifier|public
name|void
name|submittableAfterLosingPermissions_AnyWithBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Label"
argument_list|,
name|LabelFunction
operator|.
name|ANY_WITH_BLOCK
argument_list|)
expr_stmt|;
name|submittableAfterLosingPermissions
argument_list|(
literal|"Label"
argument_list|)
expr_stmt|;
block|}
DECL|method|submittableAfterLosingPermissions (String label)
specifier|private
name|void
name|submittableAfterLosingPermissions
parameter_list|(
name|String
name|label
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|codeReviewLabel
init|=
literal|"Code-Review"
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|registered
init|=
name|REGISTERED_USERS
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|label
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|registered
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|codeReviewLabel
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|registered
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// Verify user's permitted range.
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
name|label
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
name|codeReviewLabel
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ReviewInput
name|input
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|label
argument_list|(
name|codeReviewLabel
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|input
operator|.
name|label
argument_list|(
name|label
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|codeReviewLabel
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|submittable
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|remove
argument_list|(
name|labelPermissionKey
argument_list|(
name|label
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|registered
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
name|labelPermissionKey
argument_list|(
name|codeReviewLabel
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|registered
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|codeReviewLabel
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|registered
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Verify user's new permitted range.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|change
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertPermitted
argument_list|(
name|change
argument_list|,
name|codeReviewLabel
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|submittable
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|draftCommentsShouldNotUpdateChangeTimestamp ()
specifier|public
name|void
name|draftCommentsShouldNotUpdateChangeTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createNewChange
argument_list|()
decl_stmt|;
name|Timestamp
name|changeTs
init|=
name|getChangeLastUpdate
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|DraftApi
name|draftApi
init|=
name|addDraftComment
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getChangeLastUpdate
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeTs
argument_list|)
expr_stmt|;
name|draftApi
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeLastUpdate
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeTs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deletingAllDraftCommentsShouldNotUpdateChangeTimestamp ()
specifier|public
name|void
name|deletingAllDraftCommentsShouldNotUpdateChangeTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createNewChange
argument_list|()
decl_stmt|;
name|Timestamp
name|changeTs
init|=
name|getChangeLastUpdate
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|addDraftComment
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeLastUpdate
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeTs
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteDraftComments
argument_list|(
operator|new
name|DeleteDraftCommentsInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeLastUpdate
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeTs
argument_list|)
expr_stmt|;
block|}
DECL|method|getChangeLastUpdate (String changeId)
specifier|private
name|Timestamp
name|getChangeLastUpdate
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|RestApiException
block|{
name|Timestamp
name|changeTs
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|updated
decl_stmt|;
return|return
name|changeTs
return|;
block|}
DECL|method|createNewChange ()
specifier|private
name|String
name|createNewChange
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|userRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|userRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
return|return
name|changeId
return|;
block|}
DECL|method|addDraftComment (String changeId)
specifier|private
name|DraftApi
name|addDraftComment
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|RestApiException
block|{
name|DraftInput
name|comment
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|comment
operator|.
name|message
operator|=
literal|"foo"
expr_stmt|;
name|comment
operator|.
name|path
operator|=
literal|"/foo"
expr_stmt|;
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|comment
argument_list|)
return|;
block|}
DECL|method|getCommitMessage (String changeId)
specifier|private
name|String
name|getCommitMessage
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|IOException
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"/COMMIT_MSG"
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|asString
argument_list|()
return|;
block|}
DECL|method|addComment ( PushOneCommit.Result r, String message, boolean omitDuplicateComments, Boolean unresolved, String inReplyTo)
specifier|private
name|void
name|addComment
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|message
parameter_list|,
name|boolean
name|omitDuplicateComments
parameter_list|,
name|Boolean
name|unresolved
parameter_list|,
name|String
name|inReplyTo
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewInput
operator|.
name|CommentInput
name|c
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|c
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|c
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|c
operator|.
name|unresolved
operator|=
name|unresolved
expr_stmt|;
name|c
operator|.
name|inReplyTo
operator|=
name|inReplyTo
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|comments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|in
operator|.
name|comments
operator|.
name|put
argument_list|(
name|c
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|omitDuplicateComments
operator|=
name|omitDuplicateComments
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|getReviewers (Collection<AccountInfo> r)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getReviewers
parameter_list|(
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|r
argument_list|,
name|a
lambda|->
name|Account
operator|.
name|id
argument_list|(
name|a
operator|.
name|_accountId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseResource (PushOneCommit.Result r)
specifier|private
name|ChangeResource
name|parseResource
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|parseChangeResource
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getReviewerState (String changeId, Account.Id accountId)
specifier|private
name|Optional
argument_list|<
name|ReviewerState
argument_list|>
name|getReviewerState
parameter_list|(
name|String
name|changeId
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ReviewerState
argument_list|>
name|states
init|=
name|c
operator|.
name|reviewers
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
operator|==
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|states
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|states
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|states
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
return|;
block|}
DECL|method|setChangeStatus (Change.Id id, Change.Status newStatus)
specifier|private
name|void
name|setChangeStatus
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|Change
operator|.
name|Status
name|newStatus
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|BatchUpdate
name|batchUpdate
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|batchUpdate
operator|.
name|addOp
argument_list|(
name|id
argument_list|,
operator|new
name|ChangeStatusUpdateOp
argument_list|(
name|newStatus
argument_list|)
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|ChangeStatus
name|changeStatus
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
decl_stmt|;
name|assertThat
argument_list|(
name|changeStatus
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newStatus
operator|.
name|asChangeStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ChangeStatusUpdateOp
specifier|private
specifier|static
class|class
name|ChangeStatusUpdateOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|newStatus
specifier|private
specifier|final
name|Change
operator|.
name|Status
name|newStatus
decl_stmt|;
DECL|method|ChangeStatusUpdateOp (Change.Status newStatus)
name|ChangeStatusUpdateOp
parameter_list|(
name|Change
operator|.
name|Status
name|newStatus
parameter_list|)
block|{
name|this
operator|.
name|newStatus
operator|=
name|newStatus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
name|change
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
comment|// Change status.
name|PatchSet
operator|.
name|Id
name|currentPatchSetId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|getUpdate
argument_list|(
name|currentPatchSetId
argument_list|)
operator|.
name|setStatus
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|modifySubmitRules (String newContent)
specifier|private
name|void
name|modifySubmitRules
parameter_list|(
name|String
name|newContent
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|testRepo
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|testRepo
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|author
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"rules.pl"
argument_list|,
name|newContent
argument_list|)
operator|.
name|message
argument_list|(
literal|"Modify rules.pl"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"trackingid.jira-bug.footer"
argument_list|,
name|value
operator|=
literal|"Bug:"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"trackingid.jira-bug.match"
argument_list|,
name|value
operator|=
literal|"JRA\\d{2,8}"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"trackingid.jira-bug.system"
argument_list|,
name|value
operator|=
literal|"JIRA"
argument_list|)
DECL|method|trackingIds ()
specifier|public
name|void
name|trackingIds
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n\n"
operator|+
literal|"Bug:JRA001"
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|TRACKING_IDS
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TrackingIdInfo
argument_list|>
name|trackingIds
init|=
name|change
operator|.
name|trackingIds
decl_stmt|;
name|assertThat
argument_list|(
name|trackingIds
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trackingIds
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|system
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"JIRA"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"JRA001"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starUnstar ()
specifier|public
name|void
name|starUnstar
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeIndexedCounter
name|changeIndexedCounter
init|=
operator|new
name|ChangeIndexedCounter
argument_list|()
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|changeIndexedCounter
argument_list|)
init|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|changeIndexedCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|info
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|contains
argument_list|(
name|DEFAULT_LABEL
argument_list|)
expr_stmt|;
name|changeIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|unstarChange
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|change
operator|=
name|info
argument_list|(
name|triplet
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|starred
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|stars
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|changeIndexedCounter
operator|.
name|assertReindexOf
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ignore ()
specifier|public
name|void
name|ignore
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|email
init|=
literal|"user2@example.com"
decl_stmt|;
name|String
name|fullname
init|=
literal|"User2"
decl_stmt|;
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|preferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|fullname
argument_list|(
name|fullname
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|AddReviewerInput
argument_list|()
expr_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|email
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|ignore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|ignored
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// New patch set notification is not sent to users ignoring the change
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Address
name|address
init|=
operator|new
name|Address
argument_list|(
name|fullname
argument_list|,
name|email
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|address
argument_list|)
expr_stmt|;
comment|// Review notification is not sent to users ignoring the change
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|address
argument_list|)
expr_stmt|;
comment|// Abandoned notification is not sent to users ignoring the change
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|messages
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|ignore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|ignored
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotIgnoreOwnChange ()
specifier|public
name|void
name|cannotIgnoreOwnChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|ignore
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cannot ignore own change"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotIgnoreStarredChange ()
specifier|public
name|void
name|cannotIgnoreStarredChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|starred
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|ignore
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The labels "
operator|+
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
operator|+
literal|" and "
operator|+
name|StarredChangesUtil
operator|.
name|IGNORE_LABEL
operator|+
literal|" are mutually exclusive. Only one of them can be set."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotStarIgnoredChange ()
specifier|public
name|void
name|cannotStarIgnoredChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|ignore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|ignored
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The labels "
operator|+
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
operator|+
literal|" and "
operator|+
name|StarredChangesUtil
operator|.
name|IGNORE_LABEL
operator|+
literal|" are mutually exclusive. Only one of them can be set."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|markAsReviewed ()
specifier|public
name|void
name|markAsReviewed
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|AddReviewerInput
name|in
init|=
operator|new
name|AddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|user
operator|.
name|email
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|markAsReviewed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user2
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetUnreviewedLabelForPatchSetThatAlreadyHasReviewedLabel ()
specifier|public
name|void
name|cannotSetUnreviewedLabelForPatchSetThatAlreadyHasReviewedLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|markAsReviewed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|changeId
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|StarredChangesUtil
operator|.
name|UNREVIEWED_LABEL
operator|+
literal|"/1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The labels "
operator|+
name|StarredChangesUtil
operator|.
name|REVIEWED_LABEL
operator|+
literal|"/"
operator|+
literal|1
operator|+
literal|" and "
operator|+
name|StarredChangesUtil
operator|.
name|UNREVIEWED_LABEL
operator|+
literal|"/"
operator|+
literal|1
operator|+
literal|" are mutually exclusive. Only one of them can be set."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetReviewedLabelForPatchSetThatAlreadyHasUnreviewedLabel ()
specifier|public
name|void
name|cannotSetReviewedLabelForPatchSetThatAlreadyHasUnreviewedLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|markAsReviewed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|changeId
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|StarredChangesUtil
operator|.
name|REVIEWED_LABEL
operator|+
literal|"/1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The labels "
operator|+
name|StarredChangesUtil
operator|.
name|REVIEWED_LABEL
operator|+
literal|"/"
operator|+
literal|1
operator|+
literal|" and "
operator|+
name|StarredChangesUtil
operator|.
name|UNREVIEWED_LABEL
operator|+
literal|"/"
operator|+
literal|1
operator|+
literal|" are mutually exclusive. Only one of them can be set."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setReviewedAndUnreviewedLabelsForDifferentPatchSets ()
specifier|public
name|void
name|setReviewedAndUnreviewedLabelsForDifferentPatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|markAsReviewed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|amendChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|markAsReviewed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewed
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getStars
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|StarredChangesUtil
operator|.
name|REVIEWED_LABEL
operator|+
literal|"/"
operator|+
literal|1
argument_list|,
name|StarredChangesUtil
operator|.
name|UNREVIEWED_LABEL
operator|+
literal|"/"
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetInvalidLabel ()
specifier|public
name|void
name|cannotSetInvalidLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// label cannot contain whitespace
name|String
name|invalidLabel
init|=
literal|"invalid label"
decl_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setStars
argument_list|(
name|changeId
argument_list|,
operator|new
name|StarsInput
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|invalidLabel
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid labels: "
operator|+
name|invalidLabel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeDetailsDoesNotRequireIndex ()
specifier|public
name|void
name|changeDetailsDoesNotRequireIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This set of options must be kept in sync with gr-rest-api-interface.js
name|Set
argument_list|<
name|ListChangesOption
argument_list|>
name|options
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|ALL_COMMITS
argument_list|,
name|ListChangesOption
operator|.
name|ALL_REVISIONS
argument_list|,
name|ListChangesOption
operator|.
name|CHANGE_ACTIONS
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_ACTIONS
argument_list|,
name|ListChangesOption
operator|.
name|DETAILED_LABELS
argument_list|,
name|ListChangesOption
operator|.
name|DOWNLOAD_COMMANDS
argument_list|,
name|ListChangesOption
operator|.
name|MESSAGES
argument_list|,
name|ListChangesOption
operator|.
name|SUBMITTABLE
argument_list|,
name|ListChangesOption
operator|.
name|WEB_LINKS
argument_list|,
name|ListChangesOption
operator|.
name|SKIP_MERGEABLE
argument_list|,
name|ListChangesOption
operator|.
name|SKIP_DIFFSTAT
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|int
name|number
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|_number
decl_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|number
argument_list|)
operator|.
name|get
argument_list|(
name|options
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createWorkInProgressChange ()
specifier|private
name|PushOneCommit
operator|.
name|Result
name|createWorkInProgressChange
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|pushTo
argument_list|(
literal|"refs/for/master%wip"
argument_list|)
return|;
block|}
DECL|method|createBranch (String branch)
specifier|private
name|BranchApi
name|createBranch
parameter_list|(
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|branch
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertThatQueryException (String query)
specifier|private
name|ThrowableSubject
name|assertThatQueryException
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
return|return
name|assertThat
argument_list|(
name|e
argument_list|)
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"expected BadRequestException"
argument_list|)
throw|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|AddReviewerCaller
specifier|private
interface|interface
name|AddReviewerCaller
block|{
DECL|method|call (String changeId, String reviewer)
name|void
name|call
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|reviewer
parameter_list|)
throws|throws
name|RestApiException
function_decl|;
block|}
block|}
end_class

end_unit

