begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Patch
operator|.
name|MERGE_LIST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|ObjectIds
operator|.
name|abbreviateName
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|HEAD
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevisionApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|MergeListIT
specifier|public
class|class
name|MergeListIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
DECL|field|merge
specifier|private
name|RevCommit
name|merge
decl_stmt|;
DECL|field|parent1
specifier|private
name|RevCommit
name|parent1
decl_stmt|;
DECL|field|grandParent1
specifier|private
name|RevCommit
name|grandParent1
decl_stmt|;
DECL|field|parent2
specifier|private
name|RevCommit
name|parent2
decl_stmt|;
DECL|field|grandParent2
specifier|private
name|RevCommit
name|grandParent2
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|gp1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"grand parent 1"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo-1.1"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-1.1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|grandParent1
operator|=
name|gp1
operator|.
name|getCommit
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|p1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"parent 1"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo-1.2"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-1.2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|parent1
operator|=
name|p1
operator|.
name|getCommit
argument_list|()
expr_stmt|;
comment|// reset HEAD in order to create a sibling of the first change
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|gp2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"grand parent 2"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo-2.1"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-2.1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|grandParent2
operator|=
name|gp2
operator|.
name|getCommit
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|p2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"parent 2"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo-2.2"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-2.2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|parent2
operator|=
name|p2
operator|.
name|getCommit
argument_list|()
expr_stmt|;
name|PushOneCommit
name|m
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"merge"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"foo-1"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-2"
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|p1
operator|.
name|getCommit
argument_list|()
argument_list|,
name|p2
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|m
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|merge
operator|=
name|result
operator|.
name|getCommit
argument_list|()
expr_stmt|;
name|changeId
operator|=
name|result
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getMergeList ()
specifier|public
name|void
name|getMergeList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CommitInfo
argument_list|>
name|mergeList
init|=
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|getMergeList
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|mergeList
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|parent2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergeList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|grandParent2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|mergeList
operator|=
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|getMergeList
argument_list|()
operator|.
name|withUninterestingParent
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|mergeList
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|parent1
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mergeList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|grandParent1
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getMergeListContent ()
specifier|public
name|void
name|getMergeListContent
parameter_list|()
throws|throws
name|Exception
block|{
name|BinaryResult
name|bin
init|=
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|file
argument_list|(
name|MERGE_LIST
argument_list|)
operator|.
name|content
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|content
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getMergeListContent
argument_list|(
name|parent2
argument_list|,
name|grandParent2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getFileList ()
specifier|public
name|void
name|getFileList
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|getFiles
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|MERGE_LIST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFiles
argument_list|(
name|changeId
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|MERGE_LIST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFiles
argument_list|(
name|changeId
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|MERGE_LIST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getFiles
argument_list|(
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|MERGE_LIST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDiffForMergeList ()
specifier|public
name|void
name|getDiffForMergeList
parameter_list|()
throws|throws
name|Exception
block|{
name|DiffInfo
name|diff
init|=
name|getMergeListDiff
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertDiffForNewFile
argument_list|(
name|diff
argument_list|,
name|merge
argument_list|,
name|MERGE_LIST
argument_list|,
name|getMergeListContent
argument_list|(
name|parent2
argument_list|,
name|grandParent2
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|getMergeListDiff
argument_list|(
name|changeId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertDiffForNewFile
argument_list|(
name|diff
argument_list|,
name|merge
argument_list|,
name|MERGE_LIST
argument_list|,
name|getMergeListContent
argument_list|(
name|parent2
argument_list|,
name|grandParent2
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|getMergeListDiff
argument_list|(
name|changeId
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertDiffForNewFile
argument_list|(
name|diff
argument_list|,
name|merge
argument_list|,
name|MERGE_LIST
argument_list|,
name|getMergeListContent
argument_list|(
name|parent1
argument_list|,
name|grandParent1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editMergeList ()
specifier|public
name|void
name|editMergeList
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|modifyFile
argument_list|(
name|MERGE_LIST
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
literal|"new content"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path: "
operator|+
name|MERGE_LIST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteMergeList ()
specifier|public
name|void
name|deleteMergeList
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|MERGE_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no changes were made"
argument_list|)
expr_stmt|;
block|}
DECL|method|getMergeListContent (RevCommit... commits)
specifier|private
name|String
name|getMergeListContent
parameter_list|(
name|RevCommit
modifier|...
name|commits
parameter_list|)
block|{
name|StringBuilder
name|mergeList
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Merge List:\n\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|commits
control|)
block|{
name|mergeList
operator|.
name|append
argument_list|(
literal|"* "
argument_list|)
operator|.
name|append
argument_list|(
name|abbreviateName
argument_list|(
name|c
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeList
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFiles (String changeId)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getFiles
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|files
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getFiles (String changeId, int parent)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getFiles
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|parent
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|files
argument_list|(
name|parent
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getMergeListDiff (String changeId)
specifier|private
name|DiffInfo
name|getMergeListDiff
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|file
argument_list|(
name|MERGE_LIST
argument_list|)
operator|.
name|diff
argument_list|()
return|;
block|}
DECL|method|getMergeListDiff (String changeId, int parent)
specifier|private
name|DiffInfo
name|getMergeListDiff
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|parent
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|current
argument_list|(
name|changeId
argument_list|)
operator|.
name|file
argument_list|(
name|MERGE_LIST
argument_list|)
operator|.
name|diff
argument_list|(
name|parent
argument_list|)
return|;
block|}
DECL|method|current (String changeId)
specifier|private
name|RevisionApi
name|current
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
return|;
block|}
block|}
end_class

end_unit

