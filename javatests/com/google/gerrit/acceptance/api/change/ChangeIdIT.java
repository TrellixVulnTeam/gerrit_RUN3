begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|DeprecatedIdentifierException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ChangeIdIT
specifier|public
class|class
name|ChangeIdIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|changeInfo
specifier|private
name|ChangeInfo
name|changeInfo
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|changeInfo
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"msg"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectChangeNumberReturnsChange ()
specifier|public
name|void
name|projectChangeNumberReturnsChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeApi
name|cApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|changeInfo
operator|.
name|_number
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectChangeNumberReturnsChangeWhenProjectContainsSlashes ()
specifier|public
name|void
name|projectChangeNumberReturnsChangeWhenProjectContainsSlashes
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ChangeInfo
name|ci
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|p
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"msg"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeApi
name|cApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|p
operator|.
name|get
argument_list|()
argument_list|,
name|ci
operator|.
name|_number
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ci
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongProjectInProjectChangeNumberReturnsNotFound ()
specifier|public
name|void
name|wrongProjectInProjectChangeNumberReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
literal|"unknown"
argument_list|,
name|changeInfo
operator|.
name|_number
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not found: unknown~"
operator|+
name|changeInfo
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongIdInProjectChangeNumberReturnsNotFound ()
specifier|public
name|void
name|wrongIdInProjectChangeNumberReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not found: "
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~"
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeNumberReturnsChange ()
specifier|public
name|void
name|changeNumberReturnsChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeApi
name|cApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongChangeNumberReturnsNotFound ()
specifier|public
name|void
name|wrongChangeNumberReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tripletChangeIdReturnsChange ()
specifier|public
name|void
name|tripletChangeIdReturnsChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeApi
name|cApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|changeInfo
operator|.
name|branch
argument_list|,
name|changeInfo
operator|.
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongProjectInTripletChangeIdReturnsNotFound ()
specifier|public
name|void
name|wrongProjectInTripletChangeIdReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
literal|"unknown"
argument_list|,
name|changeInfo
operator|.
name|branch
argument_list|,
name|changeInfo
operator|.
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not found: unknown~"
operator|+
name|changeInfo
operator|.
name|branch
operator|+
literal|"~"
operator|+
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongBranchInTripletChangeIdReturnsNotFound ()
specifier|public
name|void
name|wrongBranchInTripletChangeIdReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"unknown"
argument_list|,
name|changeInfo
operator|.
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not found: "
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~unknown~"
operator|+
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongIdInTripletChangeIdReturnsNotFound ()
specifier|public
name|void
name|wrongIdInTripletChangeIdReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unknownId
init|=
literal|"I1234567890"
decl_stmt|;
name|ResourceNotFoundException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|changeInfo
operator|.
name|branch
argument_list|,
name|unknownId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Not found: "
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~"
operator|+
name|changeInfo
operator|.
name|branch
operator|+
literal|"~"
operator|+
name|unknownId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|changeIdReturnsChange ()
specifier|public
name|void
name|changeIdReturnsChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ChangeId is not unique and this method needs a unique changeId to work.
comment|// Hence we generate a new change with a different content.
name|ChangeInfo
name|ci
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"different message"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeApi
name|cApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|ci
operator|.
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi
operator|.
name|get
argument_list|()
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ci
operator|.
name|_number
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wrongChangeIdReturnsNotFound ()
specifier|public
name|void
name|wrongChangeIdReturnsNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
literal|"I1234567890"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.api.allowedIdentifier"
argument_list|,
name|values
operator|=
block|{
literal|"PROJECT_NUMERIC_ID"
block|,
literal|"NUMERIC_ID"
block|}
argument_list|)
DECL|method|deprecatedChangeIdReturnsBadRequest ()
specifier|public
name|void
name|deprecatedChangeIdReturnsBadRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// project~changeNumber still works
name|ChangeApi
name|cApi1
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|changeInfo
operator|.
name|_number
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi1
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
comment|// Change number still works
name|ChangeApi
name|cApi2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cApi2
operator|.
name|get
argument_list|()
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeInfo
operator|.
name|changeId
argument_list|)
expr_stmt|;
comment|// IHash throws
name|ChangeInfo
name|ci
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"different message"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|DeprecatedIdentifierException
name|thrown
init|=
name|assertThrows
argument_list|(
name|DeprecatedIdentifierException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|ci
operator|.
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The provided change identifier "
operator|+
name|ci
operator|.
name|changeId
operator|+
literal|" is deprecated. Use 'project~changeNumber' instead."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

