begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
operator|.
name|MERGE_FIRST_PARENT_UPDATE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
operator|.
name|NO_CHANGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
operator|.
name|NO_CODE_CHANGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
operator|.
name|REWORK
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
operator|.
name|TRIVIAL_REBASE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|category
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|HEAD
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|CherryPickInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevisionApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|StickyApprovalsIT
specifier|public
class|class
name|StickyApprovalsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
comment|// Overwrite "Code-Review" label that is inherited from All-Projects.
comment|// This way changes to the "Code Review" label don't affect other tests.
name|LabelType
name|codeReview
init|=
name|category
argument_list|(
literal|"Code-Review"
argument_list|,
name|value
argument_list|(
literal|2
argument_list|,
literal|"Looks good to me, approved"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Looks good to me, but someone else must approve"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"I would prefer that you didn't submit this"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|2
argument_list|,
literal|"Do not submit"
argument_list|)
argument_list|)
decl_stmt|;
name|codeReview
operator|.
name|setCopyAllScoresIfNoChange
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|codeReview
operator|.
name|getName
argument_list|()
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
name|LabelType
name|verified
init|=
name|category
argument_list|(
literal|"Verified"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
decl_stmt|;
name|verified
operator|.
name|setCopyAllScoresIfNoChange
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|verified
operator|.
name|getName
argument_list|()
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|registeredUsers
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|heads
init|=
name|RefNames
operator|.
name|REFS_HEADS
operator|+
literal|"*"
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
name|Util
operator|.
name|codeReview
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|registeredUsers
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|cfg
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
name|Util
operator|.
name|verified
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|registeredUsers
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notSticky ()
specifier|public
name|void
name|notSticky
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotSticky
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|TRIVIAL_REBASE
argument_list|,
name|NO_CODE_CHANGE
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|,
name|NO_CHANGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stickyOnMinScore ()
specifier|public
name|void
name|stickyOnMinScore
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyMinScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeKind
name|changeKind
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|TRIVIAL_REBASE
argument_list|,
name|NO_CODE_CHANGE
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|,
name|NO_CHANGE
argument_list|)
control|)
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|changeKind
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|stickyOnMaxScore ()
specifier|public
name|void
name|stickyOnMaxScore
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeKind
name|changeKind
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|TRIVIAL_REBASE
argument_list|,
name|NO_CODE_CHANGE
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|,
name|NO_CHANGE
argument_list|)
control|)
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|changeKind
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|stickyOnTrivialRebase ()
specifier|public
name|void
name|stickyOnTrivialRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyAllScoresOnTrivialRebase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|TRIVIAL_REBASE
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|TRIVIAL_REBASE
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|TRIVIAL_REBASE
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|TRIVIAL_REBASE
argument_list|)
expr_stmt|;
name|assertNotSticky
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|NO_CODE_CHANGE
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that votes are sticky when trivial rebase is done by cherry-pick
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|changeId
operator|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|cherryPickChangeId
init|=
name|cherryPick
argument_list|(
name|changeId
argument_list|,
name|TRIVIAL_REBASE
argument_list|)
decl_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|cherryPickChangeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check that votes are not sticky when rework is done by cherry-pick
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|changeId
operator|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cherryPickChangeId
operator|=
name|cherryPick
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|cherryPickChangeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stickyOnNoCodeChange ()
specifier|public
name|void
name|stickyOnNoCodeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Verified"
argument_list|)
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|NO_CODE_CHANGE
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|NO_CODE_CHANGE
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|NO_CODE_CHANGE
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|NO_CODE_CHANGE
argument_list|)
expr_stmt|;
name|assertNotSticky
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|TRIVIAL_REBASE
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|stickyOnMergeFirstParentUpdate ()
specifier|public
name|void
name|stickyOnMergeFirstParentUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyAllScoresOnMergeFirstParentUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|NO_CHANGE
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
expr_stmt|;
name|assertNotSticky
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|NO_CODE_CHANGE
argument_list|,
name|TRIVIAL_REBASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removedVotesNotSticky ()
specifier|public
name|void
name|removedVotesNotSticky
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyAllScoresOnTrivialRebase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Verified"
argument_list|)
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeKind
name|changeKind
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|REWORK
argument_list|,
name|TRIVIAL_REBASE
argument_list|,
name|NO_CODE_CHANGE
argument_list|,
name|MERGE_FIRST_PARENT_UPDATE
argument_list|,
name|NO_CHANGE
argument_list|)
control|)
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|changeKind
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Remove votes by re-voting with 0
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|stickyAcrossMultiplePatchSets ()
specifier|public
name|void
name|stickyAcrossMultiplePatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Verified"
argument_list|)
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|REWORK
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|NO_CODE_CHANGE
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|NO_CODE_CHANGE
argument_list|)
expr_stmt|;
block|}
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyMinMaxAcrossMultiplePatchSets ()
specifier|public
name|void
name|copyMinMaxAcrossMultiplePatchSets
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|setCopyMinScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
comment|// Vote max score on PS1
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|REWORK
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Have someone else vote min score on PS2
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
comment|// No vote changes on PS3
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
operator|-
literal|2
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
comment|// Both users revote on PS4
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
comment|// New approvals shouldn't carry through to PS5
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|c
operator|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteStickyVote ()
specifier|public
name|void
name|deleteStickyVote
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|label
init|=
literal|"Code-Review"
decl_stmt|;
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveProjectConfig
argument_list|(
name|project
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
comment|// Vote max score on PS1
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|REWORK
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
name|label
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|detailedChange
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|admin
argument_list|,
name|label
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|detailedChange
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|admin
argument_list|,
name|label
argument_list|,
literal|2
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
comment|// Delete vote that was copied via sticky approval
name|deleteVote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|detailedChange
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|admin
argument_list|,
name|label
argument_list|,
literal|0
argument_list|,
name|REWORK
argument_list|)
expr_stmt|;
block|}
DECL|method|detailedChange (String changeId)
specifier|private
name|ChangeInfo
name|detailedChange
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|,
name|CURRENT_REVISION
argument_list|,
name|CURRENT_COMMIT
argument_list|)
return|;
block|}
DECL|method|assertNotSticky (Set<ChangeKind> changeKinds)
specifier|private
name|void
name|assertNotSticky
parameter_list|(
name|Set
argument_list|<
name|ChangeKind
argument_list|>
name|changeKinds
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|ChangeKind
name|changeKind
range|:
name|changeKinds
control|)
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|createChange
argument_list|(
name|changeKind
argument_list|)
decl_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|changeId
argument_list|,
operator|+
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|vote
argument_list|(
name|user
argument_list|,
name|changeId
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|updateChange
argument_list|(
name|changeId
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|admin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createChange (ChangeKind kind)
specifier|private
name|String
name|createChange
parameter_list|(
name|ChangeKind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|NO_CODE_CHANGE
case|:
case|case
name|REWORK
case|:
case|case
name|TRIVIAL_REBASE
case|:
case|case
name|NO_CHANGE
case|:
return|return
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
return|;
case|case
name|MERGE_FIRST_PARENT_UPDATE
case|:
return|return
name|createChangeForMergeCommit
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected change kind: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
DECL|method|updateChange (String changeId, ChangeKind changeKind)
specifier|private
name|void
name|updateChange
parameter_list|(
name|String
name|changeId
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|changeKind
condition|)
block|{
case|case
name|NO_CODE_CHANGE
case|:
name|noCodeChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
return|return;
case|case
name|REWORK
case|:
name|rework
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
return|return;
case|case
name|TRIVIAL_REBASE
case|:
name|trivialRebase
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
return|return;
case|case
name|MERGE_FIRST_PARENT_UPDATE
case|:
name|updateFirstParent
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
return|return;
case|case
name|NO_CHANGE
case|:
name|noChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
return|return;
default|default:
name|fail
argument_list|(
literal|"unexpected change kind: "
operator|+
name|changeKind
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|noCodeChange (String changeId)
specifier|private
name|void
name|noCodeChange
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|commitBuilder
init|=
name|testRepo
operator|.
name|amendRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|changeId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|commitBuilder
operator|.
name|message
argument_list|(
literal|"New subject "
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commitBuilder
operator|.
name|create
argument_list|()
expr_stmt|;
name|GitUtil
operator|.
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeKind
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NO_CODE_CHANGE
argument_list|)
expr_stmt|;
block|}
DECL|method|noChange (String changeId)
specifier|private
name|void
name|noChange
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|commitMessage
init|=
name|change
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|commitBuilder
init|=
name|testRepo
operator|.
name|amendRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|changeId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|commitBuilder
operator|.
name|message
argument_list|(
name|commitMessage
argument_list|)
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commitBuilder
operator|.
name|create
argument_list|()
expr_stmt|;
name|GitUtil
operator|.
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeKind
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|NO_CHANGE
argument_list|)
expr_stmt|;
block|}
DECL|method|rework (String changeId)
specifier|private
name|void
name|rework
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"new content "
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeKind
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|REWORK
argument_list|)
expr_stmt|;
block|}
DECL|method|trivialRebase (String changeId)
specifier|private
name|void
name|trivialRebase
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Other Change"
argument_list|,
literal|"a"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
literal|".txt"
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevisionApi
name|revision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
operator|.
name|label
argument_list|(
literal|"Verified"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|revision
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|revision
operator|.
name|submit
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeKind
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TRIVIAL_REBASE
argument_list|)
expr_stmt|;
block|}
DECL|method|createChangeForMergeCommit ()
specifier|private
name|String
name|createChangeForMergeCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|parent1
init|=
name|createChange
argument_list|(
literal|"parent 1"
argument_list|,
literal|"p1.txt"
argument_list|,
literal|"content 1"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|parent2
init|=
name|createChange
argument_list|(
literal|"parent 2"
argument_list|,
literal|"p2.txt"
argument_list|,
literal|"content 2"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|parent1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|merge
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|merge
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|parent1
operator|.
name|getCommit
argument_list|()
argument_list|,
name|parent2
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|merge
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|getChangeId
argument_list|()
return|;
block|}
DECL|method|updateFirstParent (String changeId)
specifier|private
name|void
name|updateFirstParent
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|detailedChange
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommitInfo
argument_list|>
name|parents
init|=
name|c
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
decl_stmt|;
name|String
name|parent1
init|=
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
decl_stmt|;
name|String
name|parent2
init|=
name|parents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|commit
decl_stmt|;
name|RevCommit
name|commitParent2
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|parent2
argument_list|)
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|parent1
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|newParent1
init|=
name|createChange
argument_list|(
literal|"new parent 1"
argument_list|,
literal|"p1-1.txt"
argument_list|,
literal|"content 1-1"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|merge
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|merge
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|newParent1
operator|.
name|getCommit
argument_list|()
argument_list|,
name|commitParent2
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|merge
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getChangeKind
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MERGE_FIRST_PARENT_UPDATE
argument_list|)
expr_stmt|;
block|}
DECL|method|cherryPick (String changeId, ChangeKind changeKind)
specifier|private
name|String
name|cherryPick
parameter_list|(
name|String
name|changeId
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|changeKind
condition|)
block|{
case|case
name|REWORK
case|:
case|case
name|TRIVIAL_REBASE
case|:
break|break;
case|case
name|NO_CODE_CHANGE
case|:
case|case
name|NO_CHANGE
case|:
case|case
name|MERGE_FIRST_PARENT_UPDATE
case|:
default|default:
name|fail
argument_list|(
literal|"unexpected change kind: "
operator|+
name|changeKind
argument_list|)
expr_stmt|;
block|}
name|testRepo
operator|.
name|reset
argument_list|(
name|getRemoteHead
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"other.txt"
argument_list|,
literal|"new content "
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|vote
argument_list|(
name|admin
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|String
name|subject
init|=
name|TRIVIAL_REBASE
operator|.
name|equals
argument_list|(
name|changeKind
argument_list|)
condition|?
name|PushOneCommit
operator|.
name|SUBJECT
else|:
literal|"Reworked change "
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"master"
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s\n\nChange-Id: %s"
argument_list|,
name|subject
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|c
operator|.
name|changeId
return|;
block|}
DECL|method|getChangeKind (String changeId)
specifier|private
name|ChangeKind
name|getChangeKind
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentRevision
argument_list|)
operator|.
name|kind
return|;
block|}
DECL|method|vote (TestAccount user, String changeId, String label, int vote)
specifier|private
name|void
name|vote
parameter_list|(
name|TestAccount
name|user
parameter_list|,
name|String
name|changeId
parameter_list|,
name|String
name|label
parameter_list|,
name|int
name|vote
parameter_list|)
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
name|label
argument_list|,
name|vote
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|vote (TestAccount user, String changeId, int codeReviewVote, int verifiedVote)
specifier|private
name|void
name|vote
parameter_list|(
name|TestAccount
name|user
parameter_list|,
name|String
name|changeId
parameter_list|,
name|int
name|codeReviewVote
parameter_list|,
name|int
name|verifiedVote
parameter_list|)
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
name|codeReviewVote
argument_list|)
operator|.
name|label
argument_list|(
literal|"Verified"
argument_list|,
name|verifiedVote
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteVote (TestAccount user, String changeId, String label)
specifier|private
name|void
name|deleteVote
parameter_list|(
name|TestAccount
name|user
parameter_list|,
name|String
name|changeId
parameter_list|,
name|String
name|label
parameter_list|)
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVotes (ChangeInfo c, TestAccount user, int codeReviewVote, int verifiedVote)
specifier|private
name|void
name|assertVotes
parameter_list|(
name|ChangeInfo
name|c
parameter_list|,
name|TestAccount
name|user
parameter_list|,
name|int
name|codeReviewVote
parameter_list|,
name|int
name|verifiedVote
parameter_list|)
block|{
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
name|codeReviewVote
argument_list|,
name|verifiedVote
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVotes ( ChangeInfo c, TestAccount user, int codeReviewVote, int verifiedVote, ChangeKind changeKind)
specifier|private
name|void
name|assertVotes
parameter_list|(
name|ChangeInfo
name|c
parameter_list|,
name|TestAccount
name|user
parameter_list|,
name|int
name|codeReviewVote
parameter_list|,
name|int
name|verifiedVote
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|)
block|{
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|"Code-Review"
argument_list|,
name|codeReviewVote
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
name|assertVotes
argument_list|(
name|c
argument_list|,
name|user
argument_list|,
literal|"Verified"
argument_list|,
name|verifiedVote
argument_list|,
name|changeKind
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVotes ( ChangeInfo c, TestAccount user, String label, int expectedVote, ChangeKind changeKind)
specifier|private
name|void
name|assertVotes
parameter_list|(
name|ChangeInfo
name|c
parameter_list|,
name|TestAccount
name|user
parameter_list|,
name|String
name|label
parameter_list|,
name|int
name|expectedVote
parameter_list|,
name|ChangeKind
name|changeKind
parameter_list|)
block|{
name|Integer
name|vote
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|!=
literal|null
operator|&&
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|.
name|all
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ApprovalInfo
name|approval
range|:
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|.
name|all
control|)
block|{
if|if
condition|(
name|approval
operator|.
name|_accountId
operator|==
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
condition|)
block|{
name|vote
operator|=
name|approval
operator|.
name|value
expr_stmt|;
break|break;
block|}
block|}
block|}
name|String
name|name
init|=
literal|"label = "
operator|+
name|label
decl_stmt|;
if|if
condition|(
name|changeKind
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
literal|"; changeKind = "
operator|+
name|changeKind
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|vote
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedVote
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

