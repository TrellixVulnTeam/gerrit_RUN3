begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.revision
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|revision
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|BlameInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RangeInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GetBlameIT
specifier|public
class|class
name|GetBlameIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|forNonExistingFile ()
specifier|public
name|void
name|forNonExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|(
literal|"Test Change"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"non-existing.txt"
argument_list|)
operator|.
name|blameRequest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// File doesn't exist in commit.
name|assertThat
argument_list|(
name|blameInfos
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forNonExistingFileFromBase ()
specifier|public
name|void
name|forNonExistingFileFromBase
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|(
literal|"Test Change"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"non-existing.txt"
argument_list|)
operator|.
name|blameRequest
argument_list|()
operator|.
name|forBase
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// File doesn't exist in base commit.
name|assertThat
argument_list|(
name|blameInfos
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forNewlyAddedFile ()
specifier|public
name|void
name|forNewlyAddedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|(
literal|"Test Change"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"foo.txt"
argument_list|)
operator|.
name|blameRequest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|blameInfos
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BlameInfo
name|blameInfo
init|=
name|blameInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|author
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|commitMsg
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|time
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getCommitTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|ranges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RangeInfo
name|rangeInfo
init|=
name|blameInfo
operator|.
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rangeInfo
operator|.
name|start
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeInfo
operator|.
name|end
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forNewlyAddedFileFromBase ()
specifier|public
name|void
name|forNewlyAddedFileFromBase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|(
literal|"Test Change"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"foo.txt"
argument_list|)
operator|.
name|blameRequest
argument_list|()
operator|.
name|forBase
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// File doesn't exist in base commit.
name|assertThat
argument_list|(
name|blameInfos
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forRecreatedFile ()
specifier|public
name|void
name|forRecreatedFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create change that adds 'foo.txt'.
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
comment|// Create change that deletes 'foo.txt'.
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Change 2"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
operator|.
name|rm
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
comment|// Create change that recreates 'foo.txt'.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"foo.txt"
argument_list|)
operator|.
name|blameRequest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|blameInfos
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BlameInfo
name|blameInfo
init|=
name|blameInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|author
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|commitMsg
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|time
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getCommitTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|blameInfo
operator|.
name|ranges
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RangeInfo
name|rangeInfo
init|=
name|blameInfo
operator|.
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rangeInfo
operator|.
name|start
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeInfo
operator|.
name|end
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forRecreatedFileFromBase ()
specifier|public
name|void
name|forRecreatedFileFromBase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create change that adds 'foo.txt'.
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
expr_stmt|;
comment|// Create change that deletes 'foo.txt'.
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Change 2"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
operator|.
name|rm
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
comment|// Create change that recreates 'foo.txt'.
name|String
name|changeId3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"FOO"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|blameInfos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId3
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
literal|"foo.txt"
argument_list|)
operator|.
name|blameRequest
argument_list|()
operator|.
name|forBase
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// File doesn't exist in base commit.
name|assertThat
argument_list|(
name|blameInfos
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

