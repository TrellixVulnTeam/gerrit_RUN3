begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.api.revision
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|api
operator|.
name|revision
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_CONTENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|PATCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|PATCH_FILE_ONLY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|SUBJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|COMMIT_MSG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|MERGE_LIST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|HEAD
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|CherryPickInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|CommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevisionApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CherryPickChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GitPerson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|MergeableInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|WebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|ChangeIndexedListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ETagView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MethodNotAllowedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|PatchSetWebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|GetRevisionActions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RevisionIT
specifier|public
class|class
name|RevisionIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|getRevisionActions
annotation|@
name|Inject
specifier|private
name|GetRevisionActions
name|getRevisionActions
decl_stmt|;
DECL|field|patchSetLinks
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|PatchSetWebLink
argument_list|>
name|patchSetLinks
decl_stmt|;
DECL|field|changeIndexedListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|ChangeIndexedListener
argument_list|>
name|changeIndexedListeners
decl_stmt|;
annotation|@
name|Test
DECL|method|reviewTriplet ()
specifier|public
name|void
name|reviewTriplet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewCurrent ()
specifier|public
name|void
name|reviewCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reviewNumber ()
specifier|public
name|void
name|reviewNumber
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|1
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|updateChange
argument_list|(
name|r
argument_list|,
literal|"new content"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|2
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submit ()
specifier|public
name|void
name|submit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postSubmitApproval ()
specifier|public
name|void
name|postSubmitApproval
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|label
init|=
literal|"Code-Review"
decl_stmt|;
name|ApprovalInfo
name|approval
init|=
name|getApproval
argument_list|(
name|changeId
argument_list|,
name|label
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|postSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Submit by direct push.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|":refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|approval
operator|=
name|getApproval
argument_list|(
name|changeId
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|postSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertPermitted
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Repeating the current label is allowed. Does not flip the postSubmit bit
comment|// due to deduplication codepath.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|approval
operator|=
name|getApproval
argument_list|(
name|changeId
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|postSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Reducing vote is not allowed.
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|dislike
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceConflictException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot reduce vote on labels for closed change: Code-Review"
argument_list|)
expr_stmt|;
block|}
name|approval
operator|=
name|getApproval
argument_list|(
name|changeId
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|postSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Increasing vote is allowed.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|approval
operator|=
name|getApproval
argument_list|(
name|changeId
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|postSubmit
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertPermitted
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
argument_list|,
literal|"Code-Review"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Decreasing to previous post-submit vote is still not allowed.
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|dislike
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceConflictException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot reduce vote on labels for closed change: Code-Review"
argument_list|)
expr_stmt|;
block|}
name|approval
operator|=
name|getApproval
argument_list|(
name|changeId
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|approval
operator|.
name|postSubmit
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postSubmitApprovalAfterVoteRemoved ()
specifier|public
name|void
name|postSubmitApprovalAfterVoteRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|username
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ApprovalInfo
argument_list|>
name|crUser
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|DETAILED_LABELS
argument_list|)
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|all
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
operator|==
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|crUser
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|crUser
operator|.
name|get
argument_list|()
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"Still LGTM"
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|cr
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|all
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
operator|==
name|user
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|postSubmit
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postSubmitDeleteApprovalNotAllowed ()
specifier|public
name|void
name|postSubmitDeleteApprovalNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cannot reduce vote on labels for closed change: Code-Review"
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestProjectInput
argument_list|(
name|submitType
operator|=
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
annotation|@
name|Test
DECL|method|approvalCopiedDuringSubmitIsNotPostSubmit ()
specifier|public
name|void
name|approvalCopiedDuringSubmitIsNotPostSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeData
name|cd
init|=
name|r
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|PatchSetApproval
name|psa
init|=
name|Iterators
operator|.
name|getOnlyElement
argument_list|(
name|cd
operator|.
name|currentApprovals
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
operator|!
name|a
operator|.
name|isLegacySubmit
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psa
operator|.
name|isPostSubmit
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|voteOnAbandonedChange ()
specifier|public
name|void
name|voteOnAbandonedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"change is closed"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|reject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|voteNotAllowedWithoutPermission ()
specifier|public
name|void
name|voteNotAllowedWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"is restricted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPick ()
specifier|public
name|void
name|cherryPick
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%topic=someTopic"
argument_list|)
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it goes to stable branch"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|destination
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CherryPickChangeInfo
name|changeInfo
init|=
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPickAsInfo
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|containsGitConflicts
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|ChangeApi
name|cherry
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
decl_stmt|;
name|ChangeInfo
name|changeInfoWithDetails
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfoWithDetails
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
init|=
name|changeInfoWithDetails
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|String
name|cherryPickedRevision
init|=
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
decl_stmt|;
name|String
name|expectedMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Patch Set 1: Cherry Picked\n\n"
operator|+
literal|"This patchset was cherry picked to branch %s as commit %s"
argument_list|,
name|in
operator|.
name|destination
argument_list|,
name|cherryPickedRevision
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|origIt
init|=
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|origIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|origIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|cherryIt
init|=
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|expectedMessage
operator|=
literal|"Patch Set 1: Cherry Picked from branch master."
expr_stmt|;
name|assertThat
argument_list|(
name|cherryIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|subject
argument_list|)
operator|.
name|contains
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"someTopic-foo"
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickSetChangeId ()
specifier|public
name|void
name|cherryPickSetChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|String
name|id
init|=
literal|"Ideadbeefdeadbeefdeadbeefdeadbeefdeadbe3f"
decl_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it goes to foo branch\n\nChange-Id: "
operator|+
name|id
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|destination
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|cherry
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// The cherry-pick honors the ChangeId specified in the input message:
name|RevisionInfo
name|revInfo
init|=
name|changeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revInfo
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|revInfo
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|endsWith
argument_list|(
name|id
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickWithNoTopic ()
specifier|public
name|void
name|cherryPickWithNoTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it goes to stable branch"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|destination
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|topic
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickWorkInProgressChange ()
specifier|public
name|void
name|cherryPickWorkInProgressChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%wip"
argument_list|)
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"cherry pick message"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|destination
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToSameBranch ()
specifier|public
name|void
name|cherryPickToSameBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"master"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it generates a new patch set\n\nChange-Id: "
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|ChangeInfo
name|cherryInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cherryInfo
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|cherryIt
init|=
name|cherryInfo
operator|.
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cherryIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherryIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToSameBranchWithRebase ()
specifier|public
name|void
name|cherryPickToSameBranchWithRebase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push a new change, then merge it
name|PushOneCommit
operator|.
name|Result
name|baseChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|baseChange
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|RevisionApi
name|baseRevision
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
operator|.
name|current
argument_list|()
decl_stmt|;
name|baseRevision
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|baseRevision
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Push a new change (change 1)
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Push another new change (change 2)
name|String
name|subject
init|=
literal|"Test change\n\nChange-Id: Ideadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
literal|"another_file.txt"
argument_list|,
literal|"another content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Change 2's parent should be change 1
name|assertThat
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|getParents
argument_list|()
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cherry pick change 2 onto the same branch
name|triplet
operator|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r2
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"master"
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|subject
expr_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ChangeInfo
name|cherryInfo
init|=
name|cherry
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cherryInfo
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|cherryIt
init|=
name|cherryInfo
operator|.
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cherryIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherryIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2."
argument_list|)
expr_stmt|;
comment|// Parent of change 2 should now be the change that was merged, i.e.
comment|// change 2 is rebased onto the head of the master branch.
name|String
name|newParent
init|=
name|cherryInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|cherryInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
decl_stmt|;
name|assertThat
argument_list|(
name|newParent
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|baseChange
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickIdenticalTree ()
specifier|public
name|void
name|cherryPickIdenticalTree
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it goes to stable branch"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|destination
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherry
operator|.
name|get
argument_list|()
operator|.
name|subject
argument_list|)
operator|.
name|contains
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cherry pick failed: identical tree"
argument_list|)
expr_stmt|;
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickConflict ()
specifier|public
name|void
name|cherryPickConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it goes to stable branch"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|destination
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"another content"
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/foo"
argument_list|)
expr_stmt|;
name|String
name|triplet
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|triplet
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|orig
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cherry pick failed: merge conflict"
argument_list|)
expr_stmt|;
name|orig
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickConflictWithAllowConflicts ()
specifier|public
name|void
name|cherryPickConflictWithAllowConflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
comment|// Create a branch and push a commit to it (by-passing review)
name|String
name|destBranch
init|=
literal|"foo"
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|destBranch
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destContent
init|=
literal|"some content"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|destContent
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/"
operator|+
name|destBranch
argument_list|)
expr_stmt|;
comment|// Create a change on master with a commit that conflicts with the commit on the other branch.
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|String
name|changeContent
init|=
literal|"another content"
decl_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|changeContent
argument_list|,
literal|"bar.txt"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master%topic=someTopic"
argument_list|)
decl_stmt|;
comment|// Verify before the cherry-pick that the change has exactly 1 message.
name|ChangeApi
name|changeApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeApi
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Cherry-pick the change to the other branch, that should fail with a conflict.
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
name|destBranch
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"Cherry-Pick"
expr_stmt|;
try|try
block|{
name|changeApi
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPickAsInfo
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceConflictException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Cherry pick failed: merge conflict"
argument_list|)
expr_stmt|;
block|}
comment|// Cherry-pick with auto merge should succeed.
name|in
operator|.
name|allowConflicts
operator|=
literal|true
expr_stmt|;
name|CherryPickChangeInfo
name|cherryPickChange
init|=
name|changeApi
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|cherryPickAsInfo
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cherryPickChange
operator|.
name|containsGitConflicts
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|cherryPickChange
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Verify that subject and topic on the cherry-pick change have been correctly populated.
name|assertThat
argument_list|(
name|cherryPickChange
operator|.
name|subject
argument_list|)
operator|.
name|contains
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherryPickChange
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"someTopic-"
operator|+
name|destBranch
argument_list|)
expr_stmt|;
comment|// Verify that the file content in the cherry-pick change is correct.
comment|// We expect that it has conflict markers to indicate the conflict.
name|BinaryResult
name|bin
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cherryPickChange
operator|.
name|_number
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|)
operator|.
name|content
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|String
name|fileContent
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|destSha1
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
name|destBranch
argument_list|)
operator|.
name|abbreviate
argument_list|(
literal|6
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|changeSha1
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|abbreviate
argument_list|(
literal|6
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fileContent
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"<<<<<<< HEAD   ("
operator|+
name|destSha1
operator|+
literal|" test commit)\n"
operator|+
name|destContent
operator|+
literal|"\n"
operator|+
literal|"=======\n"
operator|+
name|changeContent
operator|+
literal|"\n"
operator|+
literal|">>>>>>> CHANGE ("
operator|+
name|changeSha1
operator|+
literal|" test commit)\n"
argument_list|)
expr_stmt|;
comment|// Get details of cherry-pick change.
name|ChangeInfo
name|cherryPickChangeWithDetails
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cherryPickChange
operator|.
name|_number
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cherryPickChangeWithDetails
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Verify that a message has been posted on the original change.
name|String
name|cherryPickedRevision
init|=
name|cherryPickChangeWithDetails
operator|.
name|currentRevision
decl_stmt|;
name|changeApi
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
init|=
name|changeApi
operator|.
name|get
argument_list|()
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|origIt
init|=
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|origIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|origIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Patch Set 1: Cherry Picked\n\n"
operator|+
literal|"This patchset was cherry picked to branch %s as commit %s"
argument_list|,
name|in
operator|.
name|destination
argument_list|,
name|cherryPickedRevision
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that a message has been posted on the cherry-pick change.
name|assertThat
argument_list|(
name|cherryPickChangeWithDetails
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|cherryIt
init|=
name|cherryPickChangeWithDetails
operator|.
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cherryIt
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Patch Set 1: Cherry Picked from branch master.\n\n"
operator|+
literal|"The following files contain Git conflicts:\n"
operator|+
literal|"* "
operator|+
name|PushOneCommit
operator|.
name|FILE_NAME
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToExistingChange ()
specifier|public
name|void
name|cherryPickToExistingChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|t1
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|r1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|BranchInput
name|bin
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|bin
operator|.
name|revision
operator|=
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|FILE_NAME
argument_list|,
literal|"b"
argument_list|,
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/foo"
argument_list|)
decl_stmt|;
name|String
name|t2
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~foo~"
operator|+
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|t2
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|in
operator|.
name|message
operator|=
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|t1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceConflictException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot create new patch set of change "
operator|+
name|info
argument_list|(
name|t2
argument_list|)
operator|.
name|_number
operator|+
literal|" because it is abandoned"
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|t2
argument_list|)
operator|.
name|restore
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|t1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|t2
argument_list|,
name|ALL_REVISIONS
argument_list|)
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|t2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|file
argument_list|(
name|FILE_NAME
argument_list|)
operator|.
name|content
argument_list|()
operator|.
name|asString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickMergeRelativeToDefaultParent ()
specifier|public
name|void
name|cherryPickMergeRelativeToDefaultParent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent1FileName
init|=
literal|"a.txt"
decl_stmt|;
name|String
name|parent2FileName
init|=
literal|"b.txt"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeChangeResult
init|=
name|createCherryPickableMerge
argument_list|(
name|parent1FileName
argument_list|,
name|parent2FileName
argument_list|)
decl_stmt|;
name|String
name|cherryPickBranchName
init|=
literal|"branch_for_cherry_pick"
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|cherryPickBranchName
argument_list|)
argument_list|)
expr_stmt|;
name|CherryPickInput
name|cherryPickInput
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|cherryPickInput
operator|.
name|destination
operator|=
name|cherryPickBranchName
expr_stmt|;
name|cherryPickInput
operator|.
name|message
operator|=
literal|"Cherry-pick a merge commit to another branch"
expr_stmt|;
name|ChangeInfo
name|cherryPickedChangeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|mergeChangeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|cherryPickInput
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|cherryPickedFilesByName
init|=
name|cherryPickedChangeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|cherryPickedChangeInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|files
decl_stmt|;
name|assertThat
argument_list|(
name|cherryPickedFilesByName
argument_list|)
operator|.
name|containsKey
argument_list|(
name|parent2FileName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherryPickedFilesByName
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|parent1FileName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickMergeRelativeToSpecificParent ()
specifier|public
name|void
name|cherryPickMergeRelativeToSpecificParent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent1FileName
init|=
literal|"a.txt"
decl_stmt|;
name|String
name|parent2FileName
init|=
literal|"b.txt"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeChangeResult
init|=
name|createCherryPickableMerge
argument_list|(
name|parent1FileName
argument_list|,
name|parent2FileName
argument_list|)
decl_stmt|;
name|String
name|cherryPickBranchName
init|=
literal|"branch_for_cherry_pick"
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|cherryPickBranchName
argument_list|)
argument_list|)
expr_stmt|;
name|CherryPickInput
name|cherryPickInput
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|cherryPickInput
operator|.
name|destination
operator|=
name|cherryPickBranchName
expr_stmt|;
name|cherryPickInput
operator|.
name|message
operator|=
literal|"Cherry-pick a merge commit to another branch"
expr_stmt|;
name|cherryPickInput
operator|.
name|parent
operator|=
literal|2
expr_stmt|;
name|ChangeInfo
name|cherryPickedChangeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|mergeChangeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|cherryPickInput
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|cherryPickedFilesByName
init|=
name|cherryPickedChangeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|cherryPickedChangeInfo
operator|.
name|currentRevision
argument_list|)
operator|.
name|files
decl_stmt|;
name|assertThat
argument_list|(
name|cherryPickedFilesByName
argument_list|)
operator|.
name|containsKey
argument_list|(
name|parent1FileName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cherryPickedFilesByName
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|parent2FileName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickMergeUsingInvalidParent ()
specifier|public
name|void
name|cherryPickMergeUsingInvalidParent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent1FileName
init|=
literal|"a.txt"
decl_stmt|;
name|String
name|parent2FileName
init|=
literal|"b.txt"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeChangeResult
init|=
name|createCherryPickableMerge
argument_list|(
name|parent1FileName
argument_list|,
name|parent2FileName
argument_list|)
decl_stmt|;
name|String
name|cherryPickBranchName
init|=
literal|"branch_for_cherry_pick"
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|cherryPickBranchName
argument_list|)
argument_list|)
expr_stmt|;
name|CherryPickInput
name|cherryPickInput
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|cherryPickInput
operator|.
name|destination
operator|=
name|cherryPickBranchName
expr_stmt|;
name|cherryPickInput
operator|.
name|message
operator|=
literal|"Cherry-pick a merge commit to another branch"
expr_stmt|;
name|cherryPickInput
operator|.
name|parent
operator|=
literal|0
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cherry Pick: Parent 0 does not exist. Please specify a parent in range [1, 2]."
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|mergeChangeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|cherryPickInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickMergeUsingNonExistentParent ()
specifier|public
name|void
name|cherryPickMergeUsingNonExistentParent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent1FileName
init|=
literal|"a.txt"
decl_stmt|;
name|String
name|parent2FileName
init|=
literal|"b.txt"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeChangeResult
init|=
name|createCherryPickableMerge
argument_list|(
name|parent1FileName
argument_list|,
name|parent2FileName
argument_list|)
decl_stmt|;
name|String
name|cherryPickBranchName
init|=
literal|"branch_for_cherry_pick"
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|cherryPickBranchName
argument_list|)
argument_list|)
expr_stmt|;
name|CherryPickInput
name|cherryPickInput
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|cherryPickInput
operator|.
name|destination
operator|=
name|cherryPickBranchName
expr_stmt|;
name|cherryPickInput
operator|.
name|message
operator|=
literal|"Cherry-pick a merge commit to another branch"
expr_stmt|;
name|cherryPickInput
operator|.
name|parent
operator|=
literal|3
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cherry Pick: Parent 3 does not exist. Please specify a parent in range [1, 2]."
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|mergeChangeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|cherryPickInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickNotify ()
specifier|public
name|void
name|cherryPickNotify
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"branch-1"
argument_list|)
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"branch-2"
argument_list|)
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"branch-3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creates a change for 'admin'.
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"~master~"
operator|+
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// 'user' cherry-picks the change to a new branch, the source change's author/committer('admin')
comment|// will be added as a reviewer of the newly created change.
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
operator|=
literal|"it goes to a new branch"
expr_stmt|;
comment|// Enable the notification. 'admin' as a reviewer should be notified.
name|input
operator|.
name|destination
operator|=
literal|"branch-1"
expr_stmt|;
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|ALL
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertNotifyCc
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// Disable the notification. 'admin' as a reviewer should not be notified any more.
name|input
operator|.
name|destination
operator|=
literal|"branch-2"
expr_stmt|;
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Disable the notification. The user provided in the 'notifyDetails' should still be notified.
name|TestAccount
name|userToNotify
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"branch-3"
expr_stmt|;
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|input
operator|.
name|notifyDetails
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|NotifyInfo
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|userToNotify
operator|.
name|email
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertNotifyTo
argument_list|(
name|userToNotify
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickKeepReviewers ()
specifier|public
name|void
name|cherryPickKeepReviewers
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"stable"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change is created by 'admin'.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Change is approved by 'admin2'. Change is CC'd to 'user'.
name|setApiUser
argument_list|(
name|accountCreator
operator|.
name|admin2
argument_list|()
argument_list|)
expr_stmt|;
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|approve
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|email
argument_list|,
name|ReviewerState
operator|.
name|CC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Change is cherrypicked by 'user2'.
name|setApiUser
argument_list|(
name|accountCreator
operator|.
name|user2
argument_list|()
argument_list|)
expr_stmt|;
name|CherryPickInput
name|cin
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|cin
operator|.
name|message
operator|=
literal|"this need to go to stable"
expr_stmt|;
name|cin
operator|.
name|destination
operator|=
literal|"stable"
expr_stmt|;
name|cin
operator|.
name|keepReviewers
operator|=
literal|true
expr_stmt|;
name|Map
argument_list|<
name|ReviewerState
argument_list|,
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
argument_list|>
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|cin
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|reviewers
decl_stmt|;
comment|// 'admin' should be a reviewer as the old owner.
comment|// 'admin2' should be a reviewer as the old reviewer.
comment|// 'user' should be on CC.
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|reviewers
init|=
name|result
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ccs
init|=
name|result
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ccs
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|accountCreator
operator|.
name|admin2
argument_list|()
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|accountCreator
operator|.
name|admin2
argument_list|()
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|cherryPickToMergedChangeRevision ()
specifier|public
name|void
name|cherryPickToMergedChangeRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|dstChange
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"foo"
argument_list|,
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|dstChange
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|dstChange
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"foo"
argument_list|,
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"c"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|srcChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|base
operator|=
name|dstChange
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
name|srcChange
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertCherryPickResult
argument_list|(
name|changeInfo
argument_list|,
name|input
argument_list|,
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToOpenChangeRevision ()
specifier|public
name|void
name|cherryPickToOpenChangeRevision
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|dstChange
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"foo"
argument_list|,
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|dstChange
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|srcChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|base
operator|=
name|dstChange
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
name|srcChange
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertCherryPickResult
argument_list|(
name|changeInfo
argument_list|,
name|input
argument_list|,
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToNonVisibleChangeFails ()
specifier|public
name|void
name|cherryPickToNonVisibleChangeFails
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|dstChange
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"foo"
argument_list|,
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|dstChange
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|dstChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|srcChange
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|base
operator|=
name|dstChange
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
name|srcChange
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Commit %s does not exist on branch refs/heads/foo"
argument_list|,
name|input
operator|.
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToAbandonedChangeFails ()
specifier|public
name|void
name|cherryPickToAbandonedChangeFails
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"master"
expr_stmt|;
name|input
operator|.
name|base
operator|=
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Change %s with commit %s is %s"
argument_list|,
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|input
operator|.
name|base
argument_list|,
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickWithInvalidBaseFails ()
specifier|public
name|void
name|cherryPickWithInvalidBaseFails
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"master"
expr_stmt|;
name|input
operator|.
name|base
operator|=
literal|"invalid-sha1"
expr_stmt|;
name|input
operator|.
name|message
operator|=
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Base %s doesn't represent a valid SHA-1"
argument_list|,
name|input
operator|.
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cherryPickToCommitWithoutChangeId ()
specifier|public
name|void
name|cherryPickToCommitWithoutChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|commit1
init|=
name|createNewCommitWithoutChangeId
argument_list|(
literal|"refs/heads/foo"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content 1"
argument_list|)
decl_stmt|;
name|createNewCommitWithoutChangeId
argument_list|(
literal|"refs/heads/foo"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content 2"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|srcChange
init|=
name|createChange
argument_list|(
literal|"subject"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|srcChange
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|CherryPickInput
name|input
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|destination
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|base
operator|=
name|commit1
operator|.
name|name
argument_list|()
expr_stmt|;
name|input
operator|.
name|message
operator|=
name|srcChange
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertCherryPickResult
argument_list|(
name|changeInfo
argument_list|,
name|input
argument_list|,
name|srcChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canRebase ()
specifier|public
name|void
name|canRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|boolean
name|canRebase
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|canRebase
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|canRebase
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|merge
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r3
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|canRebase
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r3
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r3
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|canRebase
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|canRebase
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setUnsetReviewedFlag ()
specifier|public
name|void
name|setUnsetReviewedFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|setReviewed
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewed
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|setReviewed
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewed
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeable ()
specifier|public
name|void
name|mergeable
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|PushOneCommit
name|push1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"push 1 content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|assertMergeable
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|r1
argument_list|)
expr_stmt|;
comment|// Reset client HEAD to initial so the new change is a merge conflict.
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"new contents"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertMergeable
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Search shows change is not mergeable.
name|Callable
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|search
init|=
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
literal|"is:mergeable change:"
operator|+
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|call
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Make the same change in a separate commit and update server HEAD behind Gerrit's back, which
comment|// will not reindex any open changes.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|String
name|ref
init|=
literal|"refs/heads/master"
decl_stmt|;
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|ref
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|tr
operator|.
name|update
argument_list|(
name|ref
argument_list|,
name|tr
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|initial
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|ref
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Side update"
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
literal|"new contents"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|// Search shows change is still not mergeable.
name|assertThat
argument_list|(
name|search
operator|.
name|call
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Using the API returns the correct value, and reindexes as well.
name|CountDownLatch
name|reindexed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RegistrationHandle
name|handle
init|=
name|changeIndexedListeners
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
operator|new
name|ChangeIndexedListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChangeIndexed
parameter_list|(
name|String
name|projectName
parameter_list|,
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
name|id2
operator|.
name|get
argument_list|()
condition|)
block|{
name|reindexed
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onChangeDeleted
parameter_list|(
name|int
name|id
parameter_list|)
block|{}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|assertMergeable
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reindexed
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|handle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changes
init|=
name|search
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changes
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|mergeable
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Test for other-branches.
block|}
annotation|@
name|Test
DECL|method|files ()
specifier|public
name|void
name|files
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|files
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|files
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|files
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|all
argument_list|(
name|files
operator|.
name|keySet
argument_list|()
argument_list|,
name|f
lambda|->
name|f
operator|.
name|matches
argument_list|(
name|FILE_NAME
operator|+
literal|'|'
operator|+
name|COMMIT_MSG
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filesOnMergeCommitChange ()
specifier|public
name|void
name|filesOnMergeCommitChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createMergeCommitChange
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// list files against auto-merge
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|files
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
name|MERGE_LIST
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
comment|// list files against parent 1
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|files
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
name|MERGE_LIST
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
comment|// list files against parent 2
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|files
argument_list|(
literal|2
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
name|MERGE_LIST
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listFilesOnDifferentBases ()
specifier|public
name|void
name|listFilesOnDifferentBases
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|result1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result2
init|=
name|amendChange
argument_list|(
name|changeId
argument_list|,
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result3
init|=
name|amendChange
argument_list|(
name|changeId
argument_list|,
name|SUBJECT
argument_list|,
literal|"c.txt"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|String
name|revId1
init|=
name|result1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|revId2
init|=
name|result2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|revId3
init|=
name|result3
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId1
argument_list|)
operator|.
name|files
argument_list|(
literal|null
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
literal|"a.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId2
argument_list|)
operator|.
name|files
argument_list|(
literal|null
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
literal|"a.txt"
argument_list|,
literal|"b.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId3
argument_list|)
operator|.
name|files
argument_list|(
literal|null
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
literal|"a.txt"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"c.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId2
argument_list|)
operator|.
name|files
argument_list|(
name|revId1
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
literal|"b.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId3
argument_list|)
operator|.
name|files
argument_list|(
name|revId1
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
literal|"b.txt"
argument_list|,
literal|"c.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId3
argument_list|)
operator|.
name|files
argument_list|(
name|revId2
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|COMMIT_MSG
argument_list|,
literal|"c.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryRevisionFiles ()
specifier|public
name|void
name|queryRevisionFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|files
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"file1.txt"
argument_list|,
literal|"content 1"
argument_list|,
literal|"file2.txt"
argument_list|,
literal|"content 2"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|SUBJECT
argument_list|,
name|files
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|changeId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|queryFiles
argument_list|(
literal|"file1.txt"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"file1.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|queryFiles
argument_list|(
literal|"file2.txt"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"file2.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|queryFiles
argument_list|(
literal|"file1"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"file1.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|queryFiles
argument_list|(
literal|"file2"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"file2.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|queryFiles
argument_list|(
literal|"file"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"file1.txt"
argument_list|,
literal|"file2.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|queryFiles
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"file1.txt"
argument_list|,
literal|"file2.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|description ()
specifier|public
name|void
name|description
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertDescription
argument_list|(
name|r
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|description
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertDescription
argument_list|(
name|r
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|description
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertDescription
argument_list|(
name|r
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setDescriptionNotAllowedWithoutPermission ()
specifier|public
name|void
name|setDescriptionNotAllowedWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertDescription
argument_list|(
name|r
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"edit description not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|description
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setDescriptionAllowedWithPermission ()
specifier|public
name|void
name|setDescriptionAllowedWithPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertDescription
argument_list|(
name|r
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|OWNER
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|description
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertDescription
argument_list|(
name|r
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDescription (PushOneCommit.Result r, String expected)
specifier|private
name|void
name|assertDescription
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|content ()
specifier|public
name|void
name|content
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertContent
argument_list|(
name|r
argument_list|,
name|FILE_NAME
argument_list|,
name|FILE_CONTENT
argument_list|)
expr_stmt|;
name|assertContent
argument_list|(
name|r
argument_list|,
name|COMMIT_MSG
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|contentType ()
specifier|public
name|void
name|contentType
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|endPoint
init|=
literal|"/changes/"
operator|+
name|r
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"/revisions/"
operator|+
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|"/files/"
operator|+
name|FILE_NAME
operator|+
literal|"/content"
decl_stmt|;
name|RestResponse
name|response
init|=
name|adminRestSession
operator|.
name|head
argument_list|(
name|endPoint
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|hasContent
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commit ()
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|WebLinkInfo
name|expectedWebLinkInfo
init|=
operator|new
name|WebLinkInfo
argument_list|(
literal|"foo"
argument_list|,
literal|"imageUrl"
argument_list|,
literal|"url"
argument_list|)
decl_stmt|;
name|RegistrationHandle
name|handle
init|=
name|patchSetLinks
operator|.
name|add
argument_list|(
literal|"gerrit"
argument_list|,
operator|new
name|PatchSetWebLink
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WebLinkInfo
name|getPatchSetWebLink
parameter_list|(
name|String
name|projectName
parameter_list|,
name|String
name|commit
parameter_list|)
block|{
return|return
name|expectedWebLinkInfo
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|CommitInfo
name|commitInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitInfo
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonIdent
argument_list|(
name|commitInfo
operator|.
name|author
argument_list|,
name|c
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonIdent
argument_list|(
name|commitInfo
operator|.
name|committer
argument_list|,
name|c
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitInfo
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitInfo
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitInfo
operator|.
name|parents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|commitInfo
operator|.
name|parents
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitInfo
operator|.
name|webLinks
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|commitInfo
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|commit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitInfo
operator|.
name|webLinks
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|WebLinkInfo
name|webLinkInfo
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|commitInfo
operator|.
name|webLinks
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|webLinkInfo
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedWebLinkInfo
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|webLinkInfo
operator|.
name|imageUrl
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedWebLinkInfo
operator|.
name|imageUrl
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|webLinkInfo
operator|.
name|url
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedWebLinkInfo
operator|.
name|url
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|webLinkInfo
operator|.
name|target
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedWebLinkInfo
operator|.
name|target
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|handle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertPersonIdent (GitPerson gitPerson, PersonIdent expectedIdent)
specifier|private
name|void
name|assertPersonIdent
parameter_list|(
name|GitPerson
name|gitPerson
parameter_list|,
name|PersonIdent
name|expectedIdent
parameter_list|)
block|{
name|assertThat
argument_list|(
name|gitPerson
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedIdent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gitPerson
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gitPerson
operator|.
name|date
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|expectedIdent
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gitPerson
operator|.
name|tz
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedIdent
operator|.
name|getTimeZoneOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMergeable (String id, boolean expected)
specifier|private
name|void
name|assertMergeable
parameter_list|(
name|String
name|id
parameter_list|,
name|boolean
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|MergeableInfo
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|mergeable
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|mergeable
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|submitType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|mergeableInto
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|mergeable
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|drafts ()
specifier|public
name|void
name|drafts
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|DraftInput
name|in
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|in
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|DraftApi
name|draftApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|draftApi
operator|.
name|get
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|draft
argument_list|(
name|draftApi
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|drafts
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"good catch!"
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|draft
argument_list|(
name|draftApi
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|update
argument_list|(
name|in
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|draft
argument_list|(
name|draftApi
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|author
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|draftApi
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|drafts
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|comments ()
specifier|public
name|void
name|comments
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|CommentInput
name|in
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|in
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|comments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|comments
operator|.
name|put
argument_list|(
name|FILE_NAME
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|reviewInput
operator|.
name|comments
operator|=
name|comments
expr_stmt|;
name|reviewInput
operator|.
name|message
operator|=
literal|"comment test"
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|out
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|comments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|out
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|comment
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|out
operator|.
name|get
argument_list|(
name|FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
operator|.
name|author
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment
operator|.
name|path
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|list
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|commentsAsList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|list
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CommentInfo
name|comment2
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comment2
operator|.
name|path
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|FILE_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment2
operator|.
name|line
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|comment
operator|.
name|line
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment2
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|comment
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comment2
operator|.
name|author
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|comment
operator|.
name|author
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|comment
argument_list|(
name|comment
operator|.
name|id
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commentOnNonExistingFile ()
specifier|public
name|void
name|commentOnNonExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r
operator|=
name|updateChange
argument_list|(
name|r
argument_list|,
literal|"new content"
argument_list|)
expr_stmt|;
name|CommentInput
name|in
init|=
operator|new
name|CommentInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|in
operator|.
name|path
operator|=
literal|"non-existing.txt"
expr_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|comments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|comments
operator|.
name|put
argument_list|(
literal|"non-existing.txt"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|reviewInput
operator|.
name|comments
operator|=
name|comments
expr_stmt|;
name|reviewInput
operator|.
name|message
operator|=
literal|"comment test"
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"not found in revision %d,1"
argument_list|,
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|1
argument_list|)
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patch ()
specifier|public
name|void
name|patch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeApi
name|changeApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|BinaryResult
name|bin
init|=
name|changeApi
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|patch
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|String
name|res
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|ChangeInfo
name|change
init|=
name|changeApi
operator|.
name|get
argument_list|()
decl_stmt|;
name|RevisionInfo
name|rev
init|=
name|change
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss Z"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|df
operator|.
name|format
argument_list|(
name|rev
operator|.
name|commit
operator|.
name|author
operator|.
name|date
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|PATCH
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|date
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|patchWithPath ()
specifier|public
name|void
name|patchWithPath
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|ChangeApi
name|changeApi
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|BinaryResult
name|bin
init|=
name|changeApi
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|patch
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|String
name|res
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PATCH_FILE_ONLY
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"File not found: nonexistent-file."
argument_list|)
expr_stmt|;
name|changeApi
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|patch
argument_list|(
literal|"nonexistent-file"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|actions ()
specifier|public
name|void
name|actions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|(
name|r
argument_list|)
operator|.
name|actions
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"cherrypick"
argument_list|,
literal|"description"
argument_list|,
literal|"rebase"
argument_list|)
expr_stmt|;
name|current
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|(
name|r
argument_list|)
operator|.
name|actions
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"submit"
argument_list|,
literal|"cherrypick"
argument_list|,
literal|"description"
argument_list|,
literal|"rebase"
argument_list|)
expr_stmt|;
name|current
argument_list|(
name|r
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|(
name|r
argument_list|)
operator|.
name|actions
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"cherrypick"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|actionsETag ()
specifier|public
name|void
name|actionsETag
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|oldETag
init|=
name|checkETag
argument_list|(
name|getRevisionActions
argument_list|,
name|r2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|current
argument_list|(
name|r2
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|oldETag
operator|=
name|checkETag
argument_list|(
name|getRevisionActions
argument_list|,
name|r2
argument_list|,
name|oldETag
argument_list|)
expr_stmt|;
comment|// Dependent change is included in ETag.
name|current
argument_list|(
name|r1
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|oldETag
operator|=
name|checkETag
argument_list|(
name|getRevisionActions
argument_list|,
name|r2
argument_list|,
name|oldETag
argument_list|)
expr_stmt|;
name|current
argument_list|(
name|r2
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
name|checkETag
argument_list|(
name|getRevisionActions
argument_list|,
name|r2
argument_list|,
name|oldETag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVoteOnNonCurrentPatchSet ()
specifier|public
name|void
name|deleteVoteOnNonCurrentPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// patch set 1
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
comment|// patch set 2
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// code-review
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if it's blocked to delete a vote on a non-current patch set.
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|MethodNotAllowedException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Cannot access on non-current patch set"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteVoteOnCurrentPatchSet ()
specifier|public
name|void
name|deleteVoteOnCurrentPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// patch set 1
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
comment|// patch set 2
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// code-review
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|recommend
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|deleteVote
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|m
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|reviewer
argument_list|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|votes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|m
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Code-Review"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeMessageInfo
name|message
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|c
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|author
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Removed Code-Review+1 by User<user@example.com>\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewers
argument_list|(
name|c
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCherryPickResult ( ChangeInfo changeInfo, CherryPickInput input, String srcChangeId)
specifier|private
specifier|static
name|void
name|assertCherryPickResult
parameter_list|(
name|ChangeInfo
name|changeInfo
parameter_list|,
name|CherryPickInput
name|input
parameter_list|,
name|String
name|srcChangeId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|srcChangeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
name|RevisionInfo
name|revisionInfo
init|=
name|changeInfo
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|changeInfo
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
operator|.
name|commit
operator|.
name|parents
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|revisionInfo
operator|.
name|commit
operator|.
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|commit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|base
argument_list|)
expr_stmt|;
block|}
DECL|method|updateChange (PushOneCommit.Result r, String content)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|updateChange
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"test commit"
argument_list|,
literal|"a.txt"
argument_list|,
name|content
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
DECL|method|current (PushOneCommit.Result r)
specifier|private
name|RevisionApi
name|current
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
return|;
block|}
DECL|method|checkETag (ETagView<RevisionResource> view, PushOneCommit.Result r, String oldETag)
specifier|private
name|String
name|checkETag
parameter_list|(
name|ETagView
argument_list|<
name|RevisionResource
argument_list|>
name|view
parameter_list|,
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|String
name|oldETag
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|eTag
init|=
name|view
operator|.
name|getETag
argument_list|(
name|parseRevisionResource
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|eTag
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldETag
argument_list|)
expr_stmt|;
return|return
name|eTag
return|;
block|}
DECL|method|createCherryPickableMerge ( String parent1FileName, String parent2FileName)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|createCherryPickableMerge
parameter_list|(
name|String
name|parent1FileName
parameter_list|,
name|String
name|parent2FileName
parameter_list|)
throws|throws
name|Exception
block|{
name|RevCommit
name|initialCommit
init|=
name|getHead
argument_list|(
name|repo
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|branchAName
init|=
literal|"branchA"
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|branchAName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|branchBName
init|=
literal|"branchB"
decl_stmt|;
name|createBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|branchBName
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeAResult
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change a"
argument_list|,
name|parent1FileName
argument_list|,
literal|"Content of a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/"
operator|+
name|branchAName
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialCommit
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeBResult
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change b"
argument_list|,
name|parent2FileName
argument_list|,
literal|"Content of b"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/"
operator|+
name|branchBName
argument_list|)
decl_stmt|;
name|PushOneCommit
name|pushableMergeCommit
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"merge"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|parent1FileName
argument_list|,
literal|"Content of a"
argument_list|,
name|parent2FileName
argument_list|,
literal|"Content of b"
argument_list|)
argument_list|)
decl_stmt|;
name|pushableMergeCommit
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|changeAResult
operator|.
name|getCommit
argument_list|()
argument_list|,
name|changeBResult
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeChangeResult
init|=
name|pushableMergeCommit
operator|.
name|to
argument_list|(
literal|"refs/for/"
operator|+
name|branchAName
argument_list|)
decl_stmt|;
name|mergeChangeResult
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|mergeChangeResult
return|;
block|}
DECL|method|getApproval (String changeId, String label)
specifier|private
name|ApprovalInfo
name|getApproval
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|label
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|li
init|=
name|info
operator|.
name|labels
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|li
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|int
name|accountId
init|=
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|li
operator|.
name|all
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|_accountId
operator|==
name|accountId
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getReviewers (Collection<AccountInfo> r)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getReviewers
parameter_list|(
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|r
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|transform
argument_list|(
name|r
argument_list|,
name|a
lambda|->
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|a
operator|.
name|_accountId
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

