begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|fetch
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_MAILTO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_USERNAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_UUID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|BlockStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|Retryer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|StopStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInfo
operator|.
name|ConsistencyProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInput
operator|.
name|CheckAccountExternalIdsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountExternalIdInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|DisabledExternalIdCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdsUpdate
operator|.
name|RefsMetaExternalIdsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|MutableInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ExternalIdIT
specifier|public
class|class
name|ExternalIdIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|extIdsUpdate
annotation|@
name|Inject
specifier|private
name|ExternalIdsUpdate
operator|.
name|Server
name|extIdsUpdate
decl_stmt|;
DECL|field|externalIds
annotation|@
name|Inject
specifier|private
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdReader
annotation|@
name|Inject
specifier|private
name|ExternalIdReader
name|externalIdReader
decl_stmt|;
DECL|field|metricMaker
annotation|@
name|Inject
specifier|private
name|MetricMaker
name|metricMaker
decl_stmt|;
annotation|@
name|Test
DECL|method|getExternalIds ()
specifier|public
name|void
name|getExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|expectedIds
init|=
name|accountCache
operator|.
name|get
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|expectedIdInfos
init|=
name|toExternalIdInfos
argument_list|(
name|expectedIds
argument_list|)
decl_stmt|;
name|RestResponse
name|response
init|=
name|userRestSession
operator|.
name|get
argument_list|(
literal|"/accounts/self/external.ids"
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|results
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|response
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedIdInfos
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedIdInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getExternalIdsOfOtherUserNotAllowed ()
specifier|public
name|void
name|getExternalIdsOfOtherUserNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"access database not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getExternalIdsOfOtherUserWithAccessDatabase ()
specifier|public
name|void
name|getExternalIdsOfOtherUserWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|expectedIds
init|=
name|accountCache
operator|.
name|get
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|expectedIdInfos
init|=
name|toExternalIdInfos
argument_list|(
name|expectedIds
argument_list|)
decl_stmt|;
name|RestResponse
name|response
init|=
name|userRestSession
operator|.
name|get
argument_list|(
literal|"/accounts/"
operator|+
name|admin
operator|.
name|id
operator|+
literal|"/external.ids"
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|results
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|response
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedIdInfos
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedIdInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIds ()
specifier|public
name|void
name|deleteExternalIds
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|externalIds
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|expectedIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountExternalIdInfo
name|id
range|:
name|externalIds
control|)
block|{
if|if
condition|(
name|id
operator|.
name|canDelete
operator|!=
literal|null
operator|&&
name|id
operator|.
name|canDelete
condition|)
block|{
name|toDelete
operator|.
name|add
argument_list|(
name|id
operator|.
name|identity
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|expectedIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|toDelete
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RestResponse
name|response
init|=
name|userRestSession
operator|.
name|post
argument_list|(
literal|"/accounts/self/external.ids:delete"
argument_list|,
name|toDelete
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
comment|// The external ID in WebSession will not be set for tests, resulting that
comment|// "mailto:user@example.com" can be deleted while "username:user" can't.
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIdsOfOtherUserNotAllowed ()
specifier|public
name|void
name|deleteExternalIdsOfOtherUserNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|extIds
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"access database not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|deleteExternalIds
argument_list|(
name|extIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|identity
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIdOfOtherUserUnderOwnAccount_UnprocessableEntity ()
specifier|public
name|void
name|deleteExternalIdOfOtherUserUnderOwnAccount_UnprocessableEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|extIds
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"External id %s does not exist"
argument_list|,
name|extIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|identity
argument_list|)
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteExternalIds
argument_list|(
name|extIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|identity
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIdsOfOtherUserWithAccessDatabase ()
specifier|public
name|void
name|deleteExternalIdsOfOtherUserWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|externalIds
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|expectedIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountExternalIdInfo
name|id
range|:
name|externalIds
control|)
block|{
if|if
condition|(
name|id
operator|.
name|canDelete
operator|!=
literal|null
operator|&&
name|id
operator|.
name|canDelete
condition|)
block|{
name|toDelete
operator|.
name|add
argument_list|(
name|id
operator|.
name|identity
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|expectedIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|toDelete
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|RestResponse
name|response
init|=
name|userRestSession
operator|.
name|post
argument_list|(
literal|"/accounts/"
operator|+
name|admin
operator|.
name|id
operator|+
literal|"/external.ids:delete"
argument_list|,
name|toDelete
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertNoContent
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|results
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
comment|// The external ID in WebSession will not be set for tests, resulting that
comment|// "mailto:user@example.com" can be deleted while "username:user" can't.
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIdOfPreferredEmail ()
specifier|public
name|void
name|deleteExternalIdOfPreferredEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|preferredEmail
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|email
decl_stmt|;
name|assertThat
argument_list|(
name|preferredEmail
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|deleteExternalIds
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|SCHEME_MAILTO
argument_list|,
name|preferredEmail
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|email
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIds_Conflict ()
specifier|public
name|void
name|deleteExternalIds_Conflict
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|externalIdStr
init|=
literal|"username:"
operator|+
name|user
operator|.
name|username
decl_stmt|;
name|toDelete
operator|.
name|add
argument_list|(
name|externalIdStr
argument_list|)
expr_stmt|;
name|RestResponse
name|response
init|=
name|userRestSession
operator|.
name|post
argument_list|(
literal|"/accounts/self/external.ids:delete"
argument_list|,
name|toDelete
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertConflict
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"External id %s cannot be deleted"
argument_list|,
name|externalIdStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteExternalIds_UnprocessableEntity ()
specifier|public
name|void
name|deleteExternalIds_UnprocessableEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|externalIdStr
init|=
literal|"mailto:user@domain.com"
decl_stmt|;
name|toDelete
operator|.
name|add
argument_list|(
name|externalIdStr
argument_list|)
expr_stmt|;
name|RestResponse
name|response
init|=
name|userRestSession
operator|.
name|post
argument_list|(
literal|"/accounts/self/external.ids:delete"
argument_list|,
name|toDelete
argument_list|)
decl_stmt|;
name|response
operator|.
name|assertUnprocessableEntity
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"External id %s does not exist"
argument_list|,
name|externalIdStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fetchExternalIdsBranch ()
specifier|public
name|void
name|fetchExternalIdsBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// refs/meta/external-ids is only visible to users with the 'Access Database' capability
try|try
block|{
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected TransportException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Remote does not have "
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|" available for fetch."
argument_list|)
expr_stmt|;
block|}
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
comment|// re-clone to get new request context, otherwise the old global capabilities are still cached
comment|// in the IdentifiedUser object
name|allUsersRepo
operator|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranch ()
specifier|public
name|void
name|pushToExternalIdsBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|":"
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
comment|// different case email is allowed
name|ExternalId
name|newExtId
init|=
name|createExternalIdWithOtherCaseEmail
argument_list|(
literal|"foo:bar"
argument_list|)
decl_stmt|;
name|addExtId
argument_list|(
name|allUsersRepo
argument_list|,
name|newExtId
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|extIdsBefore
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|allowPushOfExternalIds
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|extIdsAfter
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getExternalIds
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|extIdsAfter
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|extIdsBefore
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|toExternalIdInfo
argument_list|(
name|newExtId
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsExternalIdWithoutAccountId ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsExternalIdWithoutAccountId
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|":"
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|insertExternalIdWithoutAccountId
argument_list|(
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|allUsersRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allowPushOfExternalIds
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertRefUpdateFailure
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
argument_list|,
literal|"invalid external IDs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsExternalIdWithKeyThatDoesntMatchTheNoteId ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsExternalIdWithKeyThatDoesntMatchTheNoteId
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|":"
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|insertExternalIdWithKeyThatDoesntMatchNoteId
argument_list|(
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|allUsersRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allowPushOfExternalIds
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertRefUpdateFailure
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
argument_list|,
literal|"invalid external IDs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsExternalIdWithInvalidConfig ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsExternalIdWithInvalidConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|":"
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|insertExternalIdWithInvalidConfig
argument_list|(
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|allUsersRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allowPushOfExternalIds
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertRefUpdateFailure
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
argument_list|,
literal|"invalid external IDs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsExternalIdWithEmptyNote ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsExternalIdWithEmptyNote
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|":"
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|insertExternalIdWithEmptyNote
argument_list|(
name|allUsersRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|allUsersRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allowPushOfExternalIds
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertRefUpdateFailure
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
argument_list|,
literal|"invalid external IDs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsExternalIdForNonExistingAccount ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsExternalIdForNonExistingAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushToExternalIdsBranchRejectsInvalidExternalId
argument_list|(
name|createExternalIdForNonExistingAccount
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsExternalIdWithInvalidEmail ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsExternalIdWithInvalidEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushToExternalIdsBranchRejectsInvalidExternalId
argument_list|(
name|createExternalIdWithInvalidEmail
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsDuplicateEmails ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsDuplicateEmails
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushToExternalIdsBranchRejectsInvalidExternalId
argument_list|(
name|createExternalIdWithDuplicateEmail
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToExternalIdsBranchRejectsBadPassword ()
specifier|public
name|void
name|pushToExternalIdsBranchRejectsBadPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushToExternalIdsBranchRejectsInvalidExternalId
argument_list|(
name|createExternalIdWithBadPassword
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPushToExternalIdsBranchRejectsInvalidExternalId (ExternalId invalidExtId)
specifier|private
name|void
name|testPushToExternalIdsBranchRejectsInvalidExternalId
parameter_list|(
name|ExternalId
name|invalidExtId
parameter_list|)
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|":"
operator|+
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|addExtId
argument_list|(
name|allUsersRepo
argument_list|,
name|invalidExtId
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|allowPushOfExternalIds
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|assertRefUpdateFailure
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
argument_list|,
literal|"invalid external IDs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readExternalIdsWhenInvalidExternalIdsExist ()
specifier|public
name|void
name|readExternalIdsWhenInvalidExternalIdsExist
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|insertValidExternalIds
argument_list|()
expr_stmt|;
name|insertInvalidButParsableExternalIds
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|parseableExtIds
init|=
name|externalIds
operator|.
name|all
argument_list|()
decl_stmt|;
name|insertNonParsableExternalIds
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|extIds
init|=
name|externalIds
operator|.
name|all
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|extIds
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|parseableExtIds
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalId
name|parseableExtId
range|:
name|parseableExtIds
control|)
block|{
name|ExternalId
name|extId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|parseableExtId
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|extId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|parseableExtId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkConsistency ()
specifier|public
name|void
name|checkConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
name|insertValidExternalIds
argument_list|()
expr_stmt|;
name|ConsistencyCheckInput
name|input
init|=
operator|new
name|ConsistencyCheckInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|checkAccountExternalIds
operator|=
operator|new
name|CheckAccountExternalIdsInput
argument_list|()
expr_stmt|;
name|ConsistencyCheckInfo
name|checkInfo
init|=
name|gApi
operator|.
name|config
argument_list|()
operator|.
name|server
argument_list|()
operator|.
name|checkConsistency
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|checkInfo
operator|.
name|checkAccountExternalIdsResult
operator|.
name|problems
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|expectedProblems
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedProblems
operator|.
name|addAll
argument_list|(
name|insertInvalidButParsableExternalIds
argument_list|()
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|addAll
argument_list|(
name|insertNonParsableExternalIds
argument_list|()
argument_list|)
expr_stmt|;
name|checkInfo
operator|=
name|gApi
operator|.
name|config
argument_list|()
operator|.
name|server
argument_list|()
operator|.
name|checkConsistency
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkInfo
operator|.
name|checkAccountExternalIdsResult
operator|.
name|problems
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedProblems
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checkInfo
operator|.
name|checkAccountExternalIdsResult
operator|.
name|problems
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedProblems
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkConsistencyNotAllowed ()
specifier|public
name|void
name|checkConsistencyNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"access database not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|config
argument_list|()
operator|.
name|server
argument_list|()
operator|.
name|checkConsistency
argument_list|(
operator|new
name|ConsistencyCheckInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|consistencyError (String message)
specifier|private
name|ConsistencyProblemInfo
name|consistencyError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|ConsistencyProblemInfo
argument_list|(
name|ConsistencyProblemInfo
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|insertValidExternalIds ()
specifier|private
name|void
name|insertValidExternalIds
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
literal|"valid"
decl_stmt|;
name|ExternalIdsUpdate
name|u
init|=
name|extIdsUpdate
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// create valid external IDs
name|u
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|createWithPassword
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
literal|"admin.other@example.com"
argument_list|,
literal|"secret-password"
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|insert
argument_list|(
name|createExternalIdWithOtherCaseEmail
argument_list|(
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|insertInvalidButParsableExternalIds ()
specifier|private
name|Set
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|insertInvalidButParsableExternalIds
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
literal|"invalid"
decl_stmt|;
name|ExternalIdsUpdate
name|u
init|=
name|extIdsUpdate
operator|.
name|create
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|expectedProblems
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ExternalId
name|extIdForNonExistingAccount
init|=
name|createExternalIdForNonExistingAccount
argument_list|(
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|u
operator|.
name|insert
argument_list|(
name|extIdForNonExistingAccount
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"External ID '"
operator|+
name|extIdForNonExistingAccount
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"' belongs to account that doesn't exist: "
operator|+
name|extIdForNonExistingAccount
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ExternalId
name|extIdWithInvalidEmail
init|=
name|createExternalIdWithInvalidEmail
argument_list|(
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|u
operator|.
name|insert
argument_list|(
name|extIdWithInvalidEmail
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"External ID '"
operator|+
name|extIdWithInvalidEmail
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"' has an invalid email: "
operator|+
name|extIdWithInvalidEmail
operator|.
name|email
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ExternalId
name|extIdWithDuplicateEmail
init|=
name|createExternalIdWithDuplicateEmail
argument_list|(
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|u
operator|.
name|insert
argument_list|(
name|extIdWithDuplicateEmail
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"Email '"
operator|+
name|extIdWithDuplicateEmail
operator|.
name|email
argument_list|()
operator|+
literal|"' is not unique, it's used by the following external IDs: '"
operator|+
name|extIdWithDuplicateEmail
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"', 'mailto:"
operator|+
name|extIdWithDuplicateEmail
operator|.
name|email
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
name|ExternalId
name|extIdWithBadPassword
init|=
name|createExternalIdWithBadPassword
argument_list|(
literal|"admin-username"
argument_list|)
decl_stmt|;
name|u
operator|.
name|insert
argument_list|(
name|extIdWithBadPassword
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"External ID '"
operator|+
name|extIdWithBadPassword
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"' has an invalid password: unrecognized algorithm"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expectedProblems
return|;
block|}
DECL|method|insertNonParsableExternalIds ()
specifier|private
name|Set
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|insertNonParsableExternalIds
parameter_list|()
throws|throws
name|IOException
block|{
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
literal|"corrupt"
decl_stmt|;
name|Set
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|expectedProblems
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|String
name|externalId
init|=
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|noteId
init|=
name|insertExternalIdWithoutAccountId
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|externalId
argument_list|)
decl_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"Invalid external ID config for note '"
operator|+
name|noteId
operator|+
literal|"': Value for 'externalId."
operator|+
name|externalId
operator|+
literal|".accountId' is missing, expected account ID"
argument_list|)
argument_list|)
expr_stmt|;
name|externalId
operator|=
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|noteId
operator|=
name|insertExternalIdWithKeyThatDoesntMatchNoteId
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|externalId
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"Invalid external ID config for note '"
operator|+
name|noteId
operator|+
literal|"': SHA1 of external ID '"
operator|+
name|externalId
operator|+
literal|"' does not match note ID '"
operator|+
name|noteId
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
name|noteId
operator|=
name|insertExternalIdWithInvalidConfig
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"Invalid external ID config for note '"
operator|+
name|noteId
operator|+
literal|"': Invalid line in config file"
argument_list|)
argument_list|)
expr_stmt|;
name|noteId
operator|=
name|insertExternalIdWithEmptyNote
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|nextId
argument_list|(
name|scheme
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|expectedProblems
operator|.
name|add
argument_list|(
name|consistencyError
argument_list|(
literal|"Invalid external ID config for note '"
operator|+
name|noteId
operator|+
literal|"': Expected exactly 1 'externalId' section, found 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expectedProblems
return|;
block|}
DECL|method|createExternalIdWithOtherCaseEmail (String externalId)
specifier|private
name|ExternalId
name|createExternalIdWithOtherCaseEmail
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|createWithPassword
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|admin
operator|.
name|email
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|,
literal|"password"
argument_list|)
return|;
block|}
DECL|method|insertExternalIdWithoutAccountId (Repository repo, RevWalk rw, String externalId)
specifier|private
name|String
name|insertExternalIdWithoutAccountId
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|String
name|externalId
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|ins
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|noteId
init|=
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
decl_stmt|;
name|Config
name|c
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|extId
operator|.
name|writeToConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|unset
argument_list|(
literal|"externalId"
argument_list|,
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|"accountId"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|raw
init|=
name|c
operator|.
name|toText
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|dataBlob
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|noteId
argument_list|,
name|dataBlob
argument_list|)
expr_stmt|;
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|allUsers
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
literal|"Add external ID"
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
return|return
name|noteId
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|method|insertExternalIdWithKeyThatDoesntMatchNoteId ( Repository repo, RevWalk rw, String externalId)
specifier|private
name|String
name|insertExternalIdWithKeyThatDoesntMatchNoteId
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|String
name|externalId
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|ins
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|noteId
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
operator|+
literal|"x"
argument_list|)
operator|.
name|sha1
argument_list|()
decl_stmt|;
name|Config
name|c
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|extId
operator|.
name|writeToConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|byte
index|[]
name|raw
init|=
name|c
operator|.
name|toText
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|dataBlob
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|noteId
argument_list|,
name|dataBlob
argument_list|)
expr_stmt|;
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|allUsers
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
literal|"Add external ID"
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
return|return
name|noteId
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|method|insertExternalIdWithInvalidConfig (Repository repo, RevWalk rw, String externalId)
specifier|private
name|String
name|insertExternalIdWithInvalidConfig
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|String
name|externalId
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|ins
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|noteId
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
operator|.
name|sha1
argument_list|()
decl_stmt|;
name|byte
index|[]
name|raw
init|=
literal|"bad-config"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|dataBlob
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|noteId
argument_list|,
name|dataBlob
argument_list|)
expr_stmt|;
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|allUsers
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
literal|"Add external ID"
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
return|return
name|noteId
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|method|insertExternalIdWithEmptyNote (Repository repo, RevWalk rw, String externalId)
specifier|private
name|String
name|insertExternalIdWithEmptyNote
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|String
name|externalId
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|ins
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|noteId
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
operator|.
name|sha1
argument_list|()
decl_stmt|;
name|byte
index|[]
name|raw
init|=
literal|""
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|dataBlob
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|noteId
argument_list|,
name|dataBlob
argument_list|)
expr_stmt|;
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|allUsers
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
literal|"Add external ID"
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
return|return
name|noteId
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|method|createExternalIdForNonExistingAccount (String externalId)
specifier|private
name|ExternalId
name|createExternalIdForNonExistingAccount
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|,
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createExternalIdWithInvalidEmail (String externalId)
specifier|private
name|ExternalId
name|createExternalIdWithInvalidEmail
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
literal|"invalid-email"
argument_list|)
return|;
block|}
DECL|method|createExternalIdWithDuplicateEmail (String externalId)
specifier|private
name|ExternalId
name|createExternalIdWithDuplicateEmail
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
name|admin
operator|.
name|email
argument_list|)
return|;
block|}
DECL|method|createExternalIdWithBadPassword (String username)
specifier|private
name|ExternalId
name|createExternalIdWithBadPassword
parameter_list|(
name|String
name|username
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
name|SCHEME_USERNAME
argument_list|,
name|username
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|,
literal|null
argument_list|,
literal|"non-hashed-password-is-not-allowed"
argument_list|)
return|;
block|}
DECL|method|nextId (String scheme, MutableInteger i)
specifier|private
specifier|static
name|String
name|nextId
parameter_list|(
name|String
name|scheme
parameter_list|,
name|MutableInteger
name|i
parameter_list|)
block|{
return|return
name|scheme
operator|+
literal|":foo"
operator|+
operator|++
name|i
operator|.
name|value
return|;
block|}
annotation|@
name|Test
DECL|method|retryOnLockFailure ()
specifier|public
name|void
name|retryOnLockFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Retryer
argument_list|<
name|RefsMetaExternalIdsUpdate
argument_list|>
name|retryer
init|=
name|ExternalIdsUpdate
operator|.
name|retryerBuilder
argument_list|()
operator|.
name|withBlockStrategy
argument_list|(
operator|new
name|BlockStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|block
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
comment|// Don't sleep in tests.
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|fooId
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|ExternalId
operator|.
name|Key
name|barId
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"bar"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|doneBgUpdate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExternalIdsUpdate
name|update
init|=
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
name|accountCache
argument_list|,
name|allUsers
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
operator|new
name|DisabledExternalIdCache
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
operator|!
name|doneBgUpdate
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|extIdsUpdate
operator|.
name|create
argument_list|()
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|barId
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
decl||
name|OrmException
name|e
parameter_list|)
block|{
comment|// Ignore, the successful insertion of the external ID is asserted later
block|}
block|}
block|}
argument_list|,
name|retryer
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doneBgUpdate
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|update
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|fooId
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doneBgUpdate
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|get
argument_list|(
name|fooId
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|get
argument_list|(
name|barId
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|failAfterRetryerGivesUp ()
specifier|public
name|void
name|failAfterRetryerGivesUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalId
operator|.
name|Key
index|[]
name|extIdsKeys
init|=
block|{
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
block|,
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"bar"
argument_list|,
literal|"bar"
argument_list|)
block|,
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"baz"
argument_list|,
literal|"baz"
argument_list|)
block|}
decl_stmt|;
specifier|final
name|AtomicInteger
name|bgCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExternalIdsUpdate
name|update
init|=
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
name|accountCache
argument_list|,
name|allUsers
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
operator|new
name|DisabledExternalIdCache
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|extIdsUpdate
operator|.
name|create
argument_list|()
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|extIdsKeys
index|[
name|bgCounter
operator|.
name|getAndAdd
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
decl||
name|OrmException
name|e
parameter_list|)
block|{
comment|// Ignore, the successful insertion of the external ID is asserted later
block|}
block|}
argument_list|,
name|RetryerBuilder
operator|.
expr|<
name|RefsMetaExternalIdsUpdate
operator|>
name|newBuilder
argument_list|()
operator|.
name|retryIfException
argument_list|(
name|e
lambda|->
name|e
operator|instanceof
name|LockFailureException
argument_list|)
operator|.
name|withStopStrategy
argument_list|(
name|StopStrategies
operator|.
name|stopAfterAttempt
argument_list|(
name|extIdsKeys
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bgCounter
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|update
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|create
argument_list|(
literal|"abc"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected LockFailureException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockFailureException
name|e
parameter_list|)
block|{
comment|// Ignore, expected
block|}
name|assertThat
argument_list|(
name|bgCounter
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|extIdsKeys
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdsKeys
control|)
block|{
name|assertThat
argument_list|(
name|externalIds
operator|.
name|get
argument_list|(
name|extIdKey
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|readExternalIdWithAccountIdThatCanBeExpressedInKiB ()
specifier|public
name|void
name|readExternalIdWithAccountIdThatCanBeExpressedInKiB
parameter_list|()
throws|throws
name|Exception
block|{
name|ExternalId
operator|.
name|Key
name|extIdKey
init|=
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
literal|"foo:bar"
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1024
operator|*
literal|100
argument_list|)
decl_stmt|;
name|extIdsUpdate
operator|.
name|create
argument_list|()
operator|.
name|insert
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
name|extIdKey
argument_list|,
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|ExternalId
name|extId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|extIdKey
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkNoReloadAfterUpdate ()
specifier|public
name|void
name|checkNoReloadAfterUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|expectedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseable
name|ctx
init|=
name|createFailOnLoadContext
argument_list|()
init|)
block|{
comment|// insert external ID
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|extIdsUpdate
operator|.
name|create
argument_list|()
operator|.
name|insert
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|expectedExtIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedExtIds
argument_list|)
expr_stmt|;
comment|// update external ID
name|expectedExtIds
operator|.
name|remove
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|extId
operator|=
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|admin
operator|.
name|id
argument_list|,
literal|"foo.bar@example.com"
argument_list|)
expr_stmt|;
name|extIdsUpdate
operator|.
name|create
argument_list|()
operator|.
name|upsert
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|expectedExtIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedExtIds
argument_list|)
expr_stmt|;
comment|// delete external ID
name|extIdsUpdate
operator|.
name|create
argument_list|()
operator|.
name|delete
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|expectedExtIds
operator|.
name|remove
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedExtIds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byAccountFailIfReadingExternalIdsFails ()
specifier|public
name|void
name|byAccountFailIfReadingExternalIdsFails
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|AutoCloseable
name|ctx
init|=
name|createFailOnLoadContext
argument_list|()
init|)
block|{
comment|// update external ID branch so that external IDs need to be reloaded
name|insertExtIdBehindGerritsBack
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byEmailFailIfReadingExternalIdsFails ()
specifier|public
name|void
name|byEmailFailIfReadingExternalIdsFails
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|AutoCloseable
name|ctx
init|=
name|createFailOnLoadContext
argument_list|()
init|)
block|{
comment|// update external ID branch so that external IDs need to be reloaded
name|insertExtIdBehindGerritsBack
argument_list|(
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|admin
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|externalIds
operator|.
name|byEmail
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|byAccountUpdateExternalIdsBehindGerritsBack ()
specifier|public
name|void
name|byAccountUpdateExternalIdsBehindGerritsBack
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|expectedExternalIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|ExternalId
name|newExtId
init|=
name|ExternalId
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|admin
operator|.
name|id
argument_list|)
decl_stmt|;
name|insertExtIdBehindGerritsBack
argument_list|(
name|newExtId
argument_list|)
expr_stmt|;
name|expectedExternalIds
operator|.
name|add
argument_list|(
name|newExtId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedExternalIds
argument_list|)
expr_stmt|;
block|}
DECL|method|insertExtIdBehindGerritsBack (ExternalId extId)
specifier|private
name|void
name|insertExtIdBehindGerritsBack
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|rw
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|ExternalIdsUpdate
operator|.
name|insert
argument_list|(
name|rw
argument_list|,
name|ins
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
expr_stmt|;
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|allUsers
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
literal|"insert new ID"
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addExtId (TestRepository<?> testRepo, ExternalId... extIds)
specifier|private
name|void
name|addExtId
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|ExternalId
modifier|...
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|rev
init|=
name|ExternalIdReader
operator|.
name|readRevision
argument_list|(
name|testRepo
operator|.
name|getRepository
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|ins
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|NoteMap
name|noteMap
init|=
name|ExternalIdReader
operator|.
name|readNoteMap
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|rev
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|ExternalIdsUpdate
operator|.
name|insert
argument_list|(
name|testRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ins
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
name|ExternalIdsUpdate
operator|.
name|commit
argument_list|(
name|allUsers
argument_list|,
name|testRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
name|testRepo
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ins
argument_list|,
name|rev
argument_list|,
name|noteMap
argument_list|,
literal|"Add external ID"
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
literal|null
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toExternalIdInfos (Collection<ExternalId> extIds)
specifier|private
name|List
argument_list|<
name|AccountExternalIdInfo
argument_list|>
name|toExternalIdInfos
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
block|{
return|return
name|extIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|toExternalIdInfo
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toExternalIdInfo (ExternalId extId)
specifier|private
name|AccountExternalIdInfo
name|toExternalIdInfo
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
block|{
name|AccountExternalIdInfo
name|info
init|=
operator|new
name|AccountExternalIdInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|identity
operator|=
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|info
operator|.
name|emailAddress
operator|=
name|extId
operator|.
name|email
argument_list|()
expr_stmt|;
name|info
operator|.
name|canDelete
operator|=
operator|!
name|extId
operator|.
name|isScheme
argument_list|(
name|SCHEME_USERNAME
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|info
operator|.
name|trusted
operator|=
name|extId
operator|.
name|isScheme
argument_list|(
name|SCHEME_MAILTO
argument_list|)
operator|||
name|extId
operator|.
name|isScheme
argument_list|(
name|SCHEME_UUID
argument_list|)
operator|||
name|extId
operator|.
name|isScheme
argument_list|(
name|SCHEME_USERNAME
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|allowPushOfExternalIds ()
specifier|private
name|void
name|allowPushOfExternalIds
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRefUpdateFailure (RemoteRefUpdate update, String msg)
specifier|private
name|void
name|assertRefUpdateFailure
parameter_list|(
name|RemoteRefUpdate
name|update
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|assertThat
argument_list|(
name|update
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|update
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|createFailOnLoadContext ()
specifier|private
name|AutoCloseable
name|createFailOnLoadContext
parameter_list|()
block|{
name|externalIdReader
operator|.
name|setFailOnLoad
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|AutoCloseable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|externalIdReader
operator|.
name|setFailOnLoad
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

