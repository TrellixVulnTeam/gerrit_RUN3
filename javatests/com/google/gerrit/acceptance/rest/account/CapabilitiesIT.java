begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|BATCH_CHANGES_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|DEFAULT_MAX_BATCH_CHANGES_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|DEFAULT_MAX_QUERY_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|PRIORITY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|QUERY_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|RUN_AS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CapabilitiesIT
specifier|public
class|class
name|CapabilitiesIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|capabilitiesUser ()
specifier|public
name|void
name|capabilitiesUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|all
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|GlobalCapability
operator|.
name|getAllNames
argument_list|()
argument_list|,
name|c
lambda|->
operator|!
name|ADMINISTRATE_SERVER
operator|.
name|equals
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|PRIORITY
operator|.
name|equals
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|all
argument_list|)
expr_stmt|;
try|try
block|{
name|RestResponse
name|r
init|=
name|userRestSession
operator|.
name|get
argument_list|(
literal|"/accounts/self/capabilities"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|CapabilityInfo
name|info
init|=
operator|(
operator|new
name|Gson
argument_list|()
operator|)
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|CapabilityInfo
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|GlobalCapability
operator|.
name|getAllNames
argument_list|()
control|)
block|{
if|if
condition|(
name|ADMINISTRATE_SERVER
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|administrateServer
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BATCH_CHANGES_LIMIT
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|batchChangesLimit
operator|.
name|min
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|batchChangesLimit
operator|.
name|max
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
name|DEFAULT_MAX_BATCH_CHANGES_LIMIT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PRIORITY
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|priority
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QUERY_LIMIT
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|queryLimit
operator|.
name|min
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|queryLimit
operator|.
name|max
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
name|DEFAULT_MAX_QUERY_LIMIT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertWithMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"capability %s was not granted"
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|that
argument_list|(
operator|(
name|Boolean
operator|)
name|CapabilityInfo
operator|.
name|class
operator|.
name|getField
argument_list|(
name|c
argument_list|)
operator|.
name|get
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|removeGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|capabilitiesAdmin ()
specifier|public
name|void
name|capabilitiesAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|get
argument_list|(
literal|"/accounts/self/capabilities"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|CapabilityInfo
name|info
init|=
operator|(
operator|new
name|Gson
argument_list|()
operator|)
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|CapabilityInfo
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|GlobalCapability
operator|.
name|getAllNames
argument_list|()
control|)
block|{
if|if
condition|(
name|BATCH_CHANGES_LIMIT
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// It does not have default value for any user as it can override the
comment|// 'receive.batchChangesLimit'. It needs to be granted explicitly.
name|assertThat
argument_list|(
name|info
operator|.
name|batchChangesLimit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PRIORITY
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|priority
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QUERY_LIMIT
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertWithMessage
argument_list|(
literal|"missing queryLimit"
argument_list|)
operator|.
name|that
argument_list|(
name|info
operator|.
name|queryLimit
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|queryLimit
operator|.
name|min
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|queryLimit
operator|.
name|max
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
name|DEFAULT_MAX_QUERY_LIMIT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ACCESS_DATABASE
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|accessDatabase
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RUN_AS
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|runAs
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertWithMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"capability %s was not granted"
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|that
argument_list|(
operator|(
name|Boolean
operator|)
name|CapabilityInfo
operator|.
name|class
operator|.
name|getField
argument_list|(
name|c
argument_list|)
operator|.
name|get
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

