begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|MESSAGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|parseCommitMessageRange
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|DeleteChangeMessage
operator|.
name|createNewChangeMessage
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
operator|.
name|decode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DeleteChangeMessageInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ConfigSuite
operator|.
name|class
argument_list|)
DECL|class|ChangeMessagesIT
specifier|public
class|class
name|ChangeMessagesIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|systemTimeZone
specifier|private
name|String
name|systemTimeZone
decl_stmt|;
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|systemTimeZone
operator|=
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
literal|"US/Eastern"
argument_list|)
expr_stmt|;
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"user.timezone"
argument_list|,
name|systemTimeZone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|messagesNotReturnedByDefault ()
specifier|public
name|void
name|messagesNotReturnedByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|postMessage
argument_list|(
name|changeId
argument_list|,
literal|"Some nits need to be fixed."
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|info
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultMessage ()
specifier|public
name|void
name|defaultMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|messagesReturnedInChronologicalOrder ()
specifier|public
name|void
name|messagesReturnedInChronologicalOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|firstMessage
init|=
literal|"Some nits need to be fixed."
decl_stmt|;
name|postMessage
argument_list|(
name|changeId
argument_list|,
name|firstMessage
argument_list|)
expr_stmt|;
name|String
name|secondMessage
init|=
literal|"I like this feature."
decl_stmt|;
name|postMessage
argument_list|(
name|changeId
argument_list|,
name|secondMessage
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|it
init|=
name|c
operator|.
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
name|assertMessage
argument_list|(
name|firstMessage
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertMessage
argument_list|(
name|secondMessage
argument_list|,
name|it
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|postMessageWithTag ()
specifier|public
name|void
name|postMessageWithTag
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|tag
init|=
literal|"jenkins"
decl_stmt|;
name|String
name|msg
init|=
literal|"Message with tag."
decl_stmt|;
name|postMessage
argument_list|(
name|changeId
argument_list|,
name|msg
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|it
init|=
name|c
operator|.
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1."
argument_list|)
expr_stmt|;
name|ChangeMessageInfo
name|actual
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertMessage
argument_list|(
name|msg
argument_list|,
name|actual
operator|.
name|message
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listChangeMessages ()
specifier|public
name|void
name|listChangeMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages1
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|messages
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages1
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|messages2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getOneChangeMessage ()
specifier|public
name|void
name|getOneChangeMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|messages
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessageInfo
name|messageInfo
range|:
name|messages
control|)
block|{
name|String
name|id
init|=
name|messageInfo
operator|.
name|id
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|message
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|messageInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteCannotBeAppliedWithoutAdministrateServerCapability ()
specifier|public
name|void
name|deleteCannotBeAppliedWithoutAdministrateServerCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|deleteOneChangeMessage
argument_list|(
name|changeNum
argument_list|,
literal|0
argument_list|,
name|user
argument_list|,
literal|"spam"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected AuthException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"administrate server not permitted"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteCanBeAppliedWithAdministrateServerCapability ()
specifier|public
name|void
name|deleteCanBeAppliedWithAdministrateServerCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteOneChangeMessage
argument_list|(
name|changeNum
argument_list|,
literal|0
argument_list|,
name|user
argument_list|,
literal|"spam"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteCannotBeAppliedWithEmptyChangeMessageUuid ()
specifier|public
name|void
name|deleteCannotBeAppliedWithEmptyChangeMessageUuid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|message
argument_list|(
literal|""
argument_list|)
operator|.
name|delete
argument_list|(
operator|new
name|DeleteChangeMessageInput
argument_list|(
literal|"spam"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"change message  not found"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteCannotBeAppliedWithNonExistingChangeMessageUuid ()
specifier|public
name|void
name|deleteCannotBeAppliedWithNonExistingChangeMessageUuid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|DeleteChangeMessageInput
name|input
init|=
operator|new
name|DeleteChangeMessageInput
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"8473b95934b5732ac55d26311a706c9c2bde9941"
decl_stmt|;
name|input
operator|.
name|reason
operator|=
literal|"spam"
expr_stmt|;
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|message
argument_list|(
name|id
argument_list|)
operator|.
name|delete
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ResourceNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"change message %s not found"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|deleteCanBeAppliedWithoutProvidingReason ()
specifier|public
name|void
name|deleteCanBeAppliedWithoutProvidingReason
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
name|deleteOneChangeMessage
argument_list|(
name|changeNum
argument_list|,
literal|2
argument_list|,
name|admin
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteOneChangeMessageTwice ()
specifier|public
name|void
name|deleteOneChangeMessageTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
comment|// Deletes the second change message twice.
name|deleteOneChangeMessage
argument_list|(
name|changeNum
argument_list|,
literal|1
argument_list|,
name|admin
argument_list|,
literal|"reason 1"
argument_list|)
expr_stmt|;
name|deleteOneChangeMessage
argument_list|(
name|changeNum
argument_list|,
literal|1
argument_list|,
name|admin
argument_list|,
literal|"reason 2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteMultipleChangeMessages ()
specifier|public
name|void
name|deleteMultipleChangeMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|changeNum
init|=
name|createOneChangeWithMultipleChangeMessagesInHistory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
operator|++
name|i
control|)
block|{
name|deleteOneChangeMessage
argument_list|(
name|changeNum
argument_list|,
name|i
argument_list|,
name|admin
argument_list|,
literal|"reason "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createOneChangeWithMultipleChangeMessagesInHistory ()
specifier|private
name|int
name|createOneChangeWithMultipleChangeMessagesInHistory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Creates the following commit history on the meta branch of the test change.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Commit 1: create a change.
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|result
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
comment|// Commit 2: post a review with message "message 1".
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addOneReview
argument_list|(
name|changeId
argument_list|,
literal|"message 1"
argument_list|)
expr_stmt|;
comment|// Commit 3: amend a new patch set.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
comment|// Commit 4: post a review with message "message 2".
name|addOneReview
argument_list|(
name|changeId
argument_list|,
literal|"message 2"
argument_list|)
expr_stmt|;
comment|// Commit 5: amend a new patch set.
name|amendChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
comment|// Commit 6: approve the change.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit 7: submit the change.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|addOneReview (String changeId, String changeMessage)
specifier|private
name|void
name|addOneReview
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|changeMessage
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewInput
operator|.
name|CommentInput
name|c
init|=
operator|new
name|ReviewInput
operator|.
name|CommentInput
argument_list|()
decl_stmt|;
name|c
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|c
operator|.
name|message
operator|=
literal|"comment 1"
expr_stmt|;
name|c
operator|.
name|path
operator|=
name|FILE_NAME
expr_stmt|;
name|ReviewInput
name|reviewInput
init|=
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|reviewInput
operator|.
name|comments
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|c
operator|.
name|path
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|reviewInput
operator|.
name|message
operator|=
name|changeMessage
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewInput
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteOneChangeMessage ( int changeNum, int deletedMessageIndex, TestAccount deletedBy, String reason)
specifier|private
name|void
name|deleteOneChangeMessage
parameter_list|(
name|int
name|changeNum
parameter_list|,
name|int
name|deletedMessageIndex
parameter_list|,
name|TestAccount
name|deletedBy
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messagesBeforeDeletion
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|messages
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|commentsBefore
init|=
name|getChangeSortedComments
argument_list|(
name|changeNum
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commitsBefore
init|=
name|getChangeMetaCommitsInReverseOrder
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|changeNum
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|messagesBeforeDeletion
operator|.
name|get
argument_list|(
name|deletedMessageIndex
argument_list|)
operator|.
name|id
decl_stmt|;
name|DeleteChangeMessageInput
name|input
init|=
operator|new
name|DeleteChangeMessageInput
argument_list|(
name|reason
argument_list|)
decl_stmt|;
name|ChangeMessageInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|message
argument_list|(
name|id
argument_list|)
operator|.
name|delete
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// Verify the return change message info is as expect.
name|assertThat
argument_list|(
name|info
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createNewChangeMessage
argument_list|(
name|deletedBy
operator|.
name|fullName
argument_list|,
name|reason
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messagesAfterDeletion
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|messages
argument_list|()
decl_stmt|;
name|assertMessagesAfterDeletion
argument_list|(
name|messagesBeforeDeletion
argument_list|,
name|messagesAfterDeletion
argument_list|,
name|deletedMessageIndex
argument_list|,
name|deletedBy
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|assertCommentsAfterDeletion
argument_list|(
name|changeNum
argument_list|,
name|commentsBefore
argument_list|)
expr_stmt|;
comment|// Verify change index is updated after deletion.
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changes
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
literal|"message removed"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|changes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|_number
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|changeNum
argument_list|)
expr_stmt|;
comment|// Verifies states of commits.
name|assertMetaCommitsAfterDeletion
argument_list|(
name|commitsBefore
argument_list|,
name|changeNum
argument_list|,
name|deletedMessageIndex
argument_list|,
name|deletedBy
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMessagesAfterDeletion ( List<ChangeMessageInfo> messagesBeforeDeletion, List<ChangeMessageInfo> messagesAfterDeletion, int deletedMessageIndex, TestAccount deletedBy, String deleteReason)
specifier|private
name|void
name|assertMessagesAfterDeletion
parameter_list|(
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messagesBeforeDeletion
parameter_list|,
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messagesAfterDeletion
parameter_list|,
name|int
name|deletedMessageIndex
parameter_list|,
name|TestAccount
name|deletedBy
parameter_list|,
name|String
name|deleteReason
parameter_list|)
block|{
name|assertThat
argument_list|(
name|messagesAfterDeletion
argument_list|)
operator|.
name|named
argument_list|(
literal|"after: %s; before: %s"
argument_list|,
name|messagesAfterDeletion
argument_list|,
name|messagesBeforeDeletion
argument_list|)
operator|.
name|hasSize
argument_list|(
name|messagesBeforeDeletion
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesAfterDeletion
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ChangeMessageInfo
name|before
init|=
name|messagesBeforeDeletion
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeMessageInfo
name|after
init|=
name|messagesAfterDeletion
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|deletedMessageIndex
condition|)
block|{
comment|// The uuid of a commit message will be updated after rewriting.
name|assertThat
argument_list|(
name|after
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|before
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|after
operator|.
name|tag
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|before
operator|.
name|tag
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|after
operator|.
name|author
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|before
operator|.
name|author
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|after
operator|.
name|realAuthor
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|before
operator|.
name|realAuthor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|after
operator|.
name|_revisionNumber
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|before
operator|.
name|_revisionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|deletedMessageIndex
condition|)
block|{
name|assertThat
argument_list|(
name|after
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createNewChangeMessage
argument_list|(
name|deletedBy
operator|.
name|fullName
argument_list|,
name|deleteReason
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|after
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|before
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertMetaCommitsAfterDeletion ( List<RevCommit> commitsBeforeDeletion, int changeNum, int deletedMessageIndex, TestAccount deletedBy, String deleteReason)
specifier|private
name|void
name|assertMetaCommitsAfterDeletion
parameter_list|(
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commitsBeforeDeletion
parameter_list|,
name|int
name|changeNum
parameter_list|,
name|int
name|deletedMessageIndex
parameter_list|,
name|TestAccount
name|deletedBy
parameter_list|,
name|String
name|deleteReason
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commitsAfterDeletion
init|=
name|getChangeMetaCommitsInReverseOrder
argument_list|(
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|changeNum
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commitsAfterDeletion
argument_list|)
operator|.
name|hasSize
argument_list|(
name|commitsBeforeDeletion
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commitsBeforeDeletion
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|commitBefore
init|=
name|commitsBeforeDeletion
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RevCommit
name|commitAfter
init|=
name|commitsAfterDeletion
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|deletedMessageIndex
condition|)
block|{
name|byte
index|[]
name|rawBefore
init|=
name|commitBefore
operator|.
name|getRawBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rawAfter
init|=
name|commitAfter
operator|.
name|getRawBuffer
argument_list|()
decl_stmt|;
name|Charset
name|encodingBefore
init|=
name|RawParseUtils
operator|.
name|parseEncoding
argument_list|(
name|rawBefore
argument_list|)
decl_stmt|;
name|Charset
name|encodingAfter
init|=
name|RawParseUtils
operator|.
name|parseEncoding
argument_list|(
name|rawAfter
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ChangeNoteUtil
operator|.
name|CommitMessageRange
argument_list|>
name|rangeBefore
init|=
name|parseCommitMessageRange
argument_list|(
name|commitBefore
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ChangeNoteUtil
operator|.
name|CommitMessageRange
argument_list|>
name|rangeAfter
init|=
name|parseCommitMessageRange
argument_list|(
name|commitAfter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rangeBefore
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rangeAfter
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|subjectBefore
init|=
name|decode
argument_list|(
name|encodingBefore
argument_list|,
name|rawBefore
argument_list|,
name|rangeBefore
operator|.
name|get
argument_list|()
operator|.
name|subjectStart
argument_list|()
argument_list|,
name|rangeBefore
operator|.
name|get
argument_list|()
operator|.
name|subjectEnd
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|subjectAfter
init|=
name|decode
argument_list|(
name|encodingAfter
argument_list|,
name|rawAfter
argument_list|,
name|rangeAfter
operator|.
name|get
argument_list|()
operator|.
name|subjectStart
argument_list|()
argument_list|,
name|rangeAfter
operator|.
name|get
argument_list|()
operator|.
name|subjectEnd
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|subjectBefore
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|subjectAfter
argument_list|)
expr_stmt|;
name|String
name|footersBefore
init|=
name|decode
argument_list|(
name|encodingBefore
argument_list|,
name|rawBefore
argument_list|,
name|rangeBefore
operator|.
name|get
argument_list|()
operator|.
name|changeMessageEnd
argument_list|()
operator|+
literal|1
argument_list|,
name|rawBefore
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
name|footersAfter
init|=
name|decode
argument_list|(
name|encodingAfter
argument_list|,
name|rawAfter
argument_list|,
name|rangeAfter
operator|.
name|get
argument_list|()
operator|.
name|changeMessageEnd
argument_list|()
operator|+
literal|1
argument_list|,
name|rawAfter
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|footersBefore
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|footersAfter
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|decode
argument_list|(
name|encodingAfter
argument_list|,
name|rawAfter
argument_list|,
name|rangeAfter
operator|.
name|get
argument_list|()
operator|.
name|changeMessageStart
argument_list|()
argument_list|,
name|rangeAfter
operator|.
name|get
argument_list|()
operator|.
name|changeMessageEnd
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|createNewChangeMessage
argument_list|(
name|deletedBy
operator|.
name|fullName
argument_list|,
name|deleteReason
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|commitAfter
operator|.
name|getFullMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBefore
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|commitAfter
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBefore
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitAfter
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBefore
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitAfter
operator|.
name|getEncoding
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBefore
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitAfter
operator|.
name|getEncodingName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commitBefore
operator|.
name|getEncodingName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Verifies comments are not changed after deleting change message(s). */
DECL|method|assertCommentsAfterDeletion (int changeNum, List<CommentInfo> commentsBeforeDeletion)
specifier|private
name|void
name|assertCommentsAfterDeletion
parameter_list|(
name|int
name|changeNum
parameter_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|commentsBeforeDeletion
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|commentsAfterDeletion
init|=
name|getChangeSortedComments
argument_list|(
name|changeNum
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commentsAfterDeletion
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|commentsBeforeDeletion
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|assertMessage (String expected, String actual)
specifier|private
specifier|static
name|void
name|assertMessage
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Patch Set 1:\n\n"
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|postMessage (String changeId, String msg)
specifier|private
name|void
name|postMessage
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|postMessage
argument_list|(
name|changeId
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|postMessage (String changeId, String msg, String tag)
specifier|private
name|void
name|postMessage
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|msg
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewInput
name|in
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|message
operator|=
name|msg
expr_stmt|;
name|in
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

