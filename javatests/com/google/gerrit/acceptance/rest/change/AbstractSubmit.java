begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|getOnlyElement
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|SUBMITTABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|CHANGE_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|EMPTY_TREE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeast
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ExtensionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|ExtensionRegistry
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseClockStep
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseTimezone
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|config
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|ChangeIndexedListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|TestSubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|OnSubmitValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|Submit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|ThrowingRunnable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
annotation|@
name|UseClockStep
annotation|@
name|UseTimezone
argument_list|(
name|timezone
operator|=
literal|"US/Eastern"
argument_list|)
DECL|class|AbstractSubmit
specifier|public
specifier|abstract
class|class
name|AbstractSubmit
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|submitWholeTopicEnabled ()
specifier|public
specifier|static
name|Config
name|submitWholeTopicEnabled
parameter_list|()
block|{
return|return
name|submitWholeTopicEnabledConfig
argument_list|()
return|;
block|}
DECL|field|approvalsUtil
annotation|@
name|Inject
specifier|private
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|private
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|submitHandler
annotation|@
name|Inject
specifier|private
name|Submit
name|submitHandler
decl_stmt|;
DECL|field|extensionRegistry
annotation|@
name|Inject
specifier|private
name|ExtensionRegistry
name|extensionRegistry
decl_stmt|;
DECL|method|getSubmitType ()
specifier|protected
specifier|abstract
name|SubmitType
name|getSubmitType
parameter_list|()
function_decl|;
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|submitToEmptyRepo ()
specifier|public
name|void
name|submitToEmptyRepo
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|hasHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
operator|.
name|getParents
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|actual
init|=
name|fetchFromSubmitPreview
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|hasHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitSingleChange ()
specifier|public
name|void
name|submitSingleChange
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|actual
init|=
name|fetchFromSubmitPreview
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
operator|)
operator|||
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
operator|)
condition|)
block|{
comment|// The change is updated as well:
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitMultipleChangesOtherMergeConflictPreview ()
specifier|public
name|void
name|submitMultipleChangesOtherMergeConflictPreview
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"d"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
comment|// change 2 is not approved, but we ignore labels
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BinaryResult
name|request
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|getSubmitType
argument_list|()
condition|)
block|{
case|case
name|FAST_FORWARD_ONLY
case|:
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Failed to submit 3 changes due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": internal error: "
operator|+
literal|"change not processed by merge strategy\n"
operator|+
literal|"Change "
operator|+
name|change3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": internal error: "
operator|+
literal|"change not processed by merge strategy\n"
operator|+
literal|"Change "
operator|+
name|change4
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Project policy "
operator|+
literal|"requires all submissions to be a fast-forward. Please "
operator|+
literal|"rebase the change locally and upload again for review."
argument_list|)
expr_stmt|;
break|break;
case|case
name|REBASE_IF_NECESSARY
case|:
case|case
name|REBASE_ALWAYS
case|:
name|String
name|change2hash
init|=
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Cannot rebase "
operator|+
name|change2hash
operator|+
literal|": The change could "
operator|+
literal|"not be rebased due to a conflict during merge."
argument_list|)
expr_stmt|;
break|break;
case|case
name|MERGE_ALWAYS
case|:
case|case
name|MERGE_IF_NECESSARY
case|:
case|case
name|INHERIT
case|:
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Failed to submit 3 changes due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change "
operator|+
literal|"locally and upload the rebased commit for review.\n"
operator|+
literal|"Change "
operator|+
name|change3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change "
operator|+
literal|"locally and upload the rebased commit for review.\n"
operator|+
literal|"Change "
operator|+
name|change4
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change "
operator|+
literal|"locally and upload the rebased commit for review."
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHERRY_PICK
case|:
default|default:
name|assertWithMessage
argument_list|(
literal|"Should not reach here."
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
break|break;
block|}
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitMultipleChangesPreview ()
specifier|public
name|void
name|submitMultipleChangesPreview
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"d"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
comment|// change 2 is not approved, but we ignore labels
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|actual
init|=
name|fetchFromSubmitPreview
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|get
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|containsKey
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
comment|// CherryPick ignores dependencies, thus only change and destination
comment|// branch refs are modified.
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
comment|// RebaseAlways takes care of dependencies, therefore Change{2,3,4} and
comment|// destination branch will be modified.
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check that the submit preview did not actually submit
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSubmit
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
comment|// now check we actually have the same content:
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitNoPermission ()
specifier|public
name|void
name|submitNoPermission
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create project where submit is blocked
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"submit not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noSelfSubmit ()
specifier|public
name|void
name|noSelfSubmit
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create project where submit is blocked for the change owner
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"submit not permitted"
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlySelfSubmit ()
specifier|public
name|void
name|onlySelfSubmit
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create project where only the change owner can submit
name|Project
operator|.
name|NameKey
name|p
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|CHANGE_OWNER
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"submit not permitted"
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopicMultipleProjects ()
specifier|public
name|void
name|submitWholeTopicMultipleProjects
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
comment|// Create test projects
name|Project
operator|.
name|NameKey
name|keyA
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|cloneProject
argument_list|(
name|keyA
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|keyB
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoB
init|=
name|cloneProject
argument_list|(
name|keyB
argument_list|)
decl_stmt|;
comment|// Create changes on project-a
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
comment|// Create changes on project-b
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 4"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change4
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopicMultipleBranchesOnSameProject ()
specifier|public
name|void
name|submitWholeTopicMultipleBranchesOnSameProject
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
comment|// Create test project
name|Project
operator|.
name|NameKey
name|keyA
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|cloneProject
argument_list|(
name|keyA
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|keyA
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// Create the dev branch on the test project
name|BranchInput
name|in
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|revision
operator|=
name|initialHead
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|keyA
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"dev"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Create changes on master
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
comment|// Create  changes on dev
name|repoA
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|,
literal|"Change 4"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change4
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWholeTopic ()
specifier|public
name|void
name|submitWholeTopic
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
comment|// Check for the exact change to have the correct submitter.
name|assertSubmitter
argument_list|(
name|change3
argument_list|)
expr_stmt|;
comment|// Also check submitters for changes submitted via the topic relationship.
name|assertSubmitter
argument_list|(
name|change1
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change2
argument_list|)
expr_stmt|;
comment|// Check that the repo has the expected commits
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log
init|=
name|getRemoteLog
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commitsInRepo
init|=
name|log
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RevCommit
operator|::
name|getShortMessage
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|expectedCommitCount
init|=
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_ALWAYS
condition|?
literal|5
comment|// initial commit + 3 commits + merge commit
else|:
literal|4
decl_stmt|;
comment|// initial commit + 3 commits
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedCommitCount
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|containsAtLeast
argument_list|(
literal|"Initial empty repository"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"Change 3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_ALWAYS
condition|)
block|{
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Merge changes from topic \""
operator|+
name|expectedTopic
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitWholeTopicWithMultipleTopics ()
specifier|public
name|void
name|submitWholeTopicWithMultipleTopics
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic1
init|=
literal|"test-topic-1"
decl_stmt|;
name|String
name|topic2
init|=
literal|"test-topic-2"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic1
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic1
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic2
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"d.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic2
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedTopic1
init|=
name|name
argument_list|(
name|topic1
argument_list|)
decl_stmt|;
name|String
name|expectedTopic2
init|=
name|name
argument_list|(
name|topic2
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|expectedTopic1
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|expectedTopic1
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic1
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic1
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
comment|// Check for the exact change to have the correct submitter.
name|assertSubmitter
argument_list|(
name|change4
argument_list|)
expr_stmt|;
comment|// Also check submitters for changes submitted via the topic relationship.
name|assertSubmitter
argument_list|(
name|change3
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|!=
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|assertSubmitter
argument_list|(
name|change1
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change2
argument_list|)
expr_stmt|;
block|}
comment|// Check that the repo has the expected commits
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log
init|=
name|getRemoteLog
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commitsInRepo
init|=
name|log
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RevCommit
operator|::
name|getShortMessage
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|expectedCommitCount
decl_stmt|;
switch|switch
condition|(
name|getSubmitType
argument_list|()
condition|)
block|{
case|case
name|MERGE_ALWAYS
case|:
comment|// initial commit + 4 commits + merge commit
name|expectedCommitCount
operator|=
literal|6
expr_stmt|;
break|break;
case|case
name|CHERRY_PICK
case|:
comment|// initial commit + 2 commits
name|expectedCommitCount
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|FAST_FORWARD_ONLY
case|:
case|case
name|INHERIT
case|:
case|case
name|MERGE_IF_NECESSARY
case|:
case|case
name|REBASE_ALWAYS
case|:
case|case
name|REBASE_IF_NECESSARY
case|:
default|default:
comment|// initial commit + 4 commits
name|expectedCommitCount
operator|=
literal|5
expr_stmt|;
break|break;
block|}
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedCommitCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|containsAtLeast
argument_list|(
literal|"Initial empty repository"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"Change 4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"Change 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"Change 2"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_ALWAYS
condition|)
block|{
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Merge changes from topics \"%s\", \"%s\""
argument_list|,
name|expectedTopic1
argument_list|,
name|expectedTopic2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|commitsInRepo
argument_list|)
operator|.
name|containsAtLeast
argument_list|(
literal|"Initial empty repository"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"Change 4"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitReusingOldTopic ()
specifier|public
name|void
name|submitReusingOldTopic
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|String
name|id1
init|=
name|change1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|change2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|assertSubmittedTogether
argument_list|(
name|id1
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSubmittedTogether
argument_list|(
name|id2
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertSubmittedTogether
argument_list|(
name|id1
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSubmittedTogether
argument_list|(
name|id2
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|String
name|id3
init|=
name|change3
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|assertSubmittedTogether
argument_list|(
name|id3
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|change3
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertSubmittedTogether
argument_list|(
name|id3
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmittedTogether (String changeId, Iterable<String> expected)
specifier|private
name|void
name|assertSubmittedTogether
parameter_list|(
name|String
name|changeId
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|submittedTogether
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|i
operator|.
name|changeId
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWorkInProgressChange ()
specifier|public
name|void
name|submitWorkInProgressChange
parameter_list|()
throws|throws
name|Throwable
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%wip"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|num
init|=
name|change
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|submitWithConflict
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 1 change due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|num
operator|+
literal|": Change "
operator|+
name|num
operator|+
literal|" is work in progress"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWithHiddenBranchInSameTopic ()
specifier|public
name|void
name|submitWithHiddenBranchInSameTopic
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|visible
init|=
name|createChange
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|name
argument_list|(
literal|"topic"
argument_list|)
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|num
init|=
name|visible
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
literal|"hidden"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|hidden
init|=
name|createChange
argument_list|(
literal|"refs/for/hidden%topic="
operator|+
name|name
argument_list|(
literal|"topic"
argument_list|)
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|hidden
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/hidden"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|submit
argument_list|(
name|visible
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"A change to be submitted with "
operator|+
name|num
operator|+
literal|" is not visible"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitChangeWhenParentOfOtherBranchTip ()
specifier|public
name|void
name|submitChangeWhenParentOfOtherBranchTip
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Chain of two commits
comment|// Push both to topic-branch
comment|// Push the first commit for review and submit
comment|//
comment|// C2 -- tip of topic branch
comment|//  |
comment|// C1 -- pushed for review
comment|//  |
comment|// C0 -- Master
comment|//
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|setBooleanConfig
argument_list|(
name|BooleanProjectConfig
operator|.
name|CREATE_NEW_CHANGE_FOR_ALL_NOT_IN_TARGET
argument_list|,
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|PushOneCommit
name|push1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|c1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/heads/topic"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|c2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/heads/topic"
argument_list|)
decl_stmt|;
name|c2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitMergeOfNonChangeBranchTip ()
specifier|public
name|void
name|submitMergeOfNonChangeBranchTip
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Merge a branch with commits that have not been submitted as
comment|// changes.
comment|//
comment|// M  -- mergeCommit (pushed for review and submitted)
comment|// | \
comment|// |  S -- stable (pushed directly to refs/heads/stable)
comment|// | /
comment|// I   -- master
comment|//
name|RevCommit
name|master
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|stableTip
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Tip of branch stable"
argument_list|,
literal|"stable.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|stable
init|=
name|stableTip
operator|.
name|to
argument_list|(
literal|"refs/heads/stable"
argument_list|)
decl_stmt|;
name|PushOneCommit
name|mergeCommit
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"The merge commit"
argument_list|,
literal|"merge.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|mergeCommit
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|master
argument_list|,
name|stable
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeReview
init|=
name|mergeCommit
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|mergeReview
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|mergeReview
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log
init|=
name|getRemoteLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|contains
argument_list|(
name|stable
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|contains
argument_list|(
name|mergeReview
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitMergeOfNonChangeBranchNonTip ()
specifier|public
name|void
name|submitMergeOfNonChangeBranchNonTip
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Merge a branch with commits that have not been submitted as
comment|// changes.
comment|//
comment|// MC  -- merge commit (pushed for review and submitted)
comment|// |\   S2 -- new stable tip (pushed directly to refs/heads/stable)
comment|// M \ /
comment|// |  S1 -- stable (pushed directly to refs/heads/stable)
comment|// | /
comment|// I -- master
comment|//
name|RevCommit
name|initial
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// push directly to stable to S1
name|PushOneCommit
operator|.
name|Result
name|s1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"new commit into stable"
argument_list|,
literal|"stable1.txt"
argument_list|,
literal|""
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/stable"
argument_list|)
decl_stmt|;
comment|// move the stable tip ahead to S2
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Tip of branch stable"
argument_list|,
literal|"stable2.txt"
argument_list|,
literal|""
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/stable"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
comment|// move the master ahead
name|PushOneCommit
operator|.
name|Result
name|m
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Move master ahead"
argument_list|,
literal|"master.txt"
argument_list|,
literal|""
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
comment|// create merge change
name|PushOneCommit
name|mc
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"The merge commit"
argument_list|,
literal|"merge.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|mc
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|m
operator|.
name|getCommit
argument_list|()
argument_list|,
name|s1
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergeReview
init|=
name|mc
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|mergeReview
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|mergeReview
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log
init|=
name|getRemoteLog
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|contains
argument_list|(
name|s1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log
argument_list|)
operator|.
name|contains
argument_list|(
name|mergeReview
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitChangeWithCommitThatWasAlreadyMerged ()
specifier|public
name|void
name|submitChangeWithCommitThatWasAlreadyMerged
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create and submit a change
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// set the status of the change back to NEW to simulate a failed submit that
comment|// merged the commit but failed to update the change status
name|setChangeStatusToNew
argument_list|(
name|change
argument_list|)
expr_stmt|;
comment|// submitting the change again should detect that the commit was already
comment|// merged and just fix the change status to be MERGED
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterSubmit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitChangesWithCommitsThatWereAlreadyMerged ()
specifier|public
name|void
name|submitChangesWithCommitsThatWereAlreadyMerged
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// create and submit 2 changes
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertMerged
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// set the status of the changes back to NEW to simulate a failed submit that
comment|// merged the commits but failed to update the change status
name|setChangeStatusToNew
argument_list|(
name|change1
argument_list|,
name|change2
argument_list|)
expr_stmt|;
comment|// submitting the changes again should detect that the commits were already
comment|// merged and just fix the change status to be MERGED
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterSubmit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitTopicWithCommitsThatWereAlreadyMerged ()
specifier|public
name|void
name|submitTopicWithCommitsThatWereAlreadyMerged
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// create and submit 2 changes with the same topic
name|String
name|topic
init|=
name|name
argument_list|(
literal|"topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertMerged
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// set the status of the second change back to NEW to simulate a failed
comment|// submit that merged the commits but failed to update the change status of
comment|// some changes in the topic
name|setChangeStatusToNew
argument_list|(
name|change2
argument_list|)
expr_stmt|;
comment|// submitting the topic again should detect that the commits were already
comment|// merged and just fix the change status to be MERGED
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterSubmit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWithValidation ()
specifier|public
name|void
name|submitWithValidation
parameter_list|()
throws|throws
name|Throwable
block|{
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|OnSubmitValidationListener
name|listener
init|=
operator|new
name|OnSubmitValidationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preBranchUpdate
parameter_list|(
name|Arguments
name|args
parameter_list|)
throws|throws
name|ValidationException
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|refs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|args
operator|.
name|getCommands
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refs
argument_list|)
operator|.
name|contains
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|refs
operator|.
name|remove
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|refs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Some submit strategies need to insert new patchset.
name|assertThat
argument_list|(
name|refs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS_CHANGES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|listener
argument_list|)
init|)
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitWithValidationMultiRepo ()
specifier|public
name|void
name|submitWithValidationMultiRepo
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
comment|// Create test projects
name|Project
operator|.
name|NameKey
name|keyA
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|cloneProject
argument_list|(
name|keyA
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|keyB
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoB
init|=
name|cloneProject
argument_list|(
name|keyB
argument_list|)
decl_stmt|;
comment|// Create changes on project-a
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
comment|// Create changes on project-b
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 3"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 4"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|change1
argument_list|,
name|change2
argument_list|,
name|change3
argument_list|,
name|change4
argument_list|)
decl_stmt|;
for|for
control|(
name|PushOneCommit
operator|.
name|Result
name|change
range|:
name|changes
control|)
block|{
name|approve
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Construct validator which will throw on a second call.
comment|// Since there are 2 repos, first submit attempt will fail, the second will
comment|// succeed.
name|List
argument_list|<
name|String
argument_list|>
name|projectsCalled
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|OnSubmitValidationListener
name|listener
init|=
operator|new
name|OnSubmitValidationListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preBranchUpdate
parameter_list|(
name|Arguments
name|args
parameter_list|)
throws|throws
name|ValidationException
block|{
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|assertThat
argument_list|(
name|args
operator|.
name|getCommands
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|ReceiveCommand
name|cmd
init|=
name|args
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
name|master
argument_list|)
decl_stmt|;
name|ObjectId
name|newMasterId
init|=
name|cmd
operator|.
name|getNewId
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|args
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|master
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|args
operator|.
name|getRef
argument_list|(
name|master
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
name|newMasterId
argument_list|)
expr_stmt|;
name|args
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|args
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|newMasterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed checking new ref value"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|projectsCalled
operator|.
name|add
argument_list|(
name|args
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projectsCalled
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"time to fail"
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|listener
argument_list|)
init|)
block|{
name|submitWithConflict
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"time to fail"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectsCalled
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|keyA
operator|.
name|get
argument_list|()
argument_list|,
name|keyB
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PushOneCommit
operator|.
name|Result
name|change
range|:
name|changes
control|)
block|{
name|change
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|name
argument_list|(
name|topic
argument_list|)
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectsCalled
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|keyA
operator|.
name|get
argument_list|()
argument_list|,
name|keyB
operator|.
name|get
argument_list|()
argument_list|,
name|keyA
operator|.
name|get
argument_list|()
argument_list|,
name|keyB
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PushOneCommit
operator|.
name|Result
name|change
range|:
name|changes
control|)
block|{
name|change
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|name
argument_list|(
name|topic
argument_list|)
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|submitWithCommitAndItsMergeCommitTogether ()
specifier|public
name|void
name|submitWithCommitAndItsMergeCommitTogether
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// Create a stable branch and bootstrap it.
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"stable"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"initial commit"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/stable"
argument_list|)
decl_stmt|;
name|RevCommit
name|stable
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"stable"
argument_list|)
decl_stmt|;
name|RevCommit
name|master
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|master
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stable
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|branchCreate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"stable"
argument_list|)
operator|.
name|setStartPoint
argument_list|(
name|stable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|branchCreate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"master"
argument_list|)
operator|.
name|setStartPoint
argument_list|(
name|master
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// Create a fix in stable branch.
name|testRepo
operator|.
name|reset
argument_list|(
name|stable
argument_list|)
expr_stmt|;
name|RevCommit
name|fix
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|stable
argument_list|)
operator|.
name|message
argument_list|(
literal|"small fix"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"refs/heads/stable"
argument_list|)
operator|.
name|update
argument_list|(
name|fix
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/stable:refs/for/stable%topic="
operator|+
name|name
argument_list|(
literal|"topic"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// Merge the fix into master.
name|testRepo
operator|.
name|reset
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|RevCommit
name|merge
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|master
argument_list|)
operator|.
name|parent
argument_list|(
name|fix
argument_list|)
operator|.
name|message
argument_list|(
literal|"Merge stable into master"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|update
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master:refs/for/master%topic="
operator|+
name|name
argument_list|(
literal|"topic"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// Submit together.
name|String
name|fixId
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|fix
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|mergeId
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|merge
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|fixId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|mergeId
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|mergeId
argument_list|)
expr_stmt|;
name|assertMerged
argument_list|(
name|fixId
argument_list|)
expr_stmt|;
name|assertMerged
argument_list|(
name|mergeId
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevWalk
name|rw
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|master
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|merge
argument_list|,
name|master
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|fix
argument_list|,
name|master
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrySubmitSingleChangeOnLockFailure ()
specifier|public
name|void
name|retrySubmitSingleChangeOnLockFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|change
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|TestSubmitInput
name|input
init|=
operator|new
name|TestSubmitInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|generateLockFailures
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|true
argument_list|,
comment|// Attempt 1: lock failure
literal|false
argument_list|,
comment|// Attempt 2: success
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leftover value to check total number of calls.
name|submit
argument_list|(
name|id
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|assertMerged
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevWalk
name|rw
init|=
name|testRepo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|master
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|patchSet
init|=
name|parseCurrentRevision
argument_list|(
name|rw
argument_list|,
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rw
operator|.
name|isMergedInto
argument_list|(
name|patchSet
argument_list|,
name|master
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|generateLockFailures
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrySubmitAfterTornTopicOnLockFailure ()
specifier|public
name|void
name|retrySubmitAfterTornTopicOnLockFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|topic
init|=
literal|"test-topic"
decl_stmt|;
name|Project
operator|.
name|NameKey
name|keyA
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|keyB
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|cloneProject
argument_list|(
name|keyA
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoB
init|=
name|cloneProject
argument_list|(
name|keyB
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|repoB
argument_list|,
literal|"master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|TestSubmitInput
name|input
init|=
operator|new
name|TestSubmitInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|generateLockFailures
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|false
argument_list|,
comment|// Change 1, attempt 1: success
literal|true
argument_list|,
comment|// Change 2, attempt 1: lock failure
literal|false
argument_list|,
comment|// Change 1, attempt 2: success
literal|false
argument_list|,
comment|// Change 2, attempt 2: success
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leftover value to check total number of calls.
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|String
name|expectedTopic
init|=
name|name
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|change1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|change2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
name|expectedTopic
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|repoA
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevWalk
name|rwA
init|=
name|repoA
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|masterA
init|=
name|rwA
operator|.
name|parseCommit
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|keyA
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|change1Ps
init|=
name|parseCurrentRevision
argument_list|(
name|rwA
argument_list|,
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rwA
operator|.
name|isMergedInto
argument_list|(
name|change1Ps
argument_list|,
name|masterA
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|repoB
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevWalk
name|rwB
init|=
name|repoB
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|masterB
init|=
name|rwB
operator|.
name|parseCommit
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|keyB
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|change2Ps
init|=
name|parseCurrentRevision
argument_list|(
name|rwB
argument_list|,
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rwB
operator|.
name|isMergedInto
argument_list|(
name|change2Ps
argument_list|,
name|masterB
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|generateLockFailures
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authorAndCommitDateAreEqual ()
specifier|public
name|void
name|authorAndCommitDateAreEqual
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
expr_stmt|;
name|ConfigInput
name|ci
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|matchAuthorToCommitterDate
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
operator|||
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
condition|)
block|{
comment|// Merge another change so that change2 is not a fast-forward
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertAuthorAndCommitDateEquals
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|rejectEmptyCommit
operator|=
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
DECL|method|submitEmptyCommitPatchSetCanNotFastForward_emptyCommitAllowed ()
specifier|public
name|void
name|submitEmptyCommitPatchSetCanNotFastForward_emptyCommitAllowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|revert1
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|revert1
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|revert1
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeApi
name|revert2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|revert2
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|revert2
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|rejectEmptyCommit
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitEmptyCommitPatchSetCanNotFastForward_emptyCommitNotAllowed ()
specifier|public
name|void
name|submitEmptyCommitPatchSetCanNotFastForward_emptyCommitNotAllowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeApi
name|revert1
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|revert1
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|revert1
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ChangeApi
name|revert2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revert
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|revert2
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|revert2
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Change "
operator|+
name|revert2
operator|.
name|get
argument_list|()
operator|.
name|_number
operator|+
literal|": Change could not be merged because the commit is empty. Project policy"
operator|+
literal|" requires all commits to contain modifications to at least one file."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|rejectEmptyCommit
operator|=
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
DECL|method|submitEmptyCommitPatchSetCanFastForward_emptyCommitAllowed ()
specifier|public
name|void
name|submitEmptyCommitPatchSetCanFastForward_emptyCommitAllowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|ChangeInput
name|ci
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Empty change"
expr_stmt|;
name|ci
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|ci
operator|.
name|branch
operator|=
literal|"master"
expr_stmt|;
name|ChangeApi
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|change
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|rejectEmptyCommit
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitEmptyCommitPatchSetCanFastForward_emptyCommitNotAllowed ()
specifier|public
name|void
name|submitEmptyCommitPatchSetCanFastForward_emptyCommitNotAllowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|ChangeInput
name|ci
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Empty change"
expr_stmt|;
name|ci
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|ci
operator|.
name|branch
operator|=
literal|"master"
expr_stmt|;
name|ChangeApi
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|change
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Change "
operator|+
name|change
operator|.
name|get
argument_list|()
operator|.
name|_number
operator|+
literal|": Change could not be merged because the commit is empty. Project policy"
operator|+
literal|" requires all commits to contain modifications to at least one file."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|,
name|rejectEmptyCommit
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitNonemptyCommitToEmptyRepoWithRejectEmptyCommit_allowed ()
specifier|public
name|void
name|submitNonemptyCommitToEmptyRepoWithRejectEmptyCommit_allowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|hasHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
operator|.
name|getParents
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|actual
init|=
name|fetchFromSubmitPreview
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|hasHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|,
name|rejectEmptyCommit
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitEmptyCommitToEmptyRepoWithRejectEmptyCommit_allowed ()
specifier|public
name|void
name|submitEmptyCommitToEmptyRepoWithRejectEmptyCommit_allowed
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|hasHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Change 1"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|change
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|EMPTY_TREE_ID
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|actual
init|=
name|fetchFromSubmitPreview
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|hasHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|project
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|setChangeStatusToNew (PushOneCommit.Result... changes)
specifier|private
name|void
name|setChangeStatusToNew
parameter_list|(
name|PushOneCommit
operator|.
name|Result
modifier|...
name|changes
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|PushOneCommit
operator|.
name|Result
name|change
range|:
name|changes
control|)
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|change
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getUpdate
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"index.change.indexMergeable"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|submitSchedulesOpenChangesOfSameBranchForReindexing ()
specifier|public
name|void
name|submitSchedulesOpenChangesOfSameBranchForReindexing
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Create a merged change.
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Merged Change"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mergedChange
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|mergedChange
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|approve
argument_list|(
name|mergedChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|mergedChange
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create some open changes.
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|()
decl_stmt|;
comment|// Create a branch with one open change.
name|BranchInput
name|in
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|revision
operator|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
operator|.
name|name
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"dev"
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeOtherBranch
init|=
name|createChange
argument_list|(
literal|"refs/for/dev"
argument_list|)
decl_stmt|;
name|ChangeIndexedListener
name|changeIndexedListener
init|=
name|mock
argument_list|(
name|ChangeIndexedListener
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|Registration
name|registration
init|=
name|extensionRegistry
operator|.
name|newRegistration
argument_list|()
operator|.
name|add
argument_list|(
name|changeIndexedListener
argument_list|)
init|)
block|{
comment|// submit a change, this should trigger asynchronous reindexing of the open changes on the
comment|// same branch
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
comment|// on submit the change that is submitted gets reindexed synchronously
name|verify
argument_list|(
name|changeIndexedListener
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onChangeScheduledForIndexing
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|change1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|changeIndexedListener
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onChangeIndexed
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|change1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// the open changes on the same branch get reindexed asynchronously
name|verify
argument_list|(
name|changeIndexedListener
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onChangeScheduledForIndexing
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|changeIndexedListener
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onChangeScheduledForIndexing
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|change3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// merged changes don't get reindexed
name|verify
argument_list|(
name|changeIndexedListener
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|onChangeScheduledForIndexing
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|mergedChange
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// open changes on other branches don't get reindexed
name|verify
argument_list|(
name|changeIndexedListener
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|onChangeScheduledForIndexing
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|changeOtherBranch
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSubmitter (PushOneCommit.Result change)
specifier|private
name|void
name|assertSubmitter
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|change
parameter_list|)
throws|throws
name|Throwable
block|{
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ListChangesOption
operator|.
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|messages
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|messages
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|info
operator|.
name|messages
argument_list|,
name|i
lambda|->
name|i
operator|.
name|message
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|last
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|messages
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
condition|)
block|{
name|assertThat
argument_list|(
name|last
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Change has been successfully cherry-picked as "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
name|assertThat
argument_list|(
name|last
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Change has been successfully rebased and submitted as"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|last
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change has been successfully merged by Administrator"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateProjectInput (ProjectInput in)
specifier|protected
name|void
name|updateProjectInput
parameter_list|(
name|ProjectInput
name|in
parameter_list|)
block|{
name|in
operator|.
name|submitType
operator|=
name|getSubmitType
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|useContentMerge
operator|==
name|InheritableBoolean
operator|.
name|INHERIT
condition|)
block|{
name|in
operator|.
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
DECL|method|submit (String changeId)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Throwable
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|submit (String changeId, SubmitInput input)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|,
name|SubmitInput
name|input
parameter_list|)
throws|throws
name|Throwable
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
name|input
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|submitWithConflict (String changeId, String expectedError)
specifier|protected
name|void
name|submitWithConflict
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|expectedError
parameter_list|)
throws|throws
name|Throwable
block|{
name|submit
argument_list|(
name|changeId
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
name|ResourceConflictException
operator|.
name|class
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
DECL|method|submit ( String changeId, SubmitInput input, @Nullable Class<? extends RestApiException> expectedExceptionType, String expectedExceptionMsg)
specifier|protected
name|void
name|submit
parameter_list|(
name|String
name|changeId
parameter_list|,
name|SubmitInput
name|input
parameter_list|,
annotation|@
name|Nullable
name|Class
argument_list|<
name|?
extends|extends
name|RestApiException
argument_list|>
name|expectedExceptionType
parameter_list|,
name|String
name|expectedExceptionMsg
parameter_list|)
throws|throws
name|Throwable
block|{
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedExceptionType
operator|==
literal|null
condition|)
block|{
name|assertSubmittable
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requireNonNull
argument_list|(
name|expectedExceptionMsg
argument_list|)
expr_stmt|;
block|}
name|ThrowingRunnable
name|submit
init|=
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedExceptionType
operator|!=
literal|null
condition|)
block|{
name|RestApiException
name|thrown
init|=
name|assertThrows
argument_list|(
name|expectedExceptionType
argument_list|,
name|submit
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
name|expectedExceptionMsg
argument_list|)
expr_stmt|;
return|return;
block|}
name|submit
operator|.
name|run
argument_list|()
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertMerged
argument_list|(
name|change
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmittable (String changeId)
specifier|protected
name|void
name|assertSubmittable
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertWithMessage
argument_list|(
literal|"submit bit on ChangeInfo"
argument_list|)
operator|.
name|that
argument_list|(
name|get
argument_list|(
name|changeId
argument_list|,
name|SUBMITTABLE
argument_list|)
operator|.
name|submittable
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|RevisionResource
name|rsrc
init|=
name|parseCurrentRevisionResource
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|UiAction
operator|.
name|Description
name|desc
init|=
name|submitHandler
operator|.
name|getDescription
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"visible bit on submit action"
argument_list|)
operator|.
name|that
argument_list|(
name|desc
operator|.
name|isVisible
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"enabled bit on submit action"
argument_list|)
operator|.
name|that
argument_list|(
name|desc
operator|.
name|isEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertChangeMergedEvents (String... expected)
specifier|protected
name|void
name|assertChangeMergedEvents
parameter_list|(
name|String
modifier|...
name|expected
parameter_list|)
throws|throws
name|Throwable
block|{
name|eventRecorder
operator|.
name|assertChangeMergedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRefUpdatedEvents (RevCommit... expected)
specifier|protected
name|void
name|assertRefUpdatedEvents
parameter_list|(
name|RevCommit
modifier|...
name|expected
parameter_list|)
throws|throws
name|Throwable
block|{
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCurrentRevision (String changeId, int expectedNum, ObjectId expectedId)
specifier|protected
name|void
name|assertCurrentRevision
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|expectedNum
parameter_list|,
name|ObjectId
name|expectedId
parameter_list|)
throws|throws
name|Throwable
block|{
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|expectedId
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|_number
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedNum
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
name|c
operator|.
name|project
argument_list|)
argument_list|)
init|)
block|{
name|String
name|refName
init|=
name|PatchSet
operator|.
name|id
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|c
operator|.
name|_number
argument_list|)
argument_list|,
name|expectedNum
argument_list|)
operator|.
name|toRefName
argument_list|()
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|refName
argument_list|)
operator|.
name|that
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNew (String changeId)
specifier|protected
name|void
name|assertNew
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
DECL|method|assertApproved (String changeId)
specifier|protected
name|void
name|assertApproved
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertApproved
argument_list|(
name|changeId
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
DECL|method|assertApproved (String changeId, TestAccount user)
specifier|protected
name|void
name|assertApproved
parameter_list|(
name|String
name|changeId
parameter_list|,
name|TestAccount
name|user
parameter_list|)
throws|throws
name|Throwable
block|{
name|ChangeInfo
name|c
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|c
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_accountId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMerged (String changeId)
specifier|protected
name|void
name|assertMerged
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ChangeStatus
name|status
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPersonEquals (PersonIdent expected, PersonIdent actual)
specifier|protected
name|void
name|assertPersonEquals
parameter_list|(
name|PersonIdent
name|expected
parameter_list|,
name|PersonIdent
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|getTimeZone
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAuthorAndCommitDateEquals (RevCommit commit)
specifier|protected
name|void
name|assertAuthorAndCommitDateEquals
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
block|{
name|assertThat
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getTimeZone
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmitter (String changeId, int psId)
specifier|protected
name|void
name|assertSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertSubmitter
argument_list|(
name|changeId
argument_list|,
name|psId
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmitter (String changeId, int psId, TestAccount user)
specifier|protected
name|void
name|assertSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|,
name|TestAccount
name|user
parameter_list|)
throws|throws
name|Throwable
block|{
name|Change
name|c
init|=
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
decl_stmt|;
name|ChangeNotes
name|cn
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|cn
argument_list|,
name|PatchSet
operator|.
name|id
argument_list|(
name|cn
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitter
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|submitter
operator|.
name|isLegacySubmit
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|submitter
operator|.
name|accountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoSubmitter (String changeId, int psId)
specifier|protected
name|void
name|assertNoSubmitter
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|psId
parameter_list|)
throws|throws
name|Throwable
block|{
name|Change
name|c
init|=
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
decl_stmt|;
name|ChangeNotes
name|cn
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|submitter
init|=
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|cn
argument_list|,
name|PatchSet
operator|.
name|id
argument_list|(
name|cn
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitter
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCherryPick (TestRepository<?> testRepo, boolean contentMerge)
specifier|protected
name|void
name|assertCherryPick
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertRebase
argument_list|(
name|testRepo
argument_list|,
name|contentMerge
argument_list|)
expr_stmt|;
name|RevCommit
name|remoteHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getFooterLines
argument_list|(
literal|"Reviewed-On"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getFooterLines
argument_list|(
literal|"Reviewed-By"
argument_list|)
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|assertRebase (TestRepository<?> testRepo, boolean contentMerge)
specifier|protected
name|void
name|assertRebase
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
throws|throws
name|Throwable
block|{
name|Repository
name|repo
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|RevCommit
name|localHead
init|=
name|getHead
argument_list|(
name|repo
argument_list|,
literal|"HEAD"
argument_list|)
decl_stmt|;
name|RevCommit
name|remoteHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|localHead
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|remoteHead
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contentMerge
condition|)
block|{
name|assertThat
argument_list|(
name|getLatestRemoteDiff
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|getLatestDiff
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|remoteHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|localHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRemoteLog (Project.NameKey project, String branch)
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getRemoteLog
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rw
argument_list|)
return|;
block|}
block|}
DECL|method|getRemoteLog ()
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getRemoteLog
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
return|;
block|}
DECL|method|getLatestDiff (Repository repo)
specifier|private
name|String
name|getLatestDiff
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|Throwable
block|{
name|ObjectId
name|oldTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"HEAD~1^{tree}"
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"HEAD^{tree}"
argument_list|)
decl_stmt|;
return|return
name|getLatestDiff
argument_list|(
name|repo
argument_list|,
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
return|;
block|}
DECL|method|getLatestRemoteDiff ()
specifier|private
name|String
name|getLatestRemoteDiff
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|oldTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"refs/heads/master~1^{tree}"
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|repo
operator|.
name|resolve
argument_list|(
literal|"refs/heads/master^{tree}"
argument_list|)
decl_stmt|;
return|return
name|getLatestDiff
argument_list|(
name|repo
argument_list|,
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
return|;
block|}
block|}
DECL|method|getLatestDiff (Repository repo, ObjectId oldTreeId, ObjectId newTreeId)
specifier|private
name|String
name|getLatestDiff
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectId
name|oldTreeId
parameter_list|,
name|ObjectId
name|newTreeId
parameter_list|)
throws|throws
name|Throwable
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|DiffFormatter
name|fmt
init|=
operator|new
name|DiffFormatter
argument_list|(
name|out
argument_list|)
init|)
block|{
name|fmt
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|format
argument_list|(
name|oldTreeId
argument_list|,
name|newTreeId
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|// TODO(hanwen): the submodule tests have a similar method; maybe we could share code?
DECL|method|createProjectForPush (SubmitType submitType)
specifier|protected
name|Project
operator|.
name|NameKey
name|createProjectForPush
parameter_list|(
name|SubmitType
name|submitType
parameter_list|)
throws|throws
name|Throwable
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|submitType
argument_list|(
name|submitType
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
return|return
name|project
return|;
block|}
DECL|method|createChange ( String subject, String fileName, String content, String topic)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Throwable
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|name
argument_list|(
name|topic
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

