begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|SIGNED_OFF_BY_TAG
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseClockStep
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseSystemTime
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|CherryPickInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|MergeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|ChangeAlreadyMergedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|UseClockStep
DECL|class|CreateChangeIT
specifier|public
class|class
name|CreateChangeIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
annotation|@
name|Test
DECL|method|createEmptyChange_MissingBranch ()
specifier|public
name|void
name|createEmptyChange_MissingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"branch must be non-empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange_NonExistingBranch ()
specifier|public
name|void
name|createEmptyChange_NonExistingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|branch
operator|=
literal|"non-existing"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"Destination branch does not exist"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange_MissingMessage ()
specifier|public
name|void
name|createEmptyChange_MissingMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|ci
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|ci
operator|.
name|branch
operator|=
literal|"master"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"commit message must be non-empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange_InvalidStatus ()
specifier|public
name|void
name|createEmptyChange_InvalidStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
decl_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"unsupported change status"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange_InvalidChangeId ()
specifier|public
name|void
name|createEmptyChange_InvalidChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Subject\n\nChange-Id: I0000000000000000000000000000000000000000"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|ResourceConflictException
operator|.
name|class
argument_list|,
literal|"invalid Change-Id line format in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEmptyChange_InvalidSubject ()
specifier|public
name|void
name|createEmptyChange_InvalidSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Change-Id: I1234000000000000000000000000000000000000"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|ResourceConflictException
operator|.
name|class
argument_list|,
literal|"missing subject; Change-Id must be in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChange_InvalidCommentInCommitMessage ()
specifier|public
name|void
name|createNewChange_InvalidCommentInCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"#12345 Test"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"commit message must be non-empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChange_RequiresAuthentication ()
specifier|public
name|void
name|createNewChange_RequiresAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|assertCreateFails
argument_list|(
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|AuthException
operator|.
name|class
argument_list|,
literal|"Authentication required"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChange ()
specifier|public
name|void
name|createNewChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInfo
name|info
init|=
name|assertCreateSucceeds
argument_list|(
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Change-Id: "
operator|+
name|info
operator|.
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChangeWithCommentsInCommitMessage ()
specifier|public
name|void
name|createNewChangeWithCommentsInCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|subject
operator|+=
literal|"\n# Comment line"
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|ci
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"# Comment line"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChangeWithChangeId ()
specifier|public
name|void
name|createNewChangeWithChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
literal|"I1234000000000000000000000000000000000000"
decl_stmt|;
name|String
name|changeIdLine
init|=
literal|"Change-Id: "
operator|+
name|changeId
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Subject\n\n"
operator|+
name|changeIdLine
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|assertCreateSucceeds
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
argument_list|)
operator|.
name|contains
argument_list|(
name|changeIdLine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateChangeWithChangeIfOfExistingChangeOnSameBranch ()
specifier|public
name|void
name|cannotCreateChangeWithChangeIfOfExistingChangeOnSameBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Subject\n\nChange-Id: "
operator|+
name|changeId
expr_stmt|;
name|assertCreateFails
argument_list|(
name|ci
argument_list|,
name|ResourceConflictException
operator|.
name|class
argument_list|,
literal|"A change with Change-Id "
operator|+
name|changeId
operator|+
literal|" already exists for this branch."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|canCreateChangeWithChangeIfOfExistingChangeOnOtherBranch ()
specifier|public
name|void
name|canCreateChangeWithChangeIfOfExistingChangeOnOtherBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Subject\n\nChange-Id: "
operator|+
name|changeId
expr_stmt|;
name|ci
operator|.
name|branch
operator|=
literal|"other"
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|assertCreateSucceeds
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notificationsOnChangeCreation ()
specifier|public
name|void
name|notificationsOnChangeCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that watcher is notified
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertCreateSucceeds
argument_list|(
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|body
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|admin
operator|.
name|fullName
argument_list|()
operator|+
literal|" has uploaded this change for review."
argument_list|)
expr_stmt|;
comment|// check that watcher is not notified if notify=NONE
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|notify
operator|=
name|NotifyHandling
operator|.
name|NONE
expr_stmt|;
name|assertCreateSucceeds
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChangeSignedOffByFooter ()
specifier|public
name|void
name|createNewChangeSignedOffByFooter
parameter_list|()
throws|throws
name|Exception
block|{
name|setSignedOffByFooter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|ChangeInfo
name|info
init|=
name|assertCreateSucceeds
argument_list|(
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
decl_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%sAdministrator<%s>"
argument_list|,
name|SIGNED_OFF_BY_TAG
argument_list|,
name|admin
operator|.
name|newIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setSignedOffByFooter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createNewChangeSignedOffByFooterWithChangeId ()
specifier|public
name|void
name|createNewChangeSignedOffByFooterWithChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|setSignedOffByFooter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|ChangeInput
name|ci
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
literal|"I1234000000000000000000000000000000000000"
decl_stmt|;
name|String
name|changeIdLine
init|=
literal|"Change-Id: "
operator|+
name|changeId
decl_stmt|;
name|ci
operator|.
name|subject
operator|=
literal|"Subject\n\n"
operator|+
name|changeIdLine
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|assertCreateSucceeds
argument_list|(
name|ci
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|info
operator|.
name|revisions
operator|.
name|get
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|commit
operator|.
name|message
decl_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|)
operator|.
name|contains
argument_list|(
name|changeIdLine
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%sAdministrator<%s>"
argument_list|,
name|SIGNED_OFF_BY_TAG
argument_list|,
name|admin
operator|.
name|newIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setSignedOffByFooter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createNewPrivateChange ()
specifier|public
name|void
name|createNewPrivateChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|isPrivate
operator|=
literal|true
expr_stmt|;
name|assertCreateSucceeds
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewWorkInProgressChange ()
specifier|public
name|void
name|createNewWorkInProgressChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|workInProgress
operator|=
literal|true
expr_stmt|;
name|assertCreateSucceeds
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithParentCommit ()
specifier|public
name|void
name|createChangeWithParentCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|setup
init|=
name|changeInTwoBranches
argument_list|(
literal|"foo"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar.txt"
argument_list|)
decl_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|baseCommit
operator|=
name|setup
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertCreateSucceeds
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithBadParentCommitFails ()
specifier|public
name|void
name|createChangeWithBadParentCommitFails
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|baseCommit
operator|=
literal|"notasha1"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
literal|"Base notasha1 doesn't represent a valid SHA-1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithParentCommitOnWrongBranchFails ()
specifier|public
name|void
name|createChangeWithParentCommitOnWrongBranchFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|setup
init|=
name|changeInTwoBranches
argument_list|(
literal|"foo"
argument_list|,
literal|"foo.txt"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar.txt"
argument_list|)
decl_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|branch
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|baseCommit
operator|=
name|setup
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Commit %s doesn't exist on ref refs/heads/foo"
argument_list|,
name|input
operator|.
name|baseCommit
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithParentCommitWithNonExistingTargetBranch ()
specifier|public
name|void
name|createChangeWithParentCommitWithNonExistingTargetBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|Result
name|initialCommit
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"initial commit"
argument_list|,
literal|"readme.txt"
argument_list|,
literal|"initial commit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|initialCommit
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|branch
operator|=
literal|"non-existing"
expr_stmt|;
name|input
operator|.
name|baseCommit
operator|=
name|initialCommit
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"Destination branch does not exist"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeOnNonExistingBaseChangeFails ()
specifier|public
name|void
name|createChangeOnNonExistingBaseChangeFails
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|baseChange
operator|=
literal|"999999"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
literal|"Base change not found: "
operator|+
name|input
operator|.
name|baseChange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithoutAccessToParentCommitFails ()
specifier|public
name|void
name|createChangeWithoutAccessToParentCommitFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|results
init|=
name|changeInTwoBranches
argument_list|(
literal|"invisible-branch"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"visible-branch"
argument_list|,
literal|"b.txt"
argument_list|)
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/invisible-branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|in
operator|.
name|branch
operator|=
literal|"visible-branch"
expr_stmt|;
name|in
operator|.
name|baseChange
operator|=
name|results
operator|.
name|get
argument_list|(
literal|"invisible-branch"
argument_list|)
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
name|assertCreateFails
argument_list|(
name|in
argument_list|,
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
literal|"Base change not found: "
operator|+
name|in
operator|.
name|baseChange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noteDbCommit ()
specifier|public
name|void
name|noteDbCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInfo
name|c
init|=
name|assertCreateSucceeds
argument_list|(
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|changeMetaRef
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|c
operator|.
name|_number
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Create change"
argument_list|)
expr_stmt|;
name|PersonIdent
name|expectedAuthor
init|=
name|changeNoteUtil
operator|.
name|newIdent
argument_list|(
name|getAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|c
operator|.
name|created
argument_list|,
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAuthor
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|c
operator|.
name|created
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commit
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|createMergeChange ()
specifier|public
name|void
name|createMergeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|changeInTwoBranches
argument_list|(
literal|"branchA"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"branchB"
argument_list|,
literal|"b.txt"
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"branchA"
argument_list|,
literal|"branchB"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertCreateSucceeds
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergeChange_Conflicts ()
specifier|public
name|void
name|createMergeChange_Conflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|changeInTwoBranches
argument_list|(
literal|"branchA"
argument_list|,
literal|"shared.txt"
argument_list|,
literal|"branchB"
argument_list|,
literal|"shared.txt"
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"branchA"
argument_list|,
literal|"branchB"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertCreateFails
argument_list|(
name|in
argument_list|,
name|RestApiException
operator|.
name|class
argument_list|,
literal|"merge conflict"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergeChange_Conflicts_Ours ()
specifier|public
name|void
name|createMergeChange_Conflicts_Ours
parameter_list|()
throws|throws
name|Exception
block|{
name|changeInTwoBranches
argument_list|(
literal|"branchA"
argument_list|,
literal|"shared.txt"
argument_list|,
literal|"branchB"
argument_list|,
literal|"shared.txt"
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"branchA"
argument_list|,
literal|"branchB"
argument_list|,
literal|"ours"
argument_list|)
decl_stmt|;
name|assertCreateSucceeds
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergeChangeFailsWithConflictIfThereAreTooManyCommonPredecessors ()
specifier|public
name|void
name|createMergeChangeFailsWithConflictIfThereAreTooManyCommonPredecessors
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an initial commit in master.
name|Result
name|initialCommit
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"initial commit"
argument_list|,
literal|"readme.txt"
argument_list|,
literal|"initial commit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|initialCommit
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|String
name|file
init|=
literal|"shared.txt"
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// RecursiveMerger#MAX_BASES = 200, cannot use RecursiveMerger#MAX_BASES as it is not static.
name|int
name|maxBases
init|=
literal|200
decl_stmt|;
comment|// Create more than RecursiveMerger#MAX_BASES base commits.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|maxBases
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Base "
operator|+
name|i
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|,
literal|"content "
operator|+
name|i
argument_list|)
operator|.
name|parent
argument_list|(
name|initialCommit
operator|.
name|getCommit
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create 2 branches.
name|String
name|branchA
init|=
literal|"branchA"
decl_stmt|;
name|String
name|branchB
init|=
literal|"branchB"
decl_stmt|;
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|branchA
argument_list|)
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|branchB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Push an octopus merge to both of the branches.
name|Result
name|octopusA
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParents
argument_list|(
name|parents
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/"
operator|+
name|branchA
argument_list|)
decl_stmt|;
name|octopusA
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|Result
name|octopusB
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParents
argument_list|(
name|parents
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/"
operator|+
name|branchB
argument_list|)
decl_stmt|;
name|octopusB
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Creating a merge commit for the 2 octopus commits fails, because they have more than
comment|// RecursiveMerger#MAX_BASES common predecessors.
name|assertCreateFails
argument_list|(
name|newMergeChangeInput
argument_list|(
literal|"branchA"
argument_list|,
literal|"branchB"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|ResourceConflictException
operator|.
name|class
argument_list|,
literal|"Cannot create merge commit: No merge base could be determined."
operator|+
literal|" Reason=TOO_MANY_MERGE_BASES."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidSource ()
specifier|public
name|void
name|invalidSource
parameter_list|()
throws|throws
name|Exception
block|{
name|changeInTwoBranches
argument_list|(
literal|"branchA"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"branchB"
argument_list|,
literal|"b.txt"
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"branchA"
argument_list|,
literal|"invalid"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertCreateFails
argument_list|(
name|in
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"Cannot resolve 'invalid' to a commit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|invalidStrategy ()
specifier|public
name|void
name|invalidStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|changeInTwoBranches
argument_list|(
literal|"branchA"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"branchB"
argument_list|,
literal|"b.txt"
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"branchA"
argument_list|,
literal|"branchB"
argument_list|,
literal|"octopus"
argument_list|)
decl_stmt|;
name|assertCreateFails
argument_list|(
name|in
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"invalid merge strategy: octopus"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|alreadyMerged ()
specifier|public
name|void
name|alreadyMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|c0
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"first commit"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"a contents "
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"second commit"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"b contents "
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"master"
argument_list|,
name|c0
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertCreateFails
argument_list|(
name|in
argument_list|,
name|ChangeAlreadyMergedException
operator|.
name|class
argument_list|,
literal|"'"
operator|+
name|c0
operator|.
name|getName
argument_list|()
operator|+
literal|"' has already been merged"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyContentMerged ()
specifier|public
name|void
name|onlyContentMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"first commit"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"a contents "
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// create a change, and cherrypick into master
name|PushOneCommit
operator|.
name|Result
name|cId
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RevCommit
name|commitId
init|=
name|cId
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|CherryPickInput
name|cpi
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|cpi
operator|.
name|destination
operator|=
literal|"master"
expr_stmt|;
name|cpi
operator|.
name|message
operator|=
literal|"cherry pick the commit"
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cId
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|cpi
argument_list|)
decl_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ObjectId
name|remoteId
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|remoteId
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
name|ChangeInput
name|in
init|=
name|newMergeChangeInput
argument_list|(
literal|"master"
argument_list|,
name|commitId
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertCreateSucceeds
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeOnExistingBranchNotPermitted ()
specifier|public
name|void
name|createChangeOnExistingBranchNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|branch
operator|=
literal|"foo"
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
literal|"ref refs/heads/foo not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeOnNonExistingBranch ()
specifier|public
name|void
name|createChangeOnNonExistingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|branch
operator|=
literal|"foo"
expr_stmt|;
name|input
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|assertCreateSucceeds
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeOnNonExistingBranchNotPermitted ()
specifier|public
name|void
name|createChangeOnNonExistingBranchNotPermitted
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInput
name|input
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|input
operator|.
name|branch
operator|=
literal|"foo"
expr_stmt|;
comment|// sets this option to be true to make sure permission check happened before this option could
comment|// be considered.
name|input
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
literal|"ref refs/heads/foo not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createMergeChangeOnNonExistingBranchNotPossible ()
specifier|public
name|void
name|createMergeChangeOnNonExistingBranchNotPossible
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeInput
name|input
init|=
name|newMergeChangeInput
argument_list|(
literal|"foo"
argument_list|,
literal|"master"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|input
operator|.
name|newBranch
operator|=
literal|true
expr_stmt|;
name|assertCreateFails
argument_list|(
name|input
argument_list|,
name|BadRequestException
operator|.
name|class
argument_list|,
literal|"Cannot create merge: destination branch does not exist"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseSystemTime
DECL|method|sha1sOfTwoNewChangesDiffer ()
specifier|public
name|void
name|sha1sOfTwoNewChangesDiffer
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInput
name|changeInput
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ChangeInfo
name|info1
init|=
name|assertCreateSucceeds
argument_list|(
name|changeInput
argument_list|)
decl_stmt|;
name|ChangeInfo
name|info2
init|=
name|assertCreateSucceeds
argument_list|(
name|changeInput
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info1
operator|.
name|currentRevision
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|info2
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|UseSystemTime
DECL|method|sha1sOfTwoNewChangesDifferIfCreatedConcurrently ()
specifier|public
name|void
name|sha1sOfTwoNewChangesDifferIfCreatedConcurrently
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ChangeInput
name|changeInput
init|=
name|newChangeInput
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|sync
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|ChangeInfo
argument_list|>
name|createChange
init|=
parameter_list|()
lambda|->
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|sync
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|assertCreateSucceeds
argument_list|(
name|changeInput
argument_list|)
return|;
block|}
decl_stmt|;
name|Future
argument_list|<
name|ChangeInfo
argument_list|>
name|changeInfo1
init|=
name|executor
operator|.
name|submit
argument_list|(
name|createChange
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|ChangeInfo
argument_list|>
name|changeInfo2
init|=
name|executor
operator|.
name|submit
argument_list|(
name|createChange
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfo1
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|changeInfo2
operator|.
name|get
argument_list|()
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newChangeInput (ChangeStatus status)
specifier|private
name|ChangeInput
name|newChangeInput
parameter_list|(
name|ChangeStatus
name|status
parameter_list|)
block|{
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|branch
operator|=
literal|"master"
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"Empty change"
expr_stmt|;
name|in
operator|.
name|topic
operator|=
literal|"support-gerrit-workflow-in-browser"
expr_stmt|;
name|in
operator|.
name|status
operator|=
name|status
expr_stmt|;
return|return
name|in
return|;
block|}
DECL|method|assertCreateSucceeds (ChangeInput in)
specifier|private
name|ChangeInfo
name|assertCreateSucceeds
parameter_list|(
name|ChangeInput
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeInfo
name|out
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|out
operator|.
name|branch
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|in
operator|.
name|branch
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|subject
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|subject
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|topic
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|topic
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|in
operator|.
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|isPrivate
condition|)
block|{
name|assertThat
argument_list|(
name|out
operator|.
name|isPrivate
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|out
operator|.
name|isPrivate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|workInProgress
condition|)
block|{
name|assertThat
argument_list|(
name|out
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|out
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|out
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|submitted
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|assertCreateFails ( ChangeInput in, Class<? extends RestApiException> errType, String errSubstring)
specifier|private
name|void
name|assertCreateFails
parameter_list|(
name|ChangeInput
name|in
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RestApiException
argument_list|>
name|errType
parameter_list|,
name|String
name|errSubstring
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|thrown
init|=
name|assertThrows
argument_list|(
name|errType
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|errSubstring
argument_list|)
expr_stmt|;
block|}
comment|// TODO(davido): Expose setting of account preferences in the API
DECL|method|setSignedOffByFooter (boolean value)
specifier|private
name|void
name|setSignedOffByFooter
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|get
argument_list|(
literal|"/accounts/"
operator|+
name|admin
operator|.
name|email
argument_list|()
operator|+
literal|"/preferences"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|GeneralPreferencesInfo
name|i
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GeneralPreferencesInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|i
operator|.
name|signedOffBy
operator|=
name|value
expr_stmt|;
name|r
operator|=
name|adminRestSession
operator|.
name|put
argument_list|(
literal|"/accounts/"
operator|+
name|admin
operator|.
name|email
argument_list|()
operator|+
literal|"/preferences"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|GeneralPreferencesInfo
name|o
init|=
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|r
operator|.
name|getReader
argument_list|()
argument_list|,
name|GeneralPreferencesInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
condition|)
block|{
name|assertThat
argument_list|(
name|o
operator|.
name|signedOffBy
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|o
operator|.
name|signedOffBy
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
expr_stmt|;
block|}
DECL|method|newMergeChangeInput (String targetBranch, String sourceRef, String strategy)
specifier|private
name|ChangeInput
name|newMergeChangeInput
parameter_list|(
name|String
name|targetBranch
parameter_list|,
name|String
name|sourceRef
parameter_list|,
name|String
name|strategy
parameter_list|)
block|{
comment|// create a merge change from branchA to master in gerrit
name|ChangeInput
name|in
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|in
operator|.
name|branch
operator|=
name|targetBranch
expr_stmt|;
name|in
operator|.
name|subject
operator|=
literal|"merge "
operator|+
name|sourceRef
operator|+
literal|" to "
operator|+
name|targetBranch
expr_stmt|;
name|in
operator|.
name|status
operator|=
name|ChangeStatus
operator|.
name|NEW
expr_stmt|;
name|MergeInput
name|mergeInput
init|=
operator|new
name|MergeInput
argument_list|()
decl_stmt|;
name|mergeInput
operator|.
name|source
operator|=
name|sourceRef
expr_stmt|;
name|in
operator|.
name|merge
operator|=
name|mergeInput
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|in
operator|.
name|merge
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
comment|/**    * Create an empty commit in master, two new branches with one commit each.    *    * @param branchA name of first branch to create    * @param fileA name of file to commit to branchA    * @param branchB name of second branch to create    * @param fileB name of file to commit to branchB    * @return A {@code Map} of branchName => commit result.    * @throws Exception    */
DECL|method|changeInTwoBranches ( String branchA, String fileA, String branchB, String fileB)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Result
argument_list|>
name|changeInTwoBranches
parameter_list|(
name|String
name|branchA
parameter_list|,
name|String
name|fileA
parameter_list|,
name|String
name|branchB
parameter_list|,
name|String
name|fileB
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create a initial commit in master
name|Result
name|initialCommit
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"initial commit"
argument_list|,
literal|"readme.txt"
argument_list|,
literal|"initial commit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|initialCommit
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// create two new branches
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|branchA
argument_list|)
argument_list|)
expr_stmt|;
name|createBranch
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|branchB
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a commit in branchA
name|Result
name|changeA
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change A"
argument_list|,
name|fileA
argument_list|,
literal|"A content"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/"
operator|+
name|branchA
argument_list|)
decl_stmt|;
name|changeA
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// create a commit in branchB
name|PushOneCommit
name|commitB
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change B"
argument_list|,
name|fileB
argument_list|,
literal|"B content"
argument_list|)
decl_stmt|;
name|commitB
operator|.
name|setParent
argument_list|(
name|initialCommit
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|changeB
init|=
name|commitB
operator|.
name|to
argument_list|(
literal|"refs/heads/"
operator|+
name|branchB
argument_list|)
decl_stmt|;
name|changeB
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"master"
argument_list|,
name|initialCommit
argument_list|,
name|branchA
argument_list|,
name|changeA
argument_list|,
name|branchB
argument_list|,
name|changeB
argument_list|)
return|;
block|}
block|}
end_class

end_unit

