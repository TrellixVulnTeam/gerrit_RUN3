begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|WorkInProgressByDefaultIT
specifier|public
class|class
name|WorkInProgressByDefaultIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|project1
specifier|private
name|Project
operator|.
name|NameKey
name|project1
decl_stmt|;
DECL|field|project2
specifier|private
name|Project
operator|.
name|NameKey
name|project2
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|project1
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|project2
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|parent
argument_list|(
name|project1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|workInProgressByDefault
operator|=
literal|false
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithWorkInProgressByDefaultForProjectDisabled ()
specifier|public
name|void
name|createChangeWithWorkInProgressByDefaultForProjectDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithWorkInProgressByDefaultForProjectEnabled ()
specifier|public
name|void
name|createChangeWithWorkInProgressByDefaultForProjectEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForProject
argument_list|(
name|project2
argument_list|)
expr_stmt|;
name|ChangeInput
name|input
init|=
operator|new
name|ChangeInput
argument_list|(
name|project2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithWorkInProgressByDefaultForUserEnabled ()
specifier|public
name|void
name|createChangeWithWorkInProgressByDefaultForUserEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForUser
argument_list|()
expr_stmt|;
name|ChangeInput
name|input
init|=
operator|new
name|ChangeInput
argument_list|(
name|project2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeBypassWorkInProgressByDefaultForProjectEnabled ()
specifier|public
name|void
name|createChangeBypassWorkInProgressByDefaultForProjectEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForProject
argument_list|(
name|project2
argument_list|)
expr_stmt|;
name|ChangeInput
name|input
init|=
operator|new
name|ChangeInput
argument_list|(
name|project2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
decl_stmt|;
name|input
operator|.
name|workInProgress
operator|=
literal|false
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeBypassWorkInProgressByDefaultForUserEnabled ()
specifier|public
name|void
name|createChangeBypassWorkInProgressByDefaultForUserEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForUser
argument_list|()
expr_stmt|;
name|ChangeInput
name|input
init|=
operator|new
name|ChangeInput
argument_list|(
name|project2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
decl_stmt|;
name|input
operator|.
name|workInProgress
operator|=
literal|false
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|workInProgress
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeWithWorkInProgressByDefaultForProjectInherited ()
specifier|public
name|void
name|createChangeWithWorkInProgressByDefaultForProjectInherited
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForProject
argument_list|(
name|project1
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"empty change"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|workInProgress
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithWorkInProgressByDefaultForProjectEnabled ()
specifier|public
name|void
name|pushWithWorkInProgressByDefaultForProjectEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForProject
argument_list|(
name|project2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|createChange
argument_list|(
name|project2
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithWorkInProgressByDefaultForUserEnabled ()
specifier|public
name|void
name|pushWithWorkInProgressByDefaultForUserEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|createChange
argument_list|(
name|project2
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushBypassWorkInProgressByDefaultForProjectEnabled ()
specifier|public
name|void
name|pushBypassWorkInProgressByDefaultForProjectEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForProject
argument_list|(
name|project2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|createChange
argument_list|(
name|project2
argument_list|,
literal|"refs/for/master%ready"
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushBypassWorkInProgressByDefaultForUserEnabled ()
specifier|public
name|void
name|pushBypassWorkInProgressByDefaultForUserEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForUser
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|createChange
argument_list|(
name|project2
argument_list|,
literal|"refs/for/master%ready"
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithWorkInProgressByDefaultForProjectDisabled ()
specifier|public
name|void
name|pushWithWorkInProgressByDefaultForProjectDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|createChange
argument_list|(
name|project2
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWorkInProgressByDefaultForProjectInherited ()
specifier|public
name|void
name|pushWorkInProgressByDefaultForProjectInherited
parameter_list|()
throws|throws
name|Exception
block|{
name|setWorkInProgressByDefaultForProject
argument_list|(
name|project1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|createChange
argument_list|(
name|project2
argument_list|)
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|setWorkInProgressByDefaultForProject (Project.NameKey p)
specifier|private
name|void
name|setWorkInProgressByDefaultForProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|ConfigInput
name|input
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|workInProgressByDefault
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|p
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|setWorkInProgressByDefaultForUser ()
specifier|private
name|void
name|setWorkInProgressByDefaultForUser
parameter_list|()
throws|throws
name|Exception
block|{
name|GeneralPreferencesInfo
name|prefs
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|workInProgressByDefault
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
DECL|method|createChange (Project.NameKey p)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createChange
argument_list|(
name|p
argument_list|,
literal|"refs/for/master"
argument_list|)
return|;
block|}
DECL|method|createChange (Project.NameKey p, String r)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|String
name|r
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|testRepo
init|=
name|cloneProject
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

