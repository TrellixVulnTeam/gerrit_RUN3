begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|getChangeId
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AbstractSubmitByRebase
specifier|public
specifier|abstract
class|class
name|AbstractSubmitByRebase
extends|extends
name|AbstractSubmit
block|{
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
annotation|@
name|Override
DECL|method|getSubmitType ()
specifier|protected
specifier|abstract
name|SubmitType
name|getSubmitType
parameter_list|()
function_decl|;
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitWithRebase ()
specifier|public
name|void
name|submitWithRebase
parameter_list|()
throws|throws
name|Throwable
block|{
name|submitWithRebase
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitWithRebaseWithoutAddPatchSetPermission ()
specifier|public
name|void
name|submitWithRebaseWithoutAddPatchSetPermission
parameter_list|()
throws|throws
name|Throwable
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|ADD_PATCH_SET
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
name|Util
operator|.
name|codeReview
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|submitWithRebase
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|submitWithRebase (TestAccount submitter)
specifier|protected
name|ImmutableList
argument_list|<
name|PushOneCommit
operator|.
name|Result
argument_list|>
name|submitWithRebase
parameter_list|(
name|TestAccount
name|submitter
parameter_list|)
throws|throws
name|Throwable
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|submitter
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertRebase
argument_list|(
name|testRepo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSecondSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertApproved
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|submitter
argument_list|)
expr_stmt|;
name|assertCurrentRevision
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|submitter
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|submitter
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|submitter
operator|.
name|newIdent
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|change
argument_list|,
name|change2
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|submitWithRebaseMultipleChanges ()
specifier|public
name|void
name|submitWithRebaseMultipleChanges
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
name|assertCurrentRevision
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"c.txt"
argument_list|,
literal|"third content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"d.txt"
argument_list|,
literal|"fourth content"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertRebase
argument_list|(
name|testRepo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertApproved
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertApproved
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertApproved
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSecondSubmit
init|=
name|parse
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change 4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|change4
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertCurrentRevision
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|RevCommit
name|parent
init|=
name|parse
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parent
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change 3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parent
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|change3
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertCurrentRevision
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|RevCommit
name|grandparent
init|=
name|parse
argument_list|(
name|parent
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|grandparent
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertCurrentRevision
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|grandparent
argument_list|)
expr_stmt|;
name|RevCommit
name|greatgrandparent
init|=
name|parse
argument_list|(
name|grandparent
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|greatgrandparent
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
name|assertCurrentRevision
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|greatgrandparent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertCurrentRevision
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|greatgrandparent
argument_list|)
expr_stmt|;
block|}
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWithRebaseMergeCommit ()
specifier|public
name|void
name|submitWithRebaseMergeCommit
parameter_list|()
throws|throws
name|Throwable
block|{
comment|/*        *  (HEAD, origin/master, origin/HEAD) Merge changes X,Y        |\        | *   Merge branch 'master' into origin/master        | |\        | | * SHA Added a        | |/        * | Before        |/        * Initial empty repository     */
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Added a"
argument_list|,
literal|"a.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|PushOneCommit
name|change2Push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"Merge to master"
argument_list|,
literal|"m.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|change2Push
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|initialHead
argument_list|,
name|change1
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|change2Push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Before"
argument_list|,
literal|"b.txt"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|newHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHead
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|RevCommit
name|headParent1
init|=
name|parse
argument_list|(
name|newHead
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|headParent2
init|=
name|parse
argument_list|(
name|newHead
operator|.
name|getParent
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
condition|)
block|{
name|assertCurrentRevision
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|headParent1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|change3
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headParent1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|headParent1
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headParent1
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headParent2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headParent2
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|RevCommit
name|headGrandparent1
init|=
name|parse
argument_list|(
name|headParent2
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|headGrandparent2
init|=
name|parse
argument_list|(
name|headParent2
operator|.
name|getParent
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headGrandparent1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headGrandparent2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitWithContentMerge_Conflict ()
specifier|public
name|void
name|submitWithContentMerge_Conflict
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|submitWithConflict
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Cannot rebase "
operator|+
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|": The change could not be rebased due to a conflict during merge."
argument_list|)
expr_stmt|;
name|RevCommit
name|head
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|head
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertCurrentRevision
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|change2
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parse (ObjectId id)
specifier|protected
name|RevCommit
name|parse
parameter_list|(
name|ObjectId
name|id
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitAfterReorderOfCommits ()
specifier|public
name|void
name|submitAfterReorderOfCommits
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
comment|// Create two commits and push.
name|RevCommit
name|c1
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2
init|=
name|commitBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|message
argument_list|(
literal|"subject: 2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|id1
init|=
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Swap the order of commits and push again.
name|testRepo
operator|.
name|reset
argument_list|(
literal|"HEAD~2"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSubmit
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|id2
argument_list|,
name|headAfterSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|id1
argument_list|,
name|headAfterSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitChangesAfterBranchOnSecond ()
specifier|public
name|void
name|submitChangesAfterBranchOnSecond
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|BranchNameKey
name|branch
init|=
name|BranchNameKey
operator|.
name|create
argument_list|(
name|project
argument_list|,
literal|"branch"
argument_list|)
decl_stmt|;
name|createBranchWithRevision
argument_list|(
name|branch
argument_list|,
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertMerged
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertMerged
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|newHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|this
operator|.
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|newHead
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|newHead
operator|.
name|name
argument_list|()
argument_list|,
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|newHead
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitFastForwardIdenticalTree ()
specifier|public
name|void
name|submitFastForwardIdenticalTree
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
comment|// for rebase if necessary, otherwise, the manual rebase of change2 will
comment|// fail since change1 would be merged as fast forward
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change0
init|=
name|createChange
argument_list|(
literal|"Change 0"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change0
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterChange0
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterChange0
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change 0"
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterChange1
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterChange1
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change 1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headAfterChange0
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterChange1
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do manual rebase first.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|()
expr_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterChange2
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterChange2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change 2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headAfterChange1
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterChange2
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info2
init|=
name|info
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info2
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitChainOneByOne ()
specifier|public
name|void
name|submitChainOneByOne
parameter_list|()
throws|throws
name|Throwable
block|{
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"subject 1"
argument_list|,
literal|"fileName 1"
argument_list|,
literal|"content 1"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"subject 2"
argument_list|,
literal|"fileName 2"
argument_list|,
literal|"content 2"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitChainFailsOnRework ()
specifier|public
name|void
name|submitChainFailsOnRework
parameter_list|()
throws|throws
name|Throwable
block|{
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"subject 1"
argument_list|,
literal|"fileName 1"
argument_list|,
literal|"content 1"
argument_list|)
decl_stmt|;
name|RevCommit
name|headAfterChange1
init|=
name|change1
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"subject 2"
argument_list|,
literal|"fileName 2"
argument_list|,
literal|"content 2"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|headAfterChange1
argument_list|)
expr_stmt|;
name|change1
operator|=
name|amendChange
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"subject 1 amend"
argument_list|,
literal|"fileName 2"
argument_list|,
literal|"rework content 2"
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|headAfterChange1
operator|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|submitWithConflict
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Cannot rebase "
operator|+
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
literal|"The change could not be rebased due to a conflict during merge."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|headAfterChange1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|useContentMerge
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|submitChainOneByOneManualRebase ()
specifier|public
name|void
name|submitChainOneByOneManualRebase
parameter_list|()
throws|throws
name|Throwable
block|{
name|RevCommit
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
literal|"subject 1"
argument_list|,
literal|"fileName 1"
argument_list|,
literal|"content 1"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"subject 2"
argument_list|,
literal|"fileName 2"
argument_list|,
literal|"content 2"
argument_list|)
decl_stmt|;
comment|// for rebase if necessary, otherwise, the manual rebase of change2 will
comment|// fail since change1 would be merged as fast forward
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do manual rebase first.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|rebase
argument_list|()
expr_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

