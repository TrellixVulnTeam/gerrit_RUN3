begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|CherryPickInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SubmitByMergeIfNecessaryIT
specifier|public
class|class
name|SubmitByMergeIfNecessaryIT
extends|extends
name|AbstractSubmitByMerge
block|{
annotation|@
name|Override
DECL|method|getSubmitType ()
specifier|protected
name|SubmitType
name|getSubmitType
parameter_list|()
block|{
return|return
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
return|;
block|}
annotation|@
name|Test
DECL|method|submitWithFastForward ()
specifier|public
name|void
name|submitWithFastForward
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|updatedHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updatedHead
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedHead
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertSubmitter
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|updatedHead
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|updatedHead
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|updatedHead
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|updatedHead
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitMultipleChanges ()
specifier|public
name|void
name|submitMultipleChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
literal|"Change 3"
argument_list|,
literal|"d"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change4
init|=
name|createChange
argument_list|(
literal|"Change 4"
argument_list|,
literal|"e"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change5
init|=
name|createChange
argument_list|(
literal|"Change 5"
argument_list|,
literal|"f"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
comment|// Change 2 is a fast-forward, no need to merge.
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|getRemoteLog
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterFirstSubmit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headAfterFirstSubmit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
comment|// We need to merge changes 3, 4 and 5.
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|change5
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSecondSubmit
init|=
name|getRemoteLog
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getParent
argument_list|(
literal|1
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change5
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|assertPersonEquals
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
comment|// First change stays untouched.
name|assertNew
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// The two submit operations should have resulted in two ref-update events
comment|// and three change-merged events.
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change4
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change5
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitChangesAcrossRepos ()
specifier|public
name|void
name|submitChangesAcrossRepos
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
name|createProject
argument_list|(
literal|"project-where-we-submit"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
name|createProject
argument_list|(
literal|"project-impacted-via-topic"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p3
init|=
name|createProject
argument_list|(
literal|"project-impacted-indirectly-via-topic"
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead2
init|=
name|getRemoteHead
argument_list|(
name|p2
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead3
init|=
name|getRemoteHead
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo1
init|=
name|cloneProject
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo2
init|=
name|cloneProject
argument_list|(
name|p2
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo3
init|=
name|cloneProject
argument_list|(
name|p3
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1a
init|=
name|createChange
argument_list|(
name|repo1
argument_list|,
literal|"master"
argument_list|,
literal|"An ancestor of the change we want to submit"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"dependent-topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1b
init|=
name|createChange
argument_list|(
name|repo1
argument_list|,
literal|"master"
argument_list|,
literal|"We're interested in submitting this change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|,
literal|"topic-to-submit"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2a
init|=
name|createChange
argument_list|(
name|repo2
argument_list|,
literal|"master"
argument_list|,
literal|"indirection level 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"topic-indirect"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2b
init|=
name|createChange
argument_list|(
name|repo2
argument_list|,
literal|"master"
argument_list|,
literal|"should go in with first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|,
literal|"dependent-topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repo3
argument_list|,
literal|"master"
argument_list|,
literal|"indirection level 2"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"topic-indirect"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1a
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2a
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2b
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a preview before submitting:
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ObjectId
argument_list|>
name|preview
init|=
name|fetchFromSubmitPreview
argument_list|(
name|change1b
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change1b
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|tip1
init|=
name|getRemoteLog
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RevCommit
name|tip2
init|=
name|getRemoteLog
argument_list|(
name|p2
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RevCommit
name|tip3
init|=
name|getRemoteLog
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tip1
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1b
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|tip2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2b
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tip3
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change3
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the preview matched what happened:
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|p1
argument_list|,
name|preview
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p2
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|p2
argument_list|,
name|preview
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p3
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrees
argument_list|(
name|p3
argument_list|,
name|preview
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|tip2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tip3
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead3
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|preview
operator|.
name|get
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|p1
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitChangesAcrossReposBlocked ()
specifier|public
name|void
name|submitChangesAcrossReposBlocked
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
name|createProject
argument_list|(
literal|"project-where-we-submit"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p2
init|=
name|createProject
argument_list|(
literal|"project-impacted-via-topic"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p3
init|=
name|createProject
argument_list|(
literal|"project-impacted-indirectly-via-topic"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo1
init|=
name|cloneProject
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo2
init|=
name|cloneProject
argument_list|(
name|p2
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo3
init|=
name|cloneProject
argument_list|(
name|p3
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead1
init|=
name|getRemoteHead
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead2
init|=
name|getRemoteHead
argument_list|(
name|p2
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead3
init|=
name|getRemoteHead
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1a
init|=
name|createChange
argument_list|(
name|repo1
argument_list|,
literal|"master"
argument_list|,
literal|"An ancestor of the change we want to submit"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"dependent-topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1b
init|=
name|createChange
argument_list|(
name|repo1
argument_list|,
literal|"master"
argument_list|,
literal|"we're interested to submit this change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|,
literal|"topic-to-submit"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2a
init|=
name|createChange
argument_list|(
name|repo2
argument_list|,
literal|"master"
argument_list|,
literal|"indirection level 2a"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"topic-indirect"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2b
init|=
name|createChange
argument_list|(
name|repo2
argument_list|,
literal|"master"
argument_list|,
literal|"should go in with first change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|,
literal|"dependent-topic"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|repo3
argument_list|,
literal|"master"
argument_list|,
literal|"indirection level 2b"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"topic-indirect"
argument_list|)
decl_stmt|;
comment|// Create a merge conflict for change3 which is only indirectly related
comment|// via topics.
name|repo3
operator|.
name|reset
argument_list|(
name|initialHead3
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3Conflict
init|=
name|createChange
argument_list|(
name|repo3
argument_list|,
literal|"master"
argument_list|,
literal|"conflicting change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2\n2"
argument_list|,
literal|"conflicting-topic"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change3Conflict
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|tipConflict
init|=
name|getRemoteLog
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tipConflict
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change3Conflict
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change1a
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2a
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2b
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Failed to submit 5 changes due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change3
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Change could not be "
operator|+
literal|"merged due to a path conflict. Please rebase the change locally "
operator|+
literal|"and upload the rebased commit for review."
decl_stmt|;
comment|// Get a preview before submitting:
try|try
init|(
name|BinaryResult
name|r
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1b
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|()
init|)
block|{
comment|// We cannot just use the ExpectedException infrastructure as provided
comment|// by AbstractDaemonTest, as then we'd stop early and not test the
comment|// actual submit.
name|fail
argument_list|(
literal|"expected failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|submitWithConflict
argument_list|(
name|change1b
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|submit
argument_list|(
name|change1b
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|tip1
init|=
name|getRemoteLog
argument_list|(
name|p1
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RevCommit
name|tip2
init|=
name|getRemoteLog
argument_list|(
name|p2
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RevCommit
name|tip3
init|=
name|getRemoteLog
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSubmitWholeTopicEnabled
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|tip1
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead1
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tip2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tip3
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change3Conflict
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change1a
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change2a
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change2b
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|tip1
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1b
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tip2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tip3
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change3Conflict
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change2a
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change2b
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoSubmitter
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|submitWithMergedAncestorsOnOtherBranch ()
specifier|public
name|void
name|submitWithMergedAncestorsOnOtherBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"base commit"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"branch"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"We want to commit this to master first"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSecondSubmit
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|tip2
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"branch"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tip2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"branch"
argument_list|,
literal|"This commit is based on master, which includes change2, "
operator|+
literal|"but is targeted at branch, which doesn't include it."
argument_list|,
literal|"a.txt"
argument_list|,
literal|"3"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|log3
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"branch"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|log3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change3
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|log3
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitWithOpenAncestorsOnOtherBranch ()
specifier|public
name|void
name|submitWithOpenAncestorsOnOtherBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"base commit"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"branch"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"master"
argument_list|,
literal|"We want to commit this to master first"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|tip1
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tip1
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|tip2
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"branch"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tip2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3a
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"branch"
argument_list|,
literal|"This commit is based on change2 pending for master, "
operator|+
literal|"but is targeted itself at branch, which doesn't include it."
argument_list|,
literal|"a.txt"
argument_list|,
literal|"3"
argument_list|,
literal|"a-topic-here"
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|p3
init|=
name|createProject
argument_list|(
literal|"project-related-to-change3"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo3
init|=
name|cloneProject
argument_list|(
name|p3
argument_list|)
decl_stmt|;
name|RevCommit
name|repo3Head
init|=
name|getRemoteHead
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3b
init|=
name|createChange
argument_list|(
name|repo3
argument_list|,
literal|"master"
argument_list|,
literal|"some accompanying changes for change3a in another repo tied together via topic"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"a-topic-here"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change3b
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cnt
init|=
name|isSubmitWholeTopicEnabled
argument_list|()
condition|?
literal|"2 changes"
else|:
literal|"1 change"
decl_stmt|;
name|submitWithConflict
argument_list|(
name|change3a
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit "
operator|+
name|cnt
operator|+
literal|" due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change3a
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Depends on change that"
operator|+
literal|" was not submitted."
operator|+
literal|" Commit "
operator|+
name|change3a
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" depends on commit "
operator|+
name|change2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" of change "
operator|+
name|change2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" which cannot be merged."
argument_list|)
expr_stmt|;
name|RevCommit
name|tipbranch
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"branch"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tipbranch
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|tipmaster
init|=
name|getRemoteLog
argument_list|(
name|p3
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tipmaster
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|repo3Head
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|gerritWorkflow ()
specifier|public
name|void
name|gerritWorkflow
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|()
decl_stmt|;
comment|// We'll setup a master and a stable branch.
comment|// Then we create a change to be applied to master, which is
comment|// then cherry picked back to stable. The stable branch will
comment|// be merged up into master again.
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"stable"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
comment|// Push a change to master
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"small fix"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|submit
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterFirstSubmit
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterFirstSubmit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|change
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now cherry pick to stable
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"stable"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"This goes to stable as well\n"
operator|+
name|headAfterFirstSubmit
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cherryId
init|=
name|orig
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
operator|.
name|id
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cherryId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cherryId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Create the merge locally
name|RevCommit
name|stable
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
literal|"stable"
argument_list|)
decl_stmt|;
name|RevCommit
name|master
init|=
name|getRemoteHead
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|branchCreate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"stable"
argument_list|)
operator|.
name|setStartPoint
argument_list|(
name|stable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|branchCreate
argument_list|()
operator|.
name|setName
argument_list|(
literal|"master"
argument_list|)
operator|.
name|setStartPoint
argument_list|(
name|master
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevCommit
name|merge
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|master
argument_list|)
operator|.
name|parent
argument_list|(
name|stable
argument_list|)
operator|.
name|message
argument_list|(
literal|"Merge stable into master"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|update
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master:refs/for/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|String
name|changeId
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|merge
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|RevCommit
name|headAfterSecondSubmit
init|=
name|getRemoteLog
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|headAfterSecondSubmit
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|merge
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|(
name|initialHead
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterFirstSubmit
argument_list|,
name|headAfterSecondSubmit
argument_list|)
expr_stmt|;
name|assertChangeMergedEvents
argument_list|(
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|headAfterFirstSubmit
operator|.
name|name
argument_list|()
argument_list|,
name|changeId
argument_list|,
name|headAfterSecondSubmit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|openChangeForTargetBranchPreventsMerge ()
specifier|public
name|void
name|openChangeForTargetBranchPreventsMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"stable"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
comment|// Propose a change for master, but leave it open for master!
name|PushOneCommit
name|change
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"small fix"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2result
init|=
name|change
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Now cherry pick to stable
name|CherryPickInput
name|in
init|=
operator|new
name|CherryPickInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|destination
operator|=
literal|"stable"
expr_stmt|;
name|in
operator|.
name|message
operator|=
literal|"it goes to stable branch"
expr_stmt|;
name|ChangeApi
name|orig
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2result
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeApi
name|cherry
init|=
name|orig
operator|.
name|current
argument_list|()
operator|.
name|cherryPick
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|cherry
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Create a commit locally
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/stable"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change3
init|=
name|createChange
argument_list|(
name|testRepo
argument_list|,
literal|"stable"
argument_list|,
literal|"test"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"3"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|submitWithConflict
argument_list|(
name|change3
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 1 change due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change3
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|": Depends on change that was not submitted."
operator|+
literal|" Commit "
operator|+
name|change3
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" depends on commit "
operator|+
name|change2result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" of change "
operator|+
name|change2result
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" which cannot be merged."
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dependencyOnOutdatedPatchSetPreventsMerge ()
specifier|public
name|void
name|dependencyOnOutdatedPatchSetPreventsMerge
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a change
name|PushOneCommit
name|change
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"fix"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|change
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|changeResult
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
comment|// Create a successor change.
name|PushOneCommit
name|change2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"feature"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2Result
init|=
name|change2
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Create new patch set for first change.
name|testRepo
operator|.
name|reset
argument_list|(
name|changeResult
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|amendChange
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Approve both changes
name|approve
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|submitWithConflict
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 2 changes due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2Result
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Depends on change that was not submitted."
operator|+
literal|" Commit "
operator|+
name|change2Result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" depends on commit "
operator|+
name|changeResult
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|", which is outdated patch set "
operator|+
name|patchSetId
operator|.
name|get
argument_list|()
operator|+
literal|" of change "
operator|+
name|changeResult
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|". The latest patch set is "
operator|+
name|changeResult
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dependencyOnDeletedChangePreventsMerge ()
specifier|public
name|void
name|dependencyOnDeletedChangePreventsMerge
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a change
name|PushOneCommit
name|change
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"fix"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|change
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Create a successor change.
name|PushOneCommit
name|change2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"feature"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2Result
init|=
name|change2
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Delete first change.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// Submit is expected to fail.
name|submitWithConflict
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 1 change due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2Result
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Depends on change that was not submitted."
operator|+
literal|" Commit "
operator|+
name|change2Result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" depends on commit "
operator|+
name|changeResult
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" which cannot be merged."
operator|+
literal|" Is the change of this commit not visible or was it deleted?"
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dependencyOnChangeForNonVisibleBranchPreventsMerge ()
specifier|public
name|void
name|dependencyOnChangeForNonVisibleBranchPreventsMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|grantLabel
argument_list|(
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|project
argument_list|,
literal|"refs/heads/*"
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
comment|// Create a change
name|PushOneCommit
name|change
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"fix"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|change
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a successor change.
name|PushOneCommit
name|change2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"feature"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2Result
init|=
name|change2
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Move the first change to a destination branch that is non-visible to user so that user cannot
comment|// this change anymore.
name|Branch
operator|.
name|NameKey
name|secretBranch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"secretBranch"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|secretBranch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|secretBranch
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|move
argument_list|(
name|secretBranch
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|secretBranch
operator|.
name|get
argument_list|()
argument_list|,
literal|"read"
argument_list|,
name|ANONYMOUS_USERS
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// Verify that user cannot see the first change.
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Not found: "
operator|+
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Submit is expected to fail.
name|submitWithConflict
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"Failed to submit 1 change due to the following problems:\n"
operator|+
literal|"Change "
operator|+
name|change2Result
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": Depends on change that was not submitted."
operator|+
literal|" Commit "
operator|+
name|change2Result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" depends on commit "
operator|+
name|changeResult
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" which cannot be merged."
operator|+
literal|" Is the change of this commit not visible or was it deleted?"
argument_list|)
expr_stmt|;
name|assertRefUpdatedEvents
argument_list|()
expr_stmt|;
name|assertChangeMergedEvents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dependencyOnHiddenChangeShouldPreventMergeButDoesnt ()
specifier|public
name|void
name|dependencyOnHiddenChangeShouldPreventMergeButDoesnt
parameter_list|()
throws|throws
name|Exception
block|{
name|grantLabel
argument_list|(
literal|"Code-Review"
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
name|project
argument_list|,
literal|"refs/heads/*"
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
literal|false
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
comment|// Create a change
name|PushOneCommit
name|change
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"fix"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|changeResult
init|=
name|change
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a successor change.
name|PushOneCommit
name|change2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"feature"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change2Result
init|=
name|change2
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mark the first change private so that it's not visible to user.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|"nobody should see this"
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// Verify that user cannot see the first change.
try|try
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Not found: "
operator|+
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Submit the second change which has a dependency on the first change which is not visible to
comment|// the user. We would expect the submit to fail, but instead the submit succeeds and the hidden
comment|// change gets submitted too.
comment|// TODO(ekempin): Make this submit fail.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|SubmitInput
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that both changes have been submitted.
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2Result
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreviewSubmitTgz ()
specifier|public
name|void
name|testPreviewSubmitTgz
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p1
init|=
name|createProject
argument_list|(
literal|"project-name"
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo1
init|=
name|cloneProject
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|change1
init|=
name|createChange
argument_list|(
name|repo1
argument_list|,
literal|"master"
argument_list|,
literal|"test"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"1"
argument_list|,
literal|"topic"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a preview before submitting:
name|File
name|tempfile
decl_stmt|;
try|try
init|(
name|BinaryResult
name|request
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|(
literal|"tgz"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"application/x-gzip"
argument_list|)
expr_stmt|;
name|tempfile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|writeTo
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tempfile
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|tempfile
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|untarredFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|TarArchiveInputStream
name|tarInputStream
init|=
operator|(
name|TarArchiveInputStream
operator|)
operator|new
name|ArchiveStreamFactory
argument_list|()
operator|.
name|createArchiveInputStream
argument_list|(
literal|"tar"
argument_list|,
name|is
argument_list|)
init|)
block|{
name|TarArchiveEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
operator|(
name|TarArchiveEntry
operator|)
name|tarInputStream
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|untarredFiles
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|untarredFiles
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|name
argument_list|(
literal|"project-name"
argument_list|)
operator|+
literal|".git"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

