begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractPluginFieldsTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PluginFieldsIT
specifier|public
class|class
name|PluginFieldsIT
extends|extends
name|AbstractPluginFieldsTest
block|{
DECL|field|GSON
specifier|private
specifier|static
specifier|final
name|Gson
name|GSON
init|=
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|queryChangeWithNullAttribute ()
specifier|public
name|void
name|queryChangeWithNullAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithNullAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonList
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeQueryUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChangeWithNullAttribute ()
specifier|public
name|void
name|getChangeWithNullAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithNullAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChangeDetailWithNullAttribute ()
specifier|public
name|void
name|getChangeDetailWithNullAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithNullAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeDetailUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeWithSimpleAttribute ()
specifier|public
name|void
name|queryChangeWithSimpleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithSimpleAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonList
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeQueryUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChangeWithSimpleAttribute ()
specifier|public
name|void
name|getChangeWithSimpleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithSimpleAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChangeDetailWithSimpleAttribute ()
specifier|public
name|void
name|getChangeDetailWithSimpleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithSimpleAttribute
argument_list|(
name|id
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeDetailUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|queryChangeWithOption ()
specifier|public
name|void
name|queryChangeWithOption
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithOption
argument_list|(
name|id
lambda|->
name|pluginInfoFromSingletonList
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeQueryUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|opts
parameter_list|)
lambda|->
name|pluginInfoFromSingletonList
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeQueryUrl
argument_list|(
name|id
argument_list|,
name|opts
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChangeWithOption ()
specifier|public
name|void
name|getChangeWithOption
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithOption
argument_list|(
name|id
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|opts
parameter_list|)
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeUrl
argument_list|(
name|id
argument_list|,
name|opts
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getChangeDetailWithOption ()
specifier|public
name|void
name|getChangeDetailWithOption
parameter_list|()
throws|throws
name|Exception
block|{
name|getChangeWithOption
argument_list|(
name|id
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeDetailUrl
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|id
parameter_list|,
name|opts
parameter_list|)
lambda|->
name|pluginInfoFromChangeInfo
argument_list|(
name|adminRestSession
operator|.
name|get
argument_list|(
name|changeDetailUrl
argument_list|(
name|id
argument_list|,
name|opts
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|changeQueryUrl (Change.Id id)
specifier|private
name|String
name|changeQueryUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|changeQueryUrl
argument_list|(
name|id
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|changeQueryUrl (Change.Id id, ImmutableListMultimap<String, String> opts)
specifier|private
name|String
name|changeQueryUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|opts
parameter_list|)
block|{
name|String
name|url
init|=
literal|"/changes/?q="
operator|+
name|id
decl_stmt|;
name|String
name|queryString
init|=
name|buildQueryString
argument_list|(
name|opts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queryString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|+=
literal|"&"
operator|+
name|queryString
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
DECL|method|changeUrl (Change.Id id)
specifier|private
name|String
name|changeUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|changeUrl
argument_list|(
name|id
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|changeUrl (Change.Id id, ImmutableListMultimap<String, String> pluginOptions)
specifier|private
name|String
name|changeUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pluginOptions
parameter_list|)
block|{
return|return
name|changeUrl
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|pluginOptions
argument_list|)
return|;
block|}
DECL|method|changeDetailUrl (Change.Id id)
specifier|private
name|String
name|changeDetailUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|changeDetailUrl
argument_list|(
name|id
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|changeDetailUrl ( Change.Id id, ImmutableListMultimap<String, String> pluginOptions)
specifier|private
name|String
name|changeDetailUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pluginOptions
parameter_list|)
block|{
return|return
name|changeUrl
argument_list|(
name|id
argument_list|,
literal|"/detail"
argument_list|,
name|pluginOptions
argument_list|)
return|;
block|}
DECL|method|changeUrl ( Change.Id id, String suffix, ImmutableListMultimap<String, String> pluginOptions)
specifier|private
name|String
name|changeUrl
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|suffix
parameter_list|,
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pluginOptions
parameter_list|)
block|{
name|String
name|url
init|=
literal|"/changes/"
operator|+
name|project
operator|+
literal|"~"
operator|+
name|id
operator|+
name|suffix
decl_stmt|;
name|String
name|queryString
init|=
name|buildQueryString
argument_list|(
name|pluginOptions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queryString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|+=
literal|"?"
operator|+
name|queryString
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
DECL|method|buildQueryString (ImmutableListMultimap<String, String> opts)
specifier|private
specifier|static
name|String
name|buildQueryString
parameter_list|(
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|opts
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|'&'
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|'='
argument_list|)
operator|.
name|join
argument_list|(
name|opts
operator|.
name|entries
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|pluginInfoFromSingletonList (RestResponse res)
specifier|private
specifier|static
name|List
argument_list|<
name|MyInfo
argument_list|>
name|pluginInfoFromSingletonList
parameter_list|(
name|RestResponse
name|res
parameter_list|)
throws|throws
name|Exception
block|{
name|res
operator|.
name|assertOK
argument_list|()
expr_stmt|;
comment|// Don't deserialize to ChangeInfo directly, since that would treat the plugins field as
comment|// List<PluginDefinedInfo> and ignore the unknown keys found in MyInfo.
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|changeInfos
init|=
name|GSON
operator|.
name|fromJson
argument_list|(
name|res
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeInfos
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|myInfo
argument_list|(
name|changeInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|pluginInfoFromChangeInfo (RestResponse res)
specifier|private
name|List
argument_list|<
name|MyInfo
argument_list|>
name|pluginInfoFromChangeInfo
parameter_list|(
name|RestResponse
name|res
parameter_list|)
throws|throws
name|Exception
block|{
name|res
operator|.
name|assertOK
argument_list|()
expr_stmt|;
comment|// Don't deserialize to ChangeInfo directly, since that would treat the plugins field as
comment|// List<PluginDefinedInfo> and ignore the unknown keys found in MyInfo.
return|return
name|myInfo
argument_list|(
name|GSON
operator|.
name|fromJson
argument_list|(
name|res
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|myInfo (Map<String, Object> changeInfo)
specifier|private
specifier|static
name|List
argument_list|<
name|MyInfo
argument_list|>
name|myInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|changeInfo
parameter_list|)
block|{
name|Object
name|plugins
init|=
name|changeInfo
operator|.
name|get
argument_list|(
literal|"plugins"
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|GSON
operator|.
name|fromJson
argument_list|(
name|GSON
operator|.
name|toJson
argument_list|(
name|plugins
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|MyInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

