begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|TestPluginModule
operator|.
name|PLUGIN_CAPABILITY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|TestPluginModule
operator|.
name|PLUGIN_COLLECTION
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|LightweightPluginDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestPlugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|CreateTestPlugin
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|AccessSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PermissionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PermissionRuleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|ProjectAccessInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|TestPlugin
argument_list|(
name|name
operator|=
name|PluginsCapabilityIT
operator|.
name|PLUGIN_NAME
argument_list|,
name|sysModule
operator|=
literal|"com.google.gerrit.acceptance.rest.TestPluginModule"
argument_list|)
DECL|class|PluginsCapabilityIT
specifier|public
class|class
name|PluginsCapabilityIT
extends|extends
name|LightweightPluginDaemonTest
block|{
DECL|field|PLUGIN_NAME
specifier|public
specifier|static
specifier|final
name|String
name|PLUGIN_NAME
init|=
literal|"test"
decl_stmt|;
DECL|field|restEndpoint
specifier|public
name|String
name|restEndpoint
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUpTestPlugin ()
specifier|public
name|void
name|setUpTestPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUpTestPlugin
argument_list|()
expr_stmt|;
name|this
operator|.
name|setUpPluginPermission
argument_list|()
expr_stmt|;
name|this
operator|.
name|restEndpoint
operator|=
literal|"/config/server/"
operator|+
name|PLUGIN_NAME
operator|+
literal|"~"
operator|+
name|PLUGIN_COLLECTION
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|adminRestSession
operator|.
name|get
argument_list|(
name|this
operator|.
name|restEndpoint
argument_list|)
operator|.
name|assertOK
argument_list|()
expr_stmt|;
name|userRestSession
operator|.
name|get
argument_list|(
name|this
operator|.
name|restEndpoint
argument_list|)
operator|.
name|assertOK
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|Input
name|input
init|=
operator|new
name|Input
argument_list|()
decl_stmt|;
name|input
operator|.
name|input
operator|=
literal|"test"
expr_stmt|;
name|adminRestSession
operator|.
name|post
argument_list|(
name|this
operator|.
name|restEndpoint
operator|+
literal|"/notexisting"
argument_list|,
name|input
argument_list|)
operator|.
name|assertCreated
argument_list|()
expr_stmt|;
name|userRestSession
operator|.
name|post
argument_list|(
name|this
operator|.
name|restEndpoint
operator|+
literal|"/notexisting"
argument_list|,
name|input
argument_list|)
operator|.
name|assertCreated
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpPluginPermission ()
specifier|private
name|void
name|setUpPluginPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
operator|new
name|ProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
operator|new
name|AccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|email
init|=
operator|new
name|PermissionInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|email
operator|.
name|rules
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSectionInfo
operator|.
name|permissions
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|PLUGIN_NAME
operator|+
literal|"-"
operator|+
name|PLUGIN_CAPABILITY
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|accessInput
operator|.
name|add
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

