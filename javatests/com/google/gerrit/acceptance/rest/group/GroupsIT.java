begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|Rebuild
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|GroupsMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GroupsIT
specifier|public
class|class
name|GroupsIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|groupsMigration
annotation|@
name|Inject
specifier|private
name|GroupsMigration
name|groupsMigration
decl_stmt|;
DECL|field|bundleFactory
annotation|@
name|Inject
specifier|private
name|GroupBundle
operator|.
name|Factory
name|bundleFactory
decl_stmt|;
annotation|@
name|Test
DECL|method|invalidQueryOptions ()
specifier|public
name|void
name|invalidQueryOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|r
init|=
name|adminRestSession
operator|.
name|put
argument_list|(
literal|"/groups/?query=foo&query2=bar"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertBadRequest
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"\"query\" and \"query2\" options are mutually exclusive"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuild ()
specifier|public
name|void
name|rebuild
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|writeToNoteDb
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|readFromNoteDb
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|g
operator|.
name|id
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|ObjectId
name|oldId
decl_stmt|;
name|GroupBundle
name|oldBundle
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|oldId
operator|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|oldBundle
operator|=
name|bundleFactory
operator|.
name|fromNoteDb
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
operator|.
name|delete
argument_list|(
name|refName
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|adminRestSession
operator|.
name|postOK
argument_list|(
literal|"/groups/"
operator|+
name|uuid
operator|+
literal|"/rebuild"
argument_list|,
name|input
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"No differences between ReviewDb and NoteDb"
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// An artifact of the migration process makes the SHA-1 different, but it's actually ok
comment|// because the bundles are equal.
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
name|assertNoDifferences
argument_list|(
name|oldBundle
argument_list|,
name|bundleFactory
operator|.
name|fromNoteDb
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|rebuildFailsWithWritesDisabled ()
specifier|public
name|void
name|rebuildFailsWithWritesDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|writeToNoteDb
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|g
operator|.
name|id
argument_list|)
decl_stmt|;
name|RestResponse
name|res
init|=
name|adminRestSession
operator|.
name|post
argument_list|(
literal|"/groups/"
operator|+
name|uuid
operator|+
literal|"/rebuild"
argument_list|,
name|input
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|405
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"NoteDb writes must be enabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildForceRequiresReadsDisabled ()
specifier|public
name|void
name|rebuildForceRequiresReadsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|writeToNoteDb
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|readFromNoteDb
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|g
operator|.
name|id
argument_list|)
decl_stmt|;
name|RestResponse
name|res
init|=
name|adminRestSession
operator|.
name|post
argument_list|(
literal|"/groups/"
operator|+
name|uuid
operator|+
literal|"/rebuild"
argument_list|,
name|input
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|405
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"NoteDb reads must not be enabled when force=true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildWithoutForceFailsIfRefExists ()
specifier|public
name|void
name|rebuildWithoutForceFailsIfRefExists
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|writeToNoteDb
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|readFromNoteDb
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|g
operator|.
name|id
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
operator|.
name|branch
argument_list|(
name|refName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"somefile"
argument_list|,
literal|"contents"
argument_list|)
operator|.
name|create
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|RestResponse
name|res
init|=
name|adminRestSession
operator|.
name|post
argument_list|(
literal|"/groups/"
operator|+
name|uuid
operator|+
literal|"/rebuild"
argument_list|,
name|input
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|409
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Group already exists in NoteDb"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|rebuildForce ()
specifier|public
name|void
name|rebuildForce
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|writeToNoteDb
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|groupsMigration
operator|.
name|readFromNoteDb
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|GroupInfo
name|g
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|name
argument_list|(
literal|"group"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|g
operator|.
name|id
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|ObjectId
name|oldId
decl_stmt|;
name|GroupBundle
name|oldBundle
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|oldBundle
operator|=
name|bundleFactory
operator|.
name|fromNoteDb
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
name|oldId
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
operator|.
name|branch
argument_list|(
name|refName
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|add
argument_list|(
literal|"somefile"
argument_list|,
literal|"contents"
argument_list|)
operator|.
name|create
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|adminRestSession
operator|.
name|postOK
argument_list|(
literal|"/groups/"
operator|+
name|uuid
operator|+
literal|"/rebuild"
argument_list|,
name|input
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getEntityContent
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"No differences between ReviewDb and NoteDb"
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
comment|// oldId contains some garbage, so rebuilt value should definitely be different.
name|assertThat
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
name|assertNoDifferences
argument_list|(
name|oldBundle
argument_list|,
name|bundleFactory
operator|.
name|fromNoteDb
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNoDifferences (GroupBundle expected, GroupBundle actual)
specifier|private
specifier|static
name|void
name|assertNoDifferences
parameter_list|(
name|GroupBundle
name|expected
parameter_list|,
name|GroupBundle
name|actual
parameter_list|)
block|{
comment|// Comparing NoteDb to NoteDb, so compare fields instead of using static compare method.
name|assertThat
argument_list|(
name|actual
operator|.
name|group
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|members
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|members
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|memberAudit
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|memberAudit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|byId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|byId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|byIdAudit
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|byIdAudit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|input (Boolean force)
specifier|private
specifier|static
name|Rebuild
operator|.
name|Input
name|input
parameter_list|(
name|Boolean
name|force
parameter_list|)
block|{
name|Rebuild
operator|.
name|Input
name|input
init|=
operator|new
name|Rebuild
operator|.
name|Input
argument_list|()
decl_stmt|;
name|input
operator|.
name|force
operator|=
name|force
expr_stmt|;
return|return
name|input
return|;
block|}
block|}
end_class

end_unit

