begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
operator|.
name|SC_CREATED
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
operator|.
name|ParameterParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
operator|.
name|RestApiServlet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|LoggingContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|CreateProjectArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ProjectCreationValidationListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|validators
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TraceIT
specifier|public
class|class
name|TraceIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|projectCreationValidationListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|ProjectCreationValidationListener
argument_list|>
name|projectCreationValidationListeners
decl_stmt|;
DECL|field|commitValidationListeners
annotation|@
name|Inject
specifier|private
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|commitValidationListeners
decl_stmt|;
DECL|field|projectCreationListener
specifier|private
name|TraceValidatingProjectCreationValidationListener
name|projectCreationListener
decl_stmt|;
DECL|field|projectCreationListenerRegistrationHandle
specifier|private
name|RegistrationHandle
name|projectCreationListenerRegistrationHandle
decl_stmt|;
DECL|field|commitValidationListener
specifier|private
name|TraceValidatingCommitValidationListener
name|commitValidationListener
decl_stmt|;
DECL|field|commitValidationRegistrationHandle
specifier|private
name|RegistrationHandle
name|commitValidationRegistrationHandle
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|projectCreationListener
operator|=
operator|new
name|TraceValidatingProjectCreationValidationListener
argument_list|()
expr_stmt|;
name|projectCreationListenerRegistrationHandle
operator|=
name|projectCreationValidationListeners
operator|.
name|add
argument_list|(
name|projectCreationListener
argument_list|)
expr_stmt|;
name|commitValidationListener
operator|=
operator|new
name|TraceValidatingCommitValidationListener
argument_list|()
expr_stmt|;
name|commitValidationRegistrationHandle
operator|=
name|commitValidationListeners
operator|.
name|add
argument_list|(
name|commitValidationListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|projectCreationListenerRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
name|commitValidationRegistrationHandle
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restCallWithoutTrace ()
specifier|public
name|void
name|restCallWithoutTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|response
init|=
name|adminRestSession
operator|.
name|put
argument_list|(
literal|"/projects/new1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_CREATED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeader
argument_list|(
name|RestApiServlet
operator|.
name|X_GERRIT_TRACE
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restCallWithTrace ()
specifier|public
name|void
name|restCallWithTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|response
init|=
name|adminRestSession
operator|.
name|put
argument_list|(
literal|"/projects/new2?"
operator|+
name|ParameterParser
operator|.
name|TRACE_PARAMETER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_CREATED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeader
argument_list|(
name|RestApiServlet
operator|.
name|X_GERRIT_TRACE
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|restCallWithTraceAndProvidedTraceId ()
specifier|public
name|void
name|restCallWithTraceAndProvidedTraceId
parameter_list|()
throws|throws
name|Exception
block|{
name|RestResponse
name|response
init|=
name|adminRestSession
operator|.
name|put
argument_list|(
literal|"/projects/new3?"
operator|+
name|ParameterParser
operator|.
name|TRACE_PARAMETER
operator|+
literal|"=issue/123"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SC_CREATED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeader
argument_list|(
name|RestApiServlet
operator|.
name|X_GERRIT_TRACE
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"issue/123"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|projectCreationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithoutTrace ()
specifier|public
name|void
name|pushWithoutTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithTrace ()
specifier|public
name|void
name|pushWithTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|setPushOptions
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"trace"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithTraceAndProvidedTraceId ()
specifier|public
name|void
name|pushWithTraceAndProvidedTraceId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|setPushOptions
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"trace=issue/123"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"issue/123"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForReviewWithoutTrace ()
specifier|public
name|void
name|pushForReviewWithoutTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForReviewWithTrace ()
specifier|public
name|void
name|pushForReviewWithTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|setPushOptions
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"trace"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForReviewWithTraceAndProvidedTraceId ()
specifier|public
name|void
name|pushForReviewWithTraceAndProvidedTraceId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|setPushOptions
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"trace=issue/123"
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|traceId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"issue/123"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|foundTraceId
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|commitValidationListener
operator|.
name|isLoggingForced
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|class|TraceValidatingProjectCreationValidationListener
specifier|private
specifier|static
class|class
name|TraceValidatingProjectCreationValidationListener
implements|implements
name|ProjectCreationValidationListener
block|{
DECL|field|traceId
name|String
name|traceId
decl_stmt|;
DECL|field|foundTraceId
name|Boolean
name|foundTraceId
decl_stmt|;
DECL|field|isLoggingForced
name|Boolean
name|isLoggingForced
decl_stmt|;
annotation|@
name|Override
DECL|method|validateNewProject (CreateProjectArgs args)
specifier|public
name|void
name|validateNewProject
parameter_list|(
name|CreateProjectArgs
name|args
parameter_list|)
throws|throws
name|ValidationException
block|{
name|this
operator|.
name|traceId
operator|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTagsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"TRACE_ID"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|foundTraceId
operator|=
name|traceId
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|isLoggingForced
operator|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|shouldForceLogging
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TraceValidatingCommitValidationListener
specifier|private
specifier|static
class|class
name|TraceValidatingCommitValidationListener
implements|implements
name|CommitValidationListener
block|{
DECL|field|traceId
name|String
name|traceId
decl_stmt|;
DECL|field|foundTraceId
name|Boolean
name|foundTraceId
decl_stmt|;
DECL|field|isLoggingForced
name|Boolean
name|isLoggingForced
decl_stmt|;
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
name|this
operator|.
name|traceId
operator|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|getTagsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"TRACE_ID"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|foundTraceId
operator|=
name|traceId
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|isLoggingForced
operator|=
name|LoggingContext
operator|.
name|getInstance
argument_list|()
operator|.
name|shouldForceLogging
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

