begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|BatchLabelInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelDefinitionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelDefinitionInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|project
operator|.
name|PostLabels
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Tests for the {@link PostLabels} REST endpoint. */
end_comment

begin_class
DECL|class|PostLabelsIT
specifier|public
class|class
name|PostLabelsIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
annotation|@
name|Test
DECL|method|anonymous ()
specifier|public
name|void
name|anonymous
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
operator|new
name|BatchLabelInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Authentication required"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notAllowed ()
specifier|public
name|void
name|notAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
operator|new
name|BatchLabelInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"write refs/meta/config not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNonExistingLabel ()
specifier|public
name|void
name|deleteNonExistingLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|UnprocessableEntityException
name|thrown
init|=
name|assertThrows
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Foo not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteLabels ()
specifier|public
name|void
name|deleteLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|configLabel
argument_list|(
literal|"Bar"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
literal|"Bar"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteLabels_labelNamesAreTrimmed ()
specifier|public
name|void
name|deleteLabels_labelNamesAreTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|configLabel
argument_list|(
literal|"Bar"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|" Foo "
argument_list|,
literal|" Bar "
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotDeleteTheSameLabelTwice ()
specifier|public
name|void
name|cannotDeleteTheSameLabelTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
literal|"Foo"
argument_list|)
expr_stmt|;
name|UnprocessableEntityException
name|thrown
init|=
name|assertThrows
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Foo not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateLabelWithNameThatIsAlreadyInUse ()
specifier|public
name|void
name|cannotCreateLabelWithNameThatIsAlreadyInUse
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|labelInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|labelInput
operator|.
name|name
operator|=
literal|"Code-Review"
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|labelInput
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Code-Review already exists"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateTwoLabelsWithTheSameName ()
specifier|public
name|void
name|cannotCreateTwoLabelsWithTheSameName
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|fooInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooInput
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|fooInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|fooInput
argument_list|,
name|fooInput
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Foo already exists"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateTwoLabelsWithNamesThatAreTheSameAfterTrim ()
specifier|public
name|void
name|cannotCreateTwoLabelsWithNamesThatAreTheSameAfterTrim
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|foo1Input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|foo1Input
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|foo1Input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|foo2Input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|foo2Input
operator|.
name|name
operator|=
literal|" Foo "
expr_stmt|;
name|foo2Input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|foo1Input
argument_list|,
name|foo2Input
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Foo already exists"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateTwoLabelsWithConflictingNames ()
specifier|public
name|void
name|cannotCreateTwoLabelsWithConflictingNames
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|foo1Input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|foo1Input
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|foo1Input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|foo2Input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|foo2Input
operator|.
name|name
operator|=
literal|"foo"
expr_stmt|;
name|foo2Input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|foo1Input
argument_list|,
name|foo2Input
argument_list|)
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label foo conflicts with existing label Foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createLabels ()
specifier|public
name|void
name|createLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|fooInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooInput
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|fooInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|barInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|barInput
operator|.
name|name
operator|=
literal|"Bar"
expr_stmt|;
name|barInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|fooInput
argument_list|,
name|barInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Bar"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createLabels_labelNamesAreTrimmed ()
specifier|public
name|void
name|createLabels_labelNamesAreTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|fooInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooInput
operator|.
name|name
operator|=
literal|" Foo "
expr_stmt|;
name|fooInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|barInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|barInput
operator|.
name|name
operator|=
literal|" Bar "
expr_stmt|;
name|barInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|fooInput
argument_list|,
name|barInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Bar"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotCreateLabelWithoutName ()
specifier|public
name|void
name|cannotCreateLabelWithoutName
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|LabelDefinitionInput
argument_list|()
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label name is required for new label"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetCommitMessageOnLabelDefinitionInputForCreate ()
specifier|public
name|void
name|cannotSetCommitMessageOnLabelDefinitionInputForCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|labelInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|labelInput
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|labelInput
operator|.
name|commitMessage
operator|=
literal|"Create Label Foo"
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|labelInput
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"commit message on label definition input not supported"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateNonExistingLabel ()
specifier|public
name|void
name|updateNonExistingLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
operator|new
name|LabelDefinitionInput
argument_list|()
argument_list|)
expr_stmt|;
name|UnprocessableEntityException
name|thrown
init|=
name|assertThrows
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Foo not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateLabels ()
specifier|public
name|void
name|updateLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|configLabel
argument_list|(
literal|"Bar"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooUpdate
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooUpdate
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|MAX_WITH_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|barUpdate
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|barUpdate
operator|.
name|name
operator|=
literal|"Baz"
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
name|fooUpdate
argument_list|,
literal|"Bar"
argument_list|,
name|barUpdate
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fooUpdate
operator|.
name|function
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Baz"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Bar"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateLabels_labelNamesAreTrimmed ()
specifier|public
name|void
name|updateLabels_labelNamesAreTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|configLabel
argument_list|(
literal|"Bar"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooUpdate
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooUpdate
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|MAX_WITH_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|barUpdate
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|barUpdate
operator|.
name|name
operator|=
literal|"Baz"
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|" Foo "
argument_list|,
name|fooUpdate
argument_list|,
literal|" Bar "
argument_list|,
name|barUpdate
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fooUpdate
operator|.
name|function
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Baz"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Bar"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetCommitMessageOnLabelDefinitionInputForUpdate ()
specifier|public
name|void
name|cannotSetCommitMessageOnLabelDefinitionInputForUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|labelInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|labelInput
operator|.
name|commitMessage
operator|=
literal|"Update label"
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Code-Review"
argument_list|,
name|labelInput
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"commit message on label definition input not supported"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAndRecreateLabel ()
specifier|public
name|void
name|deleteAndRecreateLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooInput
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|fooInput
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|MAX_NO_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|fooInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|fooInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|fooLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fooLabel
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fooInput
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteRecreateAndUpdateLabel ()
specifier|public
name|void
name|deleteRecreateAndUpdateLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooCreateInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooCreateInput
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|fooCreateInput
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|MAX_NO_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|fooCreateInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooUpdateInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooUpdateInput
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|ANY_WITH_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|fooCreateInput
argument_list|)
expr_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
name|fooUpdateInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|fooLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fooLabel
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fooUpdateInput
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotDeleteAndUpdateLabel ()
specifier|public
name|void
name|cannotDeleteAndUpdateLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooInput
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|MAX_NO_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
name|fooInput
argument_list|)
expr_stmt|;
name|UnprocessableEntityException
name|thrown
init|=
name|assertThrows
argument_list|(
name|UnprocessableEntityException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"label Foo not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createAndUpdateLabel ()
specifier|public
name|void
name|createAndUpdateLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|fooCreateInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooCreateInput
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|fooCreateInput
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|MAX_NO_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|fooCreateInput
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|fooUpdateInput
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|fooUpdateInput
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|ANY_WITH_BLOCK
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|create
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|fooCreateInput
argument_list|)
expr_stmt|;
name|input
operator|.
name|update
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"Foo"
argument_list|,
name|fooUpdateInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|fooLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fooLabel
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|fooUpdateInput
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noOpUpdate ()
specifier|public
name|void
name|noOpUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|refsMetaConfigHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
operator|new
name|BatchLabelInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refsMetaConfigHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultCommitMessage ()
specifier|public
name|void
name|defaultCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update labels"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withCommitMessage ()
specifier|public
name|void
name|withCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|commitMessage
operator|=
literal|"Batch Update Labels"
expr_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|commitMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageIsTrimmed ()
specifier|public
name|void
name|commitMessageIsTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchLabelInput
name|input
init|=
operator|new
name|BatchLabelInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|commitMessage
operator|=
literal|" Batch Update Labels "
expr_stmt|;
name|input
operator|.
name|delete
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|labels
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Batch Update Labels"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

