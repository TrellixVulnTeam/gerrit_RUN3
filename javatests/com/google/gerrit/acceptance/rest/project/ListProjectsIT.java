begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
operator|.
name|ProjectAssert
operator|.
name|assertThatNameList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|block
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|Sandboxed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|Projects
operator|.
name|ListRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|Projects
operator|.
name|ListRequest
operator|.
name|FilterType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProjectInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCacheImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|project
operator|.
name|ListProjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
annotation|@
name|Sandboxed
DECL|class|ListProjectsIT
specifier|public
class|class
name|ListProjectsIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|listProjects
annotation|@
name|Inject
specifier|private
name|ListProjects
name|listProjects
decl_stmt|;
annotation|@
name|Test
DECL|method|listProjects ()
specifier|public
name|void
name|listProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|someProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|,
name|someProject
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isInOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsFiltersInvisibleProjects ()
specifier|public
name|void
name|listProjectsFiltersInvisibleProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|block
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithBranch ()
specifier|public
name|void
name|listProjectsWithBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ProjectInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|addShowBranch
argument_list|(
literal|"master"
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ProjectInfo
name|info
init|=
name|result
operator|.
name|get
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|branches
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|branches
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|branches
operator|.
name|get
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|description
operator|=
literal|"Description of some-project"
argument_list|)
DECL|method|listProjectWithDescription ()
specifier|public
name|void
name|listProjectWithDescription
parameter_list|()
throws|throws
name|Exception
block|{
comment|// description not be included in the results by default.
name|Map
argument_list|<
name|String
argument_list|,
name|ProjectInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|description
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|result
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|true
argument_list|)
operator|.
name|getAsMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Description of some-project"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithLimit ()
specifier|public
name|void
name|listProjectsWithLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectCacheImpl
name|projectCacheImpl
init|=
operator|(
name|ProjectCacheImpl
operator|)
name|projectCache
decl_stmt|;
name|String
name|pre
init|=
literal|"lpwl-someProject"
decl_stmt|;
name|int
name|n
init|=
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|pre
operator|+
name|i
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|projectCacheImpl
operator|.
name|evictAllByName
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|pre
argument_list|)
operator|.
name|withLimit
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|i
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectCacheImpl
operator|.
name|sizeAllByName
argument_list|()
argument_list|)
operator|.
name|isAtMost
argument_list|(
call|(
name|long
call|)
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 = AllProjects + AllUsers
block|}
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"gerrit.listProjectsFromIndex"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|listProjectsFromIndexShouldBeLimitedTo500 ()
specifier|public
name|void
name|listProjectsFromIndexShouldBeLimitedTo500
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTestProjects
init|=
literal|501
decl_stmt|;
name|assertThat
argument_list|(
name|createProjects
argument_list|(
literal|"foo"
argument_list|,
name|numTestProjects
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|numTestProjects
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsShouldNotBeLimitedByDefault ()
specifier|public
name|void
name|listProjectsShouldNotBeLimitedByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTestProjects
init|=
literal|501
decl_stmt|;
name|assertThat
argument_list|(
name|createProjects
argument_list|(
literal|"foo"
argument_list|,
name|numTestProjects
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
name|numTestProjects
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtLeast
argument_list|(
name|numTestProjects
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsToOutputStream ()
specifier|public
name|void
name|listProjectsToOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numInitialProjects
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numTestProjects
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testProjects
init|=
name|createProjects
argument_list|(
literal|"zzz_testProject"
argument_list|,
name|numTestProjects
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|displayOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|listProjects
operator|.
name|setStart
argument_list|(
name|numInitialProjects
argument_list|)
expr_stmt|;
name|listProjects
operator|.
name|displayToStream
argument_list|(
name|displayOut
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|splitToList
argument_list|(
operator|new
name|String
argument_list|(
name|displayOut
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|testProjects
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|listProjectsAsJsonMultilineToOutputStream ()
specifier|public
name|void
name|listProjectsAsJsonMultilineToOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|listProjectsAsJsonToOutputStream
argument_list|(
name|OutputFormat
operator|.
name|JSON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsAsJsonCompactToOutputStream ()
specifier|public
name|void
name|listProjectsAsJsonCompactToOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonOutput
init|=
name|listProjectsAsJsonToOutputStream
argument_list|(
name|OutputFormat
operator|.
name|JSON_COMPACT
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|jsonOutput
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|listProjectsAsJsonToOutputStream (OutputFormat jsonFormat)
specifier|private
name|String
name|listProjectsAsJsonToOutputStream
parameter_list|(
name|OutputFormat
name|jsonFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|jsonFormat
operator|.
name|isJson
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|int
name|numInitialProjects
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numTestProjects
init|=
literal|5
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|testProjects
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|createProjects
argument_list|(
literal|"zzz_testProject"
argument_list|,
name|numTestProjects
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|displayOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|listProjects
operator|.
name|setStart
argument_list|(
name|numInitialProjects
argument_list|)
expr_stmt|;
name|listProjects
operator|.
name|setFormat
argument_list|(
name|jsonFormat
argument_list|)
expr_stmt|;
name|listProjects
operator|.
name|displayToStream
argument_list|(
name|displayOut
argument_list|)
expr_stmt|;
name|String
name|projectsJsonOutput
init|=
operator|new
name|String
argument_list|(
name|displayOut
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|Gson
name|gson
init|=
name|jsonFormat
operator|.
name|newGson
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|projectsJsonNames
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|projectsJsonOutput
argument_list|,
name|JsonObject
operator|.
name|class
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|projectsJsonNames
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|testProjects
argument_list|)
expr_stmt|;
return|return
name|projectsJsonOutput
return|;
block|}
block|}
DECL|method|createProjects (String prefix, int numProjects)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createProjects
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|numProjects
parameter_list|)
block|{
return|return
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|numProjects
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|prefix
operator|+
name|i
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Project
operator|.
name|NameKey
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithPrefix ()
specifier|public
name|void
name|listProjectsWithPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|someProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"listtest-p1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|someOtherProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"listtest-p2"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"other-prefix-project"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|String
name|p
init|=
literal|"listtest"
decl_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|p
argument_list|)
operator|.
name|withRegex
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|p
argument_list|)
operator|.
name|withSubstring
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|p
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|someOtherProject
argument_list|,
name|someProject
argument_list|)
expr_stmt|;
name|p
operator|=
literal|"notlisttest"
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|p
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithRegex ()
specifier|public
name|void
name|listProjectsWithRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|someProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"lpwr-some-project"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|someOtherProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"lpwr-some-other-project"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|projectAwesome
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"lpwr-project-awesome"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|"[.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|".*"
argument_list|)
operator|.
name|withPrefix
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|".*"
argument_list|)
operator|.
name|withSubstring
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|".*some"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|projectAwesome
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
literal|"lpwr-some-project$"
operator|)
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
decl_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
name|r
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|someProject
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withRegex
argument_list|(
literal|".*"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|,
name|projectAwesome
argument_list|,
name|someOtherProject
argument_list|,
name|someProject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithStart ()
specifier|public
name|void
name|listProjectsWithStart
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pre
init|=
literal|"lpws-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|pre
operator|+
name|i
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|all
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|pre
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|n
init|=
literal|5
decl_stmt|;
name|assertThat
argument_list|(
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withPrefix
argument_list|(
name|pre
argument_list|)
operator|.
name|withStart
argument_list|(
name|n
operator|-
literal|1
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|all
argument_list|)
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithSubstring ()
specifier|public
name|void
name|listProjectsWithSubstring
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|someProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"some-project"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|someOtherProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"some-other-project"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|projectAwesome
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"project-awesome"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
literal|"some"
argument_list|)
operator|.
name|withRegex
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
literal|"some"
argument_list|)
operator|.
name|withPrefix
argument_list|(
literal|"some"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
literal|"some"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|projectAwesome
argument_list|,
name|someOtherProject
argument_list|,
name|someProject
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withSubstring
argument_list|(
literal|"SOME"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|projectAwesome
argument_list|,
name|someOtherProject
argument_list|,
name|someProject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectsWithTree ()
specifier|public
name|void
name|listProjectsWithTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|someParentProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"some-parent-project"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|someChildProject
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
literal|"some-child-project"
argument_list|)
operator|.
name|parent
argument_list|(
name|someParentProject
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ProjectInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withTree
argument_list|(
literal|true
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsKey
argument_list|(
name|someChildProject
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|someChildProject
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|someParentProject
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listProjectWithType ()
specifier|public
name|void
name|listProjectWithType
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ProjectInfo
argument_list|>
name|result
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withType
argument_list|(
name|FilterType
operator|.
name|PERMISSIONS
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|,
name|allUsers
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withType
argument_list|(
name|FilterType
operator|.
name|ALL
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listWithHiddenAndReadonlyProjects ()
specifier|public
name|void
name|listWithHiddenAndReadonlyProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|hidden
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|readonly
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Set project read-only
name|ConfigInput
name|input
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|state
operator|=
name|ProjectState
operator|.
name|READ_ONLY
expr_stmt|;
name|ConfigInfo
name|info
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|readonly
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|state
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|state
argument_list|)
expr_stmt|;
comment|// The hidden project is included because it was not hidden yet.
comment|// The read-only project is included.
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|,
name|hidden
argument_list|,
name|readonly
argument_list|)
expr_stmt|;
comment|// Hide the project
name|input
operator|.
name|state
operator|=
name|ProjectState
operator|.
name|HIDDEN
expr_stmt|;
name|info
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|hidden
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|state
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|state
argument_list|)
expr_stmt|;
comment|// Project is still accessible directly
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|hidden
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Hidden project is not included in the list
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|,
name|readonly
argument_list|)
expr_stmt|;
comment|// ALL filter applies to type, and doesn't include hidden state
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withType
argument_list|(
name|FilterType
operator|.
name|ALL
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|,
name|readonly
argument_list|)
expr_stmt|;
comment|// "All" boolean option causes hidden projects to be included
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withAll
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|,
name|hidden
argument_list|,
name|readonly
argument_list|)
expr_stmt|;
comment|// "State" option causes only the projects in that state to be included
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withState
argument_list|(
name|ProjectState
operator|.
name|HIDDEN
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|hidden
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withState
argument_list|(
name|ProjectState
operator|.
name|READ_ONLY
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|readonly
argument_list|)
expr_stmt|;
name|assertThatNameList
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withState
argument_list|(
name|ProjectState
operator|.
name|ACTIVE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|allProjects
argument_list|,
name|allUsers
argument_list|,
name|project
argument_list|)
expr_stmt|;
comment|// Cannot use "all" and "state" together
name|assertBadRequest
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|list
argument_list|()
operator|.
name|withAll
argument_list|(
literal|true
argument_list|)
operator|.
name|withState
argument_list|(
name|ProjectState
operator|.
name|ACTIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBadRequest (ListRequest req)
specifier|private
name|void
name|assertBadRequest
parameter_list|(
name|ListRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|req
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

