begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelDefinitionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelDefinitionInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|SetLabelIT
specifier|public
class|class
name|SetLabelIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
annotation|@
name|Test
DECL|method|anonymous ()
specifier|public
name|void
name|anonymous
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
operator|new
name|LabelDefinitionInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Authentication required"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notAllowed ()
specifier|public
name|void
name|notAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AuthException
name|thrown
init|=
name|assertThrows
argument_list|(
name|AuthException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
operator|new
name|LabelDefinitionInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"write refs/meta/config not permitted"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateName ()
specifier|public
name|void
name|updateName
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|"Foo-Review"
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo-Review"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameIsTrimmed ()
specifier|public
name|void
name|nameIsTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|" Foo-Review "
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Foo-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo-Review"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetEmptyName ()
specifier|public
name|void
name|cannotSetEmptyName
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|""
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"name cannot be empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetInvalidName ()
specifier|public
name|void
name|cannotSetInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|"INVALID_NAME"
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid name: "
operator|+
name|input
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetNameIfNameClashes ()
specifier|public
name|void
name|cannotSetNameIfNameClashes
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo-Review"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|configLabel
argument_list|(
literal|"Bar-Review"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|"Bar-Review"
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"name "
operator|+
name|input
operator|.
name|name
operator|+
literal|" already in use"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetNameIfNameConflicts ()
specifier|public
name|void
name|cannotSetNameIfNameConflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"Foo-Review"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|configLabel
argument_list|(
literal|"Bar-Review"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|"bar-review"
expr_stmt|;
name|ResourceConflictException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ResourceConflictException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Foo-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"name bar-review conflicts with existing label Bar-Review"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateFunction ()
specifier|public
name|void
name|updateFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|function
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|functionIsTrimmed ()
specifier|public
name|void
name|functionIsTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
literal|" "
operator|+
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
operator|+
literal|" "
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|function
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetEmptyFunction ()
specifier|public
name|void
name|cannotSetEmptyFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
literal|""
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"function cannot be empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetUnknownFunction ()
specifier|public
name|void
name|cannotSetUnknownFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
literal|"UnknownFunction"
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unknown function: "
operator|+
name|input
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetEmptyValues ()
specifier|public
name|void
name|cannotSetEmptyValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"values cannot be empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateValues ()
specifier|public
name|void
name|updateValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
comment|// Positive values can be specified as '<value>' or '+<value>'.
name|input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"2"
argument_list|,
literal|"Looks Very Good"
argument_list|,
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|"0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|,
literal|"-2"
argument_list|,
literal|"Looks Very Bad"
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|values
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"+2"
argument_list|,
literal|"Looks Very Good"
argument_list|,
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|,
literal|"-2"
argument_list|,
literal|"Looks Very Bad"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|values
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"+2"
argument_list|,
literal|"Looks Very Good"
argument_list|,
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|,
literal|"-2"
argument_list|,
literal|"Looks Very Bad"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|valuesAndDescriptionsAreTrimmed ()
specifier|public
name|void
name|valuesAndDescriptionsAreTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
comment|// Positive values can be specified as '<value>' or '+<value>'.
name|input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|" 2 "
argument_list|,
literal|" Looks Very Good "
argument_list|,
literal|" +1 "
argument_list|,
literal|" Looks Good "
argument_list|,
literal|" 0 "
argument_list|,
literal|" Don't Know "
argument_list|,
literal|" -1 "
argument_list|,
literal|" Looks Bad "
argument_list|,
literal|" -2 "
argument_list|,
literal|" Looks Very Bad "
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|values
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"+2"
argument_list|,
literal|"Looks Very Good"
argument_list|,
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|,
literal|"-2"
argument_list|,
literal|"Looks Very Bad"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|values
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"+2"
argument_list|,
literal|"Looks Very Good"
argument_list|,
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|" 0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|,
literal|"-2"
argument_list|,
literal|"Looks Very Bad"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetInvalidValues ()
specifier|public
name|void
name|cannotSetInvalidValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"invalidValue"
argument_list|,
literal|"description"
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid value: invalidValue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetValueWithEmptyDescription ()
specifier|public
name|void
name|cannotSetValueWithEmptyDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"description for value '+1' cannot be empty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetDuplicateValues ()
specifier|public
name|void
name|cannotSetDuplicateValues
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
comment|// Positive values can be specified as '<value>' or '+<value>'.
name|input
operator|.
name|values
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"+1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|"1"
argument_list|,
literal|"Looks Good"
argument_list|,
literal|"0"
argument_list|,
literal|"Don't Know"
argument_list|,
literal|"-1"
argument_list|,
literal|"Looks Bad"
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"duplicate value: 1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateDefaultValue ()
specifier|public
name|void
name|updateDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|defaultValue
operator|=
literal|1
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|defaultValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|defaultValue
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetInvalidDefaultValue ()
specifier|public
name|void
name|cannotSetInvalidDefaultValue
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|defaultValue
operator|=
literal|5
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid default value: "
operator|+
name|input
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateBranches ()
specifier|public
name|void
name|updateBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
comment|// Branches can be full ref, ref pattern or regular expression.
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|"refs/heads/foo/*"
argument_list|,
literal|"^refs/heads/stable-.*"
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|branches
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|input
operator|.
name|branches
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|branches
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|input
operator|.
name|branches
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchesAreTrimmed ()
specifier|public
name|void
name|branchesAreTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|" refs/heads/master "
argument_list|,
literal|" refs/heads/foo/* "
argument_list|,
literal|" ^refs/heads/stable-.* "
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|branches
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|"refs/heads/foo/*"
argument_list|,
literal|"^refs/heads/stable-.*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|branches
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|"refs/heads/foo/*"
argument_list|,
literal|"^refs/heads/stable-.*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyBranchesAreIgnored ()
specifier|public
name|void
name|emptyBranchesAreIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|""
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|branches
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|branches
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchesCanBeUnset ()
specifier|public
name|void
name|branchesCanBeUnset
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|branches
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|branches
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|branches
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cannotSetInvalidBranch ()
specifier|public
name|void
name|cannotSetInvalidBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"refs heads master"
argument_list|)
expr_stmt|;
name|BadRequestException
name|thrown
init|=
name|assertThrows
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid branch: refs heads master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchesAreAutomaticallyPrefixedWithRefsHeads ()
specifier|public
name|void
name|branchesAreAutomaticallyPrefixedWithRefsHeads
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|branches
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"master"
argument_list|,
literal|"refs/meta/config"
argument_list|)
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|branches
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|"refs/meta/config"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|branches
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|"refs/meta/config"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCanOverride ()
specifier|public
name|void
name|setCanOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCanOverride
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|canOverride
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|canOverride
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|canOverride
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|canOverride
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCanOverride ()
specifier|public
name|void
name|unsetCanOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|canOverride
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|canOverride
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|canOverride
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|canOverride
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyAnyScore ()
specifier|public
name|void
name|setCopyAnyScore
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAnyScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAnyScore
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAnyScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAnyScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyAnyScore ()
specifier|public
name|void
name|unsetCopyAnyScore
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyAnyScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAnyScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAnyScore
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAnyScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAnyScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyMinScore ()
specifier|public
name|void
name|setCopyMinScore
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMinScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyMinScore
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyMinScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMinScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyMinScore ()
specifier|public
name|void
name|unsetCopyMinScore
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyMinScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMinScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyMinScore
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyMinScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMinScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyMaxScore ()
specifier|public
name|void
name|setCopyMaxScore
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMaxScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyMaxScore
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyMaxScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMaxScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyMaxScore ()
specifier|public
name|void
name|unsetCopyMaxScore
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMaxScore
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyMaxScore
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyMaxScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyMaxScore
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyAllScoresIfNoChange ()
specifier|public
name|void
name|setCopyAllScoresIfNoChange
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyAllScoresIfNoChange
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoChange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresIfNoChange
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresIfNoChange
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoChange
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyAllScoresIfNoChange ()
specifier|public
name|void
name|unsetCopyAllScoresIfNoChange
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoChange
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresIfNoChange
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresIfNoChange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoChange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyAllScoresIfNoCodeChange ()
specifier|public
name|void
name|setCopyAllScoresIfNoCodeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoCodeChange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresIfNoCodeChange
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresIfNoCodeChange
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoCodeChange
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyAllScoresIfNoCodeChange ()
specifier|public
name|void
name|unsetCopyAllScoresIfNoCodeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoCodeChange
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresIfNoCodeChange
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresIfNoCodeChange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresIfNoCodeChange
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyAllScoresOnTrivialRebase ()
specifier|public
name|void
name|setCopyAllScoresOnTrivialRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnTrivialRebase
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresOnTrivialRebase
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresOnTrivialRebase
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnTrivialRebase
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyAllScoresOnTrivialRebase ()
specifier|public
name|void
name|unsetCopyAllScoresOnTrivialRebase
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyAllScoresOnTrivialRebase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnTrivialRebase
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresOnTrivialRebase
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresOnTrivialRebase
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnTrivialRebase
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setCopyAllScoresOnMergeFirstParentUpdate ()
specifier|public
name|void
name|setCopyAllScoresOnMergeFirstParentUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetCopyAllScoresOnMergeFirstParentUpdate ()
specifier|public
name|void
name|unsetCopyAllScoresOnMergeFirstParentUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setCopyAllScoresOnMergeFirstParentUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setAllowPostSubmit ()
specifier|public
name|void
name|setAllowPostSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setAllowPostSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|allowPostSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|allowPostSubmit
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|allowPostSubmit
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|allowPostSubmit
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetAllowPostSubmit ()
specifier|public
name|void
name|unsetAllowPostSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|allowPostSubmit
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|allowPostSubmit
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|allowPostSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|allowPostSubmit
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setIgnoreSelfApproval ()
specifier|public
name|void
name|setIgnoreSelfApproval
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|ignoreSelfApproval
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|ignoreSelfApproval
operator|=
literal|true
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|ignoreSelfApproval
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|ignoreSelfApproval
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unsetIgnoreSelfApproval ()
specifier|public
name|void
name|unsetIgnoreSelfApproval
parameter_list|()
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
literal|"foo"
argument_list|,
name|LabelFunction
operator|.
name|NO_OP
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setIgnoreSelfApproval
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|ignoreSelfApproval
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|ignoreSelfApproval
operator|=
literal|false
expr_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedLabel
operator|.
name|ignoreSelfApproval
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|ignoreSelfApproval
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noOpUpdate ()
specifier|public
name|void
name|noOpUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|refsMetaConfigHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|LabelDefinitionInfo
name|updatedLabel
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
operator|new
name|LabelDefinitionInput
argument_list|()
argument_list|)
decl_stmt|;
name|LabelAssert
operator|.
name|assertCodeReviewLabel
argument_list|(
name|updatedLabel
argument_list|)
expr_stmt|;
name|LabelAssert
operator|.
name|assertCodeReviewLabel
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refsMetaConfigHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultCommitMessage ()
specifier|public
name|void
name|defaultCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Update label"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withCommitMessage ()
specifier|public
name|void
name|withCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|input
operator|.
name|commitMessage
operator|=
literal|"Set NoOp function"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|input
operator|.
name|commitMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|commitMessageIsTrimmed ()
specifier|public
name|void
name|commitMessageIsTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelDefinitionInput
name|input
init|=
operator|new
name|LabelDefinitionInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|function
operator|=
name|LabelFunction
operator|.
name|NO_OP
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|input
operator|.
name|commitMessage
operator|=
literal|" Set NoOp function "
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|update
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|projectOperations
operator|.
name|project
argument_list|(
name|allProjects
argument_list|)
operator|.
name|getHead
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Set NoOp function"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

