begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.rest.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|rest
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|MESSAGES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|AccessSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PermissionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PermissionRuleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|ProjectAccessInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|ProjectAccessInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsNameProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AccessIT
specifier|public
class|class
name|AccessIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|PROJECT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT_NAME
init|=
literal|"newProject"
decl_stmt|;
DECL|field|REFS_ALL
specifier|private
specifier|static
specifier|final
name|String
name|REFS_ALL
init|=
name|Constants
operator|.
name|R_REFS
operator|+
literal|"*"
decl_stmt|;
DECL|field|REFS_HEADS
specifier|private
specifier|static
specifier|final
name|String
name|REFS_HEADS
init|=
name|Constants
operator|.
name|R_HEADS
operator|+
literal|"*"
decl_stmt|;
DECL|field|LABEL_CODE_REVIEW
specifier|private
specifier|static
specifier|final
name|String
name|LABEL_CODE_REVIEW
init|=
literal|"Code-Review"
decl_stmt|;
DECL|field|newProjectName
specifier|private
name|String
name|newProjectName
decl_stmt|;
DECL|field|pApi
specifier|private
name|ProjectApi
name|pApi
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|newProjectName
operator|=
name|createProject
argument_list|(
name|PROJECT_NAME
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|pApi
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDefaultInheritance ()
specifier|public
name|void
name|getDefaultInheritance
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|inheritedName
init|=
name|pApi
operator|.
name|access
argument_list|()
operator|.
name|inheritsFrom
operator|.
name|name
decl_stmt|;
name|assertThat
argument_list|(
name|inheritedName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|AllProjectsNameProvider
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addAccessSection ()
specifier|public
name|void
name|addAccessSection
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|newProjectName
argument_list|)
decl_stmt|;
name|RevCommit
name|initialHead
init|=
name|getRemoteHead
argument_list|(
name|p
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pApi
operator|.
name|access
argument_list|()
operator|.
name|local
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accessInput
operator|.
name|add
argument_list|)
expr_stmt|;
name|RevCommit
name|updatedHead
init|=
name|getRemoteHead
argument_list|(
name|p
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|eventRecorder
operator|.
name|assertRefUpdatedEvents
argument_list|(
name|p
operator|.
name|get
argument_list|()
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|null
argument_list|,
name|initialHead
argument_list|,
name|initialHead
argument_list|,
name|updatedHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createAccessChange ()
specifier|public
name|void
name|createAccessChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// User can see the branch
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSection
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
comment|// Deny read to registered users.
name|PermissionInfo
name|read
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|read
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|read
operator|.
name|exclusive
operator|=
literal|true
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSection
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|ChangeInfo
name|out
init|=
name|pApi
operator|.
name|accessChange
argument_list|(
name|accessInput
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newProjectName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|submitted
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|out
operator|.
name|_number
argument_list|)
operator|.
name|get
argument_list|(
name|MESSAGES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|messages
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|m
lambda|->
name|m
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"Uploaded patch set 1"
argument_list|)
expr_stmt|;
name|ReviewInput
name|reviewIn
init|=
operator|new
name|ReviewInput
argument_list|()
decl_stmt|;
name|reviewIn
operator|.
name|label
argument_list|(
literal|"Code-Review"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|out
operator|.
name|_number
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewIn
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|out
operator|.
name|_number
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// check that the change took effect.
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
try|try
block|{
name|BranchInfo
name|info
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"wanted failure, got "
operator|+
name|newGson
argument_list|()
operator|.
name|toJson
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
comment|// OK.
block|}
comment|// Restore.
name|accessInput
operator|.
name|add
operator|.
name|clear
argument_list|()
expr_stmt|;
name|accessInput
operator|.
name|remove
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSection
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|accessChange
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|out
operator|=
name|pApi
operator|.
name|accessChange
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|out
operator|.
name|_number
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|reviewIn
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|out
operator|.
name|_number
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Now it works again.
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removePermission ()
specifier|public
name|void
name|removePermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add initial permission set
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Remove specific permission
name|AccessSectionInfo
name|accessSectionToRemove
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessSectionToRemove
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|,
name|newPermissionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|ProjectAccessInput
name|removal
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|removal
operator|.
name|remove
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionToRemove
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|removal
argument_list|)
expr_stmt|;
comment|// Remove locally
name|accessInput
operator|.
name|add
operator|.
name|get
argument_list|(
name|REFS_HEADS
argument_list|)
operator|.
name|permissions
operator|.
name|remove
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|)
expr_stmt|;
comment|// Check
name|assertThat
argument_list|(
name|pApi
operator|.
name|access
argument_list|()
operator|.
name|local
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accessInput
operator|.
name|add
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removePermissionRule ()
specifier|public
name|void
name|removePermissionRule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add initial permission set
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Remove specific permission rule
name|AccessSectionInfo
name|accessSectionToRemove
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|codeReview
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|codeReview
operator|.
name|label
operator|=
name|LABEL_CODE_REVIEW
expr_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|codeReview
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSectionToRemove
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
name|ProjectAccessInput
name|removal
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|removal
operator|.
name|remove
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionToRemove
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|removal
argument_list|)
expr_stmt|;
comment|// Remove locally
name|accessInput
operator|.
name|add
operator|.
name|get
argument_list|(
name|REFS_HEADS
argument_list|)
operator|.
name|permissions
operator|.
name|get
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|)
operator|.
name|rules
operator|.
name|remove
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check
name|assertThat
argument_list|(
name|pApi
operator|.
name|access
argument_list|()
operator|.
name|local
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accessInput
operator|.
name|add
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removePermissionRulesAndCleanupEmptyEntries ()
specifier|public
name|void
name|removePermissionRulesAndCleanupEmptyEntries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add initial permission set
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Remove specific permission rules
name|AccessSectionInfo
name|accessSectionToRemove
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|codeReview
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|codeReview
operator|.
name|label
operator|=
name|LABEL_CODE_REVIEW
expr_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|codeReview
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|pri
operator|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|codeReview
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSectionToRemove
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
name|ProjectAccessInput
name|removal
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|removal
operator|.
name|remove
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionToRemove
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|removal
argument_list|)
expr_stmt|;
comment|// Remove locally
name|accessInput
operator|.
name|add
operator|.
name|get
argument_list|(
name|REFS_HEADS
argument_list|)
operator|.
name|permissions
operator|.
name|remove
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|)
expr_stmt|;
comment|// Check
name|assertThat
argument_list|(
name|pApi
operator|.
name|access
argument_list|()
operator|.
name|local
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|accessInput
operator|.
name|add
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getPermissionsWithDisallowedUser ()
specifier|public
name|void
name|getPermissionsWithDisallowedUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add initial permission set
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createAccessSectionInfoDenyAll
argument_list|()
decl_stmt|;
comment|// Disallow READ
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_ALL
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|access
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setPermissionsWithDisallowedUser ()
specifier|public
name|void
name|setPermissionsWithDisallowedUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add initial permission set
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createAccessSectionInfoDenyAll
argument_list|()
decl_stmt|;
comment|// Disallow READ
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_ALL
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Create a change to apply
name|ProjectAccessInput
name|accessInfoToApply
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfoToApply
init|=
name|createDefaultAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInfoToApply
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_HEADS
argument_list|,
name|accessSectionInfoToApply
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ResourceNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|access
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|permissionsGroupMap ()
specifier|public
name|void
name|permissionsGroupMap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add initial permission set
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSection
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|push
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|push
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|,
name|push
argument_list|)
expr_stmt|;
name|PermissionInfo
name|read
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|pri
operator|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|read
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|REFS_ALL
argument_list|,
name|accessSection
argument_list|)
expr_stmt|;
name|ProjectAccessInfo
name|result
init|=
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|groups
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|,
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the name, which is what the UI cares about; exhaustive
comment|// coverage of GroupInfo should be in groups REST API tests.
name|assertThat
argument_list|(
name|result
operator|.
name|groups
operator|.
name|get
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Project Owners"
argument_list|)
expr_stmt|;
comment|// Strip the ID, since it is in the key.
name|assertThat
argument_list|(
name|result
operator|.
name|groups
operator|.
name|get
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|id
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Get call returns groups too.
name|ProjectAccessInfo
name|loggedInResult
init|=
name|pApi
operator|.
name|access
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|loggedInResult
operator|.
name|groups
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|,
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loggedInResult
operator|.
name|groups
operator|.
name|get
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Project Owners"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loggedInResult
operator|.
name|groups
operator|.
name|get
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|id
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// PROJECT_OWNERS is invisible to anonymous user, so we strip it.
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|ProjectAccessInfo
name|anonResult
init|=
name|pApi
operator|.
name|access
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|anonResult
operator|.
name|groups
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateParentAsUser ()
specifier|public
name|void
name|updateParentAsUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create child
name|String
name|newParentProjectName
init|=
name|createProject
argument_list|(
name|PROJECT_NAME
operator|+
literal|"PA"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Set new parent
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|parent
operator|=
name|newParentProjectName
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"administrate server not permitted"
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateParentAsAdministrator ()
specifier|public
name|void
name|updateParentAsAdministrator
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create parent
name|String
name|newParentProjectName
init|=
name|createProject
argument_list|(
name|PROJECT_NAME
operator|+
literal|"PA"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Set new parent
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|parent
operator|=
name|newParentProjectName
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|newProjectName
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pApi
operator|.
name|access
argument_list|()
operator|.
name|inheritsFrom
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|newParentProjectName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGlobalCapabilityAsUser ()
specifier|public
name|void
name|addGlobalCapabilityAsUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultGlobalCapabilitiesAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGlobalCapabilityAsAdmin ()
specifier|public
name|void
name|addGlobalCapabilityAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultGlobalCapabilitiesAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|ProjectAccessInfo
name|updatedAccessSectionInfo
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedAccessSectionInfo
operator|.
name|local
operator|.
name|get
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
operator|.
name|permissions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsAllIn
argument_list|(
name|accessSectionInfo
operator|.
name|permissions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addGlobalCapabilityForNonRootProject ()
specifier|public
name|void
name|addGlobalCapabilityForNonRootProject
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultGlobalCapabilitiesAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|pApi
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|addNonGlobalCapabilityToGlobalCapabilities ()
specifier|public
name|void
name|addNonGlobalCapabilityToGlobalCapabilities
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|permissionInfo
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|permissionInfo
operator|.
name|rules
operator|.
name|put
argument_list|(
name|adminGroupUuid
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|accessSectionInfo
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|,
name|permissionInfo
argument_list|)
expr_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeGlobalCapabilityAsUser ()
specifier|public
name|void
name|removeGlobalCapabilityAsUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultGlobalCapabilitiesAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|remove
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|AuthException
operator|.
name|class
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeGlobalCapabilityAsAdmin ()
specifier|public
name|void
name|removeGlobalCapabilityAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|permissionInfo
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|permissionInfo
operator|.
name|rules
operator|.
name|put
argument_list|(
name|adminGroupUuid
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|accessSectionInfo
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|,
name|permissionInfo
argument_list|)
expr_stmt|;
comment|// Add and validate first as removing existing privileges such as
comment|// administrateServer would break upcoming tests
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|ProjectAccessInfo
name|updatedProjectAccessInfo
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedProjectAccessInfo
operator|.
name|local
operator|.
name|get
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
operator|.
name|permissions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsAllIn
argument_list|(
name|accessSectionInfo
operator|.
name|permissions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove
name|accessInput
operator|.
name|add
operator|.
name|clear
argument_list|()
expr_stmt|;
name|accessInput
operator|.
name|remove
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|updatedProjectAccessInfo
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updatedProjectAccessInfo
operator|.
name|local
operator|.
name|get
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
operator|.
name|permissions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsNoneIn
argument_list|(
name|accessSectionInfo
operator|.
name|permissions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unknownPermissionRemainsUnchanged ()
specifier|public
name|void
name|unknownPermissionRemainsUnchanged
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|access
init|=
literal|"access"
decl_stmt|;
name|String
name|unknownPermission
init|=
literal|"unknownPermission"
decl_stmt|;
name|String
name|registeredUsers
init|=
literal|"group Registered Users"
decl_stmt|;
name|String
name|refsFor
init|=
literal|"refs/for/*"
decl_stmt|;
comment|// Clone repository to forcefully add permission
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|allProjectsRepo
init|=
name|cloneProject
argument_list|(
name|allProjects
argument_list|,
name|admin
argument_list|)
decl_stmt|;
comment|// Fetch permission ref
name|GitUtil
operator|.
name|fetch
argument_list|(
name|allProjectsRepo
argument_list|,
literal|"refs/meta/config:cfg"
argument_list|)
expr_stmt|;
name|allProjectsRepo
operator|.
name|reset
argument_list|(
literal|"cfg"
argument_list|)
expr_stmt|;
comment|// Load current permissions
name|String
name|config
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|file
argument_list|(
name|ProjectConfig
operator|.
name|PROJECT_CONFIG
argument_list|)
operator|.
name|asString
argument_list|()
decl_stmt|;
comment|// Append and push unknown permission
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|access
argument_list|,
name|refsFor
argument_list|,
name|unknownPermission
argument_list|,
name|registeredUsers
argument_list|)
expr_stmt|;
name|config
operator|=
name|cfg
operator|.
name|toText
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|allProjectsRepo
argument_list|,
literal|"Subject"
argument_list|,
name|ProjectConfig
operator|.
name|PROJECT_CONFIG
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|push
operator|.
name|to
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Verify that unknownPermission is present
name|config
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|file
argument_list|(
name|ProjectConfig
operator|.
name|PROJECT_CONFIG
argument_list|)
operator|.
name|asString
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
name|access
argument_list|,
name|refsFor
argument_list|,
name|unknownPermission
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|registeredUsers
argument_list|)
expr_stmt|;
comment|// Make permission change through API
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSectionInfo
init|=
name|createDefaultAccessSectionInfo
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|refsFor
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|clear
argument_list|()
expr_stmt|;
name|accessInput
operator|.
name|remove
operator|.
name|put
argument_list|(
name|refsFor
argument_list|,
name|accessSectionInfo
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Verify that unknownPermission is still present
name|config
operator|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|file
argument_list|(
name|ProjectConfig
operator|.
name|PROJECT_CONFIG
argument_list|)
operator|.
name|asString
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
name|access
argument_list|,
name|refsFor
argument_list|,
name|unknownPermission
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|registeredUsers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allUsersCanOnlyInheritFromAllProjects ()
specifier|public
name|void
name|allUsersCanOnlyInheritFromAllProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|accessInput
operator|.
name|parent
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|BadRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|allUsers
operator|.
name|get
argument_list|()
operator|+
literal|" must inherit from "
operator|+
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allUsers
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|syncCreateGroupPermission ()
specifier|public
name|void
name|syncCreateGroupPermission
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grant CREATE_GROUP to Registered Users
name|ProjectAccessInput
name|accessInput
init|=
name|newProjectAccessInput
argument_list|()
decl_stmt|;
name|AccessSectionInfo
name|accessSection
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|createGroup
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createGroup
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|GlobalCapability
operator|.
name|CREATE_GROUP
argument_list|,
name|createGroup
argument_list|)
expr_stmt|;
name|accessInput
operator|.
name|add
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSection
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Assert that the permission was synced from All-Projects (global) to All-Users (ref)
name|Map
argument_list|<
name|String
argument_list|,
name|AccessSectionInfo
argument_list|>
name|local
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"All-Users"
argument_list|)
operator|.
name|access
argument_list|()
operator|.
name|local
decl_stmt|;
name|assertThat
argument_list|(
name|local
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|local
argument_list|)
operator|.
name|containsKey
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PermissionInfo
argument_list|>
name|permissions
init|=
name|local
operator|.
name|get
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|)
operator|.
name|permissions
decl_stmt|;
name|assertThat
argument_list|(
name|permissions
argument_list|)
operator|.
name|containsKey
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PermissionRuleInfo
argument_list|>
name|rules
init|=
name|permissions
operator|.
name|get
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|)
operator|.
name|rules
decl_stmt|;
name|assertThat
argument_list|(
name|rules
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|pri
argument_list|)
expr_stmt|;
comment|// Revoke the permission
name|accessInput
operator|.
name|add
operator|.
name|clear
argument_list|()
expr_stmt|;
name|accessInput
operator|.
name|remove
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|accessSection
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|access
argument_list|(
name|accessInput
argument_list|)
expr_stmt|;
comment|// Assert that the permission was synced from All-Projects (global) to All-Users (ref)
name|Map
argument_list|<
name|String
argument_list|,
name|AccessSectionInfo
argument_list|>
name|local2
init|=
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
literal|"All-Users"
argument_list|)
operator|.
name|access
argument_list|()
operator|.
name|local
decl_stmt|;
name|assertThat
argument_list|(
name|local2
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|local2
argument_list|)
operator|.
name|doesNotContainKey
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|)
expr_stmt|;
block|}
DECL|method|newProjectAccessInput ()
specifier|private
name|ProjectAccessInput
name|newProjectAccessInput
parameter_list|()
block|{
name|ProjectAccessInput
name|p
init|=
operator|new
name|ProjectAccessInput
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|p
operator|.
name|remove
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|newPermissionInfo ()
specifier|private
name|PermissionInfo
name|newPermissionInfo
parameter_list|()
block|{
name|PermissionInfo
name|p
init|=
operator|new
name|PermissionInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|p
operator|.
name|rules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|newAccessSectionInfo ()
specifier|private
name|AccessSectionInfo
name|newAccessSectionInfo
parameter_list|()
block|{
name|AccessSectionInfo
name|a
init|=
operator|new
name|AccessSectionInfo
argument_list|()
decl_stmt|;
name|a
operator|.
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|a
return|;
block|}
DECL|method|createDefaultAccessSectionInfo ()
specifier|private
name|AccessSectionInfo
name|createDefaultAccessSectionInfo
parameter_list|()
block|{
name|AccessSectionInfo
name|accessSection
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|push
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|push
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|,
name|push
argument_list|)
expr_stmt|;
name|PermissionInfo
name|codeReview
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|codeReview
operator|.
name|label
operator|=
name|LABEL_CODE_REVIEW
expr_stmt|;
name|pri
operator|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|codeReview
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|pri
operator|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pri
operator|.
name|max
operator|=
literal|1
expr_stmt|;
name|pri
operator|.
name|min
operator|=
operator|-
literal|1
expr_stmt|;
name|codeReview
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|PROJECT_OWNERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|LABEL
operator|+
name|LABEL_CODE_REVIEW
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
return|return
name|accessSection
return|;
block|}
DECL|method|createDefaultGlobalCapabilitiesAccessSectionInfo ()
specifier|private
name|AccessSectionInfo
name|createDefaultGlobalCapabilitiesAccessSectionInfo
parameter_list|()
block|{
name|AccessSectionInfo
name|accessSection
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|email
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|email
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|GlobalCapability
operator|.
name|EMAIL_REVIEWERS
argument_list|,
name|email
argument_list|)
expr_stmt|;
return|return
name|accessSection
return|;
block|}
DECL|method|createAccessSectionInfoDenyAll ()
specifier|private
name|AccessSectionInfo
name|createAccessSectionInfoDenyAll
parameter_list|()
block|{
name|AccessSectionInfo
name|accessSection
init|=
name|newAccessSectionInfo
argument_list|()
decl_stmt|;
name|PermissionInfo
name|read
init|=
name|newPermissionInfo
argument_list|()
decl_stmt|;
name|PermissionRuleInfo
name|pri
init|=
operator|new
name|PermissionRuleInfo
argument_list|(
name|PermissionRuleInfo
operator|.
name|Action
operator|.
name|DENY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|read
operator|.
name|rules
operator|.
name|put
argument_list|(
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
operator|.
name|get
argument_list|()
argument_list|,
name|pri
argument_list|)
expr_stmt|;
name|accessSection
operator|.
name|permissions
operator|.
name|put
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|read
argument_list|)
expr_stmt|;
return|return
name|accessSection
return|;
block|}
block|}
end_class

end_unit

