begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.testsuite.request
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseSsh
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|AccountOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
operator|.
name|PropertyKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|UseSsh
DECL|class|RequestScopeOperationsImplTest
specifier|public
class|class
name|RequestScopeOperationsImplTest
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|changeCounter
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|changeCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|accountOperations
annotation|@
name|Inject
specifier|private
name|AccountOperations
name|accountOperations
decl_stmt|;
DECL|field|userProvider
annotation|@
name|Inject
specifier|private
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperationsImpl
name|requestScopeOperations
decl_stmt|;
DECL|field|sequences
annotation|@
name|Inject
specifier|private
name|Sequences
name|sequences
decl_stmt|;
annotation|@
name|Test
DECL|method|setApiUserToExistingUserById ()
specifier|public
name|void
name|setApiUserToExistingUserById
parameter_list|()
throws|throws
name|Exception
block|{
name|fastCheckCurrentUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|oldCtx
init|=
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldCtx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|checkCurrentUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setApiUserToExistingUserByTestAccount ()
specifier|public
name|void
name|setApiUserToExistingUserByTestAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|fastCheckCurrentUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|TestAccount
name|testAccount
init|=
name|accountOperations
operator|.
name|account
argument_list|(
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|username
argument_list|(
literal|"tester"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|oldCtx
init|=
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|testAccount
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oldCtx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|checkCurrentUser
argument_list|(
name|testAccount
operator|.
name|accountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setApiUserToNonExistingUser ()
specifier|public
name|void
name|setApiUserToNonExistingUser
parameter_list|()
throws|throws
name|Exception
block|{
name|fastCheckCurrentUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|sequences
operator|.
name|nextAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
literal|"expected RuntimeException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
name|checkCurrentUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|resetCurrentApiUserClearsCachedState ()
specifier|public
name|void
name|resetCurrentApiUserClearsCachedState
parameter_list|()
throws|throws
name|Exception
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|PropertyKey
argument_list|<
name|String
argument_list|>
name|key
init|=
name|PropertyKey
operator|.
name|create
argument_list|()
decl_stmt|;
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|oldCtx
init|=
name|requestScopeOperations
operator|.
name|resetCurrentApiUser
argument_list|()
decl_stmt|;
name|checkCurrentUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|oldCtx
operator|.
name|getUser
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setApiUserAnonymousSetsAnonymousUser ()
specifier|public
name|void
name|setApiUserAnonymousSetsAnonymousUser
parameter_list|()
throws|throws
name|Exception
block|{
name|fastCheckCurrentUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUserAnonymous
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|userProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|AnonymousUser
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|fastCheckCurrentUser (Account.Id expected)
specifier|private
name|void
name|fastCheckCurrentUser
parameter_list|(
name|Account
operator|.
name|Id
name|expected
parameter_list|)
block|{
comment|// Check current user quickly, since the full check requires creating changes and is quite slow.
name|assertWithMessage
argument_list|(
literal|"user from provider is an IdentifiedUser"
argument_list|)
operator|.
name|that
argument_list|(
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"user from provider"
argument_list|)
operator|.
name|that
argument_list|(
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCurrentUser (Account.Id expected)
specifier|private
name|void
name|checkCurrentUser
parameter_list|(
name|Account
operator|.
name|Id
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Test all supported ways that an acceptance test might query the active user.
name|fastCheckCurrentUser
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"user from GerritApi"
argument_list|)
operator|.
name|that
argument_list|(
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|atrScope
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"user from AcceptanceTestRequestScope.Context is an IdentifiedUser"
argument_list|)
operator|.
name|that
argument_list|(
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"user from AcceptanceTestRequestScope.Context"
argument_list|)
operator|.
name|that
argument_list|(
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|checkSshUser
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSshUser (Account.Id expected)
specifier|private
name|void
name|checkSshUser
parameter_list|(
name|Account
operator|.
name|Id
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
comment|// No "gerrit whoami" command, so the simplest way to check who the user is over SSH is to query
comment|// for owner:self.
name|ChangeInput
name|cin
init|=
operator|new
name|ChangeInput
argument_list|()
decl_stmt|;
name|cin
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|cin
operator|.
name|branch
operator|=
literal|"master"
expr_stmt|;
name|cin
operator|.
name|subject
operator|=
literal|"Test change "
operator|+
name|changeCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|String
name|changeId
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
name|cin
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|changeId
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|owner
operator|.
name|_accountId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expected
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queryResults
init|=
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|exec
argument_list|(
literal|"gerrit query owner:self change:"
operator|+
name|changeId
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Change-Ids in query results:\n%s"
argument_list|,
name|queryResults
argument_list|)
operator|.
name|that
argument_list|(
name|findDistinct
argument_list|(
name|queryResults
argument_list|,
literal|"I[0-9a-f]{40}"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
block|}
DECL|method|findDistinct (String input, String pattern)
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|findDistinct
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|b
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|b
operator|.
name|add
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

