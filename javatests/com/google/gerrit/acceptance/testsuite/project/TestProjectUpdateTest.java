begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.testsuite.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowCapability
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowLabel
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|capabilityKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|labelPermissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|permissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|BATCH_CHANGES_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|DEFAULT_MAX_BATCH_CHANGES_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|DEFAULT_MAX_QUERY_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|QUERY_LIMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|ABANDON
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|TestCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|TestLabelPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|TestPermissionKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestProjectUpdateTest
specifier|public
class|class
name|TestProjectUpdateTest
block|{
DECL|field|ALL_PROJECTS_NAME
specifier|private
specifier|static
specifier|final
name|AllProjectsName
name|ALL_PROJECTS_NAME
init|=
operator|new
name|AllProjectsName
argument_list|(
literal|"All-Projects"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCapabilityDisallowsZeroRangeOnCapabilityThatHasNoRange ()
specifier|public
name|void
name|testCapabilityDisallowsZeroRangeOnCapabilityThatHasNoRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allowCapability
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCapabilityAllowsZeroRangeOnCapabilityThatHasRange ()
specifier|public
name|void
name|testCapabilityAllowsZeroRangeOnCapabilityThatHasRange
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCapability
name|c
init|=
name|allowCapability
argument_list|(
name|QUERY_LIMIT
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCapabilityDisallowsInvertedRange ()
specifier|public
name|void
name|testCapabilityDisallowsInvertedRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allowCapability
argument_list|(
name|QUERY_LIMIT
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCapabilityDisallowsRangeIfCapabilityDoesNotSupportRange ()
specifier|public
name|void
name|testCapabilityDisallowsRangeIfCapabilityDoesNotSupportRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allowCapability
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCapabilityRangeIsZeroIfCapabilityDoesNotSupportRange ()
specifier|public
name|void
name|testCapabilityRangeIsZeroIfCapabilityDoesNotSupportRange
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCapability
name|c
init|=
name|allowCapability
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCapabilityUsesDefaultRangeIfUnspecified ()
specifier|public
name|void
name|testCapabilityUsesDefaultRangeIfUnspecified
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCapability
name|c
init|=
name|allowCapability
argument_list|(
name|QUERY_LIMIT
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DEFAULT_MAX_QUERY_LIMIT
argument_list|)
expr_stmt|;
name|c
operator|=
name|allowCapability
argument_list|(
name|BATCH_CHANGES_LIMIT
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DEFAULT_MAX_BATCH_CHANGES_LIMIT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCapabilityUsesExplicitRangeIfSpecified ()
specifier|public
name|void
name|testCapabilityUsesExplicitRangeIfSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCapability
name|c
init|=
name|allowCapability
argument_list|(
name|QUERY_LIMIT
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLabelPermissionRequiresValidLabelName ()
specifier|public
name|void
name|testLabelPermissionRequiresValidLabelName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestLabelPermission
operator|.
name|Builder
argument_list|>
name|labelBuilder
init|=
name|name
lambda|->
name|allowLabel
argument_list|(
name|name
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|labelBuilder
operator|.
name|apply
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|labelBuilder
operator|.
name|apply
argument_list|(
literal|"not a label"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|labelBuilder
operator|.
name|apply
argument_list|(
literal|"label-Code-Review"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLabelPermissionDisallowsZeroRange ()
specifier|public
name|void
name|testLabelPermissionDisallowsZeroRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLabelPermissionDisallowsInvertedRange ()
specifier|public
name|void
name|testLabelPermissionDisallowsInvertedRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPermissionKeyRequiresValidRefName ()
specifier|public
name|void
name|testPermissionKeyRequiresValidRefName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestPermissionKey
operator|.
name|Builder
argument_list|>
name|keyBuilder
init|=
name|ref
lambda|->
name|permissionKey
argument_list|(
name|ABANDON
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|section
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"refs/*"
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLabelPermissionKeyRequiresValidLabelName ()
specifier|public
name|void
name|testLabelPermissionKeyRequiresValidLabelName
parameter_list|()
throws|throws
name|Exception
block|{
name|Function
argument_list|<
name|String
argument_list|,
name|TestPermissionKey
operator|.
name|Builder
argument_list|>
name|keyBuilder
init|=
name|label
lambda|->
name|labelPermissionKey
argument_list|(
name|label
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"label-Code-Review"
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|"not a label"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|keyBuilder
operator|.
name|apply
argument_list|(
literal|"label-Code-Review"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPermissionKeyDisallowsSettingRefOnGlobalCapability ()
specifier|public
name|void
name|testPermissionKeyDisallowsSettingRefOnGlobalCapability
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|capabilityKey
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProjectUpdateDisallowsGroupOnExclusiveGroupPermissionKey ()
specifier|public
name|void
name|testProjectUpdateDisallowsGroupOnExclusiveGroupPermissionKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TestPermissionKey
operator|.
name|Builder
name|b
init|=
name|permissionKey
argument_list|(
name|ABANDON
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|TestPermissionKey
operator|.
name|Builder
argument_list|,
name|TestProjectUpdate
operator|.
name|Builder
argument_list|>
name|updateBuilder
init|=
name|kb
lambda|->
name|builder
argument_list|()
operator|.
name|setExclusiveGroup
argument_list|(
name|kb
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updateBuilder
operator|.
name|apply
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|exclusiveGroupPermissions
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|updateBuilder
operator|.
name|apply
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hasCapabilityUpdates ()
specifier|public
name|void
name|hasCapabilityUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|builder
argument_list|()
operator|.
name|build
argument_list|()
operator|.
name|hasCapabilityUpdates
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|ABANDON
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allowLabel
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
name|permissionKey
argument_list|(
name|ABANDON
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/foo"
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
name|labelPermissionKey
argument_list|(
literal|"Code-Review"
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/foo"
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|ABANDON
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/bar"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|labelPermissionKey
argument_list|(
name|ABANDON
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/bar"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|hasCapabilityUpdates
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|builder
argument_list|(
name|ALL_PROJECTS_NAME
argument_list|)
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|hasCapabilityUpdates
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|builder
argument_list|(
name|ALL_PROJECTS_NAME
argument_list|)
operator|.
name|remove
argument_list|(
name|capabilityKey
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|hasCapabilityUpdates
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updatingCapabilitiesNotAllowedForNonAllProjects ()
specifier|public
name|void
name|updatingCapabilitiesNotAllowedForNonAllProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|remove
argument_list|(
name|capabilityKey
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|builder ()
specifier|private
specifier|static
name|TestProjectUpdate
operator|.
name|Builder
name|builder
parameter_list|()
block|{
return|return
name|builder
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
literal|"test-project"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|builder (Project.NameKey nameKey)
specifier|private
specifier|static
name|TestProjectUpdate
operator|.
name|Builder
name|builder
parameter_list|(
name|Project
operator|.
name|NameKey
name|nameKey
parameter_list|)
block|{
return|return
name|TestProjectUpdate
operator|.
name|builder
argument_list|(
name|nameKey
argument_list|,
name|ALL_PROJECTS_NAME
argument_list|,
name|u
lambda|->
block|{}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

