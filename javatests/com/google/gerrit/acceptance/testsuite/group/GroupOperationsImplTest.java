begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.testsuite.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|group
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Correspondence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|AccountOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GroupOperationsImplTest
specifier|public
class|class
name|GroupOperationsImplTest
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|accountOperations
annotation|@
name|Inject
specifier|private
name|AccountOperations
name|accountOperations
decl_stmt|;
DECL|field|groupOperations
annotation|@
name|Inject
specifier|private
name|GroupOperationsImpl
name|groupOperations
decl_stmt|;
DECL|field|uniqueGroupNameIndex
specifier|private
name|int
name|uniqueGroupNameIndex
decl_stmt|;
annotation|@
name|Test
DECL|method|groupCanBeCreatedWithoutSpecifyingAnyParameters ()
specifier|public
name|void
name|groupCanBeCreatedWithoutSpecifyingAnyParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|name
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoGroupsWithoutAnyParametersDoNotClash ()
specifier|public
name|void
name|twoGroupsWithoutAnyParametersDoNotClash
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid1
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid2
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|TestGroup
name|group1
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|TestGroup
name|group2
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|group1
operator|.
name|groupUuid
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|group2
operator|.
name|groupUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupCreatedByTestApiCanBeRetrievedViaOfficialApi ()
specifier|public
name|void
name|groupCreatedByTestApiCanBeRetrievedViaOfficialApi
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"unique group created via test API"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|id
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"unique group created via test API"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedNameIsRespectedForGroupCreation ()
specifier|public
name|void
name|specifiedNameIsRespectedForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"XYZ-123-this-name-must-be-unique"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|group
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"XYZ-123-this-name-must-be-unique"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedDescriptionIsRespectedForGroupCreation ()
specifier|public
name|void
name|specifiedDescriptionIsRespectedForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|description
argument_list|(
literal|"All authenticated users"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|group
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"All authenticated users"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestingNoDescriptionIsPossibleForGroupCreation ()
specifier|public
name|void
name|requestingNoDescriptionIsPossibleForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearDescription
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|group
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|description
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedOwnerIsRespectedForGroupCreation ()
specifier|public
name|void
name|specifiedOwnerIsRespectedForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|ownerGroupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|(
name|ownerGroupUuid
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|ownerId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ownerGroupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedVisibilityIsRespectedForGroupCreation ()
specifier|public
name|void
name|specifiedVisibilityIsRespectedForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|group1Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|visibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group2Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|visibleToAll
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup1
init|=
name|getGroupFromServer
argument_list|(
name|group1Uuid
argument_list|)
decl_stmt|;
name|GroupInfo
name|foundGroup2
init|=
name|getGroupFromServer
argument_list|(
name|group2Uuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup1
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// False == null
name|assertThat
argument_list|(
name|foundGroup2
operator|.
name|options
operator|.
name|visibleToAll
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedMembersAreRespectedForGroupCreation ()
specifier|public
name|void
name|specifiedMembersAreRespectedForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|account1Id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|account2Id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|account3Id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|account4Id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|members
argument_list|(
name|account1Id
argument_list|,
name|account2Id
argument_list|)
operator|.
name|addMember
argument_list|(
name|account3Id
argument_list|)
operator|.
name|addMember
argument_list|(
name|account4Id
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|members
argument_list|)
operator|.
name|comparingElementsUsing
argument_list|(
name|getAccountToIdCorrespondence
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|account1Id
argument_list|,
name|account2Id
argument_list|,
name|account3Id
argument_list|,
name|account4Id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|directlyAddingMembersIsPossibleForGroupCreation ()
specifier|public
name|void
name|directlyAddingMembersIsPossibleForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|account1Id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|account2Id
init|=
name|accountOperations
operator|.
name|newAccount
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|addMember
argument_list|(
name|account1Id
argument_list|)
operator|.
name|addMember
argument_list|(
name|account2Id
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|members
argument_list|)
operator|.
name|comparingElementsUsing
argument_list|(
name|getAccountToIdCorrespondence
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|account1Id
argument_list|,
name|account2Id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestingNoMembersIsPossibleForGroupCreation ()
specifier|public
name|void
name|requestingNoMembersIsPossibleForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearMembers
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|members
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifiedSubgroupsAreRespectedForGroupCreation ()
specifier|public
name|void
name|specifiedSubgroupsAreRespectedForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|group1Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group2Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group3Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group4Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|subgroups
argument_list|(
name|group1Uuid
argument_list|,
name|group2Uuid
argument_list|)
operator|.
name|addSubgroup
argument_list|(
name|group3Uuid
argument_list|)
operator|.
name|addSubgroup
argument_list|(
name|group4Uuid
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|includes
argument_list|)
operator|.
name|comparingElementsUsing
argument_list|(
name|getGroupToUuidCorrespondence
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|group1Uuid
argument_list|,
name|group2Uuid
argument_list|,
name|group3Uuid
argument_list|,
name|group4Uuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|directlyAddingSubgroupsIsPossibleForGroupCreation ()
specifier|public
name|void
name|directlyAddingSubgroupsIsPossibleForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|group1Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group2Uuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|addSubgroup
argument_list|(
name|group1Uuid
argument_list|)
operator|.
name|addSubgroup
argument_list|(
name|group2Uuid
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|includes
argument_list|)
operator|.
name|comparingElementsUsing
argument_list|(
name|getGroupToUuidCorrespondence
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|group1Uuid
argument_list|,
name|group2Uuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestingNoSubgroupsIsPossibleForGroupCreation ()
specifier|public
name|void
name|requestingNoSubgroupsIsPossibleForGroupCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearSubgroups
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|GroupInfo
name|foundGroup
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|includes
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|existingGroupCanBeCheckedForExistence ()
specifier|public
name|void
name|existingGroupCanBeCheckedForExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|createGroupInServer
argument_list|(
name|createArbitraryGroupInput
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|exists
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notExistingGroupCanBeCheckedForExistence ()
specifier|public
name|void
name|notExistingGroupCanBeCheckedForExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|notExistingGroupUuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"not-existing-group"
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|notExistingGroupUuid
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|exists
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrievingNotExistingGroupFails ()
specifier|public
name|void
name|retrievingNotExistingGroupFails
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|notExistingGroupUuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"not-existing-group"
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|groupOperations
operator|.
name|group
argument_list|(
name|notExistingGroupUuid
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|groupNotCreatedByTestApiCanBeRetrieved ()
specifier|public
name|void
name|groupNotCreatedByTestApiCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInput
name|input
init|=
name|createArbitraryGroupInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|name
operator|=
literal|"unique group not created via test API"
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|createGroupInServer
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|TestGroup
name|foundGroup
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|groupUuid
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foundGroup
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"unique group not created via test API"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uuidOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|uuidOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|foundGroupUuid
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|groupUuid
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|foundGroupUuid
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|nameOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"ABC-789-this-name-must-be-unique"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|groupName
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groupName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"ABC-789-this-name-must-be-unique"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameKeyOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|nameKeyOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"ABC-789-this-name-must-be-unique"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|nameKey
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|groupName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|AccountGroup
operator|.
name|nameKey
argument_list|(
literal|"ABC-789-this-name-must-be-unique"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|descriptionOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|description
argument_list|(
literal|"This is a very detailed description of this group."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|description
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|description
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|description
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|"This is a very detailed description of this group."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyDescriptionOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|emptyDescriptionOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearDescription
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|description
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|description
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|description
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|ownerGroupUuidOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|originalOwnerGroupUuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"owner group"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|(
name|originalOwnerGroupUuid
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|ownerGroupUuid
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ownerGroupUuid
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|originalOwnerGroupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|visibilityOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|visibilityOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|visibleGroupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|visibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|invisibleGroupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|visibleToAll
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|TestGroup
name|visibleGroup
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|visibleGroupUuid
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|TestGroup
name|invisibleGroup
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|invisibleGroupUuid
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"visibility of visible group"
argument_list|)
operator|.
name|that
argument_list|(
name|visibleGroup
operator|.
name|visibleToAll
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"visibility of invisible group"
argument_list|)
operator|.
name|that
argument_list|(
name|invisibleGroup
operator|.
name|visibleToAll
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createdOnOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|createdOnOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|createArbitraryGroupInput
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
name|group
operator|.
name|id
argument_list|)
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|createdOn
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|createdOn
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|group
operator|.
name|createdOn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|membersOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|memberId1
init|=
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId2
init|=
name|Account
operator|.
name|id
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId3
init|=
name|Account
operator|.
name|id
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|members
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|,
name|memberId3
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|,
name|memberId3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyMembersOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|emptyMembersOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearMembers
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|subgroupsOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 2"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid3
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 3"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|subgroups
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|,
name|subgroupUuid3
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|,
name|subgroupUuid3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptySubgroupsOfExistingGroupCanBeRetrieved ()
specifier|public
name|void
name|emptySubgroupsOfExistingGroupCanBeRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearSubgroups
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateWithoutAnyParametersIsANoop ()
specifier|public
name|void
name|updateWithoutAnyParametersIsANoop
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|TestGroup
name|originalGroup
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestGroup
name|updatedGroup
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updatedGroup
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|originalGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateWritesToInternalGroupSystem ()
specifier|public
name|void
name|updateWritesToInternalGroupSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|description
argument_list|(
literal|"original description"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|description
argument_list|(
literal|"updated description"
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|String
name|currentDescription
init|=
name|getGroupFromServer
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|description
decl_stmt|;
name|assertThat
argument_list|(
name|currentDescription
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"updated description"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nameCanBeUpdated ()
specifier|public
name|void
name|nameCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|name
argument_list|(
literal|"original name"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|name
argument_list|(
literal|"updated name"
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|String
name|currentName
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|currentName
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"updated name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionCanBeUpdated ()
specifier|public
name|void
name|descriptionCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|description
argument_list|(
literal|"original description"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|description
argument_list|(
literal|"updated description"
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|currentDescription
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|description
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|currentDescription
argument_list|)
operator|.
name|hasValue
argument_list|(
literal|"updated description"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|descriptionCanBeCleared ()
specifier|public
name|void
name|descriptionCanBeCleared
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|description
argument_list|(
literal|"original description"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|clearDescription
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|currentDescription
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|description
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|currentDescription
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ownerGroupUuidCanBeUpdated ()
specifier|public
name|void
name|ownerGroupUuidCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|originalOwnerGroupUuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"original owner"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|(
name|originalOwnerGroupUuid
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|updatedOwnerGroupUuid
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"updated owner"
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|(
name|updatedOwnerGroupUuid
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|currentOwnerGroupUuid
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|ownerGroupUuid
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|currentOwnerGroupUuid
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|updatedOwnerGroupUuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|visibilityCanBeUpdated ()
specifier|public
name|void
name|visibilityCanBeUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|visibleToAll
argument_list|(
literal|true
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|visibleToAll
argument_list|(
literal|false
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|boolean
name|visibleToAll
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|visibleToAll
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|visibleToAll
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersCanBeAdded ()
specifier|public
name|void
name|membersCanBeAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearMembers
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId1
init|=
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId2
init|=
name|Account
operator|.
name|id
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|addMember
argument_list|(
name|memberId1
argument_list|)
operator|.
name|addMember
argument_list|(
name|memberId2
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersCanBeRemoved ()
specifier|public
name|void
name|membersCanBeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|memberId1
init|=
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId2
init|=
name|Account
operator|.
name|id
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|members
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|removeMember
argument_list|(
name|memberId2
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|memberId1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|memberAdditionAndRemovalCanBeMixed ()
specifier|public
name|void
name|memberAdditionAndRemovalCanBeMixed
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|memberId1
init|=
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId2
init|=
name|Account
operator|.
name|id
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|members
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId3
init|=
name|Account
operator|.
name|id
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|removeMember
argument_list|(
name|memberId1
argument_list|)
operator|.
name|addMember
argument_list|(
name|memberId3
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|memberId2
argument_list|,
name|memberId3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|membersCanBeCleared ()
specifier|public
name|void
name|membersCanBeCleared
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|memberId1
init|=
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId2
init|=
name|Account
operator|.
name|id
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|members
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|clearMembers
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|furtherMembersCanBeAddedAfterClearingAll ()
specifier|public
name|void
name|furtherMembersCanBeAddedAfterClearingAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|memberId1
init|=
name|Account
operator|.
name|id
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId2
init|=
name|Account
operator|.
name|id
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|members
argument_list|(
name|memberId1
argument_list|,
name|memberId2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|memberId3
init|=
name|Account
operator|.
name|id
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|clearMembers
argument_list|()
operator|.
name|addMember
argument_list|(
name|memberId3
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|memberId3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsCanBeAdded ()
specifier|public
name|void
name|subgroupsCanBeAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|clearSubgroups
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 2"
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|addSubgroup
argument_list|(
name|subgroupUuid1
argument_list|)
operator|.
name|addSubgroup
argument_list|(
name|subgroupUuid2
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsCanBeRemoved ()
specifier|public
name|void
name|subgroupsCanBeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 2"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|subgroups
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|removeSubgroup
argument_list|(
name|subgroupUuid2
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|subgroupUuid1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupAdditionAndRemovalCanBeMixed ()
specifier|public
name|void
name|subgroupAdditionAndRemovalCanBeMixed
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 2"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|subgroups
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid3
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 3"
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|removeSubgroup
argument_list|(
name|subgroupUuid1
argument_list|)
operator|.
name|addSubgroup
argument_list|(
name|subgroupUuid3
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|subgroupUuid2
argument_list|,
name|subgroupUuid3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subgroupsCanBeCleared ()
specifier|public
name|void
name|subgroupsCanBeCleared
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 2"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|subgroups
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|clearSubgroups
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|furtherSubgroupsCanBeAddedAfterClearingAll ()
specifier|public
name|void
name|furtherSubgroupsCanBeAddedAfterClearingAll
parameter_list|()
throws|throws
name|Exception
block|{
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid1
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 1"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid2
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 2"
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|groupOperations
operator|.
name|newGroup
argument_list|()
operator|.
name|subgroups
argument_list|(
name|subgroupUuid1
argument_list|,
name|subgroupUuid2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid3
init|=
name|AccountGroup
operator|.
name|uuid
argument_list|(
literal|"subgroup 3"
argument_list|)
decl_stmt|;
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|clearSubgroups
argument_list|()
operator|.
name|addSubgroup
argument_list|(
name|subgroupUuid3
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|groupOperations
operator|.
name|group
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|subgroups
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subgroups
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|subgroupUuid3
argument_list|)
expr_stmt|;
block|}
DECL|method|createArbitraryGroupInput ()
specifier|private
name|GroupInput
name|createArbitraryGroupInput
parameter_list|()
block|{
name|GroupInput
name|groupInput
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|groupInput
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"verifiers-"
operator|+
name|uniqueGroupNameIndex
operator|++
argument_list|)
expr_stmt|;
return|return
name|groupInput
return|;
block|}
DECL|method|getGroupFromServer (AccountGroup.UUID groupUuid)
specifier|private
name|GroupInfo
name|getGroupFromServer
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|id
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|()
return|;
block|}
DECL|method|createGroupInServer (GroupInput input)
specifier|private
name|AccountGroup
operator|.
name|UUID
name|createGroupInServer
parameter_list|(
name|GroupInput
name|input
parameter_list|)
throws|throws
name|RestApiException
block|{
name|GroupInfo
name|group
init|=
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|input
argument_list|)
operator|.
name|detail
argument_list|()
decl_stmt|;
return|return
name|AccountGroup
operator|.
name|uuid
argument_list|(
name|group
operator|.
name|id
argument_list|)
return|;
block|}
DECL|method|getAccountToIdCorrespondence ()
specifier|private
specifier|static
name|Correspondence
argument_list|<
name|AccountInfo
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|getAccountToIdCorrespondence
parameter_list|()
block|{
return|return
name|Correspondence
operator|.
name|from
argument_list|(
parameter_list|(
name|actualAccount
parameter_list|,
name|expectedId
parameter_list|)
lambda|->
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|actualAccount
argument_list|)
operator|.
name|map
argument_list|(
name|account
lambda|->
name|account
operator|.
name|_accountId
argument_list|)
operator|.
name|map
argument_list|(
name|Account
operator|::
name|id
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|accountId
argument_list|,
name|expectedId
argument_list|)
return|;
block|}
argument_list|,
literal|"has ID"
argument_list|)
return|;
block|}
DECL|method|getGroupToUuidCorrespondence ()
specifier|private
specifier|static
name|Correspondence
argument_list|<
name|GroupInfo
argument_list|,
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getGroupToUuidCorrespondence
parameter_list|()
block|{
return|return
name|Correspondence
operator|.
name|from
argument_list|(
parameter_list|(
name|actualGroup
parameter_list|,
name|expectedUuid
parameter_list|)
lambda|->
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|actualGroup
argument_list|)
operator|.
name|map
argument_list|(
name|group
lambda|->
name|group
operator|.
name|id
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroup
operator|::
name|uuid
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|groupUuid
argument_list|,
name|expectedUuid
argument_list|)
return|;
block|}
argument_list|,
literal|"has UUID"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

