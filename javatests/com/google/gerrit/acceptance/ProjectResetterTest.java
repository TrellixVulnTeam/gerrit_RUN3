begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersNameProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ProjectResetterTest
specifier|public
class|class
name|ProjectResetterTest
extends|extends
name|GerritBaseTests
block|{
DECL|field|repoManager
specifier|private
name|InMemoryRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|project
specifier|private
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|repoManager
operator|=
operator|new
name|InMemoryRepositoryManager
argument_list|()
expr_stmt|;
name|project
operator|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|repo
operator|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setTimeForTesting ()
specifier|public
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetTime ()
specifier|public
name|void
name|resetTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|resetAllRefs ()
specifier|public
name|void
name|resetAllRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|matchingRef
init|=
name|createRef
argument_list|(
literal|"refs/any/test"
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|matchingRef
argument_list|)
expr_stmt|;
block|}
comment|// The matching refs are reset to the old state.
name|assertRef
argument_list|(
name|matchingRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyResetMatchingRefs ()
specifier|public
name|void
name|onlyResetMatchingRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|matchingRef
init|=
name|createRef
argument_list|(
literal|"refs/match/test"
argument_list|)
decl_stmt|;
name|Ref
name|anotherMatchingRef
init|=
name|createRef
argument_list|(
literal|"refs/another-match/test"
argument_list|)
decl_stmt|;
name|Ref
name|nonMatchingRef
init|=
name|createRef
argument_list|(
literal|"refs/no-match/test"
argument_list|)
decl_stmt|;
name|Ref
name|updatedNonMatchingRef
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|,
literal|"refs/match/*"
argument_list|,
literal|"refs/another-match/*"
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|matchingRef
argument_list|)
expr_stmt|;
name|updateRef
argument_list|(
name|anotherMatchingRef
argument_list|)
expr_stmt|;
name|updatedNonMatchingRef
operator|=
name|updateRef
argument_list|(
name|nonMatchingRef
argument_list|)
expr_stmt|;
block|}
comment|// The matching refs are reset to the old state.
name|assertRef
argument_list|(
name|matchingRef
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
name|anotherMatchingRef
argument_list|)
expr_stmt|;
comment|// The non-matching ref is not reset, hence it still has the updated state.
name|assertRef
argument_list|(
name|updatedNonMatchingRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyDeleteNewlyCreatedMatchingRefs ()
specifier|public
name|void
name|onlyDeleteNewlyCreatedMatchingRefs
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|matchingRef
decl_stmt|;
name|Ref
name|anotherMatchingRef
decl_stmt|;
name|Ref
name|nonMatchingRef
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|,
literal|"refs/match/*"
argument_list|,
literal|"refs/another-match/*"
argument_list|)
argument_list|)
init|)
block|{
name|matchingRef
operator|=
name|createRef
argument_list|(
literal|"refs/match/test"
argument_list|)
expr_stmt|;
name|anotherMatchingRef
operator|=
name|createRef
argument_list|(
literal|"refs/another-match/test"
argument_list|)
expr_stmt|;
name|nonMatchingRef
operator|=
name|createRef
argument_list|(
literal|"refs/no-match/test"
argument_list|)
expr_stmt|;
block|}
comment|// The matching refs are deleted since they didn't exist before.
name|assertDeletedRef
argument_list|(
name|matchingRef
argument_list|)
expr_stmt|;
name|assertDeletedRef
argument_list|(
name|anotherMatchingRef
argument_list|)
expr_stmt|;
comment|// The non-matching ref is not deleted.
name|assertRef
argument_list|(
name|nonMatchingRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyResetMatchingRefsMultipleProjects ()
specifier|public
name|void
name|onlyResetMatchingRefsMultipleProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|project2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|Repository
name|repo2
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|project2
argument_list|)
decl_stmt|;
name|Ref
name|matchingRefProject1
init|=
name|createRef
argument_list|(
literal|"refs/foo/test"
argument_list|)
decl_stmt|;
name|Ref
name|nonMatchingRefProject1
init|=
name|createRef
argument_list|(
literal|"refs/bar/test"
argument_list|)
decl_stmt|;
name|Ref
name|matchingRefProject2
init|=
name|createRef
argument_list|(
name|repo2
argument_list|,
literal|"refs/bar/test"
argument_list|)
decl_stmt|;
name|Ref
name|nonMatchingRefProject2
init|=
name|createRef
argument_list|(
name|repo2
argument_list|,
literal|"refs/foo/test"
argument_list|)
decl_stmt|;
name|Ref
name|updatedNonMatchingRefProject1
decl_stmt|;
name|Ref
name|updatedNonMatchingRefProject2
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|,
literal|"refs/foo/*"
argument_list|)
operator|.
name|reset
argument_list|(
name|project2
argument_list|,
literal|"refs/bar/*"
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|matchingRefProject1
argument_list|)
expr_stmt|;
name|updatedNonMatchingRefProject1
operator|=
name|updateRef
argument_list|(
name|nonMatchingRefProject1
argument_list|)
expr_stmt|;
name|updateRef
argument_list|(
name|repo2
argument_list|,
name|matchingRefProject2
argument_list|)
expr_stmt|;
name|updatedNonMatchingRefProject2
operator|=
name|updateRef
argument_list|(
name|repo2
argument_list|,
name|nonMatchingRefProject2
argument_list|)
expr_stmt|;
block|}
comment|// The matching refs are reset to the old state.
name|assertRef
argument_list|(
name|matchingRefProject1
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
name|repo2
argument_list|,
name|matchingRefProject2
argument_list|)
expr_stmt|;
comment|// The non-matching refs are not reset, hence they still has the updated states.
name|assertRef
argument_list|(
name|updatedNonMatchingRefProject1
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
name|repo2
argument_list|,
name|updatedNonMatchingRefProject2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyDeleteNewlyCreatedMatchingRefsMultipleProjects ()
specifier|public
name|void
name|onlyDeleteNewlyCreatedMatchingRefsMultipleProjects
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|project2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|Repository
name|repo2
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|project2
argument_list|)
decl_stmt|;
name|Ref
name|matchingRefProject1
decl_stmt|;
name|Ref
name|nonMatchingRefProject1
decl_stmt|;
name|Ref
name|matchingRefProject2
decl_stmt|;
name|Ref
name|nonMatchingRefProject2
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|,
literal|"refs/foo/*"
argument_list|)
operator|.
name|reset
argument_list|(
name|project2
argument_list|,
literal|"refs/bar/*"
argument_list|)
argument_list|)
init|)
block|{
name|matchingRefProject1
operator|=
name|createRef
argument_list|(
literal|"refs/foo/test"
argument_list|)
expr_stmt|;
name|nonMatchingRefProject1
operator|=
name|createRef
argument_list|(
literal|"refs/bar/test"
argument_list|)
expr_stmt|;
name|matchingRefProject2
operator|=
name|createRef
argument_list|(
name|repo2
argument_list|,
literal|"refs/bar/test"
argument_list|)
expr_stmt|;
name|nonMatchingRefProject2
operator|=
name|createRef
argument_list|(
name|repo2
argument_list|,
literal|"refs/foo/test"
argument_list|)
expr_stmt|;
block|}
comment|// The matching refs are deleted since they didn't exist before.
name|assertDeletedRef
argument_list|(
name|matchingRefProject1
argument_list|)
expr_stmt|;
name|assertDeletedRef
argument_list|(
name|repo2
argument_list|,
name|matchingRefProject2
argument_list|)
expr_stmt|;
comment|// The non-matching ref is not deleted.
name|assertRef
argument_list|(
name|nonMatchingRefProject1
argument_list|)
expr_stmt|;
name|assertRef
argument_list|(
name|repo2
argument_list|,
name|nonMatchingRefProject2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|onlyDeleteNewlyCreatedWithOverlappingRefPatterns ()
specifier|public
name|void
name|onlyDeleteNewlyCreatedWithOverlappingRefPatterns
parameter_list|()
throws|throws
name|Exception
block|{
name|Ref
name|matchingRef
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|,
literal|"refs/match/*"
argument_list|,
literal|"refs/match/test"
argument_list|)
argument_list|)
init|)
block|{
comment|// This ref matches 2 ref pattern, ProjectResetter should try to delete it only once.
name|matchingRef
operator|=
name|createRef
argument_list|(
literal|"refs/match/test"
argument_list|)
expr_stmt|;
block|}
comment|// The matching ref is deleted since it didn't exist before.
name|assertDeletedRef
argument_list|(
name|matchingRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectEvictionIfRefsMetaConfigIsReset ()
specifier|public
name|void
name|projectEvictionIfRefsMetaConfigIsReset
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|project2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|Repository
name|repo2
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|project2
argument_list|)
decl_stmt|;
name|Ref
name|metaConfig
init|=
name|createRef
argument_list|(
name|repo2
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|ProjectCache
name|projectCache
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|ProjectCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|project2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|projectCache
argument_list|)
expr_stmt|;
name|Ref
name|nonMetaConfig
init|=
name|createRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|projectCache
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|project2
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|nonMetaConfig
argument_list|)
expr_stmt|;
name|updateRef
argument_list|(
name|repo2
argument_list|,
name|metaConfig
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|projectCache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectEvictionIfRefsMetaConfigIsDeleted ()
specifier|public
name|void
name|projectEvictionIfRefsMetaConfigIsDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|project2
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|Repository
name|repo2
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|project2
argument_list|)
decl_stmt|;
name|ProjectCache
name|projectCache
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|ProjectCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|project2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|projectCache
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|projectCache
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|project2
argument_list|)
argument_list|)
init|)
block|{
name|createRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createRef
argument_list|(
name|repo2
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|projectCache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accountEvictionIfUserBranchIsReset ()
specifier|public
name|void
name|accountEvictionIfUserBranchIsReset
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|allUsers
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|Ref
name|userBranch
init|=
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
name|AccountCache
name|accountCache
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountCache
argument_list|)
expr_stmt|;
name|AccountIndexer
name|accountIndexer
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountIndexer
argument_list|)
expr_stmt|;
comment|// Non-user branch because it's not in All-Users.
name|Ref
name|nonUserBranch
init|=
name|createRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
literal|null
argument_list|,
name|accountCache
argument_list|,
name|accountIndexer
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|nonUserBranch
argument_list|)
expr_stmt|;
name|updateRef
argument_list|(
name|allUsersRepo
argument_list|,
name|userBranch
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|accountCache
argument_list|,
name|accountIndexer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accountEvictionIfUserBranchIsDeleted ()
specifier|public
name|void
name|accountEvictionIfUserBranchIsDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|allUsers
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|AccountCache
name|accountCache
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountCache
argument_list|)
expr_stmt|;
name|AccountIndexer
name|accountIndexer
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountIndexer
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
literal|null
argument_list|,
name|accountCache
argument_list|,
name|accountIndexer
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|)
argument_list|)
init|)
block|{
comment|// Non-user branch because it's not in All-Users.
name|createRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|accountCache
argument_list|,
name|accountIndexer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accountEvictionIfExternalIdsBranchIsReset ()
specifier|public
name|void
name|accountEvictionIfExternalIdsBranchIsReset
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|allUsers
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|Ref
name|externalIds
init|=
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|accountId2
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|AccountCache
name|accountCache
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountCache
argument_list|)
expr_stmt|;
name|AccountIndexer
name|accountIndexer
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountIndexer
argument_list|)
expr_stmt|;
comment|// Non-user branch because it's not in All-Users.
name|Ref
name|nonUserBranch
init|=
name|createRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
literal|null
argument_list|,
name|accountCache
argument_list|,
name|accountIndexer
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|nonUserBranch
argument_list|)
expr_stmt|;
name|updateRef
argument_list|(
name|allUsersRepo
argument_list|,
name|externalIds
argument_list|)
expr_stmt|;
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|accountCache
argument_list|,
name|accountIndexer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accountEvictionIfExternalIdsBranchIsDeleted ()
specifier|public
name|void
name|accountEvictionIfExternalIdsBranchIsDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|allUsers
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|accountId2
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|AccountCache
name|accountCache
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountCache
argument_list|)
expr_stmt|;
name|AccountIndexer
name|accountIndexer
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountIndexer
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountIndexer
argument_list|)
expr_stmt|;
comment|// Non-user branch because it's not in All-Users.
name|Ref
name|nonUserBranch
init|=
name|createRef
argument_list|(
name|RefNames
operator|.
name|refsUsers
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
literal|null
argument_list|,
name|accountCache
argument_list|,
name|accountIndexer
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|)
argument_list|)
init|)
block|{
name|updateRef
argument_list|(
name|nonUserBranch
argument_list|)
expr_stmt|;
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
expr_stmt|;
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|accountCache
argument_list|,
name|accountIndexer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accountEvictionFromAccountCreatorIfUserBranchIsDeleted ()
specifier|public
name|void
name|accountEvictionFromAccountCreatorIfUserBranchIsDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|allUsers
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|createRepository
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|AccountCreator
name|accountCreator
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AccountCreator
operator|.
name|class
argument_list|)
decl_stmt|;
name|accountCreator
operator|.
name|evict
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|accountCreator
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectResetter
name|resetProject
init|=
name|builder
argument_list|(
name|accountCreator
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
operator|.
name|reset
argument_list|(
name|project
argument_list|)
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|)
argument_list|)
init|)
block|{
name|createRef
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|accountCreator
argument_list|)
expr_stmt|;
block|}
DECL|method|createRef (String ref)
specifier|private
name|Ref
name|createRef
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createRef
argument_list|(
name|repo
argument_list|,
name|ref
argument_list|)
return|;
block|}
DECL|method|createRef (Repository repo, String ref)
specifier|private
name|Ref
name|createRef
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|emptyCommit
init|=
name|createCommit
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|emptyCommit
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|update
argument_list|(
name|rw
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
return|return
name|repo
operator|.
name|exactRef
argument_list|(
name|ref
argument_list|)
return|;
block|}
block|}
DECL|method|updateRef (Ref ref)
specifier|private
name|Ref
name|updateRef
parameter_list|(
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|updateRef
argument_list|(
name|repo
argument_list|,
name|ref
argument_list|)
return|;
block|}
DECL|method|updateRef (Repository repo, Ref ref)
specifier|private
name|Ref
name|updateRef
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|emptyCommit
init|=
name|createCommit
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|emptyCommit
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateRef
operator|.
name|update
argument_list|(
name|rw
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|Ref
name|updatedRef
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|updatedRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updatedRef
return|;
block|}
block|}
DECL|method|assertRef (Ref ref)
specifier|private
name|void
name|assertRef
parameter_list|(
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|assertRef
argument_list|(
name|repo
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRef (Repository repo, Ref ref)
specifier|private
name|void
name|assertRef
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeletedRef (Ref ref)
specifier|private
name|void
name|assertDeletedRef
parameter_list|(
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|assertDeletedRef
argument_list|(
name|repo
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeletedRef (Repository repo, Ref ref)
specifier|private
name|void
name|assertDeletedRef
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Ref
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|createCommit (Repository repo)
specifier|private
name|ObjectId
name|createCommit
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|PersonIdent
name|ident
init|=
operator|new
name|PersonIdent
argument_list|(
operator|new
name|PersonIdent
argument_list|(
literal|"Foo Bar"
argument_list|,
literal|"foo.bar@baz.com"
argument_list|)
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setMessage
argument_list|(
literal|"Test commit"
argument_list|)
expr_stmt|;
name|ObjectId
name|commit
init|=
name|oi
operator|.
name|insert
argument_list|(
name|cb
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|commit
return|;
block|}
block|}
DECL|method|builder ()
specifier|private
name|ProjectResetter
operator|.
name|Builder
name|builder
parameter_list|()
block|{
return|return
name|builder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|builder ( @ullable AccountCreator accountCreator, @Nullable AccountCache accountCache, @Nullable AccountIndexer accountIndexer, @Nullable ProjectCache projectCache)
specifier|private
name|ProjectResetter
operator|.
name|Builder
name|builder
parameter_list|(
annotation|@
name|Nullable
name|AccountCreator
name|accountCreator
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|Nullable
name|AccountIndexer
name|accountIndexer
parameter_list|,
annotation|@
name|Nullable
name|ProjectCache
name|projectCache
parameter_list|)
block|{
return|return
operator|new
name|ProjectResetter
operator|.
name|Builder
argument_list|(
name|repoManager
argument_list|,
operator|new
name|AllUsersName
argument_list|(
name|AllUsersNameProvider
operator|.
name|DEFAULT
argument_list|)
argument_list|,
name|accountCreator
argument_list|,
name|accountCache
argument_list|,
name|accountIndexer
argument_list|,
name|projectCache
argument_list|)
return|;
block|}
block|}
end_class

end_unit

