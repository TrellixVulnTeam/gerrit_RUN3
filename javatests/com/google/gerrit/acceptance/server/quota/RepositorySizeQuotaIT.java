begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.quota
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|quota
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaGroupDefinitions
operator|.
name|REPOSITORY_SIZE_GROUP
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaResponse
operator|.
name|ok
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|resetToStrict
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|UseLocalDisk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|FactoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|TooLargeObjectInPackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|UseLocalDisk
DECL|class|RepositorySizeQuotaIT
specifier|public
class|class
name|RepositorySizeQuotaIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|quotaBackendWithResource
specifier|private
specifier|static
specifier|final
name|QuotaBackend
operator|.
name|WithResource
name|quotaBackendWithResource
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|QuotaBackend
operator|.
name|WithResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|quotaBackendWithUser
specifier|private
specifier|static
specifier|final
name|QuotaBackend
operator|.
name|WithUser
name|quotaBackendWithUser
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|QuotaBackend
operator|.
name|WithUser
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createModule ()
specifier|public
name|Module
name|createModule
parameter_list|()
block|{
return|return
operator|new
name|FactoryModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|QuotaBackend
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|QuotaBackend
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WithUser
name|currentUser
parameter_list|()
block|{
return|return
name|quotaBackendWithUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|WithUser
name|user
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|quotaBackendWithUser
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|resetToStrict
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
name|resetToStrict
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithAvailableTokens ()
specifier|public
name|void
name|pushWithAvailableTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|expect
argument_list|(
name|quotaBackendWithResource
operator|.
name|availableTokens
argument_list|(
name|REPOSITORY_SIZE_GROUP
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|singletonAggregation
argument_list|(
name|ok
argument_list|(
literal|276L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|quotaBackendWithResource
operator|.
name|requestTokens
argument_list|(
name|eq
argument_list|(
name|REPOSITORY_SIZE_GROUP
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|singletonAggregation
argument_list|(
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|quotaBackendWithUser
operator|.
name|project
argument_list|(
name|project
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|quotaBackendWithResource
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
name|pushCommit
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithNotSufficientTokens ()
specifier|public
name|void
name|pushWithNotSufficientTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|availableTokens
init|=
literal|1L
decl_stmt|;
name|expect
argument_list|(
name|quotaBackendWithResource
operator|.
name|availableTokens
argument_list|(
name|REPOSITORY_SIZE_GROUP
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|singletonAggregation
argument_list|(
name|ok
argument_list|(
name|availableTokens
argument_list|)
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|quotaBackendWithUser
operator|.
name|project
argument_list|(
name|project
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|quotaBackendWithResource
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
try|try
block|{
name|pushCommit
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"expected TooLargeObjectInPackException"
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TooLargeObjectInPackException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Object too large"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|)
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Max object size limit is %d bytes."
argument_list|,
name|availableTokens
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|errorGettingAvailableTokens ()
specifier|public
name|void
name|errorGettingAvailableTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|msg
init|=
literal|"quota error"
decl_stmt|;
name|expect
argument_list|(
name|quotaBackendWithResource
operator|.
name|availableTokens
argument_list|(
name|REPOSITORY_SIZE_GROUP
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|error
argument_list|(
name|msg
argument_list|)
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|quotaBackendWithUser
operator|.
name|project
argument_list|(
name|project
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|quotaBackendWithResource
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
try|try
block|{
name|pushCommit
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"expected TransportException"
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
comment|// TransportException has not much info about the cause
block|}
name|verify
argument_list|(
name|quotaBackendWithUser
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|quotaBackendWithResource
argument_list|)
expr_stmt|;
block|}
DECL|method|pushCommit ()
specifier|private
name|void
name|pushCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|createCommitAndPush
argument_list|(
name|testRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"test 01"
argument_list|,
literal|"file.test"
argument_list|,
literal|"some content"
argument_list|)
expr_stmt|;
block|}
DECL|method|singletonAggregation (QuotaResponse response)
specifier|private
specifier|static
name|QuotaResponse
operator|.
name|Aggregated
name|singletonAggregation
parameter_list|(
name|QuotaResponse
name|response
parameter_list|)
block|{
return|return
name|QuotaResponse
operator|.
name|Aggregated
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|response
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

