begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.quota
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|quota
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|clearInvocations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|Exports
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|FactoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaEnforcer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DefaultQuotaBackendIT
specifier|public
class|class
name|DefaultQuotaBackendIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|quotaEnforcer
specifier|private
specifier|static
specifier|final
name|QuotaEnforcer
name|quotaEnforcer
init|=
name|mock
argument_list|(
name|QuotaEnforcer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|identifiedAdmin
specifier|private
name|IdentifiedUser
name|identifiedAdmin
decl_stmt|;
DECL|field|quotaBackend
annotation|@
name|Inject
specifier|private
name|QuotaBackend
name|quotaBackend
decl_stmt|;
annotation|@
name|Override
DECL|method|createModule ()
specifier|public
name|Module
name|createModule
parameter_list|()
block|{
return|return
operator|new
name|FactoryModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|QuotaEnforcer
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|Exports
operator|.
name|named
argument_list|(
literal|"TestQuotaEnforcer"
argument_list|)
argument_list|)
operator|.
name|toProvider
argument_list|(
parameter_list|()
lambda|->
name|quotaEnforcer
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|identifiedAdmin
operator|=
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|clearInvocations
argument_list|(
name|quotaEnforcer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokenForUser ()
specifier|public
name|void
name|requestTokenForUser
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|requestToken
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokenForUserAndAccount ()
specifier|public
name|void
name|requestTokenForUserAndAccount
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|account
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|account
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|requestToken
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokenForUserAndProject ()
specifier|public
name|void
name|requestTokenForUserAndProject
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|requestToken
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokenForUserAndChange ()
specifier|public
name|void
name|requestTokenForUserAndChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|retrieveChangeId
argument_list|()
decl_stmt|;
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|change
argument_list|(
name|changeId
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|change
argument_list|(
name|changeId
argument_list|,
name|project
argument_list|)
operator|.
name|requestToken
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokens ()
specifier|public
name|void
name|requestTokens
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|123
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
literal|123
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dryRun ()
specifier|public
name|void
name|dryRun
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|dryRun
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|123
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|dryRun
argument_list|(
literal|"testGroup"
argument_list|,
literal|123
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|ok
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|availableTokensForUserAndAccount ()
specifier|public
name|void
name|availableTokensForUserAndAccount
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|account
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaResponse
name|r
init|=
name|QuotaResponse
operator|.
name|ok
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|account
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|availableTokensForUserAndProject ()
specifier|public
name|void
name|availableTokensForUserAndProject
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaResponse
name|r
init|=
name|QuotaResponse
operator|.
name|ok
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|availableTokensForUserAndChange ()
specifier|public
name|void
name|availableTokensForUserAndChange
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|retrieveChangeId
argument_list|()
decl_stmt|;
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|change
argument_list|(
name|changeId
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaResponse
name|r
init|=
name|QuotaResponse
operator|.
name|ok
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|change
argument_list|(
name|changeId
argument_list|,
name|project
argument_list|)
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|availableTokens ()
specifier|public
name|void
name|availableTokens
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaResponse
name|r
init|=
name|QuotaResponse
operator|.
name|ok
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokenError ()
specifier|public
name|void
name|requestTokenError
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|error
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|QuotaResponse
operator|.
name|Aggregated
name|result
init|=
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|requestToken
argument_list|(
literal|"testGroup"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|error
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QuotaException
name|thrown
init|=
name|assertThrows
argument_list|(
name|QuotaException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|result
operator|.
name|throwOnError
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|availableTokensError ()
specifier|public
name|void
name|availableTokensError
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|QuotaResponse
operator|.
name|error
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|QuotaResponse
operator|.
name|Aggregated
name|result
init|=
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singletonAggregation
argument_list|(
name|QuotaResponse
operator|.
name|error
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QuotaException
name|thrown
init|=
name|assertThrows
argument_list|(
name|QuotaException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|result
operator|.
name|throwOnError
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|requestTokenPluginThrowsAndRethrows ()
specifier|public
name|void
name|requestTokenPluginThrowsAndRethrows
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|requestTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|NullPointerException
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|requestToken
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|availableTokensPluginThrowsAndRethrows ()
specifier|public
name|void
name|availableTokensPluginThrowsAndRethrows
parameter_list|()
block|{
name|QuotaRequestContext
name|ctx
init|=
name|QuotaRequestContext
operator|.
name|builder
argument_list|()
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|quotaEnforcer
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|,
name|ctx
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|NullPointerException
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|quotaBackend
operator|.
name|user
argument_list|(
name|identifiedAdmin
argument_list|)
operator|.
name|availableTokens
argument_list|(
literal|"testGroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|retrieveChangeId ()
specifier|private
name|Change
operator|.
name|Id
name|retrieveChangeId
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use REST API so that repository size quota doesn't have to be stubbed
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|ChangeInput
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|Change
operator|.
name|id
argument_list|(
name|changeInfo
operator|.
name|_number
argument_list|)
return|;
block|}
DECL|method|singletonAggregation (QuotaResponse response)
specifier|private
specifier|static
name|QuotaResponse
operator|.
name|Aggregated
name|singletonAggregation
parameter_list|(
name|QuotaResponse
name|response
parameter_list|)
block|{
return|return
name|QuotaResponse
operator|.
name|Aggregated
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|response
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

