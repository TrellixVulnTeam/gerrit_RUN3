begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.server.rules
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|server
operator|.
name|rules
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRequirement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rules
operator|.
name|IgnoreSelfApprovalRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|IgnoreSelfApprovalRuleIT
specifier|public
class|class
name|IgnoreSelfApprovalRuleIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|rule
annotation|@
name|Inject
specifier|private
name|IgnoreSelfApprovalRule
name|rule
decl_stmt|;
annotation|@
name|Test
DECL|method|blocksWhenUploaderIsOnlyApprover ()
specifier|public
name|void
name|blocksWhenUploaderIsOnlyApprover
parameter_list|()
throws|throws
name|Exception
block|{
name|enableRule
argument_list|(
literal|"Code-Review"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
init|=
name|rule
operator|.
name|evaluate
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|SubmitRuleOptions
operator|.
name|defaults
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitRecords
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SubmitRecord
name|result
init|=
name|submitRecords
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|SubmitRecord
operator|.
name|Status
operator|.
name|NOT_READY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|labels
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|requirements
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|SubmitRequirement
operator|.
name|builder
argument_list|()
operator|.
name|setFallbackText
argument_list|(
literal|"Approval from non-uploader required"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"non_uploader_approval"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allowsSubmissionWhenChangeHasNonUploaderApproval ()
specifier|public
name|void
name|allowsSubmissionWhenChangeHasNonUploaderApproval
parameter_list|()
throws|throws
name|Exception
block|{
name|enableRule
argument_list|(
literal|"Code-Review"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create change as user
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|userTestRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|userTestRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
comment|// Approve as admin
name|approve
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
init|=
name|rule
operator|.
name|evaluate
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|SubmitRuleOptions
operator|.
name|defaults
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitRecords
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doesNothingByDefault ()
specifier|public
name|void
name|doesNothingByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|enableRule
argument_list|(
literal|"Code-Review"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
init|=
name|rule
operator|.
name|evaluate
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|SubmitRuleOptions
operator|.
name|defaults
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|submitRecords
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|enableRule (String labelName, boolean newState)
specifier|private
name|void
name|enableRule
parameter_list|(
name|String
name|labelName
parameter_list|,
name|boolean
name|newState
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|localLabelSections
init|=
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
decl_stmt|;
if|if
condition|(
name|localLabelSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|localLabelSections
operator|.
name|putAll
argument_list|(
name|projectCache
operator|.
name|getAllProjects
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|localLabelSections
operator|.
name|get
argument_list|(
name|labelName
argument_list|)
operator|.
name|setIgnoreSelfApproval
argument_list|(
name|newState
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

