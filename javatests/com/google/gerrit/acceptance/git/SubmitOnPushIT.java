begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|assertPushOk
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|EmailHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeMergedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|GitAPIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|InvalidRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|SubmitOnPushIT
specifier|public
class|class
name|SubmitOnPushIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|approvalsUtil
annotation|@
name|Inject
specifier|private
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
annotation|@
name|Test
DECL|method|submitOnPush ()
specifier|public
name|void
name|submitOnPush
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%submit"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertSubmitApproval
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushToRefsMetaConfig ()
specifier|public
name|void
name|submitOnPushToRefsMetaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/meta/config"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/meta/config:refs/meta/config"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/refs/meta/config%submit"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertSubmitApproval
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushMergeConflict ()
specifier|public
name|void
name|submitOnPushMergeConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|objectId
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|push
argument_list|(
literal|"refs/heads/master"
argument_list|,
literal|"one change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
argument_list|(
literal|"refs/for/master%submit"
argument_list|,
literal|"other change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"Change "
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": change could not be merged due to a path conflict."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushSuccessfulMerge ()
specifier|public
name|void
name|submitOnPushSuccessfulMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|ObjectId
name|objectId
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|push
argument_list|(
name|master
argument_list|,
literal|"one change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
argument_list|(
literal|"refs/for/master%submit"
argument_list|,
literal|"other change"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertMergeCommit
argument_list|(
name|master
argument_list|,
literal|"other change"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushNewPatchSet ()
specifier|public
name|void
name|submitOnPushNewPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
argument_list|(
literal|"refs/for/master"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|)
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|r
operator|=
name|push
argument_list|(
literal|"refs/for/master%submit"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertSubmitApproval
argument_list|(
name|r
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushNotAllowed_Error ()
specifier|public
name|void
name|submitOnPushNotAllowed_Error
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%submit"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"not permitted: update by submit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushNewPatchSetNotAllowed_Error ()
specifier|public
name|void
name|submitOnPushNewPatchSetNotAllowed_Error
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
argument_list|(
literal|"refs/for/master"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
argument_list|(
literal|"refs/for/master%submit"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"other content"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"not permitted: update by submit "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submitOnPushToNonExistingBranch_Error ()
specifier|public
name|void
name|submitOnPushToNonExistingBranch_Error
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchName
init|=
literal|"non-existing"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/"
operator|+
name|branchName
operator|+
literal|"%submit"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"branch "
operator|+
name|branchName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeOnPushToBranch ()
specifier|public
name|void
name|mergeOnPushToBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
argument_list|(
literal|"refs/for/master"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|":refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKey
argument_list|(
name|Change
operator|.
name|key
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|c
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertSubmitApproval
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSet
argument_list|(
name|psId
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|correctNewRevOnMergeByPushToBranch ()
specifier|public
name|void
name|correctNewRevOnMergeByPushToBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|push
argument_list|(
literal|"refs/for/master"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"one.txt"
argument_list|,
literal|"One"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
argument_list|(
literal|"refs/for/master"
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"two.txt"
argument_list|,
literal|"Two"
argument_list|)
decl_stmt|;
name|startEventRecorder
argument_list|()
expr_stmt|;
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|":refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ChangeMergedEvent
argument_list|>
name|changeMergedEvents
init|=
name|eventRecorder
operator|.
name|getChangeMergedEvents
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changeMergedEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|newRev
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeMergedEvents
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|newRev
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|r
operator|.
name|getPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeOnPushToBranchWithChangeMergedInOther ()
specifier|public
name|void
name|mergeOnPushToBranchWithChangeMergedInOther
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|String
name|other
init|=
literal|"refs/heads/other"
decl_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
name|master
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|)
operator|.
name|ref
argument_list|(
name|other
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
name|other
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|RevCommit
name|masterRev
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|pushCommitTo
argument_list|(
name|masterRev
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|commit
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|pushCommitTo
argument_list|(
name|commit
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKey
argument_list|(
name|Change
operator|.
name|key
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|RemoteRefUpdate
operator|.
name|Status
name|status
init|=
name|pushCommitTo
argument_list|(
name|commit
argument_list|,
literal|"refs/for/other"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
name|pushCommitTo
argument_list|(
name|commit
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
name|other
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeData
name|c
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKey
argument_list|(
name|Change
operator|.
name|key
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|branch
argument_list|()
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|pushCommitTo (RevCommit commit, String ref)
specifier|private
name|RemoteRefUpdate
operator|.
name|Status
name|pushCommitTo
parameter_list|(
name|RevCommit
name|commit
parameter_list|,
name|String
name|ref
parameter_list|)
throws|throws
name|GitAPIException
throws|,
name|InvalidRemoteException
throws|,
name|TransportException
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|":"
operator|+
name|ref
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|)
operator|.
name|getRemoteUpdate
argument_list|(
name|ref
argument_list|)
operator|.
name|getStatus
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|mergeOnPushToBranchWithNewPatchset ()
specifier|public
name|void
name|mergeOnPushToBranchWithNewPatchset
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|c1
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeData
name|cd
init|=
name|r
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|RevCommit
name|c2
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertCommit
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|assertSubmitApproval
argument_list|(
name|psId2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSet
argument_list|(
name|psId1
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSet
argument_list|(
name|psId2
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeOnPushToBranchWithOldPatchset ()
specifier|public
name|void
name|mergeOnPushToBranchWithOldPatchset
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|c1
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|r
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId2
operator|.
name|changeId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
operator|.
name|changeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|psId2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|cd
operator|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|psId1
operator|.
name|changeId
argument_list|()
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|psId1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|PatchSet
operator|::
name|id
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|psId1
argument_list|,
name|psId2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeMultipleOnPushToBranchWithNewPatchset ()
specifier|public
name|void
name|mergeMultipleOnPushToBranchWithNewPatchset
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create 2 changes.
name|ObjectId
name|initialHead
init|=
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|(
literal|"Change 1"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|(
literal|"Change 2"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|c1_1
init|=
name|r1
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_1
init|=
name|r2
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1_1
init|=
name|r1
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2_1
init|=
name|r2
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c1_1
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c2_1
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
comment|// Amend both changes.
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|RevCommit
name|c1_2
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|c1_1
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"v2"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2_2
init|=
name|testRepo
operator|.
name|cherryPick
argument_list|(
name|c2_1
argument_list|)
decl_stmt|;
comment|// Push directly to branch.
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ChangeData
name|cd2
init|=
name|r2
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cd2
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId2_2
init|=
name|cd2
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId2_2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd2
operator|.
name|patchSet
argument_list|(
name|psId2_1
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd2
operator|.
name|patchSet
argument_list|(
name|psId2_2
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2_2
argument_list|)
expr_stmt|;
name|ChangeData
name|cd1
init|=
name|r1
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cd1
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId1_2
init|=
name|cd1
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|psId1_2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd1
operator|.
name|patchSet
argument_list|(
name|psId1_1
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c1_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd1
operator|.
name|patchSet
argument_list|(
name|psId1_2
argument_list|)
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c1_2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForSubmitWithNotifyOption ()
specifier|public
name|void
name|pushForSubmitWithNotifyOption
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestAccount
name|user
init|=
name|accountCreator
operator|.
name|user
argument_list|()
decl_stmt|;
name|String
name|pushSpec
init|=
literal|"refs/for/master%reviewer="
operator|+
name|user
operator|.
name|email
argument_list|()
decl_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|OWNER
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThatEmailsForChangeCreationAndSubmitWereSent
argument_list|(
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThatEmailsForChangeCreationAndSubmitWereSent
argument_list|(
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit"
argument_list|)
expr_stmt|;
comment|// default is notify = ALL
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThatEmailsForChangeCreationAndSubmitWereSent
argument_list|(
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForSubmitWithNotifyingUsersExplicitly ()
specifier|public
name|void
name|pushForSubmitWithNotifyingUsersExplicitly
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestAccount
name|user
init|=
name|accountCreator
operator|.
name|user
argument_list|()
decl_stmt|;
name|String
name|pushSpec
init|=
literal|"refs/for/master%reviewer="
operator|+
name|user
operator|.
name|email
argument_list|()
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
argument_list|()
decl_stmt|;
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-to="
operator|+
name|user2
operator|.
name|email
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThatEmailsForChangeCreationAndSubmitWereSent
argument_list|(
name|user2
argument_list|,
name|RecipientType
operator|.
name|TO
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-cc="
operator|+
name|user2
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThatEmailsForChangeCreationAndSubmitWereSent
argument_list|(
name|user2
argument_list|,
name|RecipientType
operator|.
name|CC
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",submit,notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-bcc="
operator|+
name|user2
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThatEmailsForChangeCreationAndSubmitWereSent
argument_list|(
name|user2
argument_list|,
name|RecipientType
operator|.
name|BCC
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubmitter (PatchSet.Id patchSetId)
specifier|private
name|PatchSetApproval
name|getSubmitter
parameter_list|(
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|project
argument_list|,
name|patchSetId
operator|.
name|changeId
argument_list|()
argument_list|)
operator|.
name|load
argument_list|()
decl_stmt|;
return|return
name|approvalsUtil
operator|.
name|getSubmitter
argument_list|(
name|notes
argument_list|,
name|patchSetId
argument_list|)
return|;
block|}
DECL|method|assertSubmitApproval (PatchSet.Id patchSetId)
specifier|private
name|void
name|assertSubmitApproval
parameter_list|(
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
throws|throws
name|Exception
block|{
name|PatchSetApproval
name|a
init|=
name|getSubmitter
argument_list|(
name|patchSetId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|isLegacySubmit
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|accountId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCommit (Project.NameKey project, String branch)
specifier|private
name|void
name|assertCommit
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|r
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|r
argument_list|)
init|)
block|{
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|exactRef
argument_list|(
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMergeCommit (String branch, String subject)
specifier|private
name|void
name|assertMergeCommit
parameter_list|(
name|String
name|branch
parameter_list|,
name|String
name|subject
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|r
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|r
argument_list|)
init|)
block|{
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|exactRef
argument_list|(
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getParentCount
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Merge \""
operator|+
name|subject
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|push (String ref, String subject, String fileName, String content)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|push
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
return|;
block|}
DECL|method|push ( String ref, String subject, String fileName, String content, String changeId)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|push
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
return|;
block|}
comment|/**    * Makes sure that two emails are sent: one for the change creation, and one for the submit.    *    * @param expected The account expected to receive message.    * @param expectedRecipientType The notification's type: To/Cc/Bcc. if {@code null} then it is not    *     needed to check the recipientType. It is meant for -notify without other flags like    *     notify-cc, notify-to, and notify-bcc. With the -notify flag, the message can sometimes be    *     sent as "To" and sometimes can be sent as "Cc".    */
DECL|method|assertThatEmailsForChangeCreationAndSubmitWereSent ( TestAccount expected, @Nullable RecipientType expectedRecipientType)
specifier|private
name|void
name|assertThatEmailsForChangeCreationAndSubmitWereSent
parameter_list|(
name|TestAccount
name|expected
parameter_list|,
annotation|@
name|Nullable
name|RecipientType
name|expectedRecipientType
parameter_list|)
block|{
name|String
name|expectedEmail
init|=
name|expected
operator|.
name|email
argument_list|()
decl_stmt|;
name|String
name|expectedFullName
init|=
name|expected
operator|.
name|fullName
argument_list|()
decl_stmt|;
name|Address
name|expectedAddress
init|=
operator|new
name|Address
argument_list|(
name|expectedFullName
argument_list|,
name|expectedEmail
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|body
argument_list|()
operator|.
name|contains
argument_list|(
literal|"review"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertAddress
argument_list|(
name|message
argument_list|,
name|expectedAddress
argument_list|,
name|expectedRecipientType
argument_list|)
expr_stmt|;
name|message
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
name|assertAddress
argument_list|(
name|message
argument_list|,
name|expectedAddress
argument_list|,
name|expectedRecipientType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|body
argument_list|()
operator|.
name|contains
argument_list|(
literal|"submitted"
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAddress ( Message message, Address expectedAddress, @Nullable RecipientType expectedRecipientType)
specifier|private
name|void
name|assertAddress
parameter_list|(
name|Message
name|message
parameter_list|,
name|Address
name|expectedAddress
parameter_list|,
annotation|@
name|Nullable
name|RecipientType
name|expectedRecipientType
parameter_list|)
block|{
name|assertThat
argument_list|(
name|message
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedRecipientType
operator|!=
literal|null
operator|&&
name|expectedRecipientType
operator|!=
name|RecipientType
operator|.
name|BCC
condition|)
block|{
comment|// When Bcc, it does not appear in the header.
name|String
name|expectedRecipientTypeString
init|=
literal|"To"
decl_stmt|;
if|if
condition|(
name|expectedRecipientType
operator|==
name|RecipientType
operator|.
name|CC
condition|)
block|{
name|expectedRecipientTypeString
operator|=
literal|"Cc"
expr_stmt|;
block|}
name|assertThat
argument_list|(
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|message
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
name|expectedRecipientTypeString
argument_list|)
operator|)
operator|.
name|getAddressList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

