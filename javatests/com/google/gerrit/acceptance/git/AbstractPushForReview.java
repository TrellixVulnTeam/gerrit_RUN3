begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|assertPushOk
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|assertPushRejected
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushHead
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|pushOne
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
operator|.
name|CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|MESSAGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|testing
operator|.
name|EditInfoSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveConstants
operator|.
name|PUSH_OPTION_SKIP_VALIDATION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|ANONYMOUS_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|category
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|Sandboxed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectWatchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|testing
operator|.
name|EditInfoSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|NoteDbPushOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
operator|.
name|ChangeIdValidator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|errors
operator|.
name|GitAPIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AbstractPushForReview
specifier|public
specifier|abstract
class|class
name|AbstractPushForReview
extends|extends
name|AbstractDaemonTest
block|{
DECL|enum|Protocol
specifier|protected
enum|enum
name|Protocol
block|{
comment|// TODO(dborowitz): TEST.
DECL|enumConstant|SSH
name|SSH
block|,
DECL|enumConstant|HTTP
name|HTTP
block|}
DECL|field|patchSetLock
specifier|private
name|LabelType
name|patchSetLock
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setTimeForTesting ()
specifier|public
specifier|static
name|void
name|setTimeForTesting
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreTime ()
specifier|public
specifier|static
name|void
name|restoreTime
parameter_list|()
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUpPatchSetLock ()
specifier|public
name|void
name|setUpPatchSetLock
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|patchSetLock
operator|=
name|Util
operator|.
name|patchSetLock
argument_list|()
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|patchSetLock
operator|.
name|getName
argument_list|()
argument_list|,
name|patchSetLock
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|anonymousUsers
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
name|patchSetLock
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anonymousUsers
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|LABEL
operator|+
literal|"Patch-Set-Lock"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetPublishCommentOnPushOption ()
specifier|public
name|void
name|resetPublishCommentOnPushOption
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|publishCommentsOnPush
operator|=
literal|false
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
DECL|method|selectProtocol (Protocol p)
specifier|protected
name|void
name|selectProtocol
parameter_list|(
name|Protocol
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
decl_stmt|;
switch|switch
condition|(
name|p
condition|)
block|{
case|case
name|SSH
case|:
name|url
operator|=
name|adminSshSession
operator|.
name|getUrl
argument_list|()
expr_stmt|;
break|break;
case|case
name|HTTP
case|:
name|url
operator|=
name|admin
operator|.
name|getHttpUrl
argument_list|(
name|server
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected protocol: "
operator|+
name|p
argument_list|)
throw|;
block|}
name|testRepo
operator|=
name|GitUtil
operator|.
name|cloneProject
argument_list|(
name|project
argument_list|,
name|url
operator|+
literal|"/"
operator|+
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMaster ()
specifier|public
name|void
name|pushForMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|pushInitialCommitForMasterBranch ()
specifier|public
name|void
name|pushInitialCommitForMasterBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|pushInitialCommitSeriesForMasterBranch ()
specifier|public
name|void
name|pushInitialCommitSeriesForMasterBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|RevCommit
name|c2
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|c
argument_list|)
operator|.
name|message
argument_list|(
literal|"Second commit"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change2
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change2
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change2
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestProjectInput
argument_list|(
name|createEmptyCommit
operator|=
literal|false
argument_list|)
DECL|method|validateConnected ()
specifier|public
name|void
name|validateConnected
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|r
init|=
literal|"refs/heads/master"
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|RevCommit
name|amended
init|=
name|testRepo
operator|.
name|amend
argument_list|(
name|c
argument_list|)
operator|.
name|message
argument_list|(
literal|"different initial commit"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|amended
argument_list|)
expr_stmt|;
name|r
operator|=
literal|"refs/for/master"
expr_stmt|;
name|pr
operator|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|r
argument_list|,
literal|"no common ancestry"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.enableSignedPush"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
annotation|@
name|TestProjectInput
argument_list|(
name|enableSignedPush
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|,
name|requireSignedPush
operator|=
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
DECL|method|nonSignedPushRejectedWhenSignPushRequired ()
specifier|public
name|void
name|nonSignedPushRejectedWhenSignPushRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|assertErrorStatus
argument_list|(
literal|"push cert error"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushInitialCommitForRefsMetaConfigBranch ()
specifier|public
name|void
name|pushInitialCommitForRefsMetaConfigBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete refs/meta/config
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RefUpdate
name|u
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
name|u
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setExpectedOldObjectId
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|delete
argument_list|(
name|rw
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|r
init|=
literal|"refs/for/"
operator|+
name|RefNames
operator|.
name|REFS_CONFIG
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|branch
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change
operator|.
name|id
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushInitialCommitForNormalNonExistingBranchFails ()
specifier|public
name|void
name|pushInitialCommitForNormalNonExistingBranchFails
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit"
argument_list|)
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|r
init|=
literal|"refs/for/foo"
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|r
argument_list|,
literal|"branch foo not found"
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|repo
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|output ()
specifier|public
name|void
name|output
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
literal|"c/"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"/+/"
decl_stmt|;
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r1
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r1
operator|.
name|assertMessage
argument_list|(
literal|"New changes:\n  "
operator|+
name|url
operator|+
name|id1
operator|+
literal|" "
operator|+
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|String
name|newMsg
init|=
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|" v2"
decl_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|newMsg
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r1
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"another commit"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"bbb"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r2
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r2
operator|.
name|assertMessage
argument_list|(
literal|"success\n"
operator|+
literal|"\n"
operator|+
literal|"New changes:\n"
operator|+
literal|"  "
operator|+
name|url
operator|+
name|id2
operator|+
literal|" another commit\n"
operator|+
literal|"\n"
operator|+
literal|"Updated changes:\n"
operator|+
literal|"  "
operator|+
name|url
operator|+
name|id1
operator|+
literal|" "
operator|+
name|newMsg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|autocloseByCommit ()
specifier|public
name|void
name|autocloseByCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a change
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Force push it, closing it
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|master
argument_list|,
literal|false
argument_list|)
argument_list|,
name|master
argument_list|)
expr_stmt|;
comment|// Attempt to push amended commit to same change
name|String
name|url
init|=
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
literal|"c/"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"/+/"
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"change "
operator|+
name|url
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
comment|// Check change message that was added on auto-close
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|change
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Change has been successfully pushed."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithoutChangeIdDeprecated ()
specifier|public
name|void
name|pushWithoutChangeIdDeprecated
parameter_list|()
throws|throws
name|Exception
block|{
name|setRequireChangeId
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"A change"
argument_list|)
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|PushResult
name|result
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"warning: pushing without Change-Id is deprecated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|autocloseByChangeId ()
specifier|public
name|void
name|autocloseByChangeId
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a change
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Amend the commit locally
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|amend
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Force push it, closing it
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|master
argument_list|,
literal|false
argument_list|)
argument_list|,
name|master
argument_list|)
expr_stmt|;
comment|// Attempt to push amended commit to same change
name|String
name|url
init|=
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
literal|"c/"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"/+/"
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"change "
operator|+
name|url
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
comment|// Check that new commit was added as patch set
name|ChangeInfo
name|change
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|change
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithTopic ()
specifier|public
name|void
name|pushForMasterWithTopic
parameter_list|()
throws|throws
name|Exception
block|{
comment|// specify topic in ref
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"deprecated topic syntax"
argument_list|)
expr_stmt|;
comment|// specify topic as option
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|topic
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithTopicOption ()
specifier|public
name|void
name|pushForMasterWithTopicOption
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|topicOption
init|=
literal|"topic=myTopic"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pushOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pushOptions
operator|.
name|add
argument_list|(
name|topicOption
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|push
operator|.
name|setPushOptions
argument_list|(
name|pushOptions
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|"myTopic"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertPushOptions
argument_list|(
name|pushOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithTopicInRefExceedLimitFails ()
specifier|public
name|void
name|pushForMasterWithTopicInRefExceedLimitFails
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|topic
init|=
name|Stream
operator|.
name|generate
argument_list|(
parameter_list|()
lambda|->
literal|"t"
argument_list|)
operator|.
name|limit
argument_list|(
literal|2049
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|()
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"topic length exceeds the limit (2048)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithTopicAsOptionExceedLimitFails ()
specifier|public
name|void
name|pushForMasterWithTopicAsOptionExceedLimitFails
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|topic
init|=
name|Stream
operator|.
name|generate
argument_list|(
parameter_list|()
lambda|->
literal|"t"
argument_list|)
operator|.
name|limit
argument_list|(
literal|2049
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|()
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%topic="
operator|+
name|topic
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"topic length exceeds the limit (2048)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithNotify ()
specifier|public
name|void
name|pushForMasterWithNotify
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a user that watches the project
name|TestAccount
name|user3
init|=
name|accountCreator
operator|.
name|create
argument_list|(
literal|"user3"
argument_list|,
literal|"user3@example.com"
argument_list|,
literal|"User3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ProjectWatchInfo
argument_list|>
name|projectsToWatch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ProjectWatchInfo
name|pwi
init|=
operator|new
name|ProjectWatchInfo
argument_list|()
decl_stmt|;
name|pwi
operator|.
name|project
operator|=
name|project
operator|.
name|get
argument_list|()
expr_stmt|;
name|pwi
operator|.
name|filter
operator|=
literal|"*"
expr_stmt|;
name|pwi
operator|.
name|notifyNewChanges
operator|=
literal|true
expr_stmt|;
name|projectsToWatch
operator|.
name|add
argument_list|(
name|pwi
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|user3
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setWatchedProjects
argument_list|(
name|projectsToWatch
argument_list|)
expr_stmt|;
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|String
name|pushSpec
init|=
literal|"refs/for/master%reviewer="
operator|+
name|user
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user2
operator|.
name|email
decl_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|OWNER
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// no email notification about own changes
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CCs are considered reviewers in the storage layer and so get notified.
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|,
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
block|}
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m
operator|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|,
name|user2
operator|.
name|emailAddress
argument_list|,
name|user3
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-to="
operator|+
name|user3
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertNotifyTo
argument_list|(
name|user3
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-cc="
operator|+
name|user3
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertNotifyCc
argument_list|(
name|user3
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-bcc="
operator|+
name|user3
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertNotifyBcc
argument_list|(
name|user3
argument_list|)
expr_stmt|;
comment|// request that sender gets notified as TO, CC and BCC, email should be sent
comment|// even if the sender is the only recipient
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-to="
operator|+
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertNotifyTo
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-cc="
operator|+
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertNotifyCc
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
name|pushSpec
operator|+
literal|",notify="
operator|+
name|NotifyHandling
operator|.
name|NONE
operator|+
literal|",notify-bcc="
operator|+
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertNotifyBcc
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithCc ()
specifier|public
name|void
name|pushForMasterWithCc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// cc one user
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|user
operator|.
name|email
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|// cc several users
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|accountCreator
operator|.
name|user2
argument_list|()
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Check that admin isn't CC'd as they own the change
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
argument_list|,
name|accountCreator
operator|.
name|user2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// cc non-existing user
name|String
name|nonExistingEmail
init|=
literal|"non.existing@example.com"
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%cc="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",cc="
operator|+
name|nonExistingEmail
operator|+
literal|",cc="
operator|+
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
name|nonExistingEmail
operator|+
literal|" does not identify a registered user or group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithCcByEmail ()
specifier|public
name|void
name|pushForMasterWithCcByEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInput
name|conf
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|conf
operator|.
name|enableReviewerByEmail
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%cc=non.existing.1@example.com,cc=non.existing.2@example.com"
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|AccountInfo
argument_list|>
name|ccs
init|=
name|firstNonNull
argument_list|(
name|ci
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AccountInfo
operator|>
name|of
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|comparing
argument_list|(
parameter_list|(
name|AccountInfo
name|a
parameter_list|)
lambda|->
name|a
operator|.
name|email
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ccs
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ccs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"non.existing.1@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ccs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ccs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"non.existing.2@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ccs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"non.existing.1@example.com does not identify a registered user"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithCcGroup ()
specifier|public
name|void
name|pushForMasterWithCcGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|GroupInput
name|gin
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|gin
operator|.
name|name
operator|=
name|group
expr_stmt|;
name|gin
operator|.
name|members
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
operator|.
name|username
argument_list|,
name|user2
operator|.
name|username
argument_list|)
expr_stmt|;
name|gin
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
comment|// TODO(dborowitz): Shouldn't be necessary; see ReviewerAdder.
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|gin
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%cc="
operator|+
name|group
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
argument_list|,
name|user2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithReviewer ()
specifier|public
name|void
name|pushForMasterWithReviewer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add one reviewer
name|String
name|topic
init|=
literal|"my/topic"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|user
operator|.
name|email
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// add several reviewers
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|create
argument_list|(
literal|"another-user"
argument_list|,
literal|"another.user@example.com"
argument_list|,
literal|"Another User"
argument_list|)
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",r="
operator|+
name|user
operator|.
name|email
operator|+
literal|",r="
operator|+
name|user2
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// admin is the owner of the change and should not appear as reviewer
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
name|topic
argument_list|,
name|user
argument_list|,
name|user2
argument_list|)
expr_stmt|;
comment|// add non-existing user as reviewer
name|String
name|nonExistingEmail
init|=
literal|"non.existing@example.com"
decl_stmt|;
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master/"
operator|+
name|topic
operator|+
literal|"%r="
operator|+
name|admin
operator|.
name|email
operator|+
literal|",r="
operator|+
name|nonExistingEmail
operator|+
literal|",r="
operator|+
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
name|nonExistingEmail
operator|+
literal|" does not identify a registered user or group"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithReviewerByEmail ()
specifier|public
name|void
name|pushForMasterWithReviewerByEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigInput
name|conf
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|conf
operator|.
name|enableReviewerByEmail
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%r=non.existing.1@example.com,r=non.existing.2@example.com"
argument_list|)
decl_stmt|;
if|if
condition|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|AccountInfo
argument_list|>
name|reviewers
init|=
name|firstNonNull
argument_list|(
name|ci
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
argument_list|,
name|ImmutableList
operator|.
expr|<
name|AccountInfo
operator|>
name|of
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|comparing
argument_list|(
parameter_list|(
name|AccountInfo
name|a
parameter_list|)
lambda|->
name|a
operator|.
name|email
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reviewers
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"non.existing.1@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"non.existing.2@example.com"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reviewers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|_accountId
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"non.existing.1@example.com does not identify a registered user"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithReviewerGroup ()
specifier|public
name|void
name|pushForMasterWithReviewerGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|name
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|GroupInput
name|gin
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|gin
operator|.
name|name
operator|=
name|group
expr_stmt|;
name|gin
operator|.
name|members
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
operator|.
name|username
argument_list|,
name|user2
operator|.
name|username
argument_list|)
expr_stmt|;
name|gin
operator|.
name|visibleToAll
operator|=
literal|true
expr_stmt|;
comment|// TODO(dborowitz): Shouldn't be necessary; see ReviewerAdder.
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|gin
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%r="
operator|+
name|group
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|user
argument_list|,
name|user2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushPrivateChange ()
specifier|public
name|void
name|pushPrivateChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push a private change.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%private"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|" [PRIVATE]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Pushing a new patch set without --private doesn't remove the privacy flag from the change.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|" [PRIVATE]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Remove the privacy flag from the change.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%remove-private"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertNotMessage
argument_list|(
literal|" [PRIVATE]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Normal push: privacy flag is not added back.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertNotMessage
argument_list|(
literal|" [PRIVATE]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Make the change private again.
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master%private"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|" [PRIVATE]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isPrivate
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Can't use --private and --remove-private together.
name|r
operator|=
name|pushTo
argument_list|(
literal|"refs/for/master%private,remove-private"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWorkInProgressChange ()
specifier|public
name|void
name|pushWorkInProgressChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push a work-in-progress change.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%wip"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|" [WIP]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertUploadTag
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_WIP_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Pushing a new patch set without --wip doesn't remove the wip flag from the change.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|" [WIP]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertUploadTag
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_WIP_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Remove the wip flag from the change.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%ready"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertNotMessage
argument_list|(
literal|" [WIP]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertUploadTag
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Normal push: wip flag is not added back.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertNotMessage
argument_list|(
literal|" [WIP]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertUploadTag
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Make the change work-in-progress again.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%wip"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|" [WIP]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertUploadTag
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_UPLOADED_WIP_PATCH_SET
argument_list|)
expr_stmt|;
comment|// Can't use --wip and --ready together.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%wip,ready"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
block|}
DECL|method|assertUploadTag (ChangeData cd, String expectedTag)
specifier|private
name|void
name|assertUploadTag
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|String
name|expectedTag
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|msgs
init|=
name|cd
operator|.
name|messages
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|msgs
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|msgs
argument_list|)
operator|.
name|getTag
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedTag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWorkInProgressChangeWhenNotOwner ()
specifier|public
name|void
name|pushWorkInProgressChangeWhenNotOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|userRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master%wip"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Admin user trying to move from WIP to ready should succeed.
name|GitUtil
operator|.
name|fetch
argument_list|(
name|testRepo
argument_list|,
name|r
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
operator|+
literal|":ps"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|user
argument_list|,
name|testRepo
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Other user trying to move from WIP to WIP should succeed.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%wip"
argument_list|,
name|admin
argument_list|,
name|testRepo
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Push as change owner to move change from WIP to ready.
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|userRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master%ready"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
comment|// Admin user trying to move from ready to WIP should succeed.
name|GitUtil
operator|.
name|fetch
argument_list|(
name|testRepo
argument_list|,
name|r
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
operator|+
literal|":ps"
argument_list|)
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%wip"
argument_list|,
name|admin
argument_list|,
name|testRepo
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Other user trying to move from wip to wip should succeed.
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%wip"
argument_list|,
name|admin
argument_list|,
name|testRepo
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Non owner, non admin and non project owner cannot flip wip bit:
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|FORGE_COMMITTER
argument_list|,
literal|false
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|user2Repo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user2
argument_list|)
decl_stmt|;
name|GitUtil
operator|.
name|fetch
argument_list|(
name|user2Repo
argument_list|,
name|r
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
operator|+
literal|":ps"
argument_list|)
expr_stmt|;
name|user2Repo
operator|.
name|reset
argument_list|(
literal|"ps"
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|user2
argument_list|,
name|user2Repo
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
name|ReceiveConstants
operator|.
name|ONLY_CHANGE_OWNER_OR_PROJECT_OWNER_CAN_MODIFY_WIP
argument_list|)
expr_stmt|;
comment|// Project owner trying to move from WIP to ready should succeed.
name|allow
argument_list|(
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|OWNER
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%ready"
argument_list|,
name|user2
argument_list|,
name|user2Repo
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterAsEdit ()
specifier|public
name|void
name|pushForMasterAsEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|edit
init|=
name|getEdit
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"has:edit"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// specify edit as option
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%edit"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|edit
operator|=
name|getEdit
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|edit
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
name|EditInfo
name|editInfo
init|=
name|edit
operator|.
name|get
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"Updated Changes:\n  "
operator|+
name|canonicalWebUrl
operator|.
name|get
argument_list|()
operator|+
literal|"c/"
operator|+
name|project
operator|.
name|get
argument_list|()
operator|+
literal|"/+/"
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" "
operator|+
name|editInfo
operator|.
name|commit
operator|.
name|subject
operator|+
literal|" [EDIT]\n"
argument_list|)
expr_stmt|;
comment|// verify that the re-indexing was triggered for the change
name|assertThat
argument_list|(
name|query
argument_list|(
literal|"has:edit"
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithMessage ()
specifier|public
name|void
name|pushForMasterWithMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%m=my_test_message"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|MESSAGES
argument_list|,
name|ALL_REVISIONS
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|changeMessages
init|=
name|ci
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessageInfo
name|cm
range|:
name|changeMessages
control|)
block|{
name|assertThat
argument_list|(
name|cm
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1.\nmy test message"
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|RevisionInfo
argument_list|>
name|revisions
init|=
name|ci
operator|.
name|revisions
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|RevisionInfo
name|ri
range|:
name|revisions
control|)
block|{
name|assertThat
argument_list|(
name|ri
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"my test message"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithMessageTwiceWithDifferentMessages ()
specifier|public
name|void
name|pushForMasterWithMessageTwiceWithDifferentMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
comment|// %2C is comma; the value below tests that percent decoding happens after splitting.
comment|// All three ways of representing space ("%20", "+", and "_" are also exercised.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%m=my_test%20+_message%2Cm="
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%m=new_test_message"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ALL_REVISIONS
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|RevisionInfo
argument_list|>
name|revisions
init|=
name|ci
operator|.
name|revisions
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|RevisionInfo
name|ri
range|:
name|revisions
control|)
block|{
if|if
condition|(
name|ri
operator|.
name|isCurrent
condition|)
block|{
name|assertThat
argument_list|(
name|ri
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"new test message"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|ri
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"my test   message,m="
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithPercentEncodedMessage ()
specifier|public
name|void
name|pushForMasterWithPercentEncodedMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Exercise percent-encoding of UTF-8, underscores, and patterns reserved by git-rev-parse.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%m="
operator|+
literal|"Punctu%2E%2e%2Eation%7E%2D%40%7Bu%7D%20%7C%20%28%E2%95%AF%C2%B0%E2%96%A1%C2%B0"
operator|+
literal|"%EF%BC%89%E2%95%AF%EF%B8%B5%20%E2%94%BB%E2%94%81%E2%94%BB%20%5E%5F%5E"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|MESSAGES
argument_list|,
name|ALL_REVISIONS
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|changeMessages
init|=
name|ci
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessageInfo
name|cm
range|:
name|changeMessages
control|)
block|{
name|assertThat
argument_list|(
name|cm
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1.\nPunctu...ation~-@{u} | (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ» ^_^"
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|RevisionInfo
argument_list|>
name|revisions
init|=
name|ci
operator|.
name|revisions
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|RevisionInfo
name|ri
range|:
name|revisions
control|)
block|{
name|assertThat
argument_list|(
name|ri
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Punctu...ation~-@{u} | (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ» ^_^"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithInvalidPercentEncodedMessage ()
specifier|public
name|void
name|pushForMasterWithInvalidPercentEncodedMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%m=not_percent_decodable_%%oops%20"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|MESSAGES
argument_list|,
name|ALL_REVISIONS
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|changeMessages
init|=
name|ci
operator|.
name|messages
decl_stmt|;
name|assertThat
argument_list|(
name|changeMessages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeMessageInfo
name|cm
range|:
name|changeMessages
control|)
block|{
name|assertThat
argument_list|(
name|cm
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1.\nnot percent decodable %%oops%20"
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|RevisionInfo
argument_list|>
name|revisions
init|=
name|ci
operator|.
name|revisions
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|RevisionInfo
name|ri
range|:
name|revisions
control|)
block|{
name|assertThat
argument_list|(
name|ri
operator|.
name|description
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"not percent decodable %%oops%20"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithApprovals ()
specifier|public
name|void
name|pushForMasterWithApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%l=Code-Review"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|MESSAGES
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1: Code-Review+1."
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%l=Code-Review+2"
argument_list|)
expr_stmt|;
name|ci
operator|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|MESSAGES
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
expr_stmt|;
name|cr
operator|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2: Code-Review+2."
argument_list|)
expr_stmt|;
comment|// Check that the user who pushed the change was added as a reviewer since they added a vote
name|assertThatUserIsOnlyReviewer
argument_list|(
name|ci
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"c.txt"
argument_list|,
literal|"moreContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%l=Code-Review+2"
argument_list|)
expr_stmt|;
name|ci
operator|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|MESSAGES
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 3."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchSetForMasterWithApprovals ()
specifier|public
name|void
name|pushNewPatchSetForMasterWithApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%l=Code-Review+2"
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|MESSAGES
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2: Code-Review+2."
argument_list|)
expr_stmt|;
comment|// Check that the user who pushed the new patch set was added as a reviewer since they added
comment|// a vote
name|assertThatUserIsOnlyReviewer
argument_list|(
name|ci
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Administrator"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithForgedAuthorAndCommitter ()
specifier|public
name|void
name|pushForMasterWithForgedAuthorAndCommitter
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
comment|// Create a commit with different forged author and committer.
name|RevCommit
name|c
init|=
name|commitBuilder
argument_list|()
operator|.
name|author
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|user2
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
operator|.
name|message
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Push commit as "Admnistrator".
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|String
name|changeId
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getOwnerEmail
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewerEmails
argument_list|(
name|changeId
argument_list|,
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|email
argument_list|,
name|user2
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|,
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchSetForMasterWithForgedAuthorAndCommitter ()
specifier|public
name|void
name|pushNewPatchSetForMasterWithForgedAuthorAndCommitter
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAccount
name|user2
init|=
name|accountCreator
operator|.
name|user2
argument_list|()
decl_stmt|;
comment|// First patch set has author and committer matching change owner.
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getOwnerEmail
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewerEmails
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|amendBuilder
argument_list|()
operator|.
name|author
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|user2
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
operator|+
literal|"2"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getOwnerEmail
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReviewerEmails
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|email
argument_list|,
name|user2
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|user
operator|.
name|emailAddress
argument_list|,
name|user2
operator|.
name|emailAddress
argument_list|)
expr_stmt|;
block|}
comment|/**    * There was a bug that allowed a user with Forge Committer Identity access right to upload a    * commit and put *votes on behalf of another user* on it. This test checks that this is not    * possible, but that the votes that are specified on push are applied only on behalf of the    * uploader.    *    *<p>This particular bug only occurred when there was more than one label defined. However to    * test that the votes that are specified on push are applied on behalf of the uploader a single    * label is sufficient.    */
annotation|@
name|Test
DECL|method|pushForMasterWithApprovalsForgeCommitterButNoForgeVote ()
specifier|public
name|void
name|pushForMasterWithApprovalsForgeCommitterButNoForgeVote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a commit with "User" as author and committer
name|RevCommit
name|c
init|=
name|commitBuilder
argument_list|()
operator|.
name|author
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|user
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
operator|.
name|message
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Push this commit as "Administrator" (requires Forge Committer Identity)
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master/%l=Code-Review+1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Expected Code-Review votes:
comment|// 1. 0 from User (committer):
comment|//    When the committer is forged, the committer is automatically added as
comment|//    reviewer, hence we expect a dummy 0 vote for the committer.
comment|// 2. +1 from Administrator (uploader):
comment|//    On push Code-Review+1 was specified, hence we expect a +1 vote from
comment|//    the uploader.
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|MESSAGES
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|int
name|indexAdmin
init|=
name|admin
operator|.
name|fullName
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|indexUser
init|=
name|indexAdmin
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexAdmin
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexAdmin
argument_list|)
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexUser
argument_list|)
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|user
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
operator|.
name|get
argument_list|(
name|indexUser
argument_list|)
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|ci
operator|.
name|messages
argument_list|)
operator|.
name|message
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 1: Code-Review+1."
argument_list|)
expr_stmt|;
comment|// Check that the user who pushed the change was added as a reviewer since they added a vote
name|assertThatUserIsOnlyReviewer
argument_list|(
name|ci
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithMultipleApprovals ()
specifier|public
name|void
name|pushWithMultipleApprovals
parameter_list|()
throws|throws
name|Exception
block|{
name|LabelType
name|Q
init|=
name|category
argument_list|(
literal|"Custom-Label"
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Positive"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Negative"
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|anon
init|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|ANONYMOUS_USERS
argument_list|)
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|heads
init|=
literal|"refs/heads/*"
decl_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|forLabel
argument_list|(
literal|"Custom-Label"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|anon
argument_list|,
name|heads
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|Q
operator|.
name|getName
argument_list|()
argument_list|,
name|Q
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|RevCommit
name|c
init|=
name|commitBuilder
argument_list|()
operator|.
name|author
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|committer
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
name|PushOneCommit
operator|.
name|FILE_CONTENT
argument_list|)
operator|.
name|message
argument_list|(
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master/%l=Code-Review+1,l=Custom-Label-1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ChangeInfo
name|ci
init|=
name|get
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
decl_stmt|;
name|LabelInfo
name|cr
init|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Code-Review"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cr
operator|=
name|ci
operator|.
name|labels
operator|.
name|get
argument_list|(
literal|"Custom-Label"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cr
operator|.
name|all
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the user who pushed the change was added as a reviewer since they added a vote
name|assertThatUserIsOnlyReviewer
argument_list|(
name|ci
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.allowPushToRefsChanges"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|pushToRefsChangesAllowed ()
specifier|public
name|void
name|pushToRefsChangesAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushOneCommitToRefsChanges
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchsetToRefsChanges ()
specifier|public
name|void
name|pushNewPatchsetToRefsChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushOneCommitToRefsChanges
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"upload to refs/changes not allowed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.allowPushToRefsChanges"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
DECL|method|pushToRefsChangesNotAllowed ()
specifier|public
name|void
name|pushToRefsChangesNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushOneCommitToRefsChanges
argument_list|()
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"upload to refs/changes not allowed"
argument_list|)
expr_stmt|;
block|}
DECL|method|pushOneCommitToRefsChanges ()
specifier|private
name|PushOneCommit
operator|.
name|Result
name|pushOneCommitToRefsChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/changes/"
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchsetToPatchSetLockedChange ()
specifier|public
name|void
name|pushNewPatchsetToPatchSetLockedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
operator|new
name|ReviewInput
argument_list|()
operator|.
name|label
argument_list|(
literal|"Patch-Set-Lock"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"cannot add patch set to "
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getChangeId
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithApprovals_MissingLabel ()
specifier|public
name|void
name|pushForMasterWithApprovals_MissingLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%l=Verify"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"label \"Verify\" is not a configured label"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithApprovals_ValueOutOfRange ()
specifier|public
name|void
name|pushForMasterWithApprovals_ValueOutOfRange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master/%l=Code-Review-3"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"label \"Code-Review\": -3 is not a valid value"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForNonExistingBranch ()
specifier|public
name|void
name|pushForNonExistingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|branchName
init|=
literal|"non-existing"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/"
operator|+
name|branchName
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"branch "
operator|+
name|branchName
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithHashtags ()
specifier|public
name|void
name|pushForMasterWithHashtags
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Hashtags only work when reading from NoteDB is enabled
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// specify a single hashtag as option
name|String
name|hashtag1
init|=
literal|"tag1"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%hashtag=#"
operator|+
name|hashtag1
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// specify a single hashtag as option in new patch set
name|String
name|hashtag2
init|=
literal|"tag2"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/%hashtag="
operator|+
name|hashtag2
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|expected
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|,
name|hashtag2
argument_list|)
expr_stmt|;
name|hashtags
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithMultipleHashtags ()
specifier|public
name|void
name|pushForMasterWithMultipleHashtags
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Hashtags only work when reading from NoteDB is enabled
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// specify multiple hashtags as options
name|String
name|hashtag1
init|=
literal|"tag1"
decl_stmt|;
name|String
name|hashtag2
init|=
literal|"tag2"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|,
name|hashtag2
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%hashtag=#"
operator|+
name|hashtag1
operator|+
literal|",hashtag=##"
operator|+
name|hashtag2
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertChange
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// specify multiple hashtags as options in new patch set
name|String
name|hashtag3
init|=
literal|"tag3"
decl_stmt|;
name|String
name|hashtag4
init|=
literal|"tag4"
decl_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master%hashtag="
operator|+
name|hashtag3
operator|+
literal|",hashtag="
operator|+
name|hashtag4
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|expected
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|hashtag1
argument_list|,
name|hashtag2
argument_list|,
name|hashtag3
argument_list|,
name|hashtag4
argument_list|)
expr_stmt|;
name|hashtags
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|getHashtags
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hashtags
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushForMasterWithHashtagsNoteDbDisabled ()
specifier|public
name|void
name|pushForMasterWithHashtagsNoteDbDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push with hashtags should fail when reading from NoteDb is disabled.
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|notesMigration
operator|.
name|readChanges
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%hashtag=tag1"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"cannot add hashtags; noteDb is disabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitUsingSignedOffBy ()
specifier|public
name|void
name|pushCommitUsingSignedOffBy
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|setUseSignedOffBy
argument_list|(
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|block
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|FORGE_COMMITTER
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"\n\nSigned-off-by: %s<%s>"
argument_list|,
name|admin
operator|.
name|fullName
argument_list|,
name|admin
operator|.
name|email
argument_list|)
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"not Signed-off-by author/committer/uploader in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createNewChangeForAllNotInTarget ()
specifier|public
name|void
name|createNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"otherBranch"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/otherBranch"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertTwoChangesWithSameRevision
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushChangeBasedOnChangeOfOtherUserWithCreateNewChangeForAllNotInTarget ()
specifier|public
name|void
name|pushChangeBasedOnChangeOfOtherUserWithCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
comment|// create a change as admin
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|commitChange1
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
comment|// create a second change as user (depends on the change from admin)
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userRepo
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|GitUtil
operator|.
name|fetch
argument_list|(
name|userRepo
argument_list|,
name|r
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
operator|+
literal|":change"
argument_list|)
expr_stmt|;
name|userRepo
operator|.
name|reset
argument_list|(
literal|"change"
argument_list|)
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|userRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// assert that no new change was created for the commit of the predecessor change
name|assertThat
argument_list|(
name|query
argument_list|(
name|commitChange1
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushSameCommitTwiceUsingMagicBranchBaseOption ()
specifier|public
name|void
name|pushSameCommitTwiceUsingMagicBranchBaseOption
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|rBase
init|=
name|pushTo
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|rBase
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushResult
name|pr
init|=
name|GitUtil
operator|.
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/foo%base="
operator|+
name|rBase
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// BatchUpdate implementations differ in how they hook into progress monitors. We mostly just
comment|// care that there is a new change.
name|assertThat
argument_list|(
name|pr
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|containsMatch
argument_list|(
literal|"changes: .*new: 1.*done"
argument_list|)
expr_stmt|;
name|assertTwoChangesWithSameRevision
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushSameCommitTwice ()
specifier|public
name|void
name|pushSameCommitTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"commit(s) already exists (as current patchset)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushSameCommitTwiceWhenIndexFailed ()
specifier|public
name|void
name|pushSameCommitTwiceWhenIndexFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|push
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|)
expr_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|delete
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"commit(s) already exists (as current patchset)"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTwoChangesWithSameRevision (PushOneCommit.Result result)
specifier|private
name|void
name|assertTwoChangesWithSameRevision
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changes
init|=
name|query
argument_list|(
name|result
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|changes
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ChangeInfo
name|c1
init|=
name|get
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|ChangeInfo
name|c2
init|=
name|get
argument_list|(
name|changes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|id
argument_list|,
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|project
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|project
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|branch
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|c2
operator|.
name|branch
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|changeId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|changeId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|currentRevision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAFewChanges ()
specifier|public
name|void
name|pushAFewChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushAFewChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushAFewChangesWithCreateNewChangeForAllNotInTarget ()
specifier|public
name|void
name|pushAFewChangesWithCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|testPushAFewChanges
argument_list|()
expr_stmt|;
block|}
DECL|method|testPushAFewChanges ()
specifier|private
name|void
name|testPushAFewChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|10
decl_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|createChanges
argument_list|(
name|n
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// Check that a change was created for each.
for|for
control|(
name|RevCommit
name|c
range|:
name|commits
control|)
block|{
name|assertThat
argument_list|(
name|byCommit
argument_list|(
name|c
argument_list|)
operator|.
name|change
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"change for "
operator|+
name|c
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits2
init|=
name|amendChanges
argument_list|(
name|initialHead
argument_list|,
name|commits
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// Check that there are correct patch sets.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|c
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RevCommit
name|c2
init|=
name|commits2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"change for "
operator|+
name|c2
operator|.
name|name
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
literal|2
argument_list|,
name|c2
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Pushing again results in "no new changes".
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithoutChangeId ()
specifier|public
name|void
name|pushWithoutChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushWithoutChangeId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithoutChangeIdWithCreateNewChangeForAllNotInTarget ()
specifier|public
name|void
name|pushWithoutChangeIdWithCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|testPushWithoutChangeId
argument_list|()
expr_stmt|;
block|}
DECL|method|testPushWithoutChangeId ()
specifier|private
name|void
name|testPushWithoutChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|createCommit
argument_list|(
name|testRepo
argument_list|,
literal|"Message without Change-Id"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"missing Change-Id in message footer"
argument_list|)
expr_stmt|;
name|setRequireChangeId
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|pushForReviewOk
argument_list|(
name|testRepo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|errorMessageFormat ()
specifier|public
name|void
name|errorMessageFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|createCommit
argument_list|(
name|testRepo
argument_list|,
literal|"Message without Change-Id"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master"
decl_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|refUpdate
init|=
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
name|String
name|reason
init|=
name|String
operator|.
name|format
argument_list|(
literal|"commit %s: missing Change-Id in message footer"
argument_list|,
name|c
operator|.
name|toObjectId
argument_list|()
operator|.
name|abbreviate
argument_list|(
literal|7
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"\nERROR: "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.allowPushToRefsChanges"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|testPushWithChangedChangeId ()
specifier|public
name|void
name|testPushWithChangedChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
operator|+
literal|"\n\n"
operator|+
literal|"Change-Id: I55eab7c7a76e95005fa9cc469aa8f9fc16da9eba\n"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/changes/"
operator|+
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"commit %s: %s"
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|abbreviate
argument_list|(
name|RevId
operator|.
name|ABBREV_LEN
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|ChangeIdValidator
operator|.
name|CHANGE_ID_MISMATCH_MSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithMultipleChangeIds ()
specifier|public
name|void
name|pushWithMultipleChangeIds
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushWithMultipleChangeIds
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithMultipleChangeIdsWithCreateNewChangeForAllNotInTarget ()
specifier|public
name|void
name|pushWithMultipleChangeIdsWithCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|testPushWithMultipleChangeIds
argument_list|()
expr_stmt|;
block|}
DECL|method|testPushWithMultipleChangeIds ()
specifier|private
name|void
name|testPushWithMultipleChangeIds
parameter_list|()
throws|throws
name|Exception
block|{
name|createCommit
argument_list|(
name|testRepo
argument_list|,
literal|"Message with multiple Change-Id\n"
operator|+
literal|"\n"
operator|+
literal|"Change-Id: I10f98c2ef76e52e23aa23be5afeb71e40b350e86\n"
operator|+
literal|"Change-Id: Ie9a132e107def33bdd513b7854b50de911edba0a\n"
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"multiple Change-Id lines in message footer"
argument_list|)
expr_stmt|;
name|setRequireChangeId
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"multiple Change-Id lines in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithInvalidChangeId ()
specifier|public
name|void
name|pushWithInvalidChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|testpushWithInvalidChangeId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithInvalidChangeIdWithCreateNewChangeForAllNotInTarget ()
specifier|public
name|void
name|pushWithInvalidChangeIdWithCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|testpushWithInvalidChangeId
argument_list|()
expr_stmt|;
block|}
DECL|method|testpushWithInvalidChangeId ()
specifier|private
name|void
name|testpushWithInvalidChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|createCommit
argument_list|(
name|testRepo
argument_list|,
literal|"Message with invalid Change-Id\n\nChange-Id: X\n"
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"invalid Change-Id line format in message footer"
argument_list|)
expr_stmt|;
name|setRequireChangeId
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"invalid Change-Id line format in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithInvalidChangeIdFromEgit ()
specifier|public
name|void
name|pushWithInvalidChangeIdFromEgit
parameter_list|()
throws|throws
name|Exception
block|{
name|testPushWithInvalidChangeIdFromEgit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithInvalidChangeIdFromEgitWithCreateNewChangeForAllNotInTarget ()
specifier|public
name|void
name|pushWithInvalidChangeIdFromEgitWithCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|enableCreateNewChangeForAllNotInTarget
argument_list|()
expr_stmt|;
name|testPushWithInvalidChangeIdFromEgit
argument_list|()
expr_stmt|;
block|}
DECL|method|testPushWithInvalidChangeIdFromEgit ()
specifier|private
name|void
name|testPushWithInvalidChangeIdFromEgit
parameter_list|()
throws|throws
name|Exception
block|{
name|createCommit
argument_list|(
name|testRepo
argument_list|,
literal|"Message with invalid Change-Id\n"
operator|+
literal|"\n"
operator|+
literal|"Change-Id: I0000000000000000000000000000000000000000\n"
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"invalid Change-Id line format in message footer"
argument_list|)
expr_stmt|;
name|setRequireChangeId
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"invalid Change-Id line format in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithChangeIdInSubjectLine ()
specifier|public
name|void
name|pushWithChangeIdInSubjectLine
parameter_list|()
throws|throws
name|Exception
block|{
name|createCommit
argument_list|(
name|testRepo
argument_list|,
literal|"Change-Id: I1234000000000000000000000000000000000000"
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"missing subject; Change-Id must be in message footer"
argument_list|)
expr_stmt|;
name|setRequireChangeId
argument_list|(
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"missing subject; Change-Id must be in message footer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushCommitWithSameChangeIdAsPredecessorChange ()
specifier|public
name|void
name|pushCommitWithSameChangeIdAsPredecessorChange
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|commitChange1
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|createCommit
argument_list|(
name|testRepo
argument_list|,
name|commitChange1
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"same Change-Id in multiple changes.\n"
operator|+
literal|"Squash the commits with the same Change-Id or ensure Change-Ids are unique for each"
operator|+
literal|" commit"
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|setBooleanConfig
argument_list|(
name|BooleanProjectConfig
operator|.
name|REQUIRE_CHANGE_ID
argument_list|,
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"same Change-Id in multiple changes.\n"
operator|+
literal|"Squash the commits with the same Change-Id or ensure Change-Ids are unique for each"
operator|+
literal|" commit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushTwoCommitWithSameChangeId ()
specifier|public
name|void
name|pushTwoCommitWithSameChangeId
parameter_list|()
throws|throws
name|Exception
block|{
name|RevCommit
name|commitChange1
init|=
name|createCommitWithChangeId
argument_list|(
name|testRepo
argument_list|,
literal|"some change"
argument_list|)
decl_stmt|;
name|createCommit
argument_list|(
name|testRepo
argument_list|,
name|commitChange1
operator|.
name|getFullMessage
argument_list|()
argument_list|)
expr_stmt|;
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"same Change-Id in multiple changes.\n"
operator|+
literal|"Squash the commits with the same Change-Id or ensure Change-Ids are unique for each"
operator|+
literal|" commit"
argument_list|)
expr_stmt|;
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|setBooleanConfig
argument_list|(
name|BooleanProjectConfig
operator|.
name|REQUIRE_CHANGE_ID
argument_list|,
name|InheritableBoolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|pushForReviewRejected
argument_list|(
name|testRepo
argument_list|,
literal|"same Change-Id in multiple changes.\n"
operator|+
literal|"Squash the commits with the same Change-Id or ensure Change-Ids are unique for each"
operator|+
literal|" commit"
argument_list|)
expr_stmt|;
block|}
DECL|method|createCommit (TestRepository<?> testRepo, String message)
specifier|private
specifier|static
name|RevCommit
name|createCommit
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|message
argument_list|)
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
operator|.
name|create
argument_list|()
return|;
block|}
DECL|method|createCommitWithChangeId (TestRepository<?> testRepo, String message)
specifier|private
specifier|static
name|RevCommit
name|createCommitWithChangeId
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|message
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|cantAutoCloseChangeAlreadyMergedToBranch ()
specifier|public
name|void
name|cantAutoCloseChangeAlreadyMergedToBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id1
init|=
name|r1
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id2
init|=
name|r2
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Merge change 1 behind Gerrit's back.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|update
argument_list|(
name|r1
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|r2
operator|=
name|amendChange
argument_list|(
name|r2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Change 1 is still new despite being merged into the branch, because
comment|// ReceiveCommits only considers commits between the branch tip (which is
comment|// now the merged change 1) and the push tip (new patch set of change 2).
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.allowPushToRefsChanges"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|accidentallyPushNewPatchSetDirectlyToBranchAndRecoverByPushingToRefsChanges ()
specifier|public
name|void
name|accidentallyPushNewPatchSetDirectlyToBranchAndRecoverByPushingToRefsChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|accidentallyPushNewPatchSetDirectlyToBranch
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|ps1Rev
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|r
init|=
literal|"refs/changes/"
operator|+
name|id
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|// Added a new patch set and auto-closed the change.
name|cd
operator|=
name|byChangeId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|ps1Rev
argument_list|,
literal|2
argument_list|,
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|accidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor ()
specifier|public
name|void
name|accidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor
parameter_list|()
throws|throws
name|Exception
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|accidentallyPushNewPatchSetDirectlyToBranch
argument_list|()
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|ps1Rev
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
comment|// Change not updated.
name|cd
operator|=
name|byChangeId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|ps1Rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forcePushAbandonedChange ()
specifier|public
name|void
name|forcePushAbandonedChange
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// abandon the change
name|String
name|changeId
init|=
name|r
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|push1
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ChangeInfo
name|result
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
DECL|method|accidentallyPushNewPatchSetDirectlyToBranch ()
specifier|private
name|Change
operator|.
name|Id
name|accidentallyPushNewPatchSetDirectlyToBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|RevCommit
name|ps1Commit
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|change
argument_list|()
decl_stmt|;
name|RevCommit
name|ps2Commit
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// Create a new patch set of the change directly in Gerrit's repository,
comment|// without pushing it. In reality it's more likely that the client would
comment|// create and push this behind Gerrit's back (e.g. an admin accidentally
comment|// using direct ssh access to the repo), but that's harder to do in tests.
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|ps2Commit
operator|=
name|tr
operator|.
name|branch
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|ps1Commit
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|" v2"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|ps2Commit
argument_list|)
expr_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|ps1Commit
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPatchSetRevisions
argument_list|(
name|cd
argument_list|)
argument_list|)
operator|.
name|containsExactlyEntriesIn
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|ps1Commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|pushWithEmailInFooter ()
specifier|public
name|void
name|pushWithEmailInFooter
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
name|user
operator|.
name|emailAddress
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithNameInFooter ()
specifier|public
name|void
name|pushWithNameInFooter
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
name|user
operator|.
name|fullName
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithEmailInFooterNotFound ()
specifier|public
name|void
name|pushWithEmailInFooterNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
operator|new
name|Address
argument_list|(
literal|"No Body"
argument_list|,
literal|"notarealuser@example.com"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithNameInFooterNotFound ()
specifier|public
name|void
name|pushWithNameInFooterNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|pushWithReviewerInFooter
argument_list|(
literal|"Notauser"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNewPatchsetOverridingStickyLabel ()
specifier|public
name|void
name|pushNewPatchsetOverridingStickyLabel
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|codeReview
init|=
name|Util
operator|.
name|codeReview
argument_list|()
decl_stmt|;
name|codeReview
operator|.
name|setCopyMaxScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|codeReview
operator|.
name|getName
argument_list|()
argument_list|,
name|codeReview
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%l=Code-Review+2"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
literal|"b.txt"
argument_list|,
literal|"anotherContent"
argument_list|,
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master%l=Code-Review+1"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createChangeForMergedCommit ()
specifier|public
name|void
name|createChangeForMergedCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|master
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Update master with a direct push.
name|RevCommit
name|c1
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Non-change 1"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c2
init|=
name|testRepo
operator|.
name|parseBody
argument_list|(
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|c1
argument_list|)
operator|.
name|message
argument_list|(
literal|"Non-change 2"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|c2
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
argument_list|)
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|master
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|String
name|q
init|=
literal|"commit:"
operator|+
name|c1
operator|.
name|name
argument_list|()
operator|+
literal|" OR commit:"
operator|+
name|c2
operator|.
name|name
argument_list|()
operator|+
literal|" OR change:"
operator|+
name|changeId
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Push c2 as a merged change.
name|String
name|r
init|=
literal|"refs/for/master%merged"
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|ListChangesOption
argument_list|>
name|opts
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|)
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
comment|// Only c2 was created as a change.
name|String
name|q1
init|=
literal|"commit: "
operator|+
name|c1
operator|.
name|name
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|q1
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// Push c1 as a merged change.
name|testRepo
operator|.
name|reset
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|r
argument_list|,
literal|false
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|infos
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|q1
argument_list|)
operator|.
name|withOptions
argument_list|(
name|opts
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infos
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|info
operator|=
name|infos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c1
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedOptionFailsWhenCommitIsNotMerged ()
specifier|public
name|void
name|mergedOptionFailsWhenCommitIsNotMerged
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master%merged"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|(
literal|"not merged into branch"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedOptionFailsWhenCommitIsMergedOnOtherBranch ()
specifier|public
name|void
name|mergedOptionFailsWhenCommitIsMergedOnOtherBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Initial commit on branch"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|pushTo
argument_list|(
literal|"refs/for/master%merged"
argument_list|)
operator|.
name|assertErrorStatus
argument_list|(
literal|"not merged into branch"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedOptionFailsWhenChangeExists ()
specifier|public
name|void
name|mergedOptionFailsWhenChangeExists
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master%merged"
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|rru
init|=
name|pr
operator|.
name|getRemoteUpdate
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rru
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rru
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"no new changes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedOptionWithNewCommitWithSameChangeIdFails ()
specifier|public
name|void
name|mergedOptionWithNewCommitWithSameChangeIdFails
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevCommit
name|c2
init|=
name|testRepo
operator|.
name|amend
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
argument_list|)
operator|.
name|message
argument_list|(
literal|"New subject"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master%merged"
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|rru
init|=
name|pr
operator|.
name|getRemoteUpdate
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rru
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rru
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"not merged into branch"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergedOptionWithExistingChangeInsertsPatchSet ()
specifier|public
name|void
name|mergedOptionWithExistingChangeInsertsPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
name|master
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|ObjectId
name|c1
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// Create a PS2 commit directly on master in the server's repo. This
comment|// simulates the client amending locally and pushing directly to the branch,
comment|// expecting the change to be auto-closed, but the change metadata update
comment|// fails.
name|ObjectId
name|c2
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|tr
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|RevCommit
name|commit2
init|=
name|tr
operator|.
name|amend
argument_list|(
name|c1
argument_list|)
operator|.
name|message
argument_list|(
literal|"New subject"
argument_list|)
operator|.
name|insertChangeId
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|c2
operator|=
name|commit2
operator|.
name|copy
argument_list|()
expr_stmt|;
name|tr
operator|.
name|update
argument_list|(
name|master
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|testRepo
operator|.
name|reset
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|String
name|ref
init|=
literal|"refs/for/master%merged"
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|ChangeInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|ALL_REVISIONS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|currentRevision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|c2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|revisions
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c1
operator|.
name|name
argument_list|()
argument_list|,
name|c2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Fix ReceiveCommits to also auto-close the change.
name|assertThat
argument_list|(
name|info
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishCommentsOnPushPublishesDraftsOnAllRevisions ()
specifier|public
name|void
name|publishCommentsOnPushPublishesDraftsOnAllRevisions
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|rev1
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|CommentInfo
name|c1
init|=
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|rev1
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment1"
argument_list|)
argument_list|)
decl_stmt|;
name|CommentInfo
name|c2
init|=
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|rev1
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment2"
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rev2
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|CommentInfo
name|c3
init|=
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|rev2
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%publish-comments"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|getPublishedComments
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c1
operator|.
name|id
argument_list|,
name|c2
operator|.
name|id
argument_list|,
name|c3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"comment1"
argument_list|,
literal|"comment2"
argument_list|,
literal|"comment3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLastMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 3.\n\n(3 comments)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|messages
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Message
operator|::
name|body
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|m
lambda|->
name|m
operator|.
name|contains
argument_list|(
literal|"reexamine"
argument_list|)
condition|?
literal|0
else|:
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|messages
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-MessageType: newpatchset"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"I'd like you to reexamine a change"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"Uploaded patch set 3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Gerrit-MessageType: comment"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|containsMatch
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
comment|// A little weird that the comment email contains this text, but it's actually
comment|// what's in the ChangeMessage. Really we should fuse the emails into one, but until
comment|// then, this test documents the current behavior.
literal|"Uploaded patch set 3\\.\n"
operator|+
literal|"\n"
operator|+
literal|"\\(3 comments\\)\\n.*"
operator|+
literal|"PS1, Line 1:.*"
operator|+
literal|"comment1\\n.*"
operator|+
literal|"PS1, Line 1:.*"
operator|+
literal|"comment2\\n.*"
operator|+
literal|"PS2, Line 1:.*"
operator|+
literal|"comment3\\n"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishCommentsOnPushWithMessage ()
specifier|public
name|void
name|publishCommentsOnPushWithMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|rev
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment1"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%publish-comments,m=The_message"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
name|getPublishedComments
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|comments
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"comment1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLastMessage
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2.\n\n(1 comment)\n\nThe message"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishCommentsOnPushPublishesDraftsOnMultipleChanges ()
specifier|public
name|void
name|publishCommentsOnPushPublishesDraftsOnMultipleChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|createChanges
argument_list|(
literal|2
argument_list|,
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|String
name|id1
init|=
name|byCommit
argument_list|(
name|commits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|byCommit
argument_list|(
name|commits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|CommentInfo
name|c1
init|=
name|addDraft
argument_list|(
name|id1
argument_list|,
name|commits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment1"
argument_list|)
argument_list|)
decl_stmt|;
name|CommentInfo
name|c2
init|=
name|addDraft
argument_list|(
name|id2
argument_list|,
name|commits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|id2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|amendChanges
argument_list|(
name|initialHead
argument_list|,
name|commits
argument_list|,
literal|"refs/for/master%publish-comments"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|cs1
init|=
name|getPublishedComments
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cs1
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"comment1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs1
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLastMessage
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2: Commit message was updated.\n\n(1 comment)"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|cs2
init|=
name|getPublishedComments
argument_list|(
name|id2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cs2
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"comment2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs2
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLastMessage
argument_list|(
name|id2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2: Commit message was updated.\n\n(1 comment)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishCommentsOnPushOnlyPublishesDraftsOnUpdatedChanges ()
specifier|public
name|void
name|publishCommentsOnPushOnlyPublishesDraftsOnUpdatedChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|createChange
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|id1
init|=
name|r1
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|r2
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|addDraft
argument_list|(
name|id1
argument_list|,
name|r1
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment1"
argument_list|)
argument_list|)
expr_stmt|;
name|CommentInfo
name|c2
init|=
name|addDraft
argument_list|(
name|id2
argument_list|,
name|r2
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|id2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|amendChange
argument_list|(
name|id2
argument_list|,
literal|"refs/for/master%publish-comments"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|drafts
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|cs2
init|=
name|getPublishedComments
argument_list|(
name|id2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cs2
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"comment2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cs2
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|id
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|c2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLastMessage
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|doesNotMatch
argument_list|(
literal|"[Cc]omment"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getLastMessage
argument_list|(
name|id2
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"Uploaded patch set 2.\n\n(1 comment)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishCommentsOnPushWithPreference ()
specifier|public
name|void
name|publishCommentsOnPushWithPreference
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment1"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|publishCommentsOnPush
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"comment1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|publishCommentsOnPushOverridingPreference ()
specifier|public
name|void
name|publishCommentsOnPushOverridingPreference
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|createChange
argument_list|()
decl_stmt|;
name|addDraft
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|r
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|newDraft
argument_list|(
name|FILE_NAME
argument_list|,
literal|1
argument_list|,
literal|"comment1"
argument_list|)
argument_list|)
expr_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|publishCommentsOnPush
operator|=
literal|true
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|id
argument_list|(
name|admin
operator|.
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|r
operator|=
name|amendChange
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|,
literal|"refs/for/master%no-publish-comments"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getPublishedComments
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushWithDraftOptionIsDisabledPerDefault ()
specifier|public
name|void
name|pushWithDraftOptionIsDisabledPerDefault
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|ref
range|:
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"refs/drafts/master"
argument_list|,
literal|"refs/for/master%draft"
argument_list|)
control|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushTo
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertErrorStatus
argument_list|()
expr_stmt|;
name|r
operator|.
name|assertMessage
argument_list|(
literal|"draft workflow is disabled"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.allowDrafts"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
annotation|@
name|Test
DECL|method|pushDraftGetsPrivateChange ()
specifier|public
name|void
name|pushDraftGetsPrivateChange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId1
init|=
name|createChange
argument_list|(
literal|"refs/drafts/master"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|String
name|changeId2
init|=
name|createChange
argument_list|(
literal|"refs/for/master%draft"
argument_list|)
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|ChangeInfo
name|info1
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeInfo
name|info2
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|info1
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info2
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info1
operator|.
name|isPrivate
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info2
operator|.
name|isPrivate
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info1
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info2
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"change.allowDrafts"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
annotation|@
name|Sandboxed
annotation|@
name|Test
DECL|method|pushWithDraftOptionToExistingNewChangeGetsChangeEdit ()
specifier|public
name|void
name|pushWithDraftOptionToExistingNewChangeGetsChangeEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|createChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|EditInfoSubject
operator|.
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|ChangeInfo
name|changeInfo
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ChangeStatus
name|originalChangeStatus
init|=
name|changeInfo
operator|.
name|status
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|amendChange
argument_list|(
name|changeId
argument_list|,
literal|"refs/drafts/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|changeInfo
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|originalChangeStatus
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|isPrivate
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|changeInfo
operator|.
name|revisions
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|EditInfoSubject
operator|.
name|assertThat
argument_list|(
name|getEdit
argument_list|(
name|changeId
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"receive.maxBatchCommits"
argument_list|,
name|value
operator|=
literal|"2"
argument_list|)
annotation|@
name|Test
DECL|method|maxBatchCommits ()
specifier|public
name|void
name|maxBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|commits
operator|.
name|addAll
argument_list|(
name|initChanges
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|master
init|=
literal|"refs/heads/master"
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|master
argument_list|)
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|commits
operator|.
name|addAll
argument_list|(
name|initChanges
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|master
argument_list|)
argument_list|,
name|master
argument_list|,
literal|"more than 2 commits, and skip-validation not set"
argument_list|)
expr_stmt|;
name|grantSkipValidation
argument_list|(
name|project
argument_list|,
name|master
argument_list|,
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|master
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|PUSH_OPTION_SKIP_VALIDATION
argument_list|)
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|r
argument_list|,
name|master
argument_list|)
expr_stmt|;
comment|// No open changes; branch was advanced.
name|String
name|q
init|=
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ObjectId
operator|::
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|" OR commit:"
argument_list|,
literal|"commit:"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|master
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|revision
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|commits
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushToPublishMagicBranchIsAllowed ()
specifier|public
name|void
name|pushToPublishMagicBranchIsAllowed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push to "refs/publish/*" will be a synonym of "refs/for/*".
name|createChange
argument_list|(
literal|"refs/publish/master"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|pushTo
argument_list|(
literal|"refs/publish/master"
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"Pushing to refs/publish/* is deprecated, use refs/for/* instead.\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNoteDbRef ()
specifier|public
name|void
name|pushNoteDbRef
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ref
init|=
literal|"refs/changes/34/1234/meta"
decl_stmt|;
name|RevCommit
name|c
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Junk NoteDb commit"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|PushResult
name|pr
init|=
name|pushOne
argument_list|(
name|testRepo
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pr
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|NoteDbPushOption
operator|.
name|OPTION_NAME
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|ref
argument_list|,
literal|"NoteDb update requires -o notedb=allow"
argument_list|)
expr_stmt|;
name|pr
operator|=
name|pushOne
argument_list|(
name|testRepo
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"notedb=foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pr
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Invalid value in -o notedb=foobar"
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|ref
argument_list|,
literal|"NoteDb update requires -o notedb=allow"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|opts
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"notedb=allow"
argument_list|)
decl_stmt|;
name|pr
operator|=
name|pushOne
argument_list|(
name|testRepo
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|ref
argument_list|,
literal|"NoteDb update requires access database permission"
argument_list|)
expr_stmt|;
name|allowGlobalCapabilities
argument_list|(
name|REGISTERED_USERS
argument_list|,
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
name|pr
operator|=
name|pushOne
argument_list|(
name|testRepo
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|ref
argument_list|,
literal|"prohibited by Gerrit: not permitted: create"
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/changes/*"
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/changes/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|grantSkipValidation
argument_list|(
name|project
argument_list|,
literal|"refs/changes/*"
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|pr
operator|=
name|pushOne
argument_list|(
name|testRepo
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|pushNoteDbRefWithoutOptionOnlyFailsThatCommand ()
specifier|public
name|void
name|pushNoteDbRefWithoutOptionOnlyFailsThatCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ref
init|=
literal|"refs/changes/34/1234/meta"
decl_stmt|;
name|RevCommit
name|noteDbCommit
init|=
name|testRepo
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"Junk NoteDb commit"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|changeCommit
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"A change"
argument_list|)
operator|.
name|insertChangeId
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|PushResult
name|pr
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|noteDbCommit
operator|.
name|name
argument_list|()
operator|+
literal|":"
operator|+
name|ref
argument_list|)
argument_list|,
operator|new
name|RefSpec
argument_list|(
name|changeCommit
operator|.
name|name
argument_list|()
operator|+
literal|":refs/heads/permitted"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|)
decl_stmt|;
name|assertPushRejected
argument_list|(
name|pr
argument_list|,
name|ref
argument_list|,
literal|"NoteDb update requires -o notedb=allow"
argument_list|)
expr_stmt|;
name|assertPushOk
argument_list|(
name|pr
argument_list|,
literal|"refs/heads/permitted"
argument_list|)
expr_stmt|;
block|}
DECL|method|newDraft (String path, int line, String message)
specifier|private
name|DraftInput
name|newDraft
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|DraftInput
name|d
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|d
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|d
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|d
operator|.
name|line
operator|=
name|line
expr_stmt|;
name|d
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|d
operator|.
name|unresolved
operator|=
literal|true
expr_stmt|;
return|return
name|d
return|;
block|}
DECL|method|addDraft (String changeId, String revId, DraftInput in)
specifier|private
name|CommentInfo
name|addDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|DraftInput
name|in
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getPublishedComments (String changeId)
specifier|private
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|getPublishedComments
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|comments
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLastMessage (String changeId)
specifier|private
name|String
name|getLastMessage
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Streams
operator|.
name|findLast
argument_list|(
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|get
argument_list|(
name|MESSAGES
argument_list|)
operator|.
name|messages
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|m
lambda|->
name|m
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|assertThatUserIsOnlyReviewer (ChangeInfo ci, TestAccount reviewer)
specifier|private
name|void
name|assertThatUserIsOnlyReviewer
parameter_list|(
name|ChangeInfo
name|ci
parameter_list|,
name|TestAccount
name|reviewer
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ci
operator|.
name|reviewers
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ci
operator|.
name|reviewers
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ci
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|email
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|reviewer
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
DECL|method|pushWithReviewerInFooter (String nameEmail, TestAccount expectedReviewer)
specifier|private
name|void
name|pushWithReviewerInFooter
parameter_list|(
name|String
name|nameEmail
parameter_list|,
name|TestAccount
name|expectedReviewer
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|5
decl_stmt|;
name|String
name|r
init|=
literal|"refs/for/master"
decl_stmt|;
name|ObjectId
name|initialHead
init|=
name|testRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|createChanges
argument_list|(
name|n
argument_list|,
name|r
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"Acked-By: "
operator|+
name|nameEmail
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|c
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"reviewers for "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|expectedReviewer
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedReviewer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove reviewer from PS1 so we can test adding this same reviewer on PS2 below.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|reviewer
argument_list|(
name|expectedReviewer
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|byCommit
argument_list|(
name|c
argument_list|)
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits2
init|=
name|amendChanges
argument_list|(
name|initialHead
argument_list|,
name|commits
argument_list|,
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|c
init|=
name|commits2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeData
name|cd
init|=
name|byCommit
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"reviewers for "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|expectedReviewer
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedReviewer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|byCommit
argument_list|(
name|c
argument_list|)
operator|.
name|reviewers
argument_list|()
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createChanges (int n, String refsFor)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|createChanges
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|refsFor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createChanges
argument_list|(
name|n
argument_list|,
name|refsFor
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createChanges (int n, String refsFor, List<String> footerLines)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|createChanges
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|refsFor
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|footerLines
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
name|initChanges
argument_list|(
name|n
argument_list|,
name|footerLines
argument_list|)
decl_stmt|;
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|refsFor
argument_list|,
literal|false
argument_list|)
argument_list|,
name|refsFor
argument_list|)
expr_stmt|;
return|return
name|commits
return|;
block|}
DECL|method|initChanges (int n)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|initChanges
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|initChanges
argument_list|(
name|n
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|initChanges (int n, List<String> footerLines)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|initChanges
parameter_list|(
name|int
name|n
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|footerLines
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|msg
init|=
literal|"Change "
operator|+
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|footerLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|msg
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|footerLines
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|msg
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|cb
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|msg
argument_list|)
operator|.
name|insertChangeId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cb
operator|.
name|parent
argument_list|(
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|c
init|=
name|cb
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|commits
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|commits
return|;
block|}
DECL|method|amendChanges ( ObjectId initialHead, List<RevCommit> origCommits, String refsFor)
specifier|private
name|List
argument_list|<
name|RevCommit
argument_list|>
name|amendChanges
parameter_list|(
name|ObjectId
name|initialHead
parameter_list|,
name|List
argument_list|<
name|RevCommit
argument_list|>
name|origCommits
parameter_list|,
name|String
name|refsFor
parameter_list|)
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|initialHead
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RevCommit
argument_list|>
name|newCommits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|origCommits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|origCommits
control|)
block|{
name|String
name|msg
init|=
name|c
operator|.
name|getShortMessage
argument_list|()
operator|+
literal|"v2"
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getShortMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|)
condition|)
block|{
name|msg
operator|=
name|msg
operator|+
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|substring
argument_list|(
name|c
operator|.
name|getShortMessage
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|cb
init|=
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newCommits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cb
operator|.
name|parent
argument_list|(
name|origCommits
operator|.
name|get
argument_list|(
name|newCommits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RevCommit
name|c2
init|=
name|cb
operator|.
name|create
argument_list|()
decl_stmt|;
name|testRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|newCommits
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
name|assertPushOk
argument_list|(
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|refsFor
argument_list|,
literal|false
argument_list|)
argument_list|,
name|refsFor
argument_list|)
expr_stmt|;
return|return
name|newCommits
return|;
block|}
DECL|method|getPatchSetRevisions (ChangeData cd)
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getPatchSetRevisions
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|revisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|cd
operator|.
name|patchSets
argument_list|()
control|)
block|{
name|revisions
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|revisions
return|;
block|}
DECL|method|byCommit (ObjectId id)
specifier|private
name|ChangeData
name|byCommit
parameter_list|(
name|ObjectId
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|named
argument_list|(
literal|"change for "
operator|+
name|id
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|byChangeId (Change.Id id)
specifier|private
name|ChangeData
name|byChangeId
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byLegacyChangeId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cds
argument_list|)
operator|.
name|named
argument_list|(
literal|"change "
operator|+
name|id
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|cds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|pushForReviewOk (TestRepository<?> testRepo)
specifier|private
specifier|static
name|void
name|pushForReviewOk
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|)
throws|throws
name|GitAPIException
block|{
name|pushForReview
argument_list|(
name|testRepo
argument_list|,
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|OK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|pushForReviewRejected (TestRepository<?> testRepo, String expectedMessage)
specifier|private
specifier|static
name|void
name|pushForReviewRejected
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
throws|throws
name|GitAPIException
block|{
name|pushForReview
argument_list|(
name|testRepo
argument_list|,
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|pushForReview ( TestRepository<?> testRepo, RemoteRefUpdate.Status expectedStatus, String expectedMessage)
specifier|private
specifier|static
name|void
name|pushForReview
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepo
parameter_list|,
name|RemoteRefUpdate
operator|.
name|Status
name|expectedStatus
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
throws|throws
name|GitAPIException
block|{
name|String
name|ref
init|=
literal|"refs/for/master"
decl_stmt|;
name|PushResult
name|r
init|=
name|pushHead
argument_list|(
name|testRepo
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|refUpdate
init|=
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedMessage
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|grantSkipValidation (Project.NameKey project, String ref, AccountGroup.UUID groupUuid)
specifier|private
name|void
name|grantSkipValidation
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|Exception
block|{
comment|// See SKIP_VALIDATION implementation in default permission backend.
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|FORGE_AUTHOR
argument_list|,
name|groupUuid
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|FORGE_COMMITTER
argument_list|,
name|groupUuid
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|FORGE_SERVER
argument_list|,
name|groupUuid
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|PUSH_MERGE
argument_list|,
name|groupUuid
argument_list|,
literal|"refs/for/"
operator|+
name|ref
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|amendChange (String changeId, String ref)
specifier|private
name|PushOneCommit
operator|.
name|Result
name|amendChange
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|amendChange
argument_list|(
name|changeId
argument_list|,
name|ref
argument_list|,
name|admin
argument_list|,
name|testRepo
argument_list|)
return|;
block|}
DECL|method|getOwnerEmail (String changeId)
specifier|private
name|String
name|getOwnerEmail
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|get
argument_list|(
name|changeId
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
operator|.
name|owner
operator|.
name|email
return|;
block|}
DECL|method|getReviewerEmails (String changeId, ReviewerState state)
specifier|private
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|getReviewerEmails
parameter_list|(
name|String
name|changeId
parameter_list|,
name|ReviewerState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|infos
init|=
name|get
argument_list|(
name|changeId
argument_list|,
name|DETAILED_LABELS
argument_list|,
name|DETAILED_ACCOUNTS
argument_list|)
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
return|return
name|infos
operator|!=
literal|null
condition|?
name|infos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|email
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
else|:
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
block|}
end_class

end_unit

