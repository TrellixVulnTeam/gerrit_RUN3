begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|deleteRef
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|HEAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|REJECTED_OTHER_REASON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|ForcePushIT
specifier|public
class|class
name|ForcePushIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Test
DECL|method|forcePushNotAllowed ()
specifier|public
name|void
name|forcePushNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|PushOneCommit
name|push1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Reset HEAD to initial so the new change is a non-fast forward
name|RefUpdate
name|ru
init|=
name|repo
argument_list|()
operator|.
name|updateRef
argument_list|(
name|HEAD
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|forceUpdate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|push2
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertErrorStatus
argument_list|(
literal|"need 'Force Push' privilege."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|forcePushAllowed ()
specifier|public
name|void
name|forcePushAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r1
init|=
name|push1
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// Reset HEAD to initial so the new change is a non-fast forward
name|RefUpdate
name|ru
init|=
name|repo
argument_list|()
operator|.
name|updateRef
argument_list|(
name|HEAD
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|forceUpdate
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"change2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content"
argument_list|)
decl_stmt|;
name|push2
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r2
init|=
name|push2
operator|.
name|to
argument_list|(
literal|"refs/heads/master"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNotAllowed ()
specifier|public
name|void
name|deleteNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertDeleteRef
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteNotAllowedWithOnlyPushPermission ()
specifier|public
name|void
name|deleteNotAllowedWithOnlyPushPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertDeleteRef
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAllowedWithForcePushPermission ()
specifier|public
name|void
name|deleteAllowedWithForcePushPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertDeleteRef
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteAllowedWithDeletePermission ()
specifier|public
name|void
name|deleteAllowedWithDeletePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/*"
argument_list|,
name|Permission
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertDeleteRef
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeleteRef (RemoteRefUpdate.Status expectedStatus)
specifier|private
name|void
name|assertDeleteRef
parameter_list|(
name|RemoteRefUpdate
operator|.
name|Status
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|BranchInput
name|in
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|ref
operator|=
literal|"refs/heads/test"
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|in
operator|.
name|ref
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|PushResult
name|result
init|=
name|deleteRef
argument_list|(
name|testRepo
argument_list|,
name|in
operator|.
name|ref
argument_list|)
decl_stmt|;
name|RemoteRefUpdate
name|refUpdate
init|=
name|result
operator|.
name|getRemoteUpdate
argument_list|(
name|in
operator|.
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refUpdate
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedStatus
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

