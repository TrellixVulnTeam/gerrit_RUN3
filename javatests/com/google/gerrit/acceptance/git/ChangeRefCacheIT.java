begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ChangeRefCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
operator|.
name|RefFilterOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the ChangeRefCache by running ls-remote calls and conditionally disabling the index and  * NoteDb. The cache is enabled by default.  *  *<p>Why are we not just testing ChangeRefCache directly? Our ref filtering code is rather complex  * and it is easy to get something wrong there. We want our assumptions about the performance of the  * cache to be validated against the entire component rather than just the cache.  */
end_comment

begin_class
annotation|@
name|NoHttpd
DECL|class|ChangeRefCacheIT
specifier|public
class|class
name|ChangeRefCacheIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|changeRefCache
annotation|@
name|Inject
specifier|private
name|ChangeRefCache
name|changeRefCache
decl_stmt|;
DECL|field|permissionBackend
annotation|@
name|Inject
specifier|private
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We want full ref evaluation so that we hit the cache every time.
name|baseConfig
operator|.
name|setBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"skipFullRefEvaluationIfAllRefsAreVisible"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure we use only the change index for getting initial data populated and don't touch NoteDb.    */
annotation|@
name|Test
DECL|method|useIndexForBootstrapping ()
specifier|public
name|void
name|useIndexForBootstrapping
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeData
name|change
init|=
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
decl_stmt|;
comment|// TODO(hiesel) Rework as AutoClosable. Here and below.
name|changeRefCache
operator|.
name|resetBootstrappedProjects
argument_list|()
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|disableDb
argument_list|()
decl_stmt|;
try|try
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure we use only the change index for getting initial data populated and don't require any    * storage backend after that as long the data didn't change.    */
annotation|@
name|Test
DECL|method|serveResultsFromCacheAfterInitialBootstrap ()
specifier|public
name|void
name|serveResultsFromCacheAfterInitialBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeData
name|change
init|=
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|changeRefCache
operator|.
name|resetBootstrappedProjects
argument_list|()
expr_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|disableDb
argument_list|()
decl_stmt|;
try|try
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|// No change since our first call, so this time we don't bootstrap or touch NoteDb
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx2
init|=
name|disableDb
argument_list|()
decl_stmt|;
try|try
block|{
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure we use only the change index for getting initial data populated and NoteDb for reloading    * data that changed since.    */
annotation|@
name|Test
DECL|method|useIndexForBootstrappingAndDbForDeltaReload ()
specifier|public
name|void
name|useIndexForBootstrappingAndDbForDeltaReload
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeData
name|change1
init|=
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|disableDb
argument_list|()
decl_stmt|;
comment|// Bootstrap: No NoteDb access as we expect it to use the index.
name|changeRefCache
operator|.
name|resetBootstrappedProjects
argument_list|()
expr_stmt|;
try|try
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|// Delta reload: No index access as we expect it to use NoteDb.
name|ChangeData
name|change2
init|=
name|createChange
argument_list|()
operator|.
name|getChange
argument_list|()
decl_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change2
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure we use only the change index for getting initial data populated and NoteDb for reloading    * data that changed since.    */
annotation|@
name|Test
DECL|method|useDbForDeltaReloadOnNewPatchSet ()
specifier|public
name|void
name|useDbForDeltaReloadOnNewPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeData
name|change1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"original subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|disableDb
argument_list|()
decl_stmt|;
comment|// Bootstrap: No NoteDb access as we expect it to use the index.
name|changeRefCache
operator|.
name|resetBootstrappedProjects
argument_list|()
expr_stmt|;
try|try
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|// Delta reload: No index access as we expect it to use NoteDb.
name|ChangeData
name|change2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"subject2"
argument_list|,
literal|"a"
argument_list|,
literal|"a2"
argument_list|,
name|change1
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSet
argument_list|>
name|patchSets
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|change2
operator|.
name|patchSets
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|patchSets
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ctx2
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|patchSets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|,
name|patchSets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure we use only the change index for getting initial data populated and NoteDb for reloading    * data that changed since.    */
annotation|@
name|Test
DECL|method|useDbForIterativeFetchingOnMetadataChange ()
specifier|public
name|void
name|useDbForIterativeFetchingOnMetadataChange
parameter_list|()
throws|throws
name|Exception
block|{
name|ChangeData
name|change1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|getIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"original subject"
argument_list|,
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
operator|.
name|getChange
argument_list|()
decl_stmt|;
comment|// Bootstrap: No NoteDb access as we expect it to use the index.
name|AcceptanceTestRequestScope
operator|.
name|Context
name|ctx
init|=
name|disableDb
argument_list|()
decl_stmt|;
try|try
block|{
name|changeRefCache
operator|.
name|resetBootstrappedProjects
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|enableDb
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
comment|// user can see public change
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Delta reload: No index access as we expect it to use NoteDb.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
comment|// user can't see private change from admin
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
comment|// admin adds the user as reviewer
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|addReviewer
argument_list|(
name|user
operator|.
name|email
argument_list|)
expr_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|)
block|{
comment|// Use can see private change
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|change1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|change1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertUploadPackRefs (String... expectedRefs)
specifier|private
name|void
name|assertUploadPackRefs
parameter_list|(
name|String
modifier|...
name|expectedRefs
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|assertRefs
argument_list|(
name|repo
argument_list|,
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|(
name|user
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
argument_list|,
name|expectedRefs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRefs ( Repository repo, PermissionBackend.ForProject forProject, String... expectedRefs)
specifier|private
name|void
name|assertRefs
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|PermissionBackend
operator|.
name|ForProject
name|forProject
parameter_list|,
name|String
modifier|...
name|expectedRefs
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|all
init|=
name|getAllRefs
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|forProject
operator|.
name|filter
argument_list|(
name|all
argument_list|,
name|repo
argument_list|,
name|RefFilterOptions
operator|.
name|defaults
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedRefs
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllRefs (Repository repo)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|getAllRefs
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toMap
argument_list|(
name|Ref
operator|::
name|getName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

