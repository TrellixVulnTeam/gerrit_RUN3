begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubscribeSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEditor
operator|.
name|PathEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|dircache
operator|.
name|DirCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|AbstractSubmoduleSubscription
specifier|public
specifier|abstract
class|class
name|AbstractSubmoduleSubscription
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|superRepo
specifier|protected
name|TestRepository
argument_list|<
name|?
argument_list|>
name|superRepo
decl_stmt|;
DECL|field|superKey
specifier|protected
name|Project
operator|.
name|NameKey
name|superKey
decl_stmt|;
DECL|field|subRepo
specifier|protected
name|TestRepository
argument_list|<
name|?
argument_list|>
name|subRepo
decl_stmt|;
DECL|field|subKey
specifier|protected
name|Project
operator|.
name|NameKey
name|subKey
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|protected
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|method|getSubmitType ()
specifier|protected
name|SubmitType
name|getSubmitType
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getEnum
argument_list|(
literal|"project"
argument_list|,
literal|null
argument_list|,
literal|"submitType"
argument_list|,
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
return|;
block|}
DECL|method|submitByMergeAlways ()
specifier|protected
specifier|static
name|Config
name|submitByMergeAlways
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEnum
argument_list|(
literal|"project"
argument_list|,
literal|null
argument_list|,
literal|"submitType"
argument_list|,
name|SubmitType
operator|.
name|MERGE_ALWAYS
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|submitByMergeIfNecessary ()
specifier|protected
specifier|static
name|Config
name|submitByMergeIfNecessary
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEnum
argument_list|(
literal|"project"
argument_list|,
literal|null
argument_list|,
literal|"submitType"
argument_list|,
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|submitByCherryPickConfig ()
specifier|protected
specifier|static
name|Config
name|submitByCherryPickConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEnum
argument_list|(
literal|"project"
argument_list|,
literal|null
argument_list|,
literal|"submitType"
argument_list|,
name|SubmitType
operator|.
name|CHERRY_PICK
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|submitByRebaseAlwaysConfig ()
specifier|protected
specifier|static
name|Config
name|submitByRebaseAlwaysConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEnum
argument_list|(
literal|"project"
argument_list|,
literal|null
argument_list|,
literal|"submitType"
argument_list|,
name|SubmitType
operator|.
name|REBASE_ALWAYS
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|submitByRebaseIfNecessaryConfig ()
specifier|protected
specifier|static
name|Config
name|submitByRebaseIfNecessaryConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setEnum
argument_list|(
literal|"project"
argument_list|,
literal|null
argument_list|,
literal|"submitType"
argument_list|,
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|grantPush (Project.NameKey project)
specifier|protected
name|void
name|grantPush
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|project
argument_list|,
literal|"refs/for/refs/heads/*"
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|)
expr_stmt|;
block|}
DECL|method|createProjectForPush (SubmitType submitType)
specifier|protected
name|Project
operator|.
name|NameKey
name|createProjectForPush
parameter_list|(
name|SubmitType
name|submitType
parameter_list|)
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|submitType
argument_list|(
name|submitType
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|grantPush
argument_list|(
name|project
argument_list|)
expr_stmt|;
return|return
name|project
return|;
block|}
DECL|field|contentCounter
specifier|private
specifier|static
name|AtomicInteger
name|contentCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|superKey
operator|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
expr_stmt|;
name|subKey
operator|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
expr_stmt|;
name|superRepo
operator|=
name|cloneProject
argument_list|(
name|superKey
argument_list|)
expr_stmt|;
name|subRepo
operator|=
name|cloneProject
argument_list|(
name|subKey
argument_list|)
expr_stmt|;
block|}
DECL|method|pushChangeTo ( TestRepository<?> repo, String ref, String file, String content, String message, String topic)
specifier|protected
name|ObjectId
name|pushChangeTo
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|ret
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
name|message
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|,
name|content
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|pushedRef
init|=
name|ref
decl_stmt|;
if|if
condition|(
operator|!
name|topic
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pushedRef
operator|+=
literal|"/"
operator|+
name|name
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
name|String
name|refspec
init|=
literal|"HEAD:"
operator|+
name|pushedRef
decl_stmt|;
name|Iterable
argument_list|<
name|PushResult
argument_list|>
name|res
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|refspec
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|RemoteRefUpdate
name|u
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|res
argument_list|)
operator|.
name|getRemoteUpdate
argument_list|(
name|pushedRef
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|u
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|u
operator|.
name|getNewObjectId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|pushChangeTo (TestRepository<?> repo, String ref, String message, String topic)
specifier|protected
name|ObjectId
name|pushChangeTo
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|pushChangeTo
argument_list|(
name|repo
argument_list|,
name|ref
argument_list|,
literal|"a.txt"
argument_list|,
literal|"a contents: "
operator|+
name|contentCounter
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|message
argument_list|,
name|topic
argument_list|)
return|;
block|}
DECL|method|pushChangeTo (TestRepository<?> repo, String branch)
specifier|protected
name|ObjectId
name|pushChangeTo
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|pushChangeTo
argument_list|(
name|repo
argument_list|,
literal|"refs/heads/"
operator|+
name|branch
argument_list|,
literal|"some change"
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|pushChangesTo (TestRepository<?> repo, String branch, int numChanges)
specifier|protected
name|ObjectId
name|pushChangesTo
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|int
name|numChanges
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChanges
condition|;
name|i
operator|++
control|)
block|{
name|repo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"Message "
operator|+
name|i
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|(
literal|"file"
argument_list|)
argument_list|,
literal|"content"
operator|+
name|i
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|String
name|remoteBranch
init|=
literal|"refs/heads/"
operator|+
name|branch
decl_stmt|;
name|Iterable
argument_list|<
name|PushResult
argument_list|>
name|res
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:"
operator|+
name|remoteBranch
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Status
argument_list|>
name|status
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|res
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getRemoteUpdate
argument_list|(
name|remoteBranch
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
return|return
name|Iterables
operator|.
name|getLast
argument_list|(
name|res
argument_list|)
operator|.
name|getRemoteUpdate
argument_list|(
name|remoteBranch
argument_list|)
operator|.
name|getNewObjectId
argument_list|()
return|;
block|}
DECL|method|allowMatchingSubmoduleSubscription ( Project.NameKey submodule, String subBranch, Project.NameKey superproject, String superBranch)
specifier|protected
name|void
name|allowMatchingSubmoduleSubscription
parameter_list|(
name|Project
operator|.
name|NameKey
name|submodule
parameter_list|,
name|String
name|subBranch
parameter_list|,
name|Project
operator|.
name|NameKey
name|superproject
parameter_list|,
name|String
name|superBranch
parameter_list|)
throws|throws
name|Exception
block|{
name|allowSubmoduleSubscription
argument_list|(
name|submodule
argument_list|,
name|subBranch
argument_list|,
name|superproject
argument_list|,
name|superBranch
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|allowSubmoduleSubscription ( Project.NameKey submodule, String subBranch, Project.NameKey superproject, String superBranch, boolean match)
specifier|protected
name|void
name|allowSubmoduleSubscription
parameter_list|(
name|Project
operator|.
name|NameKey
name|submodule
parameter_list|,
name|String
name|subBranch
parameter_list|,
name|Project
operator|.
name|NameKey
name|superproject
parameter_list|,
name|String
name|superBranch
parameter_list|,
name|boolean
name|match
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|submodule
argument_list|)
init|)
block|{
name|md
operator|.
name|setMessage
argument_list|(
literal|"Added superproject subscription"
argument_list|)
expr_stmt|;
name|SubscribeSection
name|s
decl_stmt|;
name|ProjectConfig
name|pc
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|.
name|getSubscribeSections
argument_list|()
operator|.
name|containsKey
argument_list|(
name|superproject
argument_list|)
condition|)
block|{
name|s
operator|=
name|pc
operator|.
name|getSubscribeSections
argument_list|()
operator|.
name|get
argument_list|(
name|superproject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
operator|new
name|SubscribeSection
argument_list|(
name|superproject
argument_list|)
expr_stmt|;
block|}
name|String
name|refspec
decl_stmt|;
if|if
condition|(
name|superBranch
operator|==
literal|null
condition|)
block|{
name|refspec
operator|=
name|subBranch
expr_stmt|;
block|}
else|else
block|{
name|refspec
operator|=
name|subBranch
operator|+
literal|":"
operator|+
name|superBranch
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
name|s
operator|.
name|addMatchingRefSpec
argument_list|(
name|refspec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|addMultiMatchRefSpec
argument_list|(
name|refspec
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|addSubscribeSection
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ObjectId
name|oldId
init|=
name|pc
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|ObjectId
name|newId
init|=
name|pc
operator|.
name|commit
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newId
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|pc
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSubmoduleSubscription ( TestRepository<?> repo, String branch, Project.NameKey subscribeToRepo, String subscribeToBranch)
specifier|protected
name|void
name|createSubmoduleSubscription
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|Project
operator|.
name|NameKey
name|subscribeToRepo
parameter_list|,
name|String
name|subscribeToBranch
parameter_list|)
throws|throws
name|Exception
block|{
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subscribeToRepo
argument_list|,
name|subscribeToBranch
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|repo
argument_list|,
name|branch
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|createRelativeSubmoduleSubscription ( TestRepository<?> repo, String branch, String subscribeToRepoPrefix, Project.NameKey subscribeToRepo, String subscribeToBranch)
specifier|protected
name|void
name|createRelativeSubmoduleSubscription
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|subscribeToRepoPrefix
parameter_list|,
name|Project
operator|.
name|NameKey
name|subscribeToRepo
parameter_list|,
name|String
name|subscribeToBranch
parameter_list|)
throws|throws
name|Exception
block|{
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareRelativeSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subscribeToRepoPrefix
argument_list|,
name|subscribeToRepo
argument_list|,
name|subscribeToBranch
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|repo
argument_list|,
name|branch
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareRelativeSubmoduleConfigEntry ( Config config, String subscribeToRepoPrefix, Project.NameKey subscribeToRepo, String subscribeToBranch)
specifier|protected
name|void
name|prepareRelativeSubmoduleConfigEntry
parameter_list|(
name|Config
name|config
parameter_list|,
name|String
name|subscribeToRepoPrefix
parameter_list|,
name|Project
operator|.
name|NameKey
name|subscribeToRepo
parameter_list|,
name|String
name|subscribeToBranch
parameter_list|)
block|{
name|String
name|url
init|=
name|subscribeToRepoPrefix
operator|+
name|subscribeToRepo
operator|.
name|get
argument_list|()
decl_stmt|;
name|config
operator|.
name|setString
argument_list|(
literal|"submodule"
argument_list|,
name|subscribeToRepo
operator|.
name|get
argument_list|()
argument_list|,
literal|"path"
argument_list|,
name|subscribeToRepo
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setString
argument_list|(
literal|"submodule"
argument_list|,
name|subscribeToRepo
operator|.
name|get
argument_list|()
argument_list|,
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|subscribeToBranch
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setString
argument_list|(
literal|"submodule"
argument_list|,
name|subscribeToRepo
operator|.
name|get
argument_list|()
argument_list|,
literal|"branch"
argument_list|,
name|subscribeToBranch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareSubmoduleConfigEntry ( Config config, Project.NameKey subscribeToRepo, String subscribeToBranch)
specifier|protected
name|void
name|prepareSubmoduleConfigEntry
parameter_list|(
name|Config
name|config
parameter_list|,
name|Project
operator|.
name|NameKey
name|subscribeToRepo
parameter_list|,
name|String
name|subscribeToBranch
parameter_list|)
block|{
comment|// The submodule subscription module checks for gerrit.canonicalWebUrl to
comment|// detect if it's configured for automatic updates. It doesn't matter if
comment|// it serves from that URL.
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subscribeToRepo
argument_list|,
name|subscribeToRepo
argument_list|,
name|subscribeToBranch
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareSubmoduleConfigEntry ( Config config, Project.NameKey subscribeToRepo, Project.NameKey subscribeToRepoPath, String subscribeToBranch)
specifier|protected
name|void
name|prepareSubmoduleConfigEntry
parameter_list|(
name|Config
name|config
parameter_list|,
name|Project
operator|.
name|NameKey
name|subscribeToRepo
parameter_list|,
name|Project
operator|.
name|NameKey
name|subscribeToRepoPath
parameter_list|,
name|String
name|subscribeToBranch
parameter_list|)
block|{
comment|// The submodule subscription module checks for gerrit.canonicalWebUrl to
comment|// detect if it's configured for automatic updates. It doesn't matter if
comment|// it serves from that URL.
name|String
name|url
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalWebUrl"
argument_list|)
operator|+
literal|"/"
operator|+
name|subscribeToRepo
decl_stmt|;
name|config
operator|.
name|setString
argument_list|(
literal|"submodule"
argument_list|,
name|subscribeToRepoPath
operator|.
name|get
argument_list|()
argument_list|,
literal|"path"
argument_list|,
name|subscribeToRepoPath
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setString
argument_list|(
literal|"submodule"
argument_list|,
name|subscribeToRepoPath
operator|.
name|get
argument_list|()
argument_list|,
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|subscribeToBranch
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setString
argument_list|(
literal|"submodule"
argument_list|,
name|subscribeToRepoPath
operator|.
name|get
argument_list|()
argument_list|,
literal|"branch"
argument_list|,
name|subscribeToBranch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pushSubmoduleConfig (TestRepository<?> repo, String branch, Config config)
specifier|protected
name|void
name|pushSubmoduleConfig
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|Config
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|repo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"subject: adding new subscription"
argument_list|)
operator|.
name|add
argument_list|(
literal|".gitmodules"
argument_list|,
name|config
operator|.
name|toText
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|repo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/"
operator|+
name|branch
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
DECL|method|expectToHaveSubmoduleState ( TestRepository<?> repo, String branch, Project.NameKey submodule, TestRepository<?> subRepo, String subBranch)
specifier|protected
name|void
name|expectToHaveSubmoduleState
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|Project
operator|.
name|NameKey
name|submodule
parameter_list|,
name|TestRepository
argument_list|<
name|?
argument_list|>
name|subRepo
parameter_list|,
name|String
name|subBranch
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|commitId
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|ObjectId
name|subHead
init|=
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/"
operator|+
name|subBranch
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|RevTree
name|tree
init|=
name|c
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|RevObject
name|actualId
init|=
name|repo
operator|.
name|get
argument_list|(
name|tree
argument_list|,
name|submodule
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|subHead
argument_list|)
expr_stmt|;
block|}
DECL|method|expectToHaveSubmoduleState ( TestRepository<?> repo, String branch, Project.NameKey submodule, ObjectId expectedId)
specifier|protected
name|void
name|expectToHaveSubmoduleState
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|Project
operator|.
name|NameKey
name|submodule
parameter_list|,
name|ObjectId
name|expectedId
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|commitId
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|RevTree
name|tree
init|=
name|c
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|RevObject
name|actualId
init|=
name|repo
operator|.
name|get
argument_list|(
name|tree
argument_list|,
name|submodule
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteAllSubscriptions (TestRepository<?> repo, String branch)
specifier|protected
name|void
name|deleteAllSubscriptions
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|repo
operator|.
name|reset
argument_list|(
literal|"refs/remotes/origin/"
operator|+
name|branch
argument_list|)
expr_stmt|;
name|ObjectId
name|expectedId
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"delete contents in .gitmodules"
argument_list|)
operator|.
name|add
argument_list|(
literal|".gitmodules"
argument_list|,
literal|""
argument_list|)
comment|// Just remove the contents of the file!
operator|.
name|create
argument_list|()
decl_stmt|;
name|repo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/"
operator|+
name|branch
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|ObjectId
name|actualId
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actualId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteGitModulesFile (TestRepository<?> repo, String branch)
specifier|protected
name|void
name|deleteGitModulesFile
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|repo
operator|.
name|reset
argument_list|(
literal|"refs/remotes/origin/"
operator|+
name|branch
argument_list|)
expr_stmt|;
name|ObjectId
name|expectedId
init|=
name|repo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"delete .gitmodules"
argument_list|)
operator|.
name|rm
argument_list|(
literal|".gitmodules"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|repo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/"
operator|+
name|branch
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|ObjectId
name|actualId
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actualId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedId
argument_list|)
expr_stmt|;
block|}
DECL|method|hasSubmodule (TestRepository<?> repo, String branch, Project.NameKey submodule)
specifier|protected
name|boolean
name|hasSubmodule
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|Project
operator|.
name|NameKey
name|submodule
parameter_list|)
throws|throws
name|Exception
block|{
name|Ref
name|branchTip
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|branchTip
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ObjectId
name|commitId
init|=
name|branchTip
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|RevTree
name|tree
init|=
name|c
operator|.
name|getTree
argument_list|()
decl_stmt|;
try|try
block|{
name|repo
operator|.
name|get
argument_list|(
name|tree
argument_list|,
name|submodule
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|expectToHaveCommitMessage ( TestRepository<?> repo, String branch, String expectedMessage)
specifier|protected
name|void
name|expectToHaveCommitMessage
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|commitId
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|c
operator|.
name|getFullMessage
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|getAuthor (TestRepository<?> repo, String branch)
specifier|protected
name|PersonIdent
name|getAuthor
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|commitId
init|=
name|repo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/"
operator|+
name|branch
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|RevWalk
name|rw
init|=
name|repo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|getAuthorIdent
argument_list|()
return|;
block|}
DECL|method|directUpdateSubmodule ( Project.NameKey project, String refName, Project.NameKey path, AnyObjectId id)
specifier|protected
name|void
name|directUpdateSubmodule
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|refName
parameter_list|,
name|Project
operator|.
name|NameKey
name|path
parameter_list|,
name|AnyObjectId
name|id
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|serverRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|serverRepo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|serverRepo
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|serverRepo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|)
operator|.
name|named
argument_list|(
name|refName
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|ObjectId
name|oldCommitId
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|DirCache
name|dc
init|=
name|DirCache
operator|.
name|newInCore
argument_list|()
decl_stmt|;
name|DirCacheBuilder
name|b
init|=
name|dc
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|addTree
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|DirCacheEntry
operator|.
name|STAGE_0
argument_list|,
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|rw
operator|.
name|parseTree
argument_list|(
name|oldCommitId
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|finish
argument_list|()
expr_stmt|;
name|DirCacheEditor
name|e
init|=
name|dc
operator|.
name|editor
argument_list|()
decl_stmt|;
name|e
operator|.
name|add
argument_list|(
operator|new
name|PathEdit
argument_list|(
name|path
operator|.
name|get
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|DirCacheEntry
name|ent
parameter_list|)
block|{
name|ent
operator|.
name|setFileMode
argument_list|(
name|FileMode
operator|.
name|GITLINK
argument_list|)
expr_stmt|;
name|ent
operator|.
name|setObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|e
operator|.
name|finish
argument_list|()
expr_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|addParentId
argument_list|(
name|oldCommitId
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setTreeId
argument_list|(
name|dc
operator|.
name|writeTree
argument_list|(
name|ins
argument_list|)
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setMessage
argument_list|(
literal|"Direct update submodule "
operator|+
name|path
argument_list|)
expr_stmt|;
name|ObjectId
name|newCommitId
init|=
name|ins
operator|.
name|insert
argument_list|(
name|cb
argument_list|)
decl_stmt|;
name|ins
operator|.
name|flush
argument_list|()
expr_stmt|;
name|RefUpdate
name|ru
init|=
name|serverRepo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|oldCommitId
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|newCommitId
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ru
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FAST_FORWARD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

