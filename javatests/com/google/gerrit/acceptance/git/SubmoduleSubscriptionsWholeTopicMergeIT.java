begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|getChangeId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
operator|.
name|NameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|TestSubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|SubmoduleSubscriptionsWholeTopicMergeIT
specifier|public
class|class
name|SubmoduleSubscriptionsWholeTopicMergeIT
extends|extends
name|AbstractSubmoduleSubscription
block|{
annotation|@
name|ConfigSuite
operator|.
name|Default
DECL|method|mergeIfNecessary ()
specifier|public
specifier|static
name|Config
name|mergeIfNecessary
parameter_list|()
block|{
return|return
name|submitByMergeIfNecessary
argument_list|()
return|;
block|}
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|mergeAlways ()
specifier|public
specifier|static
name|Config
name|mergeAlways
parameter_list|()
block|{
return|return
name|submitByMergeAlways
argument_list|()
return|;
block|}
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|cherryPick ()
specifier|public
specifier|static
name|Config
name|cherryPick
parameter_list|()
block|{
return|return
name|submitByCherryPickConfig
argument_list|()
return|;
block|}
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|rebaseAlways ()
specifier|public
specifier|static
name|Config
name|rebaseAlways
parameter_list|()
block|{
return|return
name|submitByRebaseAlwaysConfig
argument_list|()
return|;
block|}
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|rebaseIfNecessary ()
specifier|public
specifier|static
name|Config
name|rebaseIfNecessary
parameter_list|()
block|{
return|return
name|submitByRebaseIfNecessaryConfig
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|subscriptionUpdateOfManyChanges ()
specifier|public
name|void
name|subscriptionUpdateOfManyChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"some change"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"a contents "
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevCommit
name|c
init|=
name|subRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|subHEAD
argument_list|)
decl_stmt|;
name|RevCommit
name|c1
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"first change"
argument_list|)
operator|.
name|add
argument_list|(
literal|"asdf"
argument_list|,
literal|"asdf\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/for/master/"
operator|+
name|name
argument_list|(
literal|"topic-foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|subRepo
operator|.
name|reset
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|c2
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"qwerty"
argument_list|)
operator|.
name|add
argument_list|(
literal|"qwerty"
argument_list|,
literal|"qwerty"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"qwerty followup"
argument_list|)
operator|.
name|add
argument_list|(
literal|"qwerty"
argument_list|,
literal|"qwerty\nqwerty\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/for/master/"
operator|+
name|name
argument_list|(
literal|"topic-foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|String
name|id1
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|c1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|c2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id3
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|c3
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id3
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ObjectId
argument_list|>
name|preview
init|=
name|fetchFromSubmitPreview
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ObjectId
name|subRepoId
init|=
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepoId
argument_list|)
expr_stmt|;
comment|// As the submodules have changed commits, the superproject tree will be
comment|// different, so we cannot directly compare the trees here, so make
comment|// assumptions only about the changed branches:
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|CHERRY_PICK
operator|)
operator|||
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_ALWAYS
operator|)
condition|)
block|{
comment|// each change is updated and the respective target branch is updated:
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|REBASE_IF_NECESSARY
operator|)
condition|)
block|{
comment|// Either the first is used first as is, then the second and third need
comment|// rebasing, or those two stay as is and the first is rebased.
comment|// add in 2 master branches, expect 3 or 4:
name|assertThat
argument_list|(
name|preview
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAnyOf
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|preview
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|subscriptionUpdateIncludingChangeInSuperproject ()
specifier|public
name|void
name|subscriptionUpdateIncludingChangeInSuperproject
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"some change"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a.txt"
argument_list|,
literal|"a contents "
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/heads/master"
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevCommit
name|c
init|=
name|subRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|subHEAD
argument_list|)
decl_stmt|;
name|RevCommit
name|c1
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"first change"
argument_list|)
operator|.
name|add
argument_list|(
literal|"asdf"
argument_list|,
literal|"asdf\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/for/master/"
operator|+
name|name
argument_list|(
literal|"topic-foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|subRepo
operator|.
name|reset
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|c2
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"qwerty"
argument_list|)
operator|.
name|add
argument_list|(
literal|"qwerty"
argument_list|,
literal|"qwerty"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|RevCommit
name|c3
init|=
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"qwerty followup"
argument_list|)
operator|.
name|add
argument_list|(
literal|"qwerty"
argument_list|,
literal|"qwerty\nqwerty\n"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/for/master/"
operator|+
name|name
argument_list|(
literal|"topic-foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevCommit
name|c4
init|=
name|superRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"new change on superproject"
argument_list|)
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|superRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"HEAD:refs/for/master/"
operator|+
name|name
argument_list|(
literal|"topic-foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|String
name|id1
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|c1
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|c2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id3
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|c3
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id4
init|=
name|getChangeId
argument_list|(
name|superRepo
argument_list|,
name|c4
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id3
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id4
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ObjectId
name|subRepoId
init|=
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepoId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|updateManySubmodules ()
specifier|public
name|void
name|updateManySubmodules
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM
init|=
literal|3
decl_stmt|;
name|Project
operator|.
name|NameKey
name|subKey
index|[]
init|=
operator|new
name|NameKey
index|[
name|NUM
index|]
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|sub
index|[]
init|=
operator|new
name|TestRepository
index|[
name|NUM
index|]
decl_stmt|;
name|String
name|prefix
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subKey
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subKey
index|[
name|i
index|]
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|name
argument_list|(
name|prefix
operator|+
literal|"sub"
operator|+
name|i
argument_list|)
operator|.
name|submitType
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|grant
argument_list|(
name|subKey
index|[
name|i
index|]
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|subKey
index|[
name|i
index|]
argument_list|,
literal|"refs/for/refs/heads/*"
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|)
expr_stmt|;
name|sub
index|[
name|i
index|]
operator|=
name|cloneProject
argument_list|(
name|subKey
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subKey
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
index|[
name|i
index|]
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
block|}
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subKey
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
index|[
name|i
index|]
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ObjectId
name|superPreviousId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|ObjectId
name|subId
index|[]
init|=
operator|new
name|ObjectId
index|[
name|NUM
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sub
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subId
index|[
name|i
index|]
operator|=
name|pushChangeTo
argument_list|(
name|sub
index|[
name|i
index|]
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|sub
index|[
name|i
index|]
argument_list|,
name|subId
index|[
name|i
index|]
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|getChangeId
argument_list|(
name|sub
index|[
literal|0
index|]
argument_list|,
name|subId
index|[
literal|0
index|]
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sub
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
index|[
name|i
index|]
argument_list|,
name|sub
index|[
name|i
index|]
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
name|String
name|heads
index|[]
init|=
operator|new
name|String
index|[
name|NUM
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heads
index|[
name|i
index|]
operator|=
name|sub
index|[
name|i
index|]
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getSubmitType
argument_list|()
operator|==
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
condition|)
block|{
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
operator|+
literal|"* Update "
operator|+
name|subKey
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|heads
index|[
literal|0
index|]
operator|+
literal|"\n\n* Update "
operator|+
name|subKey
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|heads
index|[
literal|1
index|]
operator|+
literal|"\n\n* Update "
operator|+
name|subKey
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|heads
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|superRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"submodule subscription update should have made one commit"
argument_list|)
operator|.
name|that
argument_list|(
name|superRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"origin/master^"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|superPreviousId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doNotUseFastForward ()
specifier|public
name|void
name|doNotUseFastForward
parameter_list|()
throws|throws
name|Exception
block|{
comment|// like setup, but without empty commit
name|superKey
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|submitType
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|createEmptyCommit
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|grantPush
argument_list|(
name|superKey
argument_list|)
expr_stmt|;
name|subKey
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|submitType
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|createEmptyCommit
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|grantPush
argument_list|(
name|subKey
argument_list|)
expr_stmt|;
name|superRepo
operator|=
name|cloneProject
argument_list|(
name|superKey
argument_list|)
expr_stmt|;
name|subRepo
operator|=
name|cloneProject
argument_list|(
name|subKey
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|ObjectId
name|superId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|String
name|subChangeId
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|subChangeId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|superRepo
argument_list|,
name|superId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|subChangeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|RevCommit
name|superHead
init|=
name|getRemoteHead
argument_list|(
name|superKey
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|superHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"some message"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|superHead
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|superId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|useFastForwardWhenNoSubmodule ()
specifier|public
name|void
name|useFastForwardWhenNoSubmodule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// like setup, but without empty commit
name|superKey
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|submitType
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|createEmptyCommit
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|grantPush
argument_list|(
name|superKey
argument_list|)
expr_stmt|;
name|subKey
operator|=
name|projectOperations
operator|.
name|newProject
argument_list|()
operator|.
name|submitType
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
operator|.
name|createEmptyCommit
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|grantPush
argument_list|(
name|subKey
argument_list|)
expr_stmt|;
name|superRepo
operator|=
name|cloneProject
argument_list|(
name|superKey
argument_list|)
expr_stmt|;
name|subRepo
operator|=
name|cloneProject
argument_list|(
name|subKey
argument_list|)
expr_stmt|;
name|ObjectId
name|subId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|ObjectId
name|superId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|String
name|subChangeId
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|subChangeId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|superRepo
argument_list|,
name|superId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|subChangeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RevCommit
name|superHead
init|=
name|getRemoteHead
argument_list|(
name|superKey
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|superHead
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"some message"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|superHead
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|superId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sameProjectSameBranchDifferentPaths ()
specifier|public
name|void
name|sameProjectSameBranchDifferentPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|copyKey
init|=
name|nameKey
argument_list|(
literal|"sub-copy"
argument_list|)
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
argument_list|,
name|copyKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ObjectId
name|superPreviousId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|ObjectId
name|subId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|copyKey
argument_list|,
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|superRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"submodule subscription update should have made one commit"
argument_list|)
operator|.
name|that
argument_list|(
name|superRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"origin/master^"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|superPreviousId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sameProjectDifferentBranchDifferentPaths ()
specifier|public
name|void
name|sameProjectDifferentBranchDifferentPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/dev"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ObjectId
name|devHead
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|)
decl_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
argument_list|,
name|nameKey
argument_list|(
literal|"sub-master"
argument_list|)
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
argument_list|,
name|nameKey
argument_list|(
literal|"sub-dev"
argument_list|)
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ObjectId
name|subMasterId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content b"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|subRepo
operator|.
name|reset
argument_list|(
name|devHead
argument_list|)
expr_stmt|;
name|ObjectId
name|subDevId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/dev"
argument_list|,
literal|"some message in dev"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content b"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subMasterId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subDevId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectId
name|superPreviousId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subMasterId
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|nameKey
argument_list|(
literal|"sub-master"
argument_list|)
argument_list|,
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|nameKey
argument_list|(
literal|"sub-dev"
argument_list|)
argument_list|,
name|subRepo
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|superRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"submodule subscription update should have made one commit"
argument_list|)
operator|.
name|that
argument_list|(
name|superRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"origin/master^"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|superPreviousId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nonSubmoduleInSameTopic ()
specifier|public
name|void
name|nonSubmoduleInSameTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|standaloneKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|standAlone
init|=
name|cloneProject
argument_list|(
name|standaloneKey
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|superPreviousId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|ObjectId
name|subId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|ObjectId
name|standAloneId
init|=
name|pushChangeTo
argument_list|(
name|standAlone
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|String
name|subChangeId
init|=
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|standAloneChangeId
init|=
name|getChangeId
argument_list|(
name|standAlone
argument_list|,
name|standAloneId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|subChangeId
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|standAloneChangeId
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|subChangeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ChangeStatus
name|status
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|standAloneChangeId
argument_list|)
operator|.
name|info
argument_list|()
operator|.
name|status
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|superRepo
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|getAdvertisedRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"submodule subscription update should have made one commit"
argument_list|)
operator|.
name|that
argument_list|(
name|superRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"origin/master^"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|superPreviousId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|recursiveSubmodules ()
specifier|public
name|void
name|recursiveSubmodules
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|topKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|midKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|botKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|topRepo
init|=
name|cloneProject
argument_list|(
name|topKey
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|midRepo
init|=
name|cloneProject
argument_list|(
name|midKey
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|bottomRepo
init|=
name|cloneProject
argument_list|(
name|botKey
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|midKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|topKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|botKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|midKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|topRepo
argument_list|,
literal|"master"
argument_list|,
name|midKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|midRepo
argument_list|,
literal|"master"
argument_list|,
name|botKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|bottomHead
init|=
name|pushChangeTo
argument_list|(
name|bottomRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|ObjectId
name|topHead
init|=
name|pushChangeTo
argument_list|(
name|topRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|String
name|id1
init|=
name|getChangeId
argument_list|(
name|bottomRepo
argument_list|,
name|bottomHead
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|getChangeId
argument_list|(
name|topRepo
argument_list|,
name|topHead
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|midRepo
argument_list|,
literal|"master"
argument_list|,
name|botKey
argument_list|,
name|bottomRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|topRepo
argument_list|,
literal|"master"
argument_list|,
name|midKey
argument_list|,
name|midRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|triangleSubmodules ()
specifier|public
name|void
name|triangleSubmodules
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|topKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|midKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|botKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|topRepo
init|=
name|cloneProject
argument_list|(
name|topKey
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|midRepo
init|=
name|cloneProject
argument_list|(
name|midKey
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|bottomRepo
init|=
name|cloneProject
argument_list|(
name|botKey
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|midKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|topKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|botKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|midKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|botKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|topKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|midRepo
argument_list|,
literal|"master"
argument_list|,
name|botKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|botKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|midKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|topRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ObjectId
name|bottomHead
init|=
name|pushChangeTo
argument_list|(
name|bottomRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|ObjectId
name|topHead
init|=
name|pushChangeTo
argument_list|(
name|topRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|String
name|id1
init|=
name|getChangeId
argument_list|(
name|bottomRepo
argument_list|,
name|bottomHead
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|id2
init|=
name|getChangeId
argument_list|(
name|topRepo
argument_list|,
name|topHead
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id2
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|midRepo
argument_list|,
literal|"master"
argument_list|,
name|botKey
argument_list|,
name|bottomRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|topRepo
argument_list|,
literal|"master"
argument_list|,
name|midKey
argument_list|,
name|midRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|topRepo
argument_list|,
literal|"master"
argument_list|,
name|botKey
argument_list|,
name|bottomRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareBranchCircularSubscription ()
specifier|private
name|String
name|prepareBranchCircularSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|topKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|midKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|botKey
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|topRepo
init|=
name|cloneProject
argument_list|(
name|topKey
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|midRepo
init|=
name|cloneProject
argument_list|(
name|midKey
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|bottomRepo
init|=
name|cloneProject
argument_list|(
name|botKey
argument_list|)
decl_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|midRepo
argument_list|,
literal|"master"
argument_list|,
name|botKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|topRepo
argument_list|,
literal|"master"
argument_list|,
name|midKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|bottomRepo
argument_list|,
literal|"master"
argument_list|,
name|topKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|botKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|midKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|midKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|topKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|topKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|botKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|ObjectId
name|bottomMasterHead
init|=
name|pushChangeTo
argument_list|(
name|bottomRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|changeId
init|=
name|getChangeId
argument_list|(
name|bottomRepo
argument_list|,
name|bottomMasterHead
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Branch level circular subscriptions detected"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|topKey
operator|.
name|get
argument_list|()
operator|+
literal|",refs/heads/master"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|midKey
operator|.
name|get
argument_list|()
operator|+
literal|",refs/heads/master"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|botKey
operator|.
name|get
argument_list|()
operator|+
literal|",refs/heads/master"
argument_list|)
expr_stmt|;
return|return
name|changeId
return|;
block|}
annotation|@
name|Test
DECL|method|branchCircularSubscription ()
specifier|public
name|void
name|branchCircularSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|prepareBranchCircularSubscription
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchCircularSubscriptionPreview ()
specifier|public
name|void
name|branchCircularSubscriptionPreview
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|changeId
init|=
name|prepareBranchCircularSubscription
argument_list|()
decl_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectCircularSubscriptionWholeTopic ()
specifier|public
name|void
name|projectCircularSubscriptionWholeTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|superKey
argument_list|,
literal|"refs/heads/dev"
argument_list|,
name|subKey
argument_list|,
literal|"refs/heads/dev"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|,
name|superKey
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|ObjectId
name|subMasterHead
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"content b"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|ObjectId
name|superDevHead
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"refs/for/dev"
argument_list|,
literal|"some message"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subMasterHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|superRepo
argument_list|,
name|superDevHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Project level circular subscriptions detected"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|subKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|superKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|getChangeId
argument_list|(
name|subRepo
argument_list|,
name|subMasterHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectNoSubscriptionWholeTopic ()
specifier|public
name|void
name|projectNoSubscriptionWholeTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|keyA
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|keyB
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|cloneProject
argument_list|(
name|keyA
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoB
init|=
name|cloneProject
argument_list|(
name|keyB
argument_list|)
decl_stmt|;
comment|// bootstrap the dev branch
name|ObjectId
name|a0
init|=
name|pushChangeTo
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|)
decl_stmt|;
comment|// bootstrap the dev branch
name|ObjectId
name|b0
init|=
name|pushChangeTo
argument_list|(
name|repoB
argument_list|,
literal|"dev"
argument_list|)
decl_stmt|;
comment|// create a change for master branch in repo a
name|ObjectId
name|aHead
init|=
name|pushChangeTo
argument_list|(
name|repoA
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"master.txt"
argument_list|,
literal|"content master A"
argument_list|,
literal|"some message in a master.txt"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
comment|// create a change for master branch in repo b
name|ObjectId
name|bHead
init|=
name|pushChangeTo
argument_list|(
name|repoB
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"master.txt"
argument_list|,
literal|"content master B"
argument_list|,
literal|"some message in b master.txt"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
comment|// create a change for dev branch in repo a
name|repoA
operator|.
name|reset
argument_list|(
name|a0
argument_list|)
expr_stmt|;
name|ObjectId
name|aDevHead
init|=
name|pushChangeTo
argument_list|(
name|repoA
argument_list|,
literal|"refs/for/dev"
argument_list|,
literal|"dev.txt"
argument_list|,
literal|"content dev A"
argument_list|,
literal|"some message in a dev.txt"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
comment|// create a change for dev branch in repo b
name|repoB
operator|.
name|reset
argument_list|(
name|b0
argument_list|)
expr_stmt|;
name|ObjectId
name|bDevHead
init|=
name|pushChangeTo
argument_list|(
name|repoB
argument_list|,
literal|"refs/for/dev"
argument_list|,
literal|"dev.txt"
argument_list|,
literal|"content dev B"
argument_list|,
literal|"some message in b dev.txt"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|repoA
argument_list|,
name|aHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|repoB
argument_list|,
name|bHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|repoA
argument_list|,
name|aDevHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|repoB
argument_list|,
name|bDevHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|getChangeId
argument_list|(
name|repoA
argument_list|,
name|aDevHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getRemoteHead
argument_list|(
name|keyA
argument_list|,
literal|"refs/heads/master"
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"some message in a master.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRemoteHead
argument_list|(
name|keyA
argument_list|,
literal|"refs/heads/dev"
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"some message in a dev.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRemoteHead
argument_list|(
name|keyB
argument_list|,
literal|"refs/heads/master"
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"some message in b master.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRemoteHead
argument_list|(
name|keyB
argument_list|,
literal|"refs/heads/dev"
argument_list|)
operator|.
name|getShortMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"some message in b dev.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|twoProjectsMultipleBranchesWholeTopic ()
specifier|public
name|void
name|twoProjectsMultipleBranchesWholeTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|keyA
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|keyB
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoA
init|=
name|cloneProject
argument_list|(
name|keyA
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repoB
init|=
name|cloneProject
argument_list|(
name|keyB
argument_list|)
decl_stmt|;
comment|// bootstrap the dev branch
name|pushChangeTo
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
comment|// bootstrap the dev branch
name|ObjectId
name|b0
init|=
name|pushChangeTo
argument_list|(
name|repoB
argument_list|,
literal|"dev"
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|keyB
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|keyA
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|keyB
argument_list|,
literal|"refs/heads/dev"
argument_list|,
name|keyA
argument_list|,
literal|"refs/heads/dev"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
name|keyB
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|,
name|keyB
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
comment|// create a change for master branch in repo b
name|ObjectId
name|bHead
init|=
name|pushChangeTo
argument_list|(
name|repoB
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"master.txt"
argument_list|,
literal|"content master B"
argument_list|,
literal|"some message in b master.txt"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
comment|// create a change for dev branch in repo b
name|repoB
operator|.
name|reset
argument_list|(
name|b0
argument_list|)
expr_stmt|;
name|ObjectId
name|bDevHead
init|=
name|pushChangeTo
argument_list|(
name|repoB
argument_list|,
literal|"refs/for/dev"
argument_list|,
literal|"dev.txt"
argument_list|,
literal|"content dev B"
argument_list|,
literal|"some message in b dev.txt"
argument_list|,
literal|"same-topic"
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|repoB
argument_list|,
name|bHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|getChangeId
argument_list|(
name|repoB
argument_list|,
name|bDevHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|getChangeId
argument_list|(
name|repoB
argument_list|,
name|bHead
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|repoA
argument_list|,
literal|"master"
argument_list|,
name|keyB
argument_list|,
name|repoB
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|repoA
argument_list|,
literal|"dev"
argument_list|,
name|keyB
argument_list|,
name|repoB
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrySubmitAfterTornTopicOnLockFailure ()
specifier|public
name|void
name|retrySubmitAfterTornTopicOnLockFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|subKey1
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|sub1
init|=
name|cloneProject
argument_list|(
name|subKey1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|subKey2
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|sub2
init|=
name|cloneProject
argument_list|(
name|subKey2
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey1
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey2
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey1
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|ObjectId
name|superPreviousId
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|String
name|topic
init|=
literal|"same-topic"
decl_stmt|;
name|ObjectId
name|sub1Id
init|=
name|pushChangeTo
argument_list|(
name|sub1
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|ObjectId
name|sub2Id
init|=
name|pushChangeTo
argument_list|(
name|sub2
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|String
name|changeId1
init|=
name|getChangeId
argument_list|(
name|sub1
argument_list|,
name|sub1Id
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|changeId2
init|=
name|getChangeId
argument_list|(
name|sub2
argument_list|,
name|sub2Id
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId1
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|TestSubmitInput
name|input
init|=
operator|new
name|TestSubmitInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|generateLockFailures
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|false
argument_list|,
comment|// Change 1, attempt 1: success
literal|true
argument_list|,
comment|// Change 2, attempt 1: lock failure
literal|false
argument_list|,
comment|// Change 1, attempt 2: success
literal|false
argument_list|,
comment|// Change 2, attempt 2: success
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leftover value to check total number of calls.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId1
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId2
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|sub1
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevWalk
name|rw1
init|=
name|sub1
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|master1
init|=
name|rw1
operator|.
name|parseCommit
argument_list|(
name|getRemoteHead
argument_list|(
name|subKey1
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|change1Ps
init|=
name|parseCurrentRevision
argument_list|(
name|rw1
argument_list|,
name|changeId1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rw1
operator|.
name|isMergedInto
argument_list|(
name|change1Ps
argument_list|,
name|master1
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|sub2
operator|.
name|git
argument_list|()
operator|.
name|fetch
argument_list|()
operator|.
name|call
argument_list|()
expr_stmt|;
name|RevWalk
name|rw2
init|=
name|sub2
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|master2
init|=
name|rw2
operator|.
name|parseCommit
argument_list|(
name|getRemoteHead
argument_list|(
name|subKey2
operator|.
name|get
argument_list|()
argument_list|,
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|RevCommit
name|change2Ps
init|=
name|parseCurrentRevision
argument_list|(
name|rw2
argument_list|,
name|changeId2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rw2
operator|.
name|isMergedInto
argument_list|(
name|change2Ps
argument_list|,
name|master2
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|input
operator|.
name|generateLockFailures
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey1
argument_list|,
name|sub1
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey2
argument_list|,
name|sub2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"submodule subscription update should have made one commit"
argument_list|)
operator|.
name|that
argument_list|(
name|superRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"origin/master^"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|superPreviousId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|skipUpdatingBrokenGitlinkPointer ()
specifier|public
name|void
name|skipUpdatingBrokenGitlinkPointer
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|subKey1
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|sub1
init|=
name|cloneProject
argument_list|(
name|subKey1
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|subKey2
init|=
name|createProjectForPush
argument_list|(
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|sub2
init|=
name|cloneProject
argument_list|(
name|subKey2
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey1
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey2
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey1
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Write an invalid SHA-1 directly to one of the gitlinks.
name|ObjectId
name|badId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|directUpdateSubmodule
argument_list|(
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|subKey1
argument_list|,
name|badId
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey1
argument_list|,
name|badId
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
literal|"same-topic"
decl_stmt|;
name|ObjectId
name|sub1Id
init|=
name|pushChangeTo
argument_list|(
name|sub1
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|ObjectId
name|sub2Id
init|=
name|pushChangeTo
argument_list|(
name|sub2
argument_list|,
literal|"refs/for/master"
argument_list|,
literal|"some message"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|String
name|changeId1
init|=
name|getChangeId
argument_list|(
name|sub1
argument_list|,
name|sub1Id
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|changeId2
init|=
name|getChangeId
argument_list|(
name|sub2
argument_list|,
name|sub2Id
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|approve
argument_list|(
name|changeId1
argument_list|)
expr_stmt|;
name|approve
argument_list|(
name|changeId2
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId1
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId1
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|changeId2
argument_list|)
operator|.
name|status
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeStatus
operator|.
name|MERGED
argument_list|)
expr_stmt|;
comment|// sub1 was skipped but sub2 succeeded.
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey1
argument_list|,
name|badId
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey2
argument_list|,
name|sub2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
DECL|method|nameKey (String s)
specifier|private
name|Project
operator|.
name|NameKey
name|nameKey
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

