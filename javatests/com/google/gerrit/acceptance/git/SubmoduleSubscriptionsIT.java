begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TestTimeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|SubmoduleSubscriptionsIT
specifier|public
class|class
name|SubmoduleSubscriptionsIT
extends|extends
name|AbstractSubmoduleSubscription
block|{
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|submitWholeTopicEnabled ()
specifier|public
specifier|static
name|Config
name|submitWholeTopicEnabled
parameter_list|()
block|{
return|return
name|submitWholeTopicEnabledConfig
argument_list|()
return|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.enableSuperProjectSubscriptions"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
DECL|method|testSubscriptionWithoutGlobalServerSetting ()
specifier|public
name|void
name|testSubscriptionWithoutGlobalServerSetting
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWithoutSpecificSubscription ()
specifier|public
name|void
name|subscriptionWithoutSpecificSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionToEmptyRepo ()
specifier|public
name|void
name|subscriptionToEmptyRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionToExistingRepo ()
specifier|public
name|void
name|subscriptionToExistingRepo
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLForSingleBranch ()
specifier|public
name|void
name|subscriptionWildcardACLForSingleBranch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// master is allowed to be subscribed to master branch only:
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create 'branch':
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLForMissingProject ()
specifier|public
name|void
name|subscriptionWildcardACLForMissingProject
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"not-existing-super-project"
argument_list|)
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLForMissingBranch ()
specifier|public
name|void
name|subscriptionWildcardACLForMissingBranch
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLForMissingGitmodules ()
specifier|public
name|void
name|subscriptionWildcardACLForMissingGitmodules
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLOneOnOneMapping ()
specifier|public
name|void
name|subscriptionWildcardACLOneOnOneMapping
parameter_list|()
throws|throws
name|Exception
block|{
comment|// any branch is allowed to be subscribed to the same superprojects branch:
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
comment|// create 'branch' in both repos:
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD1
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|ObjectId
name|subHEAD2
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"branch"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEAD1
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
name|subHEAD2
argument_list|)
expr_stmt|;
comment|// Now test that cross subscriptions do not work:
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD3
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"branch"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEAD1
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
name|subHEAD3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLForManyBranches ()
specifier|public
name|void
name|subscriptionWildcardACLForManyBranches
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Any branch is allowed to be subscribed to any superproject branch:
name|allowSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|superKey
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"another-branch"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
literal|"another-branch"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"another-branch"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionWildcardACLOneToManyBranches ()
specifier|public
name|void
name|subscriptionWildcardACLOneToManyBranches
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Any branch is allowed to be subscribed to any superproject branch:
name|allowSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
comment|// no change expected, as only master is subscribed:
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"branch"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.verboseSuperprojectUpdate"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
DECL|method|testSubmoduleShortCommitMessage ()
specifier|public
name|void
name|testSubmoduleShortCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
comment|// The first update doesn't include any commit messages
name|ObjectId
name|subRepoId
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepoId
argument_list|)
expr_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
argument_list|)
expr_stmt|;
comment|// Any following update also has a short message
name|subRepoId
operator|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subRepoId
argument_list|)
expr_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.verboseSuperprojectUpdate"
argument_list|,
name|value
operator|=
literal|"SUBJECT_ONLY"
argument_list|)
DECL|method|testSubmoduleSubjectCommitMessage ()
specifier|public
name|void
name|testSubmoduleSubjectCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
comment|// The first update doesn't include the rev log
name|RevWalk
name|rw
init|=
name|subRepo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
operator|+
literal|"* Update "
operator|+
name|subKey
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|subHEAD
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The next commit should generate only its commit message,
comment|// omitting previous commit logs
name|subHEAD
operator|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|RevCommit
name|subCommitMsg
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|subHEAD
argument_list|)
decl_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
operator|+
literal|"* Update "
operator|+
name|subKey
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|subHEAD
operator|.
name|getName
argument_list|()
operator|+
literal|"\n  - "
operator|+
name|subCommitMsg
operator|.
name|getShortMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|submoduleCommitMessage ()
specifier|public
name|void
name|submoduleCommitMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
comment|// The first update doesn't include the rev log
name|RevWalk
name|rw
init|=
name|subRepo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
operator|+
literal|"* Update "
operator|+
name|subKey
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|subHEAD
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The next commit should generate only its commit message,
comment|// omitting previous commit logs
name|subHEAD
operator|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|RevCommit
name|subCommitMsg
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|subHEAD
argument_list|)
decl_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"Update git submodules\n\n"
operator|+
literal|"* Update "
operator|+
name|subKey
operator|.
name|get
argument_list|()
operator|+
literal|" from branch 'master'\n  to "
operator|+
name|subHEAD
operator|.
name|getName
argument_list|()
operator|+
literal|"\n  - "
operator|+
name|subCommitMsg
operator|.
name|getFullMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionUnsubscribe ()
specifier|public
name|void
name|subscriptionUnsubscribe
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEADbeforeUnsubscribing
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|deleteAllSubscriptions
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEADbeforeUnsubscribing
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"commit after unsubscribe"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"commit after unsubscribe"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEADbeforeUnsubscribing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionUnsubscribeByDeletingGitModules ()
specifier|public
name|void
name|subscriptionUnsubscribeByDeletingGitModules
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEADbeforeUnsubscribing
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|deleteGitModulesFile
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEADbeforeUnsubscribing
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"commit after unsubscribe"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"commit after unsubscribe"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEADbeforeUnsubscribing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionToDifferentBranches ()
specifier|public
name|void
name|subscriptionToDifferentBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/foo"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|ObjectId
name|subFoo
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subFoo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|branchCircularSubscription ()
specifier|public
name|void
name|branchCircularSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|,
name|superKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|,
name|superKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|projectCircularSubscription ()
specifier|public
name|void
name|projectCircularSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|superKey
argument_list|,
literal|"refs/heads/dev"
argument_list|,
name|subKey
argument_list|,
literal|"refs/heads/dev"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|,
name|superKey
argument_list|,
literal|"dev"
argument_list|)
expr_stmt|;
name|ObjectId
name|subMasterHead
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|ObjectId
name|superDevHead
init|=
name|pushChangeTo
argument_list|(
name|superRepo
argument_list|,
literal|"dev"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|,
name|superKey
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subMasterHead
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|subRepo
argument_list|,
literal|"dev"
argument_list|,
name|superKey
argument_list|,
name|superDevHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionFailOnMissingACL ()
specifier|public
name|void
name|subscriptionFailOnMissingACL
parameter_list|()
throws|throws
name|Exception
block|{
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionFailOnWrongProjectACL ()
specifier|public
name|void
name|subscriptionFailOnWrongProjectACL
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
literal|"wrong-super-project"
argument_list|)
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionFailOnWrongBranchACL ()
specifier|public
name|void
name|subscriptionFailOnWrongBranchACL
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/wrong-branch"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionInheritACL ()
specifier|public
name|void
name|subscriptionInheritACL
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|configKey
init|=
name|createProjectForPush
argument_list|(
literal|"config-repo"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|config2Key
init|=
name|createProjectForPush
argument_list|(
literal|"config-repo2"
argument_list|,
name|configKey
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|cloneProject
argument_list|(
name|config2Key
argument_list|)
expr_stmt|;
name|subKey
operator|=
name|createProjectForPush
argument_list|(
literal|"subrepo"
argument_list|,
name|config2Key
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
expr_stmt|;
name|subRepo
operator|=
name|cloneProject
argument_list|(
name|subKey
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|configKey
argument_list|,
literal|"refs/heads/*"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/*"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allowedButNotSubscribed ()
specifier|public
name|void
name|allowedButNotSubscribed
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|subRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
operator|.
name|message
argument_list|(
literal|"some change"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b.txt"
argument_list|,
literal|"b contents for testing"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|String
name|refspec
init|=
literal|"HEAD:refs/heads/master"
decl_stmt|;
name|PushResult
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|subRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
operator|new
name|RefSpec
argument_list|(
name|refspec
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|getRemoteUpdate
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RemoteRefUpdate
operator|.
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hasSubmodule
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|)
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|subscriptionDeepRelative ()
specifier|public
name|void
name|subscriptionDeepRelative
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|nest
init|=
name|createProjectForPush
argument_list|(
literal|"nested/subscribed-to-project"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|subRepo
init|=
name|cloneProject
argument_list|(
name|nest
argument_list|)
decl_stmt|;
comment|// master is allowed to be subscribed to any superprojects branch:
name|allowMatchingSubmoduleSubscription
argument_list|(
name|nest
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createRelativeSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
literal|"../"
argument_list|,
name|nest
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|ObjectId
name|subHEAD
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|nest
argument_list|,
name|subHEAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.verboseSuperprojectUpdate"
argument_list|,
name|value
operator|=
literal|"SUBJECT_ONLY"
argument_list|)
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.maxCommitMessages"
argument_list|,
name|value
operator|=
literal|"1"
argument_list|)
DECL|method|submoduleSubjectCommitMessageCountLimit ()
specifier|public
name|void
name|submoduleSubjectCommitMessageCountLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|testSubmoduleSubjectCommitMessageAndExpectTruncation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.verboseSuperprojectUpdate"
argument_list|,
name|value
operator|=
literal|"SUBJECT_ONLY"
argument_list|)
comment|// The value 195 must tuned to the test environment, and is sensitive to the
comment|// length of the uniquified repository name.
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"submodule.maxCombinedCommitMessageSize"
argument_list|,
name|value
operator|=
literal|"200"
argument_list|)
DECL|method|submoduleSubjectCommitMessageSizeLimit ()
specifier|public
name|void
name|submoduleSubjectCommitMessageSizeLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|testSubmoduleSubjectCommitMessageAndExpectTruncation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|superRepoCommitHasSameAuthorAsSubmoduleCommit ()
specifier|public
name|void
name|superRepoCommitHasSameAuthorAsSubmoduleCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure that the commit is created at an earlier timestamp than the submit timestamp.
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|pushResult
init|=
name|createChange
argument_list|(
name|subRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"Change"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|pushResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|pushResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Expect that the author name/email is preserved for the superRepo commit, but a new author
comment|// timestamp is used.
name|PersonIdent
name|authorIdent
init|=
name|getAuthor
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|pushResult
operator|.
name|getCommit
argument_list|()
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|superRepoCommitHasSameAuthorAsSubmoduleCommits ()
specifier|public
name|void
name|superRepoCommitHasSameAuthorAsSubmoduleCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Make sure that the commits are created at different timestamps and that the submit timestamp
comment|// is afterwards.
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|Project
operator|.
name|NameKey
name|proj2
init|=
name|createProjectForPush
argument_list|(
literal|"subscribed-to-project-2"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|subRepo2
init|=
name|cloneProject
argument_list|(
name|proj2
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|proj2
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|proj2
argument_list|,
name|proj2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
literal|"foo"
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|pushResult1
init|=
name|createChange
argument_list|(
name|subRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|pushResult1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|pushResult2
init|=
name|createChange
argument_list|(
name|subRepo2
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|pushResult2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the topic, 2 changes with the same author.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|pushResult1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Expect that the author name/email is preserved for the superRepo commit, but a new author
comment|// timestamp is used.
name|PersonIdent
name|authorIdent
init|=
name|getAuthor
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|admin
operator|.
name|email
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|pushResult1
operator|.
name|getCommit
argument_list|()
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|pushResult2
operator|.
name|getCommit
argument_list|()
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|superRepoCommitHasGerritAsAuthorIfAuthorsOfSubmoduleCommitsDiffer ()
specifier|public
name|void
name|superRepoCommitHasGerritAsAuthorIfAuthorsOfSubmoduleCommitsDiffer
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|isSubmitWholeTopicEnabled
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
comment|// Make sure that the commits are created at different timestamps and that the submit timestamp
comment|// is afterwards.
name|TestTimeUtil
operator|.
name|resetWithClockStep
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|Project
operator|.
name|NameKey
name|proj2
init|=
name|createProjectForPush
argument_list|(
literal|"subscribed-to-project-2"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo2
init|=
name|cloneProject
argument_list|(
name|proj2
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|proj2
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subKey
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|proj2
argument_list|,
name|proj2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
literal|"foo"
decl_stmt|;
comment|// Create change as admin.
name|PushOneCommit
operator|.
name|Result
name|pushResult1
init|=
name|createChange
argument_list|(
name|subRepo
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"Change 1"
argument_list|,
literal|"a.txt"
argument_list|,
literal|"some content"
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|pushResult1
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create change as user.
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|user
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo2
argument_list|,
literal|"Change 2"
argument_list|,
literal|"b.txt"
argument_list|,
literal|"other content"
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|pushResult2
init|=
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master/"
operator|+
name|name
argument_list|(
name|topic
argument_list|)
argument_list|)
decl_stmt|;
name|approve
argument_list|(
name|pushResult2
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the topic, 2 changes with the different author.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|pushResult1
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Expect that the Gerrit server identity is chosen as author for the superRepo commit and a
comment|// new author timestamp is used.
name|PersonIdent
name|authorIdent
init|=
name|getAuthor
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|serverIdent
operator|.
name|get
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|pushResult1
operator|.
name|getCommit
argument_list|()
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|authorIdent
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|isGreaterThan
argument_list|(
name|pushResult2
operator|.
name|getCommit
argument_list|()
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TestTimeUtil
operator|.
name|useSystemTime
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|updateOnlyRelevantSubmodules ()
specifier|public
name|void
name|updateOnlyRelevantSubmodules
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
operator|.
name|NameKey
name|subkey1
init|=
name|createProjectForPush
argument_list|(
literal|"subscribed-to-project-1"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|subkey2
init|=
name|createProjectForPush
argument_list|(
literal|"subscribed-to-project-2"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getSubmitType
argument_list|()
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|subRepo1
init|=
name|cloneProject
argument_list|(
name|subkey1
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|subRepo2
init|=
name|cloneProject
argument_list|(
name|subkey2
argument_list|)
decl_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subkey1
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subkey2
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subkey1
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|prepareSubmoduleConfigEntry
argument_list|(
name|config
argument_list|,
name|subkey2
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|pushSubmoduleConfig
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Push once to initialize submodules.
name|ObjectId
name|subTip2
init|=
name|pushChangeTo
argument_list|(
name|subRepo2
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|ObjectId
name|subTip1
init|=
name|pushChangeTo
argument_list|(
name|subRepo1
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subkey1
argument_list|,
name|subTip1
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subkey2
argument_list|,
name|subTip2
argument_list|)
expr_stmt|;
name|directUpdateRef
argument_list|(
name|subkey2
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|subTip1
operator|=
name|pushChangeTo
argument_list|(
name|subRepo1
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subkey1
argument_list|,
name|subTip1
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subkey2
argument_list|,
name|subTip2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|skipUpdatingBrokenGitlinkPointer ()
specifier|public
name|void
name|skipUpdatingBrokenGitlinkPointer
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
comment|// Push once to initialize submodule.
name|ObjectId
name|subTip
init|=
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|subTip
argument_list|)
expr_stmt|;
comment|// Write an invalid SHA-1 directly to the gitlink.
name|ObjectId
name|badId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
argument_list|)
decl_stmt|;
name|directUpdateSubmodule
argument_list|(
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|subKey
argument_list|,
name|badId
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|badId
argument_list|)
expr_stmt|;
comment|// Push succeeds, but gitlink update is skipped.
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|expectToHaveSubmoduleState
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
name|badId
argument_list|)
expr_stmt|;
block|}
DECL|method|directUpdateRef (Project.NameKey project, String ref)
specifier|private
name|ObjectId
name|directUpdateRef
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|serverRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
return|return
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|serverRepo
argument_list|)
operator|.
name|branch
argument_list|(
name|ref
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
operator|.
name|copy
argument_list|()
return|;
block|}
block|}
DECL|method|testSubmoduleSubjectCommitMessageAndExpectTruncation ()
specifier|private
name|void
name|testSubmoduleSubjectCommitMessageAndExpectTruncation
parameter_list|()
throws|throws
name|Exception
block|{
name|allowMatchingSubmoduleSubscription
argument_list|(
name|subKey
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|superKey
argument_list|,
literal|"refs/heads/master"
argument_list|)
expr_stmt|;
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|createSubmoduleSubscription
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|subKey
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
comment|// The first update doesn't include the rev log, so we ignore it
name|pushChangeTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
comment|// Next, we push two commits at once. Since maxCommitMessages=1, we expect to see only the first
comment|// message plus ellipsis to mark truncation.
name|ObjectId
name|subHEAD
init|=
name|pushChangesTo
argument_list|(
name|subRepo
argument_list|,
literal|"master"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RevCommit
name|subCommitMsg
init|=
name|subRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|subHEAD
argument_list|)
decl_stmt|;
name|expectToHaveCommitMessage
argument_list|(
name|superRepo
argument_list|,
literal|"master"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Update git submodules\n\n* Update %s from branch 'master'\n  to %s\n  - %s\n\n[...]"
argument_list|,
name|subKey
operator|.
name|get
argument_list|()
argument_list|,
name|subHEAD
operator|.
name|getName
argument_list|()
argument_list|,
name|subCommitMsg
operator|.
name|getShortMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

