begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|testing
operator|.
name|PushResultSubject
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|PushPermissionsIT
specifier|public
class|class
name|PushPermissionsIT
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Remove all push-related permissions, so they can be added back individually by test methods.
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allProjects
argument_list|)
init|)
block|{
name|removeAllBranchPermissions
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
expr_stmt|;
name|removeAllBranchPermissions
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|removeAllBranchPermissions
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|removeAllBranchPermissions
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|PUSH_MERGE
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noDirectPushPermissions ()
specifier|public
name|void
name|noDirectPushPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|PushResult
name|r
init|=
name|push
argument_list|(
literal|"HEAD:refs/heads/master"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|onlyRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|isRejected
argument_list|(
literal|"prohibited by Gerrit: ref update access denied"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasMessages
argument_list|(
literal|"Branch refs/heads/master:"
argument_list|,
literal|"You are not allowed to perform this operation."
argument_list|,
literal|"To push into this reference you need 'Push' rights."
argument_list|,
literal|"User: admin"
argument_list|,
literal|"Please read the documentation and contact an administrator"
argument_list|,
literal|"if you feel the configuration is incorrect"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|hasProcessed
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"refs"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeAllBranchPermissions (ProjectConfig cfg, String permission)
specifier|private
specifier|static
name|void
name|removeAllBranchPermissions
parameter_list|(
name|ProjectConfig
name|cfg
parameter_list|,
name|String
name|permission
parameter_list|)
block|{
name|cfg
operator|.
name|getAccessSections
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"refs/heads/"
argument_list|)
operator|||
name|s
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"refs/*"
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|s
operator|.
name|removePermission
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|push (String... refSpecs)
specifier|private
name|PushResult
name|push
parameter_list|(
name|String
modifier|...
name|refSpecs
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|PushResult
argument_list|>
name|results
init|=
name|testRepo
operator|.
name|git
argument_list|()
operator|.
name|push
argument_list|()
operator|.
name|setRemote
argument_list|(
literal|"origin"
argument_list|)
operator|.
name|setRefSpecs
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|refSpecs
argument_list|)
operator|.
name|map
argument_list|(
name|RefSpec
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"expected 1 PushResult"
argument_list|)
operator|.
name|that
argument_list|(
name|results
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
block|}
end_class

end_unit

