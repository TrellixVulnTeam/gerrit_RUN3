begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|git
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GitUtil
operator|.
name|fetch
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allow
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|allowCapability
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|deny
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
operator|.
name|permissionKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AbstractDaemonTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|NoHttpd
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|PushOneCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|groups
operator|.
name|GroupInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveCommitsAdvertiseRefsHookChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|testing
operator|.
name|TestRefAdvertiser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
operator|.
name|RefFilterOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|AdvertiseRefsHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|NoHttpd
DECL|class|RefAdvertisementIT
specifier|public
class|class
name|RefAdvertisementIT
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|allUsersName
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|noteUtil
annotation|@
name|Inject
specifier|private
name|ChangeNoteUtil
name|noteUtil
decl_stmt|;
DECL|field|permissionBackend
annotation|@
name|Inject
specifier|private
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectOperations
annotation|@
name|Inject
specifier|private
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|admins
specifier|private
name|AccountGroup
operator|.
name|UUID
name|admins
decl_stmt|;
DECL|field|nonInteractiveUsers
specifier|private
name|AccountGroup
operator|.
name|UUID
name|nonInteractiveUsers
decl_stmt|;
DECL|field|rcMaster
specifier|private
name|RevCommit
name|rcMaster
decl_stmt|;
DECL|field|rcBranch
specifier|private
name|RevCommit
name|rcBranch
decl_stmt|;
DECL|field|cd1
specifier|private
name|ChangeData
name|cd1
decl_stmt|;
DECL|field|psRef1
specifier|private
name|String
name|psRef1
decl_stmt|;
DECL|field|metaRef1
specifier|private
name|String
name|metaRef1
decl_stmt|;
DECL|field|cd2
specifier|private
name|ChangeData
name|cd2
decl_stmt|;
DECL|field|psRef2
specifier|private
name|String
name|psRef2
decl_stmt|;
DECL|field|metaRef2
specifier|private
name|String
name|metaRef2
decl_stmt|;
DECL|field|cd3
specifier|private
name|ChangeData
name|cd3
decl_stmt|;
DECL|field|psRef3
specifier|private
name|String
name|psRef3
decl_stmt|;
DECL|field|metaRef3
specifier|private
name|String
name|metaRef3
decl_stmt|;
DECL|field|cd4
specifier|private
name|ChangeData
name|cd4
decl_stmt|;
DECL|field|psRef4
specifier|private
name|String
name|psRef4
decl_stmt|;
DECL|field|metaRef4
specifier|private
name|String
name|metaRef4
decl_stmt|;
annotation|@
name|ConfigSuite
operator|.
name|Config
DECL|method|enableFullRefEvaluation ()
specifier|public
specifier|static
name|Config
name|enableFullRefEvaluation
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"skipFullRefEvaluationIfAllRefsAreVisible"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|admins
operator|=
name|adminGroupUuid
argument_list|()
expr_stmt|;
name|nonInteractiveUsers
operator|=
name|groupUuid
argument_list|(
literal|"Non-Interactive Users"
argument_list|)
expr_stmt|;
name|setUpPermissions
argument_list|()
expr_stmt|;
name|setUpChanges
argument_list|()
expr_stmt|;
block|}
comment|// This method is idempotent, so it is safe to call it on every test setup.
DECL|method|setUpPermissions ()
specifier|private
name|void
name|setUpPermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Remove read permissions for all users besides admin.
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allProjects
argument_list|)
init|)
block|{
for|for
control|(
name|AccessSection
name|sec
range|:
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getAccessSections
argument_list|()
control|)
block|{
name|sec
operator|.
name|removePermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|admins
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Remove all read permissions on All-Users.
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
for|for
control|(
name|AccessSection
name|sec
range|:
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getAccessSections
argument_list|()
control|)
block|{
name|sec
operator|.
name|removePermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Building the following:
comment|//   rcMaster (c1 master master-tag)<-- rcBranch (c2 branch branch-tag)
comment|//      \                                    \
comment|//    (c3_open)                            (c4_open)
comment|//
DECL|method|setUpChanges ()
specifier|private
name|void
name|setUpChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"branch"
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
expr_stmt|;
comment|// First 2 changes are merged, which means the tags pointing to them are
comment|// visible.
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/for/refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|admins
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|//   rcMaster (c1 master)
name|PushOneCommit
operator|.
name|Result
name|mr
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master%submit"
argument_list|)
decl_stmt|;
name|mr
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|cd1
operator|=
name|mr
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|rcMaster
operator|=
name|mr
operator|.
name|getCommit
argument_list|()
expr_stmt|;
name|psRef1
operator|=
name|cd1
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|toRefName
argument_list|()
expr_stmt|;
name|metaRef1
operator|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|cd1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//   rcMaster (c1 master)<-- rcBranch (c2 branch)
name|PushOneCommit
operator|.
name|Result
name|br
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/branch%submit"
argument_list|)
decl_stmt|;
name|br
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|cd2
operator|=
name|br
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|rcBranch
operator|=
name|br
operator|.
name|getCommit
argument_list|()
expr_stmt|;
name|psRef2
operator|=
name|cd2
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|toRefName
argument_list|()
expr_stmt|;
name|metaRef2
operator|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|cd2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second 2 changes are unmerged.
comment|//   rcMaster (c1 master)<-- rcBranch (c2 branch)
comment|//      \
comment|//    (c3_open)
comment|//
name|mr
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
expr_stmt|;
name|mr
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|cd3
operator|=
name|mr
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|psRef3
operator|=
name|cd3
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|toRefName
argument_list|()
expr_stmt|;
name|metaRef3
operator|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//   rcMaster (c1 master)<-- rcBranch (c2 branch)
comment|//      \                        \
comment|//     (c3_open)                (c4_open)
name|br
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/branch"
argument_list|)
expr_stmt|;
name|br
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|cd4
operator|=
name|br
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|psRef4
operator|=
name|cd4
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|toRefName
argument_list|()
expr_stmt|;
name|metaRef4
operator|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|cd4
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|//   rcMaster (c1 master master-tag)<-- rcBranch (c2 branch)
comment|//       \                                  \
comment|//     (c3_open)                          (c4_open)
name|RefUpdate
name|mtu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/master-tag"
argument_list|)
decl_stmt|;
name|mtu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|mtu
operator|.
name|setNewObjectId
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mtu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
comment|//   rcMaster (c1 master master-tag)<-- rcBranch (c2 branch branch-tag)
comment|//       \                                  \
comment|//     (c3_open)                          (c4_open)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/branch-tag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
comment|// Create a tag for the tree of the commit on 'master'
comment|// tree-tag -> master.tree
name|RefUpdate
name|ttu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/tree-tag"
argument_list|)
decl_stmt|;
name|ttu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ttu
operator|.
name|setNewObjectId
argument_list|(
name|rcMaster
operator|.
name|getTree
argument_list|()
operator|.
name|toObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ttu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.skipFullRefEvaluationIfAllRefsAreVisible"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
DECL|method|uploadPackAllRefsVisibleNoRefsMetaConfig ()
specifier|public
name|void
name|uploadPackAllRefsVisibleNoRefsMetaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|group
argument_list|(
name|admins
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// tree-tag not visible. See comment in subsetOfBranchesVisibleIncludingHead.
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.skipFullRefEvaluationIfAllRefsAreVisible"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|uploadPackAllRefsVisibleNoRefsMetaConfigSkipFullRefEval ()
specifier|public
name|void
name|uploadPackAllRefsVisibleNoRefsMetaConfigSkipFullRefEval
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|group
argument_list|(
name|admins
argument_list|)
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
name|permissionKey
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/tree-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackAllRefsVisibleWithRefsMetaConfig ()
specifier|public
name|void
name|uploadPackAllRefsVisibleWithRefsMetaConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/tree-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|grantReadOnRefsTagsIsNoOp ()
specifier|public
name|void
name|grantReadOnRefsTagsIsNoOp
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|()
expr_stmt|;
comment|// We expect no refs returned
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesVisibleIncludingHead ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesVisibleIncludingHead
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// tree-tag is not visible because we don't look at trees reachable from
comment|// refs
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesVisibleNotIncludingHead ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesVisibleNotIncludingHead
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// master branch is not visible but master-tag is reachable from branch
comment|// (since PushOneCommit always bases changes on each other).
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// tree-tag not visible. See comment in subsetOfBranchesVisibleIncludingHead.
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesVisibleWithEdit ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesVisibleWithEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Admin's edit is not visible.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// User's edit is visible.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/users/01/1000001/edit-"
operator|+
name|cd3
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
comment|// tree-tag not visible. See comment in subsetOfBranchesVisibleIncludingHead.
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfBranchesAndEditsVisibleWithViewPrivateChanges ()
specifier|public
name|void
name|uploadPackSubsetOfBranchesAndEditsVisibleWithViewPrivateChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|VIEW_PRIVATE_CHANGES
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Admin's edit on change3 is visible.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Admin's edit on change4 is not visible since user cannot see the change.
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd4
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// User's edit is visible.
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/users/00/1000000/edit-"
operator|+
name|cd3
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|,
literal|"refs/users/01/1000001/edit-"
operator|+
name|cd3
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
comment|// tree-tag not visible. See comment in subsetOfBranchesVisibleIncludingHead.
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetOfRefsVisibleWithAccessDatabase ()
specifier|public
name|void
name|uploadPackSubsetOfRefsVisibleWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|create
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
comment|// Change 1 is visible due to accessDatabase capability, even though
comment|// refs/heads/master is not.
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|,
comment|// All edits are visible due to accessDatabase capability.
literal|"refs/users/00/1000000/edit-"
operator|+
name|cd3
operator|.
name|getId
argument_list|()
operator|+
literal|"/1"
argument_list|)
expr_stmt|;
comment|// tree-tag not visible. See comment in subsetOfBranchesVisibleIncludingHead.
block|}
annotation|@
name|Test
DECL|method|uploadPackNoSearchingChangeCacheImplMaster ()
specifier|public
name|void
name|uploadPackNoSearchingChangeCacheImplMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|uploadPackNoSearchingChangeCacheImpl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"container.slave"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
DECL|method|uploadPackNoSearchingChangeCacheImplSlave ()
specifier|public
name|void
name|uploadPackNoSearchingChangeCacheImplSlave
parameter_list|()
throws|throws
name|Exception
block|{
name|uploadPackNoSearchingChangeCacheImpl
argument_list|()
expr_stmt|;
block|}
DECL|method|uploadPackNoSearchingChangeCacheImpl ()
specifier|private
name|void
name|uploadPackNoSearchingChangeCacheImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertRefs
argument_list|(
name|project
argument_list|,
name|user
argument_list|,
comment|// Can't use stored values from the index so DB must be enabled.
literal|false
argument_list|,
literal|"HEAD"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// tree-tag not visible. See comment in subsetOfBranchesVisibleIncludingHead.
block|}
annotation|@
name|Test
DECL|method|uploadPackSequencesWithAccessDatabase ()
specifier|public
name|void
name|uploadPackSequencesWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRefs
argument_list|(
name|allProjects
argument_list|,
name|user
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertRefs
argument_list|(
name|allProjects
argument_list|,
name|user
argument_list|,
literal|true
argument_list|,
literal|"refs/sequences/changes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackAllRefsAreVisibleOrphanedTag ()
specifier|public
name|void
name|uploadPackAllRefsAreVisibleOrphanedTag
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Delete the pending change on 'branch' and 'branch' itself so that the tag gets orphaned
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd4
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
literal|"HEAD"
argument_list|,
literal|"refs/meta/config"
argument_list|,
name|psRef1
argument_list|,
name|metaRef1
argument_list|,
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef3
argument_list|,
name|metaRef3
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/tree-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadPackSubsetRefsVisibleOrphanedTagInvisible ()
specifier|public
name|void
name|uploadPackSubsetRefsVisibleOrphanedTagInvisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Create a tag for the pending change on 'branch' so that the tag is orphaned
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// change4-tag -> psRef4
name|RefUpdate
name|ctu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/change4-tag"
argument_list|)
decl_stmt|;
name|ctu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|ctu
operator|.
name|setNewObjectId
argument_list|(
name|repo
operator|.
name|exactRef
argument_list|(
name|psRef4
argument_list|)
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ctu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcMaster (c1 master)
comment|// second ls-remote: rcMaster (c1 master)<- newchange1 (master-newtag)
annotation|@
name|Test
DECL|method|uploadPackNewCommitOrphanTagInvisible ()
specifier|public
name|void
name|uploadPackNewCommitOrphanTagInvisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// rcMaster (c1 master)
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcMaster
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// rcMaster (c1 master)<- newchange1 (master-newtag)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/master-newtag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|r
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2)<- newcommit1<- newcommit2 (branch)
comment|// second ls-remote: rcBranch (c2)<- newcommit1 (branch-newtag)<- newcommit2 (branch)
annotation|@
name|Test
DECL|method|uploadPackNewReachableTagVisible ()
specifier|public
name|void
name|uploadPackNewReachableTagVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// c2<- newcommit1 (branch)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/branch"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
comment|// c2<- newcommit1<- newcommit2 (branch)
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|tagRc
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/branch"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// c2<- newcommit1 (branch-newtag)<- newcommit2 (branch)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/branch-newtag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|tagRc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/branch-newtag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2)<- newcommit1 (branch)
comment|// second ls-remote: rcBranch (c2)<- newcommit1<- newcommit2 (branch)
comment|// third  ls-remote: rcBranch (c2)<- newcommit1 (branch-newtag)<- newcommit2 (branch)
annotation|@
name|Test
DECL|method|uploadPackBranchFFNewTagOldBranchVisible ()
specifier|public
name|void
name|uploadPackBranchFFNewTagOldBranchVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// rcBranch (c2)<- newcommit1 (branch)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/branch"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// rcBranch (c2)<- newcommit1<- newcommit2 (branch)
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|tagRc
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/branch"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
comment|// rcBranch (c2)<- newcommit1 (branch-newtag)<- newcommit2 (branch)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/branch-newtag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|tagRc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/branch-newtag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2)<- newcommit1 (branch-oldtag)<- newcommit2 (branch)
comment|// second ls-remote: rcBranch (c2 branch)<- newcommit1 (branch-oldtag)
annotation|@
name|Test
DECL|method|uploadPackBranchRewindMakeTagUnreachableInVisible ()
specifier|public
name|void
name|uploadPackBranchRewindMakeTagUnreachableInVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// rcBranch (c2)<- newcommit1 (branch)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/branch"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
comment|// rcBranch (c2)<- newcommit1<- newcommit2 (branch)
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|tagRc
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/branch"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|bRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
comment|// rcBranch (c2)<- newcommit1 (branch-oldtag)<- newcommit2 (branch)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/branch-oldtag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|tagRc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/branch-oldtag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// rcBranch (c2 branch)<- newcommit1 (branch-oldtag)<- newcommit2
name|btu
operator|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/heads/branch"
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|bRc
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|rcBranch
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
comment|// See comment in subsetOfBranchesVisibleNotIncludingHead.
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2 branch)<- newcommit1 (new-tag)
comment|// second ls-remote: rcBranch (c2 branch)<- newcommit1 (new-tag)<- newcommit2 (new-branch)
annotation|@
name|Test
DECL|method|uploadPackCreateBranchTagReachableVisible ()
specifier|public
name|void
name|uploadPackCreateBranchTagReachableVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/new-branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// rcBranch (c2 branch)<- newcommit1 (branch-newtag)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/tags/new-tag"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|assertUploadPackRefs
argument_list|()
expr_stmt|;
comment|// rcBranch (c2)<- newcommit1 (branch-newtag)<- newcommit2 (branch)
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|tagRc
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/new-branch"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
literal|"refs/heads/new-branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/new-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2 branch)<- newcommit1 (updated-tag)
comment|// second ls-remote: rcBranch (c2 branch updated-tag)
annotation|@
name|Test
DECL|method|uploadPackTagUpdatedReachableVisible ()
specifier|public
name|void
name|uploadPackTagUpdatedReachableVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// rcBranch (c2 branch)<- newcommit1 (updated-tag)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/tags/updated-tag"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// rcBranch (c2 branch updated-tag)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/updated-tag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|tagRc
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|rcBranch
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/updated-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2 branch updated-tag)
comment|// second ls-remote: rcBranch (c2 branch)<- newcommit1 (updated-tag)
annotation|@
name|Test
DECL|method|uploadPackTagUpdatedUnreachableInvisible ()
specifier|public
name|void
name|uploadPackTagUpdatedUnreachableInvisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// rcBranch (c2 branch updated-tag)
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/updated-tag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|rcBranch
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|update
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/updated-tag"
argument_list|)
expr_stmt|;
comment|// rcBranch (c2 branch)<- newcommit1 (updated-tag)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/tags/updated-tag"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2 branch branch-tag)
comment|// second ls-remote: rcBranch (c2 branch)
annotation|@
name|Test
DECL|method|uploadPackTagDeleted ()
specifier|public
name|void
name|uploadPackTagDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/branch-tag"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/branch-tag"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// rcBranch (c2 branch branch-tag)
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// rcBranch (c2 branch)
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|RefUpdate
name|btu
init|=
name|repo
operator|.
name|updateRef
argument_list|(
literal|"refs/tags/branch-tag"
argument_list|)
decl_stmt|;
name|btu
operator|.
name|setExpectedOldObjectId
argument_list|(
name|rcBranch
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|btu
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|btu
operator|.
name|delete
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|)
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
comment|// first  ls-remote: rcBranch (c2 branch)<- newcommit1 (new-tag)<- newcommit2 (new-branch)
comment|// second ls-remote: rcBranch (c2 branch)<- newcommit1 (new-tag)
annotation|@
name|Test
DECL|method|uploadPackBranchDeleteTagUnreachableInvisible ()
specifier|public
name|void
name|uploadPackBranchDeleteTagUnreachableInvisible
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/new-branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|DELETE
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/new-branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/tags/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
comment|// rcBranch (branch)<- newcommit1 (new-tag)
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|rcBranch
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/tags/new-tag"
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|RevCommit
name|tagRc
init|=
name|r
operator|.
name|getCommit
argument_list|()
decl_stmt|;
comment|// rcBranch (c2 branch)<- newcommit1 (new-tag)<- newcommit2 (new-branch)
name|r
operator|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
operator|.
name|setParent
argument_list|(
name|tagRc
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/heads/new-branch"
argument_list|)
expr_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
block|}
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/heads/new-branch"
argument_list|,
literal|"refs/tags/new-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
comment|// rcBranch (c2 branch)<- newcommit1 (new-tag)
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
literal|"refs/heads/new-branch"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertUploadPackRefs
argument_list|(
name|psRef2
argument_list|,
name|metaRef2
argument_list|,
name|psRef4
argument_list|,
name|metaRef4
argument_list|,
literal|"refs/heads/branch"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackListsOpenChangesAsAdditionalHaves ()
specifier|public
name|void
name|receivePackListsOpenChangesAsAdditionalHaves
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRefAdvertiser
operator|.
name|Result
name|r
init|=
name|getReceivePackRefs
argument_list|(
name|admin
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|allRefs
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
comment|// meta refs are excluded
literal|"refs/heads/branch"
argument_list|,
literal|"refs/heads/master"
argument_list|,
literal|"refs/meta/config"
argument_list|,
literal|"refs/tags/branch-tag"
argument_list|,
literal|"refs/tags/master-tag"
argument_list|,
literal|"refs/tags/tree-tag"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|cd3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|obj
argument_list|(
name|cd4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackRespectsVisibilityOfOpenChanges ()
specifier|public
name|void
name|receivePackRespectsVisibilityOfOpenChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|deny
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/branch"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getReceivePackRefs
argument_list|(
name|user
argument_list|)
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|cd3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackListsOnlyLatestPatchSet ()
specifier|public
name|void
name|receivePackListsOnlyLatestPatchSet
parameter_list|()
throws|throws
name|Exception
block|{
name|testRepo
operator|.
name|reset
argument_list|(
name|obj
argument_list|(
name|cd3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|r
init|=
name|amendChange
argument_list|(
name|cd3
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|cd3
operator|=
name|r
operator|.
name|getChange
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getReceivePackRefs
argument_list|(
name|admin
argument_list|)
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|cd3
argument_list|,
literal|2
argument_list|)
argument_list|,
name|obj
argument_list|(
name|cd4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receivePackOmitsMissingObject ()
specifier|public
name|void
name|receivePackOmitsMissingObject
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rev
init|=
literal|"deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|TestRepository
argument_list|<
name|Repository
argument_list|>
name|tr
operator|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|String
name|subject
init|=
literal|"Subject for missing commit"
decl_stmt|;
name|Change
name|c
init|=
operator|new
name|Change
argument_list|(
name|cd3
operator|.
name|change
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCurrentPatchSet
argument_list|(
name|psId
argument_list|,
name|subject
argument_list|,
name|c
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|PersonIdent
name|committer
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|author
init|=
name|noteUtil
operator|.
name|newIdent
argument_list|(
name|getAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|committer
operator|.
name|getWhen
argument_list|()
argument_list|,
name|committer
argument_list|)
decl_stmt|;
name|tr
operator|.
name|branch
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|author
argument_list|(
name|author
argument_list|)
operator|.
name|committer
argument_list|(
name|committer
argument_list|)
operator|.
name|message
argument_list|(
literal|"Update patch set "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"Patch-set: "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Commit: "
operator|+
name|rev
operator|+
literal|"\n"
operator|+
literal|"Subject: "
operator|+
name|subject
operator|+
literal|"\n"
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|index
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|getReceivePackRefs
argument_list|(
name|admin
argument_list|)
operator|.
name|additionalHaves
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|obj
argument_list|(
name|cd4
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesDontShowUserBranchWithoutRead ()
specifier|public
name|void
name|advertisedReferencesDontShowUserBranchWithoutRead
parameter_list|()
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getUserRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitUserBranchesOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitUserBranchesOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getUserRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesIncludeAllUserBranchesWithAccessDatabase ()
specifier|public
name|void
name|advertisedReferencesIncludeAllUserBranchesWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getUserRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesDontShowGroupBranchToOwnerWithoutRead ()
specifier|public
name|void
name|advertisedReferencesDontShowGroupBranchToOwnerWithoutRead
parameter_list|()
throws|throws
name|Exception
block|{
name|createSelfOwnedGroup
argument_list|(
literal|"Foos"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getGroupRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitGroupBranchesOfNonOwnedGroups ()
specifier|public
name|void
name|advertisedReferencesOmitGroupBranchesOfNonOwnedGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|users
init|=
name|createGroup
argument_list|(
literal|"Users"
argument_list|,
name|admins
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|foos
init|=
name|createGroup
argument_list|(
literal|"Foos"
argument_list|,
name|users
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|bars
init|=
name|createSelfOwnedGroup
argument_list|(
literal|"Bars"
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getGroupRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|foos
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|bars
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesIncludeAllGroupBranchesWithAccessDatabase ()
specifier|public
name|void
name|advertisedReferencesIncludeAllGroupBranchesWithAccessDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|users
init|=
name|createGroup
argument_list|(
literal|"Users"
argument_list|,
name|admins
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getGroupRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|admins
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|nonInteractiveUsers
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|users
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesIncludeAllGroupBranchesForAdmins ()
specifier|public
name|void
name|advertisedReferencesIncludeAllGroupBranchesForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|users
init|=
name|createGroup
argument_list|(
literal|"Users"
argument_list|,
name|admins
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getGroupRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|admins
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|nonInteractiveUsers
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|users
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitNoteDbNotesBranches ()
specifier|public
name|void
name|advertisedReferencesOmitNoteDbNotesBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
name|RefNames
operator|.
name|REFS
operator|+
literal|"*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|containsNoneOf
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitPrivateChangesOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitPrivateChangesOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/heads/master"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|String
name|change3RefName
init|=
name|cd3
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|refName
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Precondition violated"
argument_list|)
operator|.
name|that
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesIncludePrivateChangesWhenAllRefsMayBeRead ()
specifier|public
name|void
name|advertisedReferencesIncludePrivateChangesWhenAllRefsMayBeRead
parameter_list|()
throws|throws
name|Exception
block|{
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|baseConfig
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"skipFullRefEvaluationIfAllRefsAreVisible"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|String
name|change3RefName
init|=
name|cd3
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|refName
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Precondition violated"
argument_list|)
operator|.
name|that
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|GerritConfig
argument_list|(
name|name
operator|=
literal|"auth.skipFullRefEvaluationIfAllRefsAreVisible"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
DECL|method|advertisedReferencesOmitPrivateChangesOfOtherUsersWhenShortcutDisabled ()
specifier|public
name|void
name|advertisedReferencesOmitPrivateChangesOfOtherUsersWhenShortcutDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|userTestRepository
init|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|userTestRepository
operator|.
name|git
argument_list|()
init|)
block|{
name|String
name|change3RefName
init|=
name|cd3
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|refName
argument_list|()
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"Precondition violated"
argument_list|)
operator|.
name|that
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|setPrivate
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getRefs
argument_list|(
name|git
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|change3RefName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitDraftCommentRefsOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitDraftCommentRefsOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|DraftInput
name|draftInput
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
name|draftInput
operator|.
name|line
operator|=
literal|1
expr_stmt|;
name|draftInput
operator|.
name|message
operator|=
literal|"nit: trailing whitespace"
expr_stmt|;
name|draftInput
operator|.
name|path
operator|=
name|Patch
operator|.
name|COMMIT_MSG
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|createDraft
argument_list|(
name|draftInput
argument_list|)
expr_stmt|;
name|String
name|draftCommentRef
init|=
name|RefNames
operator|.
name|refsDraftComments
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
comment|// user can see the draft comment ref of the own draft comment
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|user
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|draftCommentRef
argument_list|)
expr_stmt|;
comment|// user2 can't see the draft comment ref of user's draft comment
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|accountCreator
operator|.
name|user2
argument_list|()
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|draftCommentRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|advertisedReferencesOmitStarredChangesRefsOfOtherUsers ()
specifier|public
name|void
name|advertisedReferencesOmitStarredChangesRefsOfOtherUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|projectOperations
operator|.
name|project
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allow
argument_list|(
name|Permission
operator|.
name|READ
argument_list|)
operator|.
name|ref
argument_list|(
literal|"refs/*"
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|starredChangesRef
init|=
name|RefNames
operator|.
name|refsStarredChanges
argument_list|(
name|cd3
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
comment|// user can see the starred changes ref of the own star
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|user
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|starredChangesRef
argument_list|)
expr_stmt|;
comment|// user2 can't see the starred changes ref of admin's star
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|allUsersName
argument_list|,
name|accountCreator
operator|.
name|user2
argument_list|()
argument_list|)
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|starredChangesRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|hideMetadata ()
specifier|public
name|void
name|hideMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|allProjectsForUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|allowCapability
argument_list|(
name|GlobalCapability
operator|.
name|ACCESS_DATABASE
argument_list|)
operator|.
name|group
argument_list|(
name|REGISTERED_USERS
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// create change
name|TestRepository
argument_list|<
name|?
argument_list|>
name|allUsersRepo
init|=
name|cloneProject
argument_list|(
name|allUsers
argument_list|)
decl_stmt|;
name|fetch
argument_list|(
name|allUsersRepo
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_SELF
operator|+
literal|":userRef"
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|reset
argument_list|(
literal|"userRef"
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|mr
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|to
argument_list|(
literal|"refs/for/"
operator|+
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
decl_stmt|;
name|mr
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedNonMetaRefs
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|admins
argument_list|)
argument_list|,
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|nonInteractiveUsers
argument_list|)
argument_list|,
name|RefNames
operator|.
name|REFS_SEQUENCES
operator|+
name|Sequences
operator|.
name|NAME_ACCOUNTS
argument_list|,
name|RefNames
operator|.
name|REFS_SEQUENCES
operator|+
name|Sequences
operator|.
name|NAME_GROUPS
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
name|Constants
operator|.
name|HEAD
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedMetaRefs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|mr
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|expectedMetaRefs
operator|.
name|add
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|mr
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedAllRefs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expectedNonMetaRefs
argument_list|)
decl_stmt|;
name|expectedAllRefs
operator|.
name|addAll
argument_list|(
name|expectedMetaRefs
argument_list|)
expr_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|all
init|=
name|getAllRefs
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|PermissionBackend
operator|.
name|ForProject
name|forProject
init|=
name|newFilter
argument_list|(
name|allUsers
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|forProject
operator|.
name|filter
argument_list|(
name|all
argument_list|,
name|repo
argument_list|,
name|RefFilterOptions
operator|.
name|defaults
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedAllRefs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|forProject
operator|.
name|filter
argument_list|(
name|all
argument_list|,
name|repo
argument_list|,
name|RefFilterOptions
operator|.
name|builder
argument_list|()
operator|.
name|setFilterMeta
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedNonMetaRefs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|fetchSingleChangeWithoutIndexAccess ()
specifier|public
name|void
name|fetchSingleChangeWithoutIndexAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|change
init|=
name|createChange
argument_list|()
decl_stmt|;
name|String
name|patchSetRef
init|=
name|change
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
decl_stmt|;
try|try
init|(
name|AutoCloseable
name|ignored
init|=
name|disableChangeIndex
argument_list|()
init|;
name|Repository
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|singleRef
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|patchSetRef
argument_list|,
name|repo
operator|.
name|exactRef
argument_list|(
name|patchSetRef
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|filteredRefs
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|(
name|admin
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|filter
argument_list|(
name|singleRef
argument_list|,
name|repo
argument_list|,
name|RefFilterOptions
operator|.
name|defaults
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredRefs
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|singleRef
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|lsRemote (Project.NameKey p, TestAccount a)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|lsRemote
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|TestAccount
name|a
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testRepository
init|=
name|cloneProject
argument_list|(
name|p
argument_list|,
name|a
argument_list|)
decl_stmt|;
try|try
init|(
name|Git
name|git
init|=
name|testRepository
operator|.
name|git
argument_list|()
init|)
block|{
return|return
name|git
operator|.
name|lsRemote
argument_list|()
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getRefs (Git git)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getRefs
parameter_list|(
name|Git
name|git
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRefs
argument_list|(
name|git
argument_list|,
name|x
lambda|->
literal|true
argument_list|)
return|;
block|}
DECL|method|getUserRefs (Git git)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getUserRefs
parameter_list|(
name|Git
name|git
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRefs
argument_list|(
name|git
argument_list|,
name|RefNames
operator|::
name|isRefsUsers
argument_list|)
return|;
block|}
DECL|method|getGroupRefs (Git git)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getGroupRefs
parameter_list|(
name|Git
name|git
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRefs
argument_list|(
name|git
argument_list|,
name|RefNames
operator|::
name|isRefsGroups
argument_list|)
return|;
block|}
DECL|method|getRefs (Git git, Predicate<String> predicate)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getRefs
parameter_list|(
name|Git
name|git
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|git
operator|.
name|lsRemote
argument_list|()
operator|.
name|call
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Assert that refs seen by a non-admin user match the expected refs.    *    * @param expectedRefs expected refs.    * @throws Exception    */
DECL|method|assertUploadPackRefs (String... expectedRefs)
specifier|private
name|void
name|assertUploadPackRefs
parameter_list|(
name|String
modifier|...
name|expectedRefs
parameter_list|)
throws|throws
name|Exception
block|{
name|assertRefs
argument_list|(
name|project
argument_list|,
name|user
argument_list|,
literal|true
argument_list|,
name|expectedRefs
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRefs ( Project.NameKey project, TestAccount user, boolean disableDb, String... expectedRefs)
specifier|private
name|void
name|assertRefs
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|TestAccount
name|user
parameter_list|,
name|boolean
name|disableDb
parameter_list|,
name|String
modifier|...
name|expectedRefs
parameter_list|)
throws|throws
name|Exception
block|{
name|AutoCloseable
name|ctx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|disableDb
condition|)
block|{
name|ctx
operator|=
name|disableNoteDb
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|assertThat
argument_list|(
name|lsRemote
argument_list|(
name|project
argument_list|,
name|user
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedRefs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|disableDb
condition|)
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getReceivePackRefs (TestAccount u)
specifier|private
name|TestRefAdvertiser
operator|.
name|Result
name|getReceivePackRefs
parameter_list|(
name|TestAccount
name|u
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|AdvertiseRefsHook
name|adv
init|=
name|ReceiveCommitsAdvertiseRefsHookChain
operator|.
name|createForTest
argument_list|(
name|newFilter
argument_list|(
name|project
argument_list|,
name|u
argument_list|)
argument_list|,
name|queryProvider
argument_list|,
name|project
argument_list|)
decl_stmt|;
name|ReceivePack
name|rp
init|=
operator|new
name|ReceivePack
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|rp
operator|.
name|setAdvertiseRefsHook
argument_list|(
name|adv
argument_list|)
expr_stmt|;
name|TestRefAdvertiser
name|advertiser
init|=
operator|new
name|TestRefAdvertiser
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|rp
operator|.
name|sendAdvertisedRefs
argument_list|(
name|advertiser
argument_list|)
expr_stmt|;
return|return
name|advertiser
operator|.
name|result
argument_list|()
return|;
block|}
block|}
DECL|method|newFilter (Project.NameKey project, TestAccount u)
specifier|private
name|PermissionBackend
operator|.
name|ForProject
name|newFilter
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|TestAccount
name|u
parameter_list|)
block|{
return|return
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|(
name|u
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|project
argument_list|)
return|;
block|}
DECL|method|obj (ChangeData cd, int psNum)
specifier|private
specifier|static
name|ObjectId
name|obj
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|int
name|psNum
parameter_list|)
throws|throws
name|Exception
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|id
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|psNum
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|patchSet
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"%s not found in %s"
argument_list|,
name|psId
argument_list|,
name|cd
operator|.
name|patchSets
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|ps
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|ps
operator|.
name|commitId
argument_list|()
return|;
block|}
DECL|method|createSelfOwnedGroup (String name, TestAccount... members)
specifier|private
name|AccountGroup
operator|.
name|UUID
name|createSelfOwnedGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|TestAccount
modifier|...
name|members
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|createGroup
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|members
argument_list|)
return|;
block|}
DECL|method|createGroup ( String name, @Nullable AccountGroup.UUID ownerGroup, TestAccount... members)
specifier|private
name|AccountGroup
operator|.
name|UUID
name|createGroup
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|AccountGroup
operator|.
name|UUID
name|ownerGroup
parameter_list|,
name|TestAccount
modifier|...
name|members
parameter_list|)
throws|throws
name|RestApiException
block|{
name|GroupInput
name|groupInput
init|=
operator|new
name|GroupInput
argument_list|()
decl_stmt|;
name|groupInput
operator|.
name|name
operator|=
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|groupInput
operator|.
name|ownerId
operator|=
name|ownerGroup
operator|!=
literal|null
condition|?
name|ownerGroup
operator|.
name|get
argument_list|()
else|:
literal|null
expr_stmt|;
name|groupInput
operator|.
name|members
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|members
argument_list|)
operator|.
name|map
argument_list|(
name|m
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|AccountGroup
operator|.
name|uuid
argument_list|(
name|gApi
operator|.
name|groups
argument_list|()
operator|.
name|create
argument_list|(
name|groupInput
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|)
return|;
block|}
DECL|method|getAllRefs (Repository repo)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|getAllRefs
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toMap
argument_list|(
name|Ref
operator|::
name|getName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

