begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.json
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JsonEnumMappingTest
specifier|public
class|class
name|JsonEnumMappingTest
block|{
comment|// Use the regular, pre-configured Gson object we use throughout the Gerrit server to ensure that
comment|// the EnumTypeAdapterFactory is properly set up.
DECL|field|gson
specifier|private
specifier|final
name|Gson
name|gson
init|=
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|nullCanBeWrittenAndParsedBack ()
specifier|public
name|void
name|nullCanBeWrittenAndParsedBack
parameter_list|()
block|{
name|String
name|resultingJson
init|=
name|gson
operator|.
name|toJson
argument_list|(
literal|null
argument_list|,
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestEnum
name|value
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|resultingJson
argument_list|,
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|enumValueCanBeWrittenAndParsedBack ()
specifier|public
name|void
name|enumValueCanBeWrittenAndParsedBack
parameter_list|()
block|{
name|String
name|resultingJson
init|=
name|gson
operator|.
name|toJson
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|,
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestEnum
name|value
init|=
name|gson
operator|.
name|fromJson
argument_list|(
name|resultingJson
argument_list|,
name|TestEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|enumValueCanBeParsed ()
specifier|public
name|void
name|enumValueCanBeParsed
parameter_list|()
block|{
name|TestData
name|data
init|=
name|gson
operator|.
name|fromJson
argument_list|(
literal|"{\"value\":\"ONE\"}"
argument_list|,
name|TestData
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|value
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|TestEnum
operator|.
name|ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mixedCaseEnumValueIsTreatedAsUnset ()
specifier|public
name|void
name|mixedCaseEnumValueIsTreatedAsUnset
parameter_list|()
block|{
name|TestData
name|data
init|=
name|gson
operator|.
name|fromJson
argument_list|(
literal|"{\"value\":\"oNe\"}"
argument_list|,
name|TestData
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lowerCaseEnumValueIsTreatedAsUnset ()
specifier|public
name|void
name|lowerCaseEnumValueIsTreatedAsUnset
parameter_list|()
block|{
name|TestData
name|data
init|=
name|gson
operator|.
name|fromJson
argument_list|(
literal|"{\"value\":\"one\"}"
argument_list|,
name|TestData
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|notExistingEnumValueIsTreatedAsUnset ()
specifier|public
name|void
name|notExistingEnumValueIsTreatedAsUnset
parameter_list|()
block|{
name|TestData
name|data
init|=
name|gson
operator|.
name|fromJson
argument_list|(
literal|"{\"value\":\"FOUR\"}"
argument_list|,
name|TestData
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyEnumValueIsTreatedAsUnset ()
specifier|public
name|void
name|emptyEnumValueIsTreatedAsUnset
parameter_list|()
block|{
name|TestData
name|data
init|=
name|gson
operator|.
name|fromJson
argument_list|(
literal|"{\"value\":\"\"}"
argument_list|,
name|TestData
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|value
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|class|TestData
specifier|private
specifier|static
class|class
name|TestData
block|{
DECL|field|value
name|TestEnum
name|value
decl_stmt|;
DECL|method|TestData (TestEnum value)
specifier|public
name|TestData
parameter_list|(
name|TestEnum
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|enum|TestEnum
specifier|private
enum|enum
name|TestEnum
block|{
DECL|enumConstant|ONE
name|ONE
block|,
DECL|enumConstant|TWO
name|TWO
block|}
block|}
end_class

end_unit

