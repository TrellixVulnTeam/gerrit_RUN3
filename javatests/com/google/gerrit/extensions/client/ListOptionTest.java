begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.extensions.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListOptionTest
operator|.
name|MyOption
operator|.
name|BAR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListOptionTest
operator|.
name|MyOption
operator|.
name|BAZ
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListOptionTest
operator|.
name|MyOption
operator|.
name|FOO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ListOptionTest
specifier|public
class|class
name|ListOptionTest
extends|extends
name|GerritBaseTests
block|{
DECL|enum|MyOption
enum|enum
name|MyOption
implements|implements
name|ListOption
block|{
DECL|enumConstant|FOO
name|FOO
argument_list|(
literal|0
argument_list|)
block|,
DECL|enumConstant|BAR
name|BAR
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|BAZ
name|BAZ
argument_list|(
literal|17
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
DECL|method|MyOption (int value)
name|MyOption
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|fromBits ()
specifier|public
name|void
name|fromBits
parameter_list|()
block|{
name|assertThat
argument_list|(
name|IntMath
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|BAZ
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|131072
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FOO
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|BAR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|131072
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|BAZ
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FOO
argument_list|,
name|BAR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|131073
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FOO
argument_list|,
name|BAZ
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|131074
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|BAR
argument_list|,
name|BAZ
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
literal|131075
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|FOO
argument_list|,
name|BAR
argument_list|,
name|BAZ
argument_list|)
expr_stmt|;
name|assertFromBitsFails
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertFromBitsFails
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertFromBitsFails
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|assertFromBitsFails
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFromBitsFails (int v)
specifier|private
name|void
name|assertFromBitsFails
parameter_list|(
name|int
name|v
parameter_list|)
block|{
try|try
block|{
name|EnumSet
argument_list|<
name|MyOption
argument_list|>
name|opts
init|=
name|ListOption
operator|.
name|fromBits
argument_list|(
name|MyOption
operator|.
name|class
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"expected RuntimeException for fromBits(%s), got: %s"
argument_list|,
name|v
argument_list|,
name|opts
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
block|}
end_class

end_unit

