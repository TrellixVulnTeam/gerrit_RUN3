begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.testing
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GerritJUnitTest
specifier|public
class|class
name|GerritJUnitTest
block|{
DECL|class|MyException
specifier|private
specifier|static
class|class
name|MyException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|MyException (String msg)
name|MyException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MySubException
specifier|private
specifier|static
class|class
name|MySubException
extends|extends
name|MyException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|MySubException (String msg)
name|MySubException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|assertThrowsCatchesSpecifiedExceptionType ()
specifier|public
name|void
name|assertThrowsCatchesSpecifiedExceptionType
parameter_list|()
block|{
name|MyException
name|e
init|=
name|assertThrows
argument_list|(
name|MyException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|MyException
argument_list|(
literal|"foo"
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assertThrowsCatchesSubclassOfSpecifiedExceptionType ()
specifier|public
name|void
name|assertThrowsCatchesSubclassOfSpecifiedExceptionType
parameter_list|()
block|{
name|MyException
name|e
init|=
name|assertThrows
argument_list|(
name|MyException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|MySubException
argument_list|(
literal|"foo"
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|MySubException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assertThrowsConvertsUnexpectedExceptionTypeToAssertionError ()
specifier|public
name|void
name|assertThrowsConvertsUnexpectedExceptionTypeToAssertionError
parameter_list|()
block|{
try|try
block|{
name|assertThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|MyException
argument_list|(
literal|"foo"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"expected AssertionError"
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|IllegalStateException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|MyException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|MyException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|isEqualTo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|assertThrowsThrowsAssertionErrorWhenNothingThrown ()
specifier|public
name|void
name|assertThrowsThrowsAssertionErrorWhenNothingThrown
parameter_list|()
block|{
try|try
block|{
name|assertThrows
argument_list|(
name|MyException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|assertWithMessage
argument_list|(
literal|"expected AssertionError"
argument_list|)
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
name|MyException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|hasCauseThat
argument_list|()
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

