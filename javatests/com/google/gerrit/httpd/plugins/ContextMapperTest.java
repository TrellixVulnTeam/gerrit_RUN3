begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.package com.google.gerrit.httpd.plugins;
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|plugins
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|testutil
operator|.
name|FakeHttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ContextMapperTest
specifier|public
class|class
name|ContextMapperTest
block|{
DECL|field|CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|CONTEXT
init|=
literal|"/context"
decl_stmt|;
DECL|field|PLUGIN_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PLUGIN_NAME
init|=
literal|"my-plugin"
decl_stmt|;
DECL|field|RESOURCE
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE
init|=
literal|"my-resource"
decl_stmt|;
annotation|@
name|Test
DECL|method|unauthorized ()
specifier|public
name|void
name|unauthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|ContextMapper
name|classUnderTest
init|=
operator|new
name|ContextMapper
argument_list|(
name|CONTEXT
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|originalRequest
init|=
name|createFakeRequest
argument_list|(
literal|"/plugins/"
argument_list|,
name|PLUGIN_NAME
operator|+
literal|"/"
operator|+
name|RESOURCE
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|result
init|=
name|classUnderTest
operator|.
name|create
argument_list|(
name|originalRequest
argument_list|,
name|PLUGIN_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|CONTEXT
operator|+
literal|"/plugins/"
operator|+
name|PLUGIN_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getServletPath
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/"
operator|+
name|RESOURCE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|CONTEXT
operator|+
literal|"/plugins/"
operator|+
name|PLUGIN_NAME
operator|+
literal|"/"
operator|+
name|RESOURCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|authorized ()
specifier|public
name|void
name|authorized
parameter_list|()
throws|throws
name|Exception
block|{
name|ContextMapper
name|classUnderTest
init|=
operator|new
name|ContextMapper
argument_list|(
name|CONTEXT
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|originalRequest
init|=
name|createFakeRequest
argument_list|(
literal|"/a/plugins/"
argument_list|,
name|PLUGIN_NAME
operator|+
literal|"/"
operator|+
name|RESOURCE
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|result
init|=
name|classUnderTest
operator|.
name|create
argument_list|(
name|originalRequest
argument_list|,
name|PLUGIN_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|CONTEXT
operator|+
literal|"/a/plugins/"
operator|+
name|PLUGIN_NAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getServletPath
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/"
operator|+
name|RESOURCE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|CONTEXT
operator|+
literal|"/a/plugins/"
operator|+
name|PLUGIN_NAME
operator|+
literal|"/"
operator|+
name|RESOURCE
argument_list|)
expr_stmt|;
block|}
DECL|method|createFakeRequest (String servletPath, String pathInfo)
specifier|private
specifier|static
name|FakeHttpServletRequest
name|createFakeRequest
parameter_list|(
name|String
name|servletPath
parameter_list|,
name|String
name|pathInfo
parameter_list|)
block|{
return|return
operator|new
name|FakeHttpServletRequest
argument_list|(
literal|"gerrit.example.com"
argument_list|,
literal|80
argument_list|,
name|CONTEXT
argument_list|,
name|servletPath
argument_list|)
operator|.
name|setPathInfo
argument_list|(
name|pathInfo
argument_list|)
return|;
block|}
block|}
end_class

end_unit

