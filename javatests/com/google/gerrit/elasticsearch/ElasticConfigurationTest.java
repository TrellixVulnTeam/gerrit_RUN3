begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.elasticsearch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|ElasticConfiguration
operator|.
name|DEFAULT_USERNAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|ElasticConfiguration
operator|.
name|KEY_PASSWORD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|ElasticConfiguration
operator|.
name|KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|ElasticConfiguration
operator|.
name|KEY_SERVER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|ElasticConfiguration
operator|.
name|KEY_USERNAME
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|ElasticConfiguration
operator|.
name|SECTION_ELASTICSEARCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritJUnit
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|GerritBaseTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ElasticConfigurationTest
specifier|public
class|class
name|ElasticConfigurationTest
extends|extends
name|GerritBaseTests
block|{
annotation|@
name|Test
DECL|method|singleServerNoOtherConfig ()
specifier|public
name|void
name|singleServerNoOtherConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
name|newConfig
argument_list|()
decl_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertHosts
argument_list|(
name|esCfg
argument_list|,
literal|"http://elastic:1234"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|username
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|password
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|prefix
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|serverWithoutPortSpecified ()
specifier|public
name|void
name|serverWithoutPortSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_SERVER
argument_list|,
literal|"http://elastic"
argument_list|)
expr_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertHosts
argument_list|(
name|esCfg
argument_list|,
literal|"http://elastic:9200"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|prefix ()
specifier|public
name|void
name|prefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
name|newConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_PREFIX
argument_list|,
literal|"myprefix"
argument_list|)
expr_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|prefix
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"myprefix"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withAuthentication ()
specifier|public
name|void
name|withAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
name|newConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_USERNAME
argument_list|,
literal|"myself"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_PASSWORD
argument_list|,
literal|"s3kr3t"
argument_list|)
expr_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"myself"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|password
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"s3kr3t"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|withAuthenticationPasswordOnlyUsesDefaultUsername ()
specifier|public
name|void
name|withAuthenticationPasswordOnlyUsesDefaultUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
name|newConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_PASSWORD
argument_list|,
literal|"s3kr3t"
argument_list|)
expr_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|username
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|DEFAULT_USERNAME
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|esCfg
operator|.
name|password
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"s3kr3t"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleServers ()
specifier|public
name|void
name|multipleServers
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setStringList
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_SERVER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"http://elastic1:1234"
argument_list|,
literal|"http://elastic2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertHosts
argument_list|(
name|esCfg
argument_list|,
literal|"http://elastic1:1234"
argument_list|,
literal|"http://elastic2:1234"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noServers ()
specifier|public
name|void
name|noServers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertProvisionException
argument_list|(
operator|new
name|Config
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleServerInvalid ()
specifier|public
name|void
name|singleServerInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_SERVER
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertProvisionException
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipleServersIncludingInvalid ()
specifier|public
name|void
name|multipleServersIncludingInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setStringList
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_SERVER
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"http://elastic1:1234"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticConfiguration
name|esCfg
init|=
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|assertHosts
argument_list|(
name|esCfg
argument_list|,
literal|"http://elastic1:1234"
argument_list|)
expr_stmt|;
block|}
DECL|method|newConfig ()
specifier|private
specifier|static
name|Config
name|newConfig
parameter_list|()
block|{
name|Config
name|config
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setString
argument_list|(
name|SECTION_ELASTICSEARCH
argument_list|,
literal|null
argument_list|,
name|KEY_SERVER
argument_list|,
literal|"http://elastic:1234"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|assertHosts (ElasticConfiguration cfg, Object... hostURIs)
specifier|private
name|void
name|assertHosts
parameter_list|(
name|ElasticConfiguration
name|cfg
parameter_list|,
name|Object
modifier|...
name|hostURIs
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cfg
operator|.
name|getHosts
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|HttpHost
operator|::
name|toURI
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|hostURIs
argument_list|)
expr_stmt|;
block|}
DECL|method|assertProvisionException (Config cfg)
specifier|private
name|void
name|assertProvisionException
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|ProvisionException
name|thrown
init|=
name|assertThrows
argument_list|(
name|ProvisionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ElasticConfiguration
argument_list|(
name|cfg
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thrown
argument_list|)
operator|.
name|hasMessageThat
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No valid Elasticsearch servers configured"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

