begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.gpg
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gpg
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|EnableSignedPush
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ReceivePackInitializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PreReceiveHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PreReceiveHookChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|SignedPushConfig
import|;
end_import

begin_class
DECL|class|SignedPushModule
class|class
name|SignedPushModule
extends|extends
name|AbstractModule
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
if|if
condition|(
operator|!
name|BouncyCastleUtil
operator|.
name|havePGP
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Bouncy Castle PGP not installed"
argument_list|)
throw|;
block|}
name|bind
argument_list|(
name|PublicKeyStore
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|StoreProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|DynamicSet
operator|.
name|bind
argument_list|(
name|binder
argument_list|()
argument_list|,
name|ReceivePackInitializer
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|Initializer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Singleton
DECL|class|Initializer
specifier|private
specifier|static
class|class
name|Initializer
implements|implements
name|ReceivePackInitializer
block|{
DECL|field|signedPushConfig
specifier|private
specifier|final
name|SignedPushConfig
name|signedPushConfig
decl_stmt|;
DECL|field|hook
specifier|private
specifier|final
name|SignedPushPreReceiveHook
name|hook
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|Initializer ( @erritServerConfig Config cfg, @EnableSignedPush boolean enableSignedPush, SignedPushPreReceiveHook hook, ProjectCache projectCache)
name|Initializer
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|EnableSignedPush
name|boolean
name|enableSignedPush
parameter_list|,
name|SignedPushPreReceiveHook
name|hook
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|hook
operator|=
name|hook
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
if|if
condition|(
name|enableSignedPush
condition|)
block|{
name|String
name|seed
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"certNonceSeed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|seed
argument_list|)
condition|)
block|{
name|seed
operator|=
name|randomString
argument_list|(
literal|64
argument_list|)
expr_stmt|;
block|}
name|signedPushConfig
operator|=
operator|new
name|SignedPushConfig
argument_list|()
expr_stmt|;
name|signedPushConfig
operator|.
name|setCertNonceSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|signedPushConfig
operator|.
name|setCertNonceSlopLimit
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"certNonceSlop"
argument_list|,
literal|5
operator|*
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|signedPushConfig
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (Project.NameKey project, ReceivePack rp)
specifier|public
name|void
name|init
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|ReceivePack
name|rp
parameter_list|)
block|{
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ps
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|ENABLE_SIGNED_PUSH
argument_list|)
condition|)
block|{
name|rp
operator|.
name|setSignedPushConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|signedPushConfig
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"receive.enableSignedPush is true for project %s but"
operator|+
literal|" false in gerrit.config, so signed push verification is"
operator|+
literal|" disabled"
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setSignedPushConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|rp
operator|.
name|setSignedPushConfig
argument_list|(
name|signedPushConfig
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PreReceiveHook
argument_list|>
name|hooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|REQUIRE_SIGNED_PUSH
argument_list|)
condition|)
block|{
name|hooks
operator|.
name|add
argument_list|(
name|SignedPushPreReceiveHook
operator|.
name|Required
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
name|hooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|add
argument_list|(
name|rp
operator|.
name|getPreReceiveHook
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPreReceiveHook
argument_list|(
name|PreReceiveHookChain
operator|.
name|newChain
argument_list|(
name|hooks
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Singleton
DECL|class|StoreProvider
specifier|private
specifier|static
class|class
name|StoreProvider
implements|implements
name|Provider
argument_list|<
name|PublicKeyStore
argument_list|>
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
annotation|@
name|Inject
DECL|method|StoreProvider (GitRepositoryManager repoManager, AllUsersName allUsers)
name|StoreProvider
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|PublicKeyStore
name|get
parameter_list|()
block|{
specifier|final
name|Repository
name|repo
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Cannot open "
operator|+
name|allUsers
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|PublicKeyStore
argument_list|(
name|repo
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
DECL|method|randomString (int len)
specifier|private
specifier|static
name|String
name|randomString
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|Random
name|random
decl_stmt|;
try|try
block|{
name|random
operator|=
name|SecureRandom
operator|.
name|getInstance
argument_list|(
literal|"SHA1PRNG"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

