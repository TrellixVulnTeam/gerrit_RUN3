begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.permissions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PluginProjectPermission
operator|.
name|PLUGIN_PERMISSION_NAME_PATTERN_STRING
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|CapabilityDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|PluginPermissionDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|PluginProjectPermissionDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/** Utilities for plugin permissions. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|PluginPermissionsUtil
specifier|public
specifier|final
class|class
name|PluginPermissionsUtil
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|PLUGIN_NAME_PATTERN_STRING
specifier|private
specifier|static
specifier|final
name|String
name|PLUGIN_NAME_PATTERN_STRING
init|=
literal|"[a-zA-Z0-9-]+"
decl_stmt|;
comment|/**    * Name pattern for a plugin non-capability permission stored in the config file.    *    *<p>This pattern requires a plugin declared permission to have a name in the access section of    * {@code ProjectConfig} with a format like "plugin-{pluginName}-{permissionName}", which makes it    * easier to tell if a config name represents a plugin permission or not. Note "-" isn't clear    * enough for this purpose since some core permissions, e.g. "label-", also contain "-".    */
DECL|field|PLUGIN_PERMISSION_NAME_IN_CONFIG_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PLUGIN_PERMISSION_NAME_IN_CONFIG_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^plugin-"
operator|+
name|PLUGIN_NAME_PATTERN_STRING
operator|+
literal|"-"
operator|+
name|PLUGIN_PERMISSION_NAME_PATTERN_STRING
operator|+
literal|"$"
argument_list|)
decl_stmt|;
comment|/** Name pattern for a Gerrit plugin. */
DECL|field|PLUGIN_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PLUGIN_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|PLUGIN_NAME_PATTERN_STRING
operator|+
literal|"$"
argument_list|)
decl_stmt|;
DECL|field|capabilityDefinitions
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|CapabilityDefinition
argument_list|>
name|capabilityDefinitions
decl_stmt|;
DECL|field|pluginProjectPermissionDefinitions
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|PluginProjectPermissionDefinition
argument_list|>
name|pluginProjectPermissionDefinitions
decl_stmt|;
annotation|@
name|Inject
DECL|method|PluginPermissionsUtil ( DynamicMap<CapabilityDefinition> capabilityDefinitions, DynamicMap<PluginProjectPermissionDefinition> pluginProjectPermissionDefinitions)
name|PluginPermissionsUtil
parameter_list|(
name|DynamicMap
argument_list|<
name|CapabilityDefinition
argument_list|>
name|capabilityDefinitions
parameter_list|,
name|DynamicMap
argument_list|<
name|PluginProjectPermissionDefinition
argument_list|>
name|pluginProjectPermissionDefinitions
parameter_list|)
block|{
name|this
operator|.
name|capabilityDefinitions
operator|=
name|capabilityDefinitions
expr_stmt|;
name|this
operator|.
name|pluginProjectPermissionDefinitions
operator|=
name|pluginProjectPermissionDefinitions
expr_stmt|;
block|}
comment|/**    * Collects all the plugin declared capabilities.    *    * @return a map of plugin declared capabilities with "pluginName" as its keys and    *     "pluginName-{permissionName}" as its values.    */
DECL|method|collectPluginCapabilities ()
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectPluginCapabilities
parameter_list|()
block|{
return|return
name|collectPermissions
argument_list|(
name|capabilityDefinitions
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Collects all the plugin declared project permissions.    *    * @return a map of plugin declared project permissions with "{pluginName}" as its keys and    *     "plugin-{pluginName}-{permissionName}" as its values.    */
DECL|method|collectPluginProjectPermissions ()
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectPluginProjectPermissions
parameter_list|()
block|{
return|return
name|collectPermissions
argument_list|(
name|pluginProjectPermissionDefinitions
argument_list|,
literal|"plugin-"
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|PluginPermissionDefinition
parameter_list|>
DECL|method|collectPermissions (DynamicMap<T> definitions, String prefix)
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectPermissions
parameter_list|(
name|DynamicMap
argument_list|<
name|T
argument_list|>
name|definitions
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|permissionIdNames
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Extension
argument_list|<
name|T
argument_list|>
name|extension
range|:
name|definitions
control|)
block|{
name|String
name|pluginName
init|=
name|extension
operator|.
name|getPluginName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PLUGIN_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|pluginName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Plugin name '%s' must match '%s' to use permissions; rename the plugin"
argument_list|,
name|pluginName
argument_list|,
name|PLUGIN_NAME_PATTERN
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|id
init|=
name|prefix
operator|+
name|pluginName
operator|+
literal|"-"
operator|+
name|extension
operator|.
name|getExportName
argument_list|()
decl_stmt|;
name|permissionIdNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|extension
operator|.
name|get
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|permissionIdNames
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Checks if a given name matches the plugin declared permission name pattern for configs.    *    * @param name a config name which may stand for a plugin permission.    * @return whether the name matches the plugin permission name pattern for configs.    */
DECL|method|isValidPluginPermission (String name)
specifier|public
specifier|static
name|boolean
name|isValidPluginPermission
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|PLUGIN_PERMISSION_NAME_IN_CONFIG_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
end_class

end_unit

