begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.permissions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
operator|.
name|BLOCK
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
operator|.
name|isRE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|mapping
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPatternMatcher
operator|.
name|ExpandParameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SectionMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Effective permissions applied to a reference in a project.  *  *<p>A collection may be user specific if a matching {@link AccessSection} uses "${username}" in  * its name. The permissions granted in that section may only be granted to the username that  * appears in the reference name, and also only if the user is a member of the relevant group.  */
end_comment

begin_class
DECL|class|PermissionCollection
specifier|public
class|class
name|PermissionCollection
block|{
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|sorter
specifier|private
specifier|final
name|SectionSortCache
name|sorter
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (SectionSortCache sorter)
name|Factory
parameter_list|(
name|SectionSortCache
name|sorter
parameter_list|)
block|{
name|this
operator|.
name|sorter
operator|=
name|sorter
expr_stmt|;
block|}
comment|/**      * Drop the SectionMatchers that don't apply to the current ref. The user is only used for      * expanding per-user ref patterns, and not for checking group memberships.      *      * @param matcherList the input sections.      * @param ref the ref name for which to filter.      * @param user Only used for expanding per-user ref patterns.      * @param out the filtered sections.      * @return true if the result is only valid for this user.      */
DECL|method|filterRefMatchingSections ( Iterable<SectionMatcher> matcherList, String ref, CurrentUser user, Map<AccessSection, Project.NameKey> out)
specifier|private
specifier|static
name|boolean
name|filterRefMatchingSections
parameter_list|(
name|Iterable
argument_list|<
name|SectionMatcher
argument_list|>
name|matcherList
parameter_list|,
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Map
argument_list|<
name|AccessSection
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|out
parameter_list|)
block|{
name|boolean
name|perUser
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SectionMatcher
name|sm
range|:
name|matcherList
control|)
block|{
comment|// If the matcher has to expand parameters and its prefix matches the
comment|// reference there is a very good chance the reference is actually user
comment|// specific, even if the matcher does not match the reference. Since its
comment|// difficult to prove this is true all of the time, use an approximation
comment|// to prevent reuse of collections across users accessing the same
comment|// reference at the same time.
comment|//
comment|// This check usually gets caching right, as most per-user references
comment|// use a common prefix like "refs/sandbox/" or "refs/heads/users/"
comment|// that will never be shared with non-user references, and the per-user
comment|// references are usually less frequent than the non-user references.
if|if
condition|(
name|sm
operator|.
name|getMatcher
argument_list|()
operator|instanceof
name|ExpandParameters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|ExpandParameters
operator|)
name|sm
operator|.
name|getMatcher
argument_list|()
operator|)
operator|.
name|matchPrefix
argument_list|(
name|ref
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|perUser
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sm
operator|.
name|match
argument_list|(
name|ref
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|sm
operator|.
name|getSection
argument_list|()
argument_list|,
name|sm
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sm
operator|.
name|match
argument_list|(
name|ref
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|sm
operator|.
name|getSection
argument_list|()
argument_list|,
name|sm
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perUser
return|;
block|}
comment|/**      * Get all permissions that apply to a reference. The user is only used for per-user ref names,      * so the return value may include permissions for groups the user is not part of.      *      * @param matcherList collection of sections that should be considered, in priority order      *     (project specific definitions must appear before inherited ones).      * @param ref reference being accessed.      * @param user if the reference is a per-user reference, e.g. access sections using the      *     parameter variable "${username}" will have each username inserted into them to see if      *     they apply to the reference named by {@code ref}.      * @return map of permissions that apply to this reference, keyed by permission name.      */
DECL|method|filter ( Iterable<SectionMatcher> matcherList, String ref, CurrentUser user)
name|PermissionCollection
name|filter
parameter_list|(
name|Iterable
argument_list|<
name|SectionMatcher
argument_list|>
name|matcherList
parameter_list|,
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
if|if
condition|(
name|isRE
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|ref
operator|=
name|RefPattern
operator|.
name|shortestExample
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|ref
operator|=
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ref
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// LinkedHashMap to maintain input ordering.
name|Map
argument_list|<
name|AccessSection
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|sectionToProject
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|perUser
init|=
name|filterRefMatchingSections
argument_list|(
name|matcherList
argument_list|,
name|ref
argument_list|,
name|user
argument_list|,
name|sectionToProject
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccessSection
argument_list|>
name|sections
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sectionToProject
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Sort by ref pattern specificity. For equally specific patterns, the sections from the
comment|// project closer to the current one come first.
name|sorter
operator|.
name|sort
argument_list|(
name|ref
argument_list|,
name|sections
argument_list|)
expr_stmt|;
comment|// For block permissions, we want a different order: first, we want to go from parent to
comment|// child.
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AccessSection
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
argument_list|>
name|accessDescending
init|=
name|Lists
operator|.
name|reverse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sectionToProject
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|List
argument_list|<
name|AccessSection
argument_list|>
argument_list|>
name|accessByProject
init|=
name|accessDescending
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|LinkedHashMap
operator|::
operator|new
argument_list|,
name|mapping
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Within each project, sort by ref specificity.
for|for
control|(
name|List
argument_list|<
name|AccessSection
argument_list|>
name|secs
range|:
name|accessByProject
operator|.
name|values
argument_list|()
control|)
block|{
name|sorter
operator|.
name|sort
argument_list|(
name|ref
argument_list|,
name|secs
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PermissionCollection
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|accessByProject
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|sections
argument_list|,
name|perUser
argument_list|)
return|;
block|}
block|}
comment|/** Returns permissions in the right order for evaluating BLOCK status. */
DECL|method|getBlockRules (String perm)
name|List
argument_list|<
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|getBlockRules
parameter_list|(
name|String
name|perm
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|ps
init|=
name|blockPerProjectByPermission
operator|.
name|get
argument_list|(
name|perm
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
name|ps
operator|=
name|calculateBlockRules
argument_list|(
name|perm
argument_list|)
expr_stmt|;
name|blockPerProjectByPermission
operator|.
name|put
argument_list|(
name|perm
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
return|return
name|ps
return|;
block|}
comment|/** Returns permissions in the right order for evaluating ALLOW/DENY status. */
DECL|method|getAllowRules (String perm)
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|getAllowRules
parameter_list|(
name|String
name|perm
parameter_list|)
block|{
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|ps
init|=
name|rulesByPermission
operator|.
name|get
argument_list|(
name|perm
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
name|ps
operator|=
name|calculateAllowRules
argument_list|(
name|perm
argument_list|)
expr_stmt|;
name|rulesByPermission
operator|.
name|put
argument_list|(
name|perm
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
return|return
name|ps
return|;
block|}
comment|/** calculates permissions for ALLOW processing. */
DECL|method|calculateAllowRules (String permName)
specifier|private
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|calculateAllowRules
parameter_list|(
name|String
name|permName
parameter_list|)
block|{
name|Set
argument_list|<
name|SeenRule
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessSection
name|s
range|:
name|accessSectionsUpward
control|)
block|{
name|Permission
name|p
init|=
name|s
operator|.
name|getPermission
argument_list|(
name|permName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|PermissionRule
name|pr
range|:
name|p
operator|.
name|getRules
argument_list|()
control|)
block|{
name|SeenRule
name|sr
init|=
name|SeenRule
operator|.
name|create
argument_list|(
name|s
argument_list|,
name|pr
argument_list|)
decl_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|sr
argument_list|)
condition|)
block|{
comment|// We allow only one rule per (ref-pattern, group) tuple. This is used to implement DENY:
comment|// If we see a DENY before an ALLOW rule, that causes the ALLOW rule to be skipped here,
comment|// negating access.
continue|continue;
block|}
name|seen
operator|.
name|add
argument_list|(
name|sr
argument_list|)
expr_stmt|;
if|if
condition|(
name|pr
operator|.
name|getAction
argument_list|()
operator|==
name|BLOCK
condition|)
block|{
comment|// Block rules are handled elsewhere.
continue|continue;
block|}
if|if
condition|(
name|pr
operator|.
name|getAction
argument_list|()
operator|==
name|PermissionRule
operator|.
name|Action
operator|.
name|DENY
condition|)
block|{
comment|// DENY rules work by not adding ALLOW rules. Nothing else to do.
continue|continue;
block|}
name|r
operator|.
name|add
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|getExclusiveGroup
argument_list|()
condition|)
block|{
comment|// We found an exclusive permission, so no need to further go up the hierarchy.
break|break;
block|}
block|}
return|return
name|r
return|;
block|}
comment|// Calculates the inputs for determining BLOCK status, grouped by project.
DECL|method|calculateBlockRules (String permName)
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|calculateBlockRules
parameter_list|(
name|String
name|permName
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|AccessSection
argument_list|>
name|secs
range|:
name|this
operator|.
name|accessSectionsPerProjectDownward
control|)
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|blockFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AccessSection
name|sec
range|:
name|secs
control|)
block|{
name|Permission
name|p
init|=
name|sec
operator|.
name|getPermission
argument_list|(
name|permName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|PermissionRule
name|pr
range|:
name|p
operator|.
name|getRules
argument_list|()
control|)
block|{
if|if
condition|(
name|blockFound
operator|||
name|pr
operator|.
name|getAction
argument_list|()
operator|==
name|Action
operator|.
name|BLOCK
condition|)
block|{
name|blockFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|perms
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockFound
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|field|accessSectionsPerProjectDownward
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|AccessSection
argument_list|>
argument_list|>
name|accessSectionsPerProjectDownward
decl_stmt|;
DECL|field|accessSectionsUpward
specifier|private
name|List
argument_list|<
name|AccessSection
argument_list|>
name|accessSectionsUpward
decl_stmt|;
DECL|field|rulesByPermission
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PermissionRule
argument_list|>
argument_list|>
name|rulesByPermission
decl_stmt|;
DECL|field|blockPerProjectByPermission
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Permission
argument_list|>
argument_list|>
argument_list|>
name|blockPerProjectByPermission
decl_stmt|;
DECL|field|perUser
specifier|private
specifier|final
name|boolean
name|perUser
decl_stmt|;
DECL|method|PermissionCollection ( List<List<AccessSection>> accessSectionsDownward, List<AccessSection> accessSectionsUpward, boolean perUser)
specifier|private
name|PermissionCollection
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|AccessSection
argument_list|>
argument_list|>
name|accessSectionsDownward
parameter_list|,
name|List
argument_list|<
name|AccessSection
argument_list|>
name|accessSectionsUpward
parameter_list|,
name|boolean
name|perUser
parameter_list|)
block|{
name|this
operator|.
name|accessSectionsPerProjectDownward
operator|=
name|accessSectionsDownward
expr_stmt|;
name|this
operator|.
name|accessSectionsUpward
operator|=
name|accessSectionsUpward
expr_stmt|;
name|this
operator|.
name|rulesByPermission
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockPerProjectByPermission
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|perUser
operator|=
name|perUser
expr_stmt|;
block|}
comment|/**    * @return true if a "${username}" pattern might need to be expanded to build this collection,    *     making the results user specific.    */
DECL|method|isUserSpecific ()
specifier|public
name|boolean
name|isUserSpecific
parameter_list|()
block|{
return|return
name|perUser
return|;
block|}
comment|/** (ref, permission, group) tuple. */
annotation|@
name|AutoValue
DECL|class|SeenRule
specifier|abstract
specifier|static
class|class
name|SeenRule
block|{
DECL|method|refPattern ()
specifier|public
specifier|abstract
name|String
name|refPattern
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|group ()
specifier|public
specifier|abstract
name|AccountGroup
operator|.
name|UUID
name|group
parameter_list|()
function_decl|;
DECL|method|create (AccessSection section, @Nullable PermissionRule rule)
specifier|static
name|SeenRule
name|create
parameter_list|(
name|AccessSection
name|section
parameter_list|,
annotation|@
name|Nullable
name|PermissionRule
name|rule
parameter_list|)
block|{
name|AccountGroup
operator|.
name|UUID
name|group
init|=
name|rule
operator|!=
literal|null
operator|&&
name|rule
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|?
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|AutoValue_PermissionCollection_SeenRule
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

