begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.permissions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|GlobalOrPluginPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|conditions
operator|.
name|BooleanCondition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|conditions
operator|.
name|PrivateInternals_BooleanCondition
import|;
end_import

begin_comment
comment|/** {@link BooleanCondition} to evaluate a permission. */
end_comment

begin_class
DECL|class|PermissionBackendCondition
specifier|public
specifier|abstract
class|class
name|PermissionBackendCondition
extends|extends
name|PrivateInternals_BooleanCondition
operator|.
name|SubclassOnlyInCoreServer
block|{
DECL|field|value
name|Boolean
name|value
decl_stmt|;
comment|/**    * Assign a specific {@code testOrFalse} result to this condition.    *    *<p>By setting the condition to a specific value the condition will bypass calling {@link    * PermissionBackend} during {@code value()}, and immediately return the set value instead.    *    * @param val value to return from {@code value()}.    */
DECL|method|set (boolean val)
specifier|public
name|void
name|set
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|value
operator|=
name|val
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|evaluatesTrivially ()
specifier|public
name|boolean
name|evaluatesTrivially
parameter_list|()
block|{
comment|// PermissionBackendCondition needs to contact PermissionBackend so trivial evaluation is not
comment|// possible.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|reduce ()
specifier|public
name|BooleanCondition
name|reduce
parameter_list|()
block|{
comment|// No reductions can be made
return|return
name|this
return|;
block|}
DECL|class|WithUser
specifier|public
specifier|static
class|class
name|WithUser
extends|extends
name|PermissionBackendCondition
block|{
DECL|field|impl
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|WithUser
name|impl
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|GlobalOrPluginPermission
name|perm
decl_stmt|;
DECL|method|WithUser (PermissionBackend.WithUser impl, GlobalOrPluginPermission perm)
name|WithUser
parameter_list|(
name|PermissionBackend
operator|.
name|WithUser
name|impl
parameter_list|,
name|GlobalOrPluginPermission
name|perm
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
block|}
DECL|method|withUser ()
specifier|public
name|PermissionBackend
operator|.
name|WithUser
name|withUser
parameter_list|()
block|{
return|return
name|impl
return|;
block|}
DECL|method|permission ()
specifier|public
name|GlobalOrPluginPermission
name|permission
parameter_list|()
block|{
return|return
name|perm
return|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|impl
operator|.
name|testOrFalse
argument_list|(
name|perm
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PermissionBackendCondition.WithUser("
operator|+
name|perm
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|ForProject
specifier|public
specifier|static
class|class
name|ForProject
extends|extends
name|PermissionBackendCondition
block|{
DECL|field|impl
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForProject
name|impl
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|ProjectPermission
name|perm
decl_stmt|;
DECL|method|ForProject (PermissionBackend.ForProject impl, ProjectPermission perm)
name|ForProject
parameter_list|(
name|PermissionBackend
operator|.
name|ForProject
name|impl
parameter_list|,
name|ProjectPermission
name|perm
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
block|}
DECL|method|project ()
specifier|public
name|PermissionBackend
operator|.
name|ForProject
name|project
parameter_list|()
block|{
return|return
name|impl
return|;
block|}
DECL|method|permission ()
specifier|public
name|ProjectPermission
name|permission
parameter_list|()
block|{
return|return
name|perm
return|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|impl
operator|.
name|testOrFalse
argument_list|(
name|perm
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PermissionBackendCondition.ForProject("
operator|+
name|perm
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|ForRef
specifier|public
specifier|static
class|class
name|ForRef
extends|extends
name|PermissionBackendCondition
block|{
DECL|field|impl
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForRef
name|impl
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|RefPermission
name|perm
decl_stmt|;
DECL|method|ForRef (PermissionBackend.ForRef impl, RefPermission perm)
name|ForRef
parameter_list|(
name|PermissionBackend
operator|.
name|ForRef
name|impl
parameter_list|,
name|RefPermission
name|perm
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
block|}
DECL|method|ref ()
specifier|public
name|PermissionBackend
operator|.
name|ForRef
name|ref
parameter_list|()
block|{
return|return
name|impl
return|;
block|}
DECL|method|permission ()
specifier|public
name|RefPermission
name|permission
parameter_list|()
block|{
return|return
name|perm
return|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|impl
operator|.
name|testOrFalse
argument_list|(
name|perm
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PermissionBackendCondition.ForRef("
operator|+
name|perm
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|ForChange
specifier|public
specifier|static
class|class
name|ForChange
extends|extends
name|PermissionBackendCondition
block|{
DECL|field|impl
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForChange
name|impl
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|ChangePermissionOrLabel
name|perm
decl_stmt|;
DECL|method|ForChange (PermissionBackend.ForChange impl, ChangePermissionOrLabel perm)
name|ForChange
parameter_list|(
name|PermissionBackend
operator|.
name|ForChange
name|impl
parameter_list|,
name|ChangePermissionOrLabel
name|perm
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
block|}
DECL|method|change ()
specifier|public
name|PermissionBackend
operator|.
name|ForChange
name|change
parameter_list|()
block|{
return|return
name|impl
return|;
block|}
DECL|method|permission ()
specifier|public
name|ChangePermissionOrLabel
name|permission
parameter_list|()
block|{
return|return
name|perm
return|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|impl
operator|.
name|testOrFalse
argument_list|(
name|perm
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PermissionBackendCondition.ForChange("
operator|+
name|perm
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

