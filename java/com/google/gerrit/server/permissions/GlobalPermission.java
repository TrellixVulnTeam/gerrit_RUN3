begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.permissions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|DefaultPermissionMappings
operator|.
name|globalPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|CapabilityScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|RequiresAnyCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|RequiresCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|GerritPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|GlobalOrPluginPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|access
operator|.
name|PluginPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Global server permissions built into Gerrit. */
end_comment

begin_enum
DECL|enum|GlobalPermission
specifier|public
enum|enum
name|GlobalPermission
implements|implements
name|GlobalOrPluginPermission
block|{
DECL|enumConstant|ACCESS_DATABASE
name|ACCESS_DATABASE
block|,
DECL|enumConstant|ADMINISTRATE_SERVER
name|ADMINISTRATE_SERVER
block|,
DECL|enumConstant|CREATE_ACCOUNT
name|CREATE_ACCOUNT
block|,
DECL|enumConstant|CREATE_GROUP
name|CREATE_GROUP
block|,
DECL|enumConstant|CREATE_PROJECT
name|CREATE_PROJECT
block|,
DECL|enumConstant|EMAIL_REVIEWERS
name|EMAIL_REVIEWERS
block|,
DECL|enumConstant|FLUSH_CACHES
name|FLUSH_CACHES
block|,
DECL|enumConstant|KILL_TASK
name|KILL_TASK
block|,
DECL|enumConstant|MAINTAIN_SERVER
name|MAINTAIN_SERVER
block|,
DECL|enumConstant|MODIFY_ACCOUNT
name|MODIFY_ACCOUNT
block|,
DECL|enumConstant|RUN_AS
name|RUN_AS
block|,
DECL|enumConstant|RUN_GC
name|RUN_GC
block|,
DECL|enumConstant|STREAM_EVENTS
name|STREAM_EVENTS
block|,
DECL|enumConstant|VIEW_ALL_ACCOUNTS
name|VIEW_ALL_ACCOUNTS
block|,
DECL|enumConstant|VIEW_CACHES
name|VIEW_CACHES
block|,
DECL|enumConstant|VIEW_CONNECTIONS
name|VIEW_CONNECTIONS
block|,
DECL|enumConstant|VIEW_PLUGINS
name|VIEW_PLUGINS
block|,
DECL|enumConstant|VIEW_QUEUE
name|VIEW_QUEUE
block|,
DECL|enumConstant|VIEW_ACCESS
name|VIEW_ACCESS
block|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GlobalPermission
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Extracts the {@code @RequiresCapability} or {@code @RequiresAnyCapability} annotation.    *    * @param pluginName name of the declaring plugin. May be {@code null} or {@code "gerrit"} for    *     classes originating from the core server.    * @param clazz target class to extract annotation from.    * @return empty set if no annotations were found, or a collection of permissions, any of which    *     are suitable to enable access.    * @throws PermissionBackendException the annotation could not be parsed.    */
DECL|method|fromAnnotation ( @ullable String pluginName, Class<?> clazz)
specifier|public
specifier|static
name|Set
argument_list|<
name|GlobalOrPluginPermission
argument_list|>
name|fromAnnotation
parameter_list|(
annotation|@
name|Nullable
name|String
name|pluginName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|RequiresCapability
name|rc
init|=
name|findAnnotation
argument_list|(
name|clazz
argument_list|,
name|RequiresCapability
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequiresAnyCapability
name|rac
init|=
name|findAnnotation
argument_list|(
name|clazz
argument_list|,
name|RequiresAnyCapability
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rac
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Class %s uses both @%s and @%s"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|RequiresCapability
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|RequiresAnyCapability
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionBackendException
argument_list|(
literal|"cannot extract permission"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|resolve
argument_list|(
name|pluginName
argument_list|,
name|rc
operator|.
name|value
argument_list|()
argument_list|,
name|rc
operator|.
name|scope
argument_list|()
argument_list|,
name|rc
operator|.
name|fallBackToAdmin
argument_list|()
argument_list|,
name|clazz
argument_list|,
name|RequiresCapability
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rac
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|GlobalOrPluginPermission
argument_list|>
name|r
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|capability
range|:
name|rac
operator|.
name|value
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|resolve
argument_list|(
name|pluginName
argument_list|,
name|capability
argument_list|,
name|rac
operator|.
name|scope
argument_list|()
argument_list|,
name|rac
operator|.
name|fallBackToAdmin
argument_list|()
argument_list|,
name|clazz
argument_list|,
name|RequiresAnyCapability
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|r
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
DECL|method|fromAnnotation (Class<?> clazz)
specifier|public
specifier|static
name|Set
argument_list|<
name|GlobalOrPluginPermission
argument_list|>
name|fromAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
return|return
name|fromAnnotation
argument_list|(
literal|null
argument_list|,
name|clazz
argument_list|)
return|;
block|}
DECL|method|resolve ( @ullable String pluginName, String capability, CapabilityScope scope, boolean fallBackToAdmin, Class<?> clazz, Class<?> annotationClass)
specifier|private
specifier|static
name|GlobalOrPluginPermission
name|resolve
parameter_list|(
annotation|@
name|Nullable
name|String
name|pluginName
parameter_list|,
name|String
name|capability
parameter_list|,
name|CapabilityScope
name|scope
parameter_list|,
name|boolean
name|fallBackToAdmin
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|annotationClass
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
if|if
condition|(
name|pluginName
operator|!=
literal|null
operator|&&
operator|!
literal|"gerrit"
operator|.
name|equals
argument_list|(
name|pluginName
argument_list|)
operator|&&
operator|(
name|scope
operator|==
name|CapabilityScope
operator|.
name|PLUGIN
operator|||
name|scope
operator|==
name|CapabilityScope
operator|.
name|CONTEXT
operator|)
condition|)
block|{
return|return
operator|new
name|PluginPermission
argument_list|(
name|pluginName
argument_list|,
name|capability
argument_list|,
name|fallBackToAdmin
argument_list|)
return|;
block|}
if|if
condition|(
name|scope
operator|==
name|CapabilityScope
operator|.
name|PLUGIN
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Class %s uses @%s(scope=%s), but is not within a plugin"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|annotationClass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|scope
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionBackendException
argument_list|(
literal|"cannot extract permission"
argument_list|)
throw|;
block|}
name|Optional
argument_list|<
name|GlobalPermission
argument_list|>
name|perm
init|=
name|globalPermission
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Class %s requires unknown capability %s"
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|capability
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionBackendException
argument_list|(
literal|"cannot extract permission"
argument_list|)
throw|;
block|}
return|return
name|perm
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|findAnnotation (Class<?> clazz, Class<T> annotation)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Annotation
parameter_list|>
name|T
name|findAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|annotation
parameter_list|)
block|{
for|for
control|(
init|;
name|clazz
operator|!=
literal|null
condition|;
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
name|T
name|t
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|describeForException ()
specifier|public
name|String
name|describeForException
parameter_list|()
block|{
return|return
name|GerritPermission
operator|.
name|describeEnumValue
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

