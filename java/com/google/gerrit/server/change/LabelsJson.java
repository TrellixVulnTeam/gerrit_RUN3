begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|VotingRangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|LabelPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Produces label-related entities, like {@link LabelInfo}s, which is serialized to JSON afterwards.  */
end_comment

begin_class
DECL|class|LabelsJson
specifier|public
class|class
name|LabelsJson
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Iterable<ListChangesOption> options)
name|LabelsJson
name|create
parameter_list|(
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|)
function_decl|;
block|}
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|lazyLoad
specifier|private
specifier|final
name|boolean
name|lazyLoad
decl_stmt|;
annotation|@
name|Inject
DECL|method|LabelsJson ( ApprovalsUtil approvalsUtil, ChangeNotes.Factory notesFactory, PermissionBackend permissionBackend, @Assisted Iterable<ListChangesOption> options)
name|LabelsJson
parameter_list|(
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
annotation|@
name|Assisted
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|lazyLoad
operator|=
name|containsAnyOf
argument_list|(
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|options
argument_list|)
argument_list|,
name|ChangeJson
operator|.
name|REQUIRE_LAZY_LOAD
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns all {@link LabelInfo}s for a single change. Uses the provided {@link AccountLoader} to    * lazily populate accounts. Callers have to call {@link AccountLoader#fill()} afterwards to    * populate all accounts in the returned {@link LabelInfo}s.    */
DECL|method|labelsFor ( AccountLoader accountLoader, ChangeData cd, boolean standard, boolean detailed)
name|Map
argument_list|<
name|String
argument_list|,
name|LabelInfo
argument_list|>
name|labelsFor
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|StorageException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
operator|!
name|standard
operator|&&
operator|!
name|detailed
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LabelTypes
name|labelTypes
init|=
name|cd
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|withStatus
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
condition|?
name|labelsForSubmittedChange
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|,
name|detailed
argument_list|)
else|:
name|labelsForUnsubmittedChange
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|,
name|detailed
argument_list|)
decl_stmt|;
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|Maps
operator|.
name|transformValues
argument_list|(
name|withStatus
argument_list|,
name|LabelWithStatus
operator|::
name|label
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns all labels that the provided user has permission to vote on. */
DECL|method|permittedLabels (Account.Id filterApprovalsBy, ChangeData cd)
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|permittedLabels
parameter_list|(
name|Account
operator|.
name|Id
name|filterApprovalsBy
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|StorageException
throws|,
name|PermissionBackendException
block|{
name|boolean
name|isMerged
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
decl_stmt|;
name|LabelTypes
name|labelTypes
init|=
name|cd
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|toCheck
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|isMerged
operator|||
name|type
operator|.
name|allowPostSubmit
argument_list|()
operator|)
condition|)
block|{
name|toCheck
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|LabelPermission
operator|.
name|WithValue
argument_list|>
name|can
init|=
name|permissionBackendForChange
argument_list|(
name|filterApprovalsBy
argument_list|,
name|cd
argument_list|)
operator|.
name|testLabels
argument_list|(
name|toCheck
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|permitted
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|(
name|isMerged
operator|&&
operator|!
name|type
operator|.
name|allowPostSubmit
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|LabelValue
name|v
range|:
name|type
operator|.
name|getValues
argument_list|()
control|)
block|{
name|boolean
name|ok
init|=
name|can
operator|.
name|contains
argument_list|(
operator|new
name|LabelPermission
operator|.
name|WithValue
argument_list|(
name|type
argument_list|,
name|v
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMerged
condition|)
block|{
if|if
condition|(
name|labels
operator|==
literal|null
condition|)
block|{
name|labels
operator|=
name|currentLabels
argument_list|(
name|filterApprovalsBy
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
name|short
name|prev
init|=
name|labels
operator|.
name|getOrDefault
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
name|ok
operator|&=
name|v
operator|.
name|getValue
argument_list|()
operator|>=
name|prev
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|permitted
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|v
operator|.
name|formatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|toClear
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|permitted
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|permitted
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isOnlyZero
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|toClear
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|label
range|:
name|toClear
control|)
block|{
name|permitted
operator|.
name|removeAll
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|permitted
operator|.
name|asMap
argument_list|()
return|;
block|}
DECL|method|containsAnyOf ( ImmutableSet<ListChangesOption> set, ImmutableSet<ListChangesOption> toFind)
specifier|private
specifier|static
name|boolean
name|containsAnyOf
parameter_list|(
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|set
parameter_list|,
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|toFind
parameter_list|)
block|{
return|return
operator|!
name|Sets
operator|.
name|intersection
argument_list|(
name|toFind
argument_list|,
name|set
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|isOnlyZero (Collection<String> values)
specifier|private
specifier|static
name|boolean
name|isOnlyZero
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|values
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|values
operator|.
name|contains
argument_list|(
literal|" 0"
argument_list|)
operator|)
return|;
block|}
DECL|method|addApproval (LabelInfo label, ApprovalInfo approval)
specifier|private
specifier|static
name|void
name|addApproval
parameter_list|(
name|LabelInfo
name|label
parameter_list|,
name|ApprovalInfo
name|approval
parameter_list|)
block|{
if|if
condition|(
name|label
operator|.
name|all
operator|==
literal|null
condition|)
block|{
name|label
operator|.
name|all
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|label
operator|.
name|all
operator|.
name|add
argument_list|(
name|approval
argument_list|)
expr_stmt|;
block|}
DECL|method|labelsForUnsubmittedChange ( AccountLoader accountLoader, ChangeData cd, LabelTypes labelTypes, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|labelsForUnsubmittedChange
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|StorageException
throws|,
name|PermissionBackendException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|labels
init|=
name|initLabels
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|)
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|setAllApprovals
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|e
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|standard
condition|)
block|{
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|matches
argument_list|(
name|psa
argument_list|)
condition|)
block|{
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|psa
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|setLabelScores
argument_list|(
name|accountLoader
argument_list|,
name|type
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|val
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|detailed
condition|)
block|{
name|setLabelValues
argument_list|(
name|type
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|parseRangeValue (String value)
specifier|private
name|Integer
name|parseRangeValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|Ints
operator|.
name|tryParse
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|approvalInfo ( AccountLoader accountLoader, Account.Id id, Integer value, VotingRangeInfo permittedVotingRange, String tag, Timestamp date)
specifier|private
name|ApprovalInfo
name|approvalInfo
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|Integer
name|value
parameter_list|,
name|VotingRangeInfo
name|permittedVotingRange
parameter_list|,
name|String
name|tag
parameter_list|,
name|Timestamp
name|date
parameter_list|)
block|{
name|ApprovalInfo
name|ai
init|=
operator|new
name|ApprovalInfo
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|value
argument_list|,
name|permittedVotingRange
argument_list|,
name|tag
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|accountLoader
operator|.
name|put
argument_list|(
name|ai
argument_list|)
expr_stmt|;
return|return
name|ai
return|;
block|}
DECL|method|setLabelValues (LabelType type, LabelWithStatus l)
specifier|private
name|void
name|setLabelValues
parameter_list|(
name|LabelType
name|type
parameter_list|,
name|LabelWithStatus
name|l
parameter_list|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|defaultValue
operator|=
name|type
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|l
operator|.
name|label
argument_list|()
operator|.
name|values
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|LabelValue
name|v
range|:
name|type
operator|.
name|getValues
argument_list|()
control|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|values
operator|.
name|put
argument_list|(
name|v
operator|.
name|formatValue
argument_list|()
argument_list|,
name|v
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOnlyZero
argument_list|(
name|l
operator|.
name|label
argument_list|()
operator|.
name|values
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|currentLabels (Account.Id accountId, ChangeData cd)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|currentLabels
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|StorageException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|approvalsUtil
operator|.
name|byPatchSetUser
argument_list|(
name|lazyLoad
condition|?
name|cd
operator|.
name|notes
argument_list|()
else|:
name|notesFactory
operator|.
name|createFromIndexedChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|accountId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|labelsForSubmittedChange ( AccountLoader accountLoader, ChangeData cd, LabelTypes labelTypes, boolean standard, boolean detailed)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|labelsForSubmittedChange
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|boolean
name|standard
parameter_list|,
name|boolean
name|detailed
parameter_list|)
throws|throws
name|StorageException
throws|,
name|PermissionBackendException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allUsers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
comment|// Users expect to see all reviewers on closed changes, even if they
comment|// didn't vote on the latest patch set. If we don't need detailed labels,
comment|// we aren't including 0 votes for all users below, so we can just look at
comment|// the latest patch set (in the next loop).
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|allUsers
operator|.
name|add
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|labelNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|hashSetValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|cd
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
name|allUsers
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|labelNames
operator|.
name|add
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not worth the effort to distinguish between votable/non-votable for 0
comment|// values on closed changes, since they can't vote anyway.
name|current
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Since voting on merged changes is allowed all labels which apply to
comment|// the change must be returned. All applying labels can be retrieved from
comment|// the submit records, which is what initLabels does.
comment|// It's not possible to only compute the labels based on the approvals
comment|// since merged changes may not have approvals for all labels (e.g. if not
comment|// all labels are required for submit or if the change was auto-closed due
comment|// to direct push or if new labels were defined after the change was
comment|// merged).
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|labels
decl_stmt|;
name|labels
operator|=
name|initLabels
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|labelTypes
argument_list|,
name|standard
argument_list|)
expr_stmt|;
comment|// Also include all labels for which approvals exists. E.g. there can be
comment|// approvals for labels that are ignored by a Prolog submit rule and hence
comment|// it wouldn't be included in the submit records.
for|for
control|(
name|String
name|name
range|:
name|labelNames
control|)
block|{
if|if
condition|(
operator|!
name|labels
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|labels
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|LabelWithStatus
operator|.
name|create
argument_list|(
operator|new
name|LabelInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|detailed
condition|)
block|{
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|setLabelValues
argument_list|(
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|allUsers
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ApprovalInfo
argument_list|>
name|byLabel
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VotingRangeInfo
argument_list|>
name|pvr
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
name|pvr
operator|=
name|getPermittedVotingRanges
argument_list|(
name|permittedLabels
argument_list|(
name|accountId
argument_list|,
name|cd
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|entry
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApprovalInfo
name|ai
init|=
name|approvalInfo
argument_list|(
name|accountLoader
argument_list|,
name|accountId
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byLabel
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ai
argument_list|)
expr_stmt|;
name|addApproval
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|label
argument_list|()
argument_list|,
name|ai
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|current
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
control|)
block|{
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|psa
operator|.
name|getLabelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|short
name|val
init|=
name|psa
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ApprovalInfo
name|info
init|=
name|byLabel
operator|.
name|get
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|info
operator|.
name|permittedVotingRange
operator|=
name|pvr
operator|.
name|getOrDefault
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|date
operator|=
name|psa
operator|.
name|getGranted
argument_list|()
expr_stmt|;
name|info
operator|.
name|tag
operator|=
name|psa
operator|.
name|getTag
argument_list|()
expr_stmt|;
if|if
condition|(
name|psa
operator|.
name|isPostSubmit
argument_list|()
condition|)
block|{
name|info
operator|.
name|postSubmit
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|standard
condition|)
block|{
continue|continue;
block|}
name|setLabelScores
argument_list|(
name|accountLoader
argument_list|,
name|type
argument_list|,
name|labels
operator|.
name|get
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|val
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|initLabels ( AccountLoader accountLoader, ChangeData cd, LabelTypes labelTypes, boolean standard)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|initLabels
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|boolean
name|standard
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|labels
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|labelTypes
operator|.
name|nameComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
argument_list|(
name|cd
argument_list|)
control|)
block|{
if|if
condition|(
name|rec
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|r
range|:
name|rec
operator|.
name|labels
control|)
block|{
name|LabelWithStatus
name|p
init|=
name|labels
operator|.
name|get
argument_list|(
name|r
operator|.
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|status
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|status
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LabelInfo
name|n
init|=
operator|new
name|LabelInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|standard
condition|)
block|{
switch|switch
condition|(
name|r
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
name|n
operator|.
name|approved
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
break|break;
case|case
name|REJECT
case|:
name|n
operator|.
name|rejected
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|r
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
name|n
operator|.
name|blocking
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|IMPOSSIBLE
case|:
case|case
name|MAY
case|:
case|case
name|NEED
case|:
default|default:
break|break;
block|}
block|}
name|n
operator|.
name|optional
operator|=
name|r
operator|.
name|status
operator|==
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|MAY
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|labels
operator|.
name|put
argument_list|(
name|r
operator|.
name|label
argument_list|,
name|LabelWithStatus
operator|.
name|create
argument_list|(
name|n
argument_list|,
name|r
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|labels
return|;
block|}
DECL|method|setLabelScores ( AccountLoader accountLoader, LabelType type, LabelWithStatus l, short score, Account.Id accountId)
specifier|private
name|void
name|setLabelScores
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|LabelType
name|type
parameter_list|,
name|LabelWithStatus
name|l
parameter_list|,
name|short
name|score
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|l
operator|.
name|label
argument_list|()
operator|.
name|approved
operator|!=
literal|null
operator|||
name|l
operator|.
name|label
argument_list|()
operator|.
name|rejected
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|type
operator|.
name|getMin
argument_list|()
operator|==
literal|null
operator|||
name|type
operator|.
name|getMax
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Can't set score for unknown or misconfigured type.
return|return;
block|}
if|if
condition|(
name|score
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|score
operator|==
name|type
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|rejected
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|==
name|type
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|approved
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|<
literal|0
condition|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|disliked
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|l
operator|.
name|label
argument_list|()
operator|.
name|value
operator|=
name|score
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|score
operator|>
literal|0
operator|&&
name|l
operator|.
name|label
argument_list|()
operator|.
name|disliked
operator|==
literal|null
condition|)
block|{
name|l
operator|.
name|label
argument_list|()
operator|.
name|recommended
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|l
operator|.
name|label
argument_list|()
operator|.
name|value
operator|=
name|score
expr_stmt|;
block|}
block|}
block|}
DECL|method|setAllApprovals ( AccountLoader accountLoader, ChangeData cd, Map<String, LabelWithStatus> labels)
specifier|private
name|void
name|setAllApprovals
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|labels
parameter_list|)
throws|throws
name|StorageException
throws|,
name|PermissionBackendException
block|{
name|checkState
argument_list|(
operator|!
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isMerged
argument_list|()
argument_list|,
literal|"should not call setAllApprovals on %s change"
argument_list|,
name|ChangeUtil
operator|.
name|status
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Include a user in the output for this label if either:
comment|//  - They are an explicit reviewer.
comment|//  - They ever voted on this change.
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allUsers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|allUsers
operator|.
name|addAll
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
operator|.
name|byState
argument_list|(
name|ReviewerStateInternal
operator|.
name|REVIEWER
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|approvals
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|allUsers
operator|.
name|add
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Table
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|HashBasedTable
operator|.
name|create
argument_list|(
name|allUsers
operator|.
name|size
argument_list|()
argument_list|,
name|cd
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|cd
operator|.
name|currentApprovals
argument_list|()
control|)
block|{
name|current
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
name|LabelTypes
name|labelTypes
init|=
name|cd
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|allUsers
control|)
block|{
name|PermissionBackend
operator|.
name|ForChange
name|perm
init|=
name|permissionBackendForChange
argument_list|(
name|accountId
argument_list|,
name|cd
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VotingRangeInfo
argument_list|>
name|pvr
init|=
name|getPermittedVotingRanges
argument_list|(
name|permittedLabels
argument_list|(
name|accountId
argument_list|,
name|cd
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelWithStatus
argument_list|>
name|e
range|:
name|labels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LabelType
name|lt
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
comment|// Ignore submit record for undefined label; likely the submit rule
comment|// author didn't intend for the label to show up in the table.
continue|continue;
block|}
name|Integer
name|value
decl_stmt|;
name|VotingRangeInfo
name|permittedVotingRange
init|=
name|pvr
operator|.
name|getOrDefault
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|tag
init|=
literal|null
decl_stmt|;
name|Timestamp
name|date
init|=
literal|null
decl_stmt|;
name|PatchSetApproval
name|psa
init|=
name|current
operator|.
name|get
argument_list|(
name|accountId
argument_list|,
name|lt
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|psa
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
comment|// This may be a dummy approval that was inserted when the reviewer
comment|// was added. Explicitly check whether the user can vote on this
comment|// label.
name|value
operator|=
name|perm
operator|.
name|test
argument_list|(
operator|new
name|LabelPermission
argument_list|(
name|lt
argument_list|)
argument_list|)
condition|?
literal|0
else|:
literal|null
expr_stmt|;
block|}
name|tag
operator|=
name|psa
operator|.
name|getTag
argument_list|()
expr_stmt|;
name|date
operator|=
name|psa
operator|.
name|getGranted
argument_list|()
expr_stmt|;
if|if
condition|(
name|psa
operator|.
name|isPostSubmit
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"unexpected post-submit approval on open change: %s"
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Either the user cannot vote on this label, or they were added as a
comment|// reviewer but have not responded yet. Explicitly check whether the
comment|// user can vote on this label.
name|value
operator|=
name|perm
operator|.
name|test
argument_list|(
operator|new
name|LabelPermission
argument_list|(
name|lt
argument_list|)
argument_list|)
condition|?
literal|0
else|:
literal|null
expr_stmt|;
block|}
name|addApproval
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|label
argument_list|()
argument_list|,
name|approvalInfo
argument_list|(
name|accountLoader
argument_list|,
name|accountId
argument_list|,
name|value
argument_list|,
name|permittedVotingRange
argument_list|,
name|tag
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return {@link com.google.gerrit.server.permissions.PermissionBackend.ForChange} constructed    *     from either an index-backed or a database-backed {@link ChangeData} depending on {@code    *     lazyload}.    */
DECL|method|permissionBackendForChange (Account.Id user, ChangeData cd)
specifier|private
name|PermissionBackend
operator|.
name|ForChange
name|permissionBackendForChange
parameter_list|(
name|Account
operator|.
name|Id
name|user
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|StorageException
block|{
name|PermissionBackend
operator|.
name|WithUser
name|withUser
init|=
name|permissionBackend
operator|.
name|absentUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|lazyLoad
condition|?
name|withUser
operator|.
name|change
argument_list|(
name|cd
argument_list|)
else|:
name|withUser
operator|.
name|indexedChange
argument_list|(
name|cd
argument_list|,
name|notesFactory
operator|.
name|createFromIndexedChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|submitRecords (ChangeData cd)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|cd
operator|.
name|submitRecords
argument_list|(
name|ChangeJson
operator|.
name|SUBMIT_RULE_OPTIONS_LENIENT
argument_list|)
return|;
block|}
DECL|method|getPermittedVotingRanges ( Map<String, Collection<String>> permittedLabels)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|VotingRangeInfo
argument_list|>
name|getPermittedVotingRanges
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|permittedLabels
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|VotingRangeInfo
argument_list|>
name|permittedVotingRanges
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|permittedLabels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|permittedLabels
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|permittedVotingRange
init|=
name|permittedLabels
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|parseRangeValue
argument_list|)
operator|.
name|filter
argument_list|(
name|java
operator|.
name|util
operator|.
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|permittedVotingRange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|permittedVotingRanges
operator|.
name|put
argument_list|(
name|label
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|minPermittedValue
init|=
name|permittedVotingRange
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxPermittedValue
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|permittedVotingRange
argument_list|)
decl_stmt|;
name|permittedVotingRanges
operator|.
name|put
argument_list|(
name|label
argument_list|,
operator|new
name|VotingRangeInfo
argument_list|(
name|minPermittedValue
argument_list|,
name|maxPermittedValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|permittedVotingRanges
return|;
block|}
annotation|@
name|AutoValue
DECL|class|LabelWithStatus
specifier|abstract
specifier|static
class|class
name|LabelWithStatus
block|{
DECL|method|create (LabelInfo label, SubmitRecord.Label.Status status)
specifier|private
specifier|static
name|LabelWithStatus
name|create
parameter_list|(
name|LabelInfo
name|label
parameter_list|,
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
name|status
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_LabelsJson_LabelWithStatus
argument_list|(
name|label
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|label ()
specifier|abstract
name|LabelInfo
name|label
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|status ()
specifier|abstract
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
name|status
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

