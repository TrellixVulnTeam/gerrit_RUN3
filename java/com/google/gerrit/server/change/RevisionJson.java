begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_COMMITS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|COMMIT_FOOTERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_FILES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DOWNLOAD_COMMANDS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|PUSH_CERTIFICATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|WEB_LINKS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommonConverters
operator|.
name|toGitPerson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FetchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|PushCertificateInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|WebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|DownloadCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|DownloadScheme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GpgException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|WebLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GpgApiAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_comment
comment|/** Produces {@link RevisionInfo} and {@link CommitInfo} which are serialized to JSON afterwards. */
end_comment

begin_class
DECL|class|RevisionJson
specifier|public
class|class
name|RevisionJson
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Iterable<ListChangesOption> options)
name|RevisionJson
name|create
parameter_list|(
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|)
function_decl|;
block|}
DECL|field|mergeUtilFactory
specifier|private
specifier|final
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|fileInfoJson
specifier|private
specifier|final
name|FileInfoJson
name|fileInfoJson
decl_stmt|;
DECL|field|gpgApi
specifier|private
specifier|final
name|GpgApiAdapter
name|gpgApi
decl_stmt|;
DECL|field|changeResourceFactory
specifier|private
specifier|final
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
decl_stmt|;
DECL|field|changeKindCache
specifier|private
specifier|final
name|ChangeKindCache
name|changeKindCache
decl_stmt|;
DECL|field|actionJson
specifier|private
specifier|final
name|ActionJson
name|actionJson
decl_stmt|;
DECL|field|downloadSchemes
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
decl_stmt|;
DECL|field|downloadCommands
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|DownloadCommand
argument_list|>
name|downloadCommands
decl_stmt|;
DECL|field|webLinks
specifier|private
specifier|final
name|WebLinks
name|webLinks
decl_stmt|;
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|options
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|AnonymousUser
name|anonymous
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|lazyLoad
specifier|private
specifier|final
name|boolean
name|lazyLoad
decl_stmt|;
annotation|@
name|Inject
DECL|method|RevisionJson ( Provider<CurrentUser> userProvider, AnonymousUser anonymous, ProjectCache projectCache, IdentifiedUser.GenericFactory userFactory, MergeUtil.Factory mergeUtilFactory, FileInfoJson fileInfoJson, AccountLoader.Factory accountLoaderFactory, DynamicMap<DownloadScheme> downloadSchemes, DynamicMap<DownloadCommand> downloadCommands, WebLinks webLinks, ActionJson actionJson, GpgApiAdapter gpgApi, ChangeResource.Factory changeResourceFactory, ChangeKindCache changeKindCache, GitRepositoryManager repoManager, PermissionBackend permissionBackend, ChangeNotes.Factory notesFactory, @Assisted Iterable<ListChangesOption> options)
name|RevisionJson
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|AnonymousUser
name|anonymous
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
parameter_list|,
name|FileInfoJson
name|fileInfoJson
parameter_list|,
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
parameter_list|,
name|DynamicMap
argument_list|<
name|DownloadScheme
argument_list|>
name|downloadSchemes
parameter_list|,
name|DynamicMap
argument_list|<
name|DownloadCommand
argument_list|>
name|downloadCommands
parameter_list|,
name|WebLinks
name|webLinks
parameter_list|,
name|ActionJson
name|actionJson
parameter_list|,
name|GpgApiAdapter
name|gpgApi
parameter_list|,
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
parameter_list|,
name|ChangeKindCache
name|changeKindCache
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
annotation|@
name|Assisted
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|anonymous
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|mergeUtilFactory
operator|=
name|mergeUtilFactory
expr_stmt|;
name|this
operator|.
name|fileInfoJson
operator|=
name|fileInfoJson
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|accountLoaderFactory
expr_stmt|;
name|this
operator|.
name|downloadSchemes
operator|=
name|downloadSchemes
expr_stmt|;
name|this
operator|.
name|downloadCommands
operator|=
name|downloadCommands
expr_stmt|;
name|this
operator|.
name|webLinks
operator|=
name|webLinks
expr_stmt|;
name|this
operator|.
name|actionJson
operator|=
name|actionJson
expr_stmt|;
name|this
operator|.
name|gpgApi
operator|=
name|gpgApi
expr_stmt|;
name|this
operator|.
name|changeResourceFactory
operator|=
name|changeResourceFactory
expr_stmt|;
name|this
operator|.
name|changeKindCache
operator|=
name|changeKindCache
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|lazyLoad
operator|=
name|containsAnyOf
argument_list|(
name|this
operator|.
name|options
argument_list|,
name|ChangeJson
operator|.
name|REQUIRE_LAZY_LOAD
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a {@link RevisionInfo} based on a change and patch set. Reads from the repository    * depending on the options provided when constructing this instance.    */
DECL|method|getRevisionInfo (ChangeData cd, PatchSet in)
specifier|public
name|RevisionInfo
name|getRevisionInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|PatchListNotAvailableException
throws|,
name|GpgException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
name|AccountLoader
name|accountLoader
init|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|has
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|openRepoIfNecessary
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
name|newRevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|RevisionInfo
name|rev
init|=
name|toRevisionInfo
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|in
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|rev
return|;
block|}
block|}
comment|/**    * Returns a {@link CommitInfo} based on a commit and formatting options. Uses the provided    * RevWalk and assumes it is backed by an open repository.    */
DECL|method|getCommitInfo ( Project.NameKey project, RevWalk rw, RevCommit commit, boolean addLinks, boolean fillCommit)
specifier|public
name|CommitInfo
name|getCommitInfo
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|boolean
name|addLinks
parameter_list|,
name|boolean
name|fillCommit
parameter_list|)
throws|throws
name|IOException
block|{
name|CommitInfo
name|info
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|fillCommit
condition|)
block|{
name|info
operator|.
name|commit
operator|=
name|commit
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|parents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|commit
operator|.
name|getParentCount
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|author
operator|=
name|toGitPerson
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|committer
operator|=
name|toGitPerson
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|subject
operator|=
name|commit
operator|.
name|getShortMessage
argument_list|()
expr_stmt|;
name|info
operator|.
name|message
operator|=
name|commit
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|addLinks
condition|)
block|{
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|links
init|=
name|webLinks
operator|.
name|getPatchSetLinks
argument_list|(
name|project
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|webLinks
operator|=
name|links
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|links
expr_stmt|;
block|}
for|for
control|(
name|RevCommit
name|parent
range|:
name|commit
operator|.
name|getParents
argument_list|()
control|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|CommitInfo
name|i
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|i
operator|.
name|commit
operator|=
name|parent
operator|.
name|name
argument_list|()
expr_stmt|;
name|i
operator|.
name|subject
operator|=
name|parent
operator|.
name|getShortMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|addLinks
condition|)
block|{
name|List
argument_list|<
name|WebLinkInfo
argument_list|>
name|parentLinks
init|=
name|webLinks
operator|.
name|getParentLinks
argument_list|(
name|project
argument_list|,
name|parent
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|i
operator|.
name|webLinks
operator|=
name|parentLinks
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|parentLinks
expr_stmt|;
block|}
name|info
operator|.
name|parents
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
comment|/**    * Returns multiple {@link RevisionInfo}s for a single change. Uses the provided {@link    * AccountLoader} to lazily populate accounts. Callers have to call {@link AccountLoader#fill()}    * afterwards to populate all accounts in the returned {@link RevisionInfo}s.    */
DECL|method|getRevisions ( AccountLoader accountLoader, ChangeData cd, Map<PatchSet.Id, PatchSet> map, Optional<PatchSet.Id> limitToPsId, ChangeInfo changeInfo)
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|getRevisions
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|map
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|,
name|ChangeInfo
name|changeInfo
parameter_list|)
throws|throws
name|PatchListNotAvailableException
throws|,
name|GpgException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|res
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|openRepoIfNecessary
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
name|newRevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
for|for
control|(
name|PatchSet
name|in
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|PatchSet
operator|.
name|Id
name|id
init|=
name|in
operator|.
name|getId
argument_list|()
decl_stmt|;
name|boolean
name|want
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
condition|)
block|{
name|want
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|limitToPsId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|want
operator|=
name|id
operator|.
name|equals
argument_list|(
name|limitToPsId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|want
operator|=
name|id
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|want
condition|)
block|{
name|res
operator|.
name|put
argument_list|(
name|in
operator|.
name|getCommitId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|toRevisionInfo
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|in
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
literal|false
argument_list|,
name|changeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
block|}
DECL|method|makeFetchMap (ChangeData cd, PatchSet in)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|makeFetchMap
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|)
throws|throws
name|PermissionBackendException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FetchInfo
argument_list|>
name|r
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Extension
argument_list|<
name|DownloadScheme
argument_list|>
name|e
range|:
name|downloadSchemes
control|)
block|{
name|String
name|schemeName
init|=
name|e
operator|.
name|getExportName
argument_list|()
decl_stmt|;
name|DownloadScheme
name|scheme
init|=
name|e
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|scheme
operator|.
name|isEnabled
argument_list|()
operator|||
operator|(
name|scheme
operator|.
name|isAuthRequired
argument_list|()
operator|&&
operator|!
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|scheme
operator|.
name|isAuthSupported
argument_list|()
operator|&&
operator|!
name|isWorldReadable
argument_list|(
name|cd
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|projectName
init|=
name|cd
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|scheme
operator|.
name|getUrl
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
name|String
name|refName
init|=
name|in
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|FetchInfo
name|fetchInfo
init|=
operator|new
name|FetchInfo
argument_list|(
name|url
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|schemeName
argument_list|,
name|fetchInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|DOWNLOAD_COMMANDS
argument_list|)
condition|)
block|{
name|DownloadCommandsJson
operator|.
name|populateFetchMap
argument_list|(
name|scheme
argument_list|,
name|downloadCommands
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|fetchInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|toRevisionInfo ( AccountLoader accountLoader, ChangeData cd, PatchSet in, @Nullable Repository repo, @Nullable RevWalk rw, boolean fillCommit, @Nullable ChangeInfo changeInfo)
specifier|private
name|RevisionInfo
name|toRevisionInfo
parameter_list|(
name|AccountLoader
name|accountLoader
parameter_list|,
name|ChangeData
name|cd
parameter_list|,
name|PatchSet
name|in
parameter_list|,
annotation|@
name|Nullable
name|Repository
name|repo
parameter_list|,
annotation|@
name|Nullable
name|RevWalk
name|rw
parameter_list|,
name|boolean
name|fillCommit
parameter_list|,
annotation|@
name|Nullable
name|ChangeInfo
name|changeInfo
parameter_list|)
throws|throws
name|PatchListNotAvailableException
throws|,
name|GpgException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
name|RevisionInfo
name|out
init|=
operator|new
name|RevisionInfo
argument_list|()
decl_stmt|;
name|out
operator|.
name|isCurrent
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|ref
operator|=
name|in
operator|.
name|getRefName
argument_list|()
expr_stmt|;
name|out
operator|.
name|created
operator|=
name|in
operator|.
name|getCreatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|uploader
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|in
operator|.
name|getUploader
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|fetch
operator|=
name|makeFetchMap
argument_list|(
name|cd
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|out
operator|.
name|kind
operator|=
name|changeKindCache
operator|.
name|getChangeKind
argument_list|(
name|rw
argument_list|,
name|repo
operator|!=
literal|null
condition|?
name|repo
operator|.
name|getConfig
argument_list|()
else|:
literal|null
argument_list|,
name|cd
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|out
operator|.
name|description
operator|=
name|in
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|boolean
name|setCommit
init|=
name|has
argument_list|(
name|ALL_COMMITS
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|has
argument_list|(
name|CURRENT_COMMIT
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|addFooters
init|=
name|out
operator|.
name|isCurrent
operator|&&
name|has
argument_list|(
name|COMMIT_FOOTERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|setCommit
operator|||
name|addFooters
condition|)
block|{
name|checkState
argument_list|(
name|rw
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|repo
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
name|c
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|in
operator|.
name|getCommitId
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|setCommit
condition|)
block|{
name|out
operator|.
name|commit
operator|=
name|getCommitInfo
argument_list|(
name|project
argument_list|,
name|rw
argument_list|,
name|commit
argument_list|,
name|has
argument_list|(
name|WEB_LINKS
argument_list|)
argument_list|,
name|fillCommit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addFooters
condition|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|branch
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|mergeTip
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|mergeTip
operator|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|mergeTip
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|commitWithFooters
operator|=
name|mergeUtilFactory
operator|.
name|create
argument_list|(
name|projectCache
operator|.
name|get
argument_list|(
name|project
argument_list|)
argument_list|)
operator|.
name|createCommitMessageOnSubmit
argument_list|(
name|commit
argument_list|,
name|mergeTip
argument_list|,
name|cd
operator|.
name|notes
argument_list|()
argument_list|,
name|in
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|has
argument_list|(
name|ALL_FILES
argument_list|)
operator|||
operator|(
name|out
operator|.
name|isCurrent
operator|&&
name|has
argument_list|(
name|CURRENT_FILES
argument_list|)
operator|)
condition|)
block|{
name|out
operator|.
name|files
operator|=
name|fileInfoJson
operator|.
name|toFileInfoMap
argument_list|(
name|c
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|out
operator|.
name|files
operator|.
name|remove
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
expr_stmt|;
name|out
operator|.
name|files
operator|.
name|remove
argument_list|(
name|Patch
operator|.
name|MERGE_LIST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|isCurrent
operator|&&
name|has
argument_list|(
name|CURRENT_ACTIONS
argument_list|)
operator|&&
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|actionJson
operator|.
name|addRevisionActions
argument_list|(
name|changeInfo
argument_list|,
name|out
argument_list|,
operator|new
name|RevisionResource
argument_list|(
name|changeResourceFactory
operator|.
name|create
argument_list|(
name|cd
operator|.
name|notes
argument_list|()
argument_list|,
name|userProvider
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gpgApi
operator|.
name|isEnabled
argument_list|()
operator|&&
name|has
argument_list|(
name|PUSH_CERTIFICATES
argument_list|)
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|getPushCertificate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|pushCertificate
operator|=
name|gpgApi
operator|.
name|checkPushCertificate
argument_list|(
name|in
operator|.
name|getPushCertificate
argument_list|()
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|in
operator|.
name|getUploader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|pushCertificate
operator|=
operator|new
name|PushCertificateInfo
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|has (ListChangesOption option)
specifier|private
name|boolean
name|has
parameter_list|(
name|ListChangesOption
name|option
parameter_list|)
block|{
return|return
name|options
operator|.
name|contains
argument_list|(
name|option
argument_list|)
return|;
block|}
comment|/**    * @return {@link com.google.gerrit.server.permissions.PermissionBackend.ForChange} constructed    *     from either an index-backed or a database-backed {@link ChangeData} depending on {@code    *     lazyload}.    */
DECL|method|permissionBackendForChange ( PermissionBackend.WithUser withUser, ChangeData cd)
specifier|private
name|PermissionBackend
operator|.
name|ForChange
name|permissionBackendForChange
parameter_list|(
name|PermissionBackend
operator|.
name|WithUser
name|withUser
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|lazyLoad
condition|?
name|withUser
operator|.
name|change
argument_list|(
name|cd
argument_list|)
else|:
name|withUser
operator|.
name|indexedChange
argument_list|(
name|cd
argument_list|,
name|notesFactory
operator|.
name|createFromIndexedChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isWorldReadable (ChangeData cd)
specifier|private
name|boolean
name|isWorldReadable
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|PermissionBackendException
throws|,
name|IOException
block|{
try|try
block|{
name|permissionBackendForChange
argument_list|(
name|permissionBackend
operator|.
name|user
argument_list|(
name|anonymous
argument_list|)
argument_list|,
name|cd
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|ae
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"project state for project %s is null"
argument_list|,
name|cd
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|projectState
operator|.
name|statePermitsRead
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|openRepoIfNecessary (Project.NameKey project)
specifier|private
name|Repository
name|openRepoIfNecessary
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|has
argument_list|(
name|ALL_COMMITS
argument_list|)
operator|||
name|has
argument_list|(
name|CURRENT_COMMIT
argument_list|)
operator|||
name|has
argument_list|(
name|COMMIT_FOOTERS
argument_list|)
condition|)
block|{
return|return
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
DECL|method|newRevWalk (@ullable Repository repo)
specifier|private
name|RevWalk
name|newRevWalk
parameter_list|(
annotation|@
name|Nullable
name|Repository
name|repo
parameter_list|)
block|{
return|return
name|repo
operator|!=
literal|null
condition|?
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|containsAnyOf ( ImmutableSet<ListChangesOption> set, ImmutableSet<ListChangesOption> toFind)
specifier|private
specifier|static
name|boolean
name|containsAnyOf
parameter_list|(
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|set
parameter_list|,
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|toFind
parameter_list|)
block|{
return|return
operator|!
name|Sets
operator|.
name|intersection
argument_list|(
name|toFind
argument_list|,
name|set
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

