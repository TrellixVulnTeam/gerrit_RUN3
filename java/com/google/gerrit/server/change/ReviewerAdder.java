begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|CC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewerInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|GroupResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|OutgoingEmailValidator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|RefPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
DECL|class|ReviewerAdder
specifier|public
class|class
name|ReviewerAdder
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_MAX_REVIEWERS_WITHOUT_CHECK
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_REVIEWERS_WITHOUT_CHECK
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_MAX_REVIEWERS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_REVIEWERS
init|=
literal|20
decl_stmt|;
DECL|enum|FailureBehavior
specifier|public
enum|enum
name|FailureBehavior
block|{
DECL|enumConstant|FAIL
name|FAIL
block|,
DECL|enumConstant|IGNORE
name|IGNORE
block|;   }
DECL|enum|FailureType
specifier|private
enum|enum
name|FailureType
block|{
DECL|enumConstant|NOT_FOUND
name|NOT_FOUND
block|,
DECL|enumConstant|OTHER
name|OTHER
block|;   }
comment|// TODO(dborowitz): Subclassing is not the right way to do this. We should instead use an internal
comment|// type in the public interfaces of ReviewerAdder, rather than passing around the REST API type
comment|// internally.
DECL|class|InternalAddReviewerInput
specifier|public
specifier|static
class|class
name|InternalAddReviewerInput
extends|extends
name|AddReviewerInput
block|{
comment|/**      * Behavior when identifying reviewers fails for any reason<em>besides</em> the input not      * resolving to an account/group/email.      */
DECL|field|otherFailureBehavior
specifier|public
name|FailureBehavior
name|otherFailureBehavior
init|=
name|FailureBehavior
operator|.
name|FAIL
decl_stmt|;
block|}
DECL|method|newAddReviewerInput ( Account.Id reviewer, ReviewerState state, NotifyHandling notify)
specifier|public
specifier|static
name|InternalAddReviewerInput
name|newAddReviewerInput
parameter_list|(
name|Account
operator|.
name|Id
name|reviewer
parameter_list|,
name|ReviewerState
name|state
parameter_list|,
name|NotifyHandling
name|notify
parameter_list|)
block|{
comment|// AccountResolver always resolves by ID if the input string is numeric.
return|return
name|newAddReviewerInput
argument_list|(
name|reviewer
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|,
name|notify
argument_list|)
return|;
block|}
DECL|method|newAddReviewerInput ( String reviewer, ReviewerState state, NotifyHandling notify)
specifier|public
specifier|static
name|InternalAddReviewerInput
name|newAddReviewerInput
parameter_list|(
name|String
name|reviewer
parameter_list|,
name|ReviewerState
name|state
parameter_list|,
name|NotifyHandling
name|notify
parameter_list|)
block|{
name|InternalAddReviewerInput
name|in
init|=
operator|new
name|InternalAddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|reviewer
expr_stmt|;
name|in
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|in
operator|.
name|notify
operator|=
name|notify
expr_stmt|;
return|return
name|in
return|;
block|}
DECL|method|newAddReviewerInputFromCommitIdentity ( Change change, @Nullable Account.Id accountId, NotifyHandling notify)
specifier|public
specifier|static
name|Optional
argument_list|<
name|InternalAddReviewerInput
argument_list|>
name|newAddReviewerInputFromCommitIdentity
parameter_list|(
name|Change
name|change
parameter_list|,
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|NotifyHandling
name|notify
parameter_list|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
operator|||
name|accountId
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
comment|// If git ident couldn't be resolved to a user, or if it's not forged, do nothing.
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|InternalAddReviewerInput
name|in
init|=
operator|new
name|InternalAddReviewerInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|reviewer
operator|=
name|accountId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|in
operator|.
name|state
operator|=
name|REVIEWER
expr_stmt|;
name|in
operator|.
name|notify
operator|=
name|notify
expr_stmt|;
name|in
operator|.
name|otherFailureBehavior
operator|=
name|FailureBehavior
operator|.
name|IGNORE
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|groupResolver
specifier|private
specifier|final
name|GroupResolver
name|groupResolver
decl_stmt|;
DECL|field|groupMembers
specifier|private
specifier|final
name|GroupMembers
name|groupMembers
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|json
specifier|private
specifier|final
name|ReviewerJson
name|json
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|anonymousProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousProvider
decl_stmt|;
DECL|field|addReviewersOpFactory
specifier|private
specifier|final
name|AddReviewersOp
operator|.
name|Factory
name|addReviewersOpFactory
decl_stmt|;
DECL|field|validator
specifier|private
specifier|final
name|OutgoingEmailValidator
name|validator
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReviewerAdder ( AccountResolver accountResolver, PermissionBackend permissionBackend, GroupResolver groupResolver, GroupMembers groupMembers, AccountLoader.Factory accountLoaderFactory, @GerritServerConfig Config cfg, ReviewerJson json, ProjectCache projectCache, Provider<AnonymousUser> anonymousProvider, AddReviewersOp.Factory addReviewersOpFactory, OutgoingEmailValidator validator)
name|ReviewerAdder
parameter_list|(
name|AccountResolver
name|accountResolver
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|GroupResolver
name|groupResolver
parameter_list|,
name|GroupMembers
name|groupMembers
parameter_list|,
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ReviewerJson
name|json
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousProvider
parameter_list|,
name|AddReviewersOp
operator|.
name|Factory
name|addReviewersOpFactory
parameter_list|,
name|OutgoingEmailValidator
name|validator
parameter_list|)
block|{
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|groupResolver
operator|=
name|groupResolver
expr_stmt|;
name|this
operator|.
name|groupMembers
operator|=
name|groupMembers
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|accountLoaderFactory
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|anonymousProvider
operator|=
name|anonymousProvider
expr_stmt|;
name|this
operator|.
name|addReviewersOpFactory
operator|=
name|addReviewersOpFactory
expr_stmt|;
name|this
operator|.
name|validator
operator|=
name|validator
expr_stmt|;
block|}
comment|/**    * Prepare application of a single {@link AddReviewerInput}.    *    * @param notes change notes.    * @param user user performing the reviewer addition.    * @param input input describing user or group to add as a reviewer.    * @param allowGroup whether to allow    * @return handle describing the addition operation. If the {@code op} field is present, this    *     operation may be added to a {@code BatchUpdate}. Otherwise, the {@code error} field    *     contains information about an error that occurred    * @throws IOException    * @throws PermissionBackendException    * @throws ConfigInvalidException    */
DECL|method|prepare ( ChangeNotes notes, CurrentUser user, AddReviewerInput input, boolean allowGroup)
specifier|public
name|ReviewerAddition
name|prepare
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|AddReviewerInput
name|input
parameter_list|,
name|boolean
name|allowGroup
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ConfigInvalidException
block|{
name|requireNonNull
argument_list|(
name|input
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|boolean
name|confirmed
init|=
name|input
operator|.
name|confirmed
argument_list|()
decl_stmt|;
name|boolean
name|allowByEmail
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|ENABLE_REVIEWER_BY_EMAIL
argument_list|)
decl_stmt|;
name|ReviewerAddition
name|byAccountId
init|=
name|addByAccountId
argument_list|(
name|input
argument_list|,
name|notes
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|ReviewerAddition
name|wholeGroup
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|byAccountId
operator|.
name|exactMatchFound
condition|)
block|{
name|wholeGroup
operator|=
name|addWholeGroup
argument_list|(
name|input
argument_list|,
name|notes
argument_list|,
name|user
argument_list|,
name|confirmed
argument_list|,
name|allowGroup
argument_list|,
name|allowByEmail
argument_list|)
expr_stmt|;
if|if
condition|(
name|wholeGroup
operator|!=
literal|null
operator|&&
name|wholeGroup
operator|.
name|exactMatchFound
condition|)
block|{
return|return
name|wholeGroup
return|;
block|}
block|}
if|if
condition|(
name|wholeGroup
operator|!=
literal|null
operator|&&
name|byAccountId
operator|.
name|failureType
operator|==
name|FailureType
operator|.
name|NOT_FOUND
operator|&&
name|wholeGroup
operator|.
name|failureType
operator|==
name|FailureType
operator|.
name|NOT_FOUND
condition|)
block|{
return|return
name|fail
argument_list|(
name|byAccountId
operator|.
name|input
argument_list|,
name|FailureType
operator|.
name|NOT_FOUND
argument_list|,
name|byAccountId
operator|.
name|result
operator|.
name|error
operator|+
literal|"\n"
operator|+
name|wholeGroup
operator|.
name|result
operator|.
name|error
argument_list|)
return|;
block|}
if|if
condition|(
name|byAccountId
operator|.
name|failureType
operator|!=
name|FailureType
operator|.
name|NOT_FOUND
condition|)
block|{
return|return
name|byAccountId
return|;
block|}
if|if
condition|(
name|wholeGroup
operator|!=
literal|null
condition|)
block|{
return|return
name|wholeGroup
return|;
block|}
return|return
name|addByEmail
argument_list|(
name|input
argument_list|,
name|notes
argument_list|,
name|user
argument_list|)
return|;
block|}
DECL|method|ccCurrentUser (CurrentUser user, RevisionResource revision)
specifier|public
name|ReviewerAddition
name|ccCurrentUser
parameter_list|(
name|CurrentUser
name|user
parameter_list|,
name|RevisionResource
name|revision
parameter_list|)
block|{
return|return
operator|new
name|ReviewerAddition
argument_list|(
name|newAddReviewerInput
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|CC
argument_list|,
name|NotifyHandling
operator|.
name|NONE
argument_list|)
argument_list|,
name|revision
operator|.
name|getNotes
argument_list|()
argument_list|,
name|revision
operator|.
name|getUser
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|addByAccountId ( AddReviewerInput input, ChangeNotes notes, CurrentUser user)
specifier|private
name|ReviewerAddition
name|addByAccountId
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|PermissionBackendException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|IdentifiedUser
name|reviewerUser
decl_stmt|;
name|boolean
name|exactMatchFound
init|=
literal|false
decl_stmt|;
try|try
block|{
name|reviewerUser
operator|=
name|accountResolver
operator|.
name|resolve
argument_list|(
name|input
operator|.
name|reviewer
argument_list|)
operator|.
name|asUniqueUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|reviewer
operator|.
name|equalsIgnoreCase
argument_list|(
name|reviewerUser
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|input
operator|.
name|reviewer
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|reviewerUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|exactMatchFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnprocessableEntityException
name|e
parameter_list|)
block|{
comment|// Caller might choose to ignore this NOT_FOUND result if they find another result e.g. by
comment|// group, but if not, the error message will be useful.
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|isValidReviewer
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|reviewerUser
operator|.
name|getAccount
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReviewerAddition
argument_list|(
name|input
argument_list|,
name|notes
argument_list|,
name|user
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|reviewerUser
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|exactMatchFound
argument_list|)
return|;
block|}
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|OTHER
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerCantSeeChange
argument_list|,
name|input
operator|.
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|addWholeGroup ( AddReviewerInput input, ChangeNotes notes, CurrentUser user, boolean confirmed, boolean allowGroup, boolean allowByEmail)
specifier|private
name|ReviewerAddition
name|addWholeGroup
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|boolean
name|confirmed
parameter_list|,
name|boolean
name|allowGroup
parameter_list|,
name|boolean
name|allowByEmail
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
operator|!
name|allowGroup
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GroupDescription
operator|.
name|Basic
name|group
decl_stmt|;
try|try
block|{
comment|// TODO(dborowitz): This currently doesn't work in the push path because InternalGroupBackend
comment|// depends on the Provider<CurrentUser> which returns anonymous in that path.
name|group
operator|=
name|groupResolver
operator|.
name|parseInternal
argument_list|(
name|input
operator|.
name|reviewer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnprocessableEntityException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allowByEmail
condition|)
block|{
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|NOT_FOUND
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerNotFoundUserOrGroup
argument_list|,
name|input
operator|.
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|isLegalReviewerGroup
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|OTHER
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|groupIsNotAllowed
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Account
argument_list|>
name|members
decl_stmt|;
try|try
block|{
name|members
operator|=
name|groupMembers
operator|.
name|listAccounts
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|OTHER
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
comment|// if maxAllowed is set to 0, it is allowed to add any number of
comment|// reviewers
name|int
name|maxAllowed
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"addreviewer"
argument_list|,
literal|"maxAllowed"
argument_list|,
name|DEFAULT_MAX_REVIEWERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxAllowed
operator|>
literal|0
operator|&&
name|members
operator|.
name|size
argument_list|()
operator|>
name|maxAllowed
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding %d group members is not allowed (maxAllowed = %d)"
argument_list|,
name|members
operator|.
name|size
argument_list|()
argument_list|,
name|maxAllowed
argument_list|)
expr_stmt|;
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|OTHER
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|groupHasTooManyMembers
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// if maxWithoutCheck is set to 0, we never ask for confirmation
name|int
name|maxWithoutConfirmation
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"addreviewer"
argument_list|,
literal|"maxWithoutConfirmation"
argument_list|,
name|DEFAULT_MAX_REVIEWERS_WITHOUT_CHECK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confirmed
operator|&&
name|maxWithoutConfirmation
operator|>
literal|0
operator|&&
name|members
operator|.
name|size
argument_list|()
operator|>
name|maxWithoutConfirmation
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding %d group members as reviewer requires confirmation (maxWithoutConfirmation = %d)"
argument_list|,
name|members
operator|.
name|size
argument_list|()
argument_list|,
name|maxWithoutConfirmation
argument_list|)
expr_stmt|;
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|OTHER
argument_list|,
literal|true
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|groupManyMembersConfirmation
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|members
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
for|for
control|(
name|Account
name|member
range|:
name|members
control|)
block|{
if|if
condition|(
name|isValidReviewer
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|member
argument_list|)
condition|)
block|{
name|reviewers
operator|.
name|add
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ReviewerAddition
argument_list|(
name|input
argument_list|,
name|notes
argument_list|,
name|user
argument_list|,
name|reviewers
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|addByEmail (AddReviewerInput input, ChangeNotes notes, CurrentUser user)
specifier|private
name|ReviewerAddition
name|addByEmail
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
try|try
block|{
name|permissionBackend
operator|.
name|user
argument_list|(
name|anonymousProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|change
argument_list|(
name|notes
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|OTHER
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerCantSeeChange
argument_list|,
name|input
operator|.
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
name|Address
name|adr
init|=
name|Address
operator|.
name|tryParse
argument_list|(
name|input
operator|.
name|reviewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|adr
operator|==
literal|null
operator|||
operator|!
name|validator
operator|.
name|isValid
argument_list|(
name|adr
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|FailureType
operator|.
name|NOT_FOUND
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|reviewerInvalid
argument_list|,
name|input
operator|.
name|reviewer
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|ReviewerAddition
argument_list|(
name|input
argument_list|,
name|notes
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|adr
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|isValidReviewer (Branch.NameKey branch, Account member)
specifier|private
name|boolean
name|isValidReviewer
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|Account
name|member
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
try|try
block|{
comment|// Check ref permission instead of change permission, since change permissions take into
comment|// account the private bit, whereas adding a user as a reviewer is explicitly allowing them to
comment|// see private changes.
name|permissionBackend
operator|.
name|absentUser
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|branch
argument_list|)
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|fail (AddReviewerInput input, FailureType failureType, String error)
specifier|private
name|ReviewerAddition
name|fail
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|FailureType
name|failureType
parameter_list|,
name|String
name|error
parameter_list|)
block|{
return|return
name|fail
argument_list|(
name|input
argument_list|,
name|failureType
argument_list|,
literal|false
argument_list|,
name|error
argument_list|)
return|;
block|}
DECL|method|fail ( AddReviewerInput input, FailureType failureType, boolean confirm, String error)
specifier|private
name|ReviewerAddition
name|fail
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|FailureType
name|failureType
parameter_list|,
name|boolean
name|confirm
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|ReviewerAddition
name|addition
init|=
operator|new
name|ReviewerAddition
argument_list|(
name|input
argument_list|,
name|failureType
argument_list|)
decl_stmt|;
name|addition
operator|.
name|result
operator|.
name|confirm
operator|=
name|confirm
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|addition
operator|.
name|result
operator|.
name|error
operator|=
name|error
expr_stmt|;
return|return
name|addition
return|;
block|}
DECL|class|ReviewerAddition
specifier|public
class|class
name|ReviewerAddition
block|{
DECL|field|result
specifier|public
specifier|final
name|AddReviewerResult
name|result
decl_stmt|;
DECL|field|op
annotation|@
name|Nullable
specifier|public
specifier|final
name|AddReviewersOp
name|op
decl_stmt|;
DECL|field|reviewers
specifier|public
specifier|final
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
decl_stmt|;
DECL|field|reviewersByEmail
specifier|public
specifier|final
name|ImmutableSet
argument_list|<
name|Address
argument_list|>
name|reviewersByEmail
decl_stmt|;
DECL|field|caller
annotation|@
name|Nullable
specifier|final
name|IdentifiedUser
name|caller
decl_stmt|;
DECL|field|exactMatchFound
specifier|final
name|boolean
name|exactMatchFound
decl_stmt|;
DECL|field|input
specifier|private
specifier|final
name|AddReviewerInput
name|input
decl_stmt|;
DECL|field|failureType
annotation|@
name|Nullable
specifier|private
specifier|final
name|FailureType
name|failureType
decl_stmt|;
DECL|method|ReviewerAddition (AddReviewerInput input, FailureType failureType)
specifier|private
name|ReviewerAddition
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|FailureType
name|failureType
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|failureType
operator|=
name|requireNonNull
argument_list|(
name|failureType
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|AddReviewerResult
argument_list|(
name|input
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|op
operator|=
literal|null
expr_stmt|;
name|reviewers
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
name|reviewersByEmail
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|()
expr_stmt|;
name|caller
operator|=
literal|null
expr_stmt|;
name|exactMatchFound
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|ReviewerAddition ( AddReviewerInput input, ChangeNotes notes, CurrentUser caller, @Nullable Iterable<Account.Id> reviewers, @Nullable Iterable<Address> reviewersByEmail, boolean exactMatchFound)
specifier|private
name|ReviewerAddition
parameter_list|(
name|AddReviewerInput
name|input
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|caller
parameter_list|,
annotation|@
name|Nullable
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
parameter_list|,
annotation|@
name|Nullable
name|Iterable
argument_list|<
name|Address
argument_list|>
name|reviewersByEmail
parameter_list|,
name|boolean
name|exactMatchFound
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|reviewers
operator|!=
literal|null
operator|||
name|reviewersByEmail
operator|!=
literal|null
argument_list|,
literal|"must have either reviewers or reviewersByEmail"
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|failureType
operator|=
literal|null
expr_stmt|;
name|result
operator|=
operator|new
name|AddReviewerResult
argument_list|(
name|input
operator|.
name|reviewer
argument_list|)
expr_stmt|;
comment|// Always silently ignore adding the owner as any type of reviewer on their own change. They
comment|// may still be implicitly added as a reviewer if they vote, but not via the reviewer API.
name|this
operator|.
name|reviewers
operator|=
name|omitOwner
argument_list|(
name|notes
argument_list|,
name|reviewers
argument_list|)
expr_stmt|;
name|this
operator|.
name|reviewersByEmail
operator|=
name|reviewersByEmail
operator|==
literal|null
condition|?
name|ImmutableSet
operator|.
name|of
argument_list|()
else|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|reviewersByEmail
argument_list|)
expr_stmt|;
name|this
operator|.
name|caller
operator|=
name|caller
operator|.
name|asIdentifiedUser
argument_list|()
expr_stmt|;
name|op
operator|=
name|addReviewersOpFactory
operator|.
name|create
argument_list|(
name|this
operator|.
name|reviewers
argument_list|,
name|this
operator|.
name|reviewersByEmail
argument_list|,
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|exactMatchFound
operator|=
name|exactMatchFound
expr_stmt|;
block|}
DECL|method|omitOwner (ChangeNotes notes, Iterable<Account.Id> reviewers)
specifier|private
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|omitOwner
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|Iterable
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
parameter_list|)
block|{
return|return
name|reviewers
operator|!=
literal|null
condition|?
name|Streams
operator|.
name|stream
argument_list|(
name|reviewers
argument_list|)
operator|.
name|filter
argument_list|(
name|id
lambda|->
operator|!
name|id
operator|.
name|equals
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
else|:
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
DECL|method|gatherResults (ChangeData cd)
specifier|public
name|void
name|gatherResults
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|checkState
argument_list|(
name|op
operator|!=
literal|null
argument_list|,
literal|"addition did not result in an update op"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|op
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"op did not return a result"
argument_list|)
expr_stmt|;
comment|// Generate result details and fill AccountLoader. This occurs outside
comment|// the Op because the accounts are in a different table.
name|AddReviewersOp
operator|.
name|Result
name|opResult
init|=
name|op
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|==
name|CC
condition|)
block|{
name|result
operator|.
name|ccs
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|opResult
operator|.
name|addedCCs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|accountId
range|:
name|opResult
operator|.
name|addedCCs
argument_list|()
control|)
block|{
name|result
operator|.
name|ccs
operator|.
name|add
argument_list|(
name|json
operator|.
name|format
argument_list|(
operator|new
name|ReviewerInfo
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|accountId
argument_list|,
name|cd
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
operator|.
name|fill
argument_list|(
name|result
operator|.
name|ccs
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|a
range|:
name|opResult
operator|.
name|addedCCsByEmail
argument_list|()
control|)
block|{
name|result
operator|.
name|ccs
operator|.
name|add
argument_list|(
operator|new
name|AccountInfo
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|reviewers
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|opResult
operator|.
name|addedReviewers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|opResult
operator|.
name|addedReviewers
argument_list|()
control|)
block|{
comment|// New reviewers have value 0, don't bother normalizing.
name|result
operator|.
name|reviewers
operator|.
name|add
argument_list|(
name|json
operator|.
name|format
argument_list|(
operator|new
name|ReviewerInfo
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|cd
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|psa
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoaderFactory
operator|.
name|create
argument_list|(
literal|true
argument_list|)
operator|.
name|fill
argument_list|(
name|result
operator|.
name|reviewers
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|a
range|:
name|opResult
operator|.
name|addedReviewersByEmail
argument_list|()
control|)
block|{
name|result
operator|.
name|reviewers
operator|.
name|add
argument_list|(
name|ReviewerInfo
operator|.
name|byEmail
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|state ()
specifier|public
name|ReviewerState
name|state
parameter_list|()
block|{
return|return
name|input
operator|.
name|state
argument_list|()
return|;
block|}
DECL|method|isFailure ()
specifier|public
name|boolean
name|isFailure
parameter_list|()
block|{
return|return
name|failureType
operator|!=
literal|null
return|;
block|}
DECL|method|isIgnorableFailure ()
specifier|public
name|boolean
name|isIgnorableFailure
parameter_list|()
block|{
name|checkState
argument_list|(
name|failureType
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|FailureBehavior
name|behavior
init|=
operator|(
name|input
operator|instanceof
name|InternalAddReviewerInput
operator|)
condition|?
operator|(
operator|(
name|InternalAddReviewerInput
operator|)
name|input
operator|)
operator|.
name|otherFailureBehavior
else|:
name|FailureBehavior
operator|.
name|FAIL
decl_stmt|;
return|return
name|failureType
operator|==
name|FailureType
operator|.
name|OTHER
operator|&&
name|behavior
operator|==
name|FailureBehavior
operator|.
name|IGNORE
return|;
block|}
block|}
DECL|method|isLegalReviewerGroup (AccountGroup.UUID groupUUID)
specifier|public
specifier|static
name|boolean
name|isLegalReviewerGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUUID
parameter_list|)
block|{
return|return
operator|!
name|SystemGroupBackend
operator|.
name|isSystemGroup
argument_list|(
name|groupUUID
argument_list|)
return|;
block|}
DECL|method|prepare ( ChangeNotes notes, CurrentUser user, Iterable<? extends AddReviewerInput> inputs, boolean allowGroup)
specifier|public
name|ReviewerAdditionList
name|prepare
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|AddReviewerInput
argument_list|>
name|inputs
parameter_list|,
name|boolean
name|allowGroup
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ConfigInvalidException
block|{
comment|// Process CC ops before reviewer ops, so a user that appears in both lists ends up as a
comment|// reviewer; the last call to ChangeUpdate#putReviewer wins. This can happen if the caller
comment|// specifies the same string twice, or less obviously if they specify multiple groups with
comment|// overlapping members.
comment|// TODO(dborowitz): Consider changing interface to allow excluding reviewers that were
comment|// previously processed, to proactively prevent overlap so we don't have to rely on this subtle
comment|// behavior.
name|ImmutableList
argument_list|<
name|AddReviewerInput
argument_list|>
name|sorted
init|=
name|Streams
operator|.
name|stream
argument_list|(
name|inputs
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparing
argument_list|(
name|AddReviewerInput
operator|::
name|state
argument_list|,
name|Ordering
operator|.
name|explicit
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|,
name|ReviewerState
operator|.
name|REVIEWER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReviewerAddition
argument_list|>
name|additions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AddReviewerInput
name|input
range|:
name|sorted
control|)
block|{
name|ReviewerAddition
name|addition
init|=
name|prepare
argument_list|(
name|notes
argument_list|,
name|user
argument_list|,
name|input
argument_list|,
name|allowGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|addition
operator|.
name|op
operator|!=
literal|null
condition|)
block|{
comment|// Assume any callers preparing a list of batch insertions are handling their own email.
name|addition
operator|.
name|op
operator|.
name|suppressEmail
argument_list|()
expr_stmt|;
block|}
name|additions
operator|.
name|add
argument_list|(
name|addition
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ReviewerAdditionList
argument_list|(
name|additions
argument_list|)
return|;
block|}
comment|// TODO(dborowitz): This class works, but ultimately feels wrong. It seems like an op but isn't
comment|// really an op, it's a collection of ops, and it's only called from the body of other ops. We
comment|// could make this class an op, but we would still have AddReviewersOp. Better would probably be
comment|// to design a single op that supports combining multiple AddReviewerInputs together. That would
comment|// probably also subsume the Addition class itself, which would be a good thing.
DECL|class|ReviewerAdditionList
specifier|public
specifier|static
class|class
name|ReviewerAdditionList
block|{
DECL|field|additions
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ReviewerAddition
argument_list|>
name|additions
decl_stmt|;
DECL|method|ReviewerAdditionList (List<ReviewerAddition> additions)
specifier|private
name|ReviewerAdditionList
parameter_list|(
name|List
argument_list|<
name|ReviewerAddition
argument_list|>
name|additions
parameter_list|)
block|{
name|this
operator|.
name|additions
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|additions
argument_list|)
expr_stmt|;
block|}
DECL|method|getFailures ()
specifier|public
name|ImmutableList
argument_list|<
name|ReviewerAddition
argument_list|>
name|getFailures
parameter_list|()
block|{
return|return
name|additions
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|isFailure
argument_list|()
operator|&&
operator|!
name|a
operator|.
name|isIgnorableFailure
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
comment|// We never call updateRepo on the addition ops, which is only ok because it's a no-op.
DECL|method|updateChange (ChangeContext ctx, PatchSet patchSet)
specifier|public
name|void
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|IOException
block|{
for|for
control|(
name|ReviewerAddition
name|addition
range|:
name|additions
argument_list|()
control|)
block|{
name|addition
operator|.
name|op
operator|.
name|setPatchSet
argument_list|(
name|patchSet
argument_list|)
expr_stmt|;
name|addition
operator|.
name|op
operator|.
name|updateChange
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|postUpdate (Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|ReviewerAddition
name|addition
range|:
name|additions
argument_list|()
control|)
block|{
if|if
condition|(
name|addition
operator|.
name|op
operator|!=
literal|null
condition|)
block|{
name|addition
operator|.
name|op
operator|.
name|postUpdate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|flattenResults ( Function<AddReviewersOp.Result, ? extends Collection<T>> func)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ImmutableSet
argument_list|<
name|T
argument_list|>
name|flattenResults
parameter_list|(
name|Function
argument_list|<
name|AddReviewersOp
operator|.
name|Result
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|func
parameter_list|)
block|{
name|additions
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|checkArgument
argument_list|(
name|a
operator|.
name|op
operator|!=
literal|null
operator|&&
name|a
operator|.
name|op
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"missing result on %s"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|additions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|op
operator|.
name|getResult
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|func
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|additions ()
specifier|private
name|ImmutableList
argument_list|<
name|ReviewerAddition
argument_list|>
name|additions
parameter_list|()
block|{
return|return
name|additions
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
block|{
if|if
condition|(
name|a
operator|.
name|isFailure
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|isIgnorableFailure
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Shouldn't happen, caller should have checked that there were no errors.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"error in addition: "
operator|+
name|a
operator|.
name|result
operator|.
name|error
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

