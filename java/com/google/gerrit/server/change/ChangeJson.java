begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_COMMITS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|ALL_REVISIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CHANGE_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CHECK
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|COMMIT_FOOTERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_ACTIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|CURRENT_REVISION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|DETAILED_LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|LABELS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|MESSAGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|REVIEWED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|REVIEWER_UPDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|SKIP_DIFFSTAT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|SKIP_MERGEABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|SUBMITTABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
operator|.
name|TRACKING_IDS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
operator|.
name|createChangeMessageInfo
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRequirement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FixInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeMessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ReviewerUpdateInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|SubmitRequirementInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|TrackingIdInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
operator|.
name|Units
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GpgException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerByEmailSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerStatusUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountInfoComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|TrackingFooters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RemoveReviewerControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
operator|.
name|ChangedLines
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/**  * Produces {@link ChangeInfo} (which is serialized to JSON afterwards) from {@link ChangeData}.  *  *<p>This is intended to be used on request scope, but may be used for converting multiple {@link  * ChangeData} objects from different sources.  */
end_comment

begin_class
DECL|class|ChangeJson
specifier|public
class|class
name|ChangeJson
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|SUBMIT_RULE_OPTIONS_LENIENT
specifier|public
specifier|static
specifier|final
name|SubmitRuleOptions
name|SUBMIT_RULE_OPTIONS_LENIENT
init|=
name|ChangeField
operator|.
name|SUBMIT_RULE_OPTIONS_LENIENT
operator|.
name|toBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|SUBMIT_RULE_OPTIONS_STRICT
specifier|public
specifier|static
specifier|final
name|SubmitRuleOptions
name|SUBMIT_RULE_OPTIONS_STRICT
init|=
name|ChangeField
operator|.
name|SUBMIT_RULE_OPTIONS_STRICT
operator|.
name|toBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|REQUIRE_LAZY_LOAD
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|REQUIRE_LAZY_LOAD
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ALL_COMMITS
argument_list|,
name|ALL_REVISIONS
argument_list|,
name|CHANGE_ACTIONS
argument_list|,
name|CHECK
argument_list|,
name|COMMIT_FOOTERS
argument_list|,
name|CURRENT_ACTIONS
argument_list|,
name|CURRENT_COMMIT
argument_list|,
name|DETAILED_LABELS
argument_list|,
comment|// may need to load ChangeNotes to check remove reviewer permissions
name|MESSAGES
argument_list|)
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|factory
specifier|private
specifier|final
name|AssistedFactory
name|factory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (AssistedFactory factory)
name|Factory
parameter_list|(
name|AssistedFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
DECL|method|noOptions ()
specifier|public
name|ChangeJson
name|noOptions
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create (Iterable<ListChangesOption> options)
specifier|public
name|ChangeJson
name|create
parameter_list|(
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|)
block|{
return|return
name|factory
operator|.
name|create
argument_list|(
name|options
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
DECL|method|create ( Iterable<ListChangesOption> options, PluginDefinedAttributesFactory pluginDefinedAttributesFactory)
specifier|public
name|ChangeJson
name|create
parameter_list|(
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|,
name|PluginDefinedAttributesFactory
name|pluginDefinedAttributesFactory
parameter_list|)
block|{
return|return
name|factory
operator|.
name|create
argument_list|(
name|options
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|pluginDefinedAttributesFactory
argument_list|)
argument_list|)
return|;
block|}
DECL|method|create (ListChangesOption first, ListChangesOption... rest)
specifier|public
name|ChangeJson
name|create
parameter_list|(
name|ListChangesOption
name|first
parameter_list|,
name|ListChangesOption
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|first
argument_list|,
name|rest
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|interface|AssistedFactory
specifier|public
interface|interface
name|AssistedFactory
block|{
DECL|method|create ( Iterable<ListChangesOption> options, Optional<PluginDefinedAttributesFactory> pluginDefinedAttributesFactory)
name|ChangeJson
name|create
parameter_list|(
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|,
name|Optional
argument_list|<
name|PluginDefinedAttributesFactory
argument_list|>
name|pluginDefinedAttributesFactory
parameter_list|)
function_decl|;
block|}
annotation|@
name|Singleton
DECL|class|Metrics
specifier|private
specifier|static
class|class
name|Metrics
block|{
DECL|field|toChangeInfoLatency
specifier|private
specifier|final
name|Timer0
name|toChangeInfoLatency
decl_stmt|;
DECL|field|toChangeInfosLatency
specifier|private
specifier|final
name|Timer0
name|toChangeInfosLatency
decl_stmt|;
DECL|field|formatQueryResultsLatency
specifier|private
specifier|final
name|Timer0
name|formatQueryResultsLatency
decl_stmt|;
annotation|@
name|Inject
DECL|method|Metrics (MetricMaker metricMaker)
name|Metrics
parameter_list|(
name|MetricMaker
name|metricMaker
parameter_list|)
block|{
name|toChangeInfoLatency
operator|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"http/server/rest_api/change_json/to_change_info_latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency for toChangeInfo invocations in ChangeJson"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
name|Units
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|toChangeInfosLatency
operator|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"http/server/rest_api/change_json/to_change_infos_latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency for toChangeInfos invocations in ChangeJson"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
name|Units
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|formatQueryResultsLatency
operator|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"http/server/rest_api/change_json/format_query_results_latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency for formatQueryResults invocations in ChangeJson"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
name|Units
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|accountLoaderFactory
specifier|private
specifier|final
name|AccountLoader
operator|.
name|Factory
name|accountLoaderFactory
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|options
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|checkerProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ConsistencyChecker
argument_list|>
name|checkerProvider
decl_stmt|;
DECL|field|actionJson
specifier|private
specifier|final
name|ActionJson
name|actionJson
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|labelsJson
specifier|private
specifier|final
name|LabelsJson
name|labelsJson
decl_stmt|;
DECL|field|removeReviewerControl
specifier|private
specifier|final
name|RemoveReviewerControl
name|removeReviewerControl
decl_stmt|;
DECL|field|trackingFooters
specifier|private
specifier|final
name|TrackingFooters
name|trackingFooters
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|Metrics
name|metrics
decl_stmt|;
DECL|field|revisionJson
specifier|private
specifier|final
name|RevisionJson
name|revisionJson
decl_stmt|;
DECL|field|pluginDefinedAttributesFactory
specifier|private
specifier|final
name|Optional
argument_list|<
name|PluginDefinedAttributesFactory
argument_list|>
name|pluginDefinedAttributesFactory
decl_stmt|;
DECL|field|excludeMergeableInChangeInfo
specifier|private
specifier|final
name|boolean
name|excludeMergeableInChangeInfo
decl_stmt|;
DECL|field|lazyLoad
specifier|private
specifier|final
name|boolean
name|lazyLoad
decl_stmt|;
DECL|field|accountLoader
specifier|private
name|AccountLoader
name|accountLoader
decl_stmt|;
DECL|field|fix
specifier|private
name|FixInput
name|fix
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeJson ( Provider<CurrentUser> user, PermissionBackend permissionBackend, ChangeData.Factory cdf, AccountLoader.Factory ailf, ChangeMessagesUtil cmUtil, Provider<ConsistencyChecker> checkerProvider, ActionJson actionJson, ChangeNotes.Factory notesFactory, LabelsJson.Factory labelsJsonFactory, RemoveReviewerControl removeReviewerControl, TrackingFooters trackingFooters, Metrics metrics, RevisionJson.Factory revisionJsonFactory, @GerritServerConfig Config cfg, @Assisted Iterable<ListChangesOption> options, @Assisted Optional<PluginDefinedAttributesFactory> pluginDefinedAttributesFactory)
name|ChangeJson
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|cdf
parameter_list|,
name|AccountLoader
operator|.
name|Factory
name|ailf
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|Provider
argument_list|<
name|ConsistencyChecker
argument_list|>
name|checkerProvider
parameter_list|,
name|ActionJson
name|actionJson
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|LabelsJson
operator|.
name|Factory
name|labelsJsonFactory
parameter_list|,
name|RemoveReviewerControl
name|removeReviewerControl
parameter_list|,
name|TrackingFooters
name|trackingFooters
parameter_list|,
name|Metrics
name|metrics
parameter_list|,
name|RevisionJson
operator|.
name|Factory
name|revisionJsonFactory
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|Assisted
name|Iterable
argument_list|<
name|ListChangesOption
argument_list|>
name|options
parameter_list|,
annotation|@
name|Assisted
name|Optional
argument_list|<
name|PluginDefinedAttributesFactory
argument_list|>
name|pluginDefinedAttributesFactory
parameter_list|)
block|{
name|this
operator|.
name|userProvider
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|cdf
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|accountLoaderFactory
operator|=
name|ailf
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|checkerProvider
operator|=
name|checkerProvider
expr_stmt|;
name|this
operator|.
name|actionJson
operator|=
name|actionJson
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|labelsJson
operator|=
name|labelsJsonFactory
operator|.
name|create
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeReviewerControl
operator|=
name|removeReviewerControl
expr_stmt|;
name|this
operator|.
name|trackingFooters
operator|=
name|trackingFooters
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|revisionJson
operator|=
name|revisionJsonFactory
operator|.
name|create
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|Sets
operator|.
name|immutableEnumSet
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludeMergeableInChangeInfo
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"change"
argument_list|,
literal|"api"
argument_list|,
literal|"excludeMergeableInChangeInfo"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|lazyLoad
operator|=
name|containsAnyOf
argument_list|(
name|this
operator|.
name|options
argument_list|,
name|REQUIRE_LAZY_LOAD
argument_list|)
expr_stmt|;
name|this
operator|.
name|pluginDefinedAttributesFactory
operator|=
name|pluginDefinedAttributesFactory
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"options = %s"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|fix (FixInput fix)
specifier|public
name|ChangeJson
name|fix
parameter_list|(
name|FixInput
name|fix
parameter_list|)
block|{
name|this
operator|.
name|fix
operator|=
name|fix
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|format (ChangeResource rsrc)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (Change change)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|change
argument_list|)
argument_list|)
return|;
block|}
DECL|method|format (Project.NameKey project, Change.Id id)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|ChangeInfo
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|format (ChangeData cd)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|cd
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|true
argument_list|,
name|ChangeInfo
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|format (RevisionResource rsrc)
specifier|public
name|ChangeInfo
name|format
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|)
block|{
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|format
argument_list|(
name|cd
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ChangeInfo
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|format (List<QueryResult<ChangeData>> in)
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|format
parameter_list|(
name|List
argument_list|<
name|QueryResult
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|in
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
try|try
init|(
name|Timer0
operator|.
name|Context
name|ignored
init|=
name|metrics
operator|.
name|formatQueryResultsLatency
operator|.
name|start
argument_list|()
init|)
block|{
name|accountLoader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|has
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeInfo
argument_list|>
name|cache
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QueryResult
argument_list|<
name|ChangeData
argument_list|>
name|r
range|:
name|in
control|)
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|infos
init|=
name|toChangeInfos
argument_list|(
name|r
operator|.
name|entities
argument_list|()
argument_list|,
name|cache
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
operator|&&
name|r
operator|.
name|more
argument_list|()
condition|)
block|{
name|infos
operator|.
name|get
argument_list|(
name|infos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|_moreChanges
operator|=
literal|true
expr_stmt|;
block|}
name|res
operator|.
name|add
argument_list|(
name|infos
argument_list|)
expr_stmt|;
block|}
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
DECL|method|format (Collection<ChangeData> in)
specifier|public
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|format
parameter_list|(
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|in
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|accountLoader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|has
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
name|ensureLoaded
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|format
argument_list|(
name|cd
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ChangeInfo
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|format ( Project.NameKey project, Change.Id id, Supplier<I> changeInfoSupplier)
specifier|public
parameter_list|<
name|I
extends|extends
name|ChangeInfo
parameter_list|>
name|I
name|format
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|Supplier
argument_list|<
name|I
argument_list|>
name|changeInfoSupplier
parameter_list|)
block|{
name|ChangeNotes
name|notes
decl_stmt|;
try|try
block|{
name|notes
operator|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|has
argument_list|(
name|CHECK
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|checkOnly
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
argument_list|,
name|changeInfoSupplier
argument_list|)
return|;
block|}
return|return
name|format
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|notes
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|true
argument_list|,
name|changeInfoSupplier
argument_list|)
return|;
block|}
DECL|method|requirementsFor (ChangeData cd)
specifier|private
specifier|static
name|Collection
argument_list|<
name|SubmitRequirementInfo
argument_list|>
name|requirementsFor
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
name|Collection
argument_list|<
name|SubmitRequirementInfo
argument_list|>
name|reqInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
name|submitRecord
range|:
name|cd
operator|.
name|submitRecords
argument_list|(
name|SUBMIT_RULE_OPTIONS_STRICT
argument_list|)
control|)
block|{
if|if
condition|(
name|submitRecord
operator|.
name|requirements
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|SubmitRequirement
name|requirement
range|:
name|submitRecord
operator|.
name|requirements
control|)
block|{
name|reqInfos
operator|.
name|add
argument_list|(
name|requirementToInfo
argument_list|(
name|requirement
argument_list|,
name|submitRecord
operator|.
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reqInfos
return|;
block|}
DECL|method|requirementToInfo (SubmitRequirement req, Status status)
specifier|private
specifier|static
name|SubmitRequirementInfo
name|requirementToInfo
parameter_list|(
name|SubmitRequirement
name|req
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
return|return
operator|new
name|SubmitRequirementInfo
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|,
name|req
operator|.
name|fallbackText
argument_list|()
argument_list|,
name|req
operator|.
name|type
argument_list|()
argument_list|,
name|req
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
DECL|method|finish (ChangeInfo info)
specifier|private
specifier|static
name|void
name|finish
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|info
operator|.
name|id
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'~'
argument_list|)
operator|.
name|join
argument_list|(
name|Url
operator|.
name|encode
argument_list|(
name|info
operator|.
name|project
argument_list|)
argument_list|,
name|Url
operator|.
name|encode
argument_list|(
name|info
operator|.
name|branch
argument_list|)
argument_list|,
name|Url
operator|.
name|encode
argument_list|(
name|info
operator|.
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|containsAnyOf ( ImmutableSet<ListChangesOption> set, ImmutableSet<ListChangesOption> toFind)
specifier|private
specifier|static
name|boolean
name|containsAnyOf
parameter_list|(
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|set
parameter_list|,
name|ImmutableSet
argument_list|<
name|ListChangesOption
argument_list|>
name|toFind
parameter_list|)
block|{
return|return
operator|!
name|Sets
operator|.
name|intersection
argument_list|(
name|toFind
argument_list|,
name|set
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|format ( ChangeData cd, Optional<PatchSet.Id> limitToPsId, boolean fillAccountLoader, Supplier<I> changeInfoSupplier)
specifier|private
parameter_list|<
name|I
extends|extends
name|ChangeInfo
parameter_list|>
name|I
name|format
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|,
name|boolean
name|fillAccountLoader
parameter_list|,
name|Supplier
argument_list|<
name|I
argument_list|>
name|changeInfoSupplier
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|fillAccountLoader
condition|)
block|{
name|accountLoader
operator|=
name|accountLoaderFactory
operator|.
name|create
argument_list|(
name|has
argument_list|(
name|DETAILED_ACCOUNTS
argument_list|)
argument_list|)
expr_stmt|;
name|I
name|res
init|=
name|toChangeInfo
argument_list|(
name|cd
argument_list|,
name|limitToPsId
argument_list|,
name|changeInfoSupplier
argument_list|)
decl_stmt|;
name|accountLoader
operator|.
name|fill
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
return|return
name|toChangeInfo
argument_list|(
name|cd
argument_list|,
name|limitToPsId
argument_list|,
name|changeInfoSupplier
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
decl||
name|GpgException
decl||
name|IOException
decl||
name|PermissionBackendException
decl||
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|has
argument_list|(
name|CHECK
argument_list|)
condition|)
block|{
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|StorageException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|checkOnly
argument_list|(
name|cd
argument_list|,
name|changeInfoSupplier
argument_list|)
return|;
block|}
block|}
DECL|method|ensureLoaded (Iterable<ChangeData> all)
specifier|private
name|void
name|ensureLoaded
parameter_list|(
name|Iterable
argument_list|<
name|ChangeData
argument_list|>
name|all
parameter_list|)
block|{
if|if
condition|(
name|lazyLoad
condition|)
block|{
name|ChangeData
operator|.
name|ensureChangeLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
condition|)
block|{
name|ChangeData
operator|.
name|ensureAllPatchSetsLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|has
argument_list|(
name|CURRENT_REVISION
argument_list|)
operator|||
name|has
argument_list|(
name|MESSAGES
argument_list|)
condition|)
block|{
name|ChangeData
operator|.
name|ensureCurrentPatchSetLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has
argument_list|(
name|REVIEWED
argument_list|)
operator|&&
name|userProvider
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|ChangeData
operator|.
name|ensureReviewedByLoadedForOpenChanges
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
name|ChangeData
operator|.
name|ensureCurrentApprovalsLoaded
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|all
control|)
block|{
name|cd
operator|.
name|setLazyLoad
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|has (ListChangesOption option)
specifier|private
name|boolean
name|has
parameter_list|(
name|ListChangesOption
name|option
parameter_list|)
block|{
return|return
name|options
operator|.
name|contains
argument_list|(
name|option
argument_list|)
return|;
block|}
DECL|method|toChangeInfos ( List<ChangeData> changes, Map<Change.Id, ChangeInfo> cache)
specifier|private
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|toChangeInfos
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|,
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeInfo
argument_list|>
name|cache
parameter_list|)
block|{
try|try
init|(
name|Timer0
operator|.
name|Context
name|ignored
init|=
name|metrics
operator|.
name|toChangeInfosLatency
operator|.
name|start
argument_list|()
init|)
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changeInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// We can only cache and re-use an entity if it's not the last in the list. The last entity
comment|// may later get _moreChanges set. If it was cached or re-used, that setting would propagate
comment|// to the original entity yielding wrong results.
comment|// This problem has two sides where 'last in the list' has to be respected:
comment|// (1) Caching
comment|// (2) Reusing
name|boolean
name|isCacheable
init|=
name|i
operator|!=
name|changes
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|ChangeData
name|cd
init|=
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ChangeInfo
name|info
init|=
name|cache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|isCacheable
condition|)
block|{
name|changeInfos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Compute and cache if possible
try|try
block|{
name|ensureLoaded
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|cd
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|=
name|format
argument_list|(
name|cd
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ChangeInfo
operator|::
operator|new
argument_list|)
expr_stmt|;
name|changeInfos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCacheable
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|info
operator|.
name|_number
argument_list|)
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Omitting corrupt change %s from results"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|changeInfos
return|;
block|}
block|}
DECL|method|checkOnly (ChangeData cd, Supplier<I> changeInfoSupplier)
specifier|private
parameter_list|<
name|I
extends|extends
name|ChangeInfo
parameter_list|>
name|I
name|checkOnly
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Supplier
argument_list|<
name|I
argument_list|>
name|changeInfoSupplier
parameter_list|)
block|{
name|ChangeNotes
name|notes
decl_stmt|;
try|try
block|{
name|notes
operator|=
name|cd
operator|.
name|notes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error loading change"
decl_stmt|;
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
name|msg
operator|+
literal|" %s"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|I
name|info
init|=
name|changeInfoSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|info
operator|.
name|_number
operator|=
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|ProblemInfo
name|p
init|=
operator|new
name|ProblemInfo
argument_list|()
decl_stmt|;
name|p
operator|.
name|message
operator|=
name|msg
expr_stmt|;
name|info
operator|.
name|problems
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
name|ConsistencyChecker
operator|.
name|Result
name|result
init|=
name|checkerProvider
operator|.
name|get
argument_list|()
operator|.
name|check
argument_list|(
name|notes
argument_list|,
name|fix
argument_list|)
decl_stmt|;
name|I
name|info
init|=
name|changeInfoSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|result
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|project
operator|=
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|info
operator|.
name|branch
operator|=
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|shortName
argument_list|()
expr_stmt|;
name|info
operator|.
name|topic
operator|=
name|c
operator|.
name|getTopic
argument_list|()
expr_stmt|;
name|info
operator|.
name|changeId
operator|=
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|info
operator|.
name|subject
operator|=
name|c
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|info
operator|.
name|status
operator|=
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|asChangeStatus
argument_list|()
expr_stmt|;
name|info
operator|.
name|owner
operator|=
operator|new
name|AccountInfo
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|created
operator|=
name|c
operator|.
name|getCreatedOn
argument_list|()
expr_stmt|;
name|info
operator|.
name|updated
operator|=
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
expr_stmt|;
name|info
operator|.
name|_number
operator|=
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|info
operator|.
name|problems
operator|=
name|result
operator|.
name|problems
argument_list|()
expr_stmt|;
name|info
operator|.
name|isPrivate
operator|=
name|c
operator|.
name|isPrivate
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|info
operator|.
name|workInProgress
operator|=
name|c
operator|.
name|isWorkInProgress
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|info
operator|.
name|hasReviewStarted
operator|=
name|c
operator|.
name|hasReviewStarted
argument_list|()
expr_stmt|;
name|finish
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|_number
operator|=
name|result
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|info
operator|.
name|problems
operator|=
name|result
operator|.
name|problems
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|toChangeInfo ( ChangeData cd, Optional<PatchSet.Id> limitToPsId, Supplier<I> changeInfoSupplier)
specifier|private
parameter_list|<
name|I
extends|extends
name|ChangeInfo
parameter_list|>
name|I
name|toChangeInfo
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|,
name|Supplier
argument_list|<
name|I
argument_list|>
name|changeInfoSupplier
parameter_list|)
throws|throws
name|PatchListNotAvailableException
throws|,
name|GpgException
throws|,
name|PermissionBackendException
throws|,
name|IOException
block|{
try|try
init|(
name|Timer0
operator|.
name|Context
name|ignored
init|=
name|metrics
operator|.
name|toChangeInfoLatency
operator|.
name|start
argument_list|()
init|)
block|{
return|return
name|toChangeInfoImpl
argument_list|(
name|cd
argument_list|,
name|limitToPsId
argument_list|,
name|changeInfoSupplier
argument_list|)
return|;
block|}
block|}
DECL|method|toChangeInfoImpl ( ChangeData cd, Optional<PatchSet.Id> limitToPsId, Supplier<I> changeInfoSupplier)
specifier|private
parameter_list|<
name|I
extends|extends
name|ChangeInfo
parameter_list|>
name|I
name|toChangeInfoImpl
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|,
name|Supplier
argument_list|<
name|I
argument_list|>
name|changeInfoSupplier
parameter_list|)
throws|throws
name|PatchListNotAvailableException
throws|,
name|GpgException
throws|,
name|PermissionBackendException
throws|,
name|IOException
block|{
name|I
name|out
init|=
name|changeInfoSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|CurrentUser
name|user
init|=
name|userProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|CHECK
argument_list|)
condition|)
block|{
name|out
operator|.
name|problems
operator|=
name|checkerProvider
operator|.
name|get
argument_list|()
operator|.
name|check
argument_list|(
name|cd
operator|.
name|notes
argument_list|()
argument_list|,
name|fix
argument_list|)
operator|.
name|problems
argument_list|()
expr_stmt|;
comment|// If any problems were fixed, the ChangeData needs to be reloaded.
for|for
control|(
name|ProblemInfo
name|p
range|:
name|out
operator|.
name|problems
control|)
block|{
if|if
condition|(
name|p
operator|.
name|status
operator|==
name|ProblemInfo
operator|.
name|Status
operator|.
name|FIXED
condition|)
block|{
name|cd
operator|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Change
name|in
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
name|out
operator|.
name|project
operator|=
name|in
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|branch
operator|=
name|in
operator|.
name|getDest
argument_list|()
operator|.
name|shortName
argument_list|()
expr_stmt|;
name|out
operator|.
name|topic
operator|=
name|in
operator|.
name|getTopic
argument_list|()
expr_stmt|;
name|out
operator|.
name|assignee
operator|=
name|in
operator|.
name|getAssignee
argument_list|()
operator|!=
literal|null
condition|?
name|accountLoader
operator|.
name|get
argument_list|(
name|in
operator|.
name|getAssignee
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|hashtags
operator|=
name|cd
operator|.
name|hashtags
argument_list|()
expr_stmt|;
name|out
operator|.
name|changeId
operator|=
name|in
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|isNew
argument_list|()
condition|)
block|{
name|SubmitTypeRecord
name|str
init|=
name|cd
operator|.
name|submitTypeRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|isOk
argument_list|()
condition|)
block|{
name|out
operator|.
name|submitType
operator|=
name|str
operator|.
name|type
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeMergeableInChangeInfo
operator|&&
operator|!
name|has
argument_list|(
name|SKIP_MERGEABLE
argument_list|)
condition|)
block|{
name|out
operator|.
name|mergeable
operator|=
name|cd
operator|.
name|isMergeable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|has
argument_list|(
name|SUBMITTABLE
argument_list|)
condition|)
block|{
name|out
operator|.
name|submittable
operator|=
name|submittable
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|has
argument_list|(
name|SKIP_DIFFSTAT
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|ChangedLines
argument_list|>
name|changedLines
init|=
name|cd
operator|.
name|changedLines
argument_list|()
decl_stmt|;
if|if
condition|(
name|changedLines
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|out
operator|.
name|insertions
operator|=
name|changedLines
operator|.
name|get
argument_list|()
operator|.
name|insertions
expr_stmt|;
name|out
operator|.
name|deletions
operator|=
name|changedLines
operator|.
name|get
argument_list|()
operator|.
name|deletions
expr_stmt|;
block|}
block|}
name|out
operator|.
name|isPrivate
operator|=
name|in
operator|.
name|isPrivate
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|workInProgress
operator|=
name|in
operator|.
name|isWorkInProgress
argument_list|()
condition|?
literal|true
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|hasReviewStarted
operator|=
name|in
operator|.
name|hasReviewStarted
argument_list|()
expr_stmt|;
name|out
operator|.
name|subject
operator|=
name|in
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|out
operator|.
name|status
operator|=
name|in
operator|.
name|getStatus
argument_list|()
operator|.
name|asChangeStatus
argument_list|()
expr_stmt|;
name|out
operator|.
name|owner
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|in
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|created
operator|=
name|in
operator|.
name|getCreatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|updated
operator|=
name|in
operator|.
name|getLastUpdatedOn
argument_list|()
expr_stmt|;
name|out
operator|.
name|_number
operator|=
name|in
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|out
operator|.
name|totalCommentCount
operator|=
name|cd
operator|.
name|totalCommentCount
argument_list|()
expr_stmt|;
name|out
operator|.
name|unresolvedCommentCount
operator|=
name|cd
operator|.
name|unresolvedCommentCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|stars
init|=
name|cd
operator|.
name|stars
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|starred
operator|=
name|stars
operator|.
name|contains
argument_list|(
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|stars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|stars
operator|=
name|stars
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isNew
argument_list|()
operator|&&
name|has
argument_list|(
name|REVIEWED
argument_list|)
operator|&&
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|out
operator|.
name|reviewed
operator|=
name|cd
operator|.
name|isReviewedBy
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|?
literal|true
else|:
literal|null
expr_stmt|;
block|}
name|out
operator|.
name|labels
operator|=
name|labelsJson
operator|.
name|labelsFor
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|has
argument_list|(
name|LABELS
argument_list|)
argument_list|,
name|has
argument_list|(
name|DETAILED_LABELS
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|requirements
operator|=
name|requirementsFor
argument_list|(
name|cd
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|labels
operator|!=
literal|null
operator|&&
name|has
argument_list|(
name|DETAILED_LABELS
argument_list|)
condition|)
block|{
comment|// If limited to specific patch sets but not the current patch set, don't
comment|// list permitted labels, since users can't vote on those patch sets.
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
operator|&&
operator|(
operator|!
name|limitToPsId
operator|.
name|isPresent
argument_list|()
operator|||
name|limitToPsId
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|in
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|out
operator|.
name|permittedLabels
operator|=
operator|!
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isAbandoned
argument_list|()
condition|?
name|labelsJson
operator|.
name|permittedLabels
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|cd
argument_list|)
else|:
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|reviewers
operator|=
name|reviewerMap
argument_list|(
name|cd
operator|.
name|reviewers
argument_list|()
argument_list|,
name|cd
operator|.
name|reviewersByEmail
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|pendingReviewers
operator|=
name|reviewerMap
argument_list|(
name|cd
operator|.
name|pendingReviewers
argument_list|()
argument_list|,
name|cd
operator|.
name|pendingReviewersByEmail
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|removableReviewers
operator|=
name|removableReviewers
argument_list|(
name|cd
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|setSubmitter
argument_list|(
name|cd
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluginDefinedAttributesFactory
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|out
operator|.
name|plugins
operator|=
name|pluginDefinedAttributesFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|revertOf
operator|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getRevertOf
argument_list|()
operator|!=
literal|null
condition|?
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getRevertOf
argument_list|()
operator|.
name|get
argument_list|()
else|:
literal|null
expr_stmt|;
name|out
operator|.
name|submissionId
operator|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getSubmissionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|has
argument_list|(
name|REVIEWER_UPDATES
argument_list|)
condition|)
block|{
name|out
operator|.
name|reviewerUpdates
operator|=
name|reviewerUpdates
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|boolean
name|needMessages
init|=
name|has
argument_list|(
name|MESSAGES
argument_list|)
decl_stmt|;
name|boolean
name|needRevisions
init|=
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|has
argument_list|(
name|CURRENT_REVISION
argument_list|)
operator|||
name|limitToPsId
operator|.
name|isPresent
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|src
decl_stmt|;
if|if
condition|(
name|needMessages
operator|||
name|needRevisions
condition|)
block|{
name|src
operator|=
name|loadPatchSets
argument_list|(
name|cd
argument_list|,
name|limitToPsId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|needMessages
condition|)
block|{
name|out
operator|.
name|messages
operator|=
name|messages
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|finish
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// This block must come after the ChangeInfo is mostly populated, since
comment|// it will be passed to ActionVisitors as-is.
if|if
condition|(
name|needRevisions
condition|)
block|{
name|out
operator|.
name|revisions
operator|=
name|revisionJson
operator|.
name|getRevisions
argument_list|(
name|accountLoader
argument_list|,
name|cd
argument_list|,
name|src
argument_list|,
name|limitToPsId
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|revisions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RevisionInfo
argument_list|>
name|entry
range|:
name|out
operator|.
name|revisions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isCurrent
condition|)
block|{
name|out
operator|.
name|currentRevision
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|has
argument_list|(
name|CURRENT_ACTIONS
argument_list|)
operator|||
name|has
argument_list|(
name|CHANGE_ACTIONS
argument_list|)
condition|)
block|{
name|actionJson
operator|.
name|addChangeActions
argument_list|(
name|out
argument_list|,
name|cd
operator|.
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|has
argument_list|(
name|TRACKING_IDS
argument_list|)
condition|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|set
init|=
name|trackingFooters
operator|.
name|extract
argument_list|(
name|cd
operator|.
name|commitFooters
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|trackingIds
operator|=
name|set
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
operator|new
name|TrackingIdInfo
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|reviewerMap ( ReviewerSet reviewers, ReviewerByEmailSet reviewersByEmail, boolean includeRemoved)
specifier|private
name|Map
argument_list|<
name|ReviewerState
argument_list|,
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
argument_list|>
name|reviewerMap
parameter_list|(
name|ReviewerSet
name|reviewers
parameter_list|,
name|ReviewerByEmailSet
name|reviewersByEmail
parameter_list|,
name|boolean
name|includeRemoved
parameter_list|)
block|{
name|Map
argument_list|<
name|ReviewerState
argument_list|,
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
argument_list|>
name|reviewerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReviewerStateInternal
name|state
range|:
name|ReviewerStateInternal
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|includeRemoved
operator|&&
name|state
operator|==
name|ReviewerStateInternal
operator|.
name|REMOVED
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|reviewersByState
init|=
name|toAccountInfo
argument_list|(
name|reviewers
operator|.
name|byState
argument_list|(
name|state
argument_list|)
argument_list|)
decl_stmt|;
name|reviewersByState
operator|.
name|addAll
argument_list|(
name|toAccountInfoByEmail
argument_list|(
name|reviewersByEmail
operator|.
name|byState
argument_list|(
name|state
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reviewersByState
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reviewerMap
operator|.
name|put
argument_list|(
name|state
operator|.
name|asReviewerState
argument_list|()
argument_list|,
name|reviewersByState
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reviewerMap
return|;
block|}
DECL|method|reviewerUpdates (ChangeData cd)
specifier|private
name|Collection
argument_list|<
name|ReviewerUpdateInfo
argument_list|>
name|reviewerUpdates
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
name|List
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|reviewerUpdates
init|=
name|cd
operator|.
name|reviewerUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReviewerUpdateInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|reviewerUpdates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReviewerStatusUpdate
name|c
range|:
name|reviewerUpdates
control|)
block|{
name|ReviewerUpdateInfo
name|change
init|=
operator|new
name|ReviewerUpdateInfo
argument_list|()
decl_stmt|;
name|change
operator|.
name|updated
operator|=
name|c
operator|.
name|date
argument_list|()
expr_stmt|;
name|change
operator|.
name|state
operator|=
name|c
operator|.
name|state
argument_list|()
operator|.
name|asReviewerState
argument_list|()
expr_stmt|;
name|change
operator|.
name|updatedBy
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|c
operator|.
name|updatedBy
argument_list|()
argument_list|)
expr_stmt|;
name|change
operator|.
name|reviewer
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|c
operator|.
name|reviewer
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|submittable (ChangeData cd)
specifier|private
name|boolean
name|submittable
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|SubmitRecord
operator|.
name|allRecordsOK
argument_list|(
name|cd
operator|.
name|submitRecords
argument_list|(
name|SUBMIT_RULE_OPTIONS_STRICT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setSubmitter (ChangeData cd, ChangeInfo out)
specifier|private
name|void
name|setSubmitter
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|ChangeInfo
name|out
parameter_list|)
block|{
name|Optional
argument_list|<
name|PatchSetApproval
argument_list|>
name|s
init|=
name|cd
operator|.
name|getSubmitApproval
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
name|out
operator|.
name|submitted
operator|=
name|s
operator|.
name|get
argument_list|()
operator|.
name|granted
argument_list|()
expr_stmt|;
name|out
operator|.
name|submitter
operator|=
name|accountLoader
operator|.
name|get
argument_list|(
name|s
operator|.
name|get
argument_list|()
operator|.
name|accountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|messages (ChangeData cd)
specifier|private
name|Collection
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|messages
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|messages
init|=
name|cmUtil
operator|.
name|byChange
argument_list|(
name|cd
operator|.
name|notes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|messages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ChangeMessageInfo
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|messages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeMessage
name|message
range|:
name|messages
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createChangeMessageInfo
argument_list|(
name|message
argument_list|,
name|accountLoader
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|removableReviewers (ChangeData cd, ChangeInfo out)
specifier|private
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|removableReviewers
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|ChangeInfo
name|out
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
comment|// Although this is called removableReviewers, this method also determines
comment|// which CCs are removable.
comment|//
comment|// For reviewers, we need to look at each approval, because the reviewer
comment|// should only be considered removable if *all* of their approvals can be
comment|// removed. First, add all reviewers with *any* removable approval to the
comment|// "removable" set. Along the way, if we encounter a non-removable approval,
comment|// add the reviewer to the "fixed" set. Before we return, remove all members
comment|// of "fixed" from "removable", because not all of their approvals can be
comment|// removed.
name|Collection
argument_list|<
name|LabelInfo
argument_list|>
name|labels
init|=
name|out
operator|.
name|labels
operator|.
name|values
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|fixed
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|removable
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if the user has the permission to remove a reviewer. This means we can bypass the
comment|// testRemoveReviewer check for a specific reviewer in the loop saving potentially many
comment|// permission checks.
name|boolean
name|canRemoveAnyReviewer
init|=
name|permissionBackendForChange
argument_list|(
name|userProvider
operator|.
name|get
argument_list|()
argument_list|,
name|cd
argument_list|)
operator|.
name|test
argument_list|(
name|ChangePermission
operator|.
name|REMOVE_REVIEWER
argument_list|)
decl_stmt|;
for|for
control|(
name|LabelInfo
name|label
range|:
name|labels
control|)
block|{
if|if
condition|(
name|label
operator|.
name|all
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|ApprovalInfo
name|ai
range|:
name|label
operator|.
name|all
control|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|Account
operator|.
name|id
argument_list|(
name|ai
operator|.
name|_accountId
argument_list|)
decl_stmt|;
if|if
condition|(
name|canRemoveAnyReviewer
operator|||
name|removeReviewerControl
operator|.
name|testRemoveReviewer
argument_list|(
name|cd
argument_list|,
name|userProvider
operator|.
name|get
argument_list|()
argument_list|,
name|id
argument_list|,
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|ai
operator|.
name|value
argument_list|,
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|removable
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fixed
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// CCs are simpler than reviewers. They are removable if the ChangeControl
comment|// would permit a non-negative approval by that account to be removed, in
comment|// which case add them to removable. We don't need to add unremovable CCs to
comment|// "fixed" because we only visit each CC once here.
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|ccs
init|=
name|out
operator|.
name|reviewers
operator|.
name|get
argument_list|(
name|ReviewerState
operator|.
name|CC
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AccountInfo
name|ai
range|:
name|ccs
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|_accountId
operator|!=
literal|null
condition|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|Account
operator|.
name|id
argument_list|(
name|ai
operator|.
name|_accountId
argument_list|)
decl_stmt|;
if|if
condition|(
name|canRemoveAnyReviewer
operator|||
name|removeReviewerControl
operator|.
name|testRemoveReviewer
argument_list|(
name|cd
argument_list|,
name|userProvider
operator|.
name|get
argument_list|()
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|removable
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Subtract any reviewers with non-removable approvals from the "removable"
comment|// set. This also subtracts any CCs that for some reason also hold
comment|// unremovable approvals.
name|removable
operator|.
name|removeAll
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|removable
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|removable
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|accountLoader
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Reviewers added by email are always removable
for|for
control|(
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|infos
range|:
name|out
operator|.
name|reviewers
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|AccountInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|_accountId
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|toAccountInfo (Collection<Account.Id> accounts)
specifier|private
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|toAccountInfo
parameter_list|(
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
parameter_list|)
block|{
return|return
name|accounts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountLoader
operator|::
name|get
argument_list|)
operator|.
name|sorted
argument_list|(
name|AccountInfoComparator
operator|.
name|ORDER_NULLS_FIRST
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toAccountInfoByEmail (Collection<Address> addresses)
specifier|private
name|Collection
argument_list|<
name|AccountInfo
argument_list|>
name|toAccountInfoByEmail
parameter_list|(
name|Collection
argument_list|<
name|Address
argument_list|>
name|addresses
parameter_list|)
block|{
return|return
name|addresses
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
operator|new
name|AccountInfo
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
name|AccountInfoComparator
operator|.
name|ORDER_NULLS_FIRST
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|loadPatchSets ( ChangeData cd, Optional<PatchSet.Id> limitToPsId)
specifier|private
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|loadPatchSets
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|Optional
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|limitToPsId
parameter_list|)
block|{
name|Collection
argument_list|<
name|PatchSet
argument_list|>
name|src
decl_stmt|;
if|if
condition|(
name|has
argument_list|(
name|ALL_REVISIONS
argument_list|)
operator|||
name|has
argument_list|(
name|MESSAGES
argument_list|)
condition|)
block|{
name|src
operator|=
name|cd
operator|.
name|patchSets
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|PatchSet
name|ps
decl_stmt|;
if|if
condition|(
name|limitToPsId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ps
operator|=
name|cd
operator|.
name|patchSet
argument_list|(
name|limitToPsId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"missing patch set "
operator|+
name|limitToPsId
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ps
operator|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"missing current patch set for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|src
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSet
name|patchSet
range|:
name|src
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|patchSet
operator|.
name|id
argument_list|()
argument_list|,
name|patchSet
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * @return {@link com.google.gerrit.server.permissions.PermissionBackend.ForChange} constructed    *     from either an index-backed or a database-backed {@link ChangeData} depending on {@code    *     lazyload}.    */
DECL|method|permissionBackendForChange (CurrentUser user, ChangeData cd)
specifier|private
name|PermissionBackend
operator|.
name|ForChange
name|permissionBackendForChange
parameter_list|(
name|CurrentUser
name|user
parameter_list|,
name|ChangeData
name|cd
parameter_list|)
block|{
name|PermissionBackend
operator|.
name|WithUser
name|withUser
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|lazyLoad
condition|?
name|withUser
operator|.
name|change
argument_list|(
name|cd
argument_list|)
else|:
name|withUser
operator|.
name|indexedChange
argument_list|(
name|cd
argument_list|,
name|notesFactory
operator|.
name|createFromIndexedChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

