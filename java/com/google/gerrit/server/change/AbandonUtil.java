begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|InternalUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ChangeCleanupConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|AbandonUtil
specifier|public
class|class
name|AbandonUtil
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|ChangeCleanupConfig
name|cfg
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|ChangeQueryProcessor
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|queryBuilder
specifier|private
specifier|final
name|ChangeQueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|batchAbandon
specifier|private
specifier|final
name|BatchAbandon
name|batchAbandon
decl_stmt|;
DECL|field|internalUser
specifier|private
specifier|final
name|InternalUser
name|internalUser
decl_stmt|;
annotation|@
name|Inject
DECL|method|AbandonUtil ( ChangeCleanupConfig cfg, InternalUser.Factory internalUserFactory, Provider<ChangeQueryProcessor> queryProvider, ChangeQueryBuilder queryBuilder, BatchAbandon batchAbandon)
name|AbandonUtil
parameter_list|(
name|ChangeCleanupConfig
name|cfg
parameter_list|,
name|InternalUser
operator|.
name|Factory
name|internalUserFactory
parameter_list|,
name|Provider
argument_list|<
name|ChangeQueryProcessor
argument_list|>
name|queryProvider
parameter_list|,
name|ChangeQueryBuilder
name|queryBuilder
parameter_list|,
name|BatchAbandon
name|batchAbandon
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
name|this
operator|.
name|batchAbandon
operator|=
name|batchAbandon
expr_stmt|;
name|internalUser
operator|=
name|internalUserFactory
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|abandonInactiveOpenChanges (BatchUpdate.Factory updateFactory)
specifier|public
name|void
name|abandonInactiveOpenChanges
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|.
name|getAbandonAfter
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
try|try
block|{
name|String
name|query
init|=
literal|"status:new age:"
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|cfg
operator|.
name|getAbandonAfter
argument_list|()
argument_list|)
operator|+
literal|"m"
decl_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getAbandonIfMergeable
argument_list|()
condition|)
block|{
name|query
operator|+=
literal|" -is:mergeable"
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changesToAbandon
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|enforceVisibility
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|queryBuilder
operator|.
name|parse
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changesToAbandon
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|abandons
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|cfg
operator|.
name|getAbandonMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|abandons
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|changes
init|=
name|getValidChanges
argument_list|(
name|abandons
operator|.
name|get
argument_list|(
name|project
argument_list|)
argument_list|,
name|query
argument_list|)
decl_stmt|;
try|try
block|{
name|batchAbandon
operator|.
name|batchAbandon
argument_list|(
name|updateFactory
argument_list|,
name|project
argument_list|,
name|internalUser
argument_list|,
name|changes
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|count
operator|+=
name|changes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Failed to auto-abandon inactive change(s):"
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|change
range|:
name|changes
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|atInfo
argument_list|()
operator|.
name|log
argument_list|(
literal|"Auto-Abandoned %d of %d changes."
argument_list|,
name|count
argument_list|,
name|changesToAbandon
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
decl||
name|StorageException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to query inactive open changes for auto-abandoning."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getValidChanges (Collection<ChangeData> changes, String query)
specifier|private
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|getValidChanges
parameter_list|(
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|validChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|changes
control|)
block|{
name|String
name|newQuery
init|=
name|query
operator|+
literal|" change:"
operator|+
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changesToAbandon
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|enforceVisibility
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|queryBuilder
operator|.
name|parse
argument_list|(
name|newQuery
argument_list|)
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|changesToAbandon
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validChanges
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Change data with id \"%s\" does not satisfy the query \"%s\""
operator|+
literal|" any more, hence skipping it in clean up"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validChanges
return|;
block|}
block|}
end_class

end_unit

