begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|config
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|RequiresCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestReadView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|WorkQueue
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|WindowCacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_class
annotation|@
name|RequiresCapability
argument_list|(
name|GlobalCapability
operator|.
name|MAINTAIN_SERVER
argument_list|)
DECL|class|GetSummary
specifier|public
class|class
name|GetSummary
implements|implements
name|RestReadView
argument_list|<
name|ConfigResource
argument_list|>
block|{
DECL|field|workQueue
specifier|private
specifier|final
name|WorkQueue
name|workQueue
decl_stmt|;
DECL|field|sitePath
specifier|private
specifier|final
name|Path
name|sitePath
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--gc"
argument_list|,
name|usage
operator|=
literal|"perform Java GC before retrieving memory stats"
argument_list|)
DECL|field|gc
specifier|private
name|boolean
name|gc
decl_stmt|;
DECL|method|setGc (boolean gc)
specifier|public
name|GetSummary
name|setGc
parameter_list|(
name|boolean
name|gc
parameter_list|)
block|{
name|this
operator|.
name|gc
operator|=
name|gc
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--jvm"
argument_list|,
name|usage
operator|=
literal|"include details about the JVM"
argument_list|)
DECL|field|jvm
specifier|private
name|boolean
name|jvm
decl_stmt|;
DECL|method|setJvm (boolean jvm)
specifier|public
name|GetSummary
name|setJvm
parameter_list|(
name|boolean
name|jvm
parameter_list|)
block|{
name|this
operator|.
name|jvm
operator|=
name|jvm
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Inject
DECL|method|GetSummary (WorkQueue workQueue, @SitePath Path sitePath)
specifier|public
name|GetSummary
parameter_list|(
name|WorkQueue
name|workQueue
parameter_list|,
annotation|@
name|SitePath
name|Path
name|sitePath
parameter_list|)
block|{
name|this
operator|.
name|workQueue
operator|=
name|workQueue
expr_stmt|;
name|this
operator|.
name|sitePath
operator|=
name|sitePath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ConfigResource rsrc)
specifier|public
name|SummaryInfo
name|apply
parameter_list|(
name|ConfigResource
name|rsrc
parameter_list|)
block|{
if|if
condition|(
name|gc
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|runFinalization
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|SummaryInfo
name|summary
init|=
operator|new
name|SummaryInfo
argument_list|()
decl_stmt|;
name|summary
operator|.
name|taskSummary
operator|=
name|getTaskSummary
argument_list|()
expr_stmt|;
name|summary
operator|.
name|memSummary
operator|=
name|getMemSummary
argument_list|()
expr_stmt|;
name|summary
operator|.
name|threadSummary
operator|=
name|getThreadSummary
argument_list|()
expr_stmt|;
if|if
condition|(
name|jvm
condition|)
block|{
name|summary
operator|.
name|jvmSummary
operator|=
name|getJvmSummary
argument_list|()
expr_stmt|;
block|}
return|return
name|summary
return|;
block|}
DECL|method|getTaskSummary ()
specifier|private
name|TaskSummaryInfo
name|getTaskSummary
parameter_list|()
block|{
name|Collection
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|pending
init|=
name|workQueue
operator|.
name|getTasks
argument_list|()
decl_stmt|;
name|int
name|tasksTotal
init|=
name|pending
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|tasksRunning
init|=
literal|0
decl_stmt|;
name|int
name|tasksReady
init|=
literal|0
decl_stmt|;
name|int
name|tasksSleeping
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|task
range|:
name|pending
control|)
block|{
switch|switch
condition|(
name|task
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNING
case|:
name|tasksRunning
operator|++
expr_stmt|;
break|break;
case|case
name|READY
case|:
name|tasksReady
operator|++
expr_stmt|;
break|break;
case|case
name|SLEEPING
case|:
name|tasksSleeping
operator|++
expr_stmt|;
break|break;
case|case
name|CANCELLED
case|:
case|case
name|DONE
case|:
case|case
name|OTHER
case|:
break|break;
block|}
block|}
name|TaskSummaryInfo
name|taskSummary
init|=
operator|new
name|TaskSummaryInfo
argument_list|()
decl_stmt|;
name|taskSummary
operator|.
name|total
operator|=
name|toInteger
argument_list|(
name|tasksTotal
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|running
operator|=
name|toInteger
argument_list|(
name|tasksRunning
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|ready
operator|=
name|toInteger
argument_list|(
name|tasksReady
argument_list|)
expr_stmt|;
name|taskSummary
operator|.
name|sleeping
operator|=
name|toInteger
argument_list|(
name|tasksSleeping
argument_list|)
expr_stmt|;
return|return
name|taskSummary
return|;
block|}
DECL|method|getMemSummary ()
specifier|private
name|MemSummaryInfo
name|getMemSummary
parameter_list|()
block|{
name|Runtime
name|r
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|long
name|mMax
init|=
name|r
operator|.
name|maxMemory
argument_list|()
decl_stmt|;
name|long
name|mFree
init|=
name|r
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
name|long
name|mTotal
init|=
name|r
operator|.
name|totalMemory
argument_list|()
decl_stmt|;
name|long
name|mInuse
init|=
name|mTotal
operator|-
name|mFree
decl_stmt|;
name|int
name|jgitOpen
init|=
name|WindowCacheStats
operator|.
name|getOpenFiles
argument_list|()
decl_stmt|;
name|long
name|jgitBytes
init|=
name|WindowCacheStats
operator|.
name|getOpenBytes
argument_list|()
decl_stmt|;
name|MemSummaryInfo
name|memSummaryInfo
init|=
operator|new
name|MemSummaryInfo
argument_list|()
decl_stmt|;
name|memSummaryInfo
operator|.
name|total
operator|=
name|bytes
argument_list|(
name|mTotal
argument_list|)
expr_stmt|;
name|memSummaryInfo
operator|.
name|used
operator|=
name|bytes
argument_list|(
name|mInuse
operator|-
name|jgitBytes
argument_list|)
expr_stmt|;
name|memSummaryInfo
operator|.
name|free
operator|=
name|bytes
argument_list|(
name|mFree
argument_list|)
expr_stmt|;
name|memSummaryInfo
operator|.
name|buffers
operator|=
name|bytes
argument_list|(
name|jgitBytes
argument_list|)
expr_stmt|;
name|memSummaryInfo
operator|.
name|max
operator|=
name|bytes
argument_list|(
name|mMax
argument_list|)
expr_stmt|;
name|memSummaryInfo
operator|.
name|openFiles
operator|=
name|toInteger
argument_list|(
name|jgitOpen
argument_list|)
expr_stmt|;
return|return
name|memSummaryInfo
return|;
block|}
DECL|method|getThreadSummary ()
specifier|private
name|ThreadSummaryInfo
name|getThreadSummary
parameter_list|()
block|{
name|Runtime
name|r
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|ThreadSummaryInfo
name|threadInfo
init|=
operator|new
name|ThreadSummaryInfo
argument_list|()
decl_stmt|;
name|threadInfo
operator|.
name|cpus
operator|=
name|r
operator|.
name|availableProcessors
argument_list|()
expr_stmt|;
name|threadInfo
operator|.
name|threads
operator|=
name|toInteger
argument_list|(
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|getThreadCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"H2"
argument_list|,
literal|"HTTP"
argument_list|,
literal|"IntraLineDiff"
argument_list|,
literal|"ReceiveCommits"
argument_list|,
literal|"SSH git-receive-pack"
argument_list|,
literal|"SSH git-upload-pack"
argument_list|,
literal|"SSH-Interactive-Worker"
argument_list|,
literal|"SSH-Stream-Worker"
argument_list|,
literal|"SshCommandStart"
argument_list|,
literal|"sshd-SshServer"
argument_list|)
decl_stmt|;
name|String
name|other
init|=
literal|"Other"
decl_stmt|;
name|ThreadMXBean
name|threadMXBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|threadInfo
operator|.
name|counts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|id
range|:
name|threadMXBean
operator|.
name|getAllThreadIds
argument_list|()
control|)
block|{
name|ThreadInfo
name|info
init|=
name|threadMXBean
operator|.
name|getThreadInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|info
operator|.
name|getThreadName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|State
name|state
init|=
name|info
operator|.
name|getThreadState
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|other
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|group
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
name|Map
argument_list|<
name|Thread
operator|.
name|State
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
name|threadInfo
operator|.
name|counts
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|counts
operator|==
literal|null
condition|)
block|{
name|counts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|threadInfo
operator|.
name|counts
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|counts
argument_list|)
expr_stmt|;
block|}
name|Integer
name|c
init|=
name|counts
operator|.
name|get
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|state
argument_list|,
name|c
operator|!=
literal|null
condition|?
name|c
operator|+
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|threadInfo
return|;
block|}
DECL|method|getJvmSummary ()
specifier|private
name|JvmSummaryInfo
name|getJvmSummary
parameter_list|()
block|{
name|OperatingSystemMXBean
name|osBean
init|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
decl_stmt|;
name|RuntimeMXBean
name|runtimeBean
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|JvmSummaryInfo
name|jvmSummary
init|=
operator|new
name|JvmSummaryInfo
argument_list|()
decl_stmt|;
name|jvmSummary
operator|.
name|vmVendor
operator|=
name|runtimeBean
operator|.
name|getVmVendor
argument_list|()
expr_stmt|;
name|jvmSummary
operator|.
name|vmName
operator|=
name|runtimeBean
operator|.
name|getVmName
argument_list|()
expr_stmt|;
name|jvmSummary
operator|.
name|vmVersion
operator|=
name|runtimeBean
operator|.
name|getVmVersion
argument_list|()
expr_stmt|;
name|jvmSummary
operator|.
name|osName
operator|=
name|osBean
operator|.
name|getName
argument_list|()
expr_stmt|;
name|jvmSummary
operator|.
name|osVersion
operator|=
name|osBean
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|jvmSummary
operator|.
name|osArch
operator|=
name|osBean
operator|.
name|getArch
argument_list|()
expr_stmt|;
name|jvmSummary
operator|.
name|user
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
try|try
block|{
name|jvmSummary
operator|.
name|host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// Ignored
block|}
name|jvmSummary
operator|.
name|currentWorkingDirectory
operator|=
name|path
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|jvmSummary
operator|.
name|site
operator|=
name|path
argument_list|(
name|sitePath
argument_list|)
expr_stmt|;
return|return
name|jvmSummary
return|;
block|}
DECL|method|toInteger (int i)
specifier|private
specifier|static
name|Integer
name|toInteger
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
operator|!=
literal|0
condition|?
name|i
else|:
literal|null
return|;
block|}
DECL|method|bytes (double value)
specifier|private
specifier|static
name|String
name|bytes
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|value
operator|/=
literal|1024
expr_stmt|;
name|String
name|suffix
init|=
literal|"k"
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|1024
condition|)
block|{
name|value
operator|/=
literal|1024
expr_stmt|;
name|suffix
operator|=
literal|"m"
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|>
literal|1024
condition|)
block|{
name|value
operator|/=
literal|1024
expr_stmt|;
name|suffix
operator|=
literal|"g"
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1$6.2f%2$s"
argument_list|,
name|value
argument_list|,
name|suffix
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|path (Path path)
specifier|private
specifier|static
name|String
name|path
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|path
operator|.
name|toRealPath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
return|return
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|SummaryInfo
specifier|public
specifier|static
class|class
name|SummaryInfo
block|{
DECL|field|taskSummary
specifier|public
name|TaskSummaryInfo
name|taskSummary
decl_stmt|;
DECL|field|memSummary
specifier|public
name|MemSummaryInfo
name|memSummary
decl_stmt|;
DECL|field|threadSummary
specifier|public
name|ThreadSummaryInfo
name|threadSummary
decl_stmt|;
DECL|field|jvmSummary
specifier|public
name|JvmSummaryInfo
name|jvmSummary
decl_stmt|;
block|}
DECL|class|TaskSummaryInfo
specifier|public
specifier|static
class|class
name|TaskSummaryInfo
block|{
DECL|field|total
specifier|public
name|Integer
name|total
decl_stmt|;
DECL|field|running
specifier|public
name|Integer
name|running
decl_stmt|;
DECL|field|ready
specifier|public
name|Integer
name|ready
decl_stmt|;
DECL|field|sleeping
specifier|public
name|Integer
name|sleeping
decl_stmt|;
block|}
DECL|class|MemSummaryInfo
specifier|public
specifier|static
class|class
name|MemSummaryInfo
block|{
DECL|field|total
specifier|public
name|String
name|total
decl_stmt|;
DECL|field|used
specifier|public
name|String
name|used
decl_stmt|;
DECL|field|free
specifier|public
name|String
name|free
decl_stmt|;
DECL|field|buffers
specifier|public
name|String
name|buffers
decl_stmt|;
DECL|field|max
specifier|public
name|String
name|max
decl_stmt|;
DECL|field|openFiles
specifier|public
name|Integer
name|openFiles
decl_stmt|;
block|}
DECL|class|ThreadSummaryInfo
specifier|public
specifier|static
class|class
name|ThreadSummaryInfo
block|{
DECL|field|cpus
specifier|public
name|Integer
name|cpus
decl_stmt|;
DECL|field|threads
specifier|public
name|Integer
name|threads
decl_stmt|;
DECL|field|counts
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Thread
operator|.
name|State
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|counts
decl_stmt|;
block|}
DECL|class|JvmSummaryInfo
specifier|public
specifier|static
class|class
name|JvmSummaryInfo
block|{
DECL|field|vmVendor
specifier|public
name|String
name|vmVendor
decl_stmt|;
DECL|field|vmName
specifier|public
name|String
name|vmName
decl_stmt|;
DECL|field|vmVersion
specifier|public
name|String
name|vmVersion
decl_stmt|;
DECL|field|osName
specifier|public
name|String
name|osName
decl_stmt|;
DECL|field|osVersion
specifier|public
name|String
name|osVersion
decl_stmt|;
DECL|field|osArch
specifier|public
name|String
name|osArch
decl_stmt|;
DECL|field|user
specifier|public
name|String
name|user
decl_stmt|;
DECL|field|host
specifier|public
name|String
name|host
decl_stmt|;
DECL|field|currentWorkingDirectory
specifier|public
name|String
name|currentWorkingDirectory
decl_stmt|;
DECL|field|site
specifier|public
name|String
name|site
decl_stmt|;
block|}
block|}
end_class

end_unit

