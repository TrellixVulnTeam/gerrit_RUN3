begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|config
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|CapabilityDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestReadView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CapabilityConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** List capabilities visible to the calling user. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ListCapabilities
specifier|public
class|class
name|ListCapabilities
implements|implements
name|RestReadView
argument_list|<
name|ConfigResource
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ListCapabilities
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PLUGIN_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PLUGIN_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[a-zA-Z0-9-]+$"
argument_list|)
decl_stmt|;
DECL|field|pluginCapabilities
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|CapabilityDefinition
argument_list|>
name|pluginCapabilities
decl_stmt|;
annotation|@
name|Inject
DECL|method|ListCapabilities (DynamicMap<CapabilityDefinition> pluginCapabilities)
specifier|public
name|ListCapabilities
parameter_list|(
name|DynamicMap
argument_list|<
name|CapabilityDefinition
argument_list|>
name|pluginCapabilities
parameter_list|)
block|{
name|this
operator|.
name|pluginCapabilities
operator|=
name|pluginCapabilities
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ConfigResource resource)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CapabilityInfo
argument_list|>
name|apply
parameter_list|(
name|ConfigResource
name|resource
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|NoSuchFieldException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CapabilityInfo
argument_list|>
name|output
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectCoreCapabilities
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|collectPluginCapabilities
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
DECL|method|collectCoreCapabilities (Map<String, CapabilityInfo> output)
specifier|private
name|void
name|collectCoreCapabilities
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CapabilityInfo
argument_list|>
name|output
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|NoSuchFieldException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CapabilityConstants
argument_list|>
name|bundleClass
init|=
name|CapabilityConstants
operator|.
name|get
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|CapabilityConstants
name|c
init|=
name|CapabilityConstants
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|GlobalCapability
operator|.
name|getAllNames
argument_list|()
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|bundleClass
operator|.
name|getField
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|output
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|CapabilityInfo
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|collectPluginCapabilities (Map<String, CapabilityInfo> output)
specifier|private
name|void
name|collectPluginCapabilities
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|CapabilityInfo
argument_list|>
name|output
parameter_list|)
block|{
for|for
control|(
name|String
name|pluginName
range|:
name|pluginCapabilities
operator|.
name|plugins
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|PLUGIN_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|pluginName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Plugin name '{}' must match '{}' to use capabilities; rename the plugin"
argument_list|,
name|pluginName
argument_list|,
name|PLUGIN_NAME_PATTERN
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|CapabilityDefinition
argument_list|>
argument_list|>
name|entry
range|:
name|pluginCapabilities
operator|.
name|byPlugin
argument_list|(
name|pluginName
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s"
argument_list|,
name|pluginName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|output
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|CapabilityInfo
argument_list|(
name|id
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CapabilityInfo
specifier|public
specifier|static
class|class
name|CapabilityInfo
block|{
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
DECL|method|CapabilityInfo (String id, String name)
specifier|public
name|CapabilityInfo
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

