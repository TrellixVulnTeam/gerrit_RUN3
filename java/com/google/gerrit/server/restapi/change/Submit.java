begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ParameterizedString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ProjectUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|ChangeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeSuperSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|Submit
specifier|public
class|class
name|Submit
implements|implements
name|RestModifyView
argument_list|<
name|RevisionResource
argument_list|,
name|SubmitInput
argument_list|>
implements|,
name|UiAction
argument_list|<
name|RevisionResource
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_TOOLTIP
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TOOLTIP
init|=
literal|"Submit patch set ${patchSet} into ${branch}"
decl_stmt|;
DECL|field|DEFAULT_TOOLTIP_ANCESTORS
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TOOLTIP_ANCESTORS
init|=
literal|"Submit patch set ${patchSet} and ancestors (${submitSize} changes "
operator|+
literal|"altogether) into ${branch}"
decl_stmt|;
DECL|field|DEFAULT_TOPIC_TOOLTIP
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TOPIC_TOOLTIP
init|=
literal|"Submit all ${topicSize} changes of the same topic "
operator|+
literal|"(${submitSize} changes including ancestors and other "
operator|+
literal|"changes related by topic)"
decl_stmt|;
DECL|field|BLOCKED_HIDDEN_SUBMIT_TOOLTIP
specifier|private
specifier|static
specifier|final
name|String
name|BLOCKED_HIDDEN_SUBMIT_TOOLTIP
init|=
literal|"This change depends on other hidden changes which are not ready"
decl_stmt|;
DECL|field|CLICK_FAILURE_TOOLTIP
specifier|private
specifier|static
specifier|final
name|String
name|CLICK_FAILURE_TOOLTIP
init|=
literal|"Clicking the button would fail"
decl_stmt|;
DECL|field|CHANGE_UNMERGEABLE
specifier|private
specifier|static
specifier|final
name|String
name|CHANGE_UNMERGEABLE
init|=
literal|"Problems with integrating this change"
decl_stmt|;
DECL|class|Output
specifier|public
specifier|static
class|class
name|Output
block|{
DECL|field|change
specifier|transient
name|Change
name|change
decl_stmt|;
DECL|method|Output (Change c)
specifier|private
name|Output
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|change
operator|=
name|c
expr_stmt|;
block|}
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|changeNotesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
DECL|field|mergeOpProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeOp
argument_list|>
name|mergeOpProvider
decl_stmt|;
DECL|field|mergeSuperSet
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeSuperSet
argument_list|>
name|mergeSuperSet
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|label
specifier|private
specifier|final
name|String
name|label
decl_stmt|;
DECL|field|labelWithParents
specifier|private
specifier|final
name|String
name|labelWithParents
decl_stmt|;
DECL|field|titlePattern
specifier|private
specifier|final
name|ParameterizedString
name|titlePattern
decl_stmt|;
DECL|field|titlePatternWithAncestors
specifier|private
specifier|final
name|ParameterizedString
name|titlePatternWithAncestors
decl_stmt|;
DECL|field|submitTopicLabel
specifier|private
specifier|final
name|String
name|submitTopicLabel
decl_stmt|;
DECL|field|submitTopicTooltip
specifier|private
specifier|final
name|ParameterizedString
name|submitTopicTooltip
decl_stmt|;
DECL|field|submitWholeTopic
specifier|private
specifier|final
name|boolean
name|submitWholeTopic
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|Submit ( GitRepositoryManager repoManager, PermissionBackend permissionBackend, ChangeData.Factory changeDataFactory, ChangeNotes.Factory changeNotesFactory, Provider<MergeOp> mergeOpProvider, Provider<MergeSuperSet> mergeSuperSet, AccountResolver accountResolver, @GerritServerConfig Config cfg, Provider<InternalChangeQuery> queryProvider, PatchSetUtil psUtil, ProjectCache projectCache)
name|Submit
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
parameter_list|,
name|Provider
argument_list|<
name|MergeOp
argument_list|>
name|mergeOpProvider
parameter_list|,
name|Provider
argument_list|<
name|MergeSuperSet
argument_list|>
name|mergeSuperSet
parameter_list|,
name|AccountResolver
name|accountResolver
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|changeNotesFactory
operator|=
name|changeNotesFactory
expr_stmt|;
name|this
operator|.
name|mergeOpProvider
operator|=
name|mergeOpProvider
expr_stmt|;
name|this
operator|.
name|mergeSuperSet
operator|=
name|mergeSuperSet
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitLabel"
argument_list|)
argument_list|)
argument_list|,
literal|"Submit"
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelWithParents
operator|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitLabelWithParents"
argument_list|)
argument_list|)
argument_list|,
literal|"Submit including parents"
argument_list|)
expr_stmt|;
name|this
operator|.
name|titlePattern
operator|=
operator|new
name|ParameterizedString
argument_list|(
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitTooltip"
argument_list|)
argument_list|,
name|DEFAULT_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|titlePatternWithAncestors
operator|=
operator|new
name|ParameterizedString
argument_list|(
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitTooltipAncestors"
argument_list|)
argument_list|,
name|DEFAULT_TOOLTIP_ANCESTORS
argument_list|)
argument_list|)
expr_stmt|;
name|submitWholeTopic
operator|=
name|MergeSuperSet
operator|.
name|wholeTopicEnabled
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitTopicLabel
operator|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitTopicLabel"
argument_list|)
argument_list|)
argument_list|,
literal|"Submit whole topic"
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitTopicTooltip
operator|=
operator|new
name|ParameterizedString
argument_list|(
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitTopicTooltip"
argument_list|)
argument_list|,
name|DEFAULT_TOPIC_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (RevisionResource rsrc, SubmitInput input)
specifier|public
name|Output
name|apply
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|SubmitInput
name|input
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|StorageException
throws|,
name|PermissionBackendException
throws|,
name|UpdateException
throws|,
name|ConfigInvalidException
block|{
name|input
operator|.
name|onBehalfOf
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|input
operator|.
name|onBehalfOf
argument_list|)
expr_stmt|;
name|IdentifiedUser
name|submitter
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|onBehalfOf
operator|!=
literal|null
condition|)
block|{
name|submitter
operator|=
name|onBehalfOf
argument_list|(
name|rsrc
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsrc
operator|.
name|permissions
argument_list|()
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|SUBMIT
argument_list|)
expr_stmt|;
name|submitter
operator|=
name|rsrc
operator|.
name|getUser
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
expr_stmt|;
block|}
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|checkStatePermitsWrite
argument_list|()
expr_stmt|;
return|return
operator|new
name|Output
argument_list|(
name|mergeChange
argument_list|(
name|rsrc
argument_list|,
name|submitter
argument_list|,
name|input
argument_list|)
argument_list|)
return|;
block|}
DECL|method|mergeChange (RevisionResource rsrc, IdentifiedUser submitter, SubmitInput input)
specifier|public
name|Change
name|mergeChange
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|IdentifiedUser
name|submitter
parameter_list|,
name|SubmitInput
name|input
parameter_list|)
throws|throws
name|StorageException
throws|,
name|RestApiException
throws|,
name|IOException
throws|,
name|UpdateException
throws|,
name|ConfigInvalidException
throws|,
name|PermissionBackendException
block|{
name|Change
name|change
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|change
operator|.
name|isNew
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is "
operator|+
name|ChangeUtil
operator|.
name|status
argument_list|(
name|change
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ProjectUtil
operator|.
name|branchExists
argument_list|(
name|repoManager
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"destination branch \"%s\" not found."
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO Allow submitting non-current revision by changing the current.
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"revision %s is not current revision"
argument_list|,
name|rsrc
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
init|(
name|MergeOp
name|op
init|=
name|mergeOpProvider
operator|.
name|get
argument_list|()
init|)
block|{
name|op
operator|.
name|merge
argument_list|(
name|change
argument_list|,
name|submitter
argument_list|,
literal|true
argument_list|,
name|input
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Read the ChangeNotes only after MergeOp is fully done (including MergeOp#close) to be sure
comment|// to have the correct state of the repo.
try|try
block|{
name|change
operator|=
name|changeNotesFactory
operator|.
name|createChecked
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getChange
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is deleted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|change
operator|.
name|isMerged
argument_list|()
condition|)
block|{
return|return
name|change
return|;
block|}
if|if
condition|(
name|change
operator|.
name|isNew
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RestApiException
argument_list|(
literal|"change unexpectedly had status NEW after submit attempt"
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is "
operator|+
name|ChangeUtil
operator|.
name|status
argument_list|(
name|change
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * Returns a message describing what prevents the current change from being submitted - or null.    * This method only considers parent changes, and changes in the same topic. The caller is    * responsible for making sure the current change to be submitted can indeed be submitted    * (permissions, submit rules, is not a WIP...)    *    * @param cd the change the user is currently looking at    * @param cs set of changes to be submitted at once    * @param user the user who is checking to submit    * @return a reason why any of the changes is not submittable or null    */
DECL|method|problemsForSubmittingChangeset (ChangeData cd, ChangeSet cs, CurrentUser user)
specifier|private
name|String
name|problemsForSubmittingChangeset
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|ChangeSet
name|cs
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|cs
operator|.
name|furtherHiddenChanges
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Change %d cannot be submitted by user %s because it depends on hidden changes: %s"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|user
operator|.
name|getLoggableName
argument_list|()
argument_list|,
name|cs
operator|.
name|nonVisibleChanges
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|BLOCKED_HIDDEN_SUBMIT_TOOLTIP
return|;
block|}
for|for
control|(
name|ChangeData
name|c
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// We ignore the change about to be submitted, as these checks are already done in the
comment|// #apply and #getDescription methods.
continue|continue;
block|}
name|Set
argument_list|<
name|ChangePermission
argument_list|>
name|can
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|change
argument_list|(
name|c
argument_list|)
operator|.
name|test
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|,
name|ChangePermission
operator|.
name|SUBMIT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|can
operator|.
name|contains
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Change %d cannot be submitted by user %s because it depends on change %d which the user cannot read"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|user
operator|.
name|getLoggableName
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|BLOCKED_HIDDEN_SUBMIT_TOOLTIP
return|;
block|}
if|if
condition|(
operator|!
name|can
operator|.
name|contains
argument_list|(
name|ChangePermission
operator|.
name|SUBMIT
argument_list|)
condition|)
block|{
return|return
literal|"You don't have permission to submit change "
operator|+
name|c
operator|.
name|getId
argument_list|()
return|;
block|}
if|if
condition|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
condition|)
block|{
return|return
literal|"Change "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|" is marked work in progress"
return|;
block|}
try|try
block|{
name|MergeOp
operator|.
name|checkSubmitRule
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
return|return
literal|"Change "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|" is not ready: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|unmergeable
init|=
name|unmergeableChanges
argument_list|(
name|cs
argument_list|)
decl_stmt|;
if|if
condition|(
name|unmergeable
operator|==
literal|null
condition|)
block|{
return|return
name|CLICK_FAILURE_TOOLTIP
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|unmergeable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ChangeData
name|c
range|:
name|unmergeable
control|)
block|{
if|if
condition|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|CHANGE_UNMERGEABLE
return|;
block|}
block|}
return|return
literal|"Problems with change(s): "
operator|+
name|unmergeable
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error checking if change is submittable"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Could not determine problems for the change"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription (RevisionResource resource)
specifier|public
name|UiAction
operator|.
name|Description
name|getDescription
parameter_list|(
name|RevisionResource
name|resource
parameter_list|)
block|{
name|Change
name|change
init|=
name|resource
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|change
operator|.
name|isNew
argument_list|()
operator|||
name|change
operator|.
name|isWorkInProgress
argument_list|()
operator|||
operator|!
name|resource
operator|.
name|isCurrent
argument_list|()
operator|||
operator|!
name|resource
operator|.
name|permissions
argument_list|()
operator|.
name|testOrFalse
argument_list|(
name|ChangePermission
operator|.
name|SUBMIT
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// submit not visible
block|}
try|try
block|{
if|if
condition|(
operator|!
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|resource
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|statePermitsWrite
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
comment|// submit not visible
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error checking if change is submittable"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Could not determine problems for the change"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|resource
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|MergeOp
operator|.
name|checkSubmitRule
argument_list|(
name|cd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// submit not visible
block|}
name|ChangeSet
name|cs
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|mergeSuperSet
operator|.
name|get
argument_list|()
operator|.
name|completeChangeSet
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|,
name|resource
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|PermissionBackendException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Could not determine complete set of changes to be submitted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|topic
init|=
name|change
operator|.
name|getTopic
argument_list|()
decl_stmt|;
name|int
name|topicSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|topic
argument_list|)
condition|)
block|{
name|topicSize
operator|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byTopicOpen
argument_list|(
name|topic
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|boolean
name|treatWithTopic
init|=
name|submitWholeTopic
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|topic
argument_list|)
operator|&&
name|topicSize
operator|>
literal|1
decl_stmt|;
name|String
name|submitProblems
init|=
name|problemsForSubmittingChangeset
argument_list|(
name|cd
argument_list|,
name|cs
argument_list|,
name|resource
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Recheck mergeability rather than using value stored in the index, which may be stale.
comment|// TODO(dborowitz): This is ugly; consider providing a way to not read stored fields from the
comment|// index in the first place.
comment|// cd.setMergeable(null);
comment|// That was done in unmergeableChanges which was called by problemsForSubmittingChangeset, so
comment|// now it is safe to read from the cache, as it yields the same result.
name|Boolean
name|enabled
init|=
name|cd
operator|.
name|isMergeable
argument_list|()
decl_stmt|;
if|if
condition|(
name|submitProblems
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|UiAction
operator|.
name|Description
argument_list|()
operator|.
name|setLabel
argument_list|(
name|treatWithTopic
condition|?
name|submitTopicLabel
else|:
operator|(
name|cs
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|?
name|labelWithParents
else|:
name|label
argument_list|)
operator|.
name|setTitle
argument_list|(
name|submitProblems
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|treatWithTopic
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"topicSize"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|topicSize
argument_list|)
argument_list|,
literal|"submitSize"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|cs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|UiAction
operator|.
name|Description
argument_list|()
operator|.
name|setLabel
argument_list|(
name|submitTopicLabel
argument_list|)
operator|.
name|setTitle
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|submitTopicTooltip
operator|.
name|replace
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|enabled
argument_list|)
argument_list|)
return|;
block|}
name|RevId
name|revId
init|=
name|resource
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"patchSet"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|resource
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
argument_list|,
literal|"branch"
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|,
literal|"commit"
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|revId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|abbreviate
argument_list|(
literal|7
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
literal|"submitSize"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|cs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ParameterizedString
name|tp
init|=
name|cs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|titlePatternWithAncestors
else|:
name|titlePattern
decl_stmt|;
return|return
operator|new
name|UiAction
operator|.
name|Description
argument_list|()
operator|.
name|setLabel
argument_list|(
name|cs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|labelWithParents
else|:
name|label
argument_list|)
operator|.
name|setTitle
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|tp
operator|.
name|replace
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|enabled
argument_list|)
argument_list|)
return|;
block|}
DECL|method|unmergeableChanges (ChangeSet cs)
specifier|public
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|unmergeableChanges
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|StorageException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|ChangeData
argument_list|>
name|mergeabilityMap
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|change
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|mergeabilityMap
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
name|ListMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|cbb
init|=
name|cs
operator|.
name|changesByBranch
argument_list|()
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|cbb
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|targetBranch
init|=
name|cbb
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|RevCommit
argument_list|>
name|commits
init|=
name|findCommits
argument_list|(
name|targetBranch
argument_list|,
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|allParents
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|cs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RevCommit
name|commit
range|:
name|commits
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|RevCommit
name|parent
range|:
name|commit
operator|.
name|getParents
argument_list|()
control|)
block|{
name|allParents
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ChangeData
name|change
range|:
name|targetBranch
control|)
block|{
name|RevCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isMergeCommit
init|=
name|commit
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
decl_stmt|;
name|boolean
name|isLastInChain
init|=
operator|!
name|allParents
operator|.
name|contains
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Recheck mergeability rather than using value stored in the index,
comment|// which may be stale.
comment|// TODO(dborowitz): This is ugly; consider providing a way to not read
comment|// stored fields from the index in the first place.
name|change
operator|.
name|setMergeable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Boolean
name|mergeable
init|=
name|change
operator|.
name|isMergeable
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeable
operator|==
literal|null
condition|)
block|{
comment|// Skip whole check, cannot determine if mergeable
return|return
literal|null
return|;
block|}
if|if
condition|(
name|mergeable
condition|)
block|{
name|mergeabilityMap
operator|.
name|remove
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLastInChain
operator|&&
name|isMergeCommit
operator|&&
name|mergeable
condition|)
block|{
for|for
control|(
name|ChangeData
name|c
range|:
name|targetBranch
control|)
block|{
name|mergeabilityMap
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
return|return
name|mergeabilityMap
return|;
block|}
DECL|method|findCommits ( Collection<ChangeData> changes, Project.NameKey project)
specifier|private
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|RevCommit
argument_list|>
name|findCommits
parameter_list|(
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|changes
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|HashMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|RevCommit
argument_list|>
name|commits
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|walk
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
for|for
control|(
name|ChangeData
name|change
range|:
name|changes
control|)
block|{
name|RevCommit
name|commit
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|psUtil
operator|.
name|current
argument_list|(
name|change
operator|.
name|notes
argument_list|()
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|commits
return|;
block|}
DECL|method|onBehalfOf (RevisionResource rsrc, SubmitInput in)
specifier|private
name|IdentifiedUser
name|onBehalfOf
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|SubmitInput
name|in
parameter_list|)
throws|throws
name|AuthException
throws|,
name|UnprocessableEntityException
throws|,
name|StorageException
throws|,
name|PermissionBackendException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|PermissionBackend
operator|.
name|ForChange
name|perm
init|=
name|rsrc
operator|.
name|permissions
argument_list|()
decl_stmt|;
name|perm
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|SUBMIT
argument_list|)
expr_stmt|;
name|perm
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|SUBMIT_AS
argument_list|)
expr_stmt|;
name|CurrentUser
name|caller
init|=
name|rsrc
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|IdentifiedUser
name|submitter
init|=
name|accountResolver
operator|.
name|resolve
argument_list|(
name|in
operator|.
name|onBehalfOf
argument_list|)
operator|.
name|asUniqueUserOnBehalfOf
argument_list|(
name|caller
argument_list|)
decl_stmt|;
try|try
block|{
name|permissionBackend
operator|.
name|user
argument_list|(
name|submitter
argument_list|)
operator|.
name|change
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnprocessableEntityException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"on_behalf_of account %s cannot see change"
argument_list|,
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|submitter
return|;
block|}
DECL|class|CurrentRevision
specifier|public
specifier|static
class|class
name|CurrentRevision
implements|implements
name|RestModifyView
argument_list|<
name|ChangeResource
argument_list|,
name|SubmitInput
argument_list|>
block|{
DECL|field|submit
specifier|private
specifier|final
name|Submit
name|submit
decl_stmt|;
DECL|field|json
specifier|private
specifier|final
name|ChangeJson
operator|.
name|Factory
name|json
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|CurrentRevision (Submit submit, ChangeJson.Factory json, PatchSetUtil psUtil)
name|CurrentRevision
parameter_list|(
name|Submit
name|submit
parameter_list|,
name|ChangeJson
operator|.
name|Factory
name|json
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|)
block|{
name|this
operator|.
name|submit
operator|=
name|submit
expr_stmt|;
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc, SubmitInput input)
specifier|public
name|ChangeInfo
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|SubmitInput
name|input
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|StorageException
throws|,
name|PermissionBackendException
throws|,
name|UpdateException
throws|,
name|ConfigInvalidException
block|{
name|PatchSet
name|ps
init|=
name|psUtil
operator|.
name|current
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"current revision is missing"
argument_list|)
throw|;
block|}
name|Output
name|out
init|=
name|submit
operator|.
name|apply
argument_list|(
operator|new
name|RevisionResource
argument_list|(
name|rsrc
argument_list|,
name|ps
argument_list|)
argument_list|,
name|input
argument_list|)
decl_stmt|;
return|return
name|json
operator|.
name|noOptions
argument_list|()
operator|.
name|format
argument_list|(
name|out
operator|.
name|change
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

