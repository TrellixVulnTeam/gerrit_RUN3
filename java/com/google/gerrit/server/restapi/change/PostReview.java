begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
operator|.
name|setCommentCommitId
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|LabelPermission
operator|.
name|ForUser
operator|.
name|ON_BEHALF_OF
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|groupingBy
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|AddReviewerResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|CommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|RobotCommentInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewerInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FixReplacementInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|FixSuggestionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Url
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentForValidation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentForValidation
operator|.
name|CommentType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentValidationFailure
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentValidator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|FixReplacement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|FixSuggestion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RobotComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PublishCommentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|AddReviewersEmail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|EmailReviewComments
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|NotifyResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ReviewerAdder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ReviewerAdder
operator|.
name|ReviewerAddition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|WorkInProgressOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|CommentAdded
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffSummaryKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|LabelPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|CommentsRejectedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryingRestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|PostReview
specifier|public
class|class
name|PostReview
extends|extends
name|RetryingRestModifyView
argument_list|<
name|RevisionResource
argument_list|,
name|ReviewInput
argument_list|,
name|Response
argument_list|<
name|ReviewResult
argument_list|>
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|ERROR_ADDING_REVIEWER
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_ADDING_REVIEWER
init|=
literal|"error adding reviewer"
decl_stmt|;
DECL|field|ERROR_WIP_READY_MUTUALLY_EXCLUSIVE
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_WIP_READY_MUTUALLY_EXCLUSIVE
init|=
literal|"work_in_progress and ready are mutually exclusive"
decl_stmt|;
DECL|field|START_REVIEW_MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|START_REVIEW_MESSAGE
init|=
literal|"This change is ready for review."
decl_stmt|;
DECL|field|GSON
specifier|private
specifier|static
specifier|final
name|Gson
name|GSON
init|=
name|OutputFormat
operator|.
name|JSON_COMPACT
operator|.
name|newGson
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_ROBOT_COMMENT_SIZE_LIMIT_IN_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ROBOT_COMMENT_SIZE_LIMIT_IN_BYTES
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|changeResourceFactory
specifier|private
specifier|final
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|commentsUtil
specifier|private
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|publishCommentUtil
specifier|private
specifier|final
name|PublishCommentUtil
name|publishCommentUtil
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|email
specifier|private
specifier|final
name|EmailReviewComments
operator|.
name|Factory
name|email
decl_stmt|;
DECL|field|commentAdded
specifier|private
specifier|final
name|CommentAdded
name|commentAdded
decl_stmt|;
DECL|field|reviewerAdder
specifier|private
specifier|final
name|ReviewerAdder
name|reviewerAdder
decl_stmt|;
DECL|field|addReviewersEmail
specifier|private
specifier|final
name|AddReviewersEmail
name|addReviewersEmail
decl_stmt|;
DECL|field|notifyResolver
specifier|private
specifier|final
name|NotifyResolver
name|notifyResolver
decl_stmt|;
DECL|field|gerritConfig
specifier|private
specifier|final
name|Config
name|gerritConfig
decl_stmt|;
DECL|field|workInProgressOpFactory
specifier|private
specifier|final
name|WorkInProgressOp
operator|.
name|Factory
name|workInProgressOpFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|commentValidators
specifier|private
specifier|final
name|PluginSetContext
argument_list|<
name|CommentValidator
argument_list|>
name|commentValidators
decl_stmt|;
DECL|field|strictLabels
specifier|private
specifier|final
name|boolean
name|strictLabels
decl_stmt|;
annotation|@
name|Inject
DECL|method|PostReview ( RetryHelper retryHelper, ChangeResource.Factory changeResourceFactory, ChangeData.Factory changeDataFactory, ApprovalsUtil approvalsUtil, ChangeMessagesUtil cmUtil, CommentsUtil commentsUtil, PublishCommentUtil publishCommentUtil, PatchSetUtil psUtil, PatchListCache patchListCache, AccountResolver accountResolver, EmailReviewComments.Factory email, CommentAdded commentAdded, ReviewerAdder reviewerAdder, AddReviewersEmail addReviewersEmail, NotifyResolver notifyResolver, @GerritServerConfig Config gerritConfig, WorkInProgressOp.Factory workInProgressOpFactory, ProjectCache projectCache, PermissionBackend permissionBackend, PluginSetContext<CommentValidator> commentValidators)
name|PostReview
parameter_list|(
name|RetryHelper
name|retryHelper
parameter_list|,
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|PublishCommentUtil
name|publishCommentUtil
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|AccountResolver
name|accountResolver
parameter_list|,
name|EmailReviewComments
operator|.
name|Factory
name|email
parameter_list|,
name|CommentAdded
name|commentAdded
parameter_list|,
name|ReviewerAdder
name|reviewerAdder
parameter_list|,
name|AddReviewersEmail
name|addReviewersEmail
parameter_list|,
name|NotifyResolver
name|notifyResolver
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|gerritConfig
parameter_list|,
name|WorkInProgressOp
operator|.
name|Factory
name|workInProgressOpFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|PluginSetContext
argument_list|<
name|CommentValidator
argument_list|>
name|commentValidators
parameter_list|)
block|{
name|super
argument_list|(
name|retryHelper
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeResourceFactory
operator|=
name|changeResourceFactory
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|publishCommentUtil
operator|=
name|publishCommentUtil
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|email
operator|=
name|email
expr_stmt|;
name|this
operator|.
name|commentAdded
operator|=
name|commentAdded
expr_stmt|;
name|this
operator|.
name|reviewerAdder
operator|=
name|reviewerAdder
expr_stmt|;
name|this
operator|.
name|addReviewersEmail
operator|=
name|addReviewersEmail
expr_stmt|;
name|this
operator|.
name|notifyResolver
operator|=
name|notifyResolver
expr_stmt|;
name|this
operator|.
name|gerritConfig
operator|=
name|gerritConfig
expr_stmt|;
name|this
operator|.
name|workInProgressOpFactory
operator|=
name|workInProgressOpFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|commentValidators
operator|=
name|commentValidators
expr_stmt|;
name|this
operator|.
name|strictLabels
operator|=
name|gerritConfig
operator|.
name|getBoolean
argument_list|(
literal|"change"
argument_list|,
literal|"strictLabels"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyImpl ( BatchUpdate.Factory updateFactory, RevisionResource revision, ReviewInput input)
specifier|protected
name|Response
argument_list|<
name|ReviewResult
argument_list|>
name|applyImpl
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|RevisionResource
name|revision
parameter_list|,
name|ReviewInput
name|input
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|UpdateException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ConfigInvalidException
throws|,
name|PatchListNotAvailableException
block|{
return|return
name|apply
argument_list|(
name|updateFactory
argument_list|,
name|revision
argument_list|,
name|input
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|apply ( BatchUpdate.Factory updateFactory, RevisionResource revision, ReviewInput input, Timestamp ts)
specifier|public
name|Response
argument_list|<
name|ReviewResult
argument_list|>
name|apply
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|RevisionResource
name|revision
parameter_list|,
name|ReviewInput
name|input
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|UpdateException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ConfigInvalidException
throws|,
name|PatchListNotAvailableException
block|{
comment|// Respect timestamp, but truncate at change created-on time.
name|ts
operator|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|max
argument_list|(
name|ts
argument_list|,
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|revision
operator|.
name|getEdit
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"cannot post review on edit"
argument_list|)
throw|;
block|}
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|revision
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|LabelTypes
name|labelTypes
init|=
name|projectState
operator|.
name|getLabelTypes
argument_list|(
name|revision
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|input
operator|.
name|drafts
operator|=
name|firstNonNull
argument_list|(
name|input
operator|.
name|drafts
argument_list|,
name|DraftHandling
operator|.
name|KEEP
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|onBehalfOf
operator|!=
literal|null
condition|)
block|{
name|revision
operator|=
name|onBehalfOf
argument_list|(
name|revision
argument_list|,
name|labelTypes
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
name|checkLabels
argument_list|(
name|revision
argument_list|,
name|labelTypes
argument_list|,
name|input
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|comments
operator|!=
literal|null
condition|)
block|{
name|cleanUpComments
argument_list|(
name|input
operator|.
name|comments
argument_list|)
expr_stmt|;
name|checkComments
argument_list|(
name|revision
argument_list|,
name|input
operator|.
name|comments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|robotComments
operator|!=
literal|null
condition|)
block|{
name|checkRobotComments
argument_list|(
name|revision
argument_list|,
name|input
operator|.
name|robotComments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|notify
operator|==
literal|null
condition|)
block|{
name|input
operator|.
name|notify
operator|=
name|defaultNotify
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AddReviewerResult
argument_list|>
name|reviewerJsonResults
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ReviewerAddition
argument_list|>
name|reviewerResults
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|boolean
name|hasError
init|=
literal|false
decl_stmt|;
name|boolean
name|confirm
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|reviewers
operator|!=
literal|null
condition|)
block|{
name|reviewerJsonResults
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|AddReviewerInput
name|reviewerInput
range|:
name|input
operator|.
name|reviewers
control|)
block|{
name|ReviewerAddition
name|result
init|=
name|reviewerAdder
operator|.
name|prepare
argument_list|(
name|revision
operator|.
name|getNotes
argument_list|()
argument_list|,
name|revision
operator|.
name|getUser
argument_list|()
argument_list|,
name|reviewerInput
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|reviewerJsonResults
operator|.
name|put
argument_list|(
name|reviewerInput
operator|.
name|reviewer
argument_list|,
name|result
operator|.
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|result
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
name|hasError
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|result
operator|.
name|result
operator|.
name|confirm
operator|!=
literal|null
condition|)
block|{
name|confirm
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|reviewerResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|ReviewResult
name|output
init|=
operator|new
name|ReviewResult
argument_list|()
decl_stmt|;
name|output
operator|.
name|reviewers
operator|=
name|reviewerJsonResults
expr_stmt|;
if|if
condition|(
name|hasError
operator|||
name|confirm
condition|)
block|{
name|output
operator|.
name|error
operator|=
name|ERROR_ADDING_REVIEWER
expr_stmt|;
return|return
name|Response
operator|.
name|withStatusCode
argument_list|(
name|SC_BAD_REQUEST
argument_list|,
name|output
argument_list|)
return|;
block|}
name|output
operator|.
name|labels
operator|=
name|input
operator|.
name|labels
expr_stmt|;
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|revision
operator|.
name|getUser
argument_list|()
argument_list|,
name|ts
argument_list|)
init|)
block|{
name|Account
operator|.
name|Id
name|id
init|=
name|revision
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|boolean
name|ccOrReviewer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|labels
operator|!=
literal|null
operator|&&
operator|!
name|input
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ccOrReviewer
operator|=
name|input
operator|.
name|labels
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|v
lambda|->
name|v
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ccOrReviewer
condition|)
block|{
comment|// Check if user was already CCed or reviewing prior to this review.
name|ReviewerSet
name|currentReviewers
init|=
name|approvalsUtil
operator|.
name|getReviewers
argument_list|(
name|revision
operator|.
name|getChangeResource
argument_list|()
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|ccOrReviewer
operator|=
name|currentReviewers
operator|.
name|all
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|// Apply reviewer changes first. Revision emails should be sent to the
comment|// updated set of reviewers. Also keep track of whether the user added
comment|// themselves as a reviewer or to the CC list.
for|for
control|(
name|ReviewerAddition
name|reviewerResult
range|:
name|reviewerResults
control|)
block|{
name|reviewerResult
operator|.
name|op
operator|.
name|suppressEmail
argument_list|()
expr_stmt|;
comment|// Send a single batch email below.
name|bu
operator|.
name|addOp
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reviewerResult
operator|.
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ccOrReviewer
operator|&&
name|reviewerResult
operator|.
name|result
operator|.
name|reviewers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ReviewerInfo
name|reviewerInfo
range|:
name|reviewerResult
operator|.
name|result
operator|.
name|reviewers
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|reviewerInfo
operator|.
name|_accountId
argument_list|)
condition|)
block|{
name|ccOrReviewer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ccOrReviewer
operator|&&
name|reviewerResult
operator|.
name|result
operator|.
name|ccs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AccountInfo
name|accountInfo
range|:
name|reviewerResult
operator|.
name|result
operator|.
name|ccs
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|accountInfo
operator|.
name|_accountId
argument_list|)
condition|)
block|{
name|ccOrReviewer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ccOrReviewer
condition|)
block|{
comment|// User posting this review isn't currently in the reviewer or CC list,
comment|// isn't being explicitly added, and isn't voting on any label.
comment|// Automatically CC them on this change so they receive replies.
name|ReviewerAddition
name|selfAddition
init|=
name|reviewerAdder
operator|.
name|ccCurrentUser
argument_list|(
name|revision
operator|.
name|getUser
argument_list|()
argument_list|,
name|revision
argument_list|)
decl_stmt|;
name|selfAddition
operator|.
name|op
operator|.
name|suppressEmail
argument_list|()
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|selfAddition
operator|.
name|op
argument_list|)
expr_stmt|;
block|}
comment|// Add WorkInProgressOp if requested.
if|if
condition|(
name|input
operator|.
name|ready
operator|||
name|input
operator|.
name|workInProgress
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|ready
operator|&&
name|input
operator|.
name|workInProgress
condition|)
block|{
name|output
operator|.
name|error
operator|=
name|ERROR_WIP_READY_MUTUALLY_EXCLUSIVE
expr_stmt|;
return|return
name|Response
operator|.
name|withStatusCode
argument_list|(
name|SC_BAD_REQUEST
argument_list|,
name|output
argument_list|)
return|;
block|}
name|revision
operator|.
name|getChangeResource
argument_list|()
operator|.
name|permissions
argument_list|()
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|TOGGLE_WORK_IN_PROGRESS_STATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|ready
condition|)
block|{
name|output
operator|.
name|ready
operator|=
literal|true
expr_stmt|;
block|}
name|WorkInProgressOp
name|wipOp
init|=
name|workInProgressOpFactory
operator|.
name|create
argument_list|(
name|input
operator|.
name|workInProgress
argument_list|,
operator|new
name|WorkInProgressOp
operator|.
name|Input
argument_list|()
argument_list|)
decl_stmt|;
name|wipOp
operator|.
name|suppressEmail
argument_list|()
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|wipOp
argument_list|)
expr_stmt|;
block|}
comment|// Add the review op.
name|bu
operator|.
name|addOp
argument_list|(
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Op
argument_list|(
name|projectState
argument_list|,
name|revision
operator|.
name|getPatchSet
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
comment|// Notify based on ReviewInput, ignoring the notify settings from any AddReviewerInputs.
name|NotifyResolver
operator|.
name|Result
name|notify
init|=
name|notifyResolver
operator|.
name|resolve
argument_list|(
name|getNotifyHandling
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|revision
argument_list|)
argument_list|,
name|input
operator|.
name|notifyDetails
argument_list|)
decl_stmt|;
name|bu
operator|.
name|setNotify
argument_list|(
name|notify
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Re-read change to take into account results of the update.
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|revision
operator|.
name|getProject
argument_list|()
argument_list|,
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReviewerAddition
name|reviewerResult
range|:
name|reviewerResults
control|)
block|{
name|reviewerResult
operator|.
name|gatherResults
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
comment|// Sending from AddReviewersOp was suppressed so we can send a single batch email here.
name|batchEmailReviewers
argument_list|(
name|revision
operator|.
name|getUser
argument_list|()
argument_list|,
name|revision
operator|.
name|getChange
argument_list|()
argument_list|,
name|reviewerResults
argument_list|,
name|notify
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|output
argument_list|)
return|;
block|}
DECL|method|getNotifyHandling ( ReviewInput input, ReviewResult output, RevisionResource revision)
specifier|private
name|NotifyHandling
name|getNotifyHandling
parameter_list|(
name|ReviewInput
name|input
parameter_list|,
name|ReviewResult
name|output
parameter_list|,
name|RevisionResource
name|revision
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|notify
operator|!=
literal|null
condition|)
block|{
return|return
name|input
operator|.
name|notify
return|;
block|}
if|if
condition|(
operator|(
name|output
operator|.
name|ready
operator|!=
literal|null
operator|&&
name|output
operator|.
name|ready
operator|)
operator|||
operator|!
name|revision
operator|.
name|getChange
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
condition|)
block|{
return|return
name|NotifyHandling
operator|.
name|ALL
return|;
block|}
return|return
name|NotifyHandling
operator|.
name|NONE
return|;
block|}
DECL|method|defaultNotify (Change c, ReviewInput in)
specifier|private
name|NotifyHandling
name|defaultNotify
parameter_list|(
name|Change
name|c
parameter_list|,
name|ReviewInput
name|in
parameter_list|)
block|{
name|boolean
name|workInProgress
init|=
name|c
operator|.
name|isWorkInProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|workInProgress
condition|)
block|{
name|workInProgress
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|ready
condition|)
block|{
name|workInProgress
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ChangeMessagesUtil
operator|.
name|isAutogenerated
argument_list|(
name|in
operator|.
name|tag
argument_list|)
condition|)
block|{
comment|// Autogenerated comments default to lower notify levels.
return|return
name|workInProgress
condition|?
name|NotifyHandling
operator|.
name|OWNER
else|:
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
return|;
block|}
if|if
condition|(
name|workInProgress
operator|&&
operator|!
name|c
operator|.
name|hasReviewStarted
argument_list|()
condition|)
block|{
comment|// If review hasn't started we want to eliminate notifications, no matter who the author is.
return|return
name|NotifyHandling
operator|.
name|NONE
return|;
block|}
comment|// Otherwise, it's either a non-WIP change, or a WIP change where review has started. Notify
comment|// everyone.
return|return
name|NotifyHandling
operator|.
name|ALL
return|;
block|}
DECL|method|batchEmailReviewers ( CurrentUser user, Change change, List<ReviewerAddition> reviewerAdditions, NotifyResolver.Result notify)
specifier|private
name|void
name|batchEmailReviewers
parameter_list|(
name|CurrentUser
name|user
parameter_list|,
name|Change
name|change
parameter_list|,
name|List
argument_list|<
name|ReviewerAddition
argument_list|>
name|reviewerAdditions
parameter_list|,
name|NotifyResolver
operator|.
name|Result
name|notify
parameter_list|)
block|{
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|to
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Address
argument_list|>
name|toByEmail
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Address
argument_list|>
name|ccByEmail
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReviewerAddition
name|addition
range|:
name|reviewerAdditions
control|)
block|{
if|if
condition|(
name|addition
operator|.
name|state
argument_list|()
operator|==
name|ReviewerState
operator|.
name|REVIEWER
condition|)
block|{
name|to
operator|.
name|addAll
argument_list|(
name|addition
operator|.
name|reviewers
argument_list|)
expr_stmt|;
name|toByEmail
operator|.
name|addAll
argument_list|(
name|addition
operator|.
name|reviewersByEmail
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|addition
operator|.
name|state
argument_list|()
operator|==
name|ReviewerState
operator|.
name|CC
condition|)
block|{
name|cc
operator|.
name|addAll
argument_list|(
name|addition
operator|.
name|reviewers
argument_list|)
expr_stmt|;
name|ccByEmail
operator|.
name|addAll
argument_list|(
name|addition
operator|.
name|reviewersByEmail
argument_list|)
expr_stmt|;
block|}
block|}
name|addReviewersEmail
operator|.
name|emailReviewers
argument_list|(
name|user
operator|.
name|asIdentifiedUser
argument_list|()
argument_list|,
name|change
argument_list|,
name|to
argument_list|,
name|cc
argument_list|,
name|toByEmail
argument_list|,
name|ccByEmail
argument_list|,
name|notify
argument_list|)
expr_stmt|;
block|}
DECL|method|onBehalfOf (RevisionResource rev, LabelTypes labelTypes, ReviewInput in)
specifier|private
name|RevisionResource
name|onBehalfOf
parameter_list|(
name|RevisionResource
name|rev
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|ReviewInput
name|in
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|AuthException
throws|,
name|UnprocessableEntityException
throws|,
name|PermissionBackendException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|in
operator|.
name|labels
operator|==
literal|null
operator|||
name|in
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label required to post review on behalf of \"%s\""
argument_list|,
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|in
operator|.
name|drafts
operator|!=
name|DraftHandling
operator|.
name|KEEP
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"not allowed to modify other user's drafts"
argument_list|)
throw|;
block|}
name|CurrentUser
name|caller
init|=
name|rev
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|PermissionBackend
operator|.
name|ForChange
name|perm
init|=
name|rev
operator|.
name|permissions
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|>
name|itr
init|=
name|in
operator|.
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|ent
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strictLabels
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label \"%s\" is not a configured label"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|caller
operator|.
name|isInternalUser
argument_list|()
condition|)
block|{
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
operator|new
name|LabelPermission
operator|.
name|WithValue
argument_list|(
name|ON_BEHALF_OF
argument_list|,
name|type
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"not permitted to modify label \"%s\" on behalf of \"%s\""
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|in
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label required to post review on behalf of \"%s\""
argument_list|,
name|in
operator|.
name|onBehalfOf
argument_list|)
argument_list|)
throw|;
block|}
name|IdentifiedUser
name|reviewer
init|=
name|accountResolver
operator|.
name|resolve
argument_list|(
name|in
operator|.
name|onBehalfOf
argument_list|)
operator|.
name|asUniqueUserOnBehalfOf
argument_list|(
name|caller
argument_list|)
decl_stmt|;
try|try
block|{
name|permissionBackend
operator|.
name|user
argument_list|(
name|reviewer
argument_list|)
operator|.
name|change
argument_list|(
name|rev
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnprocessableEntityException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"on_behalf_of account %s cannot see change"
argument_list|,
name|reviewer
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|RevisionResource
argument_list|(
name|changeResourceFactory
operator|.
name|create
argument_list|(
name|rev
operator|.
name|getNotes
argument_list|()
argument_list|,
name|reviewer
argument_list|)
argument_list|,
name|rev
operator|.
name|getPatchSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|checkLabels (RevisionResource rsrc, LabelTypes labelTypes, Map<String, Short> labels)
specifier|private
name|void
name|checkLabels
parameter_list|(
name|RevisionResource
name|rsrc
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|AuthException
throws|,
name|PermissionBackendException
block|{
name|PermissionBackend
operator|.
name|ForChange
name|perm
init|=
name|rsrc
operator|.
name|permissions
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|>
name|itr
init|=
name|labels
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|ent
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|LabelType
name|lt
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strictLabels
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label \"%s\" is not a configured label"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Always permit 0, even if it is not within range.
comment|// Later null/0 will be deleted and revoke the label.
continue|continue;
block|}
if|if
condition|(
name|lt
operator|.
name|getValue
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strictLabels
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label \"%s\": %d is not a valid value"
argument_list|,
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|short
name|val
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
operator|new
name|LabelPermission
operator|.
name|WithValue
argument_list|(
name|lt
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Applying label \"%s\": %d is restricted"
argument_list|,
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
name|val
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|cleanUpComments ( Map<String, List<T>> commentsPerPath)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CommentInput
parameter_list|>
name|void
name|cleanUpComments
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|commentsPerPath
parameter_list|)
block|{
name|Iterator
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|mapValueIterator
init|=
name|commentsPerPath
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|mapValueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|comments
init|=
name|mapValueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|comments
operator|==
literal|null
condition|)
block|{
name|mapValueIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|cleanUpComments
argument_list|(
name|comments
argument_list|)
expr_stmt|;
if|if
condition|(
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapValueIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanUpComments (List<T> comments)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CommentInput
parameter_list|>
name|void
name|cleanUpComments
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|comments
parameter_list|)
block|{
name|Iterator
argument_list|<
name|T
argument_list|>
name|commentsIterator
init|=
name|comments
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|commentsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|comment
init|=
name|commentsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|comment
operator|==
literal|null
condition|)
block|{
name|commentsIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|comment
operator|.
name|message
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|comment
operator|.
name|message
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|comment
operator|.
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commentsIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkComments ( RevisionResource revision, Map<String, List<T>> commentsPerPath)
specifier|private
parameter_list|<
name|T
extends|extends
name|CommentInput
parameter_list|>
name|void
name|checkComments
parameter_list|(
name|RevisionResource
name|revision
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|commentsPerPath
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PatchListNotAvailableException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|revisionFilePaths
init|=
name|getAffectedFilePaths
argument_list|(
name|revision
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|entry
range|:
name|commentsPerPath
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|revision
operator|.
name|getPatchSet
argument_list|()
operator|.
name|id
argument_list|()
decl_stmt|;
name|ensurePathRefersToAvailableOrMagicFile
argument_list|(
name|path
argument_list|,
name|revisionFilePaths
argument_list|,
name|patchSetId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|comments
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|comment
range|:
name|comments
control|)
block|{
name|ensureLineIsNonNegative
argument_list|(
name|comment
operator|.
name|line
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|ensureCommentNotOnMagicFilesOfAutoMerge
argument_list|(
name|path
argument_list|,
name|comment
argument_list|)
expr_stmt|;
name|ensureRangeIsValid
argument_list|(
name|path
argument_list|,
name|comment
operator|.
name|range
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAffectedFilePaths (RevisionResource revision)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getAffectedFilePaths
parameter_list|(
name|RevisionResource
name|revision
parameter_list|)
throws|throws
name|PatchListNotAvailableException
block|{
name|ObjectId
name|newId
init|=
name|revision
operator|.
name|getPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
decl_stmt|;
name|DiffSummaryKey
name|key
init|=
name|DiffSummaryKey
operator|.
name|fromPatchListKey
argument_list|(
name|PatchListKey
operator|.
name|againstDefaultBase
argument_list|(
name|newId
argument_list|,
name|Whitespace
operator|.
name|IGNORE_NONE
argument_list|)
argument_list|)
decl_stmt|;
name|DiffSummary
name|ds
init|=
name|patchListCache
operator|.
name|getDiffSummary
argument_list|(
name|key
argument_list|,
name|revision
operator|.
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ds
operator|.
name|getPaths
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ensurePathRefersToAvailableOrMagicFile ( String path, Set<String> availableFilePaths, PatchSet.Id patchSetId)
specifier|private
specifier|static
name|void
name|ensurePathRefersToAvailableOrMagicFile
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|availableFilePaths
parameter_list|,
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
operator|!
name|availableFilePaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|Patch
operator|.
name|isMagic
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"file %s not found in revision %s"
argument_list|,
name|path
argument_list|,
name|patchSetId
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureLineIsNonNegative (Integer line, String path)
specifier|private
specifier|static
name|void
name|ensureLineIsNonNegative
parameter_list|(
name|Integer
name|line
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|line
operator|!=
literal|null
operator|&&
name|line
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"negative line number %d not allowed on %s"
argument_list|,
name|line
argument_list|,
name|path
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureCommentNotOnMagicFilesOfAutoMerge ( String path, T comment)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|CommentInput
parameter_list|>
name|void
name|ensureCommentNotOnMagicFilesOfAutoMerge
parameter_list|(
name|String
name|path
parameter_list|,
name|T
name|comment
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|Patch
operator|.
name|isMagic
argument_list|(
name|path
argument_list|)
operator|&&
name|comment
operator|.
name|side
operator|==
name|Side
operator|.
name|PARENT
operator|&&
name|comment
operator|.
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cannot comment on %s on auto-merge"
argument_list|,
name|path
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|checkRobotComments ( RevisionResource revision, Map<String, List<RobotCommentInput>> in)
specifier|private
name|void
name|checkRobotComments
parameter_list|(
name|RevisionResource
name|revision
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RobotCommentInput
argument_list|>
argument_list|>
name|in
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|PatchListNotAvailableException
block|{
name|cleanUpComments
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RobotCommentInput
argument_list|>
argument_list|>
name|e
range|:
name|in
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|commentPath
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|RobotCommentInput
name|c
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ensureSizeOfJsonInputIsWithinBounds
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ensureRobotIdIsSet
argument_list|(
name|c
operator|.
name|robotId
argument_list|,
name|commentPath
argument_list|)
expr_stmt|;
name|ensureRobotRunIdIsSet
argument_list|(
name|c
operator|.
name|robotRunId
argument_list|,
name|commentPath
argument_list|)
expr_stmt|;
name|ensureFixSuggestionsAreAddable
argument_list|(
name|c
operator|.
name|fixSuggestions
argument_list|,
name|commentPath
argument_list|)
expr_stmt|;
block|}
block|}
name|checkComments
argument_list|(
name|revision
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureSizeOfJsonInputIsWithinBounds (RobotCommentInput robotCommentInput)
specifier|private
name|void
name|ensureSizeOfJsonInputIsWithinBounds
parameter_list|(
name|RobotCommentInput
name|robotCommentInput
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|OptionalInt
name|robotCommentSizeLimit
init|=
name|getRobotCommentSizeLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|robotCommentSizeLimit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|int
name|sizeLimit
init|=
name|robotCommentSizeLimit
operator|.
name|getAsInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|robotCommentBytes
init|=
name|GSON
operator|.
name|toJson
argument_list|(
name|robotCommentInput
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|int
name|robotCommentSize
init|=
name|robotCommentBytes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|robotCommentSize
operator|>
name|sizeLimit
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Size %d (bytes) of robot comment is greater than limit %d (bytes)"
argument_list|,
name|robotCommentSize
argument_list|,
name|sizeLimit
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getRobotCommentSizeLimit ()
specifier|private
name|OptionalInt
name|getRobotCommentSizeLimit
parameter_list|()
block|{
name|int
name|robotCommentSizeLimit
init|=
name|gerritConfig
operator|.
name|getInt
argument_list|(
literal|"change"
argument_list|,
literal|"robotCommentSizeLimit"
argument_list|,
name|DEFAULT_ROBOT_COMMENT_SIZE_LIMIT_IN_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|robotCommentSizeLimit
operator|<=
literal|0
condition|)
block|{
return|return
name|OptionalInt
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|OptionalInt
operator|.
name|of
argument_list|(
name|robotCommentSizeLimit
argument_list|)
return|;
block|}
DECL|method|ensureRobotIdIsSet (String robotId, String commentPath)
specifier|private
specifier|static
name|void
name|ensureRobotIdIsSet
parameter_list|(
name|String
name|robotId
parameter_list|,
name|String
name|commentPath
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|robotId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"robotId is missing for robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureRobotRunIdIsSet (String robotRunId, String commentPath)
specifier|private
specifier|static
name|void
name|ensureRobotRunIdIsSet
parameter_list|(
name|String
name|robotRunId
parameter_list|,
name|String
name|commentPath
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|robotRunId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"robotRunId is missing for robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureFixSuggestionsAreAddable ( List<FixSuggestionInfo> fixSuggestionInfos, String commentPath)
specifier|private
specifier|static
name|void
name|ensureFixSuggestionsAreAddable
parameter_list|(
name|List
argument_list|<
name|FixSuggestionInfo
argument_list|>
name|fixSuggestionInfos
parameter_list|,
name|String
name|commentPath
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|fixSuggestionInfos
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|FixSuggestionInfo
name|fixSuggestionInfo
range|:
name|fixSuggestionInfos
control|)
block|{
name|ensureDescriptionIsSet
argument_list|(
name|commentPath
argument_list|,
name|fixSuggestionInfo
operator|.
name|description
argument_list|)
expr_stmt|;
name|ensureFixReplacementsAreAddable
argument_list|(
name|commentPath
argument_list|,
name|fixSuggestionInfo
operator|.
name|replacements
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ensureDescriptionIsSet (String commentPath, String description)
specifier|private
specifier|static
name|void
name|ensureDescriptionIsSet
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A description is required for the suggested fix of the robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureFixReplacementsAreAddable ( String commentPath, List<FixReplacementInfo> fixReplacementInfos)
specifier|private
specifier|static
name|void
name|ensureFixReplacementsAreAddable
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|List
argument_list|<
name|FixReplacementInfo
argument_list|>
name|fixReplacementInfos
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|ensureReplacementsArePresent
argument_list|(
name|commentPath
argument_list|,
name|fixReplacementInfos
argument_list|)
expr_stmt|;
for|for
control|(
name|FixReplacementInfo
name|fixReplacementInfo
range|:
name|fixReplacementInfos
control|)
block|{
name|ensureReplacementPathIsSet
argument_list|(
name|commentPath
argument_list|,
name|fixReplacementInfo
operator|.
name|path
argument_list|)
expr_stmt|;
name|ensureRangeIsSet
argument_list|(
name|commentPath
argument_list|,
name|fixReplacementInfo
operator|.
name|range
argument_list|)
expr_stmt|;
name|ensureRangeIsValid
argument_list|(
name|commentPath
argument_list|,
name|fixReplacementInfo
operator|.
name|range
argument_list|)
expr_stmt|;
name|ensureReplacementStringIsSet
argument_list|(
name|commentPath
argument_list|,
name|fixReplacementInfo
operator|.
name|replacement
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FixReplacementInfo
argument_list|>
argument_list|>
name|replacementsPerFilePath
init|=
name|fixReplacementInfos
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|groupingBy
argument_list|(
name|fixReplacement
lambda|->
name|fixReplacement
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|FixReplacementInfo
argument_list|>
name|sameFileReplacements
range|:
name|replacementsPerFilePath
operator|.
name|values
argument_list|()
control|)
block|{
name|ensureRangesDoNotOverlap
argument_list|(
name|commentPath
argument_list|,
name|sameFileReplacements
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ensureReplacementsArePresent ( String commentPath, List<FixReplacementInfo> fixReplacementInfos)
specifier|private
specifier|static
name|void
name|ensureReplacementsArePresent
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|List
argument_list|<
name|FixReplacementInfo
argument_list|>
name|fixReplacementInfos
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|fixReplacementInfos
operator|==
literal|null
operator|||
name|fixReplacementInfos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"At least one replacement is "
operator|+
literal|"required for the suggested fix of the robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureReplacementPathIsSet (String commentPath, String replacementPath)
specifier|private
specifier|static
name|void
name|ensureReplacementPathIsSet
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|String
name|replacementPath
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|replacementPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A file path must be given for the replacement of the robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureRangeIsSet (String commentPath, Range range)
specifier|private
specifier|static
name|void
name|ensureRangeIsSet
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|Range
name|range
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A range must be given for the replacement of the robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureRangeIsValid (String commentPath, Range range)
specifier|private
specifier|static
name|void
name|ensureRangeIsValid
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|Range
name|range
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Range (%s:%s - %s:%s) is not valid for the comment on %s"
argument_list|,
name|range
operator|.
name|startLine
argument_list|,
name|range
operator|.
name|startCharacter
argument_list|,
name|range
operator|.
name|endLine
argument_list|,
name|range
operator|.
name|endCharacter
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureReplacementStringIsSet (String commentPath, String replacement)
specifier|private
specifier|static
name|void
name|ensureReplacementStringIsSet
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|String
name|replacement
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|replacement
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A content for replacement "
operator|+
literal|"must be indicated for the replacement of the robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureRangesDoNotOverlap ( String commentPath, List<FixReplacementInfo> fixReplacementInfos)
specifier|private
specifier|static
name|void
name|ensureRangesDoNotOverlap
parameter_list|(
name|String
name|commentPath
parameter_list|,
name|List
argument_list|<
name|FixReplacementInfo
argument_list|>
name|fixReplacementInfos
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|sortedRanges
init|=
name|fixReplacementInfos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|fixReplacementInfo
lambda|->
name|fixReplacementInfo
operator|.
name|range
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|previousEndLine
init|=
literal|0
decl_stmt|;
name|int
name|previousOffset
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Range
name|range
range|:
name|sortedRanges
control|)
block|{
if|if
condition|(
name|range
operator|.
name|startLine
operator|<
name|previousEndLine
operator|||
operator|(
name|range
operator|.
name|startLine
operator|==
name|previousEndLine
operator|&&
name|range
operator|.
name|startCharacter
operator|<
name|previousOffset
operator|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Replacements overlap for the robot comment on %s"
argument_list|,
name|commentPath
argument_list|)
argument_list|)
throw|;
block|}
name|previousEndLine
operator|=
name|range
operator|.
name|endLine
expr_stmt|;
name|previousOffset
operator|=
name|range
operator|.
name|endCharacter
expr_stmt|;
block|}
block|}
comment|/**    * Used to compare existing {@link Comment}-s with {@link CommentInput} comments by copying only    * the fields to compare.    */
annotation|@
name|AutoValue
DECL|class|CommentSetEntry
specifier|abstract
specifier|static
class|class
name|CommentSetEntry
block|{
DECL|method|create ( String filename, int patchSetId, Integer line, Side side, HashCode message, Comment.Range range)
specifier|private
specifier|static
name|CommentSetEntry
name|create
parameter_list|(
name|String
name|filename
parameter_list|,
name|int
name|patchSetId
parameter_list|,
name|Integer
name|line
parameter_list|,
name|Side
name|side
parameter_list|,
name|HashCode
name|message
parameter_list|,
name|Comment
operator|.
name|Range
name|range
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PostReview_CommentSetEntry
argument_list|(
name|filename
argument_list|,
name|patchSetId
argument_list|,
name|line
argument_list|,
name|side
argument_list|,
name|message
argument_list|,
name|range
argument_list|)
return|;
block|}
DECL|method|create (Comment comment)
specifier|public
specifier|static
name|CommentSetEntry
name|create
parameter_list|(
name|Comment
name|comment
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|comment
operator|.
name|key
operator|.
name|filename
argument_list|,
name|comment
operator|.
name|key
operator|.
name|patchSetId
argument_list|,
name|comment
operator|.
name|lineNbr
argument_list|,
name|Side
operator|.
name|fromShort
argument_list|(
name|comment
operator|.
name|side
argument_list|)
argument_list|,
name|Hashing
operator|.
name|murmur3_128
argument_list|()
operator|.
name|hashString
argument_list|(
name|comment
operator|.
name|message
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|comment
operator|.
name|range
argument_list|)
return|;
block|}
DECL|method|filename ()
specifier|abstract
name|String
name|filename
parameter_list|()
function_decl|;
DECL|method|patchSetId ()
specifier|abstract
name|int
name|patchSetId
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|line ()
specifier|abstract
name|Integer
name|line
parameter_list|()
function_decl|;
DECL|method|side ()
specifier|abstract
name|Side
name|side
parameter_list|()
function_decl|;
DECL|method|message ()
specifier|abstract
name|HashCode
name|message
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|range ()
specifier|abstract
name|Comment
operator|.
name|Range
name|range
parameter_list|()
function_decl|;
block|}
DECL|class|Op
specifier|private
class|class
name|Op
implements|implements
name|BatchUpdateOp
block|{
DECL|field|projectState
specifier|private
specifier|final
name|ProjectState
name|projectState
decl_stmt|;
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ReviewInput
name|in
decl_stmt|;
DECL|field|user
specifier|private
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|notes
specifier|private
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|ps
specifier|private
name|PatchSet
name|ps
decl_stmt|;
DECL|field|message
specifier|private
name|ChangeMessage
name|message
decl_stmt|;
DECL|field|comments
specifier|private
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|labelDelta
specifier|private
name|List
argument_list|<
name|LabelVote
argument_list|>
name|labelDelta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|approvals
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|oldApprovals
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|oldApprovals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Op (ProjectState projectState, PatchSet.Id psId, ReviewInput in)
specifier|private
name|Op
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ReviewInput
name|in
parameter_list|)
block|{
name|this
operator|.
name|projectState
operator|=
name|projectState
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|UnprocessableEntityException
throws|,
name|IOException
throws|,
name|PatchListNotAvailableException
throws|,
name|CommentsRejectedException
block|{
name|user
operator|=
name|ctx
operator|.
name|getIdentifiedUser
argument_list|()
expr_stmt|;
name|notes
operator|=
name|ctx
operator|.
name|getNotes
argument_list|()
expr_stmt|;
name|ps
operator|=
name|psUtil
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|)
expr_stmt|;
name|boolean
name|dirty
init|=
name|insertComments
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|dirty
operator||=
name|insertRobotComments
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|updateLabels
argument_list|(
name|projectState
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|insertMessage
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|dirty
return|;
block|}
annotation|@
name|Override
DECL|method|postUpdate (Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|NotifyResolver
operator|.
name|Result
name|notify
init|=
name|ctx
operator|.
name|getNotify
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notify
operator|.
name|shouldNotify
argument_list|()
condition|)
block|{
name|email
operator|.
name|create
argument_list|(
name|notify
argument_list|,
name|notes
argument_list|,
name|ps
argument_list|,
name|user
argument_list|,
name|message
argument_list|,
name|comments
argument_list|,
name|in
operator|.
name|message
argument_list|,
name|labelDelta
argument_list|)
operator|.
name|sendAsync
argument_list|()
expr_stmt|;
block|}
name|commentAdded
operator|.
name|fire
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|,
name|ps
argument_list|,
name|user
operator|.
name|state
argument_list|()
argument_list|,
name|message
operator|.
name|getMessage
argument_list|()
argument_list|,
name|approvals
argument_list|,
name|oldApprovals
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertComments (ChangeContext ctx)
specifier|private
name|boolean
name|insertComments
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|UnprocessableEntityException
throws|,
name|PatchListNotAvailableException
throws|,
name|CommentsRejectedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|inputComments
init|=
name|in
operator|.
name|comments
decl_stmt|;
if|if
condition|(
name|inputComments
operator|==
literal|null
condition|)
block|{
name|inputComments
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
comment|// HashMap instead of Collections.emptyMap() avoids warning about remove() on immutable
comment|// object.
name|Map
argument_list|<
name|String
argument_list|,
name|Comment
argument_list|>
name|drafts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If there are inputComments we need the deduplication loop below, so we have to read (and
comment|// publish) drafts here.
if|if
condition|(
operator|!
name|inputComments
operator|.
name|isEmpty
argument_list|()
operator|||
name|in
operator|.
name|drafts
operator|!=
name|DraftHandling
operator|.
name|KEEP
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|drafts
operator|==
name|DraftHandling
operator|.
name|PUBLISH_ALL_REVISIONS
condition|)
block|{
name|drafts
operator|=
name|changeDrafts
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|drafts
operator|=
name|patchSetDrafts
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This will be populated with Comment-s created from inputComments.
name|List
argument_list|<
name|Comment
argument_list|>
name|toPublish
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CommentSetEntry
argument_list|>
name|existingComments
init|=
name|in
operator|.
name|omitDuplicateComments
condition|?
name|readExistingComments
argument_list|(
name|ctx
argument_list|)
else|:
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
comment|// Deduplication:
comment|// - Ignore drafts with the same ID as an inputComment here. These are deleted later.
comment|// - Swallow comments that already exist.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInput
argument_list|>
argument_list|>
name|entry
range|:
name|inputComments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|CommentInput
name|inputComment
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Comment
name|comment
init|=
name|drafts
operator|.
name|remove
argument_list|(
name|Url
operator|.
name|decode
argument_list|(
name|inputComment
operator|.
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|comment
operator|==
literal|null
condition|)
block|{
name|String
name|parent
init|=
name|Url
operator|.
name|decode
argument_list|(
name|inputComment
operator|.
name|inReplyTo
argument_list|)
decl_stmt|;
name|comment
operator|=
name|commentsUtil
operator|.
name|newComment
argument_list|(
name|ctx
argument_list|,
name|path
argument_list|,
name|psId
argument_list|,
name|inputComment
operator|.
name|side
argument_list|()
argument_list|,
name|inputComment
operator|.
name|message
argument_list|,
name|inputComment
operator|.
name|unresolved
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In ChangeUpdate#putComment() the draft with the same ID will be deleted.
name|comment
operator|.
name|writtenOn
operator|=
name|ctx
operator|.
name|getWhen
argument_list|()
expr_stmt|;
name|comment
operator|.
name|side
operator|=
name|inputComment
operator|.
name|side
argument_list|()
expr_stmt|;
name|comment
operator|.
name|message
operator|=
name|inputComment
operator|.
name|message
expr_stmt|;
block|}
name|setCommentCommitId
argument_list|(
name|comment
argument_list|,
name|patchListCache
argument_list|,
name|ctx
operator|.
name|getChange
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|comment
operator|.
name|setLineNbrAndRange
argument_list|(
name|inputComment
operator|.
name|line
argument_list|,
name|inputComment
operator|.
name|range
argument_list|)
expr_stmt|;
name|comment
operator|.
name|tag
operator|=
name|in
operator|.
name|tag
expr_stmt|;
if|if
condition|(
name|existingComments
operator|.
name|contains
argument_list|(
name|CommentSetEntry
operator|.
name|create
argument_list|(
name|comment
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|toPublish
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|in
operator|.
name|drafts
condition|)
block|{
case|case
name|PUBLISH
case|:
case|case
name|PUBLISH_ALL_REVISIONS
case|:
name|validateComments
argument_list|(
name|Streams
operator|.
name|concat
argument_list|(
name|drafts
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|toPublish
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|publishCommentUtil
operator|.
name|publish
argument_list|(
name|ctx
argument_list|,
name|psId
argument_list|,
name|drafts
operator|.
name|values
argument_list|()
argument_list|,
name|in
operator|.
name|tag
argument_list|)
expr_stmt|;
name|comments
operator|.
name|addAll
argument_list|(
name|drafts
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEEP
case|:
default|default:
name|validateComments
argument_list|(
name|toPublish
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|ChangeUpdate
name|changeUpdate
init|=
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
decl_stmt|;
name|commentsUtil
operator|.
name|putComments
argument_list|(
name|changeUpdate
argument_list|,
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|toPublish
argument_list|)
expr_stmt|;
name|comments
operator|.
name|addAll
argument_list|(
name|toPublish
argument_list|)
expr_stmt|;
return|return
operator|!
name|toPublish
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|validateComments (Stream<Comment> comments)
specifier|private
name|void
name|validateComments
parameter_list|(
name|Stream
argument_list|<
name|Comment
argument_list|>
name|comments
parameter_list|)
throws|throws
name|CommentsRejectedException
block|{
name|ImmutableList
argument_list|<
name|CommentForValidation
argument_list|>
name|draftsForValidation
init|=
name|comments
operator|.
name|map
argument_list|(
name|comment
lambda|->
name|CommentForValidation
operator|.
name|create
argument_list|(
name|comment
operator|.
name|lineNbr
operator|>
literal|0
condition|?
name|CommentForValidation
operator|.
name|CommentType
operator|.
name|INLINE_COMMENT
else|:
name|CommentType
operator|.
name|FILE_COMMENT
argument_list|,
name|comment
operator|.
name|message
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommentValidationFailure
argument_list|>
name|draftValidationFailures
init|=
name|PublishCommentUtil
operator|.
name|findInvalidComments
argument_list|(
name|commentValidators
argument_list|,
name|draftsForValidation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|draftValidationFailures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommentsRejectedException
argument_list|(
name|draftValidationFailures
argument_list|)
throw|;
block|}
block|}
DECL|method|insertRobotComments (ChangeContext ctx)
specifier|private
name|boolean
name|insertRobotComments
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|PatchListNotAvailableException
block|{
if|if
condition|(
name|in
operator|.
name|robotComments
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|RobotComment
argument_list|>
name|newRobotComments
init|=
name|getNewRobotComments
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|commentsUtil
operator|.
name|putRobotComments
argument_list|(
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
argument_list|,
name|newRobotComments
argument_list|)
expr_stmt|;
name|comments
operator|.
name|addAll
argument_list|(
name|newRobotComments
argument_list|)
expr_stmt|;
return|return
operator|!
name|newRobotComments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getNewRobotComments (ChangeContext ctx)
specifier|private
name|List
argument_list|<
name|RobotComment
argument_list|>
name|getNewRobotComments
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|PatchListNotAvailableException
block|{
name|List
argument_list|<
name|RobotComment
argument_list|>
name|toAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|robotComments
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|CommentSetEntry
argument_list|>
name|existingIds
init|=
name|in
operator|.
name|omitDuplicateComments
condition|?
name|readExistingRobotComments
argument_list|(
name|ctx
argument_list|)
else|:
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RobotCommentInput
argument_list|>
argument_list|>
name|ent
range|:
name|in
operator|.
name|robotComments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|RobotCommentInput
name|c
range|:
name|ent
operator|.
name|getValue
argument_list|()
control|)
block|{
name|RobotComment
name|e
init|=
name|createRobotCommentFromInput
argument_list|(
name|ctx
argument_list|,
name|path
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingIds
operator|.
name|contains
argument_list|(
name|CommentSetEntry
operator|.
name|create
argument_list|(
name|e
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|toAdd
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toAdd
return|;
block|}
DECL|method|createRobotCommentFromInput ( ChangeContext ctx, String path, RobotCommentInput robotCommentInput)
specifier|private
name|RobotComment
name|createRobotCommentFromInput
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|String
name|path
parameter_list|,
name|RobotCommentInput
name|robotCommentInput
parameter_list|)
throws|throws
name|PatchListNotAvailableException
block|{
name|RobotComment
name|robotComment
init|=
name|commentsUtil
operator|.
name|newRobotComment
argument_list|(
name|ctx
argument_list|,
name|path
argument_list|,
name|psId
argument_list|,
name|robotCommentInput
operator|.
name|side
argument_list|()
argument_list|,
name|robotCommentInput
operator|.
name|message
argument_list|,
name|robotCommentInput
operator|.
name|robotId
argument_list|,
name|robotCommentInput
operator|.
name|robotRunId
argument_list|)
decl_stmt|;
name|robotComment
operator|.
name|parentUuid
operator|=
name|Url
operator|.
name|decode
argument_list|(
name|robotCommentInput
operator|.
name|inReplyTo
argument_list|)
expr_stmt|;
name|robotComment
operator|.
name|url
operator|=
name|robotCommentInput
operator|.
name|url
expr_stmt|;
name|robotComment
operator|.
name|properties
operator|=
name|robotCommentInput
operator|.
name|properties
expr_stmt|;
name|robotComment
operator|.
name|setLineNbrAndRange
argument_list|(
name|robotCommentInput
operator|.
name|line
argument_list|,
name|robotCommentInput
operator|.
name|range
argument_list|)
expr_stmt|;
name|robotComment
operator|.
name|tag
operator|=
name|in
operator|.
name|tag
expr_stmt|;
name|setCommentCommitId
argument_list|(
name|robotComment
argument_list|,
name|patchListCache
argument_list|,
name|ctx
operator|.
name|getChange
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|robotComment
operator|.
name|fixSuggestions
operator|=
name|createFixSuggestionsFromInput
argument_list|(
name|robotCommentInput
operator|.
name|fixSuggestions
argument_list|)
expr_stmt|;
return|return
name|robotComment
return|;
block|}
DECL|method|createFixSuggestionsFromInput ( List<FixSuggestionInfo> fixSuggestionInfos)
specifier|private
name|List
argument_list|<
name|FixSuggestion
argument_list|>
name|createFixSuggestionsFromInput
parameter_list|(
name|List
argument_list|<
name|FixSuggestionInfo
argument_list|>
name|fixSuggestionInfos
parameter_list|)
block|{
if|if
condition|(
name|fixSuggestionInfos
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|FixSuggestion
argument_list|>
name|fixSuggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fixSuggestionInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FixSuggestionInfo
name|fixSuggestionInfo
range|:
name|fixSuggestionInfos
control|)
block|{
name|fixSuggestions
operator|.
name|add
argument_list|(
name|createFixSuggestionFromInput
argument_list|(
name|fixSuggestionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fixSuggestions
return|;
block|}
DECL|method|createFixSuggestionFromInput (FixSuggestionInfo fixSuggestionInfo)
specifier|private
name|FixSuggestion
name|createFixSuggestionFromInput
parameter_list|(
name|FixSuggestionInfo
name|fixSuggestionInfo
parameter_list|)
block|{
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
init|=
name|toFixReplacements
argument_list|(
name|fixSuggestionInfo
operator|.
name|replacements
argument_list|)
decl_stmt|;
name|String
name|fixId
init|=
name|ChangeUtil
operator|.
name|messageUuid
argument_list|()
decl_stmt|;
return|return
operator|new
name|FixSuggestion
argument_list|(
name|fixId
argument_list|,
name|fixSuggestionInfo
operator|.
name|description
argument_list|,
name|fixReplacements
argument_list|)
return|;
block|}
DECL|method|toFixReplacements (List<FixReplacementInfo> fixReplacementInfos)
specifier|private
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|toFixReplacements
parameter_list|(
name|List
argument_list|<
name|FixReplacementInfo
argument_list|>
name|fixReplacementInfos
parameter_list|)
block|{
return|return
name|fixReplacementInfos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|toFixReplacement
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toFixReplacement (FixReplacementInfo fixReplacementInfo)
specifier|private
name|FixReplacement
name|toFixReplacement
parameter_list|(
name|FixReplacementInfo
name|fixReplacementInfo
parameter_list|)
block|{
name|Comment
operator|.
name|Range
name|range
init|=
operator|new
name|Comment
operator|.
name|Range
argument_list|(
name|fixReplacementInfo
operator|.
name|range
argument_list|)
decl_stmt|;
return|return
operator|new
name|FixReplacement
argument_list|(
name|fixReplacementInfo
operator|.
name|path
argument_list|,
name|range
argument_list|,
name|fixReplacementInfo
operator|.
name|replacement
argument_list|)
return|;
block|}
DECL|method|readExistingComments (ChangeContext ctx)
specifier|private
name|Set
argument_list|<
name|CommentSetEntry
argument_list|>
name|readExistingComments
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
return|return
name|commentsUtil
operator|.
name|publishedByChange
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CommentSetEntry
operator|::
name|create
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readExistingRobotComments (ChangeContext ctx)
specifier|private
name|Set
argument_list|<
name|CommentSetEntry
argument_list|>
name|readExistingRobotComments
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
return|return
name|commentsUtil
operator|.
name|robotCommentsByChange
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CommentSetEntry
operator|::
name|create
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|changeDrafts (ChangeContext ctx)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Comment
argument_list|>
name|changeDrafts
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
return|return
name|commentsUtil
operator|.
name|draftByChangeAuthor
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|c
lambda|->
name|c
operator|.
name|key
operator|.
name|uuid
argument_list|,
name|c
lambda|->
block|{
name|c
operator|.
name|tag
operator|=
name|in
operator|.
name|tag
argument_list|;                     return
name|c
argument_list|;
block|}
block|)
block|)
class|;
end_class

begin_function
unit|}      private
DECL|method|patchSetDrafts (ChangeContext ctx)
name|Map
argument_list|<
name|String
argument_list|,
name|Comment
argument_list|>
name|patchSetDrafts
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
return|return
name|commentsUtil
operator|.
name|draftByPatchSetAuthor
argument_list|(
name|psId
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|c
lambda|->
name|c
operator|.
name|key
operator|.
name|uuid
argument_list|,
name|c
lambda|->
name|c
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|approvalsByKey (Collection<PatchSetApproval> patchsetApprovals)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvalsByKey
parameter_list|(
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|patchsetApprovals
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|patchsetApprovals
control|)
block|{
name|labels
operator|.
name|put
argument_list|(
name|psa
operator|.
name|label
argument_list|()
argument_list|,
name|psa
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|labels
return|;
block|}
end_function

begin_function
DECL|method|getAllApprovals ( LabelTypes labelTypes, Map<String, Short> current, Map<String, Short> input)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|getAllApprovals
parameter_list|(
name|LabelTypes
name|labelTypes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|current
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|input
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|allApprovals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LabelType
name|lt
range|:
name|labelTypes
operator|.
name|getLabelTypes
argument_list|()
control|)
block|{
name|allApprovals
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// set approvals to existing votes
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|allApprovals
operator|.
name|putAll
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
comment|// set approvals to new votes
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|allApprovals
operator|.
name|putAll
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|allApprovals
return|;
block|}
end_function

begin_function
DECL|method|getPreviousApprovals ( Map<String, Short> allApprovals, Map<String, Short> current)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|getPreviousApprovals
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|allApprovals
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|current
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|previous
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approval
range|:
name|allApprovals
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// assume vote is 0 if there is no vote
if|if
condition|(
operator|!
name|current
operator|.
name|containsKey
argument_list|(
name|approval
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|previous
operator|.
name|put
argument_list|(
name|approval
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|.
name|put
argument_list|(
name|approval
operator|.
name|getKey
argument_list|()
argument_list|,
name|current
operator|.
name|get
argument_list|(
name|approval
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|previous
return|;
block|}
end_function

begin_function
DECL|method|isReviewer (ChangeContext ctx)
specifier|private
name|boolean
name|isReviewer
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|ReviewerSet
name|reviewers
init|=
name|cd
operator|.
name|reviewers
argument_list|()
decl_stmt|;
return|return
name|reviewers
operator|.
name|byState
argument_list|(
name|REVIEWER
argument_list|)
operator|.
name|contains
argument_list|(
name|ctx
operator|.
name|getAccountId
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|updateLabels (ProjectState projectState, ChangeContext ctx)
specifier|private
name|boolean
name|updateLabels
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|inLabels
init|=
name|firstNonNull
argument_list|(
name|in
operator|.
name|labels
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
comment|// If no labels were modified and change is closed, abort early.
comment|// This avoids trying to record a modified label caused by a user
comment|// losing access to a label after the change was submitted.
if|if
condition|(
name|inLabels
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|ups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
name|scanLabels
argument_list|(
name|projectState
argument_list|,
name|ctx
argument_list|,
name|del
argument_list|)
decl_stmt|;
name|LabelTypes
name|labelTypes
init|=
name|projectState
operator|.
name|getLabelTypes
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|allApprovals
init|=
name|getAllApprovals
argument_list|(
name|labelTypes
argument_list|,
name|approvalsByKey
argument_list|(
name|current
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|inLabels
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|previous
init|=
name|getPreviousApprovals
argument_list|(
name|allApprovals
argument_list|,
name|approvalsByKey
argument_list|(
name|current
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|update
init|=
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|ent
range|:
name|allApprovals
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LabelType
name|lt
init|=
name|requireNonNull
argument_list|(
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|PatchSetApproval
name|c
init|=
name|current
operator|.
name|remove
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|normName
init|=
name|lt
operator|.
name|getName
argument_list|()
decl_stmt|;
name|approvals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|ent
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// User requested delete of this label.
name|oldApprovals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|value
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|addLabelDelta
argument_list|(
name|normName
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|previous
operator|.
name|get
argument_list|(
name|normName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|del
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|normName
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|value
argument_list|()
operator|!=
name|ent
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|PatchSetApproval
operator|.
name|Builder
name|b
init|=
name|c
operator|.
name|toBuilder
argument_list|()
operator|.
name|value
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|granted
argument_list|(
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|tag
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|in
operator|.
name|tag
argument_list|)
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|updateRealAccountId
argument_list|(
name|b
operator|::
name|realAccountId
argument_list|)
expr_stmt|;
name|c
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addLabelDelta
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|previous
operator|.
name|get
argument_list|(
name|normName
argument_list|)
argument_list|)
expr_stmt|;
name|approvals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|normName
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|value
argument_list|()
operator|==
name|ent
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|approvals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|ApprovalsUtil
operator|.
name|newApproval
argument_list|(
name|psId
argument_list|,
name|user
argument_list|,
name|lt
operator|.
name|getLabelId
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|tag
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|in
operator|.
name|tag
argument_list|)
argument_list|)
operator|.
name|granted
argument_list|(
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addLabelDelta
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|oldApprovals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|previous
operator|.
name|get
argument_list|(
name|normName
argument_list|)
argument_list|)
expr_stmt|;
name|approvals
operator|.
name|put
argument_list|(
name|normName
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|putReviewer
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|normName
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|validatePostSubmitLabels
argument_list|(
name|ctx
argument_list|,
name|labelTypes
argument_list|,
name|previous
argument_list|,
name|ups
argument_list|,
name|del
argument_list|)
expr_stmt|;
comment|// Return early if user is not a reviewer and not posting any labels.
comment|// This allows us to preserve their CC status.
if|if
condition|(
name|current
operator|.
name|isEmpty
argument_list|()
operator|&&
name|del
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ups
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isReviewer
argument_list|(
name|ctx
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|forceCallerAsReviewer
argument_list|(
name|projectState
argument_list|,
name|ctx
argument_list|,
name|current
argument_list|,
name|ups
argument_list|,
name|del
argument_list|)
expr_stmt|;
return|return
operator|!
name|del
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|ups
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|validatePostSubmitLabels ( ChangeContext ctx, LabelTypes labelTypes, Map<String, Short> previous, List<PatchSetApproval> ups, List<PatchSetApproval> del)
specifier|private
name|void
name|validatePostSubmitLabels
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|previous
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|ups
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|isNew
argument_list|()
condition|)
block|{
return|return;
comment|// Not closed, nothing to validate.
block|}
elseif|else
if|if
condition|(
name|del
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
comment|// No new votes.
block|}
elseif|else
if|if
condition|(
operator|!
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|isMerged
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is closed"
argument_list|)
throw|;
block|}
comment|// Disallow reducing votes on any labels post-submit. This assumes the
comment|// high values were broadly necessary to submit, so reducing them would
comment|// make it possible to take a merged change and make it no longer
comment|// submittable.
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|reduced
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ups
operator|.
name|size
argument_list|()
operator|+
name|del
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|disallowed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|labelTypes
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|del
control|)
block|{
name|LabelType
name|lt
init|=
name|requireNonNull
argument_list|(
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|psa
operator|.
name|label
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|normName
init|=
name|lt
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lt
operator|.
name|allowPostSubmit
argument_list|()
condition|)
block|{
name|disallowed
operator|.
name|add
argument_list|(
name|normName
argument_list|)
expr_stmt|;
block|}
name|Short
name|prev
init|=
name|previous
operator|.
name|get
argument_list|(
name|normName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prev
operator|!=
literal|0
condition|)
block|{
name|reduced
operator|.
name|add
argument_list|(
name|psa
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|ups
control|)
block|{
name|LabelType
name|lt
init|=
name|requireNonNull
argument_list|(
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|psa
operator|.
name|label
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|normName
init|=
name|lt
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lt
operator|.
name|allowPostSubmit
argument_list|()
condition|)
block|{
name|disallowed
operator|.
name|add
argument_list|(
name|normName
argument_list|)
expr_stmt|;
block|}
name|Short
name|prev
init|=
name|previous
operator|.
name|get
argument_list|(
name|normName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|checkState
argument_list|(
name|prev
operator|!=
name|psa
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should be filtered out above.
if|if
condition|(
name|prev
operator|>
name|psa
operator|.
name|value
argument_list|()
condition|)
block|{
name|reduced
operator|.
name|add
argument_list|(
name|psa
argument_list|)
expr_stmt|;
block|}
comment|// No need to set postSubmit bit, which is set automatically when parsing from NoteDb.
block|}
if|if
condition|(
operator|!
name|disallowed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Voting on labels disallowed after submit: "
operator|+
name|disallowed
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|reduced
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Cannot reduce vote on labels for closed change: "
operator|+
name|reduced
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|PatchSetApproval
operator|::
name|label
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|forceCallerAsReviewer ( ProjectState projectState, ChangeContext ctx, Map<String, PatchSetApproval> current, List<PatchSetApproval> ups, List<PatchSetApproval> del)
specifier|private
name|void
name|forceCallerAsReviewer
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|ChangeContext
name|ctx
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|ups
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
parameter_list|)
block|{
if|if
condition|(
name|current
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO Find another way to link reviewers to changes.
if|if
condition|(
name|del
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If no existing label is being set to 0, hack in the caller
comment|// as a reviewer by picking the first server-wide LabelType.
name|List
argument_list|<
name|LabelType
argument_list|>
name|labelTypes
init|=
name|projectState
operator|.
name|getLabelTypes
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
operator|.
name|getLabelTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|labelTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"no label type found for project %s, change %s"
argument_list|,
name|projectState
operator|.
name|getName
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|LabelId
name|labelId
init|=
name|labelTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabelId
argument_list|()
decl_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|ApprovalsUtil
operator|.
name|newApproval
argument_list|(
name|psId
argument_list|,
name|user
argument_list|,
name|labelId
argument_list|,
literal|0
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|tag
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|in
operator|.
name|tag
argument_list|)
argument_list|)
operator|.
name|granted
argument_list|(
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pick a random label that is about to be deleted and keep it.
name|Iterator
argument_list|<
name|PatchSetApproval
argument_list|>
name|i
init|=
name|del
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ups
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|granted
argument_list|(
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|ctx
operator|.
name|getUpdate
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
operator|.
name|putReviewer
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|scanLabels ( ProjectState projectState, ChangeContext ctx, List<PatchSetApproval> del)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|scanLabels
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|ChangeContext
name|ctx
parameter_list|,
name|List
argument_list|<
name|PatchSetApproval
argument_list|>
name|del
parameter_list|)
throws|throws
name|IOException
block|{
name|LabelTypes
name|labelTypes
init|=
name|projectState
operator|.
name|getLabelTypes
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|current
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|a
range|:
name|approvalsUtil
operator|.
name|byPatchSetUser
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRepoView
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isLegacySubmit
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|LabelType
name|lt
init|=
name|labelTypes
operator|.
name|byLabel
argument_list|(
name|a
operator|.
name|labelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lt
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
name|lt
operator|.
name|getName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|del
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|current
return|;
block|}
end_function

begin_function
DECL|method|insertMessage (ChangeContext ctx)
specifier|private
name|boolean
name|insertMessage
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|CommentsRejectedException
block|{
name|String
name|msg
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|in
operator|.
name|message
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LabelVote
name|d
range|:
name|labelDelta
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|d
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comments
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n\n(1 comment)"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comments
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n(%d comments)"
argument_list|,
name|comments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|msg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|CommentValidationFailure
argument_list|>
name|messageValidationFailure
init|=
name|PublishCommentUtil
operator|.
name|findInvalidComments
argument_list|(
name|commentValidators
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|CommentForValidation
operator|.
name|create
argument_list|(
name|CommentForValidation
operator|.
name|CommentType
operator|.
name|CHANGE_MESSAGE
argument_list|,
name|msg
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|messageValidationFailure
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommentsRejectedException
argument_list|(
name|messageValidationFailure
argument_list|)
throw|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|ready
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n\n"
operator|+
name|START_REVIEW_MESSAGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|message
operator|=
name|ChangeMessagesUtil
operator|.
name|newMessage
argument_list|(
name|psId
argument_list|,
name|user
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|,
literal|"Patch Set "
operator|+
name|psId
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|buf
argument_list|,
name|in
operator|.
name|tag
argument_list|)
expr_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
DECL|method|addLabelDelta (String name, short value)
specifier|private
name|void
name|addLabelDelta
parameter_list|(
name|String
name|name
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|labelDelta
operator|.
name|add
argument_list|(
name|LabelVote
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|} }
end_unit

