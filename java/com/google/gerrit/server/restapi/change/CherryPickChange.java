begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|CherryPickInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MergeConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|NotifyUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PatchSetInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
operator|.
name|CodeReviewRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|IntegrationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeIdenticalTreeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|InvalidObjectIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|ChangeIdUtil
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|CherryPickChange
specifier|public
class|class
name|CherryPickChange
block|{
annotation|@
name|AutoValue
DECL|class|Result
specifier|abstract
specifier|static
class|class
name|Result
block|{
DECL|method|create (Change.Id changeId, ImmutableSet<String> filesWithGitConflicts)
specifier|static
name|Result
name|create
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|filesWithGitConflicts
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_CherryPickChange_Result
argument_list|(
name|changeId
argument_list|,
name|filesWithGitConflicts
argument_list|)
return|;
block|}
DECL|method|changeId ()
specifier|abstract
name|Change
operator|.
name|Id
name|changeId
parameter_list|()
function_decl|;
DECL|method|filesWithGitConflicts ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|filesWithGitConflicts
parameter_list|()
function_decl|;
block|}
DECL|field|seq
specifier|private
specifier|final
name|Sequences
name|seq
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|gitManager
specifier|private
specifier|final
name|GitRepositoryManager
name|gitManager
decl_stmt|;
DECL|field|serverTimeZone
specifier|private
specifier|final
name|TimeZone
name|serverTimeZone
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|user
decl_stmt|;
DECL|field|changeInserterFactory
specifier|private
specifier|final
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
decl_stmt|;
DECL|field|patchSetInserterFactory
specifier|private
specifier|final
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
decl_stmt|;
DECL|field|mergeUtilFactory
specifier|private
specifier|final
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
decl_stmt|;
DECL|field|changeNotesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|approvalsUtil
specifier|private
specifier|final
name|ApprovalsUtil
name|approvalsUtil
decl_stmt|;
DECL|field|notifyUtil
specifier|private
specifier|final
name|NotifyUtil
name|notifyUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|CherryPickChange ( Sequences seq, Provider<InternalChangeQuery> queryProvider, @GerritPersonIdent PersonIdent myIdent, GitRepositoryManager gitManager, Provider<IdentifiedUser> user, ChangeInserter.Factory changeInserterFactory, PatchSetInserter.Factory patchSetInserterFactory, MergeUtil.Factory mergeUtilFactory, ChangeNotes.Factory changeNotesFactory, ProjectCache projectCache, ApprovalsUtil approvalsUtil, NotifyUtil notifyUtil)
name|CherryPickChange
parameter_list|(
name|Sequences
name|seq
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|myIdent
parameter_list|,
name|GitRepositoryManager
name|gitManager
parameter_list|,
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|user
parameter_list|,
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
parameter_list|,
name|PatchSetInserter
operator|.
name|Factory
name|patchSetInserterFactory
parameter_list|,
name|MergeUtil
operator|.
name|Factory
name|mergeUtilFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|ApprovalsUtil
name|approvalsUtil
parameter_list|,
name|NotifyUtil
name|notifyUtil
parameter_list|)
block|{
name|this
operator|.
name|seq
operator|=
name|seq
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|gitManager
operator|=
name|gitManager
expr_stmt|;
name|this
operator|.
name|serverTimeZone
operator|=
name|myIdent
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|changeInserterFactory
operator|=
name|changeInserterFactory
expr_stmt|;
name|this
operator|.
name|patchSetInserterFactory
operator|=
name|patchSetInserterFactory
expr_stmt|;
name|this
operator|.
name|mergeUtilFactory
operator|=
name|mergeUtilFactory
expr_stmt|;
name|this
operator|.
name|changeNotesFactory
operator|=
name|changeNotesFactory
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|approvalsUtil
operator|=
name|approvalsUtil
expr_stmt|;
name|this
operator|.
name|notifyUtil
operator|=
name|notifyUtil
expr_stmt|;
block|}
DECL|method|cherryPick ( BatchUpdate.Factory batchUpdateFactory, Change change, PatchSet patch, CherryPickInput input, Branch.NameKey dest)
specifier|public
name|Result
name|cherryPick
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
parameter_list|,
name|Change
name|change
parameter_list|,
name|PatchSet
name|patch
parameter_list|,
name|CherryPickInput
name|input
parameter_list|,
name|Branch
operator|.
name|NameKey
name|dest
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
throws|,
name|IntegrationException
throws|,
name|UpdateException
throws|,
name|RestApiException
throws|,
name|ConfigInvalidException
throws|,
name|NoSuchProjectException
block|{
return|return
name|cherryPick
argument_list|(
name|batchUpdateFactory
argument_list|,
name|change
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|fromString
argument_list|(
name|patch
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|,
name|dest
argument_list|)
return|;
block|}
DECL|method|cherryPick ( BatchUpdate.Factory batchUpdateFactory, @Nullable Change sourceChange, Project.NameKey project, ObjectId sourceCommit, CherryPickInput input, Branch.NameKey dest)
specifier|public
name|Result
name|cherryPick
parameter_list|(
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
parameter_list|,
annotation|@
name|Nullable
name|Change
name|sourceChange
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|ObjectId
name|sourceCommit
parameter_list|,
name|CherryPickInput
name|input
parameter_list|,
name|Branch
operator|.
name|NameKey
name|dest
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
throws|,
name|IntegrationException
throws|,
name|UpdateException
throws|,
name|RestApiException
throws|,
name|ConfigInvalidException
throws|,
name|NoSuchProjectException
block|{
name|IdentifiedUser
name|identifiedUser
init|=
name|user
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|git
init|=
name|gitManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
comment|// This inserter and revwalk *must* be passed to any BatchUpdates
comment|// created later on, to ensure the cherry-picked commit is flushed
comment|// before patch sets are updated.
name|ObjectInserter
name|oi
operator|=
name|git
operator|.
name|newObjectInserter
argument_list|()
init|;
name|ObjectReader
name|reader
operator|=
name|oi
operator|.
name|newReader
argument_list|()
init|;
name|CodeReviewRevWalk
name|revWalk
operator|=
name|CodeReviewCommit
operator|.
name|newRevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|Ref
name|destRef
init|=
name|git
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|dest
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|destRef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Branch %s does not exist."
argument_list|,
name|dest
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|RevCommit
name|baseCommit
init|=
name|getBaseCommit
argument_list|(
name|destRef
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|revWalk
argument_list|,
name|input
operator|.
name|base
argument_list|)
decl_stmt|;
name|CodeReviewCommit
name|commitToCherryPick
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|sourceCommit
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|parent
operator|<=
literal|0
operator|||
name|input
operator|.
name|parent
operator|>
name|commitToCherryPick
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cherry Pick: Parent %s does not exist. Please specify a parent in"
operator|+
literal|" range [1, %s]."
argument_list|,
name|input
operator|.
name|parent
argument_list|,
name|commitToCherryPick
operator|.
name|getParentCount
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|Timestamp
name|now
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|PersonIdent
name|committerIdent
init|=
name|identifiedUser
operator|.
name|newCommitterIdent
argument_list|(
name|now
argument_list|,
name|serverTimeZone
argument_list|)
decl_stmt|;
specifier|final
name|ObjectId
name|computedChangeId
init|=
name|ChangeIdUtil
operator|.
name|computeChangeId
argument_list|(
name|commitToCherryPick
operator|.
name|getTree
argument_list|()
argument_list|,
name|baseCommit
argument_list|,
name|commitToCherryPick
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|committerIdent
argument_list|,
name|input
operator|.
name|message
argument_list|)
decl_stmt|;
name|String
name|commitMessage
init|=
name|ChangeIdUtil
operator|.
name|insertId
argument_list|(
name|input
operator|.
name|message
argument_list|,
name|computedChangeId
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|'\n'
decl_stmt|;
name|CodeReviewCommit
name|cherryPickCommit
decl_stmt|;
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|dest
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|dest
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|MergeUtil
name|mergeUtil
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|allowConflicts
condition|)
block|{
comment|// allowConflicts requires to use content merge
name|mergeUtil
operator|=
name|mergeUtilFactory
operator|.
name|create
argument_list|(
name|projectState
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use content merge only if it's configured on the project
name|mergeUtil
operator|=
name|mergeUtilFactory
operator|.
name|create
argument_list|(
name|projectState
argument_list|)
expr_stmt|;
block|}
name|cherryPickCommit
operator|=
name|mergeUtil
operator|.
name|createCherryPickFromCommit
argument_list|(
name|oi
argument_list|,
name|git
operator|.
name|getConfig
argument_list|()
argument_list|,
name|baseCommit
argument_list|,
name|commitToCherryPick
argument_list|,
name|committerIdent
argument_list|,
name|commitMessage
argument_list|,
name|revWalk
argument_list|,
name|input
operator|.
name|parent
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
name|input
operator|.
name|allowConflicts
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Key
name|changeKey
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|cherryPickCommit
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|String
name|idStr
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|changeKey
operator|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changeKey
operator|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
literal|"I"
operator|+
name|computedChangeId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Branch
operator|.
name|NameKey
name|newDest
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
name|destRef
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|destChanges
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|byBranchKey
argument_list|(
name|newDest
argument_list|,
name|changeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|destChanges
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
literal|"Several changes with key "
operator|+
name|changeKey
operator|+
literal|" reside on the same branch. "
operator|+
literal|"Cannot create a new patch set."
argument_list|)
throw|;
block|}
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|identifiedUser
argument_list|,
name|now
argument_list|)
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|git
argument_list|,
name|revWalk
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
if|if
condition|(
name|destChanges
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// The change key exists on the destination branch. The cherry pick
comment|// will be added as a new patch set.
name|changeId
operator|=
name|insertPatchSet
argument_list|(
name|bu
argument_list|,
name|git
argument_list|,
name|destChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|notes
argument_list|()
argument_list|,
name|cherryPickCommit
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Change key not found on destination branch. We can create a new
comment|// change.
name|String
name|newTopic
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sourceChange
operator|!=
literal|null
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|sourceChange
operator|.
name|getTopic
argument_list|()
argument_list|)
condition|)
block|{
name|newTopic
operator|=
name|sourceChange
operator|.
name|getTopic
argument_list|()
operator|+
literal|"-"
operator|+
name|newDest
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
name|changeId
operator|=
name|createNewChange
argument_list|(
name|bu
argument_list|,
name|cherryPickCommit
argument_list|,
name|dest
operator|.
name|get
argument_list|()
argument_list|,
name|newTopic
argument_list|,
name|sourceChange
argument_list|,
name|sourceCommit
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|changeId
argument_list|,
name|cherryPickCommit
operator|.
name|getFilesWithGitConflicts
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MergeIdenticalTreeException
decl||
name|MergeConflictException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Cherry pick failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getBaseCommit (Ref destRef, String project, RevWalk revWalk, String base)
specifier|private
name|RevCommit
name|getBaseCommit
parameter_list|(
name|Ref
name|destRef
parameter_list|,
name|String
name|project
parameter_list|,
name|RevWalk
name|revWalk
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|IOException
throws|,
name|OrmException
block|{
name|RevCommit
name|destRefTip
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|destRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
comment|// The tip commit of the destination ref is the default base for the newly created change.
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|base
argument_list|)
condition|)
block|{
return|return
name|destRefTip
return|;
block|}
name|ObjectId
name|baseObjectId
decl_stmt|;
try|try
block|{
name|baseObjectId
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectIdException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Base %s doesn't represent a valid SHA-1"
argument_list|,
name|base
argument_list|)
argument_list|)
throw|;
block|}
name|RevCommit
name|baseCommit
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|baseObjectId
argument_list|)
decl_stmt|;
name|InternalChangeQuery
name|changeQuery
init|=
name|queryProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|changeQuery
operator|.
name|enforceVisibility
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changeDatas
init|=
name|changeQuery
operator|.
name|byBranchCommit
argument_list|(
name|project
argument_list|,
name|destRef
operator|.
name|getName
argument_list|()
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeDatas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|revWalk
operator|.
name|isMergedInto
argument_list|(
name|baseCommit
argument_list|,
name|destRefTip
argument_list|)
condition|)
block|{
comment|// The base commit is a merged commit with no change associated.
return|return
name|baseCommit
return|;
block|}
throw|throw
operator|new
name|UnprocessableEntityException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Commit %s does not exist on branch %s"
argument_list|,
name|base
argument_list|,
name|destRef
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|changeDatas
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Multiple changes found for commit "
operator|+
name|base
argument_list|)
throw|;
block|}
name|Change
name|change
init|=
name|changeDatas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|change
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Status
name|status
init|=
name|change
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|Status
operator|.
name|NEW
operator|||
name|status
operator|==
name|Status
operator|.
name|MERGED
condition|)
block|{
comment|// The base commit is a valid change revision.
return|return
name|baseCommit
return|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Change %s with commit %s is %s"
argument_list|,
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|base
argument_list|,
name|status
operator|.
name|asChangeStatus
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|insertPatchSet ( BatchUpdate bu, Repository git, ChangeNotes destNotes, CodeReviewCommit cherryPickCommit, CherryPickInput input)
specifier|private
name|Change
operator|.
name|Id
name|insertPatchSet
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|,
name|Repository
name|git
parameter_list|,
name|ChangeNotes
name|destNotes
parameter_list|,
name|CodeReviewCommit
name|cherryPickCommit
parameter_list|,
name|CherryPickInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|BadRequestException
throws|,
name|ConfigInvalidException
block|{
name|Change
name|destChange
init|=
name|destNotes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|ChangeUtil
operator|.
name|nextPatchSetId
argument_list|(
name|git
argument_list|,
name|destChange
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSetInserter
name|inserter
init|=
name|patchSetInserterFactory
operator|.
name|create
argument_list|(
name|destNotes
argument_list|,
name|psId
argument_list|,
name|cherryPickCommit
argument_list|)
decl_stmt|;
name|inserter
operator|.
name|setMessage
argument_list|(
literal|"Uploaded patch set "
operator|+
name|inserter
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"."
argument_list|)
operator|.
name|setNotify
argument_list|(
name|input
operator|.
name|notify
argument_list|)
operator|.
name|setAccountsToNotify
argument_list|(
name|notifyUtil
operator|.
name|resolveAccounts
argument_list|(
name|input
operator|.
name|notifyDetails
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|destChange
operator|.
name|getId
argument_list|()
argument_list|,
name|inserter
argument_list|)
expr_stmt|;
return|return
name|destChange
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|createNewChange ( BatchUpdate bu, CodeReviewCommit cherryPickCommit, String refName, String topic, @Nullable Change sourceChange, ObjectId sourceCommit, CherryPickInput input)
specifier|private
name|Change
operator|.
name|Id
name|createNewChange
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|,
name|CodeReviewCommit
name|cherryPickCommit
parameter_list|,
name|String
name|refName
parameter_list|,
name|String
name|topic
parameter_list|,
annotation|@
name|Nullable
name|Change
name|sourceChange
parameter_list|,
name|ObjectId
name|sourceCommit
parameter_list|,
name|CherryPickInput
name|input
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|BadRequestException
throws|,
name|ConfigInvalidException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|seq
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeInserter
name|ins
init|=
name|changeInserterFactory
operator|.
name|create
argument_list|(
name|changeId
argument_list|,
name|cherryPickCommit
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|sourceBranch
init|=
name|sourceChange
operator|==
literal|null
condition|?
literal|null
else|:
name|sourceChange
operator|.
name|getDest
argument_list|()
decl_stmt|;
name|ins
operator|.
name|setMessage
argument_list|(
name|messageForDestinationChange
argument_list|(
name|ins
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|sourceBranch
argument_list|,
name|sourceCommit
argument_list|,
name|cherryPickCommit
argument_list|)
argument_list|)
operator|.
name|setTopic
argument_list|(
name|topic
argument_list|)
operator|.
name|setWorkInProgress
argument_list|(
operator|(
name|sourceChange
operator|!=
literal|null
operator|&&
name|sourceChange
operator|.
name|isWorkInProgress
argument_list|()
operator|)
operator|||
operator|!
name|cherryPickCommit
operator|.
name|getFilesWithGitConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|setNotify
argument_list|(
name|input
operator|.
name|notify
argument_list|)
operator|.
name|setAccountsToNotify
argument_list|(
name|notifyUtil
operator|.
name|resolveAccounts
argument_list|(
name|input
operator|.
name|notifyDetails
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|keepReviewers
operator|&&
name|sourceChange
operator|!=
literal|null
condition|)
block|{
name|ReviewerSet
name|reviewerSet
init|=
name|approvalsUtil
operator|.
name|getReviewers
argument_list|(
name|changeNotesFactory
operator|.
name|createChecked
argument_list|(
name|sourceChange
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|reviewerSet
operator|.
name|byState
argument_list|(
name|ReviewerStateInternal
operator|.
name|REVIEWER
argument_list|)
argument_list|)
decl_stmt|;
name|reviewers
operator|.
name|add
argument_list|(
name|sourceChange
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|reviewers
operator|.
name|remove
argument_list|(
name|user
operator|.
name|get
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ccs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|reviewerSet
operator|.
name|byState
argument_list|(
name|ReviewerStateInternal
operator|.
name|CC
argument_list|)
argument_list|)
decl_stmt|;
name|ccs
operator|.
name|remove
argument_list|(
name|user
operator|.
name|get
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|ins
operator|.
name|setReviewersAndCcs
argument_list|(
name|reviewers
argument_list|,
name|ccs
argument_list|)
expr_stmt|;
block|}
name|bu
operator|.
name|insertChange
argument_list|(
name|ins
argument_list|)
expr_stmt|;
return|return
name|changeId
return|;
block|}
DECL|method|messageForDestinationChange ( PatchSet.Id patchSetId, Branch.NameKey sourceBranch, ObjectId sourceCommit, CodeReviewCommit cherryPickCommit)
specifier|private
name|String
name|messageForDestinationChange
parameter_list|(
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|,
name|Branch
operator|.
name|NameKey
name|sourceBranch
parameter_list|,
name|ObjectId
name|sourceCommit
parameter_list|,
name|CodeReviewCommit
name|cherryPickCommit
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Patch Set "
argument_list|)
operator|.
name|append
argument_list|(
name|patchSetId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceBranch
operator|!=
literal|null
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|": Cherry Picked from branch "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceBranch
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|": Cherry Picked from commit "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceCommit
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cherryPickCommit
operator|.
name|getFilesWithGitConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"\n\nThe following files contain Git conflicts:\n"
argument_list|)
expr_stmt|;
name|cherryPickCommit
operator|.
name|getFilesWithGitConflicts
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|forEach
argument_list|(
name|filePath
lambda|->
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"* "
argument_list|)
operator|.
name|append
argument_list|(
name|filePath
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

