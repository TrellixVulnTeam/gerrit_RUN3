begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffWebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ChildCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|DefaultInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RawInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionCreateView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionDeleteMissingView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestReadView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|WebLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeEditResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileContentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileInfoJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditModifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|UnchangedCommitMessageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|ChangeEdits
specifier|public
class|class
name|ChangeEdits
implements|implements
name|ChildCollection
argument_list|<
name|ChangeResource
argument_list|,
name|ChangeEditResource
argument_list|>
block|{
DECL|field|views
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|ChangeEditResource
argument_list|>
argument_list|>
name|views
decl_stmt|;
DECL|field|detail
specifier|private
specifier|final
name|Provider
argument_list|<
name|Detail
argument_list|>
name|detail
decl_stmt|;
DECL|field|editUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|editUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeEdits ( DynamicMap<RestView<ChangeEditResource>> views, Provider<Detail> detail, ChangeEditUtil editUtil)
name|ChangeEdits
parameter_list|(
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|ChangeEditResource
argument_list|>
argument_list|>
name|views
parameter_list|,
name|Provider
argument_list|<
name|Detail
argument_list|>
name|detail
parameter_list|,
name|ChangeEditUtil
name|editUtil
parameter_list|)
block|{
name|this
operator|.
name|views
operator|=
name|views
expr_stmt|;
name|this
operator|.
name|detail
operator|=
name|detail
expr_stmt|;
name|this
operator|.
name|editUtil
operator|=
name|editUtil
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|views ()
specifier|public
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|ChangeEditResource
argument_list|>
argument_list|>
name|views
parameter_list|()
block|{
return|return
name|views
return|;
block|}
annotation|@
name|Override
DECL|method|list ()
specifier|public
name|RestView
argument_list|<
name|ChangeResource
argument_list|>
name|list
parameter_list|()
block|{
return|return
name|detail
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|parse (ChangeResource rsrc, IdString id)
specifier|public
name|ChangeEditResource
name|parse
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|IdString
name|id
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|AuthException
throws|,
name|IOException
throws|,
name|OrmException
block|{
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|edit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|id
argument_list|)
throw|;
block|}
return|return
operator|new
name|ChangeEditResource
argument_list|(
name|rsrc
argument_list|,
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create handler that is activated when collection element is accessed but doesn't exist, e. g.    * PUT request with a path was called but change edit wasn't created yet. Change edit is created    * and PUT handler is called.    */
DECL|class|Create
specifier|public
specifier|static
class|class
name|Create
implements|implements
name|RestCollectionCreateView
argument_list|<
name|ChangeResource
argument_list|,
name|ChangeEditResource
argument_list|,
name|Put
operator|.
name|Input
argument_list|>
block|{
DECL|field|putEdit
specifier|private
specifier|final
name|Put
name|putEdit
decl_stmt|;
annotation|@
name|Inject
DECL|method|Create (Put putEdit)
name|Create
parameter_list|(
name|Put
name|putEdit
parameter_list|)
block|{
name|this
operator|.
name|putEdit
operator|=
name|putEdit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource resource, IdString id, Put.Input input)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|resource
parameter_list|,
name|IdString
name|id
parameter_list|,
name|Put
operator|.
name|Input
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|ResourceConflictException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|putEdit
operator|.
name|apply
argument_list|(
name|resource
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|input
operator|.
name|content
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
block|}
DECL|class|DeleteFile
specifier|public
specifier|static
class|class
name|DeleteFile
implements|implements
name|RestCollectionDeleteMissingView
argument_list|<
name|ChangeResource
argument_list|,
name|ChangeEditResource
argument_list|,
name|Input
argument_list|>
block|{
DECL|field|deleteContent
specifier|private
specifier|final
name|DeleteContent
name|deleteContent
decl_stmt|;
annotation|@
name|Inject
DECL|method|DeleteFile (DeleteContent deleteContent)
name|DeleteFile
parameter_list|(
name|DeleteContent
name|deleteContent
parameter_list|)
block|{
name|this
operator|.
name|deleteContent
operator|=
name|deleteContent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc, IdString id, Input in)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|IdString
name|id
parameter_list|,
name|Input
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthException
throws|,
name|ResourceConflictException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
return|return
name|deleteContent
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// TODO(davido): Turn the boolean options to ChangeEditOption enum,
comment|// like it's already the case for ListChangesOption/ListGroupsOption
DECL|class|Detail
specifier|public
specifier|static
class|class
name|Detail
implements|implements
name|RestReadView
argument_list|<
name|ChangeResource
argument_list|>
block|{
DECL|field|editUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|editUtil
decl_stmt|;
DECL|field|editJson
specifier|private
specifier|final
name|ChangeEditJson
name|editJson
decl_stmt|;
DECL|field|fileInfoJson
specifier|private
specifier|final
name|FileInfoJson
name|fileInfoJson
decl_stmt|;
DECL|field|revisions
specifier|private
specifier|final
name|Revisions
name|revisions
decl_stmt|;
DECL|field|base
specifier|private
name|String
name|base
decl_stmt|;
DECL|field|list
specifier|private
name|boolean
name|list
decl_stmt|;
DECL|field|downloadCommands
specifier|private
name|boolean
name|downloadCommands
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--base"
argument_list|,
name|metaVar
operator|=
literal|"revision-id"
argument_list|)
DECL|method|setBase (String base)
specifier|public
name|void
name|setBase
parameter_list|(
name|String
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--list"
argument_list|)
DECL|method|setList (boolean list)
specifier|public
name|void
name|setList
parameter_list|(
name|boolean
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--download-commands"
argument_list|)
DECL|method|setDownloadCommands (boolean downloadCommands)
specifier|public
name|void
name|setDownloadCommands
parameter_list|(
name|boolean
name|downloadCommands
parameter_list|)
block|{
name|this
operator|.
name|downloadCommands
operator|=
name|downloadCommands
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|Detail ( ChangeEditUtil editUtil, ChangeEditJson editJson, FileInfoJson fileInfoJson, Revisions revisions)
name|Detail
parameter_list|(
name|ChangeEditUtil
name|editUtil
parameter_list|,
name|ChangeEditJson
name|editJson
parameter_list|,
name|FileInfoJson
name|fileInfoJson
parameter_list|,
name|Revisions
name|revisions
parameter_list|)
block|{
name|this
operator|.
name|editJson
operator|=
name|editJson
expr_stmt|;
name|this
operator|.
name|editUtil
operator|=
name|editUtil
expr_stmt|;
name|this
operator|.
name|fileInfoJson
operator|=
name|fileInfoJson
expr_stmt|;
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc)
specifier|public
name|Response
argument_list|<
name|EditInfo
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|ResourceNotFoundException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|edit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
name|EditInfo
name|editInfo
init|=
name|editJson
operator|.
name|toEditInfo
argument_list|(
name|edit
operator|.
name|get
argument_list|()
argument_list|,
name|downloadCommands
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
condition|)
block|{
name|PatchSet
name|basePatchSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|RevisionResource
name|baseResource
init|=
name|revisions
operator|.
name|parse
argument_list|(
name|rsrc
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|base
argument_list|)
argument_list|)
decl_stmt|;
name|basePatchSet
operator|=
name|baseResource
operator|.
name|getPatchSet
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|editInfo
operator|.
name|files
operator|=
name|fileInfoJson
operator|.
name|toFileInfoMap
argument_list|(
name|rsrc
operator|.
name|getChange
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
argument_list|,
name|basePatchSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|editInfo
argument_list|)
return|;
block|}
block|}
comment|/**    * Post to edit collection resource. Two different operations are supported:    *    *<ul>    *<li>Create non existing change edit    *<li>Restore path in existing change edit    *</ul>    *    * The combination of two operations in one request is supported.    */
annotation|@
name|Singleton
DECL|class|Post
specifier|public
specifier|static
class|class
name|Post
implements|implements
name|RestCollectionModifyView
argument_list|<
name|ChangeResource
argument_list|,
name|ChangeEditResource
argument_list|,
name|Post
operator|.
name|Input
argument_list|>
block|{
DECL|class|Input
specifier|public
specifier|static
class|class
name|Input
block|{
DECL|field|restorePath
specifier|public
name|String
name|restorePath
decl_stmt|;
DECL|field|oldPath
specifier|public
name|String
name|oldPath
decl_stmt|;
DECL|field|newPath
specifier|public
name|String
name|newPath
decl_stmt|;
block|}
DECL|field|editModifier
specifier|private
specifier|final
name|ChangeEditModifier
name|editModifier
decl_stmt|;
DECL|field|repositoryManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repositoryManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|Post (ChangeEditModifier editModifier, GitRepositoryManager repositoryManager)
name|Post
parameter_list|(
name|ChangeEditModifier
name|editModifier
parameter_list|,
name|GitRepositoryManager
name|repositoryManager
parameter_list|)
block|{
name|this
operator|.
name|editModifier
operator|=
name|editModifier
expr_stmt|;
name|this
operator|.
name|repositoryManager
operator|=
name|repositoryManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource resource, Post.Input input)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|resource
parameter_list|,
name|Post
operator|.
name|Input
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|ResourceConflictException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|resource
operator|.
name|getProject
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repository
init|=
name|repositoryManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
if|if
condition|(
name|isRestoreFile
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|editModifier
operator|.
name|restoreFile
argument_list|(
name|repository
argument_list|,
name|resource
operator|.
name|getNotes
argument_list|()
argument_list|,
name|input
operator|.
name|restorePath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRenameFile
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|editModifier
operator|.
name|renameFile
argument_list|(
name|repository
argument_list|,
name|resource
operator|.
name|getNotes
argument_list|()
argument_list|,
name|input
operator|.
name|oldPath
argument_list|,
name|input
operator|.
name|newPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editModifier
operator|.
name|createEdit
argument_list|(
name|repository
argument_list|,
name|resource
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidChangeOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
DECL|method|isRestoreFile (Input input)
specifier|private
specifier|static
name|boolean
name|isRestoreFile
parameter_list|(
name|Input
name|input
parameter_list|)
block|{
return|return
name|input
operator|!=
literal|null
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|input
operator|.
name|restorePath
argument_list|)
return|;
block|}
DECL|method|isRenameFile (Input input)
specifier|private
specifier|static
name|boolean
name|isRenameFile
parameter_list|(
name|Input
name|input
parameter_list|)
block|{
return|return
name|input
operator|!=
literal|null
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|input
operator|.
name|oldPath
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|input
operator|.
name|newPath
argument_list|)
return|;
block|}
block|}
comment|/** Put handler that is activated when PUT request is called on collection element. */
annotation|@
name|Singleton
DECL|class|Put
specifier|public
specifier|static
class|class
name|Put
implements|implements
name|RestModifyView
argument_list|<
name|ChangeEditResource
argument_list|,
name|Put
operator|.
name|Input
argument_list|>
block|{
DECL|class|Input
specifier|public
specifier|static
class|class
name|Input
block|{
DECL|field|content
annotation|@
name|DefaultInput
specifier|public
name|RawInput
name|content
decl_stmt|;
block|}
DECL|field|editModifier
specifier|private
specifier|final
name|ChangeEditModifier
name|editModifier
decl_stmt|;
DECL|field|repositoryManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repositoryManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|Put (ChangeEditModifier editModifier, GitRepositoryManager repositoryManager)
name|Put
parameter_list|(
name|ChangeEditModifier
name|editModifier
parameter_list|,
name|GitRepositoryManager
name|repositoryManager
parameter_list|)
block|{
name|this
operator|.
name|editModifier
operator|=
name|editModifier
expr_stmt|;
name|this
operator|.
name|repositoryManager
operator|=
name|repositoryManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeEditResource rsrc, Input input)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeEditResource
name|rsrc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|ResourceConflictException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
return|return
name|apply
argument_list|(
name|rsrc
operator|.
name|getChangeResource
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPath
argument_list|()
argument_list|,
name|input
operator|.
name|content
argument_list|)
return|;
block|}
DECL|method|apply (ChangeResource rsrc, String path, RawInput newContent)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|String
name|path
parameter_list|,
name|RawInput
name|newContent
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|AuthException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|path
argument_list|)
operator|||
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Invalid path: "
operator|+
name|path
argument_list|)
throw|;
block|}
try|try
init|(
name|Repository
name|repository
init|=
name|repositoryManager
operator|.
name|openRepository
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|editModifier
operator|.
name|modifyFile
argument_list|(
name|repository
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|path
argument_list|,
name|newContent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidChangeOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
block|}
comment|/**    * Handler to delete a file.    *    *<p>This deletes the file from the repository completely. This is not the same as reverting or    * restoring a file to its previous contents.    */
annotation|@
name|Singleton
DECL|class|DeleteContent
specifier|public
specifier|static
class|class
name|DeleteContent
implements|implements
name|RestModifyView
argument_list|<
name|ChangeEditResource
argument_list|,
name|Input
argument_list|>
block|{
DECL|field|editModifier
specifier|private
specifier|final
name|ChangeEditModifier
name|editModifier
decl_stmt|;
DECL|field|repositoryManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repositoryManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|DeleteContent (ChangeEditModifier editModifier, GitRepositoryManager repositoryManager)
name|DeleteContent
parameter_list|(
name|ChangeEditModifier
name|editModifier
parameter_list|,
name|GitRepositoryManager
name|repositoryManager
parameter_list|)
block|{
name|this
operator|.
name|editModifier
operator|=
name|editModifier
expr_stmt|;
name|this
operator|.
name|repositoryManager
operator|=
name|repositoryManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeEditResource rsrc, Input input)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeEditResource
name|rsrc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|ResourceConflictException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
return|return
name|apply
argument_list|(
name|rsrc
operator|.
name|getChangeResource
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|apply (ChangeResource rsrc, String filePath)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|OrmException
throws|,
name|ResourceConflictException
throws|,
name|PermissionBackendException
block|{
try|try
init|(
name|Repository
name|repository
init|=
name|repositoryManager
operator|.
name|openRepository
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|editModifier
operator|.
name|deleteFile
argument_list|(
name|repository
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidChangeOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
block|}
DECL|class|Get
specifier|public
specifier|static
class|class
name|Get
implements|implements
name|RestReadView
argument_list|<
name|ChangeEditResource
argument_list|>
block|{
DECL|field|fileContentUtil
specifier|private
specifier|final
name|FileContentUtil
name|fileContentUtil
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--base"
argument_list|,
name|aliases
operator|=
block|{
literal|"-b"
block|}
argument_list|,
name|usage
operator|=
literal|"whether to load the content on the base revision instead of the change edit"
argument_list|)
DECL|field|base
specifier|private
name|boolean
name|base
decl_stmt|;
annotation|@
name|Inject
DECL|method|Get (FileContentUtil fileContentUtil, ProjectCache projectCache)
name|Get
parameter_list|(
name|FileContentUtil
name|fileContentUtil
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|fileContentUtil
operator|=
name|fileContentUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeEditResource rsrc)
specifier|public
name|Response
argument_list|<
name|BinaryResult
argument_list|>
name|apply
parameter_list|(
name|ChangeEditResource
name|rsrc
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ChangeEdit
name|edit
init|=
name|rsrc
operator|.
name|getChangeEdit
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|fileContentUtil
operator|.
name|getContent
argument_list|(
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|rsrc
operator|.
name|getChangeResource
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|,
name|base
condition|?
name|ObjectId
operator|.
name|fromString
argument_list|(
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
else|:
name|edit
operator|.
name|getEditCommit
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
decl||
name|BadRequestException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|Singleton
DECL|class|GetMeta
specifier|public
specifier|static
class|class
name|GetMeta
implements|implements
name|RestReadView
argument_list|<
name|ChangeEditResource
argument_list|>
block|{
DECL|field|webLinks
specifier|private
specifier|final
name|WebLinks
name|webLinks
decl_stmt|;
annotation|@
name|Inject
DECL|method|GetMeta (WebLinks webLinks)
name|GetMeta
parameter_list|(
name|WebLinks
name|webLinks
parameter_list|)
block|{
name|this
operator|.
name|webLinks
operator|=
name|webLinks
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeEditResource rsrc)
specifier|public
name|FileInfo
name|apply
parameter_list|(
name|ChangeEditResource
name|rsrc
parameter_list|)
block|{
name|FileInfo
name|r
init|=
operator|new
name|FileInfo
argument_list|()
decl_stmt|;
name|ChangeEdit
name|edit
init|=
name|rsrc
operator|.
name|getChangeEdit
argument_list|()
decl_stmt|;
name|Change
name|change
init|=
name|edit
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiffWebLinkInfo
argument_list|>
name|links
init|=
name|webLinks
operator|.
name|getDiffLinks
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|change
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getPatchSetId
argument_list|()
argument_list|,
name|edit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getRefName
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|edit
operator|.
name|getRefName
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|webLinks
operator|=
name|links
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|links
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|class|FileInfo
specifier|public
specifier|static
class|class
name|FileInfo
block|{
DECL|field|webLinks
specifier|public
name|List
argument_list|<
name|DiffWebLinkInfo
argument_list|>
name|webLinks
decl_stmt|;
block|}
block|}
annotation|@
name|Singleton
DECL|class|EditMessage
specifier|public
specifier|static
class|class
name|EditMessage
implements|implements
name|RestModifyView
argument_list|<
name|ChangeResource
argument_list|,
name|EditMessage
operator|.
name|Input
argument_list|>
block|{
DECL|class|Input
specifier|public
specifier|static
class|class
name|Input
block|{
DECL|field|message
annotation|@
name|DefaultInput
specifier|public
name|String
name|message
decl_stmt|;
block|}
DECL|field|editModifier
specifier|private
specifier|final
name|ChangeEditModifier
name|editModifier
decl_stmt|;
DECL|field|repositoryManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repositoryManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|EditMessage (ChangeEditModifier editModifier, GitRepositoryManager repositoryManager)
name|EditMessage
parameter_list|(
name|ChangeEditModifier
name|editModifier
parameter_list|,
name|GitRepositoryManager
name|repositoryManager
parameter_list|)
block|{
name|this
operator|.
name|editModifier
operator|=
name|editModifier
expr_stmt|;
name|this
operator|.
name|repositoryManager
operator|=
name|repositoryManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc, Input input)
specifier|public
name|Object
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|BadRequestException
throws|,
name|ResourceConflictException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|input
operator|.
name|message
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"commit message must be provided"
argument_list|)
throw|;
block|}
name|Project
operator|.
name|NameKey
name|project
init|=
name|rsrc
operator|.
name|getProject
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repository
init|=
name|repositoryManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|editModifier
operator|.
name|modifyMessage
argument_list|(
name|repository
argument_list|,
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|input
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnchangedCommitMessageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Response
operator|.
name|none
argument_list|()
return|;
block|}
block|}
DECL|class|GetMessage
specifier|public
specifier|static
class|class
name|GetMessage
implements|implements
name|RestReadView
argument_list|<
name|ChangeResource
argument_list|>
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|editUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|editUtil
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--base"
argument_list|,
name|aliases
operator|=
block|{
literal|"-b"
block|}
argument_list|,
name|usage
operator|=
literal|"whether to load the message on the base revision instead of the change edit"
argument_list|)
DECL|field|base
specifier|private
name|boolean
name|base
decl_stmt|;
annotation|@
name|Inject
DECL|method|GetMessage (GitRepositoryManager repoManager, ChangeEditUtil editUtil)
name|GetMessage
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ChangeEditUtil
name|editUtil
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|editUtil
operator|=
name|editUtil
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource rsrc)
specifier|public
name|BinaryResult
name|apply
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|ResourceNotFoundException
throws|,
name|OrmException
block|{
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|rsrc
operator|.
name|getNotes
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|edit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|base
condition|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
init|;               RevWalk rw = new RevWalk(repo)
block|)
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|msg
operator|=
name|commit
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|msg
operator|=
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
block|}
return|return
name|BinaryResult
operator|.
name|create
argument_list|(
name|msg
argument_list|)
operator|.
name|setContentType
argument_list|(
name|FileContentUtil
operator|.
name|TEXT_X_GERRIT_COMMIT_MESSAGE
argument_list|)
operator|.
name|base64
argument_list|()
return|;
block|}
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
block|}
end_class

unit|}
end_unit

