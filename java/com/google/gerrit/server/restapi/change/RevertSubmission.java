begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|conditions
operator|.
name|BooleanCondition
operator|.
name|and
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|RefPermission
operator|.
name|CREATE_CHANGE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|CherryPickInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevertInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|RevertSubmissionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|UiAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|NotifyResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|WalkSorter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|WalkSorter
operator|.
name|PatchSetData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|ChangeReverted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CommitUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|RevertedSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ContributorAgreementsChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|CherryPickChange
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
DECL|class|RevertSubmission
specifier|public
class|class
name|RevertSubmission
implements|implements
name|RestModifyView
argument_list|<
name|ChangeResource
argument_list|,
name|RevertInput
argument_list|>
implements|,
name|UiAction
argument_list|<
name|ChangeResource
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|contributorAgreements
specifier|private
specifier|final
name|ContributorAgreementsChecker
name|contributorAgreements
decl_stmt|;
DECL|field|cherryPickChange
specifier|private
specifier|final
name|CherryPickChange
name|cherryPickChange
decl_stmt|;
DECL|field|json
specifier|private
specifier|final
name|ChangeJson
operator|.
name|Factory
name|json
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|sorter
specifier|private
specifier|final
name|WalkSorter
name|sorter
decl_stmt|;
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|commitUtil
specifier|private
specifier|final
name|CommitUtil
name|commitUtil
decl_stmt|;
DECL|field|changeNotesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
DECL|field|changeResourceFactory
specifier|private
specifier|final
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
decl_stmt|;
DECL|field|changeReverted
specifier|private
specifier|final
name|ChangeReverted
name|changeReverted
decl_stmt|;
DECL|field|revertedSenderFactory
specifier|private
specifier|final
name|RevertedSender
operator|.
name|Factory
name|revertedSenderFactory
decl_stmt|;
DECL|field|seq
specifier|private
specifier|final
name|Sequences
name|seq
decl_stmt|;
DECL|field|notifyResolver
specifier|private
specifier|final
name|NotifyResolver
name|notifyResolver
decl_stmt|;
DECL|field|revert
specifier|private
specifier|final
name|Revert
name|revert
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|cherryPickInput
specifier|private
name|CherryPickInput
name|cherryPickInput
decl_stmt|;
DECL|field|results
specifier|private
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|results
decl_stmt|;
annotation|@
name|Inject
DECL|method|RevertSubmission ( Provider<InternalChangeQuery> queryProvider, Provider<CurrentUser> user, PermissionBackend permissionBackend, ProjectCache projectCache, PatchSetUtil psUtil, ContributorAgreementsChecker contributorAgreements, CherryPickChange cherryPickChange, ChangeJson.Factory json, GitRepositoryManager repoManager, WalkSorter sorter, ChangeMessagesUtil cmUtil, CommitUtil commitUtil, ChangeNotes.Factory changeNotesFactory, ChangeResource.Factory changeResourceFactory, ChangeReverted changeReverted, RevertedSender.Factory revertedSenderFactory, Sequences seq, NotifyResolver notifyResolver, Revert revert, BatchUpdate.Factory updateFactory)
name|RevertSubmission
parameter_list|(
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|ContributorAgreementsChecker
name|contributorAgreements
parameter_list|,
name|CherryPickChange
name|cherryPickChange
parameter_list|,
name|ChangeJson
operator|.
name|Factory
name|json
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|WalkSorter
name|sorter
parameter_list|,
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|CommitUtil
name|commitUtil
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
parameter_list|,
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
parameter_list|,
name|ChangeReverted
name|changeReverted
parameter_list|,
name|RevertedSender
operator|.
name|Factory
name|revertedSenderFactory
parameter_list|,
name|Sequences
name|seq
parameter_list|,
name|NotifyResolver
name|notifyResolver
parameter_list|,
name|Revert
name|revert
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|)
block|{
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|contributorAgreements
operator|=
name|contributorAgreements
expr_stmt|;
name|this
operator|.
name|cherryPickChange
operator|=
name|cherryPickChange
expr_stmt|;
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|sorter
operator|=
name|sorter
expr_stmt|;
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|commitUtil
operator|=
name|commitUtil
expr_stmt|;
name|this
operator|.
name|changeNotesFactory
operator|=
name|changeNotesFactory
expr_stmt|;
name|this
operator|.
name|changeResourceFactory
operator|=
name|changeResourceFactory
expr_stmt|;
name|this
operator|.
name|changeReverted
operator|=
name|changeReverted
expr_stmt|;
name|this
operator|.
name|revertedSenderFactory
operator|=
name|revertedSenderFactory
expr_stmt|;
name|this
operator|.
name|seq
operator|=
name|seq
expr_stmt|;
name|this
operator|.
name|notifyResolver
operator|=
name|notifyResolver
expr_stmt|;
name|this
operator|.
name|revert
operator|=
name|revert
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|cherryPickInput
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ChangeResource changeResource, RevertInput input)
specifier|public
name|Response
argument_list|<
name|RevertSubmissionInfo
argument_list|>
name|apply
parameter_list|(
name|ChangeResource
name|changeResource
parameter_list|,
name|RevertInput
name|input
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|IOException
throws|,
name|UpdateException
throws|,
name|PermissionBackendException
throws|,
name|NoSuchProjectException
throws|,
name|ConfigInvalidException
throws|,
name|StorageException
block|{
if|if
condition|(
operator|!
name|changeResource
operator|.
name|getChange
argument_list|()
operator|.
name|isMerged
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"change is %s."
argument_list|,
name|ChangeUtil
operator|.
name|status
argument_list|(
name|changeResource
operator|.
name|getChange
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|submissionId
init|=
name|changeResource
operator|.
name|getChange
argument_list|()
operator|.
name|getSubmissionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|submissionId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"This change is merged but doesn't have a submission id,"
operator|+
literal|" meaning it was not submitted through Gerrit."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changeDatas
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|bySubmissionId
argument_list|(
name|submissionId
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|changeData
range|:
name|changeDatas
control|)
block|{
name|Change
name|change
init|=
name|changeData
operator|.
name|change
argument_list|()
decl_stmt|;
comment|// Might do the permission tests multiple times, but these are necessary to ensure that the
comment|// user has permissions to revert all changes. If they lack any permission, no revert will be
comment|// done.
name|contributorAgreements
operator|.
name|check
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|changeResource
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|ref
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|CREATE_CHANGE
argument_list|)
expr_stmt|;
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|change
argument_list|(
name|changeData
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|checkStatePermitsWrite
argument_list|()
expr_stmt|;
name|requireNonNull
argument_list|(
name|psUtil
operator|.
name|get
argument_list|(
name|changeData
operator|.
name|notes
argument_list|()
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"current patch set %s of change %s not found"
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|topic
operator|==
literal|null
condition|)
block|{
name|input
operator|.
name|topic
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"revert-%s-%s"
argument_list|,
name|submissionId
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|10
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|revertSubmission
argument_list|(
name|changeDatas
argument_list|,
name|input
argument_list|)
argument_list|)
return|;
block|}
DECL|method|revertSubmission ( List<ChangeData> changeData, RevertInput revertInput)
specifier|private
name|RevertSubmissionInfo
name|revertSubmission
parameter_list|(
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changeData
parameter_list|,
name|RevertInput
name|revertInput
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|IOException
throws|,
name|UpdateException
throws|,
name|PermissionBackendException
throws|,
name|NoSuchProjectException
throws|,
name|ConfigInvalidException
throws|,
name|StorageException
block|{
name|Multimap
argument_list|<
name|BranchNameKey
argument_list|,
name|ChangeData
argument_list|>
name|changesPerProjectAndBranch
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|changeData
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|changesPerProjectAndBranch
operator|.
name|put
argument_list|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|cherryPickInput
operator|=
operator|new
name|CherryPickInput
argument_list|()
expr_stmt|;
comment|// To create a revert change, we create a revert commit that is then cherry-picked. The revert
comment|// change is created for the cherry-picked commit. Notifications are sent only for this change,
comment|// but not for the intermediately created revert commit.
name|cherryPickInput
operator|.
name|notify
operator|=
name|revertInput
operator|.
name|notify
expr_stmt|;
name|cherryPickInput
operator|.
name|notifyDetails
operator|=
name|revertInput
operator|.
name|notifyDetails
expr_stmt|;
name|cherryPickInput
operator|.
name|parent
operator|=
literal|1
expr_stmt|;
name|cherryPickInput
operator|.
name|keepReviewers
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|BranchNameKey
name|projectAndBranch
range|:
name|changesPerProjectAndBranch
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Project
operator|.
name|NameKey
name|project
init|=
name|projectAndBranch
operator|.
name|project
argument_list|()
decl_stmt|;
name|cherryPickInput
operator|.
name|destination
operator|=
name|projectAndBranch
operator|.
name|branch
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|changesInProjectAndBranch
init|=
name|changesPerProjectAndBranch
operator|.
name|get
argument_list|(
name|projectAndBranch
argument_list|)
decl_stmt|;
comment|// Sort the changes topologically.
name|Iterator
argument_list|<
name|PatchSetData
argument_list|>
name|sortedChangesInProject
init|=
name|sorter
operator|.
name|sort
argument_list|(
name|changesInProjectAndBranch
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|commitIdsInProjectAndBranch
init|=
name|changesInProjectAndBranch
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|c
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|sortedChangesInProject
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ChangeNotes
name|changeNotes
init|=
name|sortedChangesInProject
operator|.
name|next
argument_list|()
operator|.
name|data
argument_list|()
operator|.
name|notes
argument_list|()
decl_stmt|;
if|if
condition|(
name|cherryPickInput
operator|.
name|base
operator|==
literal|null
condition|)
block|{
name|cherryPickInput
operator|.
name|base
operator|=
name|getBase
argument_list|(
name|changeNotes
argument_list|,
name|commitIdsInProjectAndBranch
argument_list|)
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
comment|// This is the code in case this is the first revert of this project + branch, and the
comment|// revert would be on top of the change being reverted.
if|if
condition|(
name|cherryPickInput
operator|.
name|base
operator|.
name|equals
argument_list|(
name|changeNotes
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeInfo
name|revertChangeInfo
init|=
name|revert
operator|.
name|apply
argument_list|(
name|changeResourceFactory
operator|.
name|create
argument_list|(
name|changeNotes
argument_list|,
name|user
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|revertInput
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|revertChangeInfo
argument_list|)
expr_stmt|;
name|cherryPickInput
operator|.
name|base
operator|=
name|changeNotesFactory
operator|.
name|createChecked
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|revertChangeInfo
operator|.
name|_number
argument_list|)
argument_list|)
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// This is the code in case this is the second revert (or more) of this project + branch.
name|ObjectId
name|revCommitId
init|=
name|commitUtil
operator|.
name|createRevertCommit
argument_list|(
name|revertInput
operator|.
name|message
argument_list|,
name|changeNotes
argument_list|,
name|user
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO (paiking): As a future change, the revert should just be done directly on the
comment|// target rather than just creating a commit and then cherry-picking it.
name|cherryPickInput
operator|.
name|message
operator|=
name|revertInput
operator|.
name|message
operator|!=
literal|null
condition|?
name|revertInput
operator|.
name|message
else|:
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|revertChangeDefaultMessage
argument_list|,
name|changeNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|changeNotes
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectId
name|generatedChangeId
init|=
name|Change
operator|.
name|generateChangeId
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|cherryPickRevertChangeId
init|=
name|Change
operator|.
name|id
argument_list|(
name|seq
operator|.
name|nextChangeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO (paiking): In the the future, the timestamp should be the same for all the revert
comment|// changes.
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|user
operator|.
name|get
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|)
block|{
name|bu
operator|.
name|setNotify
argument_list|(
name|notifyResolver
operator|.
name|resolve
argument_list|(
name|firstNonNull
argument_list|(
name|cherryPickInput
operator|.
name|notify
argument_list|,
name|NotifyHandling
operator|.
name|ALL
argument_list|)
argument_list|,
name|cherryPickInput
operator|.
name|notifyDetails
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|changeNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|CreateCherryPickOp
argument_list|(
name|revCommitId
argument_list|,
name|revertInput
operator|.
name|topic
argument_list|,
name|generatedChangeId
argument_list|,
name|cherryPickRevertChangeId
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|changeNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|PostRevertedMessageOp
argument_list|(
name|generatedChangeId
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|cherryPickRevertChangeId
argument_list|,
operator|new
name|NotifyOp
argument_list|(
name|changeNotes
operator|.
name|getChange
argument_list|()
argument_list|,
name|cherryPickRevertChangeId
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|cherryPickInput
operator|.
name|base
operator|=
literal|null
expr_stmt|;
block|}
name|RevertSubmissionInfo
name|revertSubmissionInfo
init|=
operator|new
name|RevertSubmissionInfo
argument_list|()
decl_stmt|;
name|revertSubmissionInfo
operator|.
name|revertChanges
operator|=
name|results
expr_stmt|;
return|return
name|revertSubmissionInfo
return|;
block|}
comment|/**    * This function finds the base that the first revert in a project + branch should be based on. It    * searches using BFS for the first commit that is either: 1. Has 2 or more parents, and has as    * parents at least one commit that is part of the submission. 2. A commit that is part of the    * submission. If neither of those are true, it just continues the search by going to the parents.    *    *<p>If 1 is true, if all the parents are part of the submission, it just returns that commit. If    * only some of them are in the submission, the function changes and starts checking only the    * commits that are not part of the submission. If all of them are part of the submission (or they    * are also merge commits that have as parents only other merge commits, or other changes that are    * part of the submission), we will return possibleMergeCommitToReturn which is the original    * commit we started with when 1 was determined to be true.    *    *<p>If 2 is true, it will return the commit that WalkSorter has decided that it should be the    * first commit reverted (e.g changeNotes, which is also the commit that is the first in the    * topological sorting). Unless possibleMergeCommitToReturn is not null, which means we already    * encountered a merge commit with a part of the submission earlier, which means we should return    * that merge commit.    *    *<p>It doesn't run through the entire graph since it will stop once it finds at least one commit    * that is part of the submission.    *    * @param changeNotes changeNotes for the change that is found by WalkSorter to be the first one    *     that should be reverted, the first in the topological sorting.    * @param commitIds The commitIds of this project and branch.    * @return the base of the first revert.    */
DECL|method|getBase (ChangeNotes changeNotes, Set<ObjectId> commitIds)
specifier|private
name|ObjectId
name|getBase
parameter_list|(
name|ChangeNotes
name|changeNotes
parameter_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|commitIds
parameter_list|)
throws|throws
name|StorageException
throws|,
name|IOException
block|{
try|try
init|(
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|changeNotes
operator|.
name|getProjectName
argument_list|()
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|git
operator|.
name|newObjectInserter
argument_list|()
init|;
name|ObjectReader
name|reader
operator|=
name|oi
operator|.
name|newReader
argument_list|()
init|;
name|RevWalk
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|ObjectId
name|startCommit
init|=
name|git
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|findRef
argument_list|(
name|changeNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|branch
argument_list|()
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|ObjectId
argument_list|>
name|commitsToSearch
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|commitsToSearch
operator|.
name|add
argument_list|(
name|startCommit
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|commitsToSearch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RevCommit
name|revCommit
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|commitsToSearch
operator|.
name|poll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitIds
operator|.
name|contains
argument_list|(
name|revCommit
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|changeNotes
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
return|;
block|}
if|if
condition|(
name|revCommit
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|parentsInSubmission
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|revCommit
operator|.
name|getParents
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|parent
lambda|->
name|commitIds
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentsInSubmission
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Found a merge commit that has multiple parent commits that are part of the
comment|// submission.
return|return
name|revCommit
operator|.
name|getId
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|parentsInSubmission
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Found a merge commit that has only one parent in this submission, but also other
comment|// parents not in the submission. Now we need to check if the others are merge commits
comment|// that have as parents only other merge commits, or other changes from the
comment|// submission.
name|commitsToSearch
operator|.
name|clear
argument_list|()
expr_stmt|;
name|commitsToSearch
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|revCommit
operator|.
name|getParents
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|parent
lambda|->
operator|!
name|commitIds
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMergeCommitDescendantOfAllChangesInTheProjectAndBranchOfTheSubmission
argument_list|(
name|commitsToSearch
argument_list|,
name|commitIds
argument_list|,
name|revWalk
argument_list|,
name|revCommit
argument_list|,
name|changeNotes
argument_list|)
condition|)
block|{
comment|// Found a second commit of that submission that share the same merge commit.
return|return
name|revCommit
operator|.
name|getId
argument_list|()
return|;
block|}
comment|// Couldn't find a second commit of that submission that share the same merge commit.
return|return
name|changeNotes
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
return|;
block|}
block|}
name|commitsToSearch
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|revCommit
operator|.
name|getParents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This should never happen since it can only happen if we go through the entire repository
comment|// without finding a single commit that matches any commit from the submission.
throw|throw
operator|new
name|StorageException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Couldn't find change %s in the repository %s"
argument_list|,
name|changeNotes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|changeNotes
operator|.
name|getProjectName
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * This helper function calculates whether or not there exists a second commit that is part of the    * submission and ancestor of the same merge commit.    *    * @param commitsToSearch Starts as all the parents of the potential merge commit, except the one    *     that is part of the submission.    * @param commitIds The commitIds of this project and branch.    * @param revWalk Used for walking through the revisions.    * @param potentialCommitToReturn The merge commit that is potentially a descendant of all changes    *     in the project and branch of the submission.    * @param changeNotes changeNotes for the change that is found by WalkSorter to be the first one    *     that should be reverted, the first in the topological sorting.    * @return True if found another commit of this submission, false if not found.    */
DECL|method|isMergeCommitDescendantOfAllChangesInTheProjectAndBranchOfTheSubmission ( Queue<ObjectId> commitsToSearch, Set<ObjectId> commitIds, RevWalk revWalk, RevCommit potentialCommitToReturn, ChangeNotes changeNotes)
specifier|private
name|boolean
name|isMergeCommitDescendantOfAllChangesInTheProjectAndBranchOfTheSubmission
parameter_list|(
name|Queue
argument_list|<
name|ObjectId
argument_list|>
name|commitsToSearch
parameter_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|commitIds
parameter_list|,
name|RevWalk
name|revWalk
parameter_list|,
name|RevCommit
name|potentialCommitToReturn
parameter_list|,
name|ChangeNotes
name|changeNotes
parameter_list|)
throws|throws
name|StorageException
throws|,
name|IOException
block|{
while|while
condition|(
operator|!
name|commitsToSearch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RevCommit
name|revCommit
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|commitsToSearch
operator|.
name|poll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|revCommit
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|RevCommit
argument_list|>
name|parents
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|revCommit
operator|.
name|getParents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|commitIds
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// found another commit with a common descendant.
return|return
literal|true
return|;
block|}
name|Arrays
operator|.
name|asList
argument_list|(
name|revCommit
operator|.
name|getParents
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|parent
lambda|->
name|commitsToSearch
operator|.
name|add
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We found a merge commit, we found that one of the parents is not a merge commit nor a
comment|// change of this submission. Therefore the merge commit is not useful, and we just
comment|// rebase on the most recent revert as usual.
return|return
literal|false
return|;
block|}
block|}
comment|// This should never happen since it can only happen if we go through the entire repository
comment|// encountering only merge commits after encountering the change whose submission we are
comment|// reverting.
throw|throw
operator|new
name|StorageException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Couldn't find a non-merge commit after encountering commit %s when trying to revert"
operator|+
literal|" the submission of change %d"
argument_list|,
name|potentialCommitToReturn
operator|.
name|getName
argument_list|()
argument_list|,
name|changeNotes
operator|.
name|getChange
argument_list|()
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getDescription (ChangeResource rsrc)
specifier|public
name|Description
name|getDescription
parameter_list|(
name|ChangeResource
name|rsrc
parameter_list|)
block|{
name|Change
name|change
init|=
name|rsrc
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|boolean
name|projectStatePermitsWrite
init|=
literal|false
decl_stmt|;
try|try
block|{
name|projectStatePermitsWrite
operator|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
operator|.
name|statePermitsWrite
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to check if project state permits write: %s"
argument_list|,
name|rsrc
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|UiAction
operator|.
name|Description
argument_list|()
operator|.
name|setLabel
argument_list|(
literal|"Revert submission"
argument_list|)
operator|.
name|setTitle
argument_list|(
literal|"Revert this change and all changes that have been submitted together with this change"
argument_list|)
operator|.
name|setVisible
argument_list|(
name|and
argument_list|(
name|change
operator|.
name|isMerged
argument_list|()
operator|&&
name|change
operator|.
name|getSubmissionId
argument_list|()
operator|!=
literal|null
operator|&&
name|isChangePartOfSubmission
argument_list|(
name|change
operator|.
name|getSubmissionId
argument_list|()
argument_list|)
operator|&&
name|projectStatePermitsWrite
argument_list|,
name|permissionBackend
operator|.
name|user
argument_list|(
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|ref
argument_list|(
name|change
operator|.
name|getDest
argument_list|()
argument_list|)
operator|.
name|testCond
argument_list|(
name|CREATE_CHANGE
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param submissionId the submission id of the change.    * @return True if the submission has more than one change, false otherwise.    */
DECL|method|isChangePartOfSubmission (String submissionId)
specifier|private
name|Boolean
name|isChangePartOfSubmission
parameter_list|(
name|String
name|submissionId
parameter_list|)
block|{
return|return
operator|(
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|bySubmissionId
argument_list|(
name|submissionId
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
return|;
block|}
DECL|class|CreateCherryPickOp
specifier|private
class|class
name|CreateCherryPickOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|revCommitId
specifier|private
specifier|final
name|ObjectId
name|revCommitId
decl_stmt|;
DECL|field|topic
specifier|private
specifier|final
name|String
name|topic
decl_stmt|;
DECL|field|computedChangeId
specifier|private
specifier|final
name|ObjectId
name|computedChangeId
decl_stmt|;
DECL|field|cherryPickRevertChangeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|cherryPickRevertChangeId
decl_stmt|;
DECL|method|CreateCherryPickOp ( ObjectId revCommitId, String topic, ObjectId computedChangeId, Change.Id cherryPickRevertChangeId)
name|CreateCherryPickOp
parameter_list|(
name|ObjectId
name|revCommitId
parameter_list|,
name|String
name|topic
parameter_list|,
name|ObjectId
name|computedChangeId
parameter_list|,
name|Change
operator|.
name|Id
name|cherryPickRevertChangeId
parameter_list|)
block|{
name|this
operator|.
name|revCommitId
operator|=
name|revCommitId
expr_stmt|;
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
name|this
operator|.
name|computedChangeId
operator|=
name|computedChangeId
expr_stmt|;
name|this
operator|.
name|cherryPickRevertChangeId
operator|=
name|cherryPickRevertChangeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
name|change
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|Result
name|cherryPickResult
init|=
name|cherryPickChange
operator|.
name|cherryPick
argument_list|(
name|updateFactory
argument_list|,
name|change
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|revCommitId
argument_list|,
name|cherryPickInput
argument_list|,
name|BranchNameKey
operator|.
name|create
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|RefNames
operator|.
name|fullName
argument_list|(
name|cherryPickInput
operator|.
name|destination
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
name|topic
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|computedChangeId
argument_list|,
name|cherryPickRevertChangeId
argument_list|)
decl_stmt|;
comment|// save the commit as base for next cherryPick of that branch
name|cherryPickInput
operator|.
name|base
operator|=
name|changeNotesFactory
operator|.
name|createChecked
argument_list|(
name|cherryPickResult
operator|.
name|changeId
argument_list|()
argument_list|)
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|commitId
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|json
operator|.
name|noOptions
argument_list|()
operator|.
name|format
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|cherryPickResult
operator|.
name|changeId
argument_list|()
argument_list|,
name|ChangeInfo
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|NotifyOp
specifier|private
class|class
name|NotifyOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|field|revertChangeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|revertChangeId
decl_stmt|;
DECL|method|NotifyOp (Change change, Change.Id revertChangeId)
name|NotifyOp
parameter_list|(
name|Change
name|change
parameter_list|,
name|Change
operator|.
name|Id
name|revertChangeId
parameter_list|)
block|{
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
name|this
operator|.
name|revertChangeId
operator|=
name|revertChangeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postUpdate (Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|changeReverted
operator|.
name|fire
argument_list|(
name|change
argument_list|,
name|changeNotesFactory
operator|.
name|createChecked
argument_list|(
name|revertChangeId
argument_list|)
operator|.
name|getChange
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|RevertedSender
name|cm
init|=
name|revertedSenderFactory
operator|.
name|create
argument_list|(
name|ctx
operator|.
name|getProject
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|cm
operator|.
name|setFrom
argument_list|(
name|ctx
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setNotify
argument_list|(
name|ctx
operator|.
name|getNotify
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot send email for revert change %s"
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * create a message that describes the revert if the cherry-pick is successful, and point the    * revert of the change towards the cherry-pick. The cherry-pick is the updated change that acts    * as "revert-of" the original change.    */
DECL|class|PostRevertedMessageOp
specifier|private
class|class
name|PostRevertedMessageOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|computedChangeId
specifier|private
specifier|final
name|ObjectId
name|computedChangeId
decl_stmt|;
DECL|method|PostRevertedMessageOp (ObjectId computedChangeId)
name|PostRevertedMessageOp
parameter_list|(
name|ObjectId
name|computedChangeId
parameter_list|)
block|{
name|this
operator|.
name|computedChangeId
operator|=
name|computedChangeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|Change
name|change
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|ChangeMessage
name|changeMessage
init|=
name|ChangeMessagesUtil
operator|.
name|newMessage
argument_list|(
name|ctx
argument_list|,
literal|"Created a revert of this change as I"
operator|+
name|computedChangeId
operator|.
name|getName
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_REVERT
argument_list|)
decl_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|ctx
operator|.
name|getUpdate
argument_list|(
name|patchSetId
argument_list|)
argument_list|,
name|changeMessage
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

