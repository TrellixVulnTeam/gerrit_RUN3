begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Shorts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
DECL|class|LabelDefinitionInputParser
specifier|public
class|class
name|LabelDefinitionInputParser
block|{
DECL|method|parseFunction (String functionString)
specifier|public
specifier|static
name|LabelFunction
name|parseFunction
parameter_list|(
name|String
name|functionString
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|Optional
argument_list|<
name|LabelFunction
argument_list|>
name|function
init|=
name|LabelFunction
operator|.
name|parse
argument_list|(
name|functionString
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|function
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|BadRequestException
argument_list|(
literal|"unknown function: "
operator|+
name|functionString
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseValues (Map<String, String> values)
specifier|public
specifier|static
name|List
argument_list|<
name|LabelValue
argument_list|>
name|parseValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|List
argument_list|<
name|LabelValue
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|short
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|Shorts
operator|.
name|checkedCast
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid value: "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|String
name|valueDescription
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueDescription
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"description for value '"
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"' cannot be empty"
argument_list|)
throw|;
block|}
name|valueList
operator|.
name|add
argument_list|(
operator|new
name|LabelValue
argument_list|(
name|value
argument_list|,
name|valueDescription
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|valueList
return|;
block|}
DECL|method|parseDefaultValue (LabelType labelType, short defaultValue)
specifier|public
specifier|static
name|short
name|parseDefaultValue
parameter_list|(
name|LabelType
name|labelType
parameter_list|,
name|short
name|defaultValue
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|labelType
operator|.
name|getValue
argument_list|(
name|defaultValue
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid default value: "
operator|+
name|defaultValue
argument_list|)
throw|;
block|}
return|return
name|defaultValue
return|;
block|}
DECL|method|parseBranches (List<String> branches)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseBranches
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|branches
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|validBranches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|branch
range|:
name|branches
control|)
block|{
name|String
name|newBranch
init|=
name|branch
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|newBranch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|RefPattern
operator|.
name|isRE
argument_list|(
name|newBranch
argument_list|)
operator|&&
operator|!
name|newBranch
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS
argument_list|)
condition|)
block|{
name|newBranch
operator|=
name|RefNames
operator|.
name|REFS_HEADS
operator|+
name|newBranch
expr_stmt|;
block|}
try|try
block|{
name|RefPattern
operator|.
name|validate
argument_list|(
name|newBranch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid branch: "
operator|+
name|branch
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|validBranches
operator|.
name|add
argument_list|(
name|newBranch
argument_list|)
expr_stmt|;
block|}
return|return
name|validBranches
return|;
block|}
DECL|method|LabelDefinitionInputParser ()
specifier|private
name|LabelDefinitionInputParser
parameter_list|()
block|{}
block|}
end_class

end_unit

