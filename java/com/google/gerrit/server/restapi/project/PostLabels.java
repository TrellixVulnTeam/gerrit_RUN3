begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|BatchLabelInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelDefinitionInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ProjectPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|LabelResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_comment
comment|/** REST endpoint that allows to add, update and delete label definitions in a batch. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|PostLabels
specifier|public
class|class
name|PostLabels
implements|implements
name|RestCollectionModifyView
argument_list|<
name|ProjectResource
argument_list|,
name|LabelResource
argument_list|,
name|BatchLabelInput
argument_list|>
block|{
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|MetaDataUpdate
operator|.
name|User
name|updateFactory
decl_stmt|;
DECL|field|projectConfigFactory
specifier|private
specifier|final
name|ProjectConfig
operator|.
name|Factory
name|projectConfigFactory
decl_stmt|;
DECL|field|deleteLabel
specifier|private
specifier|final
name|DeleteLabel
name|deleteLabel
decl_stmt|;
DECL|field|createLabel
specifier|private
specifier|final
name|CreateLabel
name|createLabel
decl_stmt|;
DECL|field|setLabel
specifier|private
specifier|final
name|SetLabel
name|setLabel
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|PostLabels ( Provider<CurrentUser> user, PermissionBackend permissionBackend, MetaDataUpdate.User updateFactory, ProjectConfig.Factory projectConfigFactory, DeleteLabel deleteLabel, CreateLabel createLabel, SetLabel setLabel, ProjectCache projectCache)
specifier|public
name|PostLabels
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|MetaDataUpdate
operator|.
name|User
name|updateFactory
parameter_list|,
name|ProjectConfig
operator|.
name|Factory
name|projectConfigFactory
parameter_list|,
name|DeleteLabel
name|deleteLabel
parameter_list|,
name|CreateLabel
name|createLabel
parameter_list|,
name|SetLabel
name|setLabel
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|projectConfigFactory
operator|=
name|projectConfigFactory
expr_stmt|;
name|this
operator|.
name|deleteLabel
operator|=
name|deleteLabel
expr_stmt|;
name|this
operator|.
name|createLabel
operator|=
name|createLabel
expr_stmt|;
name|this
operator|.
name|setLabel
operator|=
name|setLabel
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (ProjectResource rsrc, BatchLabelInput input)
specifier|public
name|Response
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|ProjectResource
name|rsrc
parameter_list|,
name|BatchLabelInput
name|input
parameter_list|)
throws|throws
name|AuthException
throws|,
name|UnprocessableEntityException
throws|,
name|PermissionBackendException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|BadRequestException
throws|,
name|ResourceConflictException
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Authentication required"
argument_list|)
throw|;
block|}
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|project
argument_list|(
name|rsrc
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|ProjectPermission
operator|.
name|WRITE_CONFIG
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
name|input
operator|=
operator|new
name|BatchLabelInput
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|rsrc
operator|.
name|getNameKey
argument_list|()
argument_list|)
init|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
name|ProjectConfig
name|config
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|delete
operator|!=
literal|null
operator|&&
operator|!
name|input
operator|.
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|labelName
range|:
name|input
operator|.
name|delete
control|)
block|{
if|if
condition|(
operator|!
name|deleteLabel
operator|.
name|deleteLabel
argument_list|(
name|config
argument_list|,
name|labelName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnprocessableEntityException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label %s not found"
argument_list|,
name|labelName
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|create
operator|!=
literal|null
operator|&&
operator|!
name|input
operator|.
name|create
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|LabelDefinitionInput
name|labelInput
range|:
name|input
operator|.
name|create
control|)
block|{
if|if
condition|(
name|labelInput
operator|.
name|name
operator|==
literal|null
operator|||
name|labelInput
operator|.
name|name
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"label name is required for new label"
argument_list|)
throw|;
block|}
if|if
condition|(
name|labelInput
operator|.
name|commitMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"commit message on label definition input not supported"
argument_list|)
throw|;
block|}
name|createLabel
operator|.
name|createLabel
argument_list|(
name|config
argument_list|,
name|labelInput
operator|.
name|name
operator|.
name|trim
argument_list|()
argument_list|,
name|labelInput
argument_list|)
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|update
operator|!=
literal|null
operator|&&
operator|!
name|input
operator|.
name|update
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelDefinitionInput
argument_list|>
name|e
range|:
name|input
operator|.
name|update
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LabelType
name|labelType
init|=
name|config
operator|.
name|getLabelSections
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnprocessableEntityException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"label %s not found"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|commitMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"commit message on label definition input not supported"
argument_list|)
throw|;
block|}
name|setLabel
operator|.
name|updateLabel
argument_list|(
name|config
argument_list|,
name|labelType
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|.
name|commitMessage
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|setMessage
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|input
operator|.
name|commitMessage
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|md
operator|.
name|setMessage
argument_list|(
literal|"Update labels"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dirty
condition|)
block|{
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|rsrc
operator|.
name|getProjectState
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

