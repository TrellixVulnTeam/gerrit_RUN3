begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.restapi.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|GlobalPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|PutPreferred
specifier|public
class|class
name|PutPreferred
implements|implements
name|RestModifyView
argument_list|<
name|AccountResource
operator|.
name|Email
argument_list|,
name|Input
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PutPreferred
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|accountsUpdateProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
annotation|@
name|Inject
DECL|method|PutPreferred ( Provider<CurrentUser> self, PermissionBackend permissionBackend, @ServerInitiated Provider<AccountsUpdate> accountsUpdateProvider, ExternalIds externalIds)
name|PutPreferred
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
annotation|@
name|ServerInitiated
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|)
block|{
name|this
operator|.
name|self
operator|=
name|self
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|accountsUpdateProvider
operator|=
name|accountsUpdateProvider
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (AccountResource.Email rsrc, Input input)
specifier|public
name|Response
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|AccountResource
operator|.
name|Email
name|rsrc
parameter_list|,
name|Input
name|input
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|OrmException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|self
operator|.
name|get
argument_list|()
operator|!=
name|rsrc
operator|.
name|getUser
argument_list|()
condition|)
block|{
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|check
argument_list|(
name|GlobalPermission
operator|.
name|MODIFY_ACCOUNT
argument_list|)
expr_stmt|;
block|}
return|return
name|apply
argument_list|(
name|rsrc
operator|.
name|getUser
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getEmail
argument_list|()
argument_list|)
return|;
block|}
DECL|method|apply (IdentifiedUser user, String preferredEmail)
specifier|public
name|Response
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|,
name|String
name|preferredEmail
parameter_list|)
throws|throws
name|RestApiException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|AtomicReference
argument_list|<
name|Optional
argument_list|<
name|RestApiException
argument_list|>
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|alreadyPreferred
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Preferred Email via API"
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|preferredEmail
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
condition|)
block|{
name|alreadyPreferred
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check if the user has a matching email
name|String
name|matchingEmail
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|email
range|:
name|a
operator|.
name|getExternalIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|email
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|email
operator|.
name|equals
argument_list|(
name|preferredEmail
argument_list|)
condition|)
block|{
comment|// we have an email that matches exactly, prefer this one
name|matchingEmail
operator|=
name|email
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|matchingEmail
operator|==
literal|null
operator|&&
name|email
operator|.
name|equalsIgnoreCase
argument_list|(
name|preferredEmail
argument_list|)
condition|)
block|{
comment|// we found an email that matches but has a different case
name|matchingEmail
operator|=
name|email
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matchingEmail
operator|==
literal|null
condition|)
block|{
comment|// user doesn't have an external ID for this email
if|if
condition|(
name|user
operator|.
name|hasEmailAddress
argument_list|(
name|preferredEmail
argument_list|)
condition|)
block|{
comment|// but Realm says the user is allowed to use this email
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|existingExtIdsWithThisEmail
init|=
name|externalIds
operator|.
name|byEmail
argument_list|(
name|preferredEmail
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existingExtIdsWithThisEmail
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// but the email is already assigned to another account
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot set preferred email {} for account {} because it is owned"
operator|+
literal|" by the following account(s): {}"
argument_list|,
name|preferredEmail
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|existingExtIdsWithThisEmail
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|set
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ResourceConflictException
argument_list|(
literal|"email in use by another account"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// claim the email now
name|u
operator|.
name|addExternalId
argument_list|(
name|ExternalId
operator|.
name|createEmail
argument_list|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|preferredEmail
argument_list|)
argument_list|)
expr_stmt|;
name|matchingEmail
operator|=
name|preferredEmail
expr_stmt|;
block|}
else|else
block|{
comment|// Realm says that the email doesn't belong to the user. This can only happen as
comment|// a race condition because EmailsCollection would have thrown
comment|// ResourceNotFoundException already before invoking this REST endpoint.
name|exception
operator|.
name|set
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ResourceNotFoundException
argument_list|(
name|preferredEmail
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|matchingEmail
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"account not found"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|.
name|get
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
name|exception
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
throw|;
block|}
return|return
name|alreadyPreferred
operator|.
name|get
argument_list|()
condition|?
name|Response
operator|.
name|ok
argument_list|(
literal|""
argument_list|)
else|:
name|Response
operator|.
name|created
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

