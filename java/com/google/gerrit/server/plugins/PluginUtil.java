begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.plugins
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|annotations
operator|.
name|PluginName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|JavaScriptPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|PluginUtil
specifier|public
class|class
name|PluginUtil
block|{
DECL|method|listPlugins (Path pluginsDir, String suffix)
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|listPlugins
parameter_list|(
name|Path
name|pluginsDir
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pluginsDir
operator|==
literal|null
operator|||
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|pluginsDir
argument_list|)
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|DirectoryStream
operator|.
name|Filter
argument_list|<
name|Path
argument_list|>
name|filter
init|=
operator|new
name|DirectoryStream
operator|.
name|Filter
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|n
init|=
name|entry
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|accept
init|=
operator|!
name|n
operator|.
name|startsWith
argument_list|(
literal|".last_"
argument_list|)
operator|&&
operator|!
name|n
operator|.
name|startsWith
argument_list|(
literal|".next_"
argument_list|)
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|accept
operator|&=
name|n
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
return|return
name|accept
return|;
block|}
block|}
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|pluginsDir
argument_list|,
name|filter
argument_list|)
init|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|files
argument_list|)
return|;
block|}
block|}
DECL|method|listPlugins (Path pluginsDir)
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|listPlugins
parameter_list|(
name|Path
name|pluginsDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listPlugins
argument_list|(
name|pluginsDir
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|asTemp (InputStream in, String prefix, String suffix, Path dir)
specifier|static
name|Path
name|asTemp
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tmp
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|dir
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|boolean
name|keep
init|=
literal|false
decl_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tmp
argument_list|)
init|)
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|keep
operator|=
literal|true
expr_stmt|;
return|return
name|tmp
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|keep
condition|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|nameOf (Path plugin)
specifier|public
specifier|static
name|String
name|nameOf
parameter_list|(
name|Path
name|plugin
parameter_list|)
block|{
return|return
name|nameOf
argument_list|(
name|plugin
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|nameOf (String name)
specifier|static
name|String
name|nameOf
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".disabled"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|ext
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
return|return
literal|0
operator|<
name|ext
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
argument_list|)
else|:
name|name
return|;
block|}
DECL|method|parentFor (Plugin.ApiType type)
specifier|static
name|ClassLoader
name|parentFor
parameter_list|(
name|Plugin
operator|.
name|ApiType
name|type
parameter_list|)
throws|throws
name|InvalidPluginException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXTENSION
case|:
return|return
name|PluginName
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
case|case
name|PLUGIN
case|:
return|return
name|PluginLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
case|case
name|JS
case|:
return|return
name|JavaScriptPlugin
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|InvalidPluginException
argument_list|(
literal|"Unsupported ApiType "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

