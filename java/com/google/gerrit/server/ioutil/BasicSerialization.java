begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc. All rights reserved.
end_comment

begin_comment
comment|// http://code.google.com/p/protobuf/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|// * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|// * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ioutil
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ioutil
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|CodedEnum
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|IO
import|;
end_import

begin_class
DECL|class|BasicSerialization
specifier|public
class|class
name|BasicSerialization
block|{
DECL|field|NO_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|NO_BYTES
init|=
block|{}
decl_stmt|;
DECL|method|safeRead (InputStream input)
specifier|private
specifier|static
name|int
name|safeRead
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|b
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|b
return|;
block|}
comment|/** Read a fixed-width 64 bit integer in network byte order (big-endian). */
DECL|method|readFixInt64 (InputStream input)
specifier|public
specifier|static
name|long
name|readFixInt64
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|h
init|=
name|readFixInt32
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|long
name|l
init|=
name|readFixInt32
argument_list|(
name|input
argument_list|)
operator|&
literal|0xFFFFFFFFL
decl_stmt|;
return|return
operator|(
name|h
operator|<<
literal|32
operator|)
operator||
name|l
return|;
block|}
comment|/** Write a fixed-width 64 bit integer in network byte order (big-endian). */
DECL|method|writeFixInt64 (OutputStream output, long val)
specifier|public
specifier|static
name|void
name|writeFixInt64
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|long
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFixInt32
argument_list|(
name|output
argument_list|,
call|(
name|int
call|)
argument_list|(
name|val
operator|>>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|writeFixInt32
argument_list|(
name|output
argument_list|,
call|(
name|int
call|)
argument_list|(
name|val
operator|&
literal|0xFFFFFFFFL
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Read a fixed-width 32 bit integer in network byte order (big-endian). */
DECL|method|readFixInt32 (InputStream input)
specifier|public
specifier|static
name|int
name|readFixInt32
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|b1
init|=
name|safeRead
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|int
name|b2
init|=
name|safeRead
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|int
name|b3
init|=
name|safeRead
argument_list|(
name|input
argument_list|)
decl_stmt|;
specifier|final
name|int
name|b4
init|=
name|safeRead
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
operator|(
name|b1
operator|<<
literal|24
operator|)
operator||
operator|(
name|b2
operator|<<
literal|16
operator|)
operator||
operator|(
name|b3
operator|<<
literal|8
operator|)
operator||
name|b4
return|;
block|}
comment|/** Write a fixed-width 32 bit integer in network byte order (big-endian). */
DECL|method|writeFixInt32 (OutputStream output, int val)
specifier|public
specifier|static
name|void
name|writeFixInt32
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|int
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
operator|(
name|val
operator|>>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
name|val
operator|>>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
operator|(
name|val
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|val
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
comment|/** Read a varint from the input, one byte at a time. */
DECL|method|readVarInt32 (InputStream input)
specifier|public
specifier|static
name|int
name|readVarInt32
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|offset
operator|<
literal|32
condition|;
name|offset
operator|+=
literal|7
control|)
block|{
specifier|final
name|int
name|b
init|=
name|safeRead
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|result
operator||=
operator|(
name|b
operator|&
literal|0x7f
operator|)
operator|<<
name|offset
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
comment|/** Write a varint; value is treated as an unsigned value. */
DECL|method|writeVarInt32 (OutputStream output, int value)
specifier|public
specifier|static
name|void
name|writeVarInt32
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|(
name|value
operator|&
operator|~
literal|0x7F
operator|)
operator|==
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
name|output
operator|.
name|write
argument_list|(
operator|(
name|value
operator|&
literal|0x7F
operator|)
operator||
literal|0x80
argument_list|)
expr_stmt|;
name|value
operator|>>>=
literal|7
expr_stmt|;
block|}
block|}
comment|/** Read a fixed length byte array whose length is specified as a varint. */
DECL|method|readBytes (InputStream input)
specifier|public
specifier|static
name|byte
index|[]
name|readBytes
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|len
init|=
name|readVarInt32
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
name|NO_BYTES
return|;
block|}
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|IO
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/** Write a byte array prefixed by its length in a varint. */
DECL|method|writeBytes (OutputStream output, byte[] data)
specifier|public
specifier|static
name|void
name|writeBytes
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBytes
argument_list|(
name|output
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** Write a byte array prefixed by its length in a varint. */
DECL|method|writeBytes (final OutputStream output, byte[] data, int offset, int len)
specifier|public
specifier|static
name|void
name|writeBytes
parameter_list|(
specifier|final
name|OutputStream
name|output
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|writeVarInt32
argument_list|(
name|output
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/** Read a UTF-8 string, prefixed by its byte length in a varint. */
DECL|method|readString (InputStream input)
specifier|public
specifier|static
name|String
name|readString
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|bin
init|=
name|readBytes
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|bin
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|bin
argument_list|,
literal|0
argument_list|,
name|bin
operator|.
name|length
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
comment|/** Write a UTF-8 string, prefixed by its byte length in a varint. */
DECL|method|writeString (OutputStream output, String s)
specifier|public
specifier|static
name|void
name|writeString
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|writeVarInt32
argument_list|(
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeBytes
argument_list|(
name|output
argument_list|,
name|s
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Read an enum whose code is stored as a varint. */
DECL|method|readEnum (InputStream input, T[] all)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|CodedEnum
parameter_list|>
name|T
name|readEnum
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|T
index|[]
name|all
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|val
init|=
name|readVarInt32
argument_list|(
name|input
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|all
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getCode
argument_list|()
operator|==
name|val
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid enum "
operator|+
name|val
operator|+
literal|" for "
operator|+
name|all
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|/** Write an enum whose code is stored as a varint. */
DECL|method|writeEnum (OutputStream output, T e)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|CodedEnum
parameter_list|>
name|void
name|writeEnum
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|T
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|writeVarInt32
argument_list|(
name|output
argument_list|,
name|e
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicSerialization ()
specifier|private
name|BasicSerialization
parameter_list|()
block|{}
block|}
end_class

end_unit

