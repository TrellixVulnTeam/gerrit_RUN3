begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
operator|.
name|CHANGE_ID_PATTERN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
operator|.
name|isSelf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
operator|.
name|asChanges
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Enums
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|NotSignedInException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|SchemaUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|LimitPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryRequiresAuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
operator|.
name|UnresolvableAccountException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackends
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|VersionedAccountDestinations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|VersionedAccountQueries
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeTriplet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|OperatorAliasConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexRewriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ChildProjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|SubmitDryRun
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** Parses a query string meant to be applied to change objects. */
end_comment

begin_class
DECL|class|ChangeQueryBuilder
specifier|public
class|class
name|ChangeQueryBuilder
extends|extends
name|QueryBuilder
argument_list|<
name|ChangeData
argument_list|,
name|ChangeQueryBuilder
argument_list|>
block|{
DECL|interface|ChangeOperatorFactory
specifier|public
interface|interface
name|ChangeOperatorFactory
extends|extends
name|OperatorFactory
argument_list|<
name|ChangeData
argument_list|,
name|ChangeQueryBuilder
argument_list|>
block|{}
comment|/**    * Converts a operand (operator value) passed to an operator into a {@link Predicate}.    *    *<p>Register a ChangeOperandFactory in a config Module like this (note, for an example we are    * using the has predicate, when other predicate plugin operands are created they can be    * registered in a similar manner):    *    *<p>bind(ChangeHasOperandFactory.class) .annotatedWith(Exports.named("your has operand"))    * .to(YourClass.class);    */
DECL|interface|ChangeOperandFactory
specifier|private
interface|interface
name|ChangeOperandFactory
block|{
DECL|method|create (ChangeQueryBuilder builder)
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|create
parameter_list|(
name|ChangeQueryBuilder
name|builder
parameter_list|)
throws|throws
name|QueryParseException
function_decl|;
block|}
DECL|interface|ChangeHasOperandFactory
specifier|public
interface|interface
name|ChangeHasOperandFactory
extends|extends
name|ChangeOperandFactory
block|{}
DECL|field|PAT_LEGACY_ID
specifier|private
specifier|static
specifier|final
name|Pattern
name|PAT_LEGACY_ID
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[1-9][0-9]*$"
argument_list|)
decl_stmt|;
DECL|field|PAT_CHANGE_ID
specifier|private
specifier|static
specifier|final
name|Pattern
name|PAT_CHANGE_ID
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|CHANGE_ID_PATTERN
argument_list|)
decl_stmt|;
DECL|field|DEF_CHANGE
specifier|private
specifier|static
specifier|final
name|Pattern
name|DEF_CHANGE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(?:[1-9][0-9]*|(?:[^~]+~[^~]+~)?[iI][0-9a-f]{4,}.*)$"
argument_list|)
decl_stmt|;
DECL|field|MAX_ACCOUNTS_PER_DEFAULT_FIELD
specifier|static
specifier|final
name|int
name|MAX_ACCOUNTS_PER_DEFAULT_FIELD
init|=
literal|10
decl_stmt|;
comment|// NOTE: As new search operations are added, please keep the suggestions in
comment|// gr-search-bar.js up to date.
DECL|field|FIELD_ADDED
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ADDED
init|=
literal|"added"
decl_stmt|;
DECL|field|FIELD_AGE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_AGE
init|=
literal|"age"
decl_stmt|;
DECL|field|FIELD_ASSIGNEE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ASSIGNEE
init|=
literal|"assignee"
decl_stmt|;
DECL|field|FIELD_AUTHOR
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_AUTHOR
init|=
literal|"author"
decl_stmt|;
DECL|field|FIELD_EXACTAUTHOR
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EXACTAUTHOR
init|=
literal|"exactauthor"
decl_stmt|;
DECL|field|FIELD_BEFORE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_BEFORE
init|=
literal|"before"
decl_stmt|;
DECL|field|FIELD_CHANGE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_CHANGE
init|=
literal|"change"
decl_stmt|;
DECL|field|FIELD_CHANGE_ID
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_CHANGE_ID
init|=
literal|"change_id"
decl_stmt|;
DECL|field|FIELD_COMMENT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_COMMENT
init|=
literal|"comment"
decl_stmt|;
DECL|field|FIELD_COMMENTBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_COMMENTBY
init|=
literal|"commentby"
decl_stmt|;
DECL|field|FIELD_COMMIT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_COMMIT
init|=
literal|"commit"
decl_stmt|;
DECL|field|FIELD_COMMITTER
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_COMMITTER
init|=
literal|"committer"
decl_stmt|;
DECL|field|FIELD_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DIRECTORY
init|=
literal|"directory"
decl_stmt|;
DECL|field|FIELD_EXACTCOMMITTER
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EXACTCOMMITTER
init|=
literal|"exactcommitter"
decl_stmt|;
DECL|field|FIELD_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EXTENSION
init|=
literal|"extension"
decl_stmt|;
DECL|field|FIELD_ONLY_EXTENSIONS
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ONLY_EXTENSIONS
init|=
literal|"onlyextensions"
decl_stmt|;
DECL|field|FIELD_FOOTER
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_FOOTER
init|=
literal|"footer"
decl_stmt|;
DECL|field|FIELD_CONFLICTS
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_CONFLICTS
init|=
literal|"conflicts"
decl_stmt|;
DECL|field|FIELD_DELETED
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DELETED
init|=
literal|"deleted"
decl_stmt|;
DECL|field|FIELD_DELTA
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DELTA
init|=
literal|"delta"
decl_stmt|;
DECL|field|FIELD_DESTINATION
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DESTINATION
init|=
literal|"destination"
decl_stmt|;
DECL|field|FIELD_DRAFTBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DRAFTBY
init|=
literal|"draftby"
decl_stmt|;
DECL|field|FIELD_EDITBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EDITBY
init|=
literal|"editby"
decl_stmt|;
DECL|field|FIELD_EXACTCOMMIT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_EXACTCOMMIT
init|=
literal|"exactcommit"
decl_stmt|;
DECL|field|FIELD_FILE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_FILE
init|=
literal|"file"
decl_stmt|;
DECL|field|FIELD_FILEPART
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_FILEPART
init|=
literal|"filepart"
decl_stmt|;
DECL|field|FIELD_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_GROUP
init|=
literal|"group"
decl_stmt|;
DECL|field|FIELD_HASHTAG
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_HASHTAG
init|=
literal|"hashtag"
decl_stmt|;
DECL|field|FIELD_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_LABEL
init|=
literal|"label"
decl_stmt|;
DECL|field|FIELD_LIMIT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_LIMIT
init|=
literal|"limit"
decl_stmt|;
DECL|field|FIELD_MERGE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_MERGE
init|=
literal|"merge"
decl_stmt|;
DECL|field|FIELD_MERGEABLE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_MERGEABLE
init|=
literal|"mergeable2"
decl_stmt|;
DECL|field|FIELD_MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_MESSAGE
init|=
literal|"message"
decl_stmt|;
DECL|field|FIELD_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_OWNER
init|=
literal|"owner"
decl_stmt|;
DECL|field|FIELD_OWNERIN
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_OWNERIN
init|=
literal|"ownerin"
decl_stmt|;
DECL|field|FIELD_PARENTPROJECT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PARENTPROJECT
init|=
literal|"parentproject"
decl_stmt|;
DECL|field|FIELD_PATH
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PATH
init|=
literal|"path"
decl_stmt|;
DECL|field|FIELD_PENDING_REVIEWER
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PENDING_REVIEWER
init|=
literal|"pendingreviewer"
decl_stmt|;
DECL|field|FIELD_PENDING_REVIEWER_BY_EMAIL
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PENDING_REVIEWER_BY_EMAIL
init|=
literal|"pendingreviewerbyemail"
decl_stmt|;
DECL|field|FIELD_PRIVATE
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PRIVATE
init|=
literal|"private"
decl_stmt|;
DECL|field|FIELD_PROJECT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PROJECT
init|=
literal|"project"
decl_stmt|;
DECL|field|FIELD_PROJECTS
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PROJECTS
init|=
literal|"projects"
decl_stmt|;
DECL|field|FIELD_REF
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_REF
init|=
literal|"ref"
decl_stmt|;
DECL|field|FIELD_REVIEWEDBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_REVIEWEDBY
init|=
literal|"reviewedby"
decl_stmt|;
DECL|field|FIELD_REVIEWER
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_REVIEWER
init|=
literal|"reviewer"
decl_stmt|;
DECL|field|FIELD_REVIEWERIN
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_REVIEWERIN
init|=
literal|"reviewerin"
decl_stmt|;
DECL|field|FIELD_STAR
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_STAR
init|=
literal|"star"
decl_stmt|;
DECL|field|FIELD_STARBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_STARBY
init|=
literal|"starby"
decl_stmt|;
DECL|field|FIELD_STARREDBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_STARREDBY
init|=
literal|"starredby"
decl_stmt|;
DECL|field|FIELD_STARTED
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_STARTED
init|=
literal|"started"
decl_stmt|;
DECL|field|FIELD_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_STATUS
init|=
literal|"status"
decl_stmt|;
DECL|field|FIELD_SUBMISSIONID
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_SUBMISSIONID
init|=
literal|"submissionid"
decl_stmt|;
DECL|field|FIELD_TR
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_TR
init|=
literal|"tr"
decl_stmt|;
DECL|field|FIELD_UNRESOLVED_COMMENT_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_UNRESOLVED_COMMENT_COUNT
init|=
literal|"unresolved"
decl_stmt|;
DECL|field|FIELD_VISIBLETO
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_VISIBLETO
init|=
literal|"visibleto"
decl_stmt|;
DECL|field|FIELD_WATCHEDBY
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_WATCHEDBY
init|=
literal|"watchedby"
decl_stmt|;
DECL|field|FIELD_WIP
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_WIP
init|=
literal|"wip"
decl_stmt|;
DECL|field|FIELD_REVERTOF
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_REVERTOF
init|=
literal|"revertof"
decl_stmt|;
DECL|field|ARG_ID_USER
specifier|public
specifier|static
specifier|final
name|String
name|ARG_ID_USER
init|=
literal|"user"
decl_stmt|;
DECL|field|ARG_ID_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|ARG_ID_GROUP
init|=
literal|"group"
decl_stmt|;
DECL|field|ARG_ID_OWNER
specifier|public
specifier|static
specifier|final
name|String
name|ARG_ID_OWNER
init|=
literal|"owner"
decl_stmt|;
DECL|field|OWNER_ACCOUNT_ID
specifier|public
specifier|static
specifier|final
name|Account
operator|.
name|Id
name|OWNER_ACCOUNT_ID
init|=
name|Account
operator|.
name|id
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|mydef
specifier|private
specifier|static
specifier|final
name|QueryBuilder
operator|.
name|Definition
argument_list|<
name|ChangeData
argument_list|,
name|ChangeQueryBuilder
argument_list|>
name|mydef
init|=
operator|new
name|QueryBuilder
operator|.
name|Definition
argument_list|<>
argument_list|(
name|ChangeQueryBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|class|Arguments
specifier|public
specifier|static
class|class
name|Arguments
block|{
DECL|field|accountCache
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|accountResolver
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|allProjectsName
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
DECL|field|allUsersName
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|permissionBackend
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|changeDataFactory
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|index
specifier|final
name|ChangeIndex
name|index
decl_stmt|;
DECL|field|rewriter
specifier|final
name|ChangeIndexRewriter
name|rewriter
decl_stmt|;
DECL|field|notesFactory
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|commentsUtil
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|conflictsCache
specifier|final
name|ConflictsCache
name|conflictsCache
decl_stmt|;
DECL|field|hasOperands
specifier|final
name|DynamicMap
argument_list|<
name|ChangeHasOperandFactory
argument_list|>
name|hasOperands
decl_stmt|;
DECL|field|opFactories
specifier|final
name|DynamicMap
argument_list|<
name|ChangeOperatorFactory
argument_list|>
name|opFactories
decl_stmt|;
DECL|field|repoManager
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|groupBackend
specifier|final
name|GroupBackend
name|groupBackend
decl_stmt|;
DECL|field|userFactory
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|indexConfig
specifier|final
name|IndexConfig
name|indexConfig
decl_stmt|;
DECL|field|patchListCache
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|projectCache
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|queryProvider
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|childProjects
specifier|final
name|ChildProjects
name|childProjects
decl_stmt|;
DECL|field|starredChangesUtil
specifier|final
name|StarredChangesUtil
name|starredChangesUtil
decl_stmt|;
DECL|field|submitDryRun
specifier|final
name|SubmitDryRun
name|submitDryRun
decl_stmt|;
DECL|field|groupMembers
specifier|final
name|GroupMembers
name|groupMembers
decl_stmt|;
DECL|field|anonymousUserProvider
specifier|final
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUserProvider
decl_stmt|;
DECL|field|operatorAliasConfig
specifier|final
name|OperatorAliasConfig
name|operatorAliasConfig
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|VisibleForTesting
DECL|method|Arguments ( Provider<InternalChangeQuery> queryProvider, ChangeIndexRewriter rewriter, DynamicMap<ChangeOperatorFactory> opFactories, DynamicMap<ChangeHasOperandFactory> hasOperands, IdentifiedUser.GenericFactory userFactory, Provider<CurrentUser> self, PermissionBackend permissionBackend, ChangeNotes.Factory notesFactory, ChangeData.Factory changeDataFactory, CommentsUtil commentsUtil, AccountResolver accountResolver, GroupBackend groupBackend, AllProjectsName allProjectsName, AllUsersName allUsersName, PatchListCache patchListCache, GitRepositoryManager repoManager, ProjectCache projectCache, ChildProjects childProjects, ChangeIndexCollection indexes, SubmitDryRun submitDryRun, ConflictsCache conflictsCache, IndexConfig indexConfig, StarredChangesUtil starredChangesUtil, AccountCache accountCache, GroupMembers groupMembers, Provider<AnonymousUser> anonymousUserProvider, OperatorAliasConfig operatorAliasConfig)
specifier|public
name|Arguments
parameter_list|(
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|ChangeIndexRewriter
name|rewriter
parameter_list|,
name|DynamicMap
argument_list|<
name|ChangeOperatorFactory
argument_list|>
name|opFactories
parameter_list|,
name|DynamicMap
argument_list|<
name|ChangeHasOperandFactory
argument_list|>
name|hasOperands
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|AccountResolver
name|accountResolver
parameter_list|,
name|GroupBackend
name|groupBackend
parameter_list|,
name|AllProjectsName
name|allProjectsName
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|ChildProjects
name|childProjects
parameter_list|,
name|ChangeIndexCollection
name|indexes
parameter_list|,
name|SubmitDryRun
name|submitDryRun
parameter_list|,
name|ConflictsCache
name|conflictsCache
parameter_list|,
name|IndexConfig
name|indexConfig
parameter_list|,
name|StarredChangesUtil
name|starredChangesUtil
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|GroupMembers
name|groupMembers
parameter_list|,
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUserProvider
parameter_list|,
name|OperatorAliasConfig
name|operatorAliasConfig
parameter_list|)
block|{
name|this
argument_list|(
name|queryProvider
argument_list|,
name|rewriter
argument_list|,
name|opFactories
argument_list|,
name|hasOperands
argument_list|,
name|userFactory
argument_list|,
name|self
argument_list|,
name|permissionBackend
argument_list|,
name|notesFactory
argument_list|,
name|changeDataFactory
argument_list|,
name|commentsUtil
argument_list|,
name|accountResolver
argument_list|,
name|groupBackend
argument_list|,
name|allProjectsName
argument_list|,
name|allUsersName
argument_list|,
name|patchListCache
argument_list|,
name|repoManager
argument_list|,
name|projectCache
argument_list|,
name|childProjects
argument_list|,
name|submitDryRun
argument_list|,
name|conflictsCache
argument_list|,
name|indexes
operator|!=
literal|null
condition|?
name|indexes
operator|.
name|getSearchIndex
argument_list|()
else|:
literal|null
argument_list|,
name|indexConfig
argument_list|,
name|starredChangesUtil
argument_list|,
name|accountCache
argument_list|,
name|groupMembers
argument_list|,
name|anonymousUserProvider
argument_list|,
name|operatorAliasConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|Arguments ( Provider<InternalChangeQuery> queryProvider, ChangeIndexRewriter rewriter, DynamicMap<ChangeOperatorFactory> opFactories, DynamicMap<ChangeHasOperandFactory> hasOperands, IdentifiedUser.GenericFactory userFactory, Provider<CurrentUser> self, PermissionBackend permissionBackend, ChangeNotes.Factory notesFactory, ChangeData.Factory changeDataFactory, CommentsUtil commentsUtil, AccountResolver accountResolver, GroupBackend groupBackend, AllProjectsName allProjectsName, AllUsersName allUsersName, PatchListCache patchListCache, GitRepositoryManager repoManager, ProjectCache projectCache, ChildProjects childProjects, SubmitDryRun submitDryRun, ConflictsCache conflictsCache, ChangeIndex index, IndexConfig indexConfig, StarredChangesUtil starredChangesUtil, AccountCache accountCache, GroupMembers groupMembers, Provider<AnonymousUser> anonymousUserProvider, OperatorAliasConfig operatorAliasConfig)
specifier|private
name|Arguments
parameter_list|(
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|ChangeIndexRewriter
name|rewriter
parameter_list|,
name|DynamicMap
argument_list|<
name|ChangeOperatorFactory
argument_list|>
name|opFactories
parameter_list|,
name|DynamicMap
argument_list|<
name|ChangeHasOperandFactory
argument_list|>
name|hasOperands
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|AccountResolver
name|accountResolver
parameter_list|,
name|GroupBackend
name|groupBackend
parameter_list|,
name|AllProjectsName
name|allProjectsName
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|ChildProjects
name|childProjects
parameter_list|,
name|SubmitDryRun
name|submitDryRun
parameter_list|,
name|ConflictsCache
name|conflictsCache
parameter_list|,
name|ChangeIndex
name|index
parameter_list|,
name|IndexConfig
name|indexConfig
parameter_list|,
name|StarredChangesUtil
name|starredChangesUtil
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|GroupMembers
name|groupMembers
parameter_list|,
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUserProvider
parameter_list|,
name|OperatorAliasConfig
name|operatorAliasConfig
parameter_list|)
block|{
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|rewriter
operator|=
name|rewriter
expr_stmt|;
name|this
operator|.
name|opFactories
operator|=
name|opFactories
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|self
operator|=
name|self
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|groupBackend
operator|=
name|groupBackend
expr_stmt|;
name|this
operator|.
name|allProjectsName
operator|=
name|allProjectsName
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|childProjects
operator|=
name|childProjects
expr_stmt|;
name|this
operator|.
name|submitDryRun
operator|=
name|submitDryRun
expr_stmt|;
name|this
operator|.
name|conflictsCache
operator|=
name|conflictsCache
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|indexConfig
operator|=
name|indexConfig
expr_stmt|;
name|this
operator|.
name|starredChangesUtil
operator|=
name|starredChangesUtil
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|hasOperands
operator|=
name|hasOperands
expr_stmt|;
name|this
operator|.
name|groupMembers
operator|=
name|groupMembers
expr_stmt|;
name|this
operator|.
name|anonymousUserProvider
operator|=
name|anonymousUserProvider
expr_stmt|;
name|this
operator|.
name|operatorAliasConfig
operator|=
name|operatorAliasConfig
expr_stmt|;
block|}
DECL|method|asUser (CurrentUser otherUser)
name|Arguments
name|asUser
parameter_list|(
name|CurrentUser
name|otherUser
parameter_list|)
block|{
return|return
operator|new
name|Arguments
argument_list|(
name|queryProvider
argument_list|,
name|rewriter
argument_list|,
name|opFactories
argument_list|,
name|hasOperands
argument_list|,
name|userFactory
argument_list|,
name|Providers
operator|.
name|of
argument_list|(
name|otherUser
argument_list|)
argument_list|,
name|permissionBackend
argument_list|,
name|notesFactory
argument_list|,
name|changeDataFactory
argument_list|,
name|commentsUtil
argument_list|,
name|accountResolver
argument_list|,
name|groupBackend
argument_list|,
name|allProjectsName
argument_list|,
name|allUsersName
argument_list|,
name|patchListCache
argument_list|,
name|repoManager
argument_list|,
name|projectCache
argument_list|,
name|childProjects
argument_list|,
name|submitDryRun
argument_list|,
name|conflictsCache
argument_list|,
name|index
argument_list|,
name|indexConfig
argument_list|,
name|starredChangesUtil
argument_list|,
name|accountCache
argument_list|,
name|groupMembers
argument_list|,
name|anonymousUserProvider
argument_list|,
name|operatorAliasConfig
argument_list|)
return|;
block|}
DECL|method|asUser (Account.Id otherId)
name|Arguments
name|asUser
parameter_list|(
name|Account
operator|.
name|Id
name|otherId
parameter_list|)
block|{
try|try
block|{
name|CurrentUser
name|u
init|=
name|self
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|isIdentifiedUser
argument_list|()
operator|&&
name|otherId
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ProvisionException
name|e
parameter_list|)
block|{
comment|// Doesn't match current user, continue.
block|}
return|return
name|asUser
argument_list|(
name|userFactory
operator|.
name|create
argument_list|(
name|otherId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getIdentifiedUser ()
name|IdentifiedUser
name|getIdentifiedUser
parameter_list|()
throws|throws
name|QueryRequiresAuthException
block|{
try|try
block|{
name|CurrentUser
name|u
init|=
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
return|return
name|u
operator|.
name|asIdentifiedUser
argument_list|()
return|;
block|}
throw|throw
operator|new
name|QueryRequiresAuthException
argument_list|(
name|NotSignedInException
operator|.
name|MESSAGE
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ProvisionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryRequiresAuthException
argument_list|(
name|NotSignedInException
operator|.
name|MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getUser ()
name|CurrentUser
name|getUser
parameter_list|()
throws|throws
name|QueryRequiresAuthException
block|{
try|try
block|{
return|return
name|self
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ProvisionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryRequiresAuthException
argument_list|(
name|NotSignedInException
operator|.
name|MESSAGE
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getSchema ()
name|Schema
argument_list|<
name|ChangeData
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|index
operator|!=
literal|null
condition|?
name|index
operator|.
name|getSchema
argument_list|()
else|:
literal|null
return|;
block|}
block|}
DECL|field|args
specifier|private
specifier|final
name|Arguments
name|args
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeQueryBuilder (Arguments args)
name|ChangeQueryBuilder
parameter_list|(
name|Arguments
name|args
parameter_list|)
block|{
name|this
argument_list|(
name|mydef
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|setupAliases
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ChangeQueryBuilder (Definition<ChangeData, ChangeQueryBuilder> def, Arguments args)
specifier|protected
name|ChangeQueryBuilder
parameter_list|(
name|Definition
argument_list|<
name|ChangeData
argument_list|,
name|ChangeQueryBuilder
argument_list|>
name|def
parameter_list|,
name|Arguments
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|def
argument_list|,
name|args
operator|.
name|opFactories
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
DECL|method|setupAliases ()
specifier|private
name|void
name|setupAliases
parameter_list|()
block|{
name|setOperatorAliases
argument_list|(
name|args
operator|.
name|operatorAliasConfig
operator|.
name|getChangeQueryOperatorAliases
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getArgs ()
specifier|public
name|Arguments
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
DECL|method|asUser (CurrentUser user)
specifier|public
name|ChangeQueryBuilder
name|asUser
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
operator|new
name|ChangeQueryBuilder
argument_list|(
name|builderDef
argument_list|,
name|args
operator|.
name|asUser
argument_list|(
name|user
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|age (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|age
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|AgePredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|before (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|before
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|BeforePredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|until (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|until
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
name|before
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|after (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|after
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|AfterPredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|since (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|since
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
name|after
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|change (String query)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|change
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|Optional
argument_list|<
name|ChangeTriplet
argument_list|>
name|triplet
init|=
name|ChangeTriplet
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|triplet
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Predicate
operator|.
name|and
argument_list|(
name|project
argument_list|(
name|triplet
operator|.
name|get
argument_list|()
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|branch
argument_list|(
name|triplet
operator|.
name|get
argument_list|()
operator|.
name|branch
argument_list|()
operator|.
name|branch
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ChangeIdPredicate
argument_list|(
name|parseChangeId
argument_list|(
name|triplet
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|PAT_LEGACY_ID
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|useLegacyNumericFields
argument_list|()
condition|?
operator|new
name|LegacyChangeIdPredicate
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|id
argument_list|)
argument_list|)
else|:
operator|new
name|LegacyChangeIdStrPredicate
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|PAT_CHANGE_ID
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|new
name|ChangeIdPredicate
argument_list|(
name|parseChangeId
argument_list|(
name|query
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Invalid change format"
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|comment (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|comment
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|CommentPredicate
argument_list|(
name|args
operator|.
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|status (String statusName)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|status
parameter_list|(
name|String
name|statusName
parameter_list|)
block|{
if|if
condition|(
literal|"reviewed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|statusName
argument_list|)
condition|)
block|{
return|return
name|IsReviewedPredicate
operator|.
name|create
argument_list|()
return|;
block|}
return|return
name|ChangeStatusPredicate
operator|.
name|parse
argument_list|(
name|statusName
argument_list|)
return|;
block|}
DECL|method|status_open ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|status_open
parameter_list|()
block|{
return|return
name|ChangeStatusPredicate
operator|.
name|open
argument_list|()
return|;
block|}
annotation|@
name|Operator
DECL|method|has (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|has
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
literal|"star"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|starredby
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"stars"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|HasStarsPredicate
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"draft"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|draftby
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"edit"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|EditByPredicate
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"unresolved"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|IsUnresolvedPredicate
argument_list|()
return|;
block|}
comment|// for plugins the value will be operandName_pluginName
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'_'
argument_list|)
operator|.
name|split
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|ChangeHasOperandFactory
name|op
init|=
name|args
operator|.
name|hasOperands
operator|.
name|get
argument_list|(
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
return|return
name|op
operator|.
name|create
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
annotation|@
name|Operator
DECL|method|is (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|is
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
literal|"starred"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|starredby
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"watched"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|IsWatchedByPredicate
argument_list|(
name|args
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
literal|"visible"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|is_visible
argument_list|()
return|;
block|}
if|if
condition|(
literal|"reviewed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IsReviewedPredicate
operator|.
name|create
argument_list|()
return|;
block|}
if|if
condition|(
literal|"owner"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|OwnerPredicate
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"reviewer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|WIP
argument_list|)
condition|)
block|{
return|return
name|Predicate
operator|.
name|and
argument_list|(
name|Predicate
operator|.
name|not
argument_list|(
operator|new
name|BooleanPredicate
argument_list|(
name|ChangeField
operator|.
name|WIP
argument_list|)
argument_list|)
argument_list|,
name|ReviewerPredicate
operator|.
name|reviewer
argument_list|(
name|self
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ReviewerPredicate
operator|.
name|reviewer
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"cc"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|ReviewerPredicate
operator|.
name|cc
argument_list|(
name|self
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"mergeable"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|BooleanPredicate
argument_list|(
name|ChangeField
operator|.
name|MERGEABLE
argument_list|)
return|;
block|}
if|if
condition|(
literal|"private"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|PRIVATE
argument_list|)
condition|)
block|{
return|return
operator|new
name|BooleanPredicate
argument_list|(
name|ChangeField
operator|.
name|PRIVATE
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'is:private' operator is not supported by change index version"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"assigned"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Predicate
operator|.
name|not
argument_list|(
operator|new
name|AssigneePredicate
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|ChangeField
operator|.
name|NO_ASSIGNEE
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
literal|"unassigned"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|AssigneePredicate
argument_list|(
name|Account
operator|.
name|id
argument_list|(
name|ChangeField
operator|.
name|NO_ASSIGNEE
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
literal|"submittable"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
operator|new
name|SubmittablePredicate
argument_list|(
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
argument_list|)
return|;
block|}
if|if
condition|(
literal|"ignored"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|star
argument_list|(
literal|"ignore"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"started"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|STARTED
argument_list|)
condition|)
block|{
return|return
operator|new
name|BooleanPredicate
argument_list|(
name|ChangeField
operator|.
name|STARTED
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'is:started' operator is not supported by change index version"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"wip"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|WIP
argument_list|)
condition|)
block|{
return|return
operator|new
name|BooleanPredicate
argument_list|(
name|ChangeField
operator|.
name|WIP
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'is:wip' operator is not supported by change index version"
argument_list|)
throw|;
block|}
return|return
name|status
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|commit (String id)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|commit
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|CommitPredicate
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|conflicts (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|conflicts
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|parseChange
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|or
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|changes
control|)
block|{
name|or
operator|.
name|add
argument_list|(
name|ConflictsPredicate
operator|.
name|create
argument_list|(
name|args
argument_list|,
name|value
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|or
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|p (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|project
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|project (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|project
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegexProjectPredicate
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|new
name|ProjectPredicate
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|projects (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|projects
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ProjectPrefixPredicate
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|parentproject (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|parentproject
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ParentProjectPredicate
argument_list|(
name|args
operator|.
name|projectCache
argument_list|,
name|args
operator|.
name|childProjects
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|repository (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|repository
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|project
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|repositories (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|repositories
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|projects
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|parentrepository (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|parentrepository
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parentproject
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|repo (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|repo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|project
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|repos (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|repos
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|projects
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|parentrepo (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|parentrepo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|parentproject
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|branch (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|branch
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
name|ref
argument_list|(
literal|"^"
operator|+
name|RefNames
operator|.
name|fullName
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ref
argument_list|(
name|RefNames
operator|.
name|fullName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|hashtag (String hashtag)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|hashtag
parameter_list|(
name|String
name|hashtag
parameter_list|)
block|{
return|return
operator|new
name|HashtagPredicate
argument_list|(
name|hashtag
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|topic (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|topic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExactTopicPredicate
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|intopic (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|intopic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegexTopicPredicate
argument_list|(
name|name
argument_list|)
return|;
block|}
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExactTopicPredicate
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|new
name|FuzzyTopicPredicate
argument_list|(
name|name
argument_list|,
name|args
operator|.
name|index
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|ref (String ref)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|ref
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegexRefPredicate
argument_list|(
name|ref
argument_list|)
return|;
block|}
return|return
operator|new
name|RefPredicate
argument_list|(
name|ref
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|f (String file)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|f
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|file
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|file (String file)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|file
parameter_list|(
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegexPathPredicate
argument_list|(
name|file
argument_list|)
return|;
block|}
return|return
name|EqualsFilePredicate
operator|.
name|create
argument_list|(
name|args
argument_list|,
name|file
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|path (String path)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegexPathPredicate
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
operator|new
name|EqualsPathPredicate
argument_list|(
name|FIELD_PATH
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|ext (String ext)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|ext
parameter_list|(
name|String
name|ext
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
name|extension
argument_list|(
name|ext
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|extension (String ext)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|extension
parameter_list|(
name|String
name|ext
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|EXTENSION
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileExtensionPredicate
argument_list|(
name|ext
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'extension' operator is not supported by change index version"
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|onlyexts (String extList)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|onlyexts
parameter_list|(
name|String
name|extList
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
name|onlyextensions
argument_list|(
name|extList
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|onlyextensions (String extList)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|onlyextensions
parameter_list|(
name|String
name|extList
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|ONLY_EXTENSIONS
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileExtensionListPredicate
argument_list|(
name|extList
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'onlyextensions' operator is not supported by change index version"
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|footer (String footer)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|footer
parameter_list|(
name|String
name|footer
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|FOOTER
argument_list|)
condition|)
block|{
return|return
operator|new
name|FooterPredicate
argument_list|(
name|footer
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'footer' operator is not supported by change index version"
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|dir (String directory)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|dir
parameter_list|(
name|String
name|directory
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
name|directory
argument_list|(
name|directory
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|directory (String directory)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|directory
parameter_list|(
name|String
name|directory
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|DIRECTORY
argument_list|)
condition|)
block|{
if|if
condition|(
name|directory
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegexDirectoryPredicate
argument_list|(
name|directory
argument_list|)
return|;
block|}
return|return
operator|new
name|DirectoryPredicate
argument_list|(
name|directory
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'directory' operator is not supported by change index version"
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|label (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|label
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
literal|null
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|group
init|=
literal|null
decl_stmt|;
comment|// Parse for:
comment|// label:Code-Review=1,user=jsmith or
comment|// label:Code-Review=1,jsmith or
comment|// label:Code-Review=1,group=android_approvers or
comment|// label:Code-Review=1,android_approvers
comment|// user/groups without a label will first attempt to match user
comment|// Special case: votes by owners can be tracked with ",owner":
comment|// label:Code-Review+2,owner
comment|// label:Code-Review+2,user=owner
name|List
argument_list|<
name|String
argument_list|>
name|splitReviewer
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|name
operator|=
name|splitReviewer
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// remove all but the vote piece, e.g.'CodeReview=1'
if|if
condition|(
name|splitReviewer
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// process the user/group piece
name|PredicateArgs
name|lblArgs
init|=
operator|new
name|PredicateArgs
argument_list|(
name|splitReviewer
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|lblArgs
operator|.
name|keyValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|getKey
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ARG_ID_USER
argument_list|)
condition|)
block|{
if|if
condition|(
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|ARG_ID_OWNER
argument_list|)
condition|)
block|{
name|accounts
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|OWNER_ACCOUNT_ID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accounts
operator|=
name|parseAccount
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pair
operator|.
name|getKey
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ARG_ID_GROUP
argument_list|)
condition|)
block|{
name|group
operator|=
name|parseGroup
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|getUUID
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Invalid argument identifier '"
operator|+
name|pair
operator|.
name|getKey
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|String
name|value
range|:
name|lblArgs
operator|.
name|positional
control|)
block|{
if|if
condition|(
name|accounts
operator|!=
literal|null
operator|||
name|group
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"more than one user/group specified ("
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|ARG_ID_OWNER
argument_list|)
condition|)
block|{
name|accounts
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|OWNER_ACCOUNT_ID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accounts
operator|=
name|parseAccount
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|qpex
parameter_list|)
block|{
comment|// If it doesn't match an account, see if it matches a group
comment|// (accounts get precedence)
try|try
block|{
name|group
operator|=
name|parseGroup
argument_list|(
name|value
argument_list|)
operator|.
name|getUUID
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
throw|throw
name|error
argument_list|(
literal|"Neither user nor group "
operator|+
name|value
operator|+
literal|" found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|accounts
operator|=
name|getMembers
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
comment|// If the vote piece looks like Code-Review=NEED with a valid non-numeric
comment|// submit record status, interpret as a submit record query.
name|int
name|eq
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|SUBMIT_RECORD
argument_list|)
operator|&&
name|eq
operator|>
literal|0
condition|)
block|{
name|String
name|statusName
init|=
name|name
operator|.
name|substring
argument_list|(
name|eq
operator|+
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isInt
argument_list|(
name|statusName
argument_list|)
condition|)
block|{
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|class
argument_list|,
name|statusName
argument_list|)
operator|.
name|orNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Invalid label status "
operator|+
name|statusName
operator|+
literal|" in "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|SubmitRecordPredicate
operator|.
name|create
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eq
argument_list|)
argument_list|,
name|status
argument_list|,
name|accounts
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|LabelPredicate
argument_list|(
name|args
argument_list|,
name|name
argument_list|,
name|accounts
argument_list|,
name|group
argument_list|)
return|;
block|}
DECL|method|isInt (String s)
specifier|private
specifier|static
name|boolean
name|isInt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Ints
operator|.
name|tryParse
argument_list|(
name|s
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Operator
DECL|method|message (String text)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|message
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|MessagePredicate
argument_list|(
name|args
operator|.
name|index
argument_list|,
name|text
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|star (String label)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|star
parameter_list|(
name|String
name|label
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|StarPredicate
argument_list|(
name|self
argument_list|()
argument_list|,
name|label
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|starredby (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|starredby
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|starredby
argument_list|(
name|parseAccount
argument_list|(
name|who
argument_list|)
argument_list|)
return|;
block|}
DECL|method|starredby (Set<Account.Id> who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|starredby
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|who
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|who
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|starredby
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|starredby (Account.Id who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|starredby
parameter_list|(
name|Account
operator|.
name|Id
name|who
parameter_list|)
block|{
return|return
operator|new
name|StarPredicate
argument_list|(
name|who
argument_list|,
name|StarredChangesUtil
operator|.
name|DEFAULT_LABEL
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|watchedby (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|watchedby
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|m
init|=
name|parseAccount
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IsWatchedByPredicate
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|m
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|callerId
decl_stmt|;
try|try
block|{
name|CurrentUser
name|caller
init|=
name|args
operator|.
name|self
operator|.
name|get
argument_list|()
decl_stmt|;
name|callerId
operator|=
name|caller
operator|.
name|isIdentifiedUser
argument_list|()
condition|?
name|caller
operator|.
name|getAccountId
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProvisionException
name|e
parameter_list|)
block|{
name|callerId
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|m
control|)
block|{
comment|// Each child IsWatchedByPredicate includes a visibility filter for the
comment|// corresponding user, to ensure that predicate subtree only returns
comment|// changes visible to that user. The exception is if one of the users is
comment|// the caller of this method, in which case visibility is already being
comment|// checked at the top level.
name|p
operator|.
name|add
argument_list|(
operator|new
name|IsWatchedByPredicate
argument_list|(
name|args
operator|.
name|asUser
argument_list|(
name|id
argument_list|)
argument_list|,
operator|!
name|id
operator|.
name|equals
argument_list|(
name|callerId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|draftby (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|draftby
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|m
init|=
name|parseAccount
argument_list|(
name|who
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|m
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|m
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|draftby
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|draftby (Account.Id who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|draftby
parameter_list|(
name|Account
operator|.
name|Id
name|who
parameter_list|)
block|{
return|return
operator|new
name|HasDraftByPredicate
argument_list|(
name|who
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|visibleto (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|visibleto
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|isSelf
argument_list|(
name|who
argument_list|)
condition|)
block|{
return|return
name|is_visible
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|parseAccount
argument_list|(
name|who
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|visibleto
argument_list|(
name|args
operator|.
name|userFactory
operator|.
name|create
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|QueryRequiresAuthException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// Otherwise continue: if it's not an account, maybe it's a group?
block|}
name|Collection
argument_list|<
name|GroupReference
argument_list|>
name|suggestions
init|=
name|args
operator|.
name|groupBackend
operator|.
name|suggest
argument_list|(
name|who
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|suggestions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupReference
name|ref
range|:
name|suggestions
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|visibleto
argument_list|(
operator|new
name|SingleGroupUser
argument_list|(
name|ids
argument_list|)
argument_list|)
return|;
block|}
throw|throw
name|error
argument_list|(
literal|"No user or group matches \""
operator|+
name|who
operator|+
literal|"\"."
argument_list|)
throw|;
block|}
DECL|method|visibleto (CurrentUser user)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|visibleto
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
operator|new
name|ChangeIsVisibleToPredicate
argument_list|(
name|args
operator|.
name|notesFactory
argument_list|,
name|user
argument_list|,
name|args
operator|.
name|permissionBackend
argument_list|,
name|args
operator|.
name|projectCache
argument_list|,
name|args
operator|.
name|anonymousUserProvider
argument_list|)
return|;
block|}
DECL|method|is_visible ()
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|is_visible
parameter_list|()
throws|throws
name|QueryParseException
block|{
return|return
name|visibleto
argument_list|(
name|args
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|o (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|o
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|owner
argument_list|(
name|who
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|owner (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|owner
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|owner
argument_list|(
name|parseAccount
argument_list|(
name|who
argument_list|,
parameter_list|(
name|AccountState
name|s
parameter_list|)
lambda|->
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|owner (Set<Account.Id> who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|owner
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|List
argument_list|<
name|OwnerPredicate
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|who
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|who
control|)
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|OwnerPredicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|ownerDefaultField (String who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|ownerDefaultField
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
name|parseAccount
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
name|accounts
operator|.
name|size
argument_list|()
operator|>
name|MAX_ACCOUNTS_PER_DEFAULT_FIELD
condition|)
block|{
return|return
name|Predicate
operator|.
name|any
argument_list|()
return|;
block|}
return|return
name|owner
argument_list|(
name|accounts
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|assignee (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|assignee
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|assignee
argument_list|(
name|parseAccount
argument_list|(
name|who
argument_list|,
parameter_list|(
name|AccountState
name|s
parameter_list|)
lambda|->
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assignee (Set<Account.Id> who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|assignee
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|List
argument_list|<
name|AssigneePredicate
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|who
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|who
control|)
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|AssigneePredicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|ownerin (String group)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|ownerin
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
block|{
name|GroupReference
name|g
init|=
name|GroupBackends
operator|.
name|findBestSuggestion
argument_list|(
name|args
operator|.
name|groupBackend
argument_list|,
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Group "
operator|+
name|group
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|AccountGroup
operator|.
name|UUID
name|groupId
init|=
name|g
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|GroupDescription
operator|.
name|Basic
name|groupDescription
init|=
name|args
operator|.
name|groupBackend
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|groupDescription
operator|instanceof
name|GroupDescription
operator|.
name|Internal
operator|)
condition|)
block|{
return|return
operator|new
name|OwnerinPredicate
argument_list|(
name|args
operator|.
name|userFactory
argument_list|,
name|groupId
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
name|getMembers
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OwnerPredicate
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|accounts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|accounts
control|)
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|OwnerPredicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|r (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|r
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|reviewer
argument_list|(
name|who
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|reviewer (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewer
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|reviewer
argument_list|(
name|who
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|reviewerDefaultField (String who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewerDefaultField
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|reviewer
argument_list|(
name|who
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|reviewer (String who, boolean forDefaultField)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewer
parameter_list|(
name|String
name|who
parameter_list|,
name|boolean
name|forDefaultField
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|byState
init|=
name|reviewerByState
argument_list|(
name|who
argument_list|,
name|ReviewerStateInternal
operator|.
name|REVIEWER
argument_list|,
name|forDefaultField
argument_list|)
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|byState
argument_list|,
name|Predicate
operator|.
expr|<
name|ChangeData
operator|>
name|any
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Predicate
operator|.
name|any
argument_list|()
return|;
block|}
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|WIP
argument_list|)
condition|)
block|{
return|return
name|Predicate
operator|.
name|and
argument_list|(
name|Predicate
operator|.
name|not
argument_list|(
operator|new
name|BooleanPredicate
argument_list|(
name|ChangeField
operator|.
name|WIP
argument_list|)
argument_list|)
argument_list|,
name|byState
argument_list|)
return|;
block|}
return|return
name|byState
return|;
block|}
annotation|@
name|Operator
DECL|method|cc (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|cc
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|reviewerByState
argument_list|(
name|who
argument_list|,
name|ReviewerStateInternal
operator|.
name|CC
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|reviewerin (String group)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewerin
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|GroupReference
name|g
init|=
name|GroupBackends
operator|.
name|findBestSuggestion
argument_list|(
name|args
operator|.
name|groupBackend
argument_list|,
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Group "
operator|+
name|group
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ReviewerinPredicate
argument_list|(
name|args
operator|.
name|userFactory
argument_list|,
name|g
operator|.
name|getUUID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|tr (String trackingId)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|tr
parameter_list|(
name|String
name|trackingId
parameter_list|)
block|{
return|return
operator|new
name|TrackingIdPredicate
argument_list|(
name|trackingId
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|bug (String trackingId)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|bug
parameter_list|(
name|String
name|trackingId
parameter_list|)
block|{
return|return
name|tr
argument_list|(
name|trackingId
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|limit (String query)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|limit
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|Integer
name|limit
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Invalid limit: "
operator|+
name|query
argument_list|)
throw|;
block|}
return|return
operator|new
name|LimitPredicate
argument_list|<>
argument_list|(
name|FIELD_LIMIT
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|added (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|added
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|AddedPredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|deleted (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|deleted
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|DeletedPredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|size (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|size
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
name|delta
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|delta (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|delta
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|DeltaPredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|commentby (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|commentby
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|commentby
argument_list|(
name|parseAccount
argument_list|(
name|who
argument_list|)
argument_list|)
return|;
block|}
DECL|method|commentby (Set<Account.Id> who)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|commentby
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|who
parameter_list|)
block|{
name|List
argument_list|<
name|CommentByPredicate
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|who
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|who
control|)
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|CommentByPredicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|from (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|from
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ownerIds
init|=
name|parseAccount
argument_list|(
name|who
argument_list|)
decl_stmt|;
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|owner
argument_list|(
name|ownerIds
argument_list|)
argument_list|,
name|commentby
argument_list|(
name|ownerIds
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|query (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|query
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|QueryParseException
block|{
try|try
init|(
name|Repository
name|git
init|=
name|args
operator|.
name|repoManager
operator|.
name|openRepository
argument_list|(
name|args
operator|.
name|allUsersName
argument_list|)
init|)
block|{
name|VersionedAccountQueries
name|q
init|=
name|VersionedAccountQueries
operator|.
name|forUser
argument_list|(
name|self
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|load
argument_list|(
name|args
operator|.
name|allUsersName
argument_list|,
name|git
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|q
operator|.
name|getQueryList
argument_list|()
operator|.
name|getQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
return|return
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Unknown named query (no "
operator|+
name|args
operator|.
name|allUsersName
operator|+
literal|" repo): "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Error parsing named query: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Unknown named query: "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|reviewedby (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewedby
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|IsReviewedPredicate
operator|.
name|create
argument_list|(
name|parseAccount
argument_list|(
name|who
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|destination (String name)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|destination
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|QueryParseException
block|{
try|try
init|(
name|Repository
name|git
init|=
name|args
operator|.
name|repoManager
operator|.
name|openRepository
argument_list|(
name|args
operator|.
name|allUsersName
argument_list|)
init|)
block|{
name|VersionedAccountDestinations
name|d
init|=
name|VersionedAccountDestinations
operator|.
name|forUser
argument_list|(
name|self
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|load
argument_list|(
name|args
operator|.
name|allUsersName
argument_list|,
name|git
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|BranchNameKey
argument_list|>
name|destinations
init|=
name|d
operator|.
name|getDestinationList
argument_list|()
operator|.
name|getDestinations
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|destinations
operator|!=
literal|null
operator|&&
operator|!
name|destinations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|DestinationPredicate
argument_list|(
name|destinations
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Unknown named destination (no "
operator|+
name|args
operator|.
name|allUsersName
operator|+
literal|" repo): "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Error parsing named destination: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"Unknown named destination: "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Operator
DECL|method|author (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|author
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|EXACT_AUTHOR
argument_list|)
condition|)
block|{
return|return
name|getAuthorOrCommitterPredicate
argument_list|(
name|who
operator|.
name|trim
argument_list|()
argument_list|,
name|ExactAuthorPredicate
operator|::
operator|new
argument_list|,
name|AuthorPredicate
operator|::
operator|new
argument_list|)
return|;
block|}
return|return
name|getAuthorOrCommitterFullTextPredicate
argument_list|(
name|who
operator|.
name|trim
argument_list|()
argument_list|,
name|AuthorPredicate
operator|::
operator|new
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|committer (String who)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|committer
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|EXACT_COMMITTER
argument_list|)
condition|)
block|{
return|return
name|getAuthorOrCommitterPredicate
argument_list|(
name|who
operator|.
name|trim
argument_list|()
argument_list|,
name|ExactCommitterPredicate
operator|::
operator|new
argument_list|,
name|CommitterPredicate
operator|::
operator|new
argument_list|)
return|;
block|}
return|return
name|getAuthorOrCommitterFullTextPredicate
argument_list|(
name|who
operator|.
name|trim
argument_list|()
argument_list|,
name|CommitterPredicate
operator|::
operator|new
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|submittable (String str)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|submittable
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|SubmitRecord
operator|.
name|Status
name|status
init|=
name|Enums
operator|.
name|getIfPresent
argument_list|(
name|SubmitRecord
operator|.
name|Status
operator|.
name|class
argument_list|,
name|str
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|.
name|orNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"invalid value for submittable:"
operator|+
name|str
argument_list|)
throw|;
block|}
return|return
operator|new
name|SubmittablePredicate
argument_list|(
name|status
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|unresolved (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|unresolved
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|IsUnresolvedPredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Operator
DECL|method|revertof (String value)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|revertof
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|args
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|REVERT_OF
argument_list|)
condition|)
block|{
return|return
operator|new
name|RevertOfPredicate
argument_list|(
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
literal|"'revertof' operator is not supported by change index version"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|defaultField (String query)
specifier|protected
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|defaultField
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|query
operator|.
name|startsWith
argument_list|(
literal|"refs/"
argument_list|)
condition|)
block|{
return|return
name|ref
argument_list|(
name|query
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|DEF_CHANGE
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|predicates
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|predicates
operator|.
name|add
argument_list|(
name|change
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
comment|// Skip.
block|}
comment|// For PAT_LEGACY_ID, it may also be the prefix of some commits.
if|if
condition|(
name|query
operator|.
name|length
argument_list|()
operator|>=
literal|6
operator|&&
name|PAT_LEGACY_ID
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|commit
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|predicates
argument_list|)
return|;
block|}
comment|// Adapt the capacity of this list when adding more default predicates.
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|predicates
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|11
argument_list|)
decl_stmt|;
try|try
block|{
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
init|=
name|ownerDefaultField
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|p
argument_list|,
name|Predicate
operator|.
expr|<
name|ChangeData
operator|>
name|any
argument_list|()
argument_list|)
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|IOException
decl||
name|ConfigInvalidException
decl||
name|QueryParseException
name|e
parameter_list|)
block|{
comment|// Skip.
block|}
try|try
block|{
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|p
init|=
name|reviewerDefaultField
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|p
argument_list|,
name|Predicate
operator|.
expr|<
name|ChangeData
operator|>
name|any
argument_list|()
argument_list|)
condition|)
block|{
name|predicates
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|IOException
decl||
name|ConfigInvalidException
decl||
name|QueryParseException
name|e
parameter_list|)
block|{
comment|// Skip.
block|}
name|predicates
operator|.
name|add
argument_list|(
name|file
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|predicates
operator|.
name|add
argument_list|(
name|label
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|IOException
decl||
name|ConfigInvalidException
decl||
name|QueryParseException
name|e
parameter_list|)
block|{
comment|// Skip.
block|}
name|predicates
operator|.
name|add
argument_list|(
name|commit
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|message
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|comment
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|projects
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|ref
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|branch
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|topic
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
comment|// Adapt the capacity of the "predicates" list when adding more default
comment|// predicates.
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|predicates
argument_list|)
return|;
block|}
DECL|method|getAuthorOrCommitterPredicate ( String who, Function<String, Predicate<ChangeData>> exactPredicateFunc, Function<String, Predicate<ChangeData>> fullPredicateFunc)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|getAuthorOrCommitterPredicate
parameter_list|(
name|String
name|who
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|exactPredicateFunc
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|fullPredicateFunc
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|Address
operator|.
name|tryParse
argument_list|(
name|who
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|exactPredicateFunc
operator|.
name|apply
argument_list|(
name|who
argument_list|)
return|;
block|}
return|return
name|getAuthorOrCommitterFullTextPredicate
argument_list|(
name|who
argument_list|,
name|fullPredicateFunc
argument_list|)
return|;
block|}
DECL|method|getAuthorOrCommitterFullTextPredicate ( String who, Function<String, Predicate<ChangeData>> fullPredicateFunc)
specifier|private
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|getAuthorOrCommitterFullTextPredicate
parameter_list|(
name|String
name|who
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|fullPredicateFunc
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|SchemaUtil
operator|.
name|getNameParts
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"invalid value"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|predicates
init|=
name|parts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|fullPredicateFunc
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Predicate
operator|.
name|and
argument_list|(
name|predicates
argument_list|)
return|;
block|}
DECL|method|getMembers (AccountGroup.UUID g)
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getMembers
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|g
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|allMembers
init|=
name|args
operator|.
name|groupMembers
operator|.
name|listAccounts
argument_list|(
name|g
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Account
operator|::
name|id
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxTerms
init|=
name|args
operator|.
name|indexConfig
operator|.
name|maxTerms
argument_list|()
decl_stmt|;
if|if
condition|(
name|allMembers
operator|.
name|size
argument_list|()
operator|>
name|maxTerms
condition|)
block|{
comment|// limit the number of query terms otherwise Gerrit will barf
name|accounts
operator|=
name|allMembers
operator|.
name|stream
argument_list|()
operator|.
name|limit
argument_list|(
name|maxTerms
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accounts
operator|=
name|allMembers
expr_stmt|;
block|}
return|return
name|accounts
return|;
block|}
DECL|method|parseAccount (String who)
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|parseAccount
parameter_list|(
name|String
name|who
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
block|{
return|return
name|args
operator|.
name|accountResolver
operator|.
name|resolve
argument_list|(
name|who
argument_list|)
operator|.
name|asNonEmptyIdSet
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnresolvableAccountException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isSelf
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|QueryRequiresAuthException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseAccount ( String who, java.util.function.Predicate<AccountState> activityFilter)
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|parseAccount
parameter_list|(
name|String
name|who
parameter_list|,
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
argument_list|<
name|AccountState
argument_list|>
name|activityFilter
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
block|{
return|return
name|args
operator|.
name|accountResolver
operator|.
name|resolve
argument_list|(
name|who
argument_list|,
name|activityFilter
argument_list|)
operator|.
name|asNonEmptyIdSet
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnresolvableAccountException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isSelf
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|QueryRequiresAuthException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|QueryParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseGroup (String group)
specifier|private
name|GroupReference
name|parseGroup
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|GroupReference
name|g
init|=
name|GroupBackends
operator|.
name|findBestSuggestion
argument_list|(
name|args
operator|.
name|groupBackend
argument_list|,
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Group "
operator|+
name|group
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|g
return|;
block|}
DECL|method|parseChange (String value)
specifier|private
name|List
argument_list|<
name|Change
argument_list|>
name|parseChange
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|QueryParseException
block|{
if|if
condition|(
name|PAT_LEGACY_ID
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|asChanges
argument_list|(
name|args
operator|.
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byLegacyChangeId
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|PAT_CHANGE_ID
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Change
argument_list|>
name|changes
init|=
name|asChanges
argument_list|(
name|args
operator|.
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byKeyPrefix
argument_list|(
name|parseChangeId
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Change "
operator|+
name|value
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|changes
return|;
block|}
throw|throw
name|error
argument_list|(
literal|"Change "
operator|+
name|value
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
DECL|method|parseChangeId (String value)
specifier|private
specifier|static
name|String
name|parseChangeId
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'i'
condition|)
block|{
name|value
operator|=
literal|"I"
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|self ()
specifier|private
name|Account
operator|.
name|Id
name|self
parameter_list|()
throws|throws
name|QueryParseException
block|{
return|return
name|args
operator|.
name|getIdentifiedUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
return|;
block|}
DECL|method|reviewerByState ( String who, ReviewerStateInternal state, boolean forDefaultField)
specifier|public
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewerByState
parameter_list|(
name|String
name|who
parameter_list|,
name|ReviewerStateInternal
name|state
parameter_list|,
name|boolean
name|forDefaultField
parameter_list|)
throws|throws
name|QueryParseException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewerByEmailPredicate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|index
operator|.
name|getSchema
argument_list|()
operator|.
name|hasField
argument_list|(
name|ChangeField
operator|.
name|REVIEWER_BY_EMAIL
argument_list|)
condition|)
block|{
name|Address
name|address
init|=
name|Address
operator|.
name|tryParse
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|reviewerByEmailPredicate
operator|=
name|ReviewerByEmailPredicate
operator|.
name|forState
argument_list|(
name|address
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|reviewerPredicate
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
name|parseAccount
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|forDefaultField
operator|||
name|accounts
operator|.
name|size
argument_list|()
operator|<=
name|MAX_ACCOUNTS_PER_DEFAULT_FIELD
condition|)
block|{
name|reviewerPredicate
operator|=
name|Predicate
operator|.
name|or
argument_list|(
name|accounts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|id
lambda|->
name|ReviewerPredicate
operator|.
name|forState
argument_list|(
name|id
argument_list|,
name|state
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
comment|// Propagate this exception only if we can't use 'who' to query by email
if|if
condition|(
name|reviewerByEmailPredicate
operator|==
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|reviewerPredicate
operator|!=
literal|null
operator|&&
name|reviewerByEmailPredicate
operator|!=
literal|null
condition|)
block|{
return|return
name|Predicate
operator|.
name|or
argument_list|(
name|reviewerPredicate
argument_list|,
name|reviewerByEmailPredicate
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|reviewerPredicate
operator|!=
literal|null
condition|)
block|{
return|return
name|reviewerPredicate
return|;
block|}
elseif|else
if|if
condition|(
name|reviewerByEmailPredicate
operator|!=
literal|null
condition|)
block|{
return|return
name|reviewerByEmailPredicate
return|;
block|}
else|else
block|{
return|return
name|Predicate
operator|.
name|any
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

