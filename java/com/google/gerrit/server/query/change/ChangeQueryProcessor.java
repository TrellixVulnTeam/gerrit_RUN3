begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryBuilder
operator|.
name|FIELD_LIMIT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|PluginDefinedInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|IndexPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|DynamicOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|DynamicOptions
operator|.
name|DynamicBean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountLimits
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeAttributeFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PluginDefinedAttributesFactories
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|PluginDefinedAttributesFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexRewriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeSchemaDefinitions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|IndexedChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Query processor for the change index.  *  *<p>Instances are one-time-use. Other singleton classes should inject a Provider rather than  * holding on to a single instance.  */
end_comment

begin_class
DECL|class|ChangeQueryProcessor
specifier|public
class|class
name|ChangeQueryProcessor
extends|extends
name|QueryProcessor
argument_list|<
name|ChangeData
argument_list|>
implements|implements
name|DynamicOptions
operator|.
name|BeanReceiver
implements|,
name|DynamicOptions
operator|.
name|BeanProvider
implements|,
name|PluginDefinedAttributesFactory
block|{
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|attributeFactoriesByPlugin
specifier|private
specifier|final
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|ChangeAttributeFactory
argument_list|>
name|attributeFactoriesByPlugin
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|anonymousUserProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUserProvider
decl_stmt|;
DECL|field|dynamicBeans
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DynamicBean
argument_list|>
name|dynamicBeans
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// It is assumed that basic rewrites do not touch visibleto predicates.
name|checkState
argument_list|(
operator|!
name|ChangeIsVisibleToPredicate
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|IndexPredicate
operator|.
name|class
argument_list|)
argument_list|,
literal|"ChangeQueryProcessor assumes visibleto is not used by the index rewriter."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|ChangeQueryProcessor ( Provider<CurrentUser> userProvider, AccountLimits.Factory limitsFactory, MetricMaker metricMaker, IndexConfig indexConfig, ChangeIndexCollection indexes, ChangeIndexRewriter rewriter, ChangeNotes.Factory notesFactory, DynamicMap<ChangeAttributeFactory> attributeFactories, PermissionBackend permissionBackend, ProjectCache projectCache, Provider<AnonymousUser> anonymousUserProvider)
name|ChangeQueryProcessor
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|AccountLimits
operator|.
name|Factory
name|limitsFactory
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|IndexConfig
name|indexConfig
parameter_list|,
name|ChangeIndexCollection
name|indexes
parameter_list|,
name|ChangeIndexRewriter
name|rewriter
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|DynamicMap
argument_list|<
name|ChangeAttributeFactory
argument_list|>
name|attributeFactories
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|Provider
argument_list|<
name|AnonymousUser
argument_list|>
name|anonymousUserProvider
parameter_list|)
block|{
name|super
argument_list|(
name|metricMaker
argument_list|,
name|ChangeSchemaDefinitions
operator|.
name|INSTANCE
argument_list|,
name|indexConfig
argument_list|,
name|indexes
argument_list|,
name|rewriter
argument_list|,
name|FIELD_LIMIT
argument_list|,
parameter_list|()
lambda|->
name|limitsFactory
operator|.
name|create
argument_list|(
name|userProvider
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getQueryLimit
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|anonymousUserProvider
operator|=
name|anonymousUserProvider
expr_stmt|;
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ChangeAttributeFactory
argument_list|>
name|factoriesBuilder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Eagerly call Extension#get() rather than storing Extensions, since that method invokes the
comment|// Provider on every call, which could be expensive if we invoke it once for every change.
name|attributeFactories
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|factoriesBuilder
operator|.
name|put
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|,
name|e
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attributeFactoriesByPlugin
operator|=
name|factoriesBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|enforceVisibility (boolean enforce)
specifier|public
name|ChangeQueryProcessor
name|enforceVisibility
parameter_list|(
name|boolean
name|enforce
parameter_list|)
block|{
name|super
operator|.
name|enforceVisibility
argument_list|(
name|enforce
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|createOptions ( IndexConfig indexConfig, int start, int limit, Set<String> requestedFields)
specifier|protected
name|QueryOptions
name|createOptions
parameter_list|(
name|IndexConfig
name|indexConfig
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|limit
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestedFields
parameter_list|)
block|{
return|return
name|IndexedChangeQuery
operator|.
name|createOptions
argument_list|(
name|indexConfig
argument_list|,
name|start
argument_list|,
name|limit
argument_list|,
name|requestedFields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setDynamicBean (String plugin, DynamicBean dynamicBean)
specifier|public
name|void
name|setDynamicBean
parameter_list|(
name|String
name|plugin
parameter_list|,
name|DynamicBean
name|dynamicBean
parameter_list|)
block|{
name|dynamicBeans
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|dynamicBean
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDynamicBean (String plugin)
specifier|public
name|DynamicBean
name|getDynamicBean
parameter_list|(
name|String
name|plugin
parameter_list|)
block|{
return|return
name|dynamicBeans
operator|.
name|get
argument_list|(
name|plugin
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (ChangeData cd)
specifier|public
name|List
argument_list|<
name|PluginDefinedInfo
argument_list|>
name|create
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
return|return
name|PluginDefinedAttributesFactories
operator|.
name|createAll
argument_list|(
name|cd
argument_list|,
name|this
argument_list|,
name|attributeFactoriesByPlugin
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
operator|new
name|Extension
argument_list|<>
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|::
name|getValue
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|enforceVisibility (Predicate<ChangeData> pred)
specifier|protected
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|enforceVisibility
parameter_list|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|pred
parameter_list|)
block|{
return|return
operator|new
name|AndChangeSource
argument_list|(
name|pred
argument_list|,
operator|new
name|ChangeIsVisibleToPredicate
argument_list|(
name|notesFactory
argument_list|,
name|userProvider
operator|.
name|get
argument_list|()
argument_list|,
name|permissionBackend
argument_list|,
name|projectCache
argument_list|,
name|anonymousUserProvider
argument_list|)
argument_list|,
name|start
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|formatForLogging (ChangeData changeData)
specifier|protected
name|String
name|formatForLogging
parameter_list|(
name|ChangeData
name|changeData
parameter_list|)
block|{
return|return
name|changeData
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

