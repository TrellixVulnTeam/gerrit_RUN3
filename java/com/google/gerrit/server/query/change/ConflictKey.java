begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Enums
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|ProtoCacheSerializers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|ProtoCacheSerializers
operator|.
name|ObjectIdConverter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|proto
operator|.
name|Cache
operator|.
name|ConflictKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_class
annotation|@
name|AutoValue
DECL|class|ConflictKey
specifier|public
specifier|abstract
class|class
name|ConflictKey
block|{
DECL|method|create ( AnyObjectId commit, AnyObjectId otherCommit, SubmitType submitType, boolean contentMerge)
specifier|public
specifier|static
name|ConflictKey
name|create
parameter_list|(
name|AnyObjectId
name|commit
parameter_list|,
name|AnyObjectId
name|otherCommit
parameter_list|,
name|SubmitType
name|submitType
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
block|{
name|ObjectId
name|commitCopy
init|=
name|commit
operator|.
name|copy
argument_list|()
decl_stmt|;
name|ObjectId
name|otherCommitCopy
init|=
name|otherCommit
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
name|submitType
operator|==
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
condition|)
block|{
comment|// The conflict check for FF-only is non-symmetrical, and we need to treat (X, Y) differently
comment|// from (Y, X). Store the commits in the input order.
return|return
operator|new
name|AutoValue_ConflictKey
argument_list|(
name|commitCopy
argument_list|,
name|otherCommitCopy
argument_list|,
name|submitType
argument_list|,
name|contentMerge
argument_list|)
return|;
block|}
comment|// Otherwise, the check is symmetrical; sort commit/otherCommit before storing, so the actual
comment|// key is independent of the order in which they are passed to this method.
return|return
operator|new
name|AutoValue_ConflictKey
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|min
argument_list|(
name|commitCopy
argument_list|,
name|otherCommitCopy
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|max
argument_list|(
name|commitCopy
argument_list|,
name|otherCommitCopy
argument_list|)
argument_list|,
name|submitType
argument_list|,
name|contentMerge
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createWithoutNormalization ( AnyObjectId commit, AnyObjectId otherCommit, SubmitType submitType, boolean contentMerge)
specifier|static
name|ConflictKey
name|createWithoutNormalization
parameter_list|(
name|AnyObjectId
name|commit
parameter_list|,
name|AnyObjectId
name|otherCommit
parameter_list|,
name|SubmitType
name|submitType
parameter_list|,
name|boolean
name|contentMerge
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ConflictKey
argument_list|(
name|commit
operator|.
name|copy
argument_list|()
argument_list|,
name|otherCommit
operator|.
name|copy
argument_list|()
argument_list|,
name|submitType
argument_list|,
name|contentMerge
argument_list|)
return|;
block|}
DECL|method|commit ()
specifier|public
specifier|abstract
name|ObjectId
name|commit
parameter_list|()
function_decl|;
DECL|method|otherCommit ()
specifier|public
specifier|abstract
name|ObjectId
name|otherCommit
parameter_list|()
function_decl|;
DECL|method|submitType ()
specifier|public
specifier|abstract
name|SubmitType
name|submitType
parameter_list|()
function_decl|;
DECL|method|contentMerge ()
specifier|public
specifier|abstract
name|boolean
name|contentMerge
parameter_list|()
function_decl|;
DECL|enum|Serializer
specifier|public
specifier|static
enum|enum
name|Serializer
implements|implements
name|CacheSerializer
argument_list|<
name|ConflictKey
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|SUBMIT_TYPE_CONVERTER
specifier|private
specifier|static
specifier|final
name|Converter
argument_list|<
name|String
argument_list|,
name|SubmitType
argument_list|>
name|SUBMIT_TYPE_CONVERTER
init|=
name|Enums
operator|.
name|stringConverter
argument_list|(
name|SubmitType
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|serialize (ConflictKey object)
specifier|public
name|byte
index|[]
name|serialize
parameter_list|(
name|ConflictKey
name|object
parameter_list|)
block|{
name|ObjectIdConverter
name|idConverter
init|=
name|ObjectIdConverter
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|ProtoCacheSerializers
operator|.
name|toByteArray
argument_list|(
name|ConflictKeyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCommit
argument_list|(
name|idConverter
operator|.
name|toByteString
argument_list|(
name|object
operator|.
name|commit
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setOtherCommit
argument_list|(
name|idConverter
operator|.
name|toByteString
argument_list|(
name|object
operator|.
name|otherCommit
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSubmitType
argument_list|(
name|SUBMIT_TYPE_CONVERTER
operator|.
name|reverse
argument_list|()
operator|.
name|convert
argument_list|(
name|object
operator|.
name|submitType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setContentMerge
argument_list|(
name|object
operator|.
name|contentMerge
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deserialize (byte[] in)
specifier|public
name|ConflictKey
name|deserialize
parameter_list|(
name|byte
index|[]
name|in
parameter_list|)
block|{
name|ConflictKeyProto
name|proto
init|=
name|ProtoCacheSerializers
operator|.
name|parseUnchecked
argument_list|(
name|ConflictKeyProto
operator|.
name|parser
argument_list|()
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|ObjectIdConverter
name|idConverter
init|=
name|ObjectIdConverter
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|create
argument_list|(
name|idConverter
operator|.
name|fromByteString
argument_list|(
name|proto
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|,
name|idConverter
operator|.
name|fromByteString
argument_list|(
name|proto
operator|.
name|getOtherCommit
argument_list|()
argument_list|)
argument_list|,
name|SUBMIT_TYPE_CONVERTER
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getSubmitType
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getContentMerge
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

