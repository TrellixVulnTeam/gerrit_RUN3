begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|LazyArgs
operator|.
name|lazy
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|PostFilterPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
operator|.
name|CodeReviewRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeQueryBuilder
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|IntegrationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|SubmitDryRun
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
DECL|class|ConflictsPredicate
specifier|public
class|class
name|ConflictsPredicate
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
comment|// UI code may depend on this string, so use caution when changing.
DECL|field|TOO_MANY_FILES
specifier|protected
specifier|static
specifier|final
name|String
name|TOO_MANY_FILES
init|=
literal|"too many files to find conflicts"
decl_stmt|;
DECL|method|ConflictsPredicate ()
specifier|private
name|ConflictsPredicate
parameter_list|()
block|{}
DECL|method|create (Arguments args, String value, Change c)
specifier|public
specifier|static
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|create
parameter_list|(
name|Arguments
name|args
parameter_list|,
name|String
name|value
parameter_list|,
name|Change
name|c
parameter_list|)
throws|throws
name|QueryParseException
block|{
name|ChangeData
name|cd
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
try|try
block|{
name|cd
operator|=
name|args
operator|.
name|changeDataFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|files
operator|=
name|cd
operator|.
name|currentFilePaths
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|warnWithOccasionalStackTrace
argument_list|(
name|e
argument_list|,
literal|"Error constructing conflicts predicates for change %s in %s"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ChangeIndexPredicate
operator|.
name|none
argument_list|()
return|;
block|}
if|if
condition|(
literal|3
operator|+
name|files
operator|.
name|size
argument_list|()
operator|>
name|args
operator|.
name|indexConfig
operator|.
name|maxTerms
argument_list|()
condition|)
block|{
comment|// Short-circuit with a nice error message if we exceed the index
comment|// backend's term limit. This assumes that "conflicts:foo" is the entire
comment|// query; if there are more terms in the input, we might not
comment|// short-circuit here, which will result in a more generic error message
comment|// later on in the query parsing.
throw|throw
operator|new
name|QueryParseException
argument_list|(
name|TOO_MANY_FILES
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|filePredicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|files
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|filePredicates
operator|.
name|add
argument_list|(
operator|new
name|EqualsPathPredicate
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_PATH
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|and
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|ProjectPredicate
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|RefPredicate
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|branch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
name|Predicate
operator|.
name|not
argument_list|(
operator|new
name|LegacyChangeIdPredicate
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
name|Predicate
operator|.
name|or
argument_list|(
name|filePredicates
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeDataCache
name|changeDataCache
init|=
operator|new
name|ChangeDataCache
argument_list|(
name|cd
argument_list|,
name|args
operator|.
name|projectCache
argument_list|)
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
operator|new
name|CheckConflict
argument_list|(
name|value
argument_list|,
name|args
argument_list|,
name|c
argument_list|,
name|changeDataCache
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Predicate
operator|.
name|and
argument_list|(
name|and
argument_list|)
return|;
block|}
DECL|class|CheckConflict
specifier|private
specifier|static
specifier|final
class|class
name|CheckConflict
extends|extends
name|PostFilterPredicate
argument_list|<
name|ChangeData
argument_list|>
block|{
DECL|field|args
specifier|private
specifier|final
name|Arguments
name|args
decl_stmt|;
DECL|field|dest
specifier|private
specifier|final
name|BranchNameKey
name|dest
decl_stmt|;
DECL|field|changeDataCache
specifier|private
specifier|final
name|ChangeDataCache
name|changeDataCache
decl_stmt|;
DECL|method|CheckConflict (String value, Arguments args, Change c, ChangeDataCache changeDataCache)
name|CheckConflict
parameter_list|(
name|String
name|value
parameter_list|,
name|Arguments
name|args
parameter_list|,
name|Change
name|c
parameter_list|,
name|ChangeDataCache
name|changeDataCache
parameter_list|)
block|{
name|super
argument_list|(
name|ChangeQueryBuilder
operator|.
name|FIELD_CONFLICTS
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|c
operator|.
name|getDest
argument_list|()
expr_stmt|;
name|this
operator|.
name|changeDataCache
operator|=
name|changeDataCache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (ChangeData object)
specifier|public
name|boolean
name|match
parameter_list|(
name|ChangeData
name|object
parameter_list|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|object
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|otherProject
init|=
literal|null
decl_stmt|;
name|ObjectId
name|other
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Change
name|otherChange
init|=
name|object
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherChange
operator|==
literal|null
operator|||
operator|!
name|otherChange
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|dest
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|otherProject
operator|=
name|otherChange
operator|.
name|getProject
argument_list|()
expr_stmt|;
name|SubmitTypeRecord
name|str
init|=
name|object
operator|.
name|submitTypeRecord
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isOk
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ProjectState
name|projectState
decl_stmt|;
try|try
block|{
name|projectState
operator|=
name|changeDataCache
operator|.
name|getProjectState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|other
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|object
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ConflictKey
name|conflictsKey
init|=
name|ConflictKey
operator|.
name|create
argument_list|(
name|changeDataCache
operator|.
name|getTestAgainst
argument_list|()
argument_list|,
name|other
argument_list|,
name|str
operator|.
name|type
argument_list|,
name|projectState
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|USE_CONTENT_MERGE
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|maybeConflicts
init|=
name|args
operator|.
name|conflictsCache
operator|.
name|getIfPresent
argument_list|(
name|conflictsKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeConflicts
operator|!=
literal|null
condition|)
block|{
return|return
name|maybeConflicts
return|;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|args
operator|.
name|repoManager
operator|.
name|openRepository
argument_list|(
name|otherChange
operator|.
name|getProject
argument_list|()
argument_list|)
init|;
name|CodeReviewRevWalk
name|rw
operator|=
name|CodeReviewCommit
operator|.
name|newRevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|boolean
name|conflicts
init|=
operator|!
name|args
operator|.
name|submitDryRun
operator|.
name|run
argument_list|(
literal|null
argument_list|,
name|str
operator|.
name|type
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|otherChange
operator|.
name|getDest
argument_list|()
argument_list|,
name|changeDataCache
operator|.
name|getTestAgainst
argument_list|()
argument_list|,
name|other
argument_list|,
name|getAlreadyAccepted
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|)
argument_list|)
decl_stmt|;
name|args
operator|.
name|conflictsCache
operator|.
name|put
argument_list|(
name|conflictsKey
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
return|return
name|conflicts
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IntegrationException
decl||
name|NoSuchProjectException
decl||
name|StorageException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|ObjectId
name|finalOther
init|=
name|other
decl_stmt|;
name|warnWithOccasionalStackTrace
argument_list|(
name|e
argument_list|,
literal|"Merge failure checking conflicts of change %s in %s (%s): %s"
argument_list|,
name|id
argument_list|,
name|firstNonNull
argument_list|(
name|otherProject
argument_list|,
literal|"unknown project"
argument_list|)
argument_list|,
name|lazy
argument_list|(
operator|(
operator|)
operator|->
name|finalOther
operator|!=
literal|null
condition|?
name|finalOther
operator|.
name|name
argument_list|()
else|:
literal|"unknown commit"
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCost ()
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
DECL|method|getAlreadyAccepted (Repository repo, RevWalk rw)
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|getAlreadyAccepted
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|)
throws|throws
name|IntegrationException
block|{
try|try
block|{
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|accepted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|SubmitDryRun
operator|.
name|addCommits
argument_list|(
name|changeDataCache
operator|.
name|getAlreadyAccepted
argument_list|(
name|repo
argument_list|)
argument_list|,
name|rw
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
name|ObjectId
name|tip
init|=
name|changeDataCache
operator|.
name|getTestAgainst
argument_list|()
decl_stmt|;
if|if
condition|(
name|tip
operator|!=
literal|null
condition|)
block|{
name|accepted
operator|.
name|add
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|tip
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|accepted
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to determine already accepted commits."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|ChangeDataCache
specifier|private
specifier|static
class|class
name|ChangeDataCache
block|{
DECL|field|cd
specifier|private
specifier|final
name|ChangeData
name|cd
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|testAgainst
specifier|private
name|ObjectId
name|testAgainst
decl_stmt|;
DECL|field|projectState
specifier|private
name|ProjectState
name|projectState
decl_stmt|;
DECL|field|alreadyAccepted
specifier|private
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|alreadyAccepted
decl_stmt|;
DECL|method|ChangeDataCache (ChangeData cd, ProjectCache projectCache)
name|ChangeDataCache
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|cd
operator|=
name|cd
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
DECL|method|getTestAgainst ()
name|ObjectId
name|getTestAgainst
parameter_list|()
block|{
if|if
condition|(
name|testAgainst
operator|==
literal|null
condition|)
block|{
name|testAgainst
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|cd
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|testAgainst
return|;
block|}
DECL|method|getProjectState ()
name|ProjectState
name|getProjectState
parameter_list|()
throws|throws
name|NoSuchProjectException
block|{
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
name|projectState
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|projectState
return|;
block|}
DECL|method|getAlreadyAccepted (Repository repo)
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|getAlreadyAccepted
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|alreadyAccepted
operator|==
literal|null
condition|)
block|{
name|alreadyAccepted
operator|=
name|SubmitDryRun
operator|.
name|getAlreadyAccepted
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|alreadyAccepted
return|;
block|}
block|}
DECL|method|warnWithOccasionalStackTrace (Throwable cause, String format, Object... args)
specifier|private
specifier|static
name|void
name|warnWithOccasionalStackTrace
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|logVarargs
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|cause
argument_list|)
operator|.
name|atMostEvery
argument_list|(
literal|1
argument_list|,
name|MINUTES
argument_list|)
operator|.
name|logVarargs
argument_list|(
literal|"(Re-logging with stack trace) "
operator|+
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

