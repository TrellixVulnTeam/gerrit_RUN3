begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeKind
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeKindCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|LabelNormalizer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_comment
comment|/**  * Computes approvals for a given patch set by looking at approvals applied to the given patch set  * and by additionally inferring approvals from the patch set's parents. The latter is done by  * asserting a change's kind and checking the project config for allowed forward-inference.  *  *<p>The result of a copy may either be stored, as when stamping approvals in the database at  * submit time, or refreshed on demand, as when reading approvals from the NoteDb.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ApprovalInference
specifier|public
class|class
name|ApprovalInference
block|{
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|changeKindCache
specifier|private
specifier|final
name|ChangeKindCache
name|changeKindCache
decl_stmt|;
DECL|field|labelNormalizer
specifier|private
specifier|final
name|LabelNormalizer
name|labelNormalizer
decl_stmt|;
annotation|@
name|Inject
DECL|method|ApprovalInference ( ProjectCache projectCache, ChangeKindCache changeKindCache, LabelNormalizer labelNormalizer)
name|ApprovalInference
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|ChangeKindCache
name|changeKindCache
parameter_list|,
name|LabelNormalizer
name|labelNormalizer
parameter_list|)
block|{
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|changeKindCache
operator|=
name|changeKindCache
expr_stmt|;
name|this
operator|.
name|labelNormalizer
operator|=
name|labelNormalizer
expr_stmt|;
block|}
comment|/**    * Returns all approvals that apply to the given patch set. Honors direct and indirect (approval    * on parents) approvals.    */
DECL|method|forPatchSet ( ChangeNotes notes, PatchSet.Id psId, @Nullable RevWalk rw, @Nullable Config repoConfig)
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|forPatchSet
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
annotation|@
name|Nullable
name|RevWalk
name|rw
parameter_list|,
annotation|@
name|Nullable
name|Config
name|repoConfig
parameter_list|)
block|{
name|ProjectState
name|project
decl_stmt|;
try|try
block|{
name|project
operator|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|getForPatchSetWithoutNormalization
argument_list|(
name|notes
argument_list|,
name|project
argument_list|,
name|psId
argument_list|,
name|rw
argument_list|,
name|repoConfig
argument_list|)
decl_stmt|;
return|return
name|labelNormalizer
operator|.
name|normalize
argument_list|(
name|notes
argument_list|,
name|approvals
argument_list|)
operator|.
name|getNormalized
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|canCopy ( ProjectState project, PatchSetApproval psa, PatchSet.Id psId, ChangeKind kind)
specifier|private
specifier|static
name|boolean
name|canCopy
parameter_list|(
name|ProjectState
name|project
parameter_list|,
name|PatchSetApproval
name|psa
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ChangeKind
name|kind
parameter_list|)
block|{
name|int
name|n
init|=
name|psa
operator|.
name|key
argument_list|()
operator|.
name|patchSetId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|n
operator|!=
name|psId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LabelType
name|type
init|=
name|project
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|byLabel
argument_list|(
name|psa
operator|.
name|labelId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|type
operator|.
name|isCopyMinScore
argument_list|()
operator|&&
name|type
operator|.
name|isMaxNegative
argument_list|(
name|psa
argument_list|)
operator|)
operator|||
operator|(
name|type
operator|.
name|isCopyMaxScore
argument_list|()
operator|&&
name|type
operator|.
name|isMaxPositive
argument_list|(
name|psa
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|MERGE_FIRST_PARENT_UPDATE
case|:
return|return
name|type
operator|.
name|isCopyAllScoresOnMergeFirstParentUpdate
argument_list|()
return|;
case|case
name|NO_CODE_CHANGE
case|:
return|return
name|type
operator|.
name|isCopyAllScoresIfNoCodeChange
argument_list|()
return|;
case|case
name|TRIVIAL_REBASE
case|:
return|return
name|type
operator|.
name|isCopyAllScoresOnTrivialRebase
argument_list|()
return|;
case|case
name|NO_CHANGE
case|:
return|return
name|type
operator|.
name|isCopyAllScoresIfNoChange
argument_list|()
operator|||
name|type
operator|.
name|isCopyAllScoresOnTrivialRebase
argument_list|()
operator|||
name|type
operator|.
name|isCopyAllScoresOnMergeFirstParentUpdate
argument_list|()
operator|||
name|type
operator|.
name|isCopyAllScoresIfNoCodeChange
argument_list|()
return|;
case|case
name|REWORK
case|:
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|method|getForPatchSetWithoutNormalization ( ChangeNotes notes, ProjectState project, PatchSet.Id psId, @Nullable RevWalk rw, @Nullable Config repoConfig)
specifier|private
name|Collection
argument_list|<
name|PatchSetApproval
argument_list|>
name|getForPatchSetWithoutNormalization
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|ProjectState
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
annotation|@
name|Nullable
name|RevWalk
name|rw
parameter_list|,
annotation|@
name|Nullable
name|Config
name|repoConfig
parameter_list|)
block|{
name|checkState
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
argument_list|,
literal|"project must match %s, %s"
argument_list|,
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|ps
init|=
name|notes
operator|.
name|load
argument_list|()
operator|.
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// Add approvals on the given patch set to the result
name|Table
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|resultByUser
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|PatchSetApproval
argument_list|>
name|approvalsForGivenPatchSet
init|=
name|notes
operator|.
name|load
argument_list|()
operator|.
name|getApprovals
argument_list|()
operator|.
name|get
argument_list|(
name|ps
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|approvalsForGivenPatchSet
operator|.
name|forEach
argument_list|(
name|psa
lambda|->
name|resultByUser
operator|.
name|put
argument_list|(
name|psa
operator|.
name|label
argument_list|()
argument_list|,
name|psa
operator|.
name|accountId
argument_list|()
argument_list|,
name|psa
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bail out immediately if this is the first patch set. Return only approvals granted on the
comment|// given patch set.
if|if
condition|(
name|psId
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|resultByUser
operator|.
name|values
argument_list|()
return|;
block|}
comment|// Call this algorithm recursively to check if the prior patch set had approvals. This has the
comment|// advantage that all caches - most importantly ChangeKindCache - have values cached for what we
comment|// need for this computation.
comment|// The way this algorithm is written is that any approval will be copied forward by one patch
comment|// set at a time if configs and change kind allow so. Once an approval is held back - for
comment|// example because the patch set is a REWORK - it will not be picked up again in a future
comment|// patch set.
name|PatchSet
name|priorPatchSet
init|=
name|notes
operator|.
name|load
argument_list|()
operator|.
name|getPatchSets
argument_list|()
operator|.
name|lowerEntry
argument_list|(
name|psId
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|priorPatchSet
operator|==
literal|null
condition|)
block|{
return|return
name|resultByUser
operator|.
name|values
argument_list|()
return|;
block|}
name|Iterable
argument_list|<
name|PatchSetApproval
argument_list|>
name|priorApprovals
init|=
name|getForPatchSetWithoutNormalization
argument_list|(
name|notes
argument_list|,
name|project
argument_list|,
name|priorPatchSet
operator|.
name|id
argument_list|()
argument_list|,
name|rw
argument_list|,
name|repoConfig
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|priorApprovals
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|resultByUser
operator|.
name|values
argument_list|()
return|;
block|}
comment|// Add labels from the previous patch set to the result in case the label isn't already there
comment|// and settings as well as change kind allow copying.
name|ChangeKind
name|kind
init|=
name|changeKindCache
operator|.
name|getChangeKind
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|rw
argument_list|,
name|repoConfig
argument_list|,
name|priorPatchSet
operator|.
name|commitId
argument_list|()
argument_list|,
name|ps
operator|.
name|commitId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|priorApprovals
control|)
block|{
if|if
condition|(
name|resultByUser
operator|.
name|contains
argument_list|(
name|psa
operator|.
name|label
argument_list|()
argument_list|,
name|psa
operator|.
name|accountId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|canCopy
argument_list|(
name|project
argument_list|,
name|psa
argument_list|,
name|ps
operator|.
name|id
argument_list|()
argument_list|,
name|kind
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|resultByUser
operator|.
name|put
argument_list|(
name|psa
operator|.
name|label
argument_list|()
argument_list|,
name|psa
operator|.
name|accountId
argument_list|()
argument_list|,
name|psa
operator|.
name|copyWithPatchSet
argument_list|(
name|ps
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultByUser
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

