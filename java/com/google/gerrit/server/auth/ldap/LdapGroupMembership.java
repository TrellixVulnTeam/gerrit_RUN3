begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.auth.ldap
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|auth
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ListGroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_class
DECL|class|LdapGroupMembership
class|class
name|LdapGroupMembership
implements|implements
name|GroupMembership
block|{
DECL|field|membershipCache
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|membershipCache
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|membership
specifier|private
name|GroupMembership
name|membership
decl_stmt|;
DECL|method|LdapGroupMembership ( LoadingCache<String, Set<AccountGroup.UUID>> membershipCache, ProjectCache projectCache, String id)
name|LdapGroupMembership
parameter_list|(
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|membershipCache
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|membershipCache
operator|=
name|membershipCache
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contains (AccountGroup.UUID groupId)
specifier|public
name|boolean
name|contains
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupId
parameter_list|)
block|{
return|return
name|get
argument_list|()
operator|.
name|contains
argument_list|(
name|groupId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAnyOf (Iterable<AccountGroup.UUID> groupIds)
specifier|public
name|boolean
name|containsAnyOf
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
parameter_list|)
block|{
return|return
name|get
argument_list|()
operator|.
name|containsAnyOf
argument_list|(
name|groupIds
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|intersection (Iterable<AccountGroup.UUID> groupIds)
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|intersection
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupIds
parameter_list|)
block|{
return|return
name|get
argument_list|()
operator|.
name|intersection
argument_list|(
name|groupIds
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKnownGroups ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getKnownGroups
parameter_list|()
block|{
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|g
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|get
argument_list|()
operator|.
name|getKnownGroups
argument_list|()
argument_list|)
decl_stmt|;
name|g
operator|.
name|retainAll
argument_list|(
name|projectCache
operator|.
name|guessRelevantGroupUUIDs
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
DECL|method|get ()
specifier|private
specifier|synchronized
name|GroupMembership
name|get
parameter_list|()
block|{
if|if
condition|(
name|membership
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|membership
operator|=
operator|new
name|ListGroupMembership
argument_list|(
name|membershipCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LdapGroupBackend
operator|.
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot lookup membershipsOf %s in LDAP"
argument_list|,
name|id
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|membership
operator|=
name|GroupMembership
operator|.
name|EMPTY
expr_stmt|;
block|}
block|}
return|return
name|membership
return|;
block|}
block|}
end_class

end_unit

