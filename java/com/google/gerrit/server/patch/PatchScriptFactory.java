begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|CommentDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Patch
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LargeObjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchScriptBuilder
operator|.
name|IntraLineDiffCalculatorResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_class
DECL|class|PatchScriptFactory
specifier|public
class|class
name|PatchScriptFactory
implements|implements
name|Callable
argument_list|<
name|PatchScript
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ( ChangeNotes notes, String fileName, @Assisted(R) PatchSet.Id patchSetA, @Assisted(R) PatchSet.Id patchSetB, DiffPreferencesInfo diffPrefs)
name|PatchScriptFactory
name|create
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|fileName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"patchSetA"
argument_list|)
name|PatchSet
operator|.
name|Id
name|patchSetA
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"patchSetB"
argument_list|)
name|PatchSet
operator|.
name|Id
name|patchSetB
parameter_list|,
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
function_decl|;
DECL|method|create ( ChangeNotes notes, String fileName, int parentNum, PatchSet.Id patchSetB, DiffPreferencesInfo diffPrefs)
name|PatchScriptFactory
name|create
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|fileName
parameter_list|,
name|int
name|parentNum
parameter_list|,
name|PatchSet
operator|.
name|Id
name|patchSetB
parameter_list|,
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
function_decl|;
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|builderFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|PatchScriptBuilder
argument_list|>
name|builderFactory
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|commentsUtil
specifier|private
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|psa
annotation|@
name|Nullable
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psa
decl_stmt|;
DECL|field|parentNum
specifier|private
specifier|final
name|int
name|parentNum
decl_stmt|;
DECL|field|psb
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psb
decl_stmt|;
DECL|field|diffPrefs
specifier|private
specifier|final
name|DiffPreferencesInfo
name|diffPrefs
decl_stmt|;
DECL|field|editReader
specifier|private
specifier|final
name|ChangeEditUtil
name|editReader
decl_stmt|;
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|loadHistory
specifier|private
name|boolean
name|loadHistory
init|=
literal|true
decl_stmt|;
DECL|field|loadComments
specifier|private
name|boolean
name|loadComments
init|=
literal|true
decl_stmt|;
DECL|field|notes
specifier|private
name|ChangeNotes
name|notes
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|PatchScriptFactory ( GitRepositoryManager grm, PatchSetUtil psUtil, Provider<PatchScriptBuilder> builderFactory, PatchListCache patchListCache, CommentsUtil commentsUtil, ChangeEditUtil editReader, Provider<CurrentUser> userProvider, PermissionBackend permissionBackend, ProjectCache projectCache, @Assisted ChangeNotes notes, @Assisted String fileName, @Assisted(R) @Nullable PatchSet.Id patchSetA, @Assisted(R) PatchSet.Id patchSetB, @Assisted DiffPreferencesInfo diffPrefs)
name|PatchScriptFactory
parameter_list|(
name|GitRepositoryManager
name|grm
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|Provider
argument_list|<
name|PatchScriptBuilder
argument_list|>
name|builderFactory
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|ChangeEditUtil
name|editReader
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|Assisted
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Assisted
name|String
name|fileName
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"patchSetA"
argument_list|)
annotation|@
name|Nullable
name|PatchSet
operator|.
name|Id
name|patchSetA
parameter_list|,
annotation|@
name|Assisted
argument_list|(
literal|"patchSetB"
argument_list|)
name|PatchSet
operator|.
name|Id
name|patchSetB
parameter_list|,
annotation|@
name|Assisted
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|grm
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|builderFactory
operator|=
name|builderFactory
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|editReader
operator|=
name|editReader
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|psa
operator|=
name|patchSetA
expr_stmt|;
name|this
operator|.
name|parentNum
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|psb
operator|=
name|patchSetB
expr_stmt|;
name|this
operator|.
name|diffPrefs
operator|=
name|diffPrefs
expr_stmt|;
name|changeId
operator|=
name|patchSetB
operator|.
name|changeId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AssistedInject
DECL|method|PatchScriptFactory ( GitRepositoryManager grm, PatchSetUtil psUtil, Provider<PatchScriptBuilder> builderFactory, PatchListCache patchListCache, CommentsUtil commentsUtil, ChangeEditUtil editReader, Provider<CurrentUser> userProvider, PermissionBackend permissionBackend, ProjectCache projectCache, @Assisted ChangeNotes notes, @Assisted String fileName, @Assisted int parentNum, @Assisted PatchSet.Id patchSetB, @Assisted DiffPreferencesInfo diffPrefs)
name|PatchScriptFactory
parameter_list|(
name|GitRepositoryManager
name|grm
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|Provider
argument_list|<
name|PatchScriptBuilder
argument_list|>
name|builderFactory
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|ChangeEditUtil
name|editReader
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|Assisted
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Assisted
name|String
name|fileName
parameter_list|,
annotation|@
name|Assisted
name|int
name|parentNum
parameter_list|,
annotation|@
name|Assisted
name|PatchSet
operator|.
name|Id
name|patchSetB
parameter_list|,
annotation|@
name|Assisted
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|grm
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|builderFactory
operator|=
name|builderFactory
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|editReader
operator|=
name|editReader
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|psa
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parentNum
operator|=
name|parentNum
expr_stmt|;
name|this
operator|.
name|psb
operator|=
name|patchSetB
expr_stmt|;
name|this
operator|.
name|diffPrefs
operator|=
name|diffPrefs
expr_stmt|;
name|changeId
operator|=
name|patchSetB
operator|.
name|changeId
argument_list|()
expr_stmt|;
name|checkArgument
argument_list|(
name|parentNum
operator|>=
literal|0
argument_list|,
literal|"parentNum must be>= 0"
argument_list|)
expr_stmt|;
block|}
DECL|method|setLoadHistory (boolean load)
specifier|public
name|void
name|setLoadHistory
parameter_list|(
name|boolean
name|load
parameter_list|)
block|{
name|loadHistory
operator|=
name|load
expr_stmt|;
block|}
DECL|method|setLoadComments (boolean load)
specifier|public
name|void
name|setLoadComments
parameter_list|(
name|boolean
name|load
parameter_list|)
block|{
name|loadComments
operator|=
name|load
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|PatchScript
name|call
parameter_list|()
throws|throws
name|LargeObjectException
throws|,
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
try|try
block|{
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|change
argument_list|(
name|notes
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
operator|.
name|statePermitsRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
try|try
init|(
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
init|)
block|{
try|try
block|{
name|validatePatchSetId
argument_list|(
name|psa
argument_list|)
expr_stmt|;
name|validatePatchSetId
argument_list|(
name|psb
argument_list|)
expr_stmt|;
name|ObjectId
name|aId
init|=
name|getAId
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ObjectId
name|bId
init|=
name|getBId
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|changeEdit
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|bId
operator|==
literal|null
condition|)
block|{
comment|// Change edit: create synthetic PatchSet corresponding to the edit.
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
name|editReader
operator|.
name|byChange
argument_list|(
name|notes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|edit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
throw|;
block|}
name|bId
operator|=
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
expr_stmt|;
name|changeEdit
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|PatchList
name|list
init|=
name|listFor
argument_list|(
name|keyFor
argument_list|(
name|aId
argument_list|,
name|bId
argument_list|,
name|diffPrefs
operator|.
name|ignoreWhitespace
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|PatchScriptBuilder
name|b
init|=
name|newBuilder
argument_list|()
decl_stmt|;
specifier|final
name|PatchListEntry
name|content
init|=
name|list
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
argument_list|>
name|history
init|=
name|loadHistory
argument_list|(
name|content
argument_list|,
name|changeEdit
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|CommentDetail
argument_list|>
name|comments
init|=
name|loadComments
argument_list|(
name|content
argument_list|,
name|changeEdit
argument_list|,
name|history
operator|.
name|orElse
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|b
operator|.
name|toPatchScript
argument_list|(
name|git
argument_list|,
name|list
argument_list|,
name|content
argument_list|,
name|comments
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|history
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"File content unavailable"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|LargeObjectException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|LargeObjectException
argument_list|(
literal|"File content is too large"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Repository %s not found"
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot open repository %s"
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|loadComments ( PatchListEntry content, boolean changeEdit, ImmutableList<Patch> history)
specifier|private
name|Optional
argument_list|<
name|CommentDetail
argument_list|>
name|loadComments
parameter_list|(
name|PatchListEntry
name|content
parameter_list|,
name|boolean
name|changeEdit
parameter_list|,
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
name|history
parameter_list|)
block|{
if|if
condition|(
operator|!
name|loadComments
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
operator|new
name|CommentsLoader
argument_list|(
name|psa
argument_list|,
name|psb
argument_list|,
name|userProvider
argument_list|,
name|notes
argument_list|,
name|commentsUtil
argument_list|)
operator|.
name|load
argument_list|(
name|changeEdit
argument_list|,
name|content
operator|.
name|getChangeType
argument_list|()
argument_list|,
name|content
operator|.
name|getOldName
argument_list|()
argument_list|,
name|content
operator|.
name|getNewName
argument_list|()
argument_list|,
name|history
argument_list|)
return|;
block|}
DECL|method|loadHistory (PatchListEntry content, boolean changeEdit)
specifier|private
name|Optional
argument_list|<
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
argument_list|>
name|loadHistory
parameter_list|(
name|PatchListEntry
name|content
parameter_list|,
name|boolean
name|changeEdit
parameter_list|)
block|{
if|if
condition|(
operator|!
name|loadHistory
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|HistoryLoader
name|loader
init|=
operator|new
name|HistoryLoader
argument_list|(
name|psa
argument_list|,
name|psb
argument_list|,
name|psUtil
argument_list|,
name|notes
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|loader
operator|.
name|load
argument_list|(
name|changeEdit
argument_list|,
name|content
operator|.
name|getChangeType
argument_list|()
argument_list|,
name|content
operator|.
name|getOldName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAId ()
specifier|private
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|getAId
parameter_list|()
block|{
if|if
condition|(
name|psa
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|checkState
argument_list|(
name|parentNum
operator|<
literal|0
argument_list|,
literal|"expected no parentNum when psa is present"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|psa
operator|.
name|get
argument_list|()
operator|!=
literal|0
argument_list|,
literal|"edit not supported for left side"
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getCommitId
argument_list|(
name|psa
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBId ()
specifier|private
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|getBId
parameter_list|()
block|{
if|if
condition|(
name|psb
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Change edit
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getCommitId
argument_list|(
name|psb
argument_list|)
argument_list|)
return|;
block|}
DECL|method|keyFor (ObjectId aId, ObjectId bId, Whitespace whitespace)
specifier|private
name|PatchListKey
name|keyFor
parameter_list|(
name|ObjectId
name|aId
parameter_list|,
name|ObjectId
name|bId
parameter_list|,
name|Whitespace
name|whitespace
parameter_list|)
block|{
if|if
condition|(
name|parentNum
operator|<
literal|0
condition|)
block|{
return|return
name|PatchListKey
operator|.
name|againstCommit
argument_list|(
name|aId
argument_list|,
name|bId
argument_list|,
name|whitespace
argument_list|)
return|;
block|}
return|return
name|PatchListKey
operator|.
name|againstParentNum
argument_list|(
name|parentNum
operator|+
literal|1
argument_list|,
name|bId
argument_list|,
name|whitespace
argument_list|)
return|;
block|}
DECL|method|listFor (PatchListKey key)
specifier|private
name|PatchList
name|listFor
parameter_list|(
name|PatchListKey
name|key
parameter_list|)
throws|throws
name|PatchListNotAvailableException
block|{
return|return
name|patchListCache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newBuilder ()
specifier|private
name|PatchScriptBuilder
name|newBuilder
parameter_list|()
block|{
specifier|final
name|PatchScriptBuilder
name|b
init|=
name|builderFactory
operator|.
name|get
argument_list|()
decl_stmt|;
name|b
operator|.
name|setChange
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setDiffPrefs
argument_list|(
name|diffPrefs
argument_list|)
expr_stmt|;
if|if
condition|(
name|diffPrefs
operator|.
name|intralineDifference
condition|)
block|{
name|b
operator|.
name|setIntraLineDiffCalculator
argument_list|(
operator|new
name|IntraLineDiffCalculator
argument_list|(
name|patchListCache
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|diffPrefs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
DECL|method|getCommitId (PatchSet.Id psId)
specifier|private
name|ObjectId
name|getCommitId
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|PatchSet
name|ps
init|=
name|psUtil
operator|.
name|get
argument_list|(
name|notes
argument_list|,
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|psId
operator|.
name|changeId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ps
operator|.
name|commitId
argument_list|()
return|;
block|}
DECL|method|validatePatchSetId (PatchSet.Id psId)
specifier|private
name|void
name|validatePatchSetId
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
throws|throws
name|NoSuchChangeException
block|{
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
comment|// OK, means use base;
block|}
elseif|else
if|if
condition|(
name|changeId
operator|.
name|equals
argument_list|(
name|psId
operator|.
name|changeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// OK, same change;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
block|}
DECL|class|HistoryLoader
specifier|private
specifier|static
class|class
name|HistoryLoader
block|{
DECL|field|psa
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psa
decl_stmt|;
DECL|field|psb
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psb
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|notes
specifier|private
specifier|final
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|method|HistoryLoader ( PatchSet.Id psa, PatchSet.Id psb, PatchSetUtil psUtil, ChangeNotes notes, String fileName)
name|HistoryLoader
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psa
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psb
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|psa
operator|=
name|psa
expr_stmt|;
name|this
operator|.
name|psb
operator|=
name|psb
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
DECL|method|load (boolean changeEdit, ChangeType changeType, String oldName)
specifier|private
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
name|load
parameter_list|(
name|boolean
name|changeEdit
parameter_list|,
name|ChangeType
name|changeType
parameter_list|,
name|String
name|oldName
parameter_list|)
block|{
comment|// This seems like a cheap trick. It doesn't properly account for a
comment|// file that gets renamed between patch set 1 and patch set 2. We
comment|// will wind up packing the wrong Patch object because we didn't do
comment|// proper rename detection between the patch sets.
comment|//
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Patch
argument_list|>
name|historyBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|psUtil
operator|.
name|byChange
argument_list|(
name|notes
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|fileName
decl_stmt|;
if|if
condition|(
name|psa
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|changeType
condition|)
block|{
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
if|if
condition|(
name|ps
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|psa
argument_list|)
condition|)
block|{
name|name
operator|=
name|oldName
expr_stmt|;
block|}
break|break;
case|case
name|MODIFIED
case|:
case|case
name|DELETED
case|:
case|case
name|ADDED
case|:
case|case
name|REWRITE
case|:
break|break;
block|}
block|}
name|Patch
name|p
init|=
operator|new
name|Patch
argument_list|(
name|Patch
operator|.
name|key
argument_list|(
name|ps
operator|.
name|id
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|historyBuilder
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changeEdit
condition|)
block|{
name|Patch
name|p
init|=
operator|new
name|Patch
argument_list|(
name|Patch
operator|.
name|key
argument_list|(
name|PatchSet
operator|.
name|id
argument_list|(
name|psb
operator|.
name|changeId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|historyBuilder
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|historyBuilder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|class|CommentsLoader
specifier|private
specifier|static
class|class
name|CommentsLoader
block|{
DECL|field|psa
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psa
decl_stmt|;
DECL|field|psb
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psb
decl_stmt|;
DECL|field|userProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
decl_stmt|;
DECL|field|notes
specifier|private
specifier|final
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|commentsUtil
specifier|private
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|comments
specifier|private
name|CommentDetail
name|comments
decl_stmt|;
DECL|method|CommentsLoader ( PatchSet.Id psa, PatchSet.Id psb, Provider<CurrentUser> userProvider, ChangeNotes notes, CommentsUtil commentsUtil)
name|CommentsLoader
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psa
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psb
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|userProvider
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|)
block|{
name|this
operator|.
name|psa
operator|=
name|psa
expr_stmt|;
name|this
operator|.
name|psb
operator|=
name|psb
expr_stmt|;
name|this
operator|.
name|userProvider
operator|=
name|userProvider
expr_stmt|;
name|this
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
block|}
DECL|method|load ( boolean changeEdit, ChangeType changeType, String oldName, String newName, ImmutableList<Patch> history)
specifier|private
name|Optional
argument_list|<
name|CommentDetail
argument_list|>
name|load
parameter_list|(
name|boolean
name|changeEdit
parameter_list|,
name|ChangeType
name|changeType
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|,
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
name|history
parameter_list|)
block|{
comment|// TODO: Implement this method with CommentDetailBuilder (this class doesn't exists yet).
comment|// This is a legacy code which create final object and populate it and then returns it.
if|if
condition|(
name|changeEdit
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Patch
argument_list|>
name|byKey
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|history
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|byKey
operator|.
name|put
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|comments
operator|=
operator|new
name|CommentDetail
argument_list|(
name|psa
argument_list|,
name|psb
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|changeType
condition|)
block|{
case|case
name|ADDED
case|:
case|case
name|MODIFIED
case|:
name|loadPublished
argument_list|(
name|byKey
argument_list|,
name|newName
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|loadPublished
argument_list|(
name|byKey
argument_list|,
name|newName
argument_list|)
expr_stmt|;
break|break;
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
if|if
condition|(
name|psa
operator|!=
literal|null
condition|)
block|{
name|loadPublished
argument_list|(
name|byKey
argument_list|,
name|oldName
argument_list|)
expr_stmt|;
block|}
name|loadPublished
argument_list|(
name|byKey
argument_list|,
name|newName
argument_list|)
expr_stmt|;
break|break;
case|case
name|REWRITE
case|:
break|break;
block|}
name|CurrentUser
name|user
init|=
name|userProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|Account
operator|.
name|Id
name|me
init|=
name|user
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|changeType
condition|)
block|{
case|case
name|ADDED
case|:
case|case
name|MODIFIED
case|:
name|loadDrafts
argument_list|(
name|byKey
argument_list|,
name|me
argument_list|,
name|newName
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|loadDrafts
argument_list|(
name|byKey
argument_list|,
name|me
argument_list|,
name|newName
argument_list|)
expr_stmt|;
break|break;
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
if|if
condition|(
name|psa
operator|!=
literal|null
condition|)
block|{
name|loadDrafts
argument_list|(
name|byKey
argument_list|,
name|me
argument_list|,
name|oldName
argument_list|)
expr_stmt|;
block|}
name|loadDrafts
argument_list|(
name|byKey
argument_list|,
name|me
argument_list|,
name|newName
argument_list|)
expr_stmt|;
break|break;
case|case
name|REWRITE
case|:
break|break;
block|}
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|comments
argument_list|)
return|;
block|}
DECL|method|loadPublished (Map<Patch.Key, Patch> byKey, String file)
specifier|private
name|void
name|loadPublished
parameter_list|(
name|Map
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Patch
argument_list|>
name|byKey
parameter_list|,
name|String
name|file
parameter_list|)
block|{
for|for
control|(
name|Comment
name|c
range|:
name|commentsUtil
operator|.
name|publishedByChangeFile
argument_list|(
name|notes
argument_list|,
name|file
argument_list|)
control|)
block|{
name|comments
operator|.
name|include
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|c
operator|.
name|key
operator|.
name|patchSetId
argument_list|)
decl_stmt|;
name|Patch
operator|.
name|Key
name|pKey
init|=
name|Patch
operator|.
name|key
argument_list|(
name|psId
argument_list|,
name|c
operator|.
name|key
operator|.
name|filename
argument_list|)
decl_stmt|;
name|Patch
name|p
init|=
name|byKey
operator|.
name|get
argument_list|(
name|pKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setCommentCount
argument_list|(
name|p
operator|.
name|getCommentCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadDrafts (Map<Patch.Key, Patch> byKey, Account.Id me, String file)
specifier|private
name|void
name|loadDrafts
parameter_list|(
name|Map
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Patch
argument_list|>
name|byKey
parameter_list|,
name|Account
operator|.
name|Id
name|me
parameter_list|,
name|String
name|file
parameter_list|)
block|{
for|for
control|(
name|Comment
name|c
range|:
name|commentsUtil
operator|.
name|draftByChangeFileAuthor
argument_list|(
name|notes
argument_list|,
name|file
argument_list|,
name|me
argument_list|)
control|)
block|{
name|comments
operator|.
name|include
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|c
operator|.
name|key
operator|.
name|patchSetId
argument_list|)
decl_stmt|;
name|Patch
operator|.
name|Key
name|pKey
init|=
name|Patch
operator|.
name|key
argument_list|(
name|psId
argument_list|,
name|c
operator|.
name|key
operator|.
name|filename
argument_list|)
decl_stmt|;
name|Patch
name|p
init|=
name|byKey
operator|.
name|get
argument_list|(
name|pKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setDraftCount
argument_list|(
name|p
operator|.
name|getDraftCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|IntraLineDiffCalculator
specifier|private
specifier|static
class|class
name|IntraLineDiffCalculator
implements|implements
name|PatchScriptBuilder
operator|.
name|IntraLineDiffCalculator
block|{
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|projectKey
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectKey
decl_stmt|;
DECL|field|diffPrefs
specifier|private
specifier|final
name|DiffPreferencesInfo
name|diffPrefs
decl_stmt|;
DECL|method|IntraLineDiffCalculator ( PatchListCache patchListCache, Project.NameKey projectKey, DiffPreferencesInfo diffPrefs)
name|IntraLineDiffCalculator
parameter_list|(
name|PatchListCache
name|patchListCache
parameter_list|,
name|Project
operator|.
name|NameKey
name|projectKey
parameter_list|,
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
block|{
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
name|this
operator|.
name|projectKey
operator|=
name|projectKey
expr_stmt|;
name|this
operator|.
name|diffPrefs
operator|=
name|diffPrefs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|calculateIntraLineDiff ( ImmutableList<Edit> edits, Set<Edit> editsDueToRebase, ObjectId aId, ObjectId bId, Text aSrc, Text bSrc, ObjectId bTreeId, String bPath)
specifier|public
name|IntraLineDiffCalculatorResult
name|calculateIntraLineDiff
parameter_list|(
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|Set
argument_list|<
name|Edit
argument_list|>
name|editsDueToRebase
parameter_list|,
name|ObjectId
name|aId
parameter_list|,
name|ObjectId
name|bId
parameter_list|,
name|Text
name|aSrc
parameter_list|,
name|Text
name|bSrc
parameter_list|,
name|ObjectId
name|bTreeId
parameter_list|,
name|String
name|bPath
parameter_list|)
block|{
name|IntraLineDiff
name|d
init|=
name|patchListCache
operator|.
name|getIntraLineDiff
argument_list|(
name|IntraLineDiffKey
operator|.
name|create
argument_list|(
name|aId
argument_list|,
name|bId
argument_list|,
name|diffPrefs
operator|.
name|ignoreWhitespace
argument_list|)
argument_list|,
name|IntraLineDiffArgs
operator|.
name|create
argument_list|(
name|aSrc
argument_list|,
name|bSrc
argument_list|,
name|edits
argument_list|,
name|editsDueToRebase
argument_list|,
name|projectKey
argument_list|,
name|bTreeId
argument_list|,
name|bPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
name|IntraLineDiffCalculatorResult
operator|.
name|FAILURE
return|;
block|}
switch|switch
condition|(
name|d
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|EDIT_LIST
case|:
return|return
name|IntraLineDiffCalculatorResult
operator|.
name|success
argument_list|(
name|d
operator|.
name|getEdits
argument_list|()
argument_list|)
return|;
case|case
name|ERROR
case|:
return|return
name|IntraLineDiffCalculatorResult
operator|.
name|FAILURE
return|;
case|case
name|TIMEOUT
case|:
return|return
name|IntraLineDiffCalculatorResult
operator|.
name|TIMEOUT
return|;
case|case
name|DISABLED
case|:
default|default:
return|return
name|IntraLineDiffCalculatorResult
operator|.
name|NO_RESULT
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

