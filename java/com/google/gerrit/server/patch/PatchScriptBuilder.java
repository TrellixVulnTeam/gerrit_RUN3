begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|CommentDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
operator|.
name|DisplayMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Patch
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mime
operator|.
name|FileTypeRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffContentCalculator
operator|.
name|DiffCalculatorResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffContentCalculator
operator|.
name|TextSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|medsea
operator|.
name|mimeutil
operator|.
name|MimeUtil2
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_class
DECL|class|PatchScriptBuilder
class|class
name|PatchScriptBuilder
block|{
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|diffPrefs
specifier|private
name|DiffPreferencesInfo
name|diffPrefs
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|FileTypeRegistry
name|registry
decl_stmt|;
DECL|field|intralineDiffCalculator
specifier|private
name|IntraLineDiffCalculator
name|intralineDiffCalculator
decl_stmt|;
annotation|@
name|Inject
DECL|method|PatchScriptBuilder (FileTypeRegistry ftr)
name|PatchScriptBuilder
parameter_list|(
name|FileTypeRegistry
name|ftr
parameter_list|)
block|{
name|registry
operator|=
name|ftr
expr_stmt|;
block|}
DECL|method|setChange (Change c)
name|void
name|setChange
parameter_list|(
name|Change
name|c
parameter_list|)
block|{
name|this
operator|.
name|change
operator|=
name|c
expr_stmt|;
block|}
DECL|method|setDiffPrefs (DiffPreferencesInfo dp)
name|void
name|setDiffPrefs
parameter_list|(
name|DiffPreferencesInfo
name|dp
parameter_list|)
block|{
name|diffPrefs
operator|=
name|dp
expr_stmt|;
block|}
DECL|method|setIntraLineDiffCalculator (IntraLineDiffCalculator calculator)
name|void
name|setIntraLineDiffCalculator
parameter_list|(
name|IntraLineDiffCalculator
name|calculator
parameter_list|)
block|{
name|intralineDiffCalculator
operator|=
name|calculator
expr_stmt|;
block|}
DECL|method|toPatchScript ( Repository git, PatchList list, PatchListEntry content, CommentDetail comments, ImmutableList<Patch> history)
name|PatchScript
name|toPatchScript
parameter_list|(
name|Repository
name|git
parameter_list|,
name|PatchList
name|list
parameter_list|,
name|PatchListEntry
name|content
parameter_list|,
name|CommentDetail
name|comments
parameter_list|,
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
name|history
parameter_list|)
throws|throws
name|IOException
block|{
name|PatchFileChange
name|change
init|=
operator|new
name|PatchFileChange
argument_list|(
name|content
operator|.
name|getEdits
argument_list|()
argument_list|,
name|content
operator|.
name|getEditsDueToRebase
argument_list|()
argument_list|,
name|content
operator|.
name|getHeaderLines
argument_list|()
argument_list|,
name|content
operator|.
name|getOldName
argument_list|()
argument_list|,
name|content
operator|.
name|getNewName
argument_list|()
argument_list|,
name|content
operator|.
name|getChangeType
argument_list|()
argument_list|,
name|content
operator|.
name|getPatchType
argument_list|()
argument_list|)
decl_stmt|;
name|SidesResolver
name|sidesResolver
init|=
operator|new
name|SidesResolver
argument_list|(
name|git
argument_list|,
name|list
operator|.
name|getComparisonType
argument_list|()
argument_list|)
decl_stmt|;
name|ResolvedSides
name|sides
init|=
name|resolveSides
argument_list|(
name|git
argument_list|,
name|sidesResolver
argument_list|,
name|oldName
argument_list|(
name|change
argument_list|)
argument_list|,
name|newName
argument_list|(
name|change
argument_list|)
argument_list|,
name|list
operator|.
name|getOldId
argument_list|()
argument_list|,
name|list
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSide
name|a
init|=
name|sides
operator|.
name|a
decl_stmt|;
name|PatchSide
name|b
init|=
name|sides
operator|.
name|b
decl_stmt|;
return|return
name|build
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|change
argument_list|,
name|comments
argument_list|,
name|history
argument_list|)
return|;
block|}
DECL|method|resolveSides ( Repository git, SidesResolver sidesResolver, String oldName, String newName, ObjectId aId, ObjectId bId)
specifier|private
name|ResolvedSides
name|resolveSides
parameter_list|(
name|Repository
name|git
parameter_list|,
name|SidesResolver
name|sidesResolver
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|,
name|ObjectId
name|aId
parameter_list|,
name|ObjectId
name|bId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectReader
name|reader
init|=
name|git
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
name|PatchSide
name|a
init|=
name|sidesResolver
operator|.
name|resolve
argument_list|(
name|registry
argument_list|,
name|reader
argument_list|,
name|oldName
argument_list|,
literal|null
argument_list|,
name|aId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PatchSide
name|b
init|=
name|sidesResolver
operator|.
name|resolve
argument_list|(
name|registry
argument_list|,
name|reader
argument_list|,
name|newName
argument_list|,
name|a
argument_list|,
name|bId
argument_list|,
name|Objects
operator|.
name|equals
argument_list|(
name|aId
argument_list|,
name|bId
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ResolvedSides
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
DECL|method|build ( PatchSide a, PatchSide b, PatchFileChange content, CommentDetail comments, ImmutableList<Patch> history)
specifier|private
name|PatchScript
name|build
parameter_list|(
name|PatchSide
name|a
parameter_list|,
name|PatchSide
name|b
parameter_list|,
name|PatchFileChange
name|content
parameter_list|,
name|CommentDetail
name|comments
parameter_list|,
name|ImmutableList
argument_list|<
name|Patch
argument_list|>
name|history
parameter_list|)
block|{
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|contentEdits
init|=
name|content
operator|.
name|getEdits
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Edit
argument_list|>
name|editsDueToRebase
init|=
name|content
operator|.
name|getEditsDueToRebase
argument_list|()
decl_stmt|;
name|IntraLineDiffCalculatorResult
name|intralineResult
init|=
name|IntraLineDiffCalculatorResult
operator|.
name|NO_RESULT
decl_stmt|;
if|if
condition|(
name|isModify
argument_list|(
name|content
argument_list|)
operator|&&
name|intralineDiffCalculator
operator|!=
literal|null
operator|&&
name|isIntralineModeAllowed
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|intralineResult
operator|=
name|intralineDiffCalculator
operator|.
name|calculateIntraLineDiff
argument_list|(
name|contentEdits
argument_list|,
name|editsDueToRebase
argument_list|,
name|a
operator|.
name|id
argument_list|,
name|b
operator|.
name|id
argument_list|,
name|a
operator|.
name|src
argument_list|,
name|b
operator|.
name|src
argument_list|,
name|b
operator|.
name|treeId
argument_list|,
name|b
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|finalEdits
init|=
name|intralineResult
operator|.
name|edits
operator|.
name|orElse
argument_list|(
name|contentEdits
argument_list|)
decl_stmt|;
name|DiffContentCalculator
name|calculator
init|=
operator|new
name|DiffContentCalculator
argument_list|(
name|diffPrefs
argument_list|)
decl_stmt|;
name|DiffCalculatorResult
name|diffCalculatorResult
init|=
name|calculator
operator|.
name|calculateDiffContent
argument_list|(
operator|new
name|TextSource
argument_list|(
name|a
operator|.
name|src
argument_list|)
argument_list|,
operator|new
name|TextSource
argument_list|(
name|b
operator|.
name|src
argument_list|)
argument_list|,
name|finalEdits
argument_list|,
name|comments
argument_list|)
decl_stmt|;
return|return
operator|new
name|PatchScript
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
argument_list|,
name|content
operator|.
name|getChangeType
argument_list|()
argument_list|,
name|content
operator|.
name|getOldName
argument_list|()
argument_list|,
name|content
operator|.
name|getNewName
argument_list|()
argument_list|,
name|a
operator|.
name|fileMode
argument_list|,
name|b
operator|.
name|fileMode
argument_list|,
name|content
operator|.
name|getHeaderLines
argument_list|()
argument_list|,
name|diffPrefs
argument_list|,
name|diffCalculatorResult
operator|.
name|diffContent
operator|.
name|a
argument_list|,
name|diffCalculatorResult
operator|.
name|diffContent
operator|.
name|b
argument_list|,
name|diffCalculatorResult
operator|.
name|edits
argument_list|,
name|editsDueToRebase
argument_list|,
name|a
operator|.
name|displayMethod
argument_list|,
name|b
operator|.
name|displayMethod
argument_list|,
name|a
operator|.
name|mimeType
argument_list|,
name|b
operator|.
name|mimeType
argument_list|,
name|history
argument_list|,
name|intralineResult
operator|.
name|failure
argument_list|,
name|intralineResult
operator|.
name|timeout
argument_list|,
name|content
operator|.
name|getPatchType
argument_list|()
operator|==
name|Patch
operator|.
name|PatchType
operator|.
name|BINARY
argument_list|,
name|a
operator|.
name|treeId
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|treeId
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|treeId
operator|==
literal|null
condition|?
literal|null
else|:
name|b
operator|.
name|treeId
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isModify (PatchFileChange content)
specifier|private
specifier|static
name|boolean
name|isModify
parameter_list|(
name|PatchFileChange
name|content
parameter_list|)
block|{
switch|switch
condition|(
name|content
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|MODIFIED
case|:
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
case|case
name|REWRITE
case|:
return|return
literal|true
return|;
case|case
name|ADDED
case|:
case|case
name|DELETED
case|:
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|method|oldName (PatchFileChange entry)
specifier|private
specifier|static
name|String
name|oldName
parameter_list|(
name|PatchFileChange
name|entry
parameter_list|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|ADDED
case|:
return|return
literal|null
return|;
case|case
name|DELETED
case|:
case|case
name|MODIFIED
case|:
case|case
name|REWRITE
case|:
return|return
name|entry
operator|.
name|getNewName
argument_list|()
return|;
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
default|default:
return|return
name|entry
operator|.
name|getOldName
argument_list|()
return|;
block|}
block|}
DECL|method|newName (PatchFileChange entry)
specifier|private
specifier|static
name|String
name|newName
parameter_list|(
name|PatchFileChange
name|entry
parameter_list|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|DELETED
case|:
return|return
literal|null
return|;
case|case
name|ADDED
case|:
case|case
name|MODIFIED
case|:
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
case|case
name|REWRITE
case|:
default|default:
return|return
name|entry
operator|.
name|getNewName
argument_list|()
return|;
block|}
block|}
DECL|method|isIntralineModeAllowed (PatchSide side)
specifier|private
specifier|static
name|boolean
name|isIntralineModeAllowed
parameter_list|(
name|PatchSide
name|side
parameter_list|)
block|{
comment|// The intraline diff cache keys are the same for these cases. It's better to not show
comment|// intraline results than showing completely wrong diffs or to run into a server error.
return|return
operator|!
name|Patch
operator|.
name|isMagic
argument_list|(
name|side
operator|.
name|path
argument_list|)
operator|&&
operator|!
name|isSubmoduleCommit
argument_list|(
name|side
operator|.
name|mode
argument_list|)
return|;
block|}
DECL|method|isSubmoduleCommit (FileMode mode)
specifier|private
specifier|static
name|boolean
name|isSubmoduleCommit
parameter_list|(
name|FileMode
name|mode
parameter_list|)
block|{
return|return
name|mode
operator|.
name|getObjectType
argument_list|()
operator|==
name|Constants
operator|.
name|OBJ_COMMIT
return|;
block|}
DECL|class|PatchSide
specifier|private
specifier|static
class|class
name|PatchSide
block|{
DECL|field|treeId
specifier|final
name|ObjectId
name|treeId
decl_stmt|;
DECL|field|path
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|id
specifier|final
name|ObjectId
name|id
decl_stmt|;
DECL|field|mode
specifier|final
name|FileMode
name|mode
decl_stmt|;
DECL|field|srcContent
specifier|final
name|byte
index|[]
name|srcContent
decl_stmt|;
DECL|field|src
specifier|final
name|Text
name|src
decl_stmt|;
DECL|field|mimeType
specifier|final
name|String
name|mimeType
decl_stmt|;
DECL|field|displayMethod
specifier|final
name|DisplayMethod
name|displayMethod
decl_stmt|;
DECL|field|fileMode
specifier|final
name|PatchScript
operator|.
name|FileMode
name|fileMode
decl_stmt|;
DECL|method|PatchSide ( ObjectId treeId, String path, ObjectId id, FileMode mode, byte[] srcContent, Text src, String mimeType, DisplayMethod displayMethod, PatchScript.FileMode fileMode)
specifier|private
name|PatchSide
parameter_list|(
name|ObjectId
name|treeId
parameter_list|,
name|String
name|path
parameter_list|,
name|ObjectId
name|id
parameter_list|,
name|FileMode
name|mode
parameter_list|,
name|byte
index|[]
name|srcContent
parameter_list|,
name|Text
name|src
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|DisplayMethod
name|displayMethod
parameter_list|,
name|PatchScript
operator|.
name|FileMode
name|fileMode
parameter_list|)
block|{
name|this
operator|.
name|treeId
operator|=
name|treeId
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|srcContent
operator|=
name|srcContent
expr_stmt|;
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
name|this
operator|.
name|displayMethod
operator|=
name|displayMethod
expr_stmt|;
name|this
operator|.
name|fileMode
operator|=
name|fileMode
expr_stmt|;
block|}
block|}
DECL|class|ResolvedSides
specifier|private
specifier|static
class|class
name|ResolvedSides
block|{
comment|// Not an @AutoValue because PatchSide can't be AutoValue
DECL|field|a
specifier|public
specifier|final
name|PatchSide
name|a
decl_stmt|;
DECL|field|b
specifier|public
specifier|final
name|PatchSide
name|b
decl_stmt|;
DECL|method|ResolvedSides (PatchSide a, PatchSide b)
name|ResolvedSides
parameter_list|(
name|PatchSide
name|a
parameter_list|,
name|PatchSide
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
block|}
DECL|class|SidesResolver
specifier|static
class|class
name|SidesResolver
block|{
DECL|field|db
specifier|private
specifier|final
name|Repository
name|db
decl_stmt|;
DECL|field|comparisonType
specifier|private
specifier|final
name|ComparisonType
name|comparisonType
decl_stmt|;
DECL|method|SidesResolver (Repository db, ComparisonType comparisonType)
name|SidesResolver
parameter_list|(
name|Repository
name|db
parameter_list|,
name|ComparisonType
name|comparisonType
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|comparisonType
operator|=
name|comparisonType
expr_stmt|;
block|}
DECL|method|resolve ( final FileTypeRegistry registry, final ObjectReader reader, final String path, final PatchSide other, final ObjectId within, final boolean isWithinEqualsA)
name|PatchSide
name|resolve
parameter_list|(
specifier|final
name|FileTypeRegistry
name|registry
parameter_list|,
specifier|final
name|ObjectReader
name|reader
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|PatchSide
name|other
parameter_list|,
specifier|final
name|ObjectId
name|within
parameter_list|,
specifier|final
name|boolean
name|isWithinEqualsA
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|isCommitMsg
init|=
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|isMergeList
init|=
name|Patch
operator|.
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCommitMsg
operator|||
name|isMergeList
condition|)
block|{
if|if
condition|(
name|comparisonType
operator|.
name|isAgainstParentOrAutoMerge
argument_list|()
operator|&&
name|isWithinEqualsA
condition|)
block|{
return|return
name|createSide
argument_list|(
name|within
argument_list|,
name|path
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|FileMode
operator|.
name|MISSING
argument_list|,
name|Text
operator|.
name|NO_BYTES
argument_list|,
name|Text
operator|.
name|EMPTY
argument_list|,
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
operator|.
name|toString
argument_list|()
argument_list|,
name|DisplayMethod
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|Text
name|src
init|=
name|isCommitMsg
condition|?
name|Text
operator|.
name|forCommit
argument_list|(
name|reader
argument_list|,
name|within
argument_list|)
else|:
name|Text
operator|.
name|forMergeList
argument_list|(
name|comparisonType
argument_list|,
name|reader
argument_list|,
name|within
argument_list|)
decl_stmt|;
name|byte
index|[]
name|srcContent
init|=
name|src
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|DisplayMethod
name|displayMethod
decl_stmt|;
name|FileMode
name|mode
decl_stmt|;
if|if
condition|(
name|src
operator|==
name|Text
operator|.
name|EMPTY
condition|)
block|{
name|mode
operator|=
name|FileMode
operator|.
name|MISSING
expr_stmt|;
name|displayMethod
operator|=
name|DisplayMethod
operator|.
name|NONE
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
name|FileMode
operator|.
name|REGULAR_FILE
expr_stmt|;
name|displayMethod
operator|=
name|DisplayMethod
operator|.
name|DIFF
expr_stmt|;
block|}
return|return
name|createSide
argument_list|(
name|within
argument_list|,
name|path
argument_list|,
name|within
argument_list|,
name|mode
argument_list|,
name|srcContent
argument_list|,
name|src
argument_list|,
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
operator|.
name|toString
argument_list|()
argument_list|,
name|displayMethod
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|final
name|TreeWalk
name|tw
init|=
name|find
argument_list|(
name|reader
argument_list|,
name|path
argument_list|,
name|within
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|tw
operator|!=
literal|null
condition|?
name|tw
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
else|:
name|ObjectId
operator|.
name|zeroId
argument_list|()
decl_stmt|;
name|FileMode
name|mode
init|=
name|tw
operator|!=
literal|null
condition|?
name|tw
operator|.
name|getFileMode
argument_list|(
literal|0
argument_list|)
else|:
name|FileMode
operator|.
name|MISSING
decl_stmt|;
name|boolean
name|reuse
init|=
name|other
operator|!=
literal|null
operator|&&
name|other
operator|.
name|id
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
operator|(
name|other
operator|.
name|mode
operator|==
name|mode
operator|||
name|isBothFile
argument_list|(
name|other
operator|.
name|mode
argument_list|,
name|mode
argument_list|)
operator|)
decl_stmt|;
name|Text
name|src
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|srcContent
decl_stmt|;
if|if
condition|(
name|reuse
condition|)
block|{
name|srcContent
operator|=
name|other
operator|.
name|srcContent
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|getObjectType
argument_list|()
operator|==
name|Constants
operator|.
name|OBJ_BLOB
condition|)
block|{
name|srcContent
operator|=
name|Text
operator|.
name|asByteArray
argument_list|(
name|db
operator|.
name|open
argument_list|(
name|id
argument_list|,
name|Constants
operator|.
name|OBJ_BLOB
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|getObjectType
argument_list|()
operator|==
name|Constants
operator|.
name|OBJ_COMMIT
condition|)
block|{
name|String
name|strContent
init|=
literal|"Subproject commit "
operator|+
name|ObjectId
operator|.
name|toString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|srcContent
operator|=
name|strContent
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcContent
operator|=
name|Text
operator|.
name|NO_BYTES
expr_stmt|;
block|}
name|String
name|mimeType
init|=
name|MimeUtil2
operator|.
name|UNKNOWN_MIME_TYPE
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DisplayMethod
name|displayMethod
init|=
name|DisplayMethod
operator|.
name|DIFF
decl_stmt|;
if|if
condition|(
name|reuse
condition|)
block|{
name|mimeType
operator|=
name|other
operator|.
name|mimeType
expr_stmt|;
name|displayMethod
operator|=
name|other
operator|.
name|displayMethod
expr_stmt|;
name|src
operator|=
name|other
operator|.
name|src
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|srcContent
operator|.
name|length
operator|>
literal|0
operator|&&
name|FileMode
operator|.
name|SYMLINK
operator|!=
name|mode
condition|)
block|{
name|MimeType
name|registryMimeType
init|=
name|registry
operator|.
name|getMimeType
argument_list|(
name|path
argument_list|,
name|srcContent
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"image"
operator|.
name|equals
argument_list|(
name|registryMimeType
operator|.
name|getMediaType
argument_list|()
argument_list|)
operator|&&
name|registry
operator|.
name|isSafeInline
argument_list|(
name|registryMimeType
argument_list|)
condition|)
block|{
name|displayMethod
operator|=
name|DisplayMethod
operator|.
name|IMG
expr_stmt|;
block|}
name|mimeType
operator|=
name|registryMimeType
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|createSide
argument_list|(
name|within
argument_list|,
name|path
argument_list|,
name|id
argument_list|,
name|mode
argument_list|,
name|srcContent
argument_list|,
name|src
argument_list|,
name|mimeType
argument_list|,
name|displayMethod
argument_list|,
name|reuse
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot read "
operator|+
name|within
operator|.
name|name
argument_list|()
operator|+
literal|":"
operator|+
name|path
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
DECL|method|createSide ( ObjectId treeId, String path, ObjectId id, FileMode mode, byte[] srcContent, Text src, String mimeType, DisplayMethod displayMethod, boolean reuse)
specifier|private
name|PatchSide
name|createSide
parameter_list|(
name|ObjectId
name|treeId
parameter_list|,
name|String
name|path
parameter_list|,
name|ObjectId
name|id
parameter_list|,
name|FileMode
name|mode
parameter_list|,
name|byte
index|[]
name|srcContent
parameter_list|,
name|Text
name|src
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|DisplayMethod
name|displayMethod
parameter_list|,
name|boolean
name|reuse
parameter_list|)
block|{
if|if
condition|(
operator|!
name|reuse
condition|)
block|{
if|if
condition|(
name|srcContent
operator|==
name|Text
operator|.
name|NO_BYTES
condition|)
block|{
name|src
operator|=
name|Text
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|src
operator|=
operator|new
name|Text
argument_list|(
name|srcContent
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|FileMode
operator|.
name|MISSING
condition|)
block|{
name|displayMethod
operator|=
name|DisplayMethod
operator|.
name|NONE
expr_stmt|;
block|}
name|PatchScript
operator|.
name|FileMode
name|fileMode
init|=
name|PatchScript
operator|.
name|FileMode
operator|.
name|FILE
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|FileMode
operator|.
name|SYMLINK
condition|)
block|{
name|fileMode
operator|=
name|PatchScript
operator|.
name|FileMode
operator|.
name|SYMLINK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|FileMode
operator|.
name|GITLINK
condition|)
block|{
name|fileMode
operator|=
name|PatchScript
operator|.
name|FileMode
operator|.
name|GITLINK
expr_stmt|;
block|}
return|return
operator|new
name|PatchSide
argument_list|(
name|treeId
argument_list|,
name|path
argument_list|,
name|id
argument_list|,
name|mode
argument_list|,
name|srcContent
argument_list|,
name|src
argument_list|,
name|mimeType
argument_list|,
name|displayMethod
argument_list|,
name|fileMode
argument_list|)
return|;
block|}
DECL|method|find (ObjectReader reader, String path, ObjectId within)
specifier|private
name|TreeWalk
name|find
parameter_list|(
name|ObjectReader
name|reader
parameter_list|,
name|String
name|path
parameter_list|,
name|ObjectId
name|within
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|within
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
specifier|final
name|RevTree
name|tree
init|=
name|rw
operator|.
name|parseTree
argument_list|(
name|within
argument_list|)
decl_stmt|;
return|return
name|TreeWalk
operator|.
name|forPath
argument_list|(
name|reader
argument_list|,
name|path
argument_list|,
name|tree
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|isBothFile (FileMode a, FileMode b)
specifier|private
specifier|static
name|boolean
name|isBothFile
parameter_list|(
name|FileMode
name|a
parameter_list|,
name|FileMode
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|.
name|getBits
argument_list|()
operator|&
name|FileMode
operator|.
name|TYPE_FILE
operator|)
operator|==
name|FileMode
operator|.
name|TYPE_FILE
operator|&&
operator|(
name|b
operator|.
name|getBits
argument_list|()
operator|&
name|FileMode
operator|.
name|TYPE_FILE
operator|)
operator|==
name|FileMode
operator|.
name|TYPE_FILE
return|;
block|}
DECL|class|IntraLineDiffCalculatorResult
specifier|static
class|class
name|IntraLineDiffCalculatorResult
block|{
comment|// Not an @AutoValue because Edit is mutable
DECL|field|failure
specifier|final
name|boolean
name|failure
decl_stmt|;
DECL|field|timeout
specifier|final
name|boolean
name|timeout
decl_stmt|;
DECL|field|edits
specifier|private
specifier|final
name|Optional
argument_list|<
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
argument_list|>
name|edits
decl_stmt|;
DECL|method|IntraLineDiffCalculatorResult ( Optional<ImmutableList<Edit>> edits, boolean failure, boolean timeout)
specifier|private
name|IntraLineDiffCalculatorResult
parameter_list|(
name|Optional
argument_list|<
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
argument_list|>
name|edits
parameter_list|,
name|boolean
name|failure
parameter_list|,
name|boolean
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|failure
operator|=
name|failure
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|edits
operator|=
name|edits
expr_stmt|;
block|}
DECL|field|NO_RESULT
specifier|static
specifier|final
name|IntraLineDiffCalculatorResult
name|NO_RESULT
init|=
operator|new
name|IntraLineDiffCalculatorResult
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|FAILURE
specifier|static
specifier|final
name|IntraLineDiffCalculatorResult
name|FAILURE
init|=
operator|new
name|IntraLineDiffCalculatorResult
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT
specifier|static
specifier|final
name|IntraLineDiffCalculatorResult
name|TIMEOUT
init|=
operator|new
name|IntraLineDiffCalculatorResult
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|method|success (ImmutableList<Edit> edits)
specifier|static
name|IntraLineDiffCalculatorResult
name|success
parameter_list|(
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
return|return
operator|new
name|IntraLineDiffCalculatorResult
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|edits
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
DECL|interface|IntraLineDiffCalculator
interface|interface
name|IntraLineDiffCalculator
block|{
DECL|method|calculateIntraLineDiff ( ImmutableList<Edit> edits, Set<Edit> editsDueToRebase, ObjectId aId, ObjectId bId, Text aSrc, Text bSrc, ObjectId bTreeId, String bPath)
name|IntraLineDiffCalculatorResult
name|calculateIntraLineDiff
parameter_list|(
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|Set
argument_list|<
name|Edit
argument_list|>
name|editsDueToRebase
parameter_list|,
name|ObjectId
name|aId
parameter_list|,
name|ObjectId
name|bId
parameter_list|,
name|Text
name|aSrc
parameter_list|,
name|Text
name|bSrc
parameter_list|,
name|ObjectId
name|bTreeId
parameter_list|,
name|String
name|bPath
parameter_list|)
function_decl|;
block|}
DECL|class|PatchFileChange
specifier|static
class|class
name|PatchFileChange
block|{
DECL|field|edits
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
decl_stmt|;
DECL|field|editsDueToRebase
specifier|private
specifier|final
name|ImmutableSet
argument_list|<
name|Edit
argument_list|>
name|editsDueToRebase
decl_stmt|;
DECL|field|headerLines
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|headerLines
decl_stmt|;
DECL|field|oldName
specifier|private
specifier|final
name|String
name|oldName
decl_stmt|;
DECL|field|newName
specifier|private
specifier|final
name|String
name|newName
decl_stmt|;
DECL|field|changeType
specifier|private
specifier|final
name|ChangeType
name|changeType
decl_stmt|;
DECL|field|patchType
specifier|private
specifier|final
name|Patch
operator|.
name|PatchType
name|patchType
decl_stmt|;
DECL|method|PatchFileChange ( ImmutableList<Edit> edits, ImmutableSet<Edit> editsDueToRebase, ImmutableList<String> headerLines, String oldName, String newName, ChangeType changeType, Patch.PatchType patchType)
specifier|public
name|PatchFileChange
parameter_list|(
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|ImmutableSet
argument_list|<
name|Edit
argument_list|>
name|editsDueToRebase
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|headerLines
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|,
name|ChangeType
name|changeType
parameter_list|,
name|Patch
operator|.
name|PatchType
name|patchType
parameter_list|)
block|{
name|this
operator|.
name|edits
operator|=
name|edits
expr_stmt|;
name|this
operator|.
name|editsDueToRebase
operator|=
name|editsDueToRebase
expr_stmt|;
name|this
operator|.
name|headerLines
operator|=
name|headerLines
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|oldName
expr_stmt|;
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
name|this
operator|.
name|changeType
operator|=
name|changeType
expr_stmt|;
name|this
operator|.
name|patchType
operator|=
name|patchType
expr_stmt|;
block|}
DECL|method|getEdits ()
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|getEdits
parameter_list|()
block|{
return|return
name|edits
return|;
block|}
DECL|method|getEditsDueToRebase ()
name|ImmutableSet
argument_list|<
name|Edit
argument_list|>
name|getEditsDueToRebase
parameter_list|()
block|{
return|return
name|editsDueToRebase
return|;
block|}
DECL|method|getHeaderLines ()
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|getHeaderLines
parameter_list|()
block|{
return|return
name|headerLines
return|;
block|}
DECL|method|getNewName ()
name|String
name|getNewName
parameter_list|()
block|{
return|return
name|newName
return|;
block|}
DECL|method|getOldName ()
name|String
name|getOldName
parameter_list|()
block|{
return|return
name|oldName
return|;
block|}
DECL|method|getChangeType ()
name|ChangeType
name|getChangeType
parameter_list|()
block|{
return|return
name|changeType
return|;
block|}
DECL|method|getPatchType ()
name|Patch
operator|.
name|PatchType
name|getPatchType
parameter_list|()
block|{
return|return
name|patchType
return|;
block|}
block|}
block|}
end_class

end_unit

