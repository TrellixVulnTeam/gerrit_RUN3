begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_comment
comment|//
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|MyersDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|ReplaceEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
DECL|class|IntraLineLoader
class|class
name|IntraLineLoader
implements|implements
name|Callable
argument_list|<
name|IntraLineDiff
argument_list|>
block|{
DECL|field|logger
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (IntraLineDiffKey key, IntraLineDiffArgs args)
name|IntraLineLoader
name|create
parameter_list|(
name|IntraLineDiffKey
name|key
parameter_list|,
name|IntraLineDiffArgs
name|args
parameter_list|)
function_decl|;
block|}
DECL|field|BLANK_LINE_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|BLANK_LINE_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[ \\t]*(|[{}]|/\\*\\*?|\\*)[ \\t]*$"
argument_list|)
decl_stmt|;
DECL|field|CONTROL_BLOCK_START_RE
specifier|private
specifier|static
specifier|final
name|Pattern
name|CONTROL_BLOCK_START_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[{:][ \\t]*$"
argument_list|)
decl_stmt|;
DECL|field|diffExecutor
specifier|private
specifier|final
name|ExecutorService
name|diffExecutor
decl_stmt|;
DECL|field|timeoutMillis
specifier|private
specifier|final
name|long
name|timeoutMillis
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|IntraLineDiffKey
name|key
decl_stmt|;
DECL|field|args
specifier|private
specifier|final
name|IntraLineDiffArgs
name|args
decl_stmt|;
annotation|@
name|Inject
DECL|method|IntraLineLoader ( @iffExecutor ExecutorService diffExecutor, @GerritServerConfig Config cfg, @Assisted IntraLineDiffKey key, @Assisted IntraLineDiffArgs args)
name|IntraLineLoader
parameter_list|(
annotation|@
name|DiffExecutor
name|ExecutorService
name|diffExecutor
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|Assisted
name|IntraLineDiffKey
name|key
parameter_list|,
annotation|@
name|Assisted
name|IntraLineDiffArgs
name|args
parameter_list|)
block|{
name|this
operator|.
name|diffExecutor
operator|=
name|diffExecutor
expr_stmt|;
name|timeoutMillis
operator|=
name|ConfigUtil
operator|.
name|getTimeUnit
argument_list|(
name|cfg
argument_list|,
literal|"cache"
argument_list|,
name|PatchListCacheImpl
operator|.
name|INTRA_NAME
argument_list|,
literal|"timeout"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|IntraLineDiff
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|IntraLineDiff
argument_list|>
name|result
init|=
name|diffExecutor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|IntraLineLoader
operator|.
name|compute
argument_list|(
name|args
operator|.
name|aText
argument_list|()
argument_list|,
name|args
operator|.
name|bText
argument_list|()
argument_list|,
name|args
operator|.
name|edits
argument_list|()
argument_list|,
name|args
operator|.
name|editsDueToRebase
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|result
operator|.
name|get
argument_list|(
name|timeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|TimeoutException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s ms timeout reached for IntraLineDiff"
operator|+
literal|" in project %s on commit %s for path %s comparing %s..%s"
argument_list|,
name|timeoutMillis
argument_list|,
name|args
operator|.
name|project
argument_list|()
argument_list|,
name|args
operator|.
name|commit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|args
operator|.
name|path
argument_list|()
argument_list|,
name|key
operator|.
name|getBlobA
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|key
operator|.
name|getBlobB
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|IntraLineDiff
argument_list|(
name|IntraLineDiff
operator|.
name|Status
operator|.
name|TIMEOUT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// If there was an error computing the result, carry it
comment|// up to the caller so the cache knows this key is invalid.
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|compute ( Text aText, Text bText, ImmutableList<Edit> immutableEdits, ImmutableSet<Edit> immutableEditsDueToRebase)
specifier|static
name|IntraLineDiff
name|compute
parameter_list|(
name|Text
name|aText
parameter_list|,
name|Text
name|bText
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|immutableEdits
parameter_list|,
name|ImmutableSet
argument_list|<
name|Edit
argument_list|>
name|immutableEditsDueToRebase
parameter_list|)
block|{
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|immutableEdits
argument_list|)
decl_stmt|;
name|combineLineEdits
argument_list|(
name|edits
argument_list|,
name|immutableEditsDueToRebase
argument_list|,
name|aText
argument_list|,
name|bText
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Edit
name|e
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
condition|)
block|{
name|CharText
name|a
init|=
operator|new
name|CharText
argument_list|(
name|aText
argument_list|,
name|e
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|e
operator|.
name|getEndA
argument_list|()
argument_list|)
decl_stmt|;
name|CharText
name|b
init|=
operator|new
name|CharText
argument_list|(
name|bText
argument_list|,
name|e
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|e
operator|.
name|getEndB
argument_list|()
argument_list|)
decl_stmt|;
name|CharTextComparator
name|cmp
init|=
operator|new
name|CharTextComparator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Edit
argument_list|>
name|wordEdits
init|=
name|MyersDiff
operator|.
name|INSTANCE
operator|.
name|diff
argument_list|(
name|cmp
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
comment|// Combine edits that are really close together. If they are
comment|// just a few characters apart we tend to get better results
comment|// by joining them together and taking the whole span.
comment|//
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
operator|<=
literal|5
operator|||
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
operator|<=
literal|5
condition|)
block|{
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|n
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|n
operator|.
name|getEndB
argument_list|()
decl_stmt|;
if|if
condition|(
name|canCoalesce
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginA
argument_list|()
argument_list|)
operator|&&
name|canCoalesce
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getEndB
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginB
argument_list|()
argument_list|)
condition|)
block|{
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
name|wordEdits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|j
operator|++
expr_stmt|;
block|}
comment|// Apply some simple rules to fix up some of the edits. Our
comment|// logic above, along with our per-character difference tends
comment|// to produce some crazy stuff.
comment|//
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordEdits
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Edit
name|c
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|c
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|c
operator|.
name|getEndB
argument_list|()
decl_stmt|;
comment|// Sometimes the diff generator produces an INSERT or DELETE
comment|// right up against a REPLACE, but we only find this after
comment|// we've also played some shifting games on the prior edit.
comment|// If that happened to us, coalesce them together so we can
comment|// correct this mess for the user. If we don't we wind up
comment|// with silly stuff like "es" -> "es = Addresses".
comment|//
if|if
condition|(
literal|1
operator|<
name|j
condition|)
block|{
name|Edit
name|p
init|=
name|wordEdits
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getEndA
argument_list|()
operator|==
name|ab
operator|||
name|p
operator|.
name|getEndB
argument_list|()
operator|==
name|bb
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getEndA
argument_list|()
operator|==
name|ab
operator|&&
name|p
operator|.
name|getBeginA
argument_list|()
operator|<
name|p
operator|.
name|getEndA
argument_list|()
condition|)
block|{
name|ab
operator|=
name|p
operator|.
name|getBeginA
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|getEndB
argument_list|()
operator|==
name|bb
operator|&&
name|p
operator|.
name|getBeginB
argument_list|()
operator|<
name|p
operator|.
name|getEndB
argument_list|()
condition|)
block|{
name|bb
operator|=
name|p
operator|.
name|getBeginB
argument_list|()
expr_stmt|;
block|}
name|wordEdits
operator|.
name|remove
argument_list|(
operator|--
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We sometimes collapsed an edit together in a strange way,
comment|// such that the edges of each text is identical. Fix by
comment|// by dropping out that incorrectly replaced region.
comment|//
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|bb
operator|<
name|be
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|b
argument_list|,
name|bb
argument_list|)
condition|)
block|{
name|ab
operator|++
expr_stmt|;
name|bb
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|bb
operator|<
name|be
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ae
operator|-
literal|1
argument_list|,
name|b
argument_list|,
name|be
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ae
operator|--
expr_stmt|;
name|be
operator|--
expr_stmt|;
block|}
comment|// The leading part of an edit and its trailing part in the same
comment|// text might be identical. Slide down that edit and use the tail
comment|// rather than the leading bit.
comment|//
while|while
condition|(
literal|0
operator|<
name|ab
operator|&&
name|ab
operator|<
name|ae
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ab
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
operator|-
literal|1
argument_list|,
name|a
argument_list|,
name|ae
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ab
operator|--
expr_stmt|;
name|ae
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|a
operator|.
name|isLineStart
argument_list|(
name|ab
argument_list|)
operator|||
operator|!
name|a
operator|.
name|contains
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
literal|'\n'
argument_list|)
condition|)
block|{
while|while
condition|(
name|ab
operator|<
name|ae
operator|&&
name|ae
operator|<
name|a
operator|.
name|size
argument_list|()
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|ab
argument_list|,
name|a
argument_list|,
name|ae
argument_list|)
condition|)
block|{
name|ab
operator|++
expr_stmt|;
name|ae
operator|++
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|charAt
argument_list|(
name|ae
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
block|}
while|while
condition|(
literal|0
operator|<
name|bb
operator|&&
name|bb
operator|<
name|be
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|bb
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
operator|-
literal|1
argument_list|,
name|b
argument_list|,
name|be
operator|-
literal|1
argument_list|)
condition|)
block|{
name|bb
operator|--
expr_stmt|;
name|be
operator|--
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|b
operator|.
name|isLineStart
argument_list|(
name|bb
argument_list|)
operator|||
operator|!
name|b
operator|.
name|contains
argument_list|(
name|bb
argument_list|,
name|be
argument_list|,
literal|'\n'
argument_list|)
condition|)
block|{
while|while
condition|(
name|bb
operator|<
name|be
operator|&&
name|be
operator|<
name|b
operator|.
name|size
argument_list|()
operator|&&
name|cmp
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|bb
argument_list|,
name|b
argument_list|,
name|be
argument_list|)
condition|)
block|{
name|bb
operator|++
expr_stmt|;
name|be
operator|++
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|be
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// If most of a line was modified except the LF was common, make
comment|// the LF part of the modification region. This is easier to read.
comment|//
if|if
condition|(
name|ab
operator|<
name|ae
comment|//
operator|&&
operator|(
name|ab
operator|==
literal|0
operator|||
name|a
operator|.
name|charAt
argument_list|(
name|ab
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
comment|//
operator|&&
name|ae
operator|<
name|a
operator|.
name|size
argument_list|()
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ae
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|a
operator|.
name|charAt
argument_list|(
name|ae
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|ae
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bb
operator|<
name|be
comment|//
operator|&&
operator|(
name|bb
operator|==
literal|0
operator|||
name|b
operator|.
name|charAt
argument_list|(
name|bb
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
comment|//
operator|&&
name|be
operator|<
name|b
operator|.
name|size
argument_list|()
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|be
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|b
operator|.
name|charAt
argument_list|(
name|be
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|be
operator|++
expr_stmt|;
block|}
name|wordEdits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|edits
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|ReplaceEdit
argument_list|(
name|e
argument_list|,
name|wordEdits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IntraLineDiff
argument_list|(
name|edits
argument_list|)
return|;
block|}
DECL|method|combineLineEdits ( List<Edit> edits, ImmutableSet<Edit> editsDueToRebase, Text a, Text b)
specifier|private
specifier|static
name|void
name|combineLineEdits
parameter_list|(
name|List
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|ImmutableSet
argument_list|<
name|Edit
argument_list|>
name|editsDueToRebase
parameter_list|,
name|Text
name|a
parameter_list|,
name|Text
name|b
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|Edit
name|c
init|=
name|edits
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Edit
name|n
init|=
name|edits
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|editsDueToRebase
operator|.
name|contains
argument_list|(
name|c
argument_list|)
operator|||
name|editsDueToRebase
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
comment|// Don't combine any edits which were identified as being introduced by a rebase as we would
comment|// lose that information because of the combination.
name|j
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Combine edits that are really close together. Right now our rule
comment|// is, coalesce two line edits which are only one line apart if that
comment|// common context line is either a "pointless line", or is identical
comment|// on both sides and starts a new block of code. These are mostly
comment|// block reindents to add or remove control flow operators.
comment|//
specifier|final
name|int
name|ad
init|=
name|n
operator|.
name|getBeginA
argument_list|()
operator|-
name|c
operator|.
name|getEndA
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bd
init|=
name|n
operator|.
name|getBeginB
argument_list|()
operator|-
name|c
operator|.
name|getEndB
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|1
operator|<=
name|ad
operator|&&
name|isBlankLineGap
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginA
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
literal|1
operator|<=
name|bd
operator|&&
name|isBlankLineGap
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getEndB
argument_list|()
argument_list|,
name|n
operator|.
name|getBeginB
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|ad
operator|==
literal|1
operator|&&
name|bd
operator|==
literal|1
operator|&&
name|isControlBlockStart
argument_list|(
name|a
argument_list|,
name|c
operator|.
name|getEndA
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|int
name|ab
init|=
name|c
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
name|int
name|ae
init|=
name|n
operator|.
name|getEndA
argument_list|()
decl_stmt|;
name|int
name|bb
init|=
name|c
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
name|int
name|be
init|=
name|n
operator|.
name|getEndB
argument_list|()
decl_stmt|;
name|edits
operator|.
name|set
argument_list|(
name|j
argument_list|,
operator|new
name|Edit
argument_list|(
name|ab
argument_list|,
name|ae
argument_list|,
name|bb
argument_list|,
name|be
argument_list|)
argument_list|)
expr_stmt|;
name|edits
operator|.
name|remove
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
DECL|method|isBlankLineGap (Text a, int b, int e)
specifier|private
specifier|static
name|boolean
name|isBlankLineGap
parameter_list|(
name|Text
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|e
parameter_list|)
block|{
for|for
control|(
init|;
name|b
operator|<
name|e
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|BLANK_LINE_RE
operator|.
name|matcher
argument_list|(
name|a
operator|.
name|getString
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isControlBlockStart (Text a, int idx)
specifier|private
specifier|static
name|boolean
name|isControlBlockStart
parameter_list|(
name|Text
name|a
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
return|return
name|CONTROL_BLOCK_START_RE
operator|.
name|matcher
argument_list|(
name|a
operator|.
name|getString
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
DECL|method|canCoalesce (CharText a, int b, int e)
specifier|private
specifier|static
name|boolean
name|canCoalesce
parameter_list|(
name|CharText
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|e
parameter_list|)
block|{
while|while
condition|(
name|b
operator|<
name|e
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|charAt
argument_list|(
name|b
operator|++
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

