begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|CommentDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
operator|.
name|Whitespace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|jgit
operator|.
name|diff
operator|.
name|ReplaceEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|EditList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|SparseFileContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|SparseFileContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_comment
comment|/** Collects all lines and their content to be displayed in diff view. */
end_comment

begin_class
DECL|class|DiffContentCalculator
class|class
name|DiffContentCalculator
block|{
DECL|field|MAX_CONTEXT
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CONTEXT
init|=
literal|5000000
decl_stmt|;
DECL|field|EDIT_SORT
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Edit
argument_list|>
name|EDIT_SORT
init|=
name|comparing
argument_list|(
name|Edit
operator|::
name|getBeginA
argument_list|)
decl_stmt|;
DECL|field|diffPrefs
specifier|private
specifier|final
name|DiffPreferencesInfo
name|diffPrefs
decl_stmt|;
DECL|method|DiffContentCalculator (DiffPreferencesInfo diffPrefs)
name|DiffContentCalculator
parameter_list|(
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
block|{
name|this
operator|.
name|diffPrefs
operator|=
name|diffPrefs
expr_stmt|;
block|}
comment|/**    * Gather information necessary to display line-by-line difference between 2 texts.    *    *<p>The method returns instance of {@link DiffCalculatorResult} with the following data:    *    *<ul>    *<li>All changed lines    *<li>Additional lines to be displayed above and below the changed lines    *<li>All changed and unchanged lines with comments    *<li>Additional lines to be displayed above and below lines with commentsEdits with special    *       "fake" edits for unchanged lines with comments    *</ul>    *    *<p>More details can be found in {@link DiffCalculatorResult}.    *    * @param srcA Original text content    * @param srcB New text content    * @param edits List of edits which was applied to srcA to produce srcB    * @param comments Existing comments for srcA and srcB    * @return an instance of {@link DiffCalculatorResult}.    */
DECL|method|calculateDiffContent ( TextSource srcA, TextSource srcB, ImmutableList<Edit> edits, CommentDetail comments)
name|DiffCalculatorResult
name|calculateDiffContent
parameter_list|(
name|TextSource
name|srcA
parameter_list|,
name|TextSource
name|srcB
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|CommentDetail
name|comments
parameter_list|)
block|{
name|int
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcA
operator|.
name|src
operator|==
name|srcB
operator|.
name|src
operator|&&
name|srcA
operator|.
name|size
argument_list|()
operator|<=
name|context
operator|&&
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Odd special case; the files are identical (100% rename or copy)
comment|// and the user has asked for context that is larger than the file.
comment|// Send them the entire file, with an empty edit after the last line.
comment|//
name|SparseFileContentBuilder
name|diffA
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
name|srcA
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcA
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|srcA
operator|.
name|copyLineTo
argument_list|(
name|diffA
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|DiffContent
name|diffContent
init|=
operator|new
name|DiffContent
argument_list|(
name|diffA
operator|.
name|build
argument_list|()
argument_list|,
name|SparseFileContent
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|srcB
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Edit
name|emptyEdit
init|=
operator|new
name|Edit
argument_list|(
name|srcA
operator|.
name|size
argument_list|()
argument_list|,
name|srcA
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|DiffCalculatorResult
argument_list|(
name|diffContent
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|emptyEdit
argument_list|)
argument_list|)
return|;
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Edit
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|correctForDifferencesInNewlineAtEnd
argument_list|(
name|srcA
argument_list|,
name|srcB
argument_list|,
name|edits
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|nonsortedEdits
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|comments
operator|!=
literal|null
condition|)
block|{
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|commentEdits
init|=
name|ensureCommentsVisible
argument_list|(
name|comments
argument_list|,
name|edits
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|commentEdits
argument_list|)
expr_stmt|;
name|nonsortedEdits
operator|=
operator|!
name|commentEdits
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|sortedEdits
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonsortedEdits
condition|)
block|{
name|sortedEdits
operator|=
name|ImmutableList
operator|.
name|sortedCopyOf
argument_list|(
name|EDIT_SORT
argument_list|,
name|sortedEdits
argument_list|)
expr_stmt|;
block|}
comment|// In order to expand the skipped common lines or syntax highlight the
comment|// file properly we need to give the client the complete file contents.
comment|// So force our context temporarily to the complete file size.
comment|//
name|DiffContent
name|diffContent
init|=
name|packContent
argument_list|(
name|srcA
argument_list|,
name|srcB
argument_list|,
name|diffPrefs
operator|.
name|ignoreWhitespace
operator|!=
name|Whitespace
operator|.
name|IGNORE_NONE
argument_list|,
name|sortedEdits
argument_list|,
name|MAX_CONTEXT
argument_list|)
decl_stmt|;
return|return
operator|new
name|DiffCalculatorResult
argument_list|(
name|diffContent
argument_list|,
name|sortedEdits
argument_list|)
return|;
block|}
DECL|method|getContext ()
specifier|private
name|int
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|diffPrefs
operator|.
name|context
operator|==
name|DiffPreferencesInfo
operator|.
name|WHOLE_FILE_CONTEXT
condition|)
block|{
return|return
name|MAX_CONTEXT
return|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|diffPrefs
operator|.
name|context
argument_list|,
name|MAX_CONTEXT
argument_list|)
return|;
block|}
DECL|method|correctForDifferencesInNewlineAtEnd ( TextSource a, TextSource b, ImmutableList<Edit> edits)
specifier|private
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|correctForDifferencesInNewlineAtEnd
parameter_list|(
name|TextSource
name|a
parameter_list|,
name|TextSource
name|b
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
comment|// a.src.size() is the size ignoring a newline at the end whereas a.size() considers it.
name|int
name|aSize
init|=
name|a
operator|.
name|src
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|bSize
init|=
name|b
operator|.
name|src
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|edits
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|aSize
operator|==
literal|0
operator|||
name|bSize
operator|==
literal|0
operator|)
condition|)
block|{
comment|// The diff was requested for a file which was either added or deleted but which JGit doesn't
comment|// consider a file addition/deletion (e.g. requesting a diff for the old file name of a
comment|// renamed file looks like a deletion).
return|return
name|edits
return|;
block|}
if|if
condition|(
name|edits
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|aSize
operator|!=
name|bSize
operator|)
condition|)
block|{
comment|// Only edits due to rebase were present. If we now added the edits for the newlines, the
comment|// code which later assembles the file contents would fail.
return|return
name|edits
return|;
block|}
name|Optional
argument_list|<
name|Edit
argument_list|>
name|lastEdit
init|=
name|getLast
argument_list|(
name|edits
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNewlineAtEndDeleted
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|Edit
argument_list|>
name|lastLineEdit
init|=
name|lastEdit
operator|.
name|filter
argument_list|(
name|edit
lambda|->
name|edit
operator|.
name|getEndA
argument_list|()
operator|==
name|aSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastLineEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Edit
name|edit
init|=
name|lastLineEdit
operator|.
name|get
argument_list|()
decl_stmt|;
name|Edit
name|updatedLastLineEdit
init|=
name|edit
operator|instanceof
name|ReplaceEdit
condition|?
operator|new
name|ReplaceEdit
argument_list|(
name|edit
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndA
argument_list|()
operator|+
literal|1
argument_list|,
name|edit
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndB
argument_list|()
argument_list|,
operator|(
operator|(
name|ReplaceEdit
operator|)
name|edit
operator|)
operator|.
name|getInternalEdits
argument_list|()
argument_list|)
else|:
operator|new
name|Edit
argument_list|(
name|edit
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndA
argument_list|()
operator|+
literal|1
argument_list|,
name|edit
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndB
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Edit
argument_list|>
name|newEditsBuilder
init|=
name|ImmutableList
operator|.
name|builderWithExpectedSize
argument_list|(
name|edits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newEditsBuilder
operator|.
name|addAll
argument_list|(
name|edits
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|updatedLastLineEdit
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Edit
argument_list|>
name|newEditsBuilder
init|=
name|ImmutableList
operator|.
name|builderWithExpectedSize
argument_list|(
name|edits
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Edit
name|newlineEdit
init|=
operator|new
name|Edit
argument_list|(
name|aSize
argument_list|,
name|aSize
operator|+
literal|1
argument_list|,
name|bSize
argument_list|,
name|bSize
argument_list|)
decl_stmt|;
return|return
name|newEditsBuilder
operator|.
name|addAll
argument_list|(
name|edits
argument_list|)
operator|.
name|add
argument_list|(
name|newlineEdit
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|isNewlineAtEndAdded
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|Edit
argument_list|>
name|lastLineEdit
init|=
name|lastEdit
operator|.
name|filter
argument_list|(
name|edit
lambda|->
name|edit
operator|.
name|getEndB
argument_list|()
operator|==
name|bSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastLineEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Edit
name|edit
init|=
name|lastLineEdit
operator|.
name|get
argument_list|()
decl_stmt|;
name|Edit
name|updatedLastLineEdit
init|=
name|edit
operator|instanceof
name|ReplaceEdit
condition|?
operator|new
name|ReplaceEdit
argument_list|(
name|edit
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndA
argument_list|()
argument_list|,
name|edit
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndB
argument_list|()
operator|+
literal|1
argument_list|,
operator|(
operator|(
name|ReplaceEdit
operator|)
name|edit
operator|)
operator|.
name|getInternalEdits
argument_list|()
argument_list|)
else|:
operator|new
name|Edit
argument_list|(
name|edit
operator|.
name|getBeginA
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndA
argument_list|()
argument_list|,
name|edit
operator|.
name|getBeginB
argument_list|()
argument_list|,
name|edit
operator|.
name|getEndB
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Edit
argument_list|>
name|newEditsBuilder
init|=
name|ImmutableList
operator|.
name|builderWithExpectedSize
argument_list|(
name|edits
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|newEditsBuilder
operator|.
name|addAll
argument_list|(
name|edits
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|updatedLastLineEdit
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Edit
argument_list|>
name|newEditsBuilder
init|=
name|ImmutableList
operator|.
name|builderWithExpectedSize
argument_list|(
name|edits
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Edit
name|newlineEdit
init|=
operator|new
name|Edit
argument_list|(
name|aSize
argument_list|,
name|aSize
argument_list|,
name|bSize
argument_list|,
name|bSize
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|newEditsBuilder
operator|.
name|addAll
argument_list|(
name|edits
argument_list|)
operator|.
name|add
argument_list|(
name|newlineEdit
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|edits
return|;
block|}
DECL|method|getLast (List<T> list)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|getLast
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|isEmpty
argument_list|()
condition|?
name|Optional
operator|.
name|empty
argument_list|()
else|:
name|Optional
operator|.
name|ofNullable
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isNewlineAtEndDeleted (TextSource a, TextSource b)
specifier|private
name|boolean
name|isNewlineAtEndDeleted
parameter_list|(
name|TextSource
name|a
parameter_list|,
name|TextSource
name|b
parameter_list|)
block|{
return|return
operator|!
name|a
operator|.
name|src
operator|.
name|isMissingNewlineAtEnd
argument_list|()
operator|&&
name|b
operator|.
name|src
operator|.
name|isMissingNewlineAtEnd
argument_list|()
return|;
block|}
DECL|method|isNewlineAtEndAdded (TextSource a, TextSource b)
specifier|private
name|boolean
name|isNewlineAtEndAdded
parameter_list|(
name|TextSource
name|a
parameter_list|,
name|TextSource
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|src
operator|.
name|isMissingNewlineAtEnd
argument_list|()
operator|&&
operator|!
name|b
operator|.
name|src
operator|.
name|isMissingNewlineAtEnd
argument_list|()
return|;
block|}
DECL|method|ensureCommentsVisible ( CommentDetail comments, ImmutableList<Edit> edits)
specifier|private
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|ensureCommentsVisible
parameter_list|(
name|CommentDetail
name|comments
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
if|if
condition|(
name|comments
operator|.
name|getCommentsA
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|comments
operator|.
name|getCommentsB
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No comments, no additional dummy edits are required.
comment|//
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
comment|// Construct empty Edit blocks around each location where a comment is.
comment|// This will force the later packContent method to include the regions
comment|// containing comments, potentially combining those regions together if
comment|// they have overlapping contexts. UI renders will also be able to make
comment|// correct hunks from this, but because the Edit is empty they will not
comment|// style it specially.
comment|//
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Edit
argument_list|>
name|commmentEdits
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|lastLine
decl_stmt|;
name|lastLine
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|comments
operator|.
name|getCommentsA
argument_list|()
control|)
block|{
specifier|final
name|int
name|a
init|=
name|c
operator|.
name|lineNbr
decl_stmt|;
if|if
condition|(
name|lastLine
operator|!=
name|a
condition|)
block|{
specifier|final
name|int
name|b
init|=
name|mapA2B
argument_list|(
name|a
operator|-
literal|1
argument_list|,
name|edits
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|b
condition|)
block|{
name|getNewEditForComment
argument_list|(
name|edits
argument_list|,
operator|new
name|Edit
argument_list|(
name|a
operator|-
literal|1
argument_list|,
name|b
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|commmentEdits
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
name|lastLine
operator|=
name|a
expr_stmt|;
block|}
block|}
name|lastLine
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|comments
operator|.
name|getCommentsB
argument_list|()
control|)
block|{
name|int
name|b
init|=
name|c
operator|.
name|lineNbr
decl_stmt|;
if|if
condition|(
name|lastLine
operator|!=
name|b
condition|)
block|{
specifier|final
name|int
name|a
init|=
name|mapB2A
argument_list|(
name|b
operator|-
literal|1
argument_list|,
name|edits
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|a
condition|)
block|{
name|getNewEditForComment
argument_list|(
name|edits
argument_list|,
operator|new
name|Edit
argument_list|(
name|a
argument_list|,
name|b
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|commmentEdits
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
name|lastLine
operator|=
name|b
expr_stmt|;
block|}
block|}
return|return
name|commmentEdits
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getNewEditForComment (ImmutableList<Edit> edits, Edit toAdd)
specifier|private
name|Optional
argument_list|<
name|Edit
argument_list|>
name|getNewEditForComment
parameter_list|(
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|Edit
name|toAdd
parameter_list|)
block|{
specifier|final
name|int
name|a
init|=
name|toAdd
operator|.
name|getBeginA
argument_list|()
decl_stmt|;
specifier|final
name|int
name|b
init|=
name|toAdd
operator|.
name|getBeginB
argument_list|()
decl_stmt|;
for|for
control|(
name|Edit
name|e
range|:
name|edits
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getBeginA
argument_list|()
operator|<=
name|a
operator|&&
name|a
operator|<=
name|e
operator|.
name|getEndA
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getBeginB
argument_list|()
operator|<=
name|b
operator|&&
name|b
operator|<=
name|e
operator|.
name|getEndB
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|toAdd
argument_list|)
return|;
block|}
DECL|method|mapA2B (int a, ImmutableList<Edit> edits)
specifier|private
name|int
name|mapA2B
parameter_list|(
name|int
name|a
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
if|if
condition|(
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Magic special case of an unmodified file.
comment|//
return|return
name|a
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Edit
name|e
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|<
name|e
operator|.
name|getBeginA
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Special case of context at start of file.
comment|//
return|return
name|a
return|;
block|}
return|return
name|e
operator|.
name|getBeginB
argument_list|()
operator|-
operator|(
name|e
operator|.
name|getBeginA
argument_list|()
operator|-
name|a
operator|)
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getBeginA
argument_list|()
operator|<=
name|a
operator|&&
name|a
operator|<=
name|e
operator|.
name|getEndA
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|final
name|Edit
name|last
init|=
name|edits
operator|.
name|get
argument_list|(
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|last
operator|.
name|getEndB
argument_list|()
operator|+
operator|(
name|a
operator|-
name|last
operator|.
name|getEndA
argument_list|()
operator|)
return|;
block|}
DECL|method|mapB2A (int b, ImmutableList<Edit> edits)
specifier|private
name|int
name|mapB2A
parameter_list|(
name|int
name|b
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
if|if
condition|(
name|edits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Magic special case of an unmodified file.
comment|//
return|return
name|b
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Edit
name|e
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|<
name|e
operator|.
name|getBeginB
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Special case of context at start of file.
comment|//
return|return
name|b
return|;
block|}
return|return
name|e
operator|.
name|getBeginA
argument_list|()
operator|-
operator|(
name|e
operator|.
name|getBeginB
argument_list|()
operator|-
name|b
operator|)
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getBeginB
argument_list|()
operator|<=
name|b
operator|&&
name|b
operator|<=
name|e
operator|.
name|getEndB
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|final
name|Edit
name|last
init|=
name|edits
operator|.
name|get
argument_list|(
name|edits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|last
operator|.
name|getEndA
argument_list|()
operator|+
operator|(
name|b
operator|-
name|last
operator|.
name|getEndB
argument_list|()
operator|)
return|;
block|}
DECL|method|packContent ( TextSource a, TextSource b, boolean ignoredWhitespace, ImmutableList<Edit> edits, int context)
specifier|private
name|DiffContent
name|packContent
parameter_list|(
name|TextSource
name|a
parameter_list|,
name|TextSource
name|b
parameter_list|,
name|boolean
name|ignoredWhitespace
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|,
name|int
name|context
parameter_list|)
block|{
name|SparseFileContentBuilder
name|diffA
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SparseFileContentBuilder
name|diffB
init|=
operator|new
name|SparseFileContentBuilder
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|EditList
name|list
init|=
operator|new
name|EditList
argument_list|(
name|edits
argument_list|,
name|context
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|EditList
operator|.
name|Hunk
name|hunk
range|:
name|list
operator|.
name|getHunks
argument_list|()
control|)
block|{
while|while
condition|(
name|hunk
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|hunk
operator|.
name|isContextLine
argument_list|()
condition|)
block|{
name|String
name|lineA
init|=
name|a
operator|.
name|getSourceLine
argument_list|(
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
decl_stmt|;
name|diffA
operator|.
name|addLine
argument_list|(
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
name|lineA
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoredWhitespace
condition|)
block|{
comment|// If we ignored whitespace in some form, also get the line
comment|// from b when it does not exactly match the line from a.
comment|//
name|String
name|lineB
init|=
name|b
operator|.
name|getSourceLine
argument_list|(
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lineA
operator|.
name|equals
argument_list|(
name|lineB
argument_list|)
condition|)
block|{
name|diffB
operator|.
name|addLine
argument_list|(
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|,
name|lineB
argument_list|)
expr_stmt|;
block|}
block|}
name|hunk
operator|.
name|incBoth
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|hunk
operator|.
name|isDeletedA
argument_list|()
condition|)
block|{
name|a
operator|.
name|copyLineTo
argument_list|(
name|diffA
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incA
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hunk
operator|.
name|isInsertedB
argument_list|()
condition|)
block|{
name|b
operator|.
name|copyLineTo
argument_list|(
name|diffB
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incB
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|DiffContent
argument_list|(
name|diffA
operator|.
name|build
argument_list|()
argument_list|,
name|diffB
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Contains information to be displayed in line-by-line diff view. */
DECL|class|DiffCalculatorResult
specifier|static
class|class
name|DiffCalculatorResult
block|{
comment|// This class is not @AutoValue, because Edit is mutable
comment|/** Lines to be displayed */
DECL|field|diffContent
specifier|final
name|DiffContent
name|diffContent
decl_stmt|;
comment|/** List of edits including "fake" edits for unchanged lines with comments. */
DECL|field|edits
specifier|final
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
decl_stmt|;
DECL|method|DiffCalculatorResult (DiffContent diffContent, ImmutableList<Edit> edits)
name|DiffCalculatorResult
parameter_list|(
name|DiffContent
name|diffContent
parameter_list|,
name|ImmutableList
argument_list|<
name|Edit
argument_list|>
name|edits
parameter_list|)
block|{
name|this
operator|.
name|diffContent
operator|=
name|diffContent
expr_stmt|;
name|this
operator|.
name|edits
operator|=
name|edits
expr_stmt|;
block|}
block|}
comment|/** Lines to be displayed in line-by-line diff view. */
DECL|class|DiffContent
specifier|static
class|class
name|DiffContent
block|{
comment|/* All lines from the original text (i.e. srcA) to be displayed. */
DECL|field|a
specifier|final
name|SparseFileContent
name|a
decl_stmt|;
comment|/**      * All lines from the new text (i.e. srcB) which are different than in original text. Lines are:      * a) All changed lines (i.e. if the content of the line was replaced with the new line) b) All      * inserted lines Note, that deleted lines are added to the a and are not added to b      */
DECL|field|b
specifier|final
name|SparseFileContent
name|b
decl_stmt|;
DECL|method|DiffContent (SparseFileContent a, SparseFileContent b)
name|DiffContent
parameter_list|(
name|SparseFileContent
name|a
parameter_list|,
name|SparseFileContent
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
block|}
DECL|class|TextSource
specifier|static
class|class
name|TextSource
block|{
DECL|field|src
specifier|final
name|Text
name|src
decl_stmt|;
DECL|method|TextSource (Text src)
name|TextSource
parameter_list|(
name|Text
name|src
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|src
operator|.
name|isMissingNewlineAtEnd
argument_list|()
condition|)
block|{
return|return
name|src
operator|.
name|size
argument_list|()
return|;
block|}
return|return
name|src
operator|.
name|size
argument_list|()
operator|+
literal|1
return|;
block|}
DECL|method|copyLineTo (SparseFileContentBuilder target, int lineNumber)
name|void
name|copyLineTo
parameter_list|(
name|SparseFileContentBuilder
name|target
parameter_list|,
name|int
name|lineNumber
parameter_list|)
block|{
name|target
operator|.
name|addLine
argument_list|(
name|lineNumber
argument_list|,
name|getSourceLine
argument_list|(
name|lineNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceLine (int lineNumber)
specifier|private
name|String
name|getSourceLine
parameter_list|(
name|int
name|lineNumber
parameter_list|)
block|{
return|return
name|lineNumber
operator|>=
name|src
operator|.
name|size
argument_list|()
condition|?
literal|""
else|:
name|src
operator|.
name|getString
argument_list|(
name|lineNumber
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

