begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.patch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|FixReplacement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LargeObjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_class
DECL|class|PatchScriptFactoryForAutoFix
specifier|public
class|class
name|PatchScriptFactoryForAutoFix
implements|implements
name|Callable
argument_list|<
name|PatchScript
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create ( Repository git, ChangeNotes notes, String fileName, PatchSet patchSet, ImmutableList<FixReplacement> fixReplacements, DiffPreferencesInfo diffPrefs)
name|PatchScriptFactoryForAutoFix
name|create
parameter_list|(
name|Repository
name|git
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|fileName
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|,
name|ImmutableList
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|,
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
function_decl|;
block|}
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|notes
specifier|private
specifier|final
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|builderFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|PatchScriptBuilder
argument_list|>
name|builderFactory
decl_stmt|;
DECL|field|git
specifier|private
specifier|final
name|Repository
name|git
decl_stmt|;
DECL|field|patchSet
specifier|private
specifier|final
name|PatchSet
name|patchSet
decl_stmt|;
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|diffPrefs
specifier|private
specifier|final
name|DiffPreferencesInfo
name|diffPrefs
decl_stmt|;
DECL|field|fixReplacements
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|PatchScriptFactoryForAutoFix ( Provider<PatchScriptBuilder> builderFactory, PermissionBackend permissionBackend, ProjectCache projectCache, @Assisted Repository git, @Assisted ChangeNotes notes, @Assisted String fileName, @Assisted PatchSet patchSet, @Assisted ImmutableList<FixReplacement> fixReplacements, @Assisted DiffPreferencesInfo diffPrefs)
name|PatchScriptFactoryForAutoFix
parameter_list|(
name|Provider
argument_list|<
name|PatchScriptBuilder
argument_list|>
name|builderFactory
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|Assisted
name|Repository
name|git
parameter_list|,
annotation|@
name|Assisted
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Assisted
name|String
name|fileName
parameter_list|,
annotation|@
name|Assisted
name|PatchSet
name|patchSet
parameter_list|,
annotation|@
name|Assisted
name|ImmutableList
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|,
annotation|@
name|Assisted
name|DiffPreferencesInfo
name|diffPrefs
parameter_list|)
block|{
name|this
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|patchSet
operator|.
name|id
argument_list|()
operator|.
name|changeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|git
operator|=
name|git
expr_stmt|;
name|this
operator|.
name|patchSet
operator|=
name|patchSet
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|fixReplacements
operator|=
name|fixReplacements
expr_stmt|;
name|this
operator|.
name|builderFactory
operator|=
name|builderFactory
expr_stmt|;
name|this
operator|.
name|diffPrefs
operator|=
name|diffPrefs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|PatchScript
name|call
parameter_list|()
throws|throws
name|LargeObjectException
throws|,
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|PermissionBackendException
block|{
try|try
block|{
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|change
argument_list|(
name|notes
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
operator|.
name|statePermitsRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
return|return
name|createPatchScript
argument_list|()
return|;
block|}
DECL|method|createPatchScript ()
specifier|private
name|PatchScript
name|createPatchScript
parameter_list|()
throws|throws
name|LargeObjectException
block|{
name|checkState
argument_list|(
name|patchSet
operator|.
name|id
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
literal|0
argument_list|,
literal|"edit not supported for left side"
argument_list|)
expr_stmt|;
name|PatchScriptBuilder
name|b
init|=
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectId
name|baseId
init|=
name|patchSet
operator|.
name|commitId
argument_list|()
decl_stmt|;
return|return
name|b
operator|.
name|toPatchScript
argument_list|(
name|git
argument_list|,
name|baseId
argument_list|,
name|fileName
argument_list|,
name|fixReplacements
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"AutoFix replacements is not valid"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"AutoFix replacements is not valid"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"File content unavailable"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|LargeObjectException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|LargeObjectException
argument_list|(
literal|"File content is too large"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
DECL|method|newBuilder ()
specifier|private
name|PatchScriptBuilder
name|newBuilder
parameter_list|()
block|{
name|PatchScriptBuilder
name|b
init|=
name|builderFactory
operator|.
name|get
argument_list|()
decl_stmt|;
name|b
operator|.
name|setChange
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setDiffPrefs
argument_list|(
name|diffPrefs
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

