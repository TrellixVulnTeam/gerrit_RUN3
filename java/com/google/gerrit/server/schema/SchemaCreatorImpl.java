begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|DuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RefUpdateUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupUUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|AuditLogFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupNameNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupCreation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|// TODO(dborowitz): The current NoteDb implementation mirrors the old ReviewDb code: this class is
end_comment

begin_comment
comment|// called to create the site early on in NoteDbSchemaUpdater#update. This logic is a little
end_comment

begin_comment
comment|// confusing and could stand to be reworked. Another smell is that this is an interface only for
end_comment

begin_comment
comment|// testing purposes.
end_comment

begin_class
DECL|class|SchemaCreatorImpl
specifier|public
class|class
name|SchemaCreatorImpl
implements|implements
name|SchemaCreator
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allProjectsCreator
specifier|private
specifier|final
name|AllProjectsCreator
name|allProjectsCreator
decl_stmt|;
DECL|field|allUsersCreator
specifier|private
specifier|final
name|AllUsersCreator
name|allUsersCreator
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
DECL|field|indexCollection
specifier|private
specifier|final
name|GroupIndexCollection
name|indexCollection
decl_stmt|;
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Config
name|config
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
annotation|@
name|Inject
DECL|method|SchemaCreatorImpl ( GitRepositoryManager repoManager, AllProjectsCreator ap, AllUsersCreator auc, AllUsersName allUsersName, @GerritPersonIdent PersonIdent au, GroupIndexCollection ic, String serverId, Config config, MetricMaker metricMaker, AllProjectsName apName)
specifier|public
name|SchemaCreatorImpl
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllProjectsCreator
name|ap
parameter_list|,
name|AllUsersCreator
name|auc
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|au
parameter_list|,
name|GroupIndexCollection
name|ic
parameter_list|,
name|String
name|serverId
parameter_list|,
name|Config
name|config
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|AllProjectsName
name|apName
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|allProjectsCreator
operator|=
name|ap
expr_stmt|;
name|allUsersCreator
operator|=
name|auc
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|serverUser
operator|=
name|au
expr_stmt|;
name|indexCollection
operator|=
name|ic
expr_stmt|;
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|allProjectsName
operator|=
name|apName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create ()
specifier|public
name|void
name|create
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|GroupReference
name|admins
init|=
name|createGroupReference
argument_list|(
literal|"Administrators"
argument_list|)
decl_stmt|;
name|GroupReference
name|batchUsers
init|=
name|createGroupReference
argument_list|(
literal|"Non-Interactive Users"
argument_list|)
decl_stmt|;
name|AllProjectsInput
name|allProjectsInput
init|=
name|AllProjectsInput
operator|.
name|builder
argument_list|()
operator|.
name|administratorsGroup
argument_list|(
name|admins
argument_list|)
operator|.
name|batchUsersGroup
argument_list|(
name|batchUsers
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|allProjectsCreator
operator|.
name|create
argument_list|(
name|allProjectsInput
argument_list|)
expr_stmt|;
comment|// We have to create the All-Users repository before we can use it to store the groups in it.
name|allUsersCreator
operator|.
name|setAdministrators
argument_list|(
name|admins
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Don't rely on injection to construct Sequences, as the default GitReferenceUpdated has a
comment|// thick dependency stack which may not all be available at schema creation time.
name|Sequences
name|seqs
init|=
operator|new
name|Sequences
argument_list|(
name|config
argument_list|,
name|repoManager
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allProjectsName
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|createAdminsGroup
argument_list|(
name|seqs
argument_list|,
name|allUsersRepo
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|createBatchUsersGroup
argument_list|(
name|seqs
argument_list|,
name|allUsersRepo
argument_list|,
name|batchUsers
argument_list|,
name|admins
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|ensureCreated ()
specifier|public
name|void
name|ensureCreated
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
block|{
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allProjectsName
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|e
parameter_list|)
block|{
name|create
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createAdminsGroup ( Sequences seqs, Repository allUsersRepo, GroupReference groupReference)
specifier|private
name|void
name|createAdminsGroup
parameter_list|(
name|Sequences
name|seqs
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|GroupReference
name|groupReference
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getGroupCreation
argument_list|(
name|seqs
argument_list|,
name|groupReference
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"Gerrit Site Administrators"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|allUsersRepo
argument_list|,
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|createBatchUsersGroup ( Sequences seqs, Repository allUsersRepo, GroupReference groupReference, AccountGroup.UUID adminsGroupUuid)
specifier|private
name|void
name|createBatchUsersGroup
parameter_list|(
name|Sequences
name|seqs
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|GroupReference
name|groupReference
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|adminsGroupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroupCreation
name|groupCreation
init|=
name|getGroupCreation
argument_list|(
name|seqs
argument_list|,
name|groupReference
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setDescription
argument_list|(
literal|"Users who perform batch actions on Gerrit"
argument_list|)
operator|.
name|setOwnerGroupUUID
argument_list|(
name|adminsGroupUuid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createGroup
argument_list|(
name|allUsersRepo
argument_list|,
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroup ( Repository allUsersRepo, InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|private
name|void
name|createGroup
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
name|InternalGroup
name|createdGroup
init|=
name|createGroupInNoteDb
argument_list|(
name|allUsersRepo
argument_list|,
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|index
argument_list|(
name|createdGroup
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroupInNoteDb ( Repository allUsersRepo, InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|private
name|InternalGroup
name|createGroupInNoteDb
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
throws|,
name|DuplicateKeyException
block|{
comment|// This method is only executed on a new server which doesn't have any accounts or groups.
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|serverId
argument_list|)
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
name|groupUpdate
operator|.
name|getName
argument_list|()
operator|.
name|orElseGet
argument_list|(
name|groupCreation
operator|::
name|getNameKey
argument_list|)
decl_stmt|;
name|GroupNameNotes
name|groupNameNotes
init|=
name|GroupNameNotes
operator|.
name|forNewGroup
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|commit
argument_list|(
name|allUsersRepo
argument_list|,
name|groupConfig
argument_list|,
name|groupNameNotes
argument_list|)
expr_stmt|;
return|return
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"Created group wasn't automatically loaded"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|commit ( Repository allUsersRepo, GroupConfig groupConfig, GroupNameNotes groupNameNotes)
specifier|private
name|void
name|commit
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|GroupConfig
name|groupConfig
parameter_list|,
name|GroupNameNotes
name|groupNameNotes
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchRefUpdate
name|batchRefUpdate
init|=
name|allUsersRepo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|(
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
init|)
block|{
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
comment|// MetaDataUpdates unfortunately can't be reused. -> Create a new one.
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|createMetaDataUpdate
argument_list|(
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
init|)
block|{
name|groupNameNotes
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
name|RefUpdateUtil
operator|.
name|executeChecked
argument_list|(
name|batchRefUpdate
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
block|}
DECL|method|createMetaDataUpdate ( Repository allUsersRepo, @Nullable BatchRefUpdate batchRefUpdate)
specifier|private
name|MetaDataUpdate
name|createMetaDataUpdate
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
annotation|@
name|Nullable
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|)
block|{
name|MetaDataUpdate
name|metaDataUpdate
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
decl_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
return|return
name|metaDataUpdate
return|;
block|}
DECL|method|index (InternalGroup group)
specifier|private
name|void
name|index
parameter_list|(
name|InternalGroup
name|group
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|GroupIndex
name|groupIndex
range|:
name|indexCollection
operator|.
name|getWriteIndexes
argument_list|()
control|)
block|{
name|groupIndex
operator|.
name|replace
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createGroupReference (String name)
specifier|private
name|GroupReference
name|createGroupReference
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|AccountGroup
operator|.
name|UUID
name|groupUuid
init|=
name|GroupUUID
operator|.
name|make
argument_list|(
name|name
argument_list|,
name|serverUser
argument_list|)
decl_stmt|;
return|return
operator|new
name|GroupReference
argument_list|(
name|groupUuid
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|getGroupCreation (Sequences seqs, GroupReference groupReference)
specifier|private
name|InternalGroupCreation
name|getGroupCreation
parameter_list|(
name|Sequences
name|seqs
parameter_list|,
name|GroupReference
name|groupReference
parameter_list|)
block|{
name|int
name|next
init|=
name|seqs
operator|.
name|nextGroupId
argument_list|()
decl_stmt|;
return|return
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setNameKey
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupReference
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setId
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|next
argument_list|)
argument_list|)
operator|.
name|setGroupUUID
argument_list|(
name|groupReference
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

