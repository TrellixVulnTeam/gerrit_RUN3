begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
operator|.
name|checkColumns
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|naturalOrder
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|nullsLast
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupById
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupByIdAud
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMemberAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|AuditLogReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * A bundle of all entities rooted at a single {@link AccountGroup} entity.  *  *<p>Used primarily during the migration process. Most callers should prefer {@link InternalGroup}  * instead.  */
end_comment

begin_class
annotation|@
name|AutoValue
DECL|class|GroupBundle
specifier|abstract
class|class
name|GroupBundle
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
static|static
block|{
comment|// Initialization-time checks that the column set hasn't changed since the
comment|// last time this file was updated.
name|checkColumns
argument_list|(
name|AccountGroup
operator|.
name|NameKey
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroup
operator|.
name|UUID
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroup
operator|.
name|Id
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroup
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupById
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupById
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupByIdAud
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupByIdAud
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupMember
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupMember
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupMemberAudit
operator|.
name|Key
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkColumns
argument_list|(
name|AccountGroupMemberAudit
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|enum|Source
specifier|public
enum|enum
name|Source
block|{
DECL|enumConstant|REVIEW_DB
name|REVIEW_DB
argument_list|(
literal|"ReviewDb"
argument_list|)
block|,
DECL|enumConstant|NOTE_DB
name|NOTE_DB
argument_list|(
literal|"NoteDb"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|Source (String name)
specifier|private
name|Source
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|auditLogReader
specifier|private
specifier|final
name|AuditLogReader
name|auditLogReader
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (AuditLogReader auditLogReader)
name|Factory
parameter_list|(
name|AuditLogReader
name|auditLogReader
parameter_list|)
block|{
name|this
operator|.
name|auditLogReader
operator|=
name|auditLogReader
expr_stmt|;
block|}
DECL|method|fromNoteDb (Repository repo, AccountGroup.UUID uuid)
specifier|public
name|GroupBundle
name|fromNoteDb
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|InternalGroup
name|internalGroup
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
name|internalGroup
operator|.
name|getId
argument_list|()
decl_stmt|;
name|AccountGroup
name|accountGroup
init|=
operator|new
name|AccountGroup
argument_list|(
name|internalGroup
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|internalGroup
operator|.
name|getId
argument_list|()
argument_list|,
name|internalGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|internalGroup
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
decl_stmt|;
name|accountGroup
operator|.
name|setDescription
argument_list|(
name|internalGroup
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|accountGroup
operator|.
name|setOwnerGroupUUID
argument_list|(
name|internalGroup
operator|.
name|getOwnerGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
name|accountGroup
operator|.
name|setVisibleToAll
argument_list|(
name|internalGroup
operator|.
name|isVisibleToAll
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|create
argument_list|(
name|Source
operator|.
name|NOTE_DB
argument_list|,
name|accountGroup
argument_list|,
name|internalGroup
operator|.
name|getMembers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountId
lambda|->
operator|new
name|AccountGroupMember
argument_list|(
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|,
name|auditLogReader
operator|.
name|getMembersAudit
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|internalGroup
operator|.
name|getSubgroups
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|subgroupUuid
lambda|->
operator|new
name|AccountGroupById
argument_list|(
operator|new
name|AccountGroupById
operator|.
name|Key
argument_list|(
name|groupId
argument_list|,
name|subgroupUuid
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|,
name|auditLogReader
operator|.
name|getSubgroupsAudit
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fromReviewDb (ReviewDb db, AccountGroup.UUID groupUuid)
specifier|public
specifier|static
name|GroupBundle
name|fromReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|OrmException
block|{
name|JdbcSchema
name|jdbcSchema
init|=
name|ReviewDbWrapper
operator|.
name|unwrapJbdcSchema
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
name|readAccountGroupFromReviewDb
argument_list|(
name|jdbcSchema
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
name|group
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
name|create
argument_list|(
name|Source
operator|.
name|REVIEW_DB
argument_list|,
name|group
argument_list|,
name|readAccountGroupMembersFromReviewDb
argument_list|(
name|jdbcSchema
argument_list|,
name|groupId
argument_list|)
argument_list|,
name|readAccountGroupMemberAuditsFromReviewDb
argument_list|(
name|jdbcSchema
argument_list|,
name|groupId
argument_list|)
argument_list|,
name|readAccountGroupSubgroupsFromReviewDb
argument_list|(
name|jdbcSchema
argument_list|,
name|groupId
argument_list|)
argument_list|,
name|readAccountGroupSubgroupAuditsFromReviewDb
argument_list|(
name|jdbcSchema
argument_list|,
name|groupId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readAccountGroupFromReviewDb ( JdbcSchema jdbcSchema, AccountGroup.UUID groupUuid)
specifier|private
specifier|static
name|AccountGroup
name|readAccountGroupFromReviewDb
parameter_list|(
name|JdbcSchema
name|jdbcSchema
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT group_id,"
operator|+
literal|" name,"
operator|+
literal|" created_on,"
operator|+
literal|" description,"
operator|+
literal|" owner_group_uuid,"
operator|+
literal|" visible_to_all"
operator|+
literal|" FROM account_groups"
operator|+
literal|" WHERE group_uuid = '"
operator|+
name|groupUuid
operator|.
name|get
argument_list|()
operator|+
literal|"'"
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group %s not found"
argument_list|,
name|groupUuid
argument_list|)
argument_list|)
throw|;
block|}
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|ownerGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|visibleToAll
init|=
literal|"Y"
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
operator|new
name|AccountGroup
argument_list|(
name|groupName
argument_list|,
name|groupId
argument_list|,
name|groupUuid
argument_list|,
name|createdOn
argument_list|)
decl_stmt|;
name|group
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|group
operator|.
name|setOwnerGroupUUID
argument_list|(
name|ownerGroupUuid
argument_list|)
expr_stmt|;
name|group
operator|.
name|setVisibleToAll
argument_list|(
name|visibleToAll
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group UUID %s is ambiguous"
argument_list|,
name|groupUuid
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|group
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read account group %s from ReviewDb"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readAccountGroupMembersFromReviewDb ( JdbcSchema jdbcSchema, AccountGroup.Id groupId)
specifier|private
specifier|static
name|List
argument_list|<
name|AccountGroupMember
argument_list|>
name|readAccountGroupMembersFromReviewDb
parameter_list|(
name|JdbcSchema
name|jdbcSchema
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT account_id"
operator|+
literal|" FROM account_group_members"
operator|+
literal|" WHERE group_id = '"
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|"'"
argument_list|)
init|)
block|{
name|List
argument_list|<
name|AccountGroupMember
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|members
operator|.
name|add
argument_list|(
operator|new
name|AccountGroupMember
argument_list|(
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|members
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read members of account group %s from ReviewDb"
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readAccountGroupMemberAuditsFromReviewDb ( JdbcSchema jdbcSchema, AccountGroup.Id groupId)
specifier|private
specifier|static
name|List
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|readAccountGroupMemberAuditsFromReviewDb
parameter_list|(
name|JdbcSchema
name|jdbcSchema
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT account_id, added_by, added_on, removed_by, removed_on"
operator|+
literal|" FROM account_group_members_audit"
operator|+
literal|" WHERE group_id = '"
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|"'"
argument_list|)
init|)
block|{
name|List
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|audits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|addedBy
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|addedOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Timestamp
name|removedOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|removedBy
init|=
name|removedOn
operator|!=
literal|null
condition|?
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|AccountGroupMemberAudit
operator|.
name|Key
name|key
init|=
operator|new
name|AccountGroupMemberAudit
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|,
name|addedOn
argument_list|)
decl_stmt|;
name|AccountGroupMemberAudit
name|audit
init|=
operator|new
name|AccountGroupMemberAudit
argument_list|(
name|key
argument_list|,
name|addedBy
argument_list|)
decl_stmt|;
name|audit
operator|.
name|removed
argument_list|(
name|removedBy
argument_list|,
name|removedOn
argument_list|)
expr_stmt|;
name|audits
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
return|return
name|audits
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read member audits of account group %s from ReviewDb"
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readAccountGroupSubgroupsFromReviewDb ( JdbcSchema jdbcSchema, AccountGroup.Id groupId)
specifier|private
specifier|static
name|List
argument_list|<
name|AccountGroupById
argument_list|>
name|readAccountGroupSubgroupsFromReviewDb
parameter_list|(
name|JdbcSchema
name|jdbcSchema
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT include_uuid"
operator|+
literal|" FROM account_group_by_id"
operator|+
literal|" WHERE group_id = '"
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|"'"
argument_list|)
init|)
block|{
name|List
argument_list|<
name|AccountGroupById
argument_list|>
name|subgroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|UUID
name|includedGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|subgroups
operator|.
name|add
argument_list|(
operator|new
name|AccountGroupById
argument_list|(
operator|new
name|AccountGroupById
operator|.
name|Key
argument_list|(
name|groupId
argument_list|,
name|includedGroupUuid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|subgroups
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read subgroups of account group %s from ReviewDb"
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readAccountGroupSubgroupAuditsFromReviewDb ( JdbcSchema jdbcSchema, AccountGroup.Id groupId)
specifier|private
specifier|static
name|List
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|readAccountGroupSubgroupAuditsFromReviewDb
parameter_list|(
name|JdbcSchema
name|jdbcSchema
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|jdbcSchema
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
init|;
name|ResultSet
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT include_uuid, added_by, added_on, removed_by, removed_on"
operator|+
literal|" FROM account_group_by_id_aud"
operator|+
literal|" WHERE group_id = '"
operator|+
name|groupId
operator|.
name|get
argument_list|()
operator|+
literal|"'"
argument_list|)
init|)
block|{
name|List
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|audits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|UUID
name|includedGroupUuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|addedBy
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|addedOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Timestamp
name|removedOn
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|removedBy
init|=
name|removedOn
operator|!=
literal|null
condition|?
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|AccountGroupByIdAud
operator|.
name|Key
name|key
init|=
operator|new
name|AccountGroupByIdAud
operator|.
name|Key
argument_list|(
name|groupId
argument_list|,
name|includedGroupUuid
argument_list|,
name|addedOn
argument_list|)
decl_stmt|;
name|AccountGroupByIdAud
name|audit
init|=
operator|new
name|AccountGroupByIdAud
argument_list|(
name|key
argument_list|,
name|addedBy
argument_list|)
decl_stmt|;
name|audit
operator|.
name|removed
argument_list|(
name|removedBy
argument_list|,
name|removedOn
argument_list|)
expr_stmt|;
name|audits
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
return|return
name|audits
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read subgroup audits of account group %s from ReviewDb"
argument_list|,
name|groupId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|ACCOUNT_GROUP_MEMBER_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|AccountGroupMember
argument_list|>
name|ACCOUNT_GROUP_MEMBER_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
parameter_list|(
name|AccountGroupMember
name|m
parameter_list|)
lambda|->
name|m
operator|.
name|getAccountGroupId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getAccountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ACCOUNT_GROUP_MEMBER_AUDIT_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|ACCOUNT_GROUP_MEMBER_AUDIT_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
parameter_list|(
name|AccountGroupMemberAudit
name|a
parameter_list|)
lambda|->
name|a
operator|.
name|getGroupId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AccountGroupMemberAudit
operator|::
name|getAddedOn
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAddedBy
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getMemberId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getRemovedBy
argument_list|()
operator|!=
literal|null
condition|?
name|a
operator|.
name|getRemovedBy
argument_list|()
operator|.
name|get
argument_list|()
else|:
literal|null
condition|,
name|nullsLast
argument_list|(
name|naturalOrder
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AccountGroupMemberAudit
operator|::
name|getRemovedOn
argument_list|,
name|nullsLast
argument_list|(
name|naturalOrder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ACCOUNT_GROUP_BY_ID_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|AccountGroupById
argument_list|>
name|ACCOUNT_GROUP_BY_ID_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
parameter_list|(
name|AccountGroupById
name|m
parameter_list|)
lambda|->
name|m
operator|.
name|getGroupId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AccountGroupById
operator|::
name|getIncludeUUID
argument_list|)
decl_stmt|;
DECL|field|ACCOUNT_GROUP_BY_ID_AUD_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|ACCOUNT_GROUP_BY_ID_AUD_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
parameter_list|(
name|AccountGroupByIdAud
name|a
parameter_list|)
lambda|->
name|a
operator|.
name|getGroupId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AccountGroupByIdAud
operator|::
name|getAddedOn
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAddedBy
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AccountGroupByIdAud
operator|::
name|getIncludeUUID
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getRemovedBy
argument_list|()
operator|!=
literal|null
condition|?
name|a
operator|.
name|getRemovedBy
argument_list|()
operator|.
name|get
argument_list|()
else|:
literal|null
condition|,
name|nullsLast
argument_list|(
name|naturalOrder
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AccountGroupByIdAud
operator|::
name|getRemovedOn
argument_list|,
name|nullsLast
argument_list|(
name|naturalOrder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|AUDIT_ENTRY_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|AuditEntry
argument_list|>
name|AUDIT_ENTRY_COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|AuditEntry
operator|::
name|getTimestamp
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|AuditEntry
operator|::
name|getAction
argument_list|,
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|Action
operator|::
name|getOrder
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|create ( Source source, AccountGroup group, Iterable<AccountGroupMember> members, Iterable<AccountGroupMemberAudit> memberAudit, Iterable<AccountGroupById> byId, Iterable<AccountGroupByIdAud> byIdAudit)
specifier|public
specifier|static
name|GroupBundle
name|create
parameter_list|(
name|Source
name|source
parameter_list|,
name|AccountGroup
name|group
parameter_list|,
name|Iterable
argument_list|<
name|AccountGroupMember
argument_list|>
name|members
parameter_list|,
name|Iterable
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|memberAudit
parameter_list|,
name|Iterable
argument_list|<
name|AccountGroupById
argument_list|>
name|byId
parameter_list|,
name|Iterable
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|byIdAudit
parameter_list|)
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|group
operator|.
name|getGroupUUID
argument_list|()
decl_stmt|;
return|return
operator|new
name|AutoValue_GroupBundle
operator|.
name|Builder
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|group
argument_list|(
name|group
argument_list|)
operator|.
name|members
argument_list|(
name|logIfNotUnique
argument_list|(
name|source
argument_list|,
name|uuid
argument_list|,
name|members
argument_list|,
name|ACCOUNT_GROUP_MEMBER_COMPARATOR
argument_list|,
name|AccountGroupMember
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|memberAudit
argument_list|(
name|logIfNotUnique
argument_list|(
name|source
argument_list|,
name|uuid
argument_list|,
name|memberAudit
argument_list|,
name|ACCOUNT_GROUP_MEMBER_AUDIT_COMPARATOR
argument_list|,
name|AccountGroupMemberAudit
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|byId
argument_list|(
name|logIfNotUnique
argument_list|(
name|source
argument_list|,
name|uuid
argument_list|,
name|byId
argument_list|,
name|ACCOUNT_GROUP_BY_ID_COMPARATOR
argument_list|,
name|AccountGroupById
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|byIdAudit
argument_list|(
name|logIfNotUnique
argument_list|(
name|source
argument_list|,
name|uuid
argument_list|,
name|byIdAudit
argument_list|,
name|ACCOUNT_GROUP_BY_ID_AUD_COMPARATOR
argument_list|,
name|AccountGroupByIdAud
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|logIfNotUnique ( Source source, AccountGroup.UUID uuid, Iterable<T> iterable, Comparator<T> comparator, Class<T> clazz)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ImmutableSet
argument_list|<
name|T
argument_list|>
name|logIfNotUnique
parameter_list|(
name|Source
name|source
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
name|Streams
operator|.
name|stream
argument_list|(
name|iterable
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparator
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|T
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|!=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// One way this can happen is that distinct audit entities can compare equal, because
comment|// AccountGroup{MemberAudit,ByIdAud}.Key does not include the addedOn timestamp in its
comment|// members() list. However, this particular issue only applies to pure adds, since removedOn
comment|// *is* included in equality. As a result, if this happens, it means the audit log is already
comment|// corrupt, and it's not clear if we can programmatically repair it. For migrating to NoteDb,
comment|// we'll try our best to recreate it, but no guarantees it will match the real sequence of
comment|// attempted operations, which is in any case lost in the mists of time.
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"group %s in %s has duplicate %s entities: %s"
argument_list|,
name|uuid
argument_list|,
name|source
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|method|builder ()
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|AutoValue_GroupBundle
operator|.
name|Builder
argument_list|()
operator|.
name|members
argument_list|()
operator|.
name|memberAudit
argument_list|()
operator|.
name|byId
argument_list|()
operator|.
name|byIdAudit
argument_list|()
return|;
block|}
DECL|method|compareWithAudits ( GroupBundle reviewDbBundle, GroupBundle noteDbBundle)
specifier|public
specifier|static
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|compareWithAudits
parameter_list|(
name|GroupBundle
name|reviewDbBundle
parameter_list|,
name|GroupBundle
name|noteDbBundle
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|reviewDbBundle
argument_list|,
name|noteDbBundle
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|compareWithoutAudits ( GroupBundle reviewDbBundle, GroupBundle noteDbBundle)
specifier|public
specifier|static
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|compareWithoutAudits
parameter_list|(
name|GroupBundle
name|reviewDbBundle
parameter_list|,
name|GroupBundle
name|noteDbBundle
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|reviewDbBundle
argument_list|,
name|noteDbBundle
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|compare ( GroupBundle reviewDbBundle, GroupBundle noteDbBundle, boolean compareAudits)
specifier|private
specifier|static
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|compare
parameter_list|(
name|GroupBundle
name|reviewDbBundle
parameter_list|,
name|GroupBundle
name|noteDbBundle
parameter_list|,
name|boolean
name|compareAudits
parameter_list|)
block|{
comment|// Normalize the ReviewDb bundle to what we expect in NoteDb. This means that values in error
comment|// messages will not reflect the actual data in ReviewDb, but it will make it easier for humans
comment|// to see the difference.
name|reviewDbBundle
operator|=
name|reviewDbBundle
operator|.
name|truncateToSecond
argument_list|()
expr_stmt|;
name|AccountGroup
name|reviewDbGroup
init|=
operator|new
name|AccountGroup
argument_list|(
name|reviewDbBundle
operator|.
name|group
argument_list|()
argument_list|)
decl_stmt|;
name|reviewDbGroup
operator|.
name|setDescription
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|reviewDbGroup
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reviewDbBundle
operator|=
name|reviewDbBundle
operator|.
name|toBuilder
argument_list|()
operator|.
name|group
argument_list|(
name|reviewDbGroup
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|checkArgument
argument_list|(
name|reviewDbBundle
operator|.
name|source
argument_list|()
operator|==
name|Source
operator|.
name|REVIEW_DB
argument_list|,
literal|"first bundle's source must be %s: %s"
argument_list|,
name|Source
operator|.
name|REVIEW_DB
argument_list|,
name|reviewDbBundle
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|noteDbBundle
operator|.
name|source
argument_list|()
operator|==
name|Source
operator|.
name|NOTE_DB
argument_list|,
literal|"second bundle's source must be %s: %s"
argument_list|,
name|Source
operator|.
name|NOTE_DB
argument_list|,
name|noteDbBundle
argument_list|)
expr_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|result
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reviewDbBundle
operator|.
name|group
argument_list|()
operator|.
name|equals
argument_list|(
name|noteDbBundle
operator|.
name|group
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"AccountGroups differ\n"
operator|+
operator|(
literal|"ReviewDb: "
operator|+
name|reviewDbBundle
operator|.
name|group
argument_list|()
operator|+
literal|"\n"
operator|)
operator|+
operator|(
literal|"NoteDb  : "
operator|+
name|noteDbBundle
operator|.
name|group
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reviewDbBundle
operator|.
name|members
argument_list|()
operator|.
name|equals
argument_list|(
name|noteDbBundle
operator|.
name|members
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"AccountGroupMembers differ\n"
operator|+
operator|(
literal|"ReviewDb: "
operator|+
name|reviewDbBundle
operator|.
name|members
argument_list|()
operator|+
literal|"\n"
operator|)
operator|+
operator|(
literal|"NoteDb  : "
operator|+
name|noteDbBundle
operator|.
name|members
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compareAudits
operator|&&
operator|!
name|areMemberAuditsConsideredEqual
argument_list|(
name|reviewDbBundle
operator|.
name|memberAudit
argument_list|()
argument_list|,
name|noteDbBundle
operator|.
name|memberAudit
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"AccountGroupMemberAudits differ\n"
operator|+
operator|(
literal|"ReviewDb: "
operator|+
name|reviewDbBundle
operator|.
name|memberAudit
argument_list|()
operator|+
literal|"\n"
operator|)
operator|+
operator|(
literal|"NoteDb  : "
operator|+
name|noteDbBundle
operator|.
name|memberAudit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reviewDbBundle
operator|.
name|byId
argument_list|()
operator|.
name|equals
argument_list|(
name|noteDbBundle
operator|.
name|byId
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"AccountGroupByIds differ\n"
operator|+
operator|(
literal|"ReviewDb: "
operator|+
name|reviewDbBundle
operator|.
name|byId
argument_list|()
operator|+
literal|"\n"
operator|)
operator|+
operator|(
literal|"NoteDb  : "
operator|+
name|noteDbBundle
operator|.
name|byId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compareAudits
operator|&&
operator|!
name|areByIdAuditsConsideredEqual
argument_list|(
name|reviewDbBundle
operator|.
name|byIdAudit
argument_list|()
argument_list|,
name|noteDbBundle
operator|.
name|byIdAudit
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"AccountGroupByIdAudits differ\n"
operator|+
operator|(
literal|"ReviewDb: "
operator|+
name|reviewDbBundle
operator|.
name|byIdAudit
argument_list|()
operator|+
literal|"\n"
operator|)
operator|+
operator|(
literal|"NoteDb  : "
operator|+
name|noteDbBundle
operator|.
name|byIdAudit
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|areMemberAuditsConsideredEqual ( ImmutableSet<AccountGroupMemberAudit> reviewDbMemberAudits, ImmutableSet<AccountGroupMemberAudit> noteDbMemberAudits)
specifier|private
specifier|static
name|boolean
name|areMemberAuditsConsideredEqual
parameter_list|(
name|ImmutableSet
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|reviewDbMemberAudits
parameter_list|,
name|ImmutableSet
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|noteDbMemberAudits
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|reviewDbMemberAuditsByMemberId
init|=
name|toMemberAuditEntriesByMemberId
argument_list|(
name|reviewDbMemberAudits
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|noteDbMemberAuditsByMemberId
init|=
name|toMemberAuditEntriesByMemberId
argument_list|(
name|noteDbMemberAudits
argument_list|)
decl_stmt|;
return|return
name|areConsideredEqual
argument_list|(
name|reviewDbMemberAuditsByMemberId
argument_list|,
name|noteDbMemberAuditsByMemberId
argument_list|)
return|;
block|}
DECL|method|areByIdAuditsConsideredEqual ( ImmutableSet<AccountGroupByIdAud> reviewDbByIdAudits, ImmutableSet<AccountGroupByIdAud> noteDbByIdAudits)
specifier|private
specifier|static
name|boolean
name|areByIdAuditsConsideredEqual
parameter_list|(
name|ImmutableSet
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|reviewDbByIdAudits
parameter_list|,
name|ImmutableSet
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|noteDbByIdAudits
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|reviewDbByIdAuditsById
init|=
name|toByIdAuditEntriesById
argument_list|(
name|reviewDbByIdAudits
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|noteDbByIdAuditsById
init|=
name|toByIdAuditEntriesById
argument_list|(
name|noteDbByIdAudits
argument_list|)
decl_stmt|;
return|return
name|areConsideredEqual
argument_list|(
name|reviewDbByIdAuditsById
argument_list|,
name|noteDbByIdAuditsById
argument_list|)
return|;
block|}
DECL|method|toMemberAuditEntriesByMemberId ( ImmutableSet<AccountGroupMemberAudit> memberAudits)
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|toMemberAuditEntriesByMemberId
parameter_list|(
name|ImmutableSet
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|memberAudits
parameter_list|)
block|{
return|return
name|memberAudits
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|GroupBundle
operator|::
name|toAuditEntries
argument_list|)
operator|.
name|collect
argument_list|(
name|Multimaps
operator|.
name|toMultimap
argument_list|(
name|AuditEntry
operator|::
name|getTarget
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|::
name|build
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toAuditEntries (AccountGroupMemberAudit memberAudit)
specifier|private
specifier|static
name|Stream
argument_list|<
name|AuditEntry
argument_list|>
name|toAuditEntries
parameter_list|(
name|AccountGroupMemberAudit
name|memberAudit
parameter_list|)
block|{
name|AuditEntry
name|additionAuditEntry
init|=
name|AuditEntry
operator|.
name|create
argument_list|(
name|Action
operator|.
name|ADD
argument_list|,
name|memberAudit
operator|.
name|getAddedBy
argument_list|()
argument_list|,
name|memberAudit
operator|.
name|getMemberId
argument_list|()
argument_list|,
name|memberAudit
operator|.
name|getAddedOn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|memberAudit
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|additionAuditEntry
argument_list|)
return|;
block|}
name|AuditEntry
name|removalAuditEntry
init|=
name|AuditEntry
operator|.
name|create
argument_list|(
name|Action
operator|.
name|REMOVE
argument_list|,
name|memberAudit
operator|.
name|getRemovedBy
argument_list|()
argument_list|,
name|memberAudit
operator|.
name|getMemberId
argument_list|()
argument_list|,
name|memberAudit
operator|.
name|getRemovedOn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|of
argument_list|(
name|additionAuditEntry
argument_list|,
name|removalAuditEntry
argument_list|)
return|;
block|}
DECL|method|toByIdAuditEntriesById ( ImmutableSet<AccountGroupByIdAud> byIdAudits)
specifier|private
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|toByIdAuditEntriesById
parameter_list|(
name|ImmutableSet
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|byIdAudits
parameter_list|)
block|{
return|return
name|byIdAudits
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|GroupBundle
operator|::
name|toAuditEntries
argument_list|)
operator|.
name|collect
argument_list|(
name|Multimaps
operator|.
name|toMultimap
argument_list|(
name|AuditEntry
operator|::
name|getTarget
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|::
name|build
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toAuditEntries (AccountGroupByIdAud byIdAudit)
specifier|private
specifier|static
name|Stream
argument_list|<
name|AuditEntry
argument_list|>
name|toAuditEntries
parameter_list|(
name|AccountGroupByIdAud
name|byIdAudit
parameter_list|)
block|{
name|AuditEntry
name|additionAuditEntry
init|=
name|AuditEntry
operator|.
name|create
argument_list|(
name|Action
operator|.
name|ADD
argument_list|,
name|byIdAudit
operator|.
name|getAddedBy
argument_list|()
argument_list|,
name|byIdAudit
operator|.
name|getIncludeUUID
argument_list|()
argument_list|,
name|byIdAudit
operator|.
name|getAddedOn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|byIdAudit
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|additionAuditEntry
argument_list|)
return|;
block|}
name|AuditEntry
name|removalAuditEntry
init|=
name|AuditEntry
operator|.
name|create
argument_list|(
name|Action
operator|.
name|REMOVE
argument_list|,
name|byIdAudit
operator|.
name|getRemovedBy
argument_list|()
argument_list|,
name|byIdAudit
operator|.
name|getIncludeUUID
argument_list|()
argument_list|,
name|byIdAudit
operator|.
name|getRemovedOn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|of
argument_list|(
name|additionAuditEntry
argument_list|,
name|removalAuditEntry
argument_list|)
return|;
block|}
comment|/**    * Determines whether the audit log entries are equal except for redundant entries. Entries of the    * same type (addition/removal) which follow directly on each other according to their timestamp    * are considered redundant.    */
DECL|method|areConsideredEqual ( ListMultimap<String, AuditEntry> reviewDbMemberAuditsByTarget, ListMultimap<String, AuditEntry> noteDbMemberAuditsByTarget)
specifier|private
specifier|static
name|boolean
name|areConsideredEqual
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|reviewDbMemberAuditsByTarget
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|AuditEntry
argument_list|>
name|noteDbMemberAuditsByTarget
parameter_list|)
block|{
for|for
control|(
name|String
name|target
range|:
name|reviewDbMemberAuditsByTarget
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ImmutableList
argument_list|<
name|AuditEntry
argument_list|>
name|reviewDbAuditEntries
init|=
name|reviewDbMemberAuditsByTarget
operator|.
name|get
argument_list|(
name|target
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|AUDIT_ENTRY_COMPARATOR
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AuditEntry
argument_list|>
name|noteDbAuditEntries
init|=
name|noteDbMemberAuditsByTarget
operator|.
name|get
argument_list|(
name|target
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|AUDIT_ENTRY_COMPARATOR
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|reviewDbIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AuditEntry
name|noteDbAuditEntry
range|:
name|noteDbAuditEntries
control|)
block|{
name|Set
argument_list|<
name|AuditEntry
argument_list|>
name|redundantReviewDbAuditEntries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|reviewDbIndex
operator|<
name|reviewDbAuditEntries
operator|.
name|size
argument_list|()
condition|)
block|{
name|AuditEntry
name|reviewDbAuditEntry
init|=
name|reviewDbAuditEntries
operator|.
name|get
argument_list|(
name|reviewDbIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reviewDbAuditEntry
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
name|noteDbAuditEntry
operator|.
name|getAction
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|redundantReviewDbAuditEntries
operator|.
name|add
argument_list|(
name|reviewDbAuditEntry
argument_list|)
expr_stmt|;
name|reviewDbIndex
operator|++
expr_stmt|;
block|}
comment|// The order of the entries is not perfect as ReviewDb included milliseconds for timestamps
comment|// and we cut off everything below seconds due to NoteDb/git. Consequently, we don't have a
comment|// way to know in this method in which exact order additions/removals within the same second
comment|// happened. The best we can do is to group all additions within the same second as
comment|// redundant entries and the removals afterward. To compensate that we possibly group
comment|// non-redundant additions/removals, we also accept NoteDb audit entries which just occur
comment|// anywhere as ReviewDb audit entries.
if|if
condition|(
operator|!
name|redundantReviewDbAuditEntries
operator|.
name|contains
argument_list|(
name|noteDbAuditEntry
argument_list|)
operator|&&
operator|!
name|reviewDbAuditEntries
operator|.
name|contains
argument_list|(
name|noteDbAuditEntry
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|reviewDbIndex
operator|<
name|reviewDbAuditEntries
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Some of the ReviewDb audit log entries aren't matched by NoteDb audit log entries.
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|id ()
specifier|public
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|()
block|{
return|return
name|group
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|uuid ()
specifier|public
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|()
block|{
return|return
name|group
argument_list|()
operator|.
name|getGroupUUID
argument_list|()
return|;
block|}
DECL|method|source ()
specifier|public
specifier|abstract
name|Source
name|source
parameter_list|()
function_decl|;
DECL|method|group ()
specifier|public
specifier|abstract
name|AccountGroup
name|group
parameter_list|()
function_decl|;
DECL|method|members ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroupMember
argument_list|>
name|members
parameter_list|()
function_decl|;
DECL|method|memberAudit ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|memberAudit
parameter_list|()
function_decl|;
DECL|method|byId ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroupById
argument_list|>
name|byId
parameter_list|()
function_decl|;
DECL|method|byIdAudit ()
specifier|public
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|byIdAudit
parameter_list|()
function_decl|;
DECL|method|toBuilder ()
specifier|public
specifier|abstract
name|Builder
name|toBuilder
parameter_list|()
function_decl|;
DECL|method|truncateToSecond ()
specifier|public
name|GroupBundle
name|truncateToSecond
parameter_list|()
block|{
name|AccountGroup
name|newGroup
init|=
operator|new
name|AccountGroup
argument_list|(
name|group
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newGroup
operator|.
name|getCreatedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newGroup
operator|.
name|setCreatedOn
argument_list|(
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|newGroup
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|toBuilder
argument_list|()
operator|.
name|group
argument_list|(
name|newGroup
argument_list|)
operator|.
name|memberAudit
argument_list|(
name|memberAudit
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupBundle
operator|::
name|truncateToSecond
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|byIdAudit
argument_list|(
name|byIdAudit
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|GroupBundle
operator|::
name|truncateToSecond
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|truncateToSecond (AccountGroupMemberAudit a)
specifier|private
specifier|static
name|AccountGroupMemberAudit
name|truncateToSecond
parameter_list|(
name|AccountGroupMemberAudit
name|a
parameter_list|)
block|{
name|AccountGroupMemberAudit
name|result
init|=
operator|new
name|AccountGroupMemberAudit
argument_list|(
operator|new
name|AccountGroupMemberAudit
operator|.
name|Key
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getAddedOn
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|a
operator|.
name|getAddedBy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getRemovedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|removed
argument_list|(
name|a
operator|.
name|getRemovedBy
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|a
operator|.
name|getRemovedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|truncateToSecond (AccountGroupByIdAud a)
specifier|private
specifier|static
name|AccountGroupByIdAud
name|truncateToSecond
parameter_list|(
name|AccountGroupByIdAud
name|a
parameter_list|)
block|{
name|AccountGroupByIdAud
name|result
init|=
operator|new
name|AccountGroupByIdAud
argument_list|(
operator|new
name|AccountGroupByIdAud
operator|.
name|Key
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getIncludeUUID
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getAddedOn
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|a
operator|.
name|getAddedBy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getRemovedOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|removed
argument_list|(
name|a
operator|.
name|getRemovedBy
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|a
operator|.
name|getRemovedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|toInternalGroup ()
specifier|public
name|InternalGroup
name|toInternalGroup
parameter_list|()
block|{
return|return
name|InternalGroup
operator|.
name|create
argument_list|(
name|group
argument_list|()
argument_list|,
name|members
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AccountGroupMember
operator|::
name|getAccountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|,
name|byId
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AccountGroupById
operator|::
name|getIncludeUUID
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"hashCode is not supported because equals is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Use GroupBundle.compare(a, b) instead of equals"
argument_list|)
throw|;
block|}
annotation|@
name|AutoValue
DECL|class|AuditEntry
specifier|abstract
specifier|static
class|class
name|AuditEntry
block|{
DECL|method|create ( Action action, Account.Id userId, Account.Id memberId, Timestamp timestamp)
specifier|private
specifier|static
name|AuditEntry
name|create
parameter_list|(
name|Action
name|action
parameter_list|,
name|Account
operator|.
name|Id
name|userId
parameter_list|,
name|Account
operator|.
name|Id
name|memberId
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_GroupBundle_AuditEntry
argument_list|(
name|action
argument_list|,
name|userId
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|memberId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
DECL|method|create ( Action action, Account.Id userId, AccountGroup.UUID subgroupId, Timestamp timestamp)
specifier|private
specifier|static
name|AuditEntry
name|create
parameter_list|(
name|Action
name|action
parameter_list|,
name|Account
operator|.
name|Id
name|userId
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|subgroupId
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_GroupBundle_AuditEntry
argument_list|(
name|action
argument_list|,
name|userId
argument_list|,
name|subgroupId
operator|.
name|get
argument_list|()
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
DECL|method|getAction ()
specifier|abstract
name|Action
name|getAction
parameter_list|()
function_decl|;
DECL|method|getUserId ()
specifier|abstract
name|Account
operator|.
name|Id
name|getUserId
parameter_list|()
function_decl|;
DECL|method|getTarget ()
specifier|abstract
name|String
name|getTarget
parameter_list|()
function_decl|;
DECL|method|getTimestamp ()
specifier|abstract
name|Timestamp
name|getTimestamp
parameter_list|()
function_decl|;
block|}
DECL|enum|Action
enum|enum
name|Action
block|{
DECL|enumConstant|ADD
name|ADD
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|REMOVE
name|REMOVE
argument_list|(
literal|2
argument_list|)
block|;
DECL|field|order
specifier|private
specifier|final
name|int
name|order
decl_stmt|;
DECL|method|Action (int order)
name|Action
parameter_list|(
name|int
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
DECL|method|getOrder ()
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
block|}
annotation|@
name|AutoValue
operator|.
name|Builder
DECL|class|Builder
specifier|abstract
specifier|static
class|class
name|Builder
block|{
DECL|method|source (Source source)
specifier|abstract
name|Builder
name|source
parameter_list|(
name|Source
name|source
parameter_list|)
function_decl|;
DECL|method|group (AccountGroup group)
specifier|abstract
name|Builder
name|group
parameter_list|(
name|AccountGroup
name|group
parameter_list|)
function_decl|;
DECL|method|members (AccountGroupMember... member)
specifier|abstract
name|Builder
name|members
parameter_list|(
name|AccountGroupMember
modifier|...
name|member
parameter_list|)
function_decl|;
DECL|method|members (Iterable<AccountGroupMember> member)
specifier|abstract
name|Builder
name|members
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroupMember
argument_list|>
name|member
parameter_list|)
function_decl|;
DECL|method|memberAudit (AccountGroupMemberAudit... audit)
specifier|abstract
name|Builder
name|memberAudit
parameter_list|(
name|AccountGroupMemberAudit
modifier|...
name|audit
parameter_list|)
function_decl|;
DECL|method|memberAudit (Iterable<AccountGroupMemberAudit> audit)
specifier|abstract
name|Builder
name|memberAudit
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|audit
parameter_list|)
function_decl|;
DECL|method|byId (AccountGroupById... byId)
specifier|abstract
name|Builder
name|byId
parameter_list|(
name|AccountGroupById
modifier|...
name|byId
parameter_list|)
function_decl|;
DECL|method|byId (Iterable<AccountGroupById> byId)
specifier|abstract
name|Builder
name|byId
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroupById
argument_list|>
name|byId
parameter_list|)
function_decl|;
DECL|method|byIdAudit (AccountGroupByIdAud... audit)
specifier|abstract
name|Builder
name|byIdAudit
parameter_list|(
name|AccountGroupByIdAud
modifier|...
name|audit
parameter_list|)
function_decl|;
DECL|method|byIdAudit (Iterable<AccountGroupByIdAud> audit)
specifier|abstract
name|Builder
name|byIdAudit
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|audit
parameter_list|)
function_decl|;
DECL|method|build ()
specifier|abstract
name|GroupBundle
name|build
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

