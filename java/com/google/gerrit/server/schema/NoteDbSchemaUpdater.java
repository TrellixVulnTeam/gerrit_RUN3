begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbSchemaVersionManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_class
DECL|class|NoteDbSchemaUpdater
specifier|public
class|class
name|NoteDbSchemaUpdater
block|{
DECL|field|notesMigration
specifier|private
specifier|final
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|versionManager
specifier|private
specifier|final
name|NoteDbSchemaVersionManager
name|versionManager
decl_stmt|;
DECL|field|args
specifier|private
specifier|final
name|NoteDbSchemaVersion
operator|.
name|Arguments
name|args
decl_stmt|;
DECL|field|schemaVersions
specifier|private
specifier|final
name|ImmutableSortedMap
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NoteDbSchemaVersion
argument_list|>
argument_list|>
name|schemaVersions
decl_stmt|;
annotation|@
name|Inject
DECL|method|NoteDbSchemaUpdater ( NotesMigration notesMigration, NoteDbSchemaVersionManager versionManager, NoteDbSchemaVersion.Arguments args)
name|NoteDbSchemaUpdater
parameter_list|(
name|NotesMigration
name|notesMigration
parameter_list|,
name|NoteDbSchemaVersionManager
name|versionManager
parameter_list|,
name|NoteDbSchemaVersion
operator|.
name|Arguments
name|args
parameter_list|)
block|{
name|this
argument_list|(
name|notesMigration
argument_list|,
name|versionManager
argument_list|,
name|args
argument_list|,
name|NoteDbSchemaVersions
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|NoteDbSchemaUpdater ( NotesMigration notesMigration, NoteDbSchemaVersionManager versionManager, NoteDbSchemaVersion.Arguments args, ImmutableSortedMap<Integer, Class<? extends NoteDbSchemaVersion>> schemaVersions)
name|NoteDbSchemaUpdater
parameter_list|(
name|NotesMigration
name|notesMigration
parameter_list|,
name|NoteDbSchemaVersionManager
name|versionManager
parameter_list|,
name|NoteDbSchemaVersion
operator|.
name|Arguments
name|args
parameter_list|,
name|ImmutableSortedMap
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|NoteDbSchemaVersion
argument_list|>
argument_list|>
name|schemaVersions
parameter_list|)
block|{
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|versionManager
operator|=
name|versionManager
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|schemaVersions
operator|=
name|schemaVersions
expr_stmt|;
block|}
DECL|method|update (UpdateUI ui)
specifier|public
name|void
name|update
parameter_list|(
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|notesMigration
operator|.
name|commitChangeWrites
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): Only necessary to make migration tests pass; remove when NoteDb is the
comment|// only option.
return|return;
block|}
for|for
control|(
name|int
name|nextVersion
range|:
name|requiredUpgrades
argument_list|(
name|versionManager
operator|.
name|read
argument_list|()
argument_list|,
name|schemaVersions
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
try|try
block|{
name|ui
operator|.
name|message
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Migrating data to schema %d ..."
argument_list|,
name|nextVersion
argument_list|)
argument_list|)
expr_stmt|;
name|NoteDbSchemaVersions
operator|.
name|get
argument_list|(
name|schemaVersions
argument_list|,
name|nextVersion
argument_list|,
name|args
argument_list|)
operator|.
name|upgrade
argument_list|(
name|ui
argument_list|)
expr_stmt|;
name|versionManager
operator|.
name|increment
argument_list|(
name|nextVersion
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to upgrade to schema version %d"
argument_list|,
name|nextVersion
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|requiredUpgrades ( int currentVersion, ImmutableSortedSet<Integer> allVersions)
specifier|static
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|requiredUpgrades
parameter_list|(
name|int
name|currentVersion
parameter_list|,
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|allVersions
parameter_list|)
throws|throws
name|OrmException
block|{
name|int
name|firstVersion
init|=
name|allVersions
operator|.
name|first
argument_list|()
decl_stmt|;
name|int
name|latestVersion
init|=
name|allVersions
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|latestVersion
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|currentVersion
operator|>
name|latestVersion
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot downgrade NoteDb schema from version %d to %d"
argument_list|,
name|currentVersion
argument_list|,
name|latestVersion
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|firstUpgradeVersion
decl_stmt|;
if|if
condition|(
name|currentVersion
operator|==
literal|0
condition|)
block|{
comment|// Bootstrap NoteDb version to minimum supported schema number.
name|firstUpgradeVersion
operator|=
name|firstVersion
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentVersion
operator|<
name|firstVersion
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot skip NoteDb schema from version %d to %d"
argument_list|,
name|currentVersion
argument_list|,
name|firstVersion
argument_list|)
argument_list|)
throw|;
block|}
name|firstUpgradeVersion
operator|=
name|currentVersion
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|IntStream
operator|.
name|rangeClosed
argument_list|(
name|firstUpgradeVersion
argument_list|,
name|latestVersion
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

