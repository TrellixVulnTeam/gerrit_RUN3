begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|IllegalLabelException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StarredChangesUtil
operator|.
name|StarRef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_class
DECL|class|Schema_161
specifier|public
class|class
name|Schema_161
extends|extends
name|SchemaVersion
block|{
DECL|field|MUTE_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|MUTE_LABEL
init|=
literal|"mute"
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_161 ( Provider<Schema_160> prior, GitRepositoryManager repoManager, AllUsersName allUsersName)
name|Schema_161
parameter_list|(
name|Provider
argument_list|<
name|Schema_160
argument_list|>
name|prior
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
init|(
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|git
argument_list|)
init|)
block|{
name|BatchRefUpdate
name|bru
init|=
name|git
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
name|bru
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|git
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|REFS_STARRED_CHANGES
argument_list|)
control|)
block|{
name|StarRef
name|starRef
init|=
name|StarredChangesUtil
operator|.
name|readLabels
argument_list|(
name|git
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|mutedPatchSets
init|=
name|StarredChangesUtil
operator|.
name|getStarredPatchSets
argument_list|(
name|starRef
operator|.
name|labels
argument_list|()
argument_list|,
name|MUTE_LABEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|mutedPatchSets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|reviewedPatchSets
init|=
name|StarredChangesUtil
operator|.
name|getStarredPatchSets
argument_list|(
name|starRef
operator|.
name|labels
argument_list|()
argument_list|,
name|StarredChangesUtil
operator|.
name|REVIEWED_LABEL
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|unreviewedPatchSets
init|=
name|StarredChangesUtil
operator|.
name|getStarredPatchSets
argument_list|(
name|starRef
operator|.
name|labels
argument_list|()
argument_list|,
name|StarredChangesUtil
operator|.
name|UNREVIEWED_LABEL
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newLabels
init|=
name|starRef
operator|.
name|labels
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|l
lambda|->
block|{
if|if
condition|(
name|l
operator|.
name|startsWith
argument_list|(
name|MUTE_LABEL
argument_list|)
condition|)
block|{
name|Integer
name|mutedPatchSet
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|l
operator|.
name|substring
argument_list|(
name|MUTE_LABEL
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mutedPatchSet
operator|==
literal|null
condition|)
block|{
comment|// unexpected format of mute label, must be a label that was manually
comment|// set, just leave it alone
return|return
name|l
return|;
block|}
if|if
condition|(
operator|!
name|reviewedPatchSets
operator|.
name|contains
argument_list|(
name|mutedPatchSet
argument_list|)
operator|&&
operator|!
name|unreviewedPatchSets
operator|.
name|contains
argument_list|(
name|mutedPatchSet
argument_list|)
condition|)
block|{
comment|// convert mute label to reviewed label
return|return
name|StarredChangesUtil
operator|.
name|REVIEWED_LABEL
operator|+
literal|"/"
operator|+
name|mutedPatchSet
return|;
block|}
comment|// else patch set is muted but has either reviewed or unreviewed label
comment|// -> just drop the mute label
return|return
literal|null
return|;
block|}
return|return
name|l
return|;
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|StarredChangesUtil
operator|.
name|writeLabels
argument_list|(
name|git
argument_list|,
name|newLabels
argument_list|)
decl_stmt|;
name|bru
operator|.
name|addCommand
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|ref
operator|.
name|getTarget
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|id
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bru
operator|.
name|execute
argument_list|(
name|rw
argument_list|,
operator|new
name|TextProgressMonitor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|IllegalLabelException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

