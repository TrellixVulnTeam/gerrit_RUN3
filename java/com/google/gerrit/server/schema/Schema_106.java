begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LocalDiskRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_class
DECL|class|Schema_106
specifier|public
class|class
name|Schema_106
extends|extends
name|SchemaVersion
block|{
comment|// we can use multiple threads per CPU as we can expect that threads will be
comment|// waiting for IO
DECL|field|THREADS_PER_CPU
specifier|private
specifier|static
specifier|final
name|int
name|THREADS_PER_CPU
init|=
literal|4
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
annotation|@
name|Inject
DECL|method|Schema_106 ( Provider<Schema_105> prior, GitRepositoryManager repoManager, @GerritPersonIdent PersonIdent serverUser)
name|Schema_106
parameter_list|(
name|Provider
argument_list|<
name|Schema_105
argument_list|>
name|prior
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverUser
parameter_list|)
block|{
name|super
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|serverUser
operator|=
name|serverUser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|migrateData (ReviewDb db, UpdateUI ui)
specifier|protected
name|void
name|migrateData
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|UpdateUI
name|ui
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
operator|(
name|repoManager
operator|instanceof
name|LocalDiskRepositoryManager
operator|)
condition|)
block|{
return|return;
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"listing all repositories ..."
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|repoList
init|=
name|repoManager
operator|.
name|list
argument_list|()
decl_stmt|;
name|ui
operator|.
name|message
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
name|ui
operator|.
name|message
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"creating reflog files for %s branches ..."
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorPool
init|=
name|createExecutor
argument_list|(
name|ui
argument_list|,
name|repoList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|repoList
control|)
block|{
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|ReflogCreator
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|executorPool
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executorPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ui
operator|.
name|message
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ui
operator|.
name|message
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Migration step 106 was interrupted. "
operator|+
literal|"Reflog created in %d of %d repositories only."
argument_list|,
name|countDone
argument_list|(
name|futures
argument_list|)
argument_list|,
name|repoList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ui
operator|.
name|message
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countDone (List<Future<Void>> futures)
specifier|private
specifier|static
name|int
name|countDone
parameter_list|(
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
if|if
condition|(
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|createExecutor (UpdateUI ui, int repoCount)
specifier|private
name|ExecutorService
name|createExecutor
parameter_list|(
name|UpdateUI
name|ui
parameter_list|,
name|int
name|repoCount
parameter_list|)
block|{
name|int
name|procs
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
decl_stmt|;
name|int
name|threads
init|=
name|Math
operator|.
name|min
argument_list|(
name|procs
operator|*
name|THREADS_PER_CPU
argument_list|,
name|repoCount
argument_list|)
decl_stmt|;
name|ui
operator|.
name|message
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"... using %d threads ..."
argument_list|,
name|threads
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threads
argument_list|)
return|;
block|}
DECL|class|ReflogCreator
specifier|private
class|class
name|ReflogCreator
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|project
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|method|ReflogCreator (Project.NameKey project)
name|ReflogCreator
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|File
name|metaConfigLog
init|=
operator|new
name|File
argument_list|(
name|repo
operator|.
name|getDirectory
argument_list|()
argument_list|,
literal|"logs/"
operator|+
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaConfigLog
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|metaConfigLog
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
operator|||
operator|!
name|metaConfigLog
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
name|ObjectId
name|metaConfigId
init|=
name|repo
operator|.
name|resolve
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaConfigId
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|metaConfigLog
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|metaConfigId
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|serverUser
operator|.
name|toExternalString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"create reflog"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ERROR: Failed to create reflog file for the %s branch in repository %s"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
name|project
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

