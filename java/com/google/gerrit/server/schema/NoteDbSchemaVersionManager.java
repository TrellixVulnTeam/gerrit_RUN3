begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_VERSION
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|IntBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
DECL|class|NoteDbSchemaVersionManager
specifier|public
class|class
name|NoteDbSchemaVersionManager
block|{
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
annotation|@
name|Inject
annotation|@
name|VisibleForTesting
DECL|method|NoteDbSchemaVersionManager ( AllProjectsName allProjectsName, GitRepositoryManager repoManager)
specifier|public
name|NoteDbSchemaVersionManager
parameter_list|(
name|AllProjectsName
name|allProjectsName
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|)
block|{
comment|// Can't inject GitReferenceUpdated here because it has dependencies that are not always
comment|// available in this injector (e.g. during init). This is ok for now since no other ref updates
comment|// during init are available to plugins, and there are not any other use cases for listening for
comment|// updates to the version ref.
name|this
operator|.
name|allProjectsName
operator|=
name|allProjectsName
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|StorageException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allProjectsName
argument_list|)
init|)
block|{
return|return
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|REFS_VERSION
argument_list|)
operator|.
name|map
argument_list|(
name|IntBlob
operator|::
name|value
argument_list|)
operator|.
name|orElse
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Failed to read "
operator|+
name|REFS_VERSION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allProjectsName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Optional
argument_list|<
name|IntBlob
argument_list|>
name|old
init|=
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|REFS_VERSION
argument_list|,
name|rw
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected no old version for %s, found %s"
argument_list|,
name|REFS_VERSION
argument_list|,
name|old
operator|.
name|get
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|IntBlob
operator|.
name|store
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|allProjectsName
argument_list|,
name|REFS_VERSION
argument_list|,
name|old
operator|.
name|map
argument_list|(
name|IntBlob
operator|::
name|id
argument_list|)
operator|.
name|orElse
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
argument_list|,
name|NoteDbSchemaVersions
operator|.
name|LATEST
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|increment (int expectedOldVersion)
specifier|public
name|void
name|increment
parameter_list|(
name|int
name|expectedOldVersion
parameter_list|)
throws|throws
name|IOException
throws|,
name|StorageException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allProjectsName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Optional
argument_list|<
name|IntBlob
argument_list|>
name|old
init|=
name|IntBlob
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|REFS_VERSION
argument_list|,
name|rw
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
operator|&&
name|old
operator|.
name|get
argument_list|()
operator|.
name|value
argument_list|()
operator|!=
name|expectedOldVersion
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected old version %d for %s, found %d"
argument_list|,
name|expectedOldVersion
argument_list|,
name|REFS_VERSION
argument_list|,
name|old
operator|.
name|get
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|IntBlob
operator|.
name|store
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|allProjectsName
argument_list|,
name|REFS_VERSION
argument_list|,
name|old
operator|.
name|map
argument_list|(
name|IntBlob
operator|::
name|id
argument_list|)
operator|.
name|orElse
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
argument_list|,
name|expectedOldVersion
operator|+
literal|1
argument_list|,
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

