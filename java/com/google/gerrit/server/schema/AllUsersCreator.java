begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|AclUtil
operator|.
name|grant
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|AllProjectsInput
operator|.
name|getDefaultCodeReviewLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|UsedAt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** Creates the {@code All-Users} repository. */
end_comment

begin_class
DECL|class|AllUsersCreator
specifier|public
class|class
name|AllUsersCreator
block|{
DECL|field|mgr
specifier|private
specifier|final
name|GitRepositoryManager
name|mgr
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|serverUser
specifier|private
specifier|final
name|PersonIdent
name|serverUser
decl_stmt|;
DECL|field|projectConfigFactory
specifier|private
specifier|final
name|ProjectConfig
operator|.
name|Factory
name|projectConfigFactory
decl_stmt|;
DECL|field|registered
specifier|private
specifier|final
name|GroupReference
name|registered
decl_stmt|;
DECL|field|admin
annotation|@
name|Nullable
specifier|private
name|GroupReference
name|admin
decl_stmt|;
DECL|field|codeReviewLabel
specifier|private
name|LabelType
name|codeReviewLabel
decl_stmt|;
annotation|@
name|Inject
DECL|method|AllUsersCreator ( GitRepositoryManager mgr, AllUsersName allUsersName, SystemGroupBackend systemGroupBackend, @GerritPersonIdent PersonIdent serverUser, Factory projectConfigFactory)
name|AllUsersCreator
parameter_list|(
name|GitRepositoryManager
name|mgr
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|SystemGroupBackend
name|systemGroupBackend
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverUser
parameter_list|,
name|Factory
name|projectConfigFactory
parameter_list|)
block|{
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|serverUser
operator|=
name|serverUser
expr_stmt|;
name|this
operator|.
name|registered
operator|=
name|systemGroupBackend
operator|.
name|getGroup
argument_list|(
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectConfigFactory
operator|=
name|projectConfigFactory
expr_stmt|;
name|this
operator|.
name|codeReviewLabel
operator|=
name|getDefaultCodeReviewLabel
argument_list|()
expr_stmt|;
block|}
comment|/**    * If setAdministrators() is called, grant the given administrator group permissions on the    * default user.    */
DECL|method|setAdministrators (GroupReference admin)
specifier|public
name|AllUsersCreator
name|setAdministrators
parameter_list|(
name|GroupReference
name|admin
parameter_list|)
block|{
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** If called, the provided "Code-Review" label will be used rather than the default. */
annotation|@
name|UsedAt
argument_list|(
name|UsedAt
operator|.
name|Project
operator|.
name|GOOGLE
argument_list|)
DECL|method|setCodeReviewLabel (LabelType labelType)
specifier|public
name|AllUsersCreator
name|setCodeReviewLabel
parameter_list|(
name|LabelType
name|labelType
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Code-Review"
argument_list|)
argument_list|,
literal|"label should have 'Code-Review' as its name"
argument_list|)
expr_stmt|;
name|this
operator|.
name|codeReviewLabel
operator|=
name|labelType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|create ()
specifier|public
name|void
name|create
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|git
init|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|initAllUsers
argument_list|(
name|git
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|notFound
parameter_list|)
block|{
try|try
init|(
name|Repository
name|git
init|=
name|mgr
operator|.
name|createRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|initAllUsers
argument_list|(
name|git
argument_list|)
expr_stmt|;
name|RefUpdate
name|u
init|=
name|git
operator|.
name|updateRef
argument_list|(
name|Constants
operator|.
name|HEAD
argument_list|)
decl_stmt|;
name|u
operator|.
name|link
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryNotFoundException
name|err
parameter_list|)
block|{
name|String
name|name
init|=
name|allUsersName
operator|.
name|get
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create repository "
operator|+
name|name
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|initAllUsers (Repository git)
specifier|private
name|void
name|initAllUsers
parameter_list|(
name|Repository
name|git
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
operator|new
name|MetaDataUpdate
argument_list|(
name|GitReferenceUpdated
operator|.
name|DISABLED
argument_list|,
name|allUsersName
argument_list|,
name|git
argument_list|)
init|)
block|{
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverUser
argument_list|)
expr_stmt|;
name|md
operator|.
name|setMessage
argument_list|(
literal|"Initialized Gerrit Code Review "
operator|+
name|Version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|Project
name|project
init|=
name|config
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setDescription
argument_list|(
literal|"Individual user settings and preferences."
argument_list|)
expr_stmt|;
name|AccessSection
name|users
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"${"
operator|+
name|RefPattern
operator|.
name|USERID_SHARDED
operator|+
literal|"}"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Initialize "Code-Review" label.
name|config
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|codeReviewLabel
operator|.
name|getName
argument_list|()
argument_list|,
name|codeReviewLabel
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|users
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|registered
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|users
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|registered
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|users
argument_list|,
name|Permission
operator|.
name|SUBMIT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|registered
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|users
argument_list|,
name|codeReviewLabel
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|registered
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|AccessSection
name|defaults
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|defaults
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|defaults
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|defaults
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|defaults
argument_list|,
name|Permission
operator|.
name|CREATE
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
comment|// Grant read permissions on the group branches to all users.
comment|// This allows group owners to see the group refs. VisibleRefFilter ensures that read
comment|// permissions for non-group-owners are ignored.
name|AccessSection
name|groups
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|grant
argument_list|(
name|config
argument_list|,
name|groups
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|registered
argument_list|)
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

