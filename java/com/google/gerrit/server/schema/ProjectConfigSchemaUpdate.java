begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.schema
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|StoredConfig
import|;
end_import

begin_class
DECL|class|ProjectConfigSchemaUpdate
specifier|public
class|class
name|ProjectConfigSchemaUpdate
extends|extends
name|VersionedMetaData
block|{
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|sitePaths
specifier|private
specifier|final
name|SitePaths
name|sitePaths
decl_stmt|;
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (SitePaths sitePaths, AllProjectsName allProjectsName)
name|Factory
parameter_list|(
name|SitePaths
name|sitePaths
parameter_list|,
name|AllProjectsName
name|allProjectsName
parameter_list|)
block|{
name|this
operator|.
name|sitePaths
operator|=
name|sitePaths
expr_stmt|;
name|this
operator|.
name|allProjectsName
operator|=
name|allProjectsName
expr_stmt|;
block|}
DECL|method|read (MetaDataUpdate update)
name|ProjectConfigSchemaUpdate
name|read
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfigSchemaUpdate
name|r
init|=
operator|new
name|ProjectConfigSchemaUpdate
argument_list|(
name|update
argument_list|,
name|ProjectConfig
operator|.
name|Factory
operator|.
name|getBaseConfig
argument_list|(
name|sitePaths
argument_list|,
name|allProjectsName
argument_list|,
name|allProjectsName
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|.
name|load
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
DECL|field|update
specifier|private
specifier|final
name|MetaDataUpdate
name|update
decl_stmt|;
DECL|field|baseConfig
annotation|@
name|Nullable
specifier|private
specifier|final
name|StoredConfig
name|baseConfig
decl_stmt|;
DECL|field|config
specifier|private
name|Config
name|config
decl_stmt|;
DECL|field|updated
specifier|private
name|boolean
name|updated
decl_stmt|;
DECL|method|ProjectConfigSchemaUpdate (MetaDataUpdate update, @Nullable StoredConfig baseConfig)
specifier|private
name|ProjectConfigSchemaUpdate
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|,
annotation|@
name|Nullable
name|StoredConfig
name|baseConfig
parameter_list|)
block|{
name|this
operator|.
name|update
operator|=
name|update
expr_stmt|;
name|this
operator|.
name|baseConfig
operator|=
name|baseConfig
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|RefNames
operator|.
name|REFS_CONFIG
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|baseConfig
operator|!=
literal|null
condition|)
block|{
name|baseConfig
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
name|config
operator|=
name|readConfig
argument_list|(
name|ProjectConfig
operator|.
name|PROJECT_CONFIG
argument_list|,
name|baseConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getConfig ()
name|Config
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|method|removeForceFromPermission (String name)
specifier|public
name|void
name|removeForceFromPermission
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|String
name|subsection
range|:
name|config
operator|.
name|getSubsections
argument_list|(
name|ACCESS
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|config
operator|.
name|getNames
argument_list|(
name|ACCESS
argument_list|,
name|subsection
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|config
operator|.
name|getStringList
argument_list|(
name|ACCESS
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|r
lambda|->
block|{
name|PermissionRule
name|rule
init|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|getForce
argument_list|()
condition|)
block|{
name|rule
operator|.
name|setForce
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|rule
operator|.
name|asString
argument_list|(
literal|false
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setStringList
argument_list|(
name|ACCESS
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|saveConfig
argument_list|(
name|ProjectConfig
operator|.
name|PROJECT_CONFIG
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|save (PersonIdent personIdent, String commitMessage)
specifier|public
name|void
name|save
parameter_list|(
name|PersonIdent
name|personIdent
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
operator|!
name|updated
condition|)
block|{
return|return;
block|}
name|update
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|personIdent
argument_list|)
expr_stmt|;
name|update
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|personIdent
argument_list|)
expr_stmt|;
name|update
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
try|try
block|{
name|commit
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|isUpdated ()
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
return|return
name|updated
return|;
block|}
block|}
end_class

end_unit

