begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|account
operator|.
name|InternalAccountQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_comment
comment|/** Class to access accounts by email. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|Emails
specifier|public
class|class
name|Emails
block|{
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
annotation|@
name|Inject
DECL|method|Emails ( ExternalIds externalIds, Provider<InternalAccountQuery> queryProvider, RetryHelper retryHelper)
specifier|public
name|Emails
parameter_list|(
name|ExternalIds
name|externalIds
parameter_list|,
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|queryProvider
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|)
block|{
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
block|}
comment|/**    * Returns the accounts with the given email.    *    *<p>Each email should belong to a single account only. This means if more than one account is    * returned there is an inconsistency in the external IDs.    *    *<p>The accounts are retrieved via the external ID cache. Each access to the external ID cache    * requires reading the SHA1 of the refs/meta/external-ids branch. If accounts for multiple emails    * are needed it is more efficient to use {@link #getAccountsFor(String...)} as this method reads    * the SHA1 of the refs/meta/external-ids branch only once (and not once per email).    *    *<p>In addition accounts are included that have the given email as preferred email even if they    * have no external ID for the preferred email. Having accounts with a preferred email that does    * not exist as external ID is an inconsistency, but existing functionality relies on still    * getting those accounts, which is why they are included. Accounts by preferred email are fetched    * from the account index as a fallback for email addresses that could not be resolved using    * {@link ExternalIds}.    *    * @see #getAccountsFor(String...)    */
DECL|method|getAccountFor (String email)
specifier|public
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getAccountFor
parameter_list|(
name|String
name|email
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accounts
init|=
name|externalIds
operator|.
name|byEmail
argument_list|(
name|email
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accounts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|accounts
return|;
block|}
return|return
name|executeIndexQuery
argument_list|(
parameter_list|()
lambda|->
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byPreferredEmail
argument_list|(
name|email
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|account
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the accounts for the given emails.    *    * @see #getAccountFor(String)    */
DECL|method|getAccountsFor (String... emails)
specifier|public
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|getAccountsFor
parameter_list|(
name|String
modifier|...
name|emails
parameter_list|)
throws|throws
name|IOException
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|result
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|emails
operator|.
name|length
argument_list|)
operator|.
name|hashSetValues
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|externalIds
operator|.
name|byEmails
argument_list|(
name|emails
argument_list|)
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|accountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|emailsToBackfill
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|emails
argument_list|)
operator|.
name|filter
argument_list|(
name|e
lambda|->
operator|!
name|result
operator|.
name|containsKey
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|emailsToBackfill
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|executeIndexQuery
argument_list|(
parameter_list|()
lambda|->
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byPreferredEmail
argument_list|(
name|emailsToBackfill
argument_list|)
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|account
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableSetMultimap
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**    * Returns the accounts with the given email.    *    *<p>This method behaves just like {@link #getAccountFor(String)}, except that accounts are not    * looked up by their preferred email. Thus, this method does not rely on the accounts index.    */
DECL|method|getAccountForExternal (String email)
specifier|public
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getAccountForExternal
parameter_list|(
name|String
name|email
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|externalIds
operator|.
name|byEmail
argument_list|(
name|email
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toUserIdentity (PersonIdent who)
specifier|public
name|UserIdentity
name|toUserIdentity
parameter_list|(
name|PersonIdent
name|who
parameter_list|)
throws|throws
name|IOException
block|{
name|UserIdentity
name|u
init|=
operator|new
name|UserIdentity
argument_list|()
decl_stmt|;
name|u
operator|.
name|setName
argument_list|(
name|who
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setEmail
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setDate
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|who
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|.
name|setTimeZone
argument_list|(
name|who
operator|.
name|getTimeZoneOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// If only one account has access to this email address, select it
comment|// as the identity of the user.
comment|//
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|a
init|=
name|getAccountFor
argument_list|(
name|u
operator|.
name|getEmail
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|u
operator|.
name|setAccount
argument_list|(
name|a
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|u
return|;
block|}
DECL|method|executeIndexQuery (Action<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|executeIndexQuery
parameter_list|(
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
try|try
block|{
return|return
name|retryHelper
operator|.
name|execute
argument_list|(
name|ActionType
operator|.
name|INDEX_QUERY
argument_list|,
name|action
argument_list|,
name|StorageException
operator|.
name|class
operator|::
name|isInstance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

