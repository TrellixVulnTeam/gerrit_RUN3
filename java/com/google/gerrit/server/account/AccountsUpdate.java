begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Runnables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdNotes
operator|.
name|ExternalIdNotesLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ReindexAfterRefUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RefUpdateUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Creates and updates accounts.  *  *<p>This class should be used for all account updates. It supports updating account properties,  * external IDs, preferences (general, diff and edit preferences) and project watches.  *  *<p>Updates to one account are always atomic. Batch updating several accounts within one  * transaction is not supported.  *  *<p>For any account update the caller must provide a commit message, the account ID and an {@link  * AccountUpdater}. The account updater allows to read the current {@link AccountState} and to  * prepare updates to the account by calling setters on the provided {@link  * InternalAccountUpdate.Builder}. If the current account state is of no interest the caller may  * also provide a {@link Consumer} for {@link InternalAccountUpdate.Builder} instead of the account  * updater.  *  *<p>The provided commit message is used for the update of the user branch. Using a precise and  * unique commit message allows to identify the code from which an update was made when looking at a  * commit in the user branch, and thus help debugging.  *  *<p>For creating a new account a new account ID can be retrieved from {@link  * com.google.gerrit.server.Sequences#nextAccountId()}.  *  *<p>The account updates are written to NoteDb. In NoteDb accounts are represented as user branches  * in the {@code All-Users} repository. Optionally a user branch can contain a 'account.config' file  * that stores account properties, such as full name, preferred email, status and the active flag.  * The timestamp of the first commit on a user branch denotes the registration date. The initial  * commit on the user branch may be empty (since having an 'account.config' is optional). See {@link  * AccountConfig} for details of the 'account.config' file format. In addition the user branch can  * contain a 'preferences.config' config file to store preferences (see {@link Preferences}) and a  * 'watch.config' config file to store project watches (see {@link ProjectWatches}). External IDs  * are stored separately in the {@code refs/meta/external-ids} notes branch (see {@link  * ExternalIdNotes}).  *  *<p>On updating an account the account is evicted from the account cache and thus reindexed. The  * eviction from the account cache is done by the {@link ReindexAfterRefUpdate} class which receives  * the event about updating the user branch that is triggered by this class. By using the {@link  * ServerNoReindex} factory reindexing and flushing the account from the account cache can be  * disabled. If external IDs are updated the ExternalIdCache is automatically updated.  *  *<p>If there are concurrent account updates updating the user branch in NoteDb may fail with  * {@link LockFailureException}. In this case the account update is automatically retried and the  * account updater is invoked once more with the updated account state. This means the whole  * read-modify-write sequence is atomic. Retrying is limited by a timeout. If the timeout is  * exceeded the account update can still fail with {@link LockFailureException}.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountsUpdate
specifier|public
class|class
name|AccountsUpdate
block|{
comment|/**    * Updater for an account.    *    *<p>Allows to read the current state of an account and to prepare updates to it.    */
annotation|@
name|FunctionalInterface
DECL|interface|AccountUpdater
specifier|public
interface|interface
name|AccountUpdater
block|{
comment|/**      * Prepare updates to an account.      *      *<p>Use the provided account only to read the current state of the account. Don't do updates      * to the account. For updates use the provided account update builder.      *      * @param accountState the account that is being updated      * @param update account update builder      */
DECL|method|update (AccountState accountState, InternalAccountUpdate.Builder update)
name|void
name|update
parameter_list|(
name|AccountState
name|accountState
parameter_list|,
name|InternalAccountUpdate
operator|.
name|Builder
name|update
parameter_list|)
function_decl|;
DECL|method|join (List<AccountUpdater> updaters)
specifier|static
name|AccountUpdater
name|join
parameter_list|(
name|List
argument_list|<
name|AccountUpdater
argument_list|>
name|updaters
parameter_list|)
block|{
return|return
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
name|updaters
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|updater
lambda|->
name|updater
operator|.
name|update
argument_list|(
name|a
argument_list|,
name|u
argument_list|)
argument_list|)
return|;
block|}
DECL|method|joinConsumers (List<Consumer<InternalAccountUpdate.Builder>> consumers)
specifier|static
name|AccountUpdater
name|joinConsumers
parameter_list|(
name|List
argument_list|<
name|Consumer
argument_list|<
name|InternalAccountUpdate
operator|.
name|Builder
argument_list|>
argument_list|>
name|consumers
parameter_list|)
block|{
return|return
name|join
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|consumers
argument_list|,
name|AccountUpdater
operator|::
name|fromConsumer
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fromConsumer (Consumer<InternalAccountUpdate.Builder> consumer)
specifier|static
name|AccountUpdater
name|fromConsumer
parameter_list|(
name|Consumer
argument_list|<
name|InternalAccountUpdate
operator|.
name|Builder
argument_list|>
name|consumer
parameter_list|)
block|{
return|return
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
name|consumer
operator|.
name|accept
argument_list|(
name|u
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an AccountsUpdate instance for updating accounts by the Gerrit server.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the accounts.    */
annotation|@
name|Singleton
DECL|class|Server
specifier|public
specifier|static
class|class
name|Server
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|serverIdentProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdentProvider
decl_stmt|;
DECL|field|metaDataUpdateInternalFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|extIdNotesFactory
specifier|private
specifier|final
name|ExternalIdNotes
operator|.
name|Factory
name|extIdNotesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Server ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, AllUsersName allUsersName, ExternalIds externalIds, @GerritPersonIdent Provider<PersonIdent> serverIdentProvider, Provider<MetaDataUpdate.InternalFactory> metaDataUpdateInternalFactory, RetryHelper retryHelper, ExternalIdNotes.Factory extIdNotesFactory)
specifier|public
name|Server
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdentProvider
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|ExternalIdNotes
operator|.
name|Factory
name|extIdNotesFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|serverIdentProvider
operator|=
name|serverIdentProvider
expr_stmt|;
name|this
operator|.
name|metaDataUpdateInternalFactory
operator|=
name|metaDataUpdateInternalFactory
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|extIdNotesFactory
operator|=
name|extIdNotesFactory
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|AccountsUpdate
name|create
parameter_list|()
block|{
name|PersonIdent
name|serverIdent
init|=
name|serverIdentProvider
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
literal|null
argument_list|,
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
name|retryHelper
argument_list|,
name|extIdNotesFactory
argument_list|,
name|serverIdent
argument_list|,
name|serverIdent
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an AccountsUpdate instance for updating accounts by the Gerrit server.    *    *<p>Using this class no reindex will be performed for the affected accounts and they will also    * not be evicted from the account cache.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the accounts.    */
annotation|@
name|Singleton
DECL|class|ServerNoReindex
specifier|public
specifier|static
class|class
name|ServerNoReindex
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|serverIdentProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdentProvider
decl_stmt|;
DECL|field|metaDataUpdateInternalFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|extIdNotesFactory
specifier|private
specifier|final
name|ExternalIdNotes
operator|.
name|FactoryNoReindex
name|extIdNotesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|ServerNoReindex ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, AllUsersName allUsersName, ExternalIds externalIds, @GerritPersonIdent Provider<PersonIdent> serverIdentProvider, Provider<MetaDataUpdate.InternalFactory> metaDataUpdateInternalFactory, RetryHelper retryHelper, ExternalIdNotes.FactoryNoReindex extIdNotesFactory)
specifier|public
name|ServerNoReindex
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdentProvider
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|ExternalIdNotes
operator|.
name|FactoryNoReindex
name|extIdNotesFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|serverIdentProvider
operator|=
name|serverIdentProvider
expr_stmt|;
name|this
operator|.
name|metaDataUpdateInternalFactory
operator|=
name|metaDataUpdateInternalFactory
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|extIdNotesFactory
operator|=
name|extIdNotesFactory
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|AccountsUpdate
name|create
parameter_list|()
block|{
name|PersonIdent
name|serverIdent
init|=
name|serverIdentProvider
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
literal|null
argument_list|,
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
name|retryHelper
argument_list|,
name|extIdNotesFactory
argument_list|,
name|serverIdent
argument_list|,
name|serverIdent
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an AccountsUpdate instance for updating accounts by the current user.    *    *<p>The identity of the current user will be used as author for all commits that update the    * accounts. The Gerrit server identity will be used as committer.    */
annotation|@
name|Singleton
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|serverIdentProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdentProvider
decl_stmt|;
DECL|field|identifiedUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|identifiedUser
decl_stmt|;
DECL|field|metaDataUpdateInternalFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|extIdNotesFactory
specifier|private
specifier|final
name|ExternalIdNotes
operator|.
name|Factory
name|extIdNotesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|User ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, AllUsersName allUsersName, ExternalIds externalIds, @GerritPersonIdent Provider<PersonIdent> serverIdentProvider, Provider<IdentifiedUser> identifiedUser, Provider<MetaDataUpdate.InternalFactory> metaDataUpdateInternalFactory, RetryHelper retryHelper, ExternalIdNotes.Factory extIdNotesFactory)
specifier|public
name|User
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdentProvider
parameter_list|,
name|Provider
argument_list|<
name|IdentifiedUser
argument_list|>
name|identifiedUser
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|ExternalIdNotes
operator|.
name|Factory
name|extIdNotesFactory
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|serverIdentProvider
operator|=
name|serverIdentProvider
expr_stmt|;
name|this
operator|.
name|identifiedUser
operator|=
name|identifiedUser
expr_stmt|;
name|this
operator|.
name|metaDataUpdateInternalFactory
operator|=
name|metaDataUpdateInternalFactory
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|extIdNotesFactory
operator|=
name|extIdNotesFactory
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|AccountsUpdate
name|create
parameter_list|()
block|{
name|IdentifiedUser
name|user
init|=
name|identifiedUser
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|serverIdent
init|=
name|serverIdentProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|userIdent
init|=
name|createPersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
operator|new
name|AccountsUpdate
argument_list|(
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
name|user
argument_list|,
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
name|retryHelper
argument_list|,
name|extIdNotesFactory
argument_list|,
name|serverIdent
argument_list|,
name|userIdent
argument_list|)
return|;
block|}
DECL|method|createPersonIdent (PersonIdent ident, IdentifiedUser user)
specifier|private
name|PersonIdent
name|createPersonIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|ident
operator|.
name|getWhen
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|currentUser
annotation|@
name|Nullable
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|metaDataUpdateInternalFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|extIdNotesLoader
specifier|private
specifier|final
name|ExternalIdNotesLoader
name|extIdNotesLoader
decl_stmt|;
DECL|field|committerIdent
specifier|private
specifier|final
name|PersonIdent
name|committerIdent
decl_stmt|;
DECL|field|authorIdent
specifier|private
specifier|final
name|PersonIdent
name|authorIdent
decl_stmt|;
comment|// Invoked after reading the account config.
DECL|field|afterReadRevision
specifier|private
specifier|final
name|Runnable
name|afterReadRevision
decl_stmt|;
comment|// Invoked after updating the account but before committing the changes.
DECL|field|beforeCommit
specifier|private
specifier|final
name|Runnable
name|beforeCommit
decl_stmt|;
DECL|method|AccountsUpdate ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, @Nullable IdentifiedUser currentUser, AllUsersName allUsersName, ExternalIds externalIds, Provider<MetaDataUpdate.InternalFactory> metaDataUpdateInternalFactory, RetryHelper retryHelper, ExternalIdNotesLoader extIdNotesLoader, PersonIdent committerIdent, PersonIdent authorIdent)
specifier|private
name|AccountsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|ExternalIdNotesLoader
name|extIdNotesLoader
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|,
name|PersonIdent
name|authorIdent
parameter_list|)
block|{
name|this
argument_list|(
name|repoManager
argument_list|,
name|gitRefUpdated
argument_list|,
name|currentUser
argument_list|,
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|metaDataUpdateInternalFactory
argument_list|,
name|retryHelper
argument_list|,
name|extIdNotesLoader
argument_list|,
name|committerIdent
argument_list|,
name|authorIdent
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|AccountsUpdate ( GitRepositoryManager repoManager, GitReferenceUpdated gitRefUpdated, @Nullable IdentifiedUser currentUser, AllUsersName allUsersName, ExternalIds externalIds, Provider<MetaDataUpdate.InternalFactory> metaDataUpdateInternalFactory, RetryHelper retryHelper, ExternalIdNotesLoader extIdNotesLoader, PersonIdent committerIdent, PersonIdent authorIdent, Runnable afterReadRevision, Runnable beforeCommit)
specifier|public
name|AccountsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|InternalFactory
argument_list|>
name|metaDataUpdateInternalFactory
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|ExternalIdNotesLoader
name|extIdNotesLoader
parameter_list|,
name|PersonIdent
name|committerIdent
parameter_list|,
name|PersonIdent
name|authorIdent
parameter_list|,
name|Runnable
name|afterReadRevision
parameter_list|,
name|Runnable
name|beforeCommit
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|checkNotNull
argument_list|(
name|repoManager
argument_list|,
literal|"repoManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|checkNotNull
argument_list|(
name|gitRefUpdated
argument_list|,
literal|"gitRefUpdated"
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|checkNotNull
argument_list|(
name|allUsersName
argument_list|,
literal|"allUsersName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|checkNotNull
argument_list|(
name|externalIds
argument_list|,
literal|"externalIds"
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaDataUpdateInternalFactory
operator|=
name|checkNotNull
argument_list|(
name|metaDataUpdateInternalFactory
argument_list|,
literal|"metaDataUpdateInternalFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|checkNotNull
argument_list|(
name|retryHelper
argument_list|,
literal|"retryHelper"
argument_list|)
expr_stmt|;
name|this
operator|.
name|extIdNotesLoader
operator|=
name|checkNotNull
argument_list|(
name|extIdNotesLoader
argument_list|,
literal|"extIdNotesLoader"
argument_list|)
expr_stmt|;
name|this
operator|.
name|committerIdent
operator|=
name|checkNotNull
argument_list|(
name|committerIdent
argument_list|,
literal|"committerIdent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|authorIdent
operator|=
name|checkNotNull
argument_list|(
name|authorIdent
argument_list|,
literal|"authorIdent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|afterReadRevision
operator|=
name|checkNotNull
argument_list|(
name|afterReadRevision
argument_list|,
literal|"afterReadRevision"
argument_list|)
expr_stmt|;
name|this
operator|.
name|beforeCommit
operator|=
name|checkNotNull
argument_list|(
name|beforeCommit
argument_list|,
literal|"beforeCommit"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts a new account.    *    * @param message commit message for the account creation, must not be {@code null or empty}    * @param accountId ID of the new account    * @param init consumer to populate the new account    * @return the newly created account    * @throws OrmDuplicateKeyException if the account already exists    * @throws IOException if creating the user branch fails due to an IO error    * @throws OrmException if creating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|insert ( String message, Account.Id accountId, Consumer<InternalAccountUpdate.Builder> init)
specifier|public
name|AccountState
name|insert
parameter_list|(
name|String
name|message
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Consumer
argument_list|<
name|InternalAccountUpdate
operator|.
name|Builder
argument_list|>
name|init
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|insert
argument_list|(
name|message
argument_list|,
name|accountId
argument_list|,
name|AccountUpdater
operator|.
name|fromConsumer
argument_list|(
name|init
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Inserts a new account.    *    * @param message commit message for the account creation, must not be {@code null or empty}    * @param accountId ID of the new account    * @param updater updater to populate the new account    * @return the newly created account    * @throws OrmDuplicateKeyException if the account already exists    * @throws IOException if creating the user branch fails due to an IO error    * @throws OrmException if creating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|insert (String message, Account.Id accountId, AccountUpdater updater)
specifier|public
name|AccountState
name|insert
parameter_list|(
name|String
name|message
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|AccountUpdater
name|updater
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|updateAccount
argument_list|(
name|r
lambda|->
block|{
name|AccountConfig
name|accountConfig
init|=
name|read
argument_list|(
name|r
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|Account
name|account
init|=
name|accountConfig
operator|.
name|getNewAccount
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|committerIdent
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|AccountState
name|accountState
init|=
name|AccountState
operator|.
name|forAccount
argument_list|(
name|allUsersName
argument_list|,
name|account
argument_list|)
decl_stmt|;
name|InternalAccountUpdate
operator|.
name|Builder
name|updateBuilder
init|=
name|InternalAccountUpdate
operator|.
name|builder
argument_list|()
decl_stmt|;
name|updater
operator|.
name|update
argument_list|(
name|accountState
argument_list|,
name|updateBuilder
argument_list|)
expr_stmt|;
name|InternalAccountUpdate
name|update
init|=
name|updateBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|accountConfig
operator|.
name|setAccountUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|ExternalIdNotes
name|extIdNotes
init|=
name|createExternalIdNotes
argument_list|(
name|r
argument_list|,
name|accountConfig
operator|.
name|getExternalIdsRev
argument_list|()
argument_list|,
name|accountId
argument_list|,
name|update
argument_list|)
decl_stmt|;
name|UpdatedAccount
name|updatedAccounts
init|=
operator|new
name|UpdatedAccount
argument_list|(
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|message
argument_list|,
name|accountConfig
argument_list|,
name|extIdNotes
argument_list|)
decl_stmt|;
name|updatedAccounts
operator|.
name|setCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|updatedAccounts
return|;
block|}
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Gets the account and updates it atomically.    *    *<p>Changing the registration date of an account is not supported.    *    * @param message commit message for the account update, must not be {@code null or empty}    * @param accountId ID of the account    * @param update consumer to update the account, only invoked if the account exists    * @return the updated account, {@link Optional#empty()} if the account doesn't exist    * @throws IOException if updating the user branch fails due to an IO error    * @throws LockFailureException if updating the user branch still fails due to concurrent updates    *     after the retry timeout exceeded    * @throws OrmException if updating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|update ( String message, Account.Id accountId, Consumer<InternalAccountUpdate.Builder> update)
specifier|public
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|update
parameter_list|(
name|String
name|message
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Consumer
argument_list|<
name|InternalAccountUpdate
operator|.
name|Builder
argument_list|>
name|update
parameter_list|)
throws|throws
name|OrmException
throws|,
name|LockFailureException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|update
argument_list|(
name|message
argument_list|,
name|accountId
argument_list|,
name|AccountUpdater
operator|.
name|fromConsumer
argument_list|(
name|update
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the account and updates it atomically.    *    *<p>Changing the registration date of an account is not supported.    *    * @param message commit message for the account update, must not be {@code null or empty}    * @param accountId ID of the account    * @param updater updater to update the account, only invoked if the account exists    * @return the updated account, {@link Optional#empty} if the account doesn't exist    * @throws IOException if updating the user branch fails due to an IO error    * @throws LockFailureException if updating the user branch still fails due to concurrent updates    *     after the retry timeout exceeded    * @throws OrmException if updating the user branch fails    * @throws ConfigInvalidException if any of the account fields has an invalid value    */
DECL|method|update (String message, Account.Id accountId, AccountUpdater updater)
specifier|public
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|update
parameter_list|(
name|String
name|message
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|AccountUpdater
name|updater
parameter_list|)
throws|throws
name|OrmException
throws|,
name|LockFailureException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|updateAccount
argument_list|(
name|r
lambda|->
block|{
name|AccountConfig
name|accountConfig
init|=
name|read
argument_list|(
name|r
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|account
init|=
name|AccountState
operator|.
name|fromAccountConfig
argument_list|(
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|accountConfig
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|account
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InternalAccountUpdate
operator|.
name|Builder
name|updateBuilder
init|=
name|InternalAccountUpdate
operator|.
name|builder
argument_list|()
decl_stmt|;
name|updater
operator|.
name|update
argument_list|(
name|account
operator|.
name|get
argument_list|()
argument_list|,
name|updateBuilder
argument_list|)
expr_stmt|;
name|InternalAccountUpdate
name|update
init|=
name|updateBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|accountConfig
operator|.
name|setAccountUpdate
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|ExternalIdNotes
name|extIdNotes
init|=
name|createExternalIdNotes
argument_list|(
name|r
argument_list|,
name|accountConfig
operator|.
name|getExternalIdsRev
argument_list|()
argument_list|,
name|accountId
argument_list|,
name|update
argument_list|)
decl_stmt|;
name|UpdatedAccount
name|updatedAccounts
init|=
operator|new
name|UpdatedAccount
argument_list|(
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|message
argument_list|,
name|accountConfig
argument_list|,
name|extIdNotes
argument_list|)
decl_stmt|;
return|return
name|updatedAccounts
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|read (Repository allUsersRepo, Account.Id accountId)
specifier|private
name|AccountConfig
name|read
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|AccountConfig
name|accountConfig
init|=
operator|new
name|AccountConfig
argument_list|(
name|accountId
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|load
argument_list|()
decl_stmt|;
name|afterReadRevision
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|accountConfig
return|;
block|}
DECL|method|updateAccount (AccountUpdate accountUpdate)
specifier|private
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|updateAccount
parameter_list|(
name|AccountUpdate
name|accountUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
return|return
name|retryHelper
operator|.
name|execute
argument_list|(
name|ActionType
operator|.
name|ACCOUNT_UPDATE
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|UpdatedAccount
name|updatedAccount
init|=
name|accountUpdate
operator|.
name|update
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedAccount
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|commit
argument_list|(
name|allUsersRepo
argument_list|,
name|updatedAccount
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|updatedAccount
operator|.
name|getAccount
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|createExternalIdNotes ( Repository allUsersRepo, Optional<ObjectId> rev, Account.Id accountId, InternalAccountUpdate update)
specifier|private
name|ExternalIdNotes
name|createExternalIdNotes
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|rev
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|InternalAccountUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
block|{
name|ExternalIdNotes
operator|.
name|checkSameAccount
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|update
operator|.
name|getCreatedExternalIds
argument_list|()
argument_list|,
name|update
operator|.
name|getUpdatedExternalIds
argument_list|()
argument_list|,
name|update
operator|.
name|getDeletedExternalIds
argument_list|()
argument_list|)
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
name|ExternalIdNotes
name|extIdNotes
init|=
name|extIdNotesLoader
operator|.
name|load
argument_list|(
name|allUsersRepo
argument_list|,
name|rev
operator|.
name|orElse
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|extIdNotes
operator|.
name|replace
argument_list|(
name|update
operator|.
name|getDeletedExternalIds
argument_list|()
argument_list|,
name|update
operator|.
name|getCreatedExternalIds
argument_list|()
argument_list|)
expr_stmt|;
name|extIdNotes
operator|.
name|upsert
argument_list|(
name|update
operator|.
name|getUpdatedExternalIds
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|extIdNotes
return|;
block|}
DECL|method|commit (Repository allUsersRepo, UpdatedAccount updatedAccount)
specifier|private
name|void
name|commit
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|UpdatedAccount
name|updatedAccount
parameter_list|)
throws|throws
name|IOException
block|{
name|beforeCommit
operator|.
name|run
argument_list|()
expr_stmt|;
name|BatchRefUpdate
name|batchRefUpdate
init|=
name|allUsersRepo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|updatedAccount
operator|.
name|isCreated
argument_list|()
condition|)
block|{
name|commitNewAccountConfig
argument_list|(
name|updatedAccount
operator|.
name|getMessage
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|,
name|updatedAccount
operator|.
name|getAccountConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitAccountConfig
argument_list|(
name|updatedAccount
operator|.
name|getMessage
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|,
name|updatedAccount
operator|.
name|getAccountConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitExternalIdUpdates
argument_list|(
name|updatedAccount
operator|.
name|getMessage
argument_list|()
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|,
name|updatedAccount
operator|.
name|getExternalIdNotes
argument_list|()
argument_list|)
expr_stmt|;
name|RefUpdateUtil
operator|.
name|executeChecked
argument_list|(
name|batchRefUpdate
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
name|updatedAccount
operator|.
name|getExternalIdNotes
argument_list|()
operator|.
name|updateCaches
argument_list|()
expr_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|allUsersName
argument_list|,
name|batchRefUpdate
argument_list|,
name|currentUser
operator|!=
literal|null
condition|?
name|currentUser
operator|.
name|state
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|commitNewAccountConfig ( String message, Repository allUsersRepo, BatchRefUpdate batchRefUpdate, AccountConfig accountConfig)
specifier|private
name|void
name|commitNewAccountConfig
parameter_list|(
name|String
name|message
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|,
name|AccountConfig
name|accountConfig
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When creating a new account we must allow empty commits so that the user branch gets created
comment|// with an empty commit when no account properties are set and hence no 'account.config' file
comment|// will be created.
name|commitAccountConfig
argument_list|(
name|message
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|,
name|accountConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|commitAccountConfig ( String message, Repository allUsersRepo, BatchRefUpdate batchRefUpdate, AccountConfig accountConfig)
specifier|private
name|void
name|commitAccountConfig
parameter_list|(
name|String
name|message
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|,
name|AccountConfig
name|accountConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|commitAccountConfig
argument_list|(
name|message
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|,
name|accountConfig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|commitAccountConfig ( String message, Repository allUsersRepo, BatchRefUpdate batchRefUpdate, AccountConfig accountConfig, boolean allowEmptyCommit)
specifier|private
name|void
name|commitAccountConfig
parameter_list|(
name|String
name|message
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|,
name|AccountConfig
name|accountConfig
parameter_list|,
name|boolean
name|allowEmptyCommit
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|createMetaDataUpdate
argument_list|(
name|message
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
init|)
block|{
name|md
operator|.
name|setAllowEmpty
argument_list|(
name|allowEmptyCommit
argument_list|)
expr_stmt|;
name|accountConfig
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|commitExternalIdUpdates ( String message, Repository allUsersRepo, BatchRefUpdate batchRefUpdate, ExternalIdNotes extIdNotes)
specifier|private
name|void
name|commitExternalIdUpdates
parameter_list|(
name|String
name|message
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|,
name|ExternalIdNotes
name|extIdNotes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|createMetaDataUpdate
argument_list|(
name|message
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
init|)
block|{
name|extIdNotes
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createMetaDataUpdate ( String message, Repository allUsersRepo, BatchRefUpdate batchRefUpdate)
specifier|private
name|MetaDataUpdate
name|createMetaDataUpdate
parameter_list|(
name|String
name|message
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|)
block|{
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateInternalFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|message
operator|=
name|message
operator|+
literal|"\n"
expr_stmt|;
block|}
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|committerIdent
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
return|return
name|metaDataUpdate
return|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|AccountUpdate
specifier|private
specifier|static
interface|interface
name|AccountUpdate
block|{
DECL|method|update (Repository allUsersRepo)
name|UpdatedAccount
name|update
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
function_decl|;
block|}
DECL|class|UpdatedAccount
specifier|private
specifier|static
class|class
name|UpdatedAccount
block|{
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|accountConfig
specifier|private
specifier|final
name|AccountConfig
name|accountConfig
decl_stmt|;
DECL|field|extIdNotes
specifier|private
specifier|final
name|ExternalIdNotes
name|extIdNotes
decl_stmt|;
DECL|field|created
specifier|private
name|boolean
name|created
decl_stmt|;
DECL|method|UpdatedAccount ( AllUsersName allUsersName, ExternalIds externalIds, String message, AccountConfig accountConfig, ExternalIdNotes extIdNotes)
specifier|private
name|UpdatedAccount
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|String
name|message
parameter_list|,
name|AccountConfig
name|accountConfig
parameter_list|,
name|ExternalIdNotes
name|extIdNotes
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|message
argument_list|)
argument_list|,
literal|"message for account update must be set"
argument_list|)
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|checkNotNull
argument_list|(
name|allUsersName
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|checkNotNull
argument_list|(
name|externalIds
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|checkNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountConfig
operator|=
name|checkNotNull
argument_list|(
name|accountConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|extIdNotes
operator|=
name|checkNotNull
argument_list|(
name|extIdNotes
argument_list|)
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
DECL|method|getAccountConfig ()
specifier|public
name|AccountConfig
name|getAccountConfig
parameter_list|()
block|{
return|return
name|accountConfig
return|;
block|}
DECL|method|getAccount ()
specifier|public
name|AccountState
name|getAccount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|AccountState
operator|.
name|fromAccountConfig
argument_list|(
name|allUsersName
argument_list|,
name|externalIds
argument_list|,
name|accountConfig
argument_list|,
name|extIdNotes
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getExternalIdNotes ()
specifier|public
name|ExternalIdNotes
name|getExternalIdNotes
parameter_list|()
block|{
return|return
name|extIdNotes
return|;
block|}
DECL|method|setCreated (boolean created)
specifier|public
name|void
name|setCreated
parameter_list|(
name|boolean
name|created
parameter_list|)
block|{
name|this
operator|.
name|created
operator|=
name|created
expr_stmt|;
block|}
DECL|method|isCreated ()
specifier|public
name|boolean
name|isCreated
parameter_list|()
block|{
return|return
name|created
return|;
block|}
block|}
block|}
end_class

end_unit

