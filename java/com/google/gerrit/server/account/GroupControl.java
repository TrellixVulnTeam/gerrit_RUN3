begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|GlobalPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_comment
comment|/** Access control management for a group of accounts managed in Gerrit. */
end_comment

begin_class
DECL|class|GroupControl
specifier|public
class|class
name|GroupControl
block|{
annotation|@
name|Singleton
DECL|class|GenericFactory
specifier|public
specifier|static
class|class
name|GenericFactory
block|{
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|groupBackend
specifier|private
specifier|final
name|GroupBackend
name|groupBackend
decl_stmt|;
annotation|@
name|Inject
DECL|method|GenericFactory (PermissionBackend permissionBackend, GroupBackend gb)
name|GenericFactory
parameter_list|(
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|GroupBackend
name|gb
parameter_list|)
block|{
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|groupBackend
operator|=
name|gb
expr_stmt|;
block|}
DECL|method|controlFor (CurrentUser who, AccountGroup.UUID groupId)
specifier|public
name|GroupControl
name|controlFor
parameter_list|(
name|CurrentUser
name|who
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupId
parameter_list|)
throws|throws
name|NoSuchGroupException
block|{
name|GroupDescription
operator|.
name|Basic
name|group
init|=
name|groupBackend
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchGroupException
argument_list|(
name|groupId
argument_list|)
throw|;
block|}
return|return
operator|new
name|GroupControl
argument_list|(
name|who
argument_list|,
name|group
argument_list|,
name|permissionBackend
argument_list|,
name|groupBackend
argument_list|)
return|;
block|}
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|user
decl_stmt|;
DECL|field|groupBackend
specifier|private
specifier|final
name|GroupBackend
name|groupBackend
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (PermissionBackend permissionBackend, Provider<CurrentUser> cu, GroupBackend gb)
name|Factory
parameter_list|(
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|cu
parameter_list|,
name|GroupBackend
name|gb
parameter_list|)
block|{
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|user
operator|=
name|cu
expr_stmt|;
name|groupBackend
operator|=
name|gb
expr_stmt|;
block|}
DECL|method|controlFor (AccountGroup.UUID groupId)
specifier|public
name|GroupControl
name|controlFor
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupId
parameter_list|)
throws|throws
name|NoSuchGroupException
block|{
specifier|final
name|GroupDescription
operator|.
name|Basic
name|group
init|=
name|groupBackend
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchGroupException
argument_list|(
name|groupId
argument_list|)
throw|;
block|}
return|return
name|controlFor
argument_list|(
name|group
argument_list|)
return|;
block|}
DECL|method|controlFor (GroupDescription.Basic group)
specifier|public
name|GroupControl
name|controlFor
parameter_list|(
name|GroupDescription
operator|.
name|Basic
name|group
parameter_list|)
block|{
return|return
operator|new
name|GroupControl
argument_list|(
name|user
operator|.
name|get
argument_list|()
argument_list|,
name|group
argument_list|,
name|permissionBackend
argument_list|,
name|groupBackend
argument_list|)
return|;
block|}
DECL|method|validateFor (AccountGroup.UUID groupUUID)
specifier|public
name|GroupControl
name|validateFor
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUUID
parameter_list|)
throws|throws
name|NoSuchGroupException
block|{
specifier|final
name|GroupControl
name|c
init|=
name|controlFor
argument_list|(
name|groupUUID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isVisible
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchGroupException
argument_list|(
name|groupUUID
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
block|}
DECL|field|user
specifier|private
specifier|final
name|CurrentUser
name|user
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|GroupDescription
operator|.
name|Basic
name|group
decl_stmt|;
DECL|field|isOwner
specifier|private
name|Boolean
name|isOwner
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|WithUser
name|perm
decl_stmt|;
DECL|field|groupBackend
specifier|private
specifier|final
name|GroupBackend
name|groupBackend
decl_stmt|;
DECL|method|GroupControl ( CurrentUser who, GroupDescription.Basic gd, PermissionBackend permissionBackend, GroupBackend gb)
name|GroupControl
parameter_list|(
name|CurrentUser
name|who
parameter_list|,
name|GroupDescription
operator|.
name|Basic
name|gd
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|GroupBackend
name|gb
parameter_list|)
block|{
name|user
operator|=
name|who
expr_stmt|;
name|group
operator|=
name|gd
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|groupBackend
operator|=
name|gb
expr_stmt|;
block|}
DECL|method|getGroup ()
specifier|public
name|GroupDescription
operator|.
name|Basic
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
DECL|method|getUser ()
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/** Can this user see this group exists? */
DECL|method|isVisible ()
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
comment|/* Check for canAdministrateServer may seem redundant, but allows      * for visibility of all groups that are not an internal group to      * server administrators.      */
return|return
name|user
operator|.
name|isInternalUser
argument_list|()
operator|||
name|groupBackend
operator|.
name|isVisibleToAll
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|||
name|user
operator|.
name|getEffectiveGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|||
name|isOwner
argument_list|()
operator|||
name|canAdministrateServer
argument_list|()
return|;
block|}
DECL|method|isOwner ()
specifier|public
name|boolean
name|isOwner
parameter_list|()
block|{
if|if
condition|(
name|isOwner
operator|!=
literal|null
condition|)
block|{
return|return
name|isOwner
return|;
block|}
comment|// Keep this logic in sync with VisibleRefFilter#isOwner(...).
if|if
condition|(
name|group
operator|instanceof
name|GroupDescription
operator|.
name|Internal
condition|)
block|{
name|AccountGroup
operator|.
name|UUID
name|ownerUUID
init|=
operator|(
operator|(
name|GroupDescription
operator|.
name|Internal
operator|)
name|group
operator|)
operator|.
name|getOwnerGroupUUID
argument_list|()
decl_stmt|;
name|isOwner
operator|=
name|getUser
argument_list|()
operator|.
name|getEffectiveGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|ownerUUID
argument_list|)
operator|||
name|canAdministrateServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isOwner
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isOwner
return|;
block|}
DECL|method|canAdministrateServer ()
specifier|private
name|boolean
name|canAdministrateServer
parameter_list|()
block|{
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
name|GlobalPermission
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
decl||
name|PermissionBackendException
name|denied
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|canAddMember ()
specifier|public
name|boolean
name|canAddMember
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
return|;
block|}
DECL|method|canRemoveMember ()
specifier|public
name|boolean
name|canRemoveMember
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
return|;
block|}
DECL|method|canSeeMember (Account.Id id)
specifier|public
name|boolean
name|canSeeMember
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
operator|&&
name|user
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|canSeeMembers
argument_list|()
return|;
block|}
DECL|method|canAddGroup ()
specifier|public
name|boolean
name|canAddGroup
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
return|;
block|}
DECL|method|canRemoveGroup ()
specifier|public
name|boolean
name|canRemoveGroup
parameter_list|()
block|{
return|return
name|isOwner
argument_list|()
return|;
block|}
DECL|method|canSeeGroup ()
specifier|public
name|boolean
name|canSeeGroup
parameter_list|()
block|{
return|return
name|canSeeMembers
argument_list|()
return|;
block|}
DECL|method|canSeeMembers ()
specifier|private
name|boolean
name|canSeeMembers
parameter_list|()
block|{
if|if
condition|(
name|group
operator|instanceof
name|GroupDescription
operator|.
name|Internal
condition|)
block|{
return|return
operator|(
operator|(
name|GroupDescription
operator|.
name|Internal
operator|)
name|group
operator|)
operator|.
name|isVisibleToAll
argument_list|()
operator|||
name|isOwner
argument_list|()
return|;
block|}
return|return
name|canAdministrateServer
argument_list|()
return|;
block|}
block|}
end_class

end_unit

