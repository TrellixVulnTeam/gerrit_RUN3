begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|account
operator|.
name|InternalAccountQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_comment
comment|/**  * Helper for resolving accounts given arbitrary user-provided input.  *  *<p>The {@code resolve*} methods each define a list of accepted formats for account resolution.  * The algorithm for resolving accounts from a list of formats is as follows:  *  *<ol>  *<li>For each recognized format in the order listed in the method Javadoc, check whether the  *       input matches that format.  *<li>If so, resolve accounts according to that format.  *<li>Filter out invisible and inactive accounts.  *<li>If the result list is non-empty, return.  *<li>If the format is listed above as being short-circuiting, return.  *<li>Otherwise, return to step 1 with the next format.  *</ol>  *  *<p>The result never includes accounts that are not visible to the calling user. It also never  * includes inactive accounts, with one specific exception noted in method Javadoc.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountResolver2
specifier|public
class|class
name|AccountResolver2
block|{
DECL|class|UnresolvableAccountException
specifier|public
specifier|static
class|class
name|UnresolvableAccountException
extends|extends
name|UnprocessableEntityException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|result
specifier|private
specifier|final
name|Result
name|result
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|UnresolvableAccountException (Result result)
name|UnresolvableAccountException
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|super
argument_list|(
name|exceptionMessage
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
DECL|method|isSelf ()
specifier|public
name|boolean
name|isSelf
parameter_list|()
block|{
return|return
name|result
operator|.
name|isSelf
argument_list|()
return|;
block|}
block|}
DECL|method|exceptionMessage (Result result)
specifier|public
specifier|static
name|String
name|exceptionMessage
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|result
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|isSelf
argument_list|()
condition|)
block|{
return|return
literal|"Resolving account '"
operator|+
name|result
operator|.
name|input
argument_list|()
operator|+
literal|"' requires login"
return|;
block|}
if|if
condition|(
name|result
operator|.
name|filteredInactive
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"Account '"
operator|+
name|result
operator|.
name|input
argument_list|()
operator|+
literal|"' not found"
return|;
block|}
return|return
name|result
operator|.
name|filteredInactive
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|formatForException
argument_list|(
name|result
argument_list|,
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|,
literal|"Account '"
operator|+
name|result
operator|.
name|input
argument_list|()
operator|+
literal|"' only matches inactive accounts. To use an inactive account, retry with"
operator|+
literal|" one of the following exact account IDs:\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
return|return
name|result
operator|.
name|asList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|formatForException
argument_list|(
name|result
argument_list|,
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|,
literal|"Account '"
operator|+
name|result
operator|.
name|input
argument_list|()
operator|+
literal|"' is ambiguous:\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
DECL|method|formatForException (Result result, AccountState state)
specifier|private
specifier|static
name|String
name|formatForException
parameter_list|(
name|Result
name|result
parameter_list|,
name|AccountState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|state
operator|.
name|getAccount
argument_list|()
operator|.
name|getNameEmail
argument_list|(
name|result
operator|.
name|accountResolver
argument_list|()
operator|.
name|anonymousCowardName
argument_list|)
return|;
block|}
DECL|method|isSelf (String input)
specifier|private
specifier|static
name|boolean
name|isSelf
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
literal|"self"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"me"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
return|;
block|}
DECL|class|Result
specifier|public
class|class
name|Result
block|{
DECL|field|input
specifier|private
specifier|final
name|String
name|input
decl_stmt|;
DECL|field|list
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|list
decl_stmt|;
DECL|field|filteredInactive
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|filteredInactive
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|Result (String input, List<AccountState> list, List<AccountState> filteredInactive)
name|Result
parameter_list|(
name|String
name|input
parameter_list|,
name|List
argument_list|<
name|AccountState
argument_list|>
name|list
parameter_list|,
name|List
argument_list|<
name|AccountState
argument_list|>
name|filteredInactive
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|requireNonNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|canonicalize
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|this
operator|.
name|filteredInactive
operator|=
name|canonicalize
argument_list|(
name|filteredInactive
argument_list|)
expr_stmt|;
block|}
DECL|method|canonicalize (List<AccountState> list)
specifier|private
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|canonicalize
parameter_list|(
name|List
argument_list|<
name|AccountState
argument_list|>
name|list
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|AccountState
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|comparing
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|requireNonNull
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|set
argument_list|)
return|;
block|}
DECL|method|input ()
specifier|public
name|String
name|input
parameter_list|()
block|{
return|return
name|input
return|;
block|}
DECL|method|isSelf ()
specifier|public
name|boolean
name|isSelf
parameter_list|()
block|{
return|return
name|AccountResolver2
operator|.
name|isSelf
argument_list|(
name|input
argument_list|)
return|;
block|}
DECL|method|asList ()
specifier|public
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
DECL|method|asNonEmptyIdSet ()
specifier|public
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|asNonEmptyIdSet
parameter_list|()
throws|throws
name|UnresolvableAccountException
block|{
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnresolvableAccountException
argument_list|(
name|this
argument_list|)
throw|;
block|}
return|return
name|asIdSet
argument_list|()
return|;
block|}
DECL|method|asIdSet ()
specifier|public
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|asIdSet
parameter_list|()
block|{
return|return
name|list
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|asUnique ()
specifier|public
name|AccountState
name|asUnique
parameter_list|()
throws|throws
name|UnresolvableAccountException
block|{
name|ensureUnique
argument_list|()
expr_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|ensureUnique ()
specifier|private
name|void
name|ensureUnique
parameter_list|()
throws|throws
name|UnresolvableAccountException
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UnresolvableAccountException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
DECL|method|asUniqueUser ()
specifier|public
name|IdentifiedUser
name|asUniqueUser
parameter_list|()
throws|throws
name|UnresolvableAccountException
block|{
name|ensureUnique
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSelf
argument_list|()
condition|)
block|{
comment|// In the special case of "self", use the exact IdentifiedUser from the request context, to
comment|// preserve the peer address and any other per-request state.
return|return
name|self
operator|.
name|get
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
return|;
block|}
return|return
name|userFactory
operator|.
name|create
argument_list|(
name|asUnique
argument_list|()
argument_list|)
return|;
block|}
DECL|method|asUniqueUserOnBehalfOf (CurrentUser caller)
specifier|public
name|IdentifiedUser
name|asUniqueUserOnBehalfOf
parameter_list|(
name|CurrentUser
name|caller
parameter_list|)
throws|throws
name|UnresolvableAccountException
block|{
name|ensureUnique
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSelf
argument_list|()
condition|)
block|{
comment|// TODO(dborowitz): This preserves old behavior, but it seems wrong to discard the caller.
return|return
name|self
operator|.
name|get
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
return|;
block|}
return|return
name|userFactory
operator|.
name|runAs
argument_list|(
literal|null
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|requireNonNull
argument_list|(
name|caller
argument_list|)
operator|.
name|getRealUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|filteredInactive ()
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|filteredInactive
parameter_list|()
block|{
return|return
name|filteredInactive
return|;
block|}
DECL|method|accountResolver ()
specifier|private
name|AccountResolver2
name|accountResolver
parameter_list|()
block|{
return|return
name|AccountResolver2
operator|.
name|this
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|interface|Searcher
interface|interface
name|Searcher
parameter_list|<
name|I
parameter_list|>
block|{
DECL|method|callerShouldFilterOutInactiveCandidates ()
specifier|default
name|boolean
name|callerShouldFilterOutInactiveCandidates
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|callerMayAssumeCandidatesAreVisible ()
specifier|default
name|boolean
name|callerMayAssumeCandidatesAreVisible
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|tryParse (String input)
name|Optional
argument_list|<
name|I
argument_list|>
name|tryParse
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
function_decl|;
DECL|method|search (I input)
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|I
name|input
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
function_decl|;
DECL|method|shortCircuitIfNoResults ()
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
function_decl|;
DECL|method|trySearch (String input)
specifier|default
name|Optional
argument_list|<
name|Stream
argument_list|<
name|AccountState
argument_list|>
argument_list|>
name|trySearch
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Optional
argument_list|<
name|I
argument_list|>
name|parsed
init|=
name|tryParse
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|parsed
operator|.
name|isPresent
argument_list|()
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|search
argument_list|(
name|parsed
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|StringSearcher
specifier|abstract
specifier|static
class|class
name|StringSearcher
implements|implements
name|Searcher
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
DECL|method|tryParse (String input)
specifier|public
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|tryParse
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|matches
argument_list|(
name|input
argument_list|)
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|input
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|matches (String input)
specifier|protected
specifier|abstract
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
function_decl|;
block|}
DECL|class|AccountIdSearcher
specifier|private
specifier|abstract
class|class
name|AccountIdSearcher
implements|implements
name|Searcher
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
block|{
annotation|@
name|Override
DECL|method|search (Account.Id input)
specifier|public
specifier|final
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|Account
operator|.
name|Id
name|input
parameter_list|)
block|{
return|return
name|Streams
operator|.
name|stream
argument_list|(
name|byId
operator|.
name|get
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|BySelf
specifier|private
class|class
name|BySelf
extends|extends
name|StringSearcher
block|{
annotation|@
name|Override
DECL|method|callerMayAssumeCandidatesAreVisible ()
specifier|public
name|boolean
name|callerMayAssumeCandidatesAreVisible
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|matches (String input)
specifier|protected
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
literal|"self"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
operator|||
literal|"me"
operator|.
name|equals
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|search (String input)
specifier|public
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|CurrentUser
name|user
init|=
name|self
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
return|return
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Stream
operator|.
name|of
argument_list|(
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|state
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ByExactAccountId
specifier|private
class|class
name|ByExactAccountId
extends|extends
name|AccountIdSearcher
block|{
annotation|@
name|Override
DECL|method|callerShouldFilterOutInactiveCandidates ()
specifier|public
name|boolean
name|callerShouldFilterOutInactiveCandidates
parameter_list|()
block|{
comment|// The only case where we *don't* enforce that the account is active is when passing an exact
comment|// numeric account ID.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|tryParse (String input)
specifier|public
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|tryParse
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|Account
operator|.
name|Id
operator|.
name|tryParse
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ByParenthesizedAccountId
specifier|private
class|class
name|ByParenthesizedAccountId
extends|extends
name|AccountIdSearcher
block|{
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.* \\(([1-9][0-9]*)\\)$"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|tryParse (String input)
specifier|public
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|tryParse
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|matches
argument_list|()
condition|?
name|Account
operator|.
name|Id
operator|.
name|tryParse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ByUsername
specifier|private
class|class
name|ByUsername
extends|extends
name|StringSearcher
block|{
annotation|@
name|Override
DECL|method|matches (String input)
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|ExternalId
operator|.
name|isValidUsername
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|search (String input)
specifier|public
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|Streams
operator|.
name|stream
argument_list|(
name|byId
operator|.
name|getByUsername
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ByNameAndEmail
specifier|private
class|class
name|ByNameAndEmail
extends|extends
name|StringSearcher
block|{
annotation|@
name|Override
DECL|method|matches (String input)
specifier|protected
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|int
name|lt
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
decl_stmt|;
name|int
name|gt
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|)
decl_stmt|;
return|return
name|lt
operator|>=
literal|0
operator|&&
name|gt
operator|>
name|lt
operator|&&
name|input
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|search (String nameOrEmail)
specifier|public
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|String
name|nameOrEmail
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
comment|// TODO(dborowitz): This would probably work as a Searcher<Address>
name|int
name|lt
init|=
name|nameOrEmail
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|)
decl_stmt|;
name|int
name|gt
init|=
name|nameOrEmail
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ids
init|=
name|emails
operator|.
name|getAccountFor
argument_list|(
name|nameOrEmail
operator|.
name|substring
argument_list|(
name|lt
operator|+
literal|1
argument_list|,
name|gt
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|allMatches
init|=
name|toAccountStates
argument_list|(
name|ids
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allMatches
operator|.
name|isEmpty
argument_list|()
operator|||
name|allMatches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|allMatches
operator|.
name|stream
argument_list|()
return|;
block|}
comment|// More than one match. If there are any that match the full name as well, return only that
comment|// subset. Otherwise, all are equally non-matching, so return the full set.
name|String
name|name
init|=
name|nameOrEmail
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lt
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|AccountState
argument_list|>
name|nameMatches
init|=
name|allMatches
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|name
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|!
name|nameMatches
operator|.
name|isEmpty
argument_list|()
condition|?
name|nameMatches
operator|.
name|stream
argument_list|()
else|:
name|allMatches
operator|.
name|stream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ByEmail
specifier|private
class|class
name|ByEmail
extends|extends
name|StringSearcher
block|{
annotation|@
name|Override
DECL|method|matches (String input)
specifier|protected
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|search (String input)
specifier|public
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
return|return
name|toAccountStates
argument_list|(
name|emails
operator|.
name|getAccountFor
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|FromRealm
specifier|private
class|class
name|FromRealm
extends|extends
name|AccountIdSearcher
block|{
annotation|@
name|Override
DECL|method|tryParse (String input)
specifier|public
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|tryParse
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|realm
operator|.
name|lookup
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ByFullName
specifier|private
class|class
name|ByFullName
implements|implements
name|Searcher
argument_list|<
name|AccountState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|callerMayAssumeCandidatesAreVisible ()
specifier|public
name|boolean
name|callerMayAssumeCandidatesAreVisible
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// Rely on enforceVisibility from the index.
block|}
annotation|@
name|Override
DECL|method|tryParse (String input)
specifier|public
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|tryParse
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|AccountState
argument_list|>
name|results
init|=
name|accountQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|enforceVisibility
argument_list|(
literal|true
argument_list|)
operator|.
name|byFullName
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|search (AccountState input)
specifier|public
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|AccountState
name|input
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ByDefaultSearch
specifier|private
class|class
name|ByDefaultSearch
extends|extends
name|StringSearcher
block|{
annotation|@
name|Override
DECL|method|callerMayAssumeCandidatesAreVisible ()
specifier|public
name|boolean
name|callerMayAssumeCandidatesAreVisible
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// Rely on enforceVisibility from the index.
block|}
annotation|@
name|Override
DECL|method|matches (String input)
specifier|protected
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|search (String input)
specifier|public
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|search
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// At this point we have no clue. Just perform a whole bunch of suggestions and pray we come
comment|// up with a reasonable result list.
comment|// TODO(dborowitz): This doesn't match the documentation; consider whether it's possible to be
comment|// more strict here.
return|return
name|accountQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|enforceVisibility
argument_list|(
literal|true
argument_list|)
operator|.
name|byDefault
argument_list|(
name|input
argument_list|)
operator|.
name|stream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shortCircuitIfNoResults ()
specifier|public
name|boolean
name|shortCircuitIfNoResults
parameter_list|()
block|{
comment|// In practice this doesn't matter since this is the last searcher in the list, but considered
comment|// on its own, it doesn't necessarily need to be terminal.
return|return
literal|false
return|;
block|}
block|}
DECL|field|nameOrEmailSearchers
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Searcher
argument_list|<
name|?
argument_list|>
argument_list|>
name|nameOrEmailSearchers
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ByNameAndEmail
argument_list|()
argument_list|,
operator|new
name|ByEmail
argument_list|()
argument_list|,
operator|new
name|FromRealm
argument_list|()
argument_list|,
operator|new
name|ByFullName
argument_list|()
argument_list|,
operator|new
name|ByDefaultSearch
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|searchers
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Searcher
argument_list|<
name|?
argument_list|>
argument_list|>
name|searchers
init|=
name|ImmutableList
operator|.
expr|<
name|Searcher
argument_list|<
name|?
argument_list|>
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BySelf
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ByExactAccountId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ByParenthesizedAccountId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ByUsername
argument_list|()
argument_list|)
operator|.
name|addAll
argument_list|(
name|nameOrEmailSearchers
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|byId
specifier|private
specifier|final
name|AccountCache
name|byId
decl_stmt|;
DECL|field|accountControlFactory
specifier|private
specifier|final
name|AccountControl
operator|.
name|Factory
name|accountControlFactory
decl_stmt|;
DECL|field|emails
specifier|private
specifier|final
name|Emails
name|emails
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
decl_stmt|;
DECL|field|accountQueryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|accountQueryProvider
decl_stmt|;
DECL|field|realm
specifier|private
specifier|final
name|Realm
name|realm
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
annotation|@
name|Inject
DECL|method|AccountResolver2 ( AccountCache byId, Emails emails, AccountControl.Factory accountControlFactory, IdentifiedUser.GenericFactory userFactory, Provider<CurrentUser> self, Provider<InternalAccountQuery> accountQueryProvider, Realm realm, @AnonymousCowardName String anonymousCowardName)
name|AccountResolver2
parameter_list|(
name|AccountCache
name|byId
parameter_list|,
name|Emails
name|emails
parameter_list|,
name|AccountControl
operator|.
name|Factory
name|accountControlFactory
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|self
parameter_list|,
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|accountQueryProvider
parameter_list|,
name|Realm
name|realm
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|)
block|{
name|this
operator|.
name|realm
operator|=
name|realm
expr_stmt|;
name|this
operator|.
name|byId
operator|=
name|byId
expr_stmt|;
name|this
operator|.
name|accountControlFactory
operator|=
name|accountControlFactory
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|self
operator|=
name|self
expr_stmt|;
name|this
operator|.
name|accountQueryProvider
operator|=
name|accountQueryProvider
expr_stmt|;
name|this
operator|.
name|emails
operator|=
name|emails
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
block|}
comment|/**    * Resolves all accounts matching the input string.    *    *<p>The following input formats are recognized:    *    *<ul>    *<li>The strings {@code "self"} and {@code "me"}, if the current user is an {@link    *       IdentifiedUser}.    *<li>A bare account ID ({@code "18419"}). In this case, and<strong>only</strong> this case,    *       may return exactly one inactive account. This case short-circuits if the input matches.    *<li>An account ID in parentheses following a full name ({@code "Full Name (18419)"}). This    *       case short-circuits if the input matches.    *<li>A username ({@code "username"}).    *<li>A full name and email address ({@code "Full Name<email@example>"}). This case    *       short-circuits if the input matches.    *<li>An email address ({@code "email@example"}. This case short-circuits if the input matches.    *<li>An account name recognized by the configured {@link Realm#lookup(String)} Realm}.    *<li>A full name ({@code "Full Name"}).    *<li>As a fallback, a {@link    *       com.google.gerrit.server.query.account.AccountPredicates#defaultPredicate(Schema,    *       boolean, String) default search} against the account index.    *</ul>    *    * @param input input string.    * @return a result describing matching accounts. Never null even if the result set is empty.    * @throws OrmException if an error occurs.    * @throws ConfigInvalidException if an error occurs.    * @throws IOException if an error occurs.    */
DECL|method|resolve (String input)
specifier|public
name|Result
name|resolve
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|OrmException
throws|,
name|ConfigInvalidException
throws|,
name|IOException
block|{
return|return
name|searchImpl
argument_list|(
name|input
argument_list|,
name|searchers
argument_list|,
name|visibilitySupplier
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Resolves all accounts matching the input string by name or email.    *    *<p>The following input formats are recognized:    *    *<ul>    *<li>A full name and email address ({@code "Full Name<email@example>"}). This case    *       short-circuits if the input matches.    *<li>An email address ({@code "email@example"}. This case short-circuits if the input matches.    *<li>An account name recognized by the configured {@link Realm#lookup(String)} Realm}.    *<li>A full name ({@code "Full Name"}).    *<li>As a fallback, a {@link    *       com.google.gerrit.server.query.account.AccountPredicates#defaultPredicate(Schema,    *       boolean, String) default search} against the account index.    *</ul>    *    * @param input input string.    * @return a result describing matching accounts. Never null even if the result set is empty.    * @throws OrmException if an error occurs.    * @throws ConfigInvalidException if an error occurs.    * @throws IOException if an error occurs.    * @deprecated for use only by MailUtil for parsing commit footers; that class needs to be    *     reevaluated.    */
annotation|@
name|Deprecated
DECL|method|resolveByNameOrEmail (String input)
specifier|public
name|Result
name|resolveByNameOrEmail
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|OrmException
throws|,
name|ConfigInvalidException
throws|,
name|IOException
block|{
return|return
name|searchImpl
argument_list|(
name|input
argument_list|,
name|nameOrEmailSearchers
argument_list|,
name|visibilitySupplier
argument_list|()
argument_list|)
return|;
block|}
DECL|method|visibilitySupplier ()
specifier|private
name|Supplier
argument_list|<
name|Predicate
argument_list|<
name|AccountState
argument_list|>
argument_list|>
name|visibilitySupplier
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
name|accountControlFactory
operator|.
name|get
argument_list|()
operator|::
name|canSee
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|searchImpl ( String input, ImmutableList<Searcher<?>> searchers, Supplier<Predicate<AccountState>> visibilitySupplier)
name|Result
name|searchImpl
parameter_list|(
name|String
name|input
parameter_list|,
name|ImmutableList
argument_list|<
name|Searcher
argument_list|<
name|?
argument_list|>
argument_list|>
name|searchers
parameter_list|,
name|Supplier
argument_list|<
name|Predicate
argument_list|<
name|AccountState
argument_list|>
argument_list|>
name|visibilitySupplier
parameter_list|)
throws|throws
name|OrmException
throws|,
name|ConfigInvalidException
throws|,
name|IOException
block|{
name|visibilitySupplier
operator|=
name|Suppliers
operator|.
name|memoize
argument_list|(
name|visibilitySupplier
operator|::
name|get
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccountState
argument_list|>
name|inactive
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Searcher
argument_list|<
name|?
argument_list|>
name|searcher
range|:
name|searchers
control|)
block|{
name|Optional
argument_list|<
name|Stream
argument_list|<
name|AccountState
argument_list|>
argument_list|>
name|maybeResults
init|=
name|searcher
operator|.
name|trySearch
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|maybeResults
operator|.
name|isPresent
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|results
init|=
name|maybeResults
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|searcher
operator|.
name|callerMayAssumeCandidatesAreVisible
argument_list|()
condition|)
block|{
name|results
operator|=
name|results
operator|.
name|filter
argument_list|(
name|visibilitySupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AccountState
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|searcher
operator|.
name|callerShouldFilterOutInactiveCandidates
argument_list|()
condition|)
block|{
comment|// Keep track of all inactive candidates discovered by any searchers. If we end up short-
comment|// circuiting, the inactive list will be discarded.
name|List
argument_list|<
name|AccountState
argument_list|>
name|active
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|results
operator|.
name|forEach
argument_list|(
name|a
lambda|->
operator|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|isActive
argument_list|()
condition|?
name|active
else|:
name|inactive
operator|)
operator|.
name|add
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|active
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
name|results
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|createResult
argument_list|(
name|input
argument_list|,
name|list
argument_list|)
return|;
block|}
if|if
condition|(
name|searcher
operator|.
name|shortCircuitIfNoResults
argument_list|()
condition|)
block|{
comment|// For a short-circuiting searcher, return results even if empty.
return|return
operator|!
name|inactive
operator|.
name|isEmpty
argument_list|()
condition|?
name|emptyResult
argument_list|(
name|input
argument_list|,
name|inactive
argument_list|)
else|:
name|createResult
argument_list|(
name|input
argument_list|,
name|list
argument_list|)
return|;
block|}
block|}
return|return
name|emptyResult
argument_list|(
name|input
argument_list|,
name|inactive
argument_list|)
return|;
block|}
DECL|method|createResult (String input, List<AccountState> list)
specifier|private
name|Result
name|createResult
parameter_list|(
name|String
name|input
parameter_list|,
name|List
argument_list|<
name|AccountState
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|Result
argument_list|(
name|input
argument_list|,
name|list
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|emptyResult (String input, List<AccountState> inactive)
specifier|private
name|Result
name|emptyResult
parameter_list|(
name|String
name|input
parameter_list|,
name|List
argument_list|<
name|AccountState
argument_list|>
name|inactive
parameter_list|)
block|{
return|return
operator|new
name|Result
argument_list|(
name|input
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|inactive
argument_list|)
return|;
block|}
DECL|method|toAccountStates (Set<Account.Id> ids)
specifier|private
name|Stream
argument_list|<
name|AccountState
argument_list|>
name|toAccountStates
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ids
parameter_list|)
block|{
return|return
name|byId
operator|.
name|get
argument_list|(
name|ids
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
return|;
block|}
block|}
end_class

end_unit

