begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
operator|.
name|loadSection
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
operator|.
name|skipField
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
operator|.
name|storeSection
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|CHANGE_TABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|CHANGE_TABLE_COLUMN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|KEY_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|KEY_MATCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|KEY_TARGET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|KEY_TOKEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|KEY_URL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
operator|.
name|URL_ALIAS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|DiffPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|EditPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|UserConfigSections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Parses/writes preferences from/to a {@link Config} file.  *  *<p>This is a low-level API. Read/write of preferences in a user branch should be done through  * {@link AccountsUpdate} or {@link AccountConfig}.  *  *<p>The config file has separate sections for general, diff and edit preferences:  *  *<pre>  *   [general]  *     showSiteHeader = false  *   [diff]  *     hideTopMenu = true  *   [edit]  *     lineLength = 80  *</pre>  *  *<p>The parameter names match the names that are used in the preferences REST API.  *  *<p>If the preference is omitted in the config file, then the default value for the preference is  * used.  *  *<p>Defaults for preferences that apply for all accounts can be configured in the {@code  * refs/users/default} branch in the {@code All-Users} repository. The config for the default  * preferences must be provided to this class so that it can read default values from it.  *  *<p>The preferences are lazily parsed.  */
end_comment

begin_class
DECL|class|Preferences
specifier|public
class|class
name|Preferences
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|PREFERENCES_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|PREFERENCES_CONFIG
init|=
literal|"preferences.config"
decl_stmt|;
DECL|field|accountId
specifier|private
specifier|final
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|defaultCfg
specifier|private
specifier|final
name|Config
name|defaultCfg
decl_stmt|;
DECL|field|validationErrorSink
specifier|private
specifier|final
name|ValidationError
operator|.
name|Sink
name|validationErrorSink
decl_stmt|;
DECL|field|generalPreferences
specifier|private
name|GeneralPreferencesInfo
name|generalPreferences
decl_stmt|;
DECL|field|diffPreferences
specifier|private
name|DiffPreferencesInfo
name|diffPreferences
decl_stmt|;
DECL|field|editPreferences
specifier|private
name|EditPreferencesInfo
name|editPreferences
decl_stmt|;
DECL|method|Preferences ( Account.Id accountId, Config cfg, Config defaultCfg, ValidationError.Sink validationErrorSink)
name|Preferences
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Config
name|cfg
parameter_list|,
name|Config
name|defaultCfg
parameter_list|,
name|ValidationError
operator|.
name|Sink
name|validationErrorSink
parameter_list|)
block|{
name|this
operator|.
name|accountId
operator|=
name|requireNonNull
argument_list|(
name|accountId
argument_list|,
literal|"accountId"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|requireNonNull
argument_list|(
name|cfg
argument_list|,
literal|"cfg"
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultCfg
operator|=
name|requireNonNull
argument_list|(
name|defaultCfg
argument_list|,
literal|"defaultCfg"
argument_list|)
expr_stmt|;
name|this
operator|.
name|validationErrorSink
operator|=
name|requireNonNull
argument_list|(
name|validationErrorSink
argument_list|,
literal|"validationErrorSink"
argument_list|)
expr_stmt|;
block|}
DECL|method|getGeneralPreferences ()
specifier|public
name|GeneralPreferencesInfo
name|getGeneralPreferences
parameter_list|()
block|{
if|if
condition|(
name|generalPreferences
operator|==
literal|null
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
return|return
name|generalPreferences
return|;
block|}
DECL|method|getDiffPreferences ()
specifier|public
name|DiffPreferencesInfo
name|getDiffPreferences
parameter_list|()
block|{
if|if
condition|(
name|diffPreferences
operator|==
literal|null
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
return|return
name|diffPreferences
return|;
block|}
DECL|method|getEditPreferences ()
specifier|public
name|EditPreferencesInfo
name|getEditPreferences
parameter_list|()
block|{
if|if
condition|(
name|editPreferences
operator|==
literal|null
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
return|return
name|editPreferences
return|;
block|}
DECL|method|parse ()
specifier|public
name|void
name|parse
parameter_list|()
block|{
name|generalPreferences
operator|=
name|parseGeneralPreferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|diffPreferences
operator|=
name|parseDiffPreferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|editPreferences
operator|=
name|parseEditPreferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|saveGeneralPreferences ( Optional<GeneralPreferencesInfo> generalPreferencesInput, Optional<DiffPreferencesInfo> diffPreferencesInput, Optional<EditPreferencesInfo> editPreferencesInput)
specifier|public
name|Config
name|saveGeneralPreferences
parameter_list|(
name|Optional
argument_list|<
name|GeneralPreferencesInfo
argument_list|>
name|generalPreferencesInput
parameter_list|,
name|Optional
argument_list|<
name|DiffPreferencesInfo
argument_list|>
name|diffPreferencesInput
parameter_list|,
name|Optional
argument_list|<
name|EditPreferencesInfo
argument_list|>
name|editPreferencesInput
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|generalPreferencesInput
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|GeneralPreferencesInfo
name|mergedGeneralPreferencesInput
init|=
name|parseGeneralPreferences
argument_list|(
name|generalPreferencesInput
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|storeSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|GENERAL
argument_list|,
literal|null
argument_list|,
name|mergedGeneralPreferencesInput
argument_list|,
name|parseDefaultGeneralPreferences
argument_list|(
name|defaultCfg
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setChangeTable
argument_list|(
name|cfg
argument_list|,
name|mergedGeneralPreferencesInput
operator|.
name|changeTable
argument_list|)
expr_stmt|;
name|setMy
argument_list|(
name|cfg
argument_list|,
name|mergedGeneralPreferencesInput
operator|.
name|my
argument_list|)
expr_stmt|;
name|setUrlAliases
argument_list|(
name|cfg
argument_list|,
name|mergedGeneralPreferencesInput
operator|.
name|urlAliases
argument_list|)
expr_stmt|;
comment|// evict the cached general preferences
name|this
operator|.
name|generalPreferences
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|diffPreferencesInput
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|DiffPreferencesInfo
name|mergedDiffPreferencesInput
init|=
name|parseDiffPreferences
argument_list|(
name|diffPreferencesInput
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|storeSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|DIFF
argument_list|,
literal|null
argument_list|,
name|mergedDiffPreferencesInput
argument_list|,
name|parseDefaultDiffPreferences
argument_list|(
name|defaultCfg
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// evict the cached diff preferences
name|this
operator|.
name|diffPreferences
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|editPreferencesInput
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|EditPreferencesInfo
name|mergedEditPreferencesInput
init|=
name|parseEditPreferences
argument_list|(
name|editPreferencesInput
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|storeSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|EDIT
argument_list|,
literal|null
argument_list|,
name|mergedEditPreferencesInput
argument_list|,
name|parseDefaultEditPreferences
argument_list|(
name|defaultCfg
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// evict the cached edit preferences
name|this
operator|.
name|editPreferences
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
DECL|method|parseGeneralPreferences (@ullable GeneralPreferencesInfo input)
specifier|private
name|GeneralPreferencesInfo
name|parseGeneralPreferences
parameter_list|(
annotation|@
name|Nullable
name|GeneralPreferencesInfo
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|parseGeneralPreferences
argument_list|(
name|cfg
argument_list|,
name|defaultCfg
argument_list|,
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|validationErrorSink
operator|.
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PREFERENCES_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid general preferences for account %d: %s"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|GeneralPreferencesInfo
argument_list|()
return|;
block|}
block|}
DECL|method|parseDiffPreferences (@ullable DiffPreferencesInfo input)
specifier|private
name|DiffPreferencesInfo
name|parseDiffPreferences
parameter_list|(
annotation|@
name|Nullable
name|DiffPreferencesInfo
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|parseDiffPreferences
argument_list|(
name|cfg
argument_list|,
name|defaultCfg
argument_list|,
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|validationErrorSink
operator|.
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PREFERENCES_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid diff preferences for account %d: %s"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|DiffPreferencesInfo
argument_list|()
return|;
block|}
block|}
DECL|method|parseEditPreferences (@ullable EditPreferencesInfo input)
specifier|private
name|EditPreferencesInfo
name|parseEditPreferences
parameter_list|(
annotation|@
name|Nullable
name|EditPreferencesInfo
name|input
parameter_list|)
block|{
try|try
block|{
return|return
name|parseEditPreferences
argument_list|(
name|cfg
argument_list|,
name|defaultCfg
argument_list|,
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|validationErrorSink
operator|.
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PREFERENCES_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid edit preferences for account %d: %s"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|EditPreferencesInfo
argument_list|()
return|;
block|}
block|}
DECL|method|parseGeneralPreferences ( Config cfg, @Nullable Config defaultCfg, @Nullable GeneralPreferencesInfo input)
specifier|private
specifier|static
name|GeneralPreferencesInfo
name|parseGeneralPreferences
parameter_list|(
name|Config
name|cfg
parameter_list|,
annotation|@
name|Nullable
name|Config
name|defaultCfg
parameter_list|,
annotation|@
name|Nullable
name|GeneralPreferencesInfo
name|input
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|GeneralPreferencesInfo
name|r
init|=
name|loadSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|GENERAL
argument_list|,
literal|null
argument_list|,
operator|new
name|GeneralPreferencesInfo
argument_list|()
argument_list|,
name|defaultCfg
operator|!=
literal|null
condition|?
name|parseDefaultGeneralPreferences
argument_list|(
name|defaultCfg
argument_list|,
name|input
argument_list|)
else|:
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|,
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|changeTable
operator|=
name|input
operator|.
name|changeTable
expr_stmt|;
name|r
operator|.
name|my
operator|=
name|input
operator|.
name|my
expr_stmt|;
name|r
operator|.
name|urlAliases
operator|=
name|input
operator|.
name|urlAliases
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|changeTable
operator|=
name|parseChangeTableColumns
argument_list|(
name|cfg
argument_list|,
name|defaultCfg
argument_list|)
expr_stmt|;
name|r
operator|.
name|my
operator|=
name|parseMyMenus
argument_list|(
name|cfg
argument_list|,
name|defaultCfg
argument_list|)
expr_stmt|;
name|r
operator|.
name|urlAliases
operator|=
name|parseUrlAliases
argument_list|(
name|cfg
argument_list|,
name|defaultCfg
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|parseDiffPreferences ( Config cfg, @Nullable Config defaultCfg, @Nullable DiffPreferencesInfo input)
specifier|private
specifier|static
name|DiffPreferencesInfo
name|parseDiffPreferences
parameter_list|(
name|Config
name|cfg
parameter_list|,
annotation|@
name|Nullable
name|Config
name|defaultCfg
parameter_list|,
annotation|@
name|Nullable
name|DiffPreferencesInfo
name|input
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|loadSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|DIFF
argument_list|,
literal|null
argument_list|,
operator|new
name|DiffPreferencesInfo
argument_list|()
argument_list|,
name|defaultCfg
operator|!=
literal|null
condition|?
name|parseDefaultDiffPreferences
argument_list|(
name|defaultCfg
argument_list|,
name|input
argument_list|)
else|:
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|,
name|input
argument_list|)
return|;
block|}
DECL|method|parseEditPreferences ( Config cfg, @Nullable Config defaultCfg, @Nullable EditPreferencesInfo input)
specifier|private
specifier|static
name|EditPreferencesInfo
name|parseEditPreferences
parameter_list|(
name|Config
name|cfg
parameter_list|,
annotation|@
name|Nullable
name|Config
name|defaultCfg
parameter_list|,
annotation|@
name|Nullable
name|EditPreferencesInfo
name|input
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|loadSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|EDIT
argument_list|,
literal|null
argument_list|,
operator|new
name|EditPreferencesInfo
argument_list|()
argument_list|,
name|defaultCfg
operator|!=
literal|null
condition|?
name|parseDefaultEditPreferences
argument_list|(
name|defaultCfg
argument_list|,
name|input
argument_list|)
else|:
name|EditPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|,
name|input
argument_list|)
return|;
block|}
DECL|method|parseDefaultGeneralPreferences ( Config defaultCfg, GeneralPreferencesInfo input)
specifier|private
specifier|static
name|GeneralPreferencesInfo
name|parseDefaultGeneralPreferences
parameter_list|(
name|Config
name|defaultCfg
parameter_list|,
name|GeneralPreferencesInfo
name|input
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|GeneralPreferencesInfo
name|allUserPrefs
init|=
operator|new
name|GeneralPreferencesInfo
argument_list|()
decl_stmt|;
name|loadSection
argument_list|(
name|defaultCfg
argument_list|,
name|UserConfigSections
operator|.
name|GENERAL
argument_list|,
literal|null
argument_list|,
name|allUserPrefs
argument_list|,
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|updateGeneralPreferencesDefaults
argument_list|(
name|allUserPrefs
argument_list|)
return|;
block|}
DECL|method|parseDefaultDiffPreferences ( Config defaultCfg, DiffPreferencesInfo input)
specifier|private
specifier|static
name|DiffPreferencesInfo
name|parseDefaultDiffPreferences
parameter_list|(
name|Config
name|defaultCfg
parameter_list|,
name|DiffPreferencesInfo
name|input
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|DiffPreferencesInfo
name|allUserPrefs
init|=
operator|new
name|DiffPreferencesInfo
argument_list|()
decl_stmt|;
name|loadSection
argument_list|(
name|defaultCfg
argument_list|,
name|UserConfigSections
operator|.
name|DIFF
argument_list|,
literal|null
argument_list|,
name|allUserPrefs
argument_list|,
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|updateDiffPreferencesDefaults
argument_list|(
name|allUserPrefs
argument_list|)
return|;
block|}
DECL|method|parseDefaultEditPreferences ( Config defaultCfg, EditPreferencesInfo input)
specifier|private
specifier|static
name|EditPreferencesInfo
name|parseDefaultEditPreferences
parameter_list|(
name|Config
name|defaultCfg
parameter_list|,
name|EditPreferencesInfo
name|input
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|EditPreferencesInfo
name|allUserPrefs
init|=
operator|new
name|EditPreferencesInfo
argument_list|()
decl_stmt|;
name|loadSection
argument_list|(
name|defaultCfg
argument_list|,
name|UserConfigSections
operator|.
name|EDIT
argument_list|,
literal|null
argument_list|,
name|allUserPrefs
argument_list|,
name|EditPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|updateEditPreferencesDefaults
argument_list|(
name|allUserPrefs
argument_list|)
return|;
block|}
DECL|method|updateGeneralPreferencesDefaults ( GeneralPreferencesInfo input)
specifier|private
specifier|static
name|GeneralPreferencesInfo
name|updateGeneralPreferencesDefaults
parameter_list|(
name|GeneralPreferencesInfo
name|input
parameter_list|)
block|{
name|GeneralPreferencesInfo
name|result
init|=
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Field
name|field
range|:
name|input
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|skipField
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|newVal
init|=
name|field
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVal
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|result
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to apply default general preferences"
argument_list|)
expr_stmt|;
return|return
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|updateDiffPreferencesDefaults (DiffPreferencesInfo input)
specifier|private
specifier|static
name|DiffPreferencesInfo
name|updateDiffPreferencesDefaults
parameter_list|(
name|DiffPreferencesInfo
name|input
parameter_list|)
block|{
name|DiffPreferencesInfo
name|result
init|=
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Field
name|field
range|:
name|input
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|skipField
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|newVal
init|=
name|field
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVal
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|result
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to apply default diff preferences"
argument_list|)
expr_stmt|;
return|return
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|updateEditPreferencesDefaults (EditPreferencesInfo input)
specifier|private
specifier|static
name|EditPreferencesInfo
name|updateEditPreferencesDefaults
parameter_list|(
name|EditPreferencesInfo
name|input
parameter_list|)
block|{
name|EditPreferencesInfo
name|result
init|=
name|EditPreferencesInfo
operator|.
name|defaults
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Field
name|field
range|:
name|input
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|skipField
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|newVal
init|=
name|field
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVal
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|result
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to apply default edit preferences"
argument_list|)
expr_stmt|;
return|return
name|EditPreferencesInfo
operator|.
name|defaults
argument_list|()
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseChangeTableColumns (Config cfg, @Nullable Config defaultCfg)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseChangeTableColumns
parameter_list|(
name|Config
name|cfg
parameter_list|,
annotation|@
name|Nullable
name|Config
name|defaultCfg
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|changeTable
init|=
name|changeTable
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeTable
operator|==
literal|null
operator|&&
name|defaultCfg
operator|!=
literal|null
condition|)
block|{
name|changeTable
operator|=
name|changeTable
argument_list|(
name|defaultCfg
argument_list|)
expr_stmt|;
block|}
return|return
name|changeTable
return|;
block|}
DECL|method|parseMyMenus (Config cfg, @Nullable Config defaultCfg)
specifier|private
specifier|static
name|List
argument_list|<
name|MenuItem
argument_list|>
name|parseMyMenus
parameter_list|(
name|Config
name|cfg
parameter_list|,
annotation|@
name|Nullable
name|Config
name|defaultCfg
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|my
init|=
name|my
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|my
operator|.
name|isEmpty
argument_list|()
operator|&&
name|defaultCfg
operator|!=
literal|null
condition|)
block|{
name|my
operator|=
name|my
argument_list|(
name|defaultCfg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|my
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Changes"
argument_list|,
literal|"#/dashboard/self"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Draft Comments"
argument_list|,
literal|"#/q/has:draft"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Edits"
argument_list|,
literal|"#/q/has:edit"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Watched Changes"
argument_list|,
literal|"#/q/is:watched+is:open"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Starred Changes"
argument_list|,
literal|"#/q/is:starred"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Groups"
argument_list|,
literal|"#/groups/self"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|my
return|;
block|}
DECL|method|parseUrlAliases (Config cfg, @Nullable Config defaultCfg)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseUrlAliases
parameter_list|(
name|Config
name|cfg
parameter_list|,
annotation|@
name|Nullable
name|Config
name|defaultCfg
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlAliases
init|=
name|urlAliases
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlAliases
operator|==
literal|null
operator|&&
name|defaultCfg
operator|!=
literal|null
condition|)
block|{
name|urlAliases
operator|=
name|urlAliases
argument_list|(
name|defaultCfg
argument_list|)
expr_stmt|;
block|}
return|return
name|urlAliases
return|;
block|}
DECL|method|readDefaultGeneralPreferences ( AllUsersName allUsersName, Repository allUsersRepo)
specifier|public
specifier|static
name|GeneralPreferencesInfo
name|readDefaultGeneralPreferences
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|parseGeneralPreferences
argument_list|(
name|readDefaultConfig
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|readDefaultDiffPreferences ( AllUsersName allUsersName, Repository allUsersRepo)
specifier|public
specifier|static
name|DiffPreferencesInfo
name|readDefaultDiffPreferences
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|parseDiffPreferences
argument_list|(
name|readDefaultConfig
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|readDefaultEditPreferences ( AllUsersName allUsersName, Repository allUsersRepo)
specifier|public
specifier|static
name|EditPreferencesInfo
name|readDefaultEditPreferences
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|parseEditPreferences
argument_list|(
name|readDefaultConfig
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|readDefaultConfig (AllUsersName allUsersName, Repository allUsersRepo)
specifier|static
name|Config
name|readDefaultConfig
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|VersionedDefaultPreferences
name|defaultPrefs
init|=
operator|new
name|VersionedDefaultPreferences
argument_list|()
decl_stmt|;
name|defaultPrefs
operator|.
name|load
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
return|return
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
return|;
block|}
DECL|method|updateDefaultGeneralPreferences ( MetaDataUpdate md, GeneralPreferencesInfo input)
specifier|public
specifier|static
name|GeneralPreferencesInfo
name|updateDefaultGeneralPreferences
parameter_list|(
name|MetaDataUpdate
name|md
parameter_list|,
name|GeneralPreferencesInfo
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|VersionedDefaultPreferences
name|defaultPrefs
init|=
operator|new
name|VersionedDefaultPreferences
argument_list|()
decl_stmt|;
name|defaultPrefs
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|storeSection
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|UserConfigSections
operator|.
name|GENERAL
argument_list|,
literal|null
argument_list|,
name|input
argument_list|,
name|GeneralPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|)
expr_stmt|;
name|setMy
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|input
operator|.
name|my
argument_list|)
expr_stmt|;
name|setChangeTable
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|input
operator|.
name|changeTable
argument_list|)
expr_stmt|;
name|setUrlAliases
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|input
operator|.
name|urlAliases
argument_list|)
expr_stmt|;
name|defaultPrefs
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
return|return
name|parseGeneralPreferences
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|updateDefaultDiffPreferences ( MetaDataUpdate md, DiffPreferencesInfo input)
specifier|public
specifier|static
name|DiffPreferencesInfo
name|updateDefaultDiffPreferences
parameter_list|(
name|MetaDataUpdate
name|md
parameter_list|,
name|DiffPreferencesInfo
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|VersionedDefaultPreferences
name|defaultPrefs
init|=
operator|new
name|VersionedDefaultPreferences
argument_list|()
decl_stmt|;
name|defaultPrefs
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|storeSection
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|UserConfigSections
operator|.
name|DIFF
argument_list|,
literal|null
argument_list|,
name|input
argument_list|,
name|DiffPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|)
expr_stmt|;
name|defaultPrefs
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
return|return
name|parseDiffPreferences
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|updateDefaultEditPreferences ( MetaDataUpdate md, EditPreferencesInfo input)
specifier|public
specifier|static
name|EditPreferencesInfo
name|updateDefaultEditPreferences
parameter_list|(
name|MetaDataUpdate
name|md
parameter_list|,
name|EditPreferencesInfo
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|VersionedDefaultPreferences
name|defaultPrefs
init|=
operator|new
name|VersionedDefaultPreferences
argument_list|()
decl_stmt|;
name|defaultPrefs
operator|.
name|load
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|storeSection
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
name|UserConfigSections
operator|.
name|EDIT
argument_list|,
literal|null
argument_list|,
name|input
argument_list|,
name|EditPreferencesInfo
operator|.
name|defaults
argument_list|()
argument_list|)
expr_stmt|;
name|defaultPrefs
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
return|return
name|parseEditPreferences
argument_list|(
name|defaultPrefs
operator|.
name|getConfig
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|changeTable (Config cfg)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|changeTable
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|cfg
operator|.
name|getStringList
argument_list|(
name|CHANGE_TABLE
argument_list|,
literal|null
argument_list|,
name|CHANGE_TABLE_COLUMN
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setChangeTable (Config cfg, List<String> changeTable)
specifier|private
specifier|static
name|void
name|setChangeTable
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|changeTable
parameter_list|)
block|{
if|if
condition|(
name|changeTable
operator|!=
literal|null
condition|)
block|{
name|unsetSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|CHANGE_TABLE
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setStringList
argument_list|(
name|UserConfigSections
operator|.
name|CHANGE_TABLE
argument_list|,
literal|null
argument_list|,
name|CHANGE_TABLE_COLUMN
argument_list|,
name|changeTable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|my (Config cfg)
specifier|private
specifier|static
name|List
argument_list|<
name|MenuItem
argument_list|>
name|my
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|my
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|UserConfigSections
operator|.
name|MY
argument_list|)
control|)
block|{
name|String
name|url
init|=
name|my
argument_list|(
name|cfg
argument_list|,
name|subsection
argument_list|,
name|KEY_URL
argument_list|,
literal|"#/"
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|my
argument_list|(
name|cfg
argument_list|,
name|subsection
argument_list|,
name|KEY_TARGET
argument_list|,
name|url
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|?
literal|null
else|:
literal|"_blank"
argument_list|)
decl_stmt|;
name|my
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
name|subsection
argument_list|,
name|url
argument_list|,
name|target
argument_list|,
name|my
argument_list|(
name|cfg
argument_list|,
name|subsection
argument_list|,
name|KEY_ID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|my
return|;
block|}
DECL|method|my (Config cfg, String subsection, String key, String defaultValue)
specifier|private
specifier|static
name|String
name|my
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|val
init|=
name|cfg
operator|.
name|getString
argument_list|(
name|UserConfigSections
operator|.
name|MY
argument_list|,
name|subsection
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|val
argument_list|)
condition|?
name|val
else|:
name|defaultValue
return|;
block|}
DECL|method|setMy (Config cfg, List<MenuItem> my)
specifier|private
specifier|static
name|void
name|setMy
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|List
argument_list|<
name|MenuItem
argument_list|>
name|my
parameter_list|)
block|{
if|if
condition|(
name|my
operator|!=
literal|null
condition|)
block|{
name|unsetSection
argument_list|(
name|cfg
argument_list|,
name|UserConfigSections
operator|.
name|MY
argument_list|)
expr_stmt|;
for|for
control|(
name|MenuItem
name|item
range|:
name|my
control|)
block|{
name|checkState
argument_list|(
operator|!
name|isNullOrEmpty
argument_list|(
name|item
operator|.
name|name
argument_list|)
argument_list|,
literal|"MenuItem.name must not be null or empty"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
operator|!
name|isNullOrEmpty
argument_list|(
name|item
operator|.
name|url
argument_list|)
argument_list|,
literal|"MenuItem.url must not be null or empty"
argument_list|)
expr_stmt|;
name|setMy
argument_list|(
name|cfg
argument_list|,
name|item
operator|.
name|name
argument_list|,
name|KEY_URL
argument_list|,
name|item
operator|.
name|url
argument_list|)
expr_stmt|;
name|setMy
argument_list|(
name|cfg
argument_list|,
name|item
operator|.
name|name
argument_list|,
name|KEY_TARGET
argument_list|,
name|item
operator|.
name|target
argument_list|)
expr_stmt|;
name|setMy
argument_list|(
name|cfg
argument_list|,
name|item
operator|.
name|name
argument_list|,
name|KEY_ID
argument_list|,
name|item
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|validateMy (List<MenuItem> my)
specifier|public
specifier|static
name|void
name|validateMy
parameter_list|(
name|List
argument_list|<
name|MenuItem
argument_list|>
name|my
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|my
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|MenuItem
name|item
range|:
name|my
control|)
block|{
name|checkRequiredMenuItemField
argument_list|(
name|item
operator|.
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|checkRequiredMenuItemField
argument_list|(
name|item
operator|.
name|url
argument_list|,
literal|"URL"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkRequiredMenuItemField (String value, String name)
specifier|private
specifier|static
name|void
name|checkRequiredMenuItemField
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|name
operator|+
literal|" for menu item is required"
argument_list|)
throw|;
block|}
block|}
DECL|method|isNullOrEmpty (String value)
specifier|private
specifier|static
name|boolean
name|isNullOrEmpty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|setMy (Config cfg, String section, String key, @Nullable String val)
specifier|private
specifier|static
name|void
name|setMy
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|key
parameter_list|,
annotation|@
name|Nullable
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cfg
operator|.
name|unset
argument_list|(
name|UserConfigSections
operator|.
name|MY
argument_list|,
name|section
operator|.
name|trim
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|UserConfigSections
operator|.
name|MY
argument_list|,
name|section
operator|.
name|trim
argument_list|()
argument_list|,
name|key
argument_list|,
name|val
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|urlAliases (Config cfg)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlAliases
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlAliases
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|URL_ALIAS
argument_list|)
control|)
block|{
name|urlAliases
operator|.
name|put
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
name|URL_ALIAS
argument_list|,
name|subsection
argument_list|,
name|KEY_MATCH
argument_list|)
argument_list|,
name|cfg
operator|.
name|getString
argument_list|(
name|URL_ALIAS
argument_list|,
name|subsection
argument_list|,
name|KEY_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|urlAliases
operator|.
name|isEmpty
argument_list|()
condition|?
name|urlAliases
else|:
literal|null
return|;
block|}
DECL|method|setUrlAliases (Config cfg, Map<String, String> urlAliases)
specifier|private
specifier|static
name|void
name|setUrlAliases
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urlAliases
parameter_list|)
block|{
if|if
condition|(
name|urlAliases
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|URL_ALIAS
argument_list|)
control|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|URL_ALIAS
argument_list|,
name|subsection
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|urlAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|URL_ALIAS
argument_list|,
name|URL_ALIAS
operator|+
name|i
argument_list|,
name|KEY_MATCH
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
name|URL_ALIAS
argument_list|,
name|URL_ALIAS
operator|+
name|i
argument_list|,
name|KEY_TOKEN
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|unsetSection (Config cfg, String section)
specifier|private
specifier|static
name|void
name|unsetSection
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|section
parameter_list|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|section
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subsection
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
name|section
argument_list|)
control|)
block|{
name|cfg
operator|.
name|unsetSection
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|VersionedDefaultPreferences
specifier|private
specifier|static
class|class
name|VersionedDefaultPreferences
extends|extends
name|VersionedMetaData
block|{
DECL|field|cfg
specifier|private
name|Config
name|cfg
decl_stmt|;
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|RefNames
operator|.
name|REFS_USERS_DEFAULT
return|;
block|}
DECL|method|getConfig ()
specifier|private
name|Config
name|getConfig
parameter_list|()
block|{
name|checkState
argument_list|(
name|cfg
operator|!=
literal|null
argument_list|,
literal|"Default preferences not loaded yet."
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|cfg
operator|=
name|readConfig
argument_list|(
name|PREFERENCES_CONFIG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Update default preferences\n"
argument_list|)
expr_stmt|;
block|}
name|saveConfig
argument_list|(
name|PREFERENCES_CONFIG
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

