begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackends
operator|.
name|GROUP_REF_NAME_COMPARATOR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StartupCheck
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|StartupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetEntryContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/**  * Universal implementation of the GroupBackend that works with the injected set of GroupBackends.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|UniversalGroupBackend
specifier|public
class|class
name|UniversalGroupBackend
implements|implements
name|GroupBackend
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|backends
specifier|private
specifier|final
name|PluginSetContext
argument_list|<
name|GroupBackend
argument_list|>
name|backends
decl_stmt|;
annotation|@
name|Inject
DECL|method|UniversalGroupBackend (PluginSetContext<GroupBackend> backends)
name|UniversalGroupBackend
parameter_list|(
name|PluginSetContext
argument_list|<
name|GroupBackend
argument_list|>
name|backends
parameter_list|)
block|{
name|this
operator|.
name|backends
operator|=
name|backends
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|backend (AccountGroup.UUID uuid)
specifier|private
name|GroupBackend
name|backend
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PluginSetEntryContext
argument_list|<
name|GroupBackend
argument_list|>
name|c
range|:
name|backends
control|)
block|{
if|if
condition|(
name|c
operator|.
name|call
argument_list|(
name|b
lambda|->
name|b
operator|.
name|handles
argument_list|(
name|uuid
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|c
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|handles (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|handles
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|backend
argument_list|(
name|uuid
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.UUID uuid)
specifier|public
name|GroupDescription
operator|.
name|Basic
name|get
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GroupBackend
name|b
init|=
name|backend
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Unknown GroupBackend for UUID: %s"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|b
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|suggest (String name, ProjectState project)
specifier|public
name|Collection
argument_list|<
name|GroupReference
argument_list|>
name|suggest
parameter_list|(
name|String
name|name
parameter_list|,
name|ProjectState
name|project
parameter_list|)
block|{
name|Set
argument_list|<
name|GroupReference
argument_list|>
name|groups
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|GROUP_REF_NAME_COMPARATOR
argument_list|)
decl_stmt|;
name|backends
operator|.
name|runEach
argument_list|(
name|g
lambda|->
name|groups
operator|.
name|addAll
argument_list|(
name|g
operator|.
name|suggest
argument_list|(
name|name
argument_list|,
name|project
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groups
return|;
block|}
annotation|@
name|Override
DECL|method|membershipsOf (IdentifiedUser user)
specifier|public
name|GroupMembership
name|membershipsOf
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
operator|new
name|UniversalGroupMembership
argument_list|(
name|user
argument_list|)
return|;
block|}
DECL|class|UniversalGroupMembership
specifier|private
class|class
name|UniversalGroupMembership
implements|implements
name|GroupMembership
block|{
DECL|field|memberships
specifier|private
specifier|final
name|Map
argument_list|<
name|GroupBackend
argument_list|,
name|GroupMembership
argument_list|>
name|memberships
decl_stmt|;
DECL|method|UniversalGroupMembership (IdentifiedUser user)
specifier|private
name|UniversalGroupMembership
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|GroupBackend
argument_list|,
name|GroupMembership
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|backends
operator|.
name|runEach
argument_list|(
name|g
lambda|->
name|builder
operator|.
name|put
argument_list|(
name|g
argument_list|,
name|g
operator|.
name|membershipsOf
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|memberships
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|membership (AccountGroup.UUID uuid)
specifier|private
name|GroupMembership
name|membership
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|GroupBackend
argument_list|,
name|GroupMembership
argument_list|>
name|m
range|:
name|memberships
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|handles
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
return|return
name|m
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|contains (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|contains
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GroupMembership
name|m
init|=
name|membership
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Unknown GroupMembership for UUID: %s"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|m
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsAnyOf (Iterable<AccountGroup.UUID> uuids)
specifier|public
name|boolean
name|containsAnyOf
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|uuids
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|GroupMembership
argument_list|,
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|lookups
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|uuids
control|)
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|GroupMembership
name|m
init|=
name|membership
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Unknown GroupMembership for UUID: %s"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lookups
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|GroupMembership
argument_list|,
name|Collection
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|lookups
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|GroupMembership
name|m
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|ids
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|contains
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|ids
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|containsAnyOf
argument_list|(
name|ids
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|intersection (Iterable<AccountGroup.UUID> uuids)
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|intersection
parameter_list|(
name|Iterable
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|uuids
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|GroupMembership
argument_list|,
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|lookups
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|uuids
control|)
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|GroupMembership
name|m
init|=
name|membership
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Unknown GroupMembership for UUID: %s"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lookups
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|GroupMembership
argument_list|,
name|Collection
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|lookups
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|groups
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|intersection
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
annotation|@
name|Override
DECL|method|getKnownGroups ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getKnownGroups
parameter_list|()
block|{
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupMembership
name|m
range|:
name|memberships
operator|.
name|values
argument_list|()
control|)
block|{
name|groups
operator|.
name|addAll
argument_list|(
name|m
operator|.
name|getKnownGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isVisibleToAll (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|isVisibleToAll
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
for|for
control|(
name|PluginSetEntryContext
argument_list|<
name|GroupBackend
argument_list|>
name|c
range|:
name|backends
control|)
block|{
if|if
condition|(
name|c
operator|.
name|call
argument_list|(
name|b
lambda|->
name|b
operator|.
name|handles
argument_list|(
name|uuid
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|c
operator|.
name|call
argument_list|(
name|b
lambda|->
name|b
operator|.
name|isVisibleToAll
argument_list|(
name|uuid
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|class|ConfigCheck
specifier|public
specifier|static
class|class
name|ConfigCheck
implements|implements
name|StartupCheck
block|{
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|universalGroupBackend
specifier|private
specifier|final
name|UniversalGroupBackend
name|universalGroupBackend
decl_stmt|;
annotation|@
name|Inject
DECL|method|ConfigCheck (@erritServerConfig Config cfg, UniversalGroupBackend groupBackend)
name|ConfigCheck
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|UniversalGroupBackend
name|groupBackend
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|universalGroupBackend
operator|=
name|groupBackend
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|check ()
specifier|public
name|void
name|check
parameter_list|()
throws|throws
name|StartupException
block|{
name|String
name|invalid
init|=
name|cfg
operator|.
name|getSubsections
argument_list|(
literal|"groups"
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|sub
lambda|->
block|{
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|sub
argument_list|)
decl_stmt|;
name|GroupBackend
name|groupBackend
init|=
name|universalGroupBackend
operator|.
name|backend
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
return|return
name|groupBackend
operator|==
literal|null
operator|||
name|groupBackend
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
operator|==
literal|null
return|;
block|}
argument_list|)
operator|.
name|map
argument_list|(
name|u
lambda|->
literal|"'"
operator|+
name|u
operator|+
literal|"'"
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|invalid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StartupException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Subsections for 'groups' in gerrit.config must be valid group"
operator|+
literal|" UUIDs. The following group UUIDs could not be resolved: "
operator|+
name|invalid
operator|+
literal|" Please remove/fix these 'groups' subsections in"
operator|+
literal|" gerrit.config."
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

