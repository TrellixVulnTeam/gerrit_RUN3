begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
operator|.
name|Units
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
operator|.
name|TraceTimer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|TreeWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|treewalk
operator|.
name|filter
operator|.
name|TreeFilter
import|;
end_import

begin_comment
comment|/** Loads cache values for the external ID cache using either a full or a partial reload. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ExternalIdCacheLoader
specifier|public
class|class
name|ExternalIdCacheLoader
extends|extends
name|CacheLoader
argument_list|<
name|ObjectId
argument_list|,
name|AllExternalIds
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
comment|// Maximum number of prior states we inspect to find a base for differential. If no cached state
comment|// is found within this number of parents, we fall back to reading everything from scratch.
DECL|field|MAX_HISTORY_LOOKBACK
specifier|private
specifier|static
specifier|final
name|int
name|MAX_HISTORY_LOOKBACK
init|=
literal|10
decl_stmt|;
DECL|field|externalIdReader
specifier|private
specifier|final
name|ExternalIdReader
name|externalIdReader
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|Provider
argument_list|<
name|Cache
argument_list|<
name|ObjectId
argument_list|,
name|AllExternalIds
argument_list|>
argument_list|>
name|externalIdCache
decl_stmt|;
DECL|field|gitRepositoryManager
specifier|private
specifier|final
name|GitRepositoryManager
name|gitRepositoryManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|reloadCounter
specifier|private
specifier|final
name|Counter1
argument_list|<
name|Boolean
argument_list|>
name|reloadCounter
decl_stmt|;
DECL|field|reloadDifferential
specifier|private
specifier|final
name|Timer0
name|reloadDifferential
decl_stmt|;
DECL|field|enablePartialReloads
specifier|private
specifier|final
name|boolean
name|enablePartialReloads
decl_stmt|;
annotation|@
name|Inject
DECL|method|ExternalIdCacheLoader ( GitRepositoryManager gitRepositoryManager, AllUsersName allUsersName, ExternalIdReader externalIdReader, @Named(ExternalIdCacheImpl.CACHE_NAME) Provider<Cache<ObjectId, AllExternalIds>> externalIdCache, MetricMaker metricMaker, @GerritServerConfig Config config)
name|ExternalIdCacheLoader
parameter_list|(
name|GitRepositoryManager
name|gitRepositoryManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|ExternalIdReader
name|externalIdReader
parameter_list|,
annotation|@
name|Named
argument_list|(
name|ExternalIdCacheImpl
operator|.
name|CACHE_NAME
argument_list|)
name|Provider
argument_list|<
name|Cache
argument_list|<
name|ObjectId
argument_list|,
name|AllExternalIds
argument_list|>
argument_list|>
name|externalIdCache
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|externalIdReader
operator|=
name|externalIdReader
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|gitRepositoryManager
operator|=
name|gitRepositoryManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|reloadCounter
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"notedb/external_id_cache_load_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Total number of external ID cache reloads from Git."
argument_list|)
operator|.
name|setRate
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"updates"
argument_list|)
argument_list|,
name|Field
operator|.
name|ofBoolean
argument_list|(
literal|"partial"
argument_list|,
name|Metadata
operator|.
name|Builder
operator|::
name|partial
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reloadDifferential
operator|=
name|metricMaker
operator|.
name|newTimer
argument_list|(
literal|"notedb/external_id_partial_read_latency"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Latency for generating a new external ID cache state from a prior state."
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
name|Units
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|enablePartialReloads
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
literal|"cache"
argument_list|,
name|ExternalIdCacheImpl
operator|.
name|CACHE_NAME
argument_list|,
literal|"enablePartialReloads"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (ObjectId notesRev)
specifier|public
name|AllExternalIds
name|load
parameter_list|(
name|ObjectId
name|notesRev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
operator|!
name|enablePartialReloads
condition|)
block|{
name|logger
operator|.
name|atInfo
argument_list|()
operator|.
name|log
argument_list|(
literal|"Partial reloads of "
operator|+
name|ExternalIdCacheImpl
operator|.
name|CACHE_NAME
operator|+
literal|" disabled. Falling back to full reload."
argument_list|)
expr_stmt|;
return|return
name|reloadAllExternalIds
argument_list|(
name|notesRev
argument_list|)
return|;
block|}
comment|// The requested value was not in the cache (hence, this loader was invoked). Therefore, try to
comment|// create this entry from a past value using the minimal amount of Git operations possible to
comment|// reduce latency.
comment|//
comment|// First, try to find the most recent state we have in the cache. Most of the time, this will be
comment|// the state before the last update happened, but it can also date further back. We try a best
comment|// effort approach and check the last 10 states. If nothing is found, we default to loading the
comment|// value from scratch.
comment|//
comment|// If a prior state was found, we use Git to diff the trees and find modifications. This is
comment|// faster than just loading the complete current tree and working off of that because of how the
comment|// data is structured: NotesMaps use nested trees, so, for example, a NotesMap with 200k entries
comment|// has two layers of nesting: 12/34/1234..99. TreeWalk is smart in skipping the traversal of
comment|// identical subtrees.
comment|//
comment|// Once we know what files changed, we apply additions and removals to the previously cached
comment|// state.
try|try
init|(
name|Repository
name|repo
init|=
name|gitRepositoryManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|Ref
name|extIdRef
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|extIdRef
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atInfo
argument_list|()
operator|.
name|log
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|+
literal|" not initialized, falling back to full reload."
argument_list|)
expr_stmt|;
return|return
name|reloadAllExternalIds
argument_list|(
name|notesRev
argument_list|)
return|;
block|}
name|RevCommit
name|currentCommit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|extIdRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|currentCommit
argument_list|)
expr_stmt|;
name|RevCommit
name|parentWithCacheValue
decl_stmt|;
name|AllExternalIds
name|oldExternalIds
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|parentWithCacheValue
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|i
operator|++
operator|<
name|MAX_HISTORY_LOOKBACK
operator|&&
name|parentWithCacheValue
operator|.
name|getParentCount
argument_list|()
operator|<
literal|2
condition|)
block|{
name|oldExternalIds
operator|=
name|externalIdCache
operator|.
name|get
argument_list|()
operator|.
name|getIfPresent
argument_list|(
name|parentWithCacheValue
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldExternalIds
operator|!=
literal|null
condition|)
block|{
comment|// We found a previously cached state.
break|break;
block|}
block|}
if|if
condition|(
name|oldExternalIds
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Unable to find an old ExternalId cache state, falling back to full reload"
argument_list|)
expr_stmt|;
return|return
name|reloadAllExternalIds
argument_list|(
name|notesRev
argument_list|)
return|;
block|}
comment|// Diff trees to recognize modifications
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|removals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Set<Blob-Object-Id>
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|ObjectId
argument_list|>
name|additions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Map<Name-ObjectId, Blob-Object-Id>
try|try
init|(
name|TreeWalk
name|treeWalk
init|=
operator|new
name|TreeWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|treeWalk
operator|.
name|setFilter
argument_list|(
name|TreeFilter
operator|.
name|ANY_DIFF
argument_list|)
expr_stmt|;
name|treeWalk
operator|.
name|setRecursive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|treeWalk
operator|.
name|reset
argument_list|(
name|parentWithCacheValue
operator|.
name|getTree
argument_list|()
argument_list|,
name|currentCommit
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|treeWalk
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|treeWalk
operator|.
name|getPathString
argument_list|()
decl_stmt|;
name|ObjectId
name|oldBlob
init|=
name|treeWalk
operator|.
name|getObjectId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectId
name|newBlob
init|=
name|treeWalk
operator|.
name|getObjectId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|newBlob
argument_list|)
condition|)
block|{
comment|// Deletion
name|removals
operator|.
name|add
argument_list|(
name|oldBlob
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|oldBlob
argument_list|)
condition|)
block|{
comment|// Addition
name|additions
operator|.
name|put
argument_list|(
name|fileNameToObjectId
argument_list|(
name|path
argument_list|)
argument_list|,
name|newBlob
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Modification
name|removals
operator|.
name|add
argument_list|(
name|oldBlob
argument_list|)
expr_stmt|;
name|additions
operator|.
name|put
argument_list|(
name|fileNameToObjectId
argument_list|(
name|path
argument_list|)
argument_list|,
name|newBlob
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|AllExternalIds
name|allExternalIds
init|=
name|buildAllExternalIds
argument_list|(
name|repo
argument_list|,
name|oldExternalIds
argument_list|,
name|additions
argument_list|,
name|removals
argument_list|)
decl_stmt|;
name|reloadCounter
operator|.
name|increment
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reloadDifferential
operator|.
name|record
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
return|return
name|allExternalIds
return|;
block|}
block|}
DECL|method|fileNameToObjectId (String path)
specifier|private
specifier|static
name|ObjectId
name|fileNameToObjectId
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'/'
argument_list|)
operator|.
name|removeFrom
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Build a new {@link AllExternalIds} from an old state by applying additions and removals that    * were performed since then.    *    *<p>Removals are applied before additions.    *    * @param repo open repository    * @param oldExternalIds prior state that is used as base    * @param additions map of name to blob ID for each external ID that should be added    * @param removals set of name {@link ObjectId}s that should be removed    */
DECL|method|buildAllExternalIds ( Repository repo, AllExternalIds oldExternalIds, Map<ObjectId, ObjectId> additions, Set<ObjectId> removals)
specifier|private
specifier|static
name|AllExternalIds
name|buildAllExternalIds
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AllExternalIds
name|oldExternalIds
parameter_list|,
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|ObjectId
argument_list|>
name|additions
parameter_list|,
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|removals
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ExternalId
argument_list|>
name|byAccount
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ExternalId
argument_list|>
name|byEmail
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Copy over old ExternalIds but exclude deleted ones
for|for
control|(
name|ExternalId
name|externalId
range|:
name|oldExternalIds
operator|.
name|byAccount
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|removals
operator|.
name|contains
argument_list|(
name|externalId
operator|.
name|blobId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|byAccount
operator|.
name|put
argument_list|(
name|externalId
operator|.
name|accountId
argument_list|()
argument_list|,
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|externalId
operator|.
name|email
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byEmail
operator|.
name|put
argument_list|(
name|externalId
operator|.
name|email
argument_list|()
argument_list|,
name|externalId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add newly discovered ExternalIds
try|try
init|(
name|ObjectReader
name|reader
init|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectId
argument_list|,
name|ObjectId
argument_list|>
name|nameToBlob
range|:
name|additions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ExternalId
name|parsedExternalId
decl_stmt|;
try|try
block|{
name|parsedExternalId
operator|=
name|ExternalId
operator|.
name|parse
argument_list|(
name|nameToBlob
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|reader
operator|.
name|open
argument_list|(
name|nameToBlob
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|getCachedBytes
argument_list|()
argument_list|,
name|nameToBlob
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
decl||
name|RuntimeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Ignoring invalid external ID note %s"
argument_list|,
name|nameToBlob
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|byAccount
operator|.
name|put
argument_list|(
name|parsedExternalId
operator|.
name|accountId
argument_list|()
argument_list|,
name|parsedExternalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|parsedExternalId
operator|.
name|email
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byEmail
operator|.
name|put
argument_list|(
name|parsedExternalId
operator|.
name|email
argument_list|()
argument_list|,
name|parsedExternalId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|AutoValue_AllExternalIds
argument_list|(
name|byAccount
operator|.
name|build
argument_list|()
argument_list|,
name|byEmail
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reloadAllExternalIds (ObjectId notesRev)
specifier|private
name|AllExternalIds
name|reloadAllExternalIds
parameter_list|(
name|ObjectId
name|notesRev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|TraceTimer
name|ignored
init|=
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"Loading external IDs from scratch"
argument_list|,
name|Metadata
operator|.
name|builder
argument_list|()
operator|.
name|revision
argument_list|(
name|notesRev
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
init|)
block|{
name|ImmutableSet
argument_list|<
name|ExternalId
argument_list|>
name|externalIds
init|=
name|externalIdReader
operator|.
name|all
argument_list|(
name|notesRev
argument_list|)
decl_stmt|;
name|externalIds
operator|.
name|forEach
argument_list|(
name|ExternalId
operator|::
name|checkThatBlobIdIsSet
argument_list|)
expr_stmt|;
name|AllExternalIds
name|allExternalIds
init|=
name|AllExternalIds
operator|.
name|create
argument_list|(
name|externalIds
argument_list|)
decl_stmt|;
name|reloadCounter
operator|.
name|increment
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|allExternalIds
return|;
block|}
block|}
block|}
end_class

end_unit

