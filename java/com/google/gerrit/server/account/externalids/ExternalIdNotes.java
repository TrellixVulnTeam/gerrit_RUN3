begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BlobBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|Note
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link VersionedMetaData} subclass to update external IDs.  *  *<p>On load the note map from {@code refs/meta/external-ids} is read, but the external IDs are not  * parsed yet (see {@link #onLoad()}).  *  *<p>After loading the note map callers can access single or all external IDs. Only now the  * requested external IDs are parsed.  *  *<p>After loading the note map callers can stage various external ID updates (insert, upsert,  * delete, replace).  *  *<p>On save the staged external ID updates are performed (see {@link #onSave(CommitBuilder)}).  *  *<p>After committing the external IDs a cache update can be requested which also reindexes the  * accounts for which external IDs have been updated (see {@link #updateCaches()}).  */
end_comment

begin_class
DECL|class|ExternalIdNotes
specifier|public
class|class
name|ExternalIdNotes
extends|extends
name|VersionedMetaData
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalIdNotes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_NOTE_SZ
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NOTE_SZ
init|=
literal|1
operator|<<
literal|19
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (ExternalIdCache externalIdCache, AccountCache accountCache)
name|Factory
parameter_list|(
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|)
block|{
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
block|}
DECL|method|load (Repository allUsersRepo)
specifier|public
name|ExternalIdNotes
name|load
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
operator|new
name|ExternalIdNotes
argument_list|(
name|externalIdCache
argument_list|,
name|accountCache
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
block|}
annotation|@
name|Singleton
DECL|class|FactoryNoReindex
specifier|public
specifier|static
class|class
name|FactoryNoReindex
block|{
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|FactoryNoReindex (ExternalIdCache externalIdCache)
name|FactoryNoReindex
parameter_list|(
name|ExternalIdCache
name|externalIdCache
parameter_list|)
block|{
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
block|}
DECL|method|load (Repository allUsersRepo)
specifier|public
name|ExternalIdNotes
name|load
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
operator|new
name|ExternalIdNotes
argument_list|(
name|externalIdCache
argument_list|,
literal|null
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
block|}
DECL|method|loadReadOnly (Repository allUsersRepo)
specifier|public
specifier|static
name|ExternalIdNotes
name|loadReadOnly
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
operator|new
name|ExternalIdNotes
argument_list|(
operator|new
name|DisabledExternalIdCache
argument_list|()
argument_list|,
literal|null
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|setReadOnly
argument_list|()
operator|.
name|load
argument_list|()
return|;
block|}
DECL|method|loadReadOnly (Repository allUsersRepo, ObjectId rev)
specifier|public
specifier|static
name|ExternalIdNotes
name|loadReadOnly
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
operator|new
name|ExternalIdNotes
argument_list|(
operator|new
name|DisabledExternalIdCache
argument_list|()
argument_list|,
literal|null
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|setReadOnly
argument_list|()
operator|.
name|load
argument_list|(
name|rev
argument_list|)
return|;
block|}
DECL|method|loadNoCacheUpdate (Repository allUsersRepo)
specifier|public
specifier|static
name|ExternalIdNotes
name|loadNoCacheUpdate
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
operator|new
name|ExternalIdNotes
argument_list|(
operator|new
name|DisabledExternalIdCache
argument_list|()
argument_list|,
literal|null
argument_list|,
name|allUsersRepo
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|noteMap
specifier|private
name|NoteMap
name|noteMap
decl_stmt|;
DECL|field|oldRev
specifier|private
name|ObjectId
name|oldRev
decl_stmt|;
comment|// Staged note map updates that should be executed on save.
DECL|field|noteMapUpdates
specifier|private
name|List
argument_list|<
name|NoteMapUpdate
argument_list|>
name|noteMapUpdates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Staged cache updates that should be executed after external ID changes have been committed.
DECL|field|cacheUpdates
specifier|private
name|List
argument_list|<
name|CacheUpdate
argument_list|>
name|cacheUpdates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|afterReadRevision
specifier|private
name|Runnable
name|afterReadRevision
decl_stmt|;
DECL|field|readOnly
specifier|private
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
DECL|method|ExternalIdNotes ( ExternalIdCache externalIdCache, @Nullable AccountCache accountCache, Repository allUsersRepo)
name|ExternalIdNotes
parameter_list|(
name|ExternalIdCache
name|externalIdCache
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
block|{
name|this
operator|.
name|externalIdCache
operator|=
name|checkNotNull
argument_list|(
name|externalIdCache
argument_list|,
literal|"externalIdCache"
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|checkNotNull
argument_list|(
name|allUsersRepo
argument_list|,
literal|"allUsersRepo"
argument_list|)
expr_stmt|;
block|}
DECL|method|setAfterReadRevision (Runnable afterReadRevision)
specifier|public
name|ExternalIdNotes
name|setAfterReadRevision
parameter_list|(
name|Runnable
name|afterReadRevision
parameter_list|)
block|{
name|this
operator|.
name|afterReadRevision
operator|=
name|afterReadRevision
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setReadOnly ()
specifier|private
name|ExternalIdNotes
name|setReadOnly
parameter_list|()
block|{
name|this
operator|.
name|readOnly
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRepository ()
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repo
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
return|;
block|}
DECL|method|load ()
name|ExternalIdNotes
name|load
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|load
argument_list|(
name|repo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|load (ObjectId rev)
name|ExternalIdNotes
name|load
parameter_list|(
name|ObjectId
name|rev
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|load
argument_list|(
name|repo
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Parses and returns the specified external ID.    *    * @param key the key of the external ID    * @return the external ID, {@code Optional.empty()} if it doesn't exist    */
DECL|method|get (ExternalId.Key key)
specifier|public
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|get
parameter_list|(
name|ExternalId
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|ObjectId
name|noteId
init|=
name|key
operator|.
name|sha1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noteMap
operator|.
name|contains
argument_list|(
name|noteId
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|ObjectId
name|noteDataId
init|=
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|raw
init|=
name|readNoteData
argument_list|(
name|rw
argument_list|,
name|noteDataId
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ExternalId
operator|.
name|parse
argument_list|(
name|noteId
operator|.
name|name
argument_list|()
argument_list|,
name|raw
argument_list|,
name|noteDataId
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Parses and returns the specified external IDs.    *    * @param keys the keys of the external IDs    * @return the external IDs    */
DECL|method|get (Collection<ExternalId.Key> keys)
specifier|public
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|get
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|keys
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|ExternalId
argument_list|>
name|externalIds
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalId
operator|.
name|Key
name|key
range|:
name|keys
control|)
block|{
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|externalIds
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
return|return
name|externalIds
return|;
block|}
comment|/**    * Parses and returns all external IDs.    *    *<p>Invalid external IDs are ignored.    *    * @return all external IDs    */
DECL|method|all ()
specifier|public
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|all
parameter_list|()
throws|throws
name|IOException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|extIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Note
name|note
range|:
name|noteMap
control|)
block|{
name|byte
index|[]
name|raw
init|=
name|readNoteData
argument_list|(
name|rw
argument_list|,
name|note
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|extIds
operator|.
name|add
argument_list|(
name|ExternalId
operator|.
name|parse
argument_list|(
name|note
operator|.
name|getName
argument_list|()
argument_list|,
name|raw
argument_list|,
name|note
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
decl||
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring invalid external ID note %s"
argument_list|,
name|note
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extIds
return|;
block|}
block|}
DECL|method|getNoteMap ()
name|NoteMap
name|getNoteMap
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|noteMap
return|;
block|}
DECL|method|readNoteData (RevWalk rw, ObjectId noteDataId)
specifier|static
name|byte
index|[]
name|readNoteData
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|noteDataId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|open
argument_list|(
name|noteDataId
argument_list|,
name|OBJ_BLOB
argument_list|)
operator|.
name|getCachedBytes
argument_list|(
name|MAX_NOTE_SZ
argument_list|)
return|;
block|}
comment|/**    * Inserts a new external ID.    *    * @throws IOException on IO error while checking if external ID already exists    * @throws OrmDuplicateKeyException if the external ID already exists    */
DECL|method|insert (ExternalId extId)
specifier|public
name|void
name|insert
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts new external IDs.    *    * @throws IOException on IO error while checking if external IDs already exist    * @throws OrmDuplicateKeyException if any of the external ID already exists    */
DECL|method|insert (Collection<ExternalId> extIds)
specifier|public
name|void
name|insert
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|checkExternalIdsDontExist
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|newExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|ExternalId
name|insertedExtId
init|=
name|upsert
argument_list|(
name|rw
argument_list|,
name|inserter
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
decl_stmt|;
name|newExtIds
operator|.
name|add
argument_list|(
name|insertedExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|add
argument_list|(
name|newExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates an external ID.    *    *<p>If the external ID already exists, it is overwritten, otherwise it is inserted.    */
DECL|method|upsert (ExternalId extId)
specifier|public
name|void
name|upsert
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|upsert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates external IDs.    *    *<p>If any of the external IDs already exists, it is overwritten. New external IDs are inserted.    */
DECL|method|upsert (Collection<ExternalId> extIds)
specifier|public
name|void
name|upsert
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removedExtIds
init|=
name|get
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|from
argument_list|(
name|extIds
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|updatedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|ExternalId
name|updatedExtId
init|=
name|upsert
argument_list|(
name|rw
argument_list|,
name|inserter
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
decl_stmt|;
name|updatedExtIds
operator|.
name|add
argument_list|(
name|updatedExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|remove
argument_list|(
name|removedExtIds
argument_list|)
operator|.
name|add
argument_list|(
name|updatedExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes an external ID.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key, but otherwise doesn't match the specified external ID.    */
DECL|method|delete (ExternalId extId)
specifier|public
name|void
name|delete
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
block|{
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes external IDs.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key as any of the external IDs that should be deleted, but otherwise doesn't match the that    *     external ID.    */
DECL|method|delete (Collection<ExternalId> extIds)
specifier|public
name|void
name|delete
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
name|remove
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
expr_stmt|;
name|removedExtIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|remove
argument_list|(
name|removedExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete an external ID by key.    *    * @throws IllegalStateException is thrown if the external ID does not belong to the specified    *     account.    */
DECL|method|delete (Account.Id accountId, ExternalId.Key extIdKey)
specifier|public
name|void
name|delete
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|)
block|{
name|delete
argument_list|(
name|accountId
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|extIdKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete external IDs by external ID key.    *    * @throws IllegalStateException is thrown if any of the external IDs does not belong to the    *     specified account.    */
DECL|method|delete (Account.Id accountId, Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|delete
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|ExternalId
name|removedExtId
init|=
name|remove
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|,
name|extIdKey
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
name|removedExtIds
operator|.
name|add
argument_list|(
name|removedExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|remove
argument_list|(
name|removedExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete external IDs by external ID key.    *    *<p>The external IDs are deleted regardless of which account they belong to.    */
DECL|method|deleteByKeys (Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|deleteByKeys
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|ExternalId
name|extId
init|=
name|remove
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|,
name|extIdKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|removedExtIds
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|remove
argument_list|(
name|removedExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs for an account by external ID keys.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID key is specified for deletion and an external ID with the same key is specified to    * be added, the old external ID with that key is deleted first and then the new external ID is    * added (so the external ID for that key is replaced).    *    * @throws IllegalStateException is thrown if any of the specified external IDs does not belong to    *     the specified account.    */
DECL|method|replace ( Account.Id accountId, Collection<ExternalId.Key> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|checkSameAccount
argument_list|(
name|toAdd
argument_list|,
name|accountId
argument_list|)
expr_stmt|;
name|checkExternalIdKeysDontExist
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|from
argument_list|(
name|toAdd
argument_list|)
argument_list|,
name|toDelete
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|updatedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|toDelete
control|)
block|{
name|ExternalId
name|removedExtId
init|=
name|remove
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|,
name|extIdKey
argument_list|,
name|accountId
argument_list|)
decl_stmt|;
if|if
condition|(
name|removedExtId
operator|!=
literal|null
condition|)
block|{
name|removedExtIds
operator|.
name|add
argument_list|(
name|removedExtId
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|ExternalId
name|insertedExtId
init|=
name|upsert
argument_list|(
name|rw
argument_list|,
name|inserter
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
decl_stmt|;
name|updatedExtIds
operator|.
name|add
argument_list|(
name|insertedExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|add
argument_list|(
name|updatedExtIds
argument_list|)
operator|.
name|remove
argument_list|(
name|removedExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs for an account by external ID keys.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID key is specified for deletion and an external ID with the same key is specified to    * be added, the old external ID with that key is deleted first and then the new external ID is    * added (so the external ID for that key is replaced).    *    *<p>The external IDs are replaced regardless of which account they belong to.    */
DECL|method|replaceByKeys (Collection<ExternalId.Key> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replaceByKeys
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
name|checkExternalIdKeysDontExist
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|from
argument_list|(
name|toAdd
argument_list|)
argument_list|,
name|toDelete
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|updatedExtIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|noteMapUpdates
operator|.
name|add
argument_list|(
parameter_list|(
name|rw
parameter_list|,
name|n
parameter_list|)
lambda|->
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|toDelete
control|)
block|{
name|ExternalId
name|removedExtId
init|=
name|remove
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|,
name|extIdKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|removedExtIds
operator|.
name|add
argument_list|(
name|removedExtId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExternalId
name|extId
range|:
name|toAdd
control|)
block|{
name|ExternalId
name|insertedExtId
init|=
name|upsert
argument_list|(
name|rw
argument_list|,
name|inserter
argument_list|,
name|noteMap
argument_list|,
name|extId
argument_list|)
decl_stmt|;
name|updatedExtIds
operator|.
name|add
argument_list|(
name|insertedExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdates
operator|.
name|add
argument_list|(
name|cu
lambda|->
name|cu
operator|.
name|add
argument_list|(
name|updatedExtIds
argument_list|)
operator|.
name|remove
argument_list|(
name|removedExtIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces an external ID.    *    * @throws IllegalStateException is thrown if the specified external IDs belong to different    *     accounts.    */
DECL|method|replace (ExternalId toDelete, ExternalId toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|ExternalId
name|toDelete
parameter_list|,
name|ExternalId
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
name|replace
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|toDelete
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID is specified for deletion and an external ID with the same key is specified to be    * added, the old external ID with that key is deleted first and then the new external ID is added    * (so the external ID for that key is replaced).    *    * @throws IllegalStateException is thrown if the specified external IDs belong to different    *     accounts.    */
DECL|method|replace (Collection<ExternalId> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
name|Account
operator|.
name|Id
name|accountId
init|=
name|checkSameAccount
argument_list|(
name|Iterables
operator|.
name|concat
argument_list|(
name|toDelete
argument_list|,
name|toAdd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
comment|// toDelete and toAdd are empty -> nothing to do
return|return;
block|}
name|replace
argument_list|(
name|accountId
argument_list|,
name|toDelete
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|key
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|,
name|toAdd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|noteMap
operator|=
name|revision
operator|!=
literal|null
condition|?
name|NoteMap
operator|.
name|read
argument_list|(
name|reader
argument_list|,
name|revision
argument_list|)
else|:
name|NoteMap
operator|.
name|newEmptyMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|afterReadRevision
operator|!=
literal|null
condition|)
block|{
name|afterReadRevision
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|commit (MetaDataUpdate update)
specifier|public
name|RevCommit
name|commit
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
block|{
name|oldRev
operator|=
name|revision
operator|!=
literal|null
condition|?
name|revision
operator|.
name|copy
argument_list|()
else|:
name|ObjectId
operator|.
name|zeroId
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|commit
argument_list|(
name|update
argument_list|)
return|;
block|}
comment|/**    * Updates the caches (external ID cache, account cache) and reindexes the accounts for which    * external IDs were modified.    *    *<p>Must only be called after committing changes.    *    *<p>No-op if this instance was created by {@link #loadNoCacheUpdate(Repository)}.    *    *<p>No eviction from account cache if this instance was created by {@link FactoryNoReindex}.    */
DECL|method|updateCaches ()
specifier|public
name|void
name|updateCaches
parameter_list|()
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
name|oldRev
operator|!=
literal|null
argument_list|,
literal|"no changes committed yet"
argument_list|)
expr_stmt|;
name|ExternalIdCacheUpdates
name|externalIdCacheUpdates
init|=
operator|new
name|ExternalIdCacheUpdates
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheUpdate
name|cacheUpdate
range|:
name|cacheUpdates
control|)
block|{
name|cacheUpdate
operator|.
name|execute
argument_list|(
name|externalIdCacheUpdates
argument_list|)
expr_stmt|;
block|}
name|externalIdCache
operator|.
name|onReplace
argument_list|(
name|oldRev
argument_list|,
name|getRevision
argument_list|()
argument_list|,
name|externalIdCacheUpdates
operator|.
name|getRemoved
argument_list|()
argument_list|,
name|externalIdCacheUpdates
operator|.
name|getAdded
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|accountCache
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|Streams
operator|.
name|concat
argument_list|(
name|externalIdCacheUpdates
operator|.
name|getAdded
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|externalIdCacheUpdates
operator|.
name|getRemoved
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|accountId
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
control|)
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|cacheUpdates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oldRev
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkState
argument_list|(
operator|!
name|readOnly
argument_list|,
literal|"Updating external IDs is disabled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|noteMapUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Update external IDs\n"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
for|for
control|(
name|NoteMapUpdate
name|noteMapUpdate
range|:
name|noteMapUpdates
control|)
block|{
try|try
block|{
name|noteMapUpdate
operator|.
name|execute
argument_list|(
name|rw
argument_list|,
name|noteMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmDuplicateKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|noteMapUpdates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|RevTree
name|oldTree
init|=
name|revision
operator|!=
literal|null
condition|?
name|rw
operator|.
name|parseTree
argument_list|(
name|revision
argument_list|)
else|:
literal|null
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|noteMap
operator|.
name|writeTree
argument_list|(
name|inserter
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTreeId
operator|.
name|equals
argument_list|(
name|oldTree
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|commit
operator|.
name|setTreeId
argument_list|(
name|newTreeId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Checks that all specified external IDs belong to the same account.    *    * @return the ID of the account to which all specified external IDs belong.    */
DECL|method|checkSameAccount (Iterable<ExternalId> extIds)
specifier|private
specifier|static
name|Account
operator|.
name|Id
name|checkSameAccount
parameter_list|(
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
block|{
return|return
name|checkSameAccount
argument_list|(
name|extIds
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Checks that all specified external IDs belong to specified account. If no account is specified    * it is checked that all specified external IDs belong to the same account.    *    * @return the ID of the account to which all specified external IDs belong.    */
DECL|method|checkSameAccount ( Iterable<ExternalId> extIds, @Nullable Account.Id accountId)
specifier|public
specifier|static
name|Account
operator|.
name|Id
name|checkSameAccount
parameter_list|(
name|Iterable
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|,
annotation|@
name|Nullable
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
for|for
control|(
name|ExternalId
name|extId
range|:
name|extIds
control|)
block|{
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
name|accountId
operator|=
name|extId
operator|.
name|accountId
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|checkState
argument_list|(
name|accountId
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
argument_list|,
literal|"external id %s belongs to account %s, expected account %s"
argument_list|,
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|extId
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|accountId
return|;
block|}
comment|/**    * Insert or updates an new external ID and sets it in the note map.    *    *<p>If the external ID already exists it is overwritten.    */
DECL|method|upsert ( RevWalk rw, ObjectInserter ins, NoteMap noteMap, ExternalId extId)
specifier|private
specifier|static
name|ExternalId
name|upsert
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|noteId
init|=
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
decl_stmt|;
name|Config
name|c
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
if|if
condition|(
name|noteMap
operator|.
name|contains
argument_list|(
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|raw
init|=
name|readNoteData
argument_list|(
name|rw
argument_list|,
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|new
name|BlobBasedConfig
argument_list|(
literal|null
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid external id config for note %s: %s"
argument_list|,
name|noteId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|extId
operator|.
name|writeToConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|byte
index|[]
name|raw
init|=
name|c
operator|.
name|toText
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|noteData
init|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|raw
argument_list|)
decl_stmt|;
name|noteMap
operator|.
name|set
argument_list|(
name|noteId
argument_list|,
name|noteData
argument_list|)
expr_stmt|;
return|return
name|ExternalId
operator|.
name|create
argument_list|(
name|extId
argument_list|,
name|noteData
argument_list|)
return|;
block|}
comment|/**    * Removes an external ID from the note map.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key, but otherwise doesn't match the specified external ID.    */
DECL|method|remove (RevWalk rw, NoteMap noteMap, ExternalId extId)
specifier|private
specifier|static
name|ExternalId
name|remove
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|noteId
init|=
name|extId
operator|.
name|key
argument_list|()
operator|.
name|sha1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noteMap
operator|.
name|contains
argument_list|(
name|noteId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjectId
name|noteDataId
init|=
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|raw
init|=
name|readNoteData
argument_list|(
name|rw
argument_list|,
name|noteDataId
argument_list|)
decl_stmt|;
name|ExternalId
name|actualExtId
init|=
name|ExternalId
operator|.
name|parse
argument_list|(
name|noteId
operator|.
name|name
argument_list|()
argument_list|,
name|raw
argument_list|,
name|noteDataId
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|extId
operator|.
name|equals
argument_list|(
name|actualExtId
argument_list|)
argument_list|,
literal|"external id %s should be removed, but it's not matching the actual external id %s"
argument_list|,
name|extId
operator|.
name|toString
argument_list|()
argument_list|,
name|actualExtId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|noteMap
operator|.
name|remove
argument_list|(
name|noteId
argument_list|)
expr_stmt|;
return|return
name|actualExtId
return|;
block|}
comment|/**    * Removes an external ID from the note map by external ID key.    *    * @throws IllegalStateException is thrown if an expected account ID is provided and an external    *     ID with the specified key exists, but belongs to another account.    * @return the external ID that was removed, {@code null} if no external ID with the specified key    *     exists    */
DECL|method|remove ( RevWalk rw, NoteMap noteMap, ExternalId.Key extIdKey, Account.Id expectedAccountId)
specifier|private
specifier|static
name|ExternalId
name|remove
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|,
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|,
name|Account
operator|.
name|Id
name|expectedAccountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ObjectId
name|noteId
init|=
name|extIdKey
operator|.
name|sha1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noteMap
operator|.
name|contains
argument_list|(
name|noteId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjectId
name|noteDataId
init|=
name|noteMap
operator|.
name|get
argument_list|(
name|noteId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|raw
init|=
name|readNoteData
argument_list|(
name|rw
argument_list|,
name|noteDataId
argument_list|)
decl_stmt|;
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|parse
argument_list|(
name|noteId
operator|.
name|name
argument_list|()
argument_list|,
name|raw
argument_list|,
name|noteDataId
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedAccountId
operator|!=
literal|null
condition|)
block|{
name|checkState
argument_list|(
name|expectedAccountId
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
argument_list|,
literal|"external id %s should be removed for account %s,"
operator|+
literal|" but external id belongs to account %s"
argument_list|,
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|,
name|expectedAccountId
operator|.
name|get
argument_list|()
argument_list|,
name|extId
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|noteMap
operator|.
name|remove
argument_list|(
name|noteId
argument_list|)
expr_stmt|;
return|return
name|extId
return|;
block|}
DECL|method|checkExternalIdsDontExist (Collection<ExternalId> extIds)
specifier|private
name|void
name|checkExternalIdsDontExist
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|OrmDuplicateKeyException
throws|,
name|IOException
block|{
name|checkExternalIdKeysDontExist
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|from
argument_list|(
name|extIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExternalIdKeysDontExist ( Collection<ExternalId.Key> extIdKeysToAdd, Collection<ExternalId.Key> extIdKeysToDelete)
specifier|private
name|void
name|checkExternalIdKeysDontExist
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeysToAdd
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeysToDelete
parameter_list|)
throws|throws
name|OrmDuplicateKeyException
throws|,
name|IOException
block|{
name|HashSet
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|newKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|extIdKeysToAdd
argument_list|)
decl_stmt|;
name|newKeys
operator|.
name|removeAll
argument_list|(
name|extIdKeysToDelete
argument_list|)
expr_stmt|;
name|checkExternalIdKeysDontExist
argument_list|(
name|newKeys
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExternalIdKeysDontExist (Collection<ExternalId.Key> extIdKeys)
specifier|private
name|void
name|checkExternalIdKeysDontExist
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmDuplicateKeyException
block|{
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
if|if
condition|(
name|noteMap
operator|.
name|contains
argument_list|(
name|extIdKey
operator|.
name|sha1
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OrmDuplicateKeyException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"external id %s already exists"
argument_list|,
name|extIdKey
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkLoaded ()
specifier|private
name|void
name|checkLoaded
parameter_list|()
block|{
name|checkState
argument_list|(
name|noteMap
operator|!=
literal|null
argument_list|,
literal|"External IDs not loaded yet"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|NoteMapUpdate
specifier|private
interface|interface
name|NoteMapUpdate
block|{
DECL|method|execute (RevWalk rw, NoteMap noteMap)
name|void
name|execute
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|NoteMap
name|noteMap
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
function_decl|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|CacheUpdate
specifier|private
interface|interface
name|CacheUpdate
block|{
DECL|method|execute (ExternalIdCacheUpdates cacheUpdates)
name|void
name|execute
parameter_list|(
name|ExternalIdCacheUpdates
name|cacheUpdates
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|ExternalIdCacheUpdates
specifier|private
specifier|static
class|class
name|ExternalIdCacheUpdates
block|{
DECL|field|added
specifier|private
specifier|final
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|removed
specifier|private
specifier|final
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|add (Collection<ExternalId> extIds)
name|ExternalIdCacheUpdates
name|add
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
block|{
name|this
operator|.
name|added
operator|.
name|addAll
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAdded ()
specifier|public
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|getAdded
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|added
argument_list|)
return|;
block|}
DECL|method|remove (Collection<ExternalId> extIds)
name|ExternalIdCacheUpdates
name|remove
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
block|{
name|this
operator|.
name|removed
operator|.
name|addAll
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRemoved ()
specifier|public
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|getRemoved
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|removed
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

