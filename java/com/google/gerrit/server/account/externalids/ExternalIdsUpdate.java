begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account.externalids
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Runnables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Updates externalIds in ReviewDb and NoteDb.  *  *<p>In NoteDb external IDs are stored in the All-Users repository in a Git Notes branch called  * refs/meta/external-ids where the sha1 of the external ID is used as note name. Each note content  * is a git config file that contains an external ID. It has exactly one externalId subsection with  * an accountId and optionally email and password:  *  *<pre>  * [externalId "username:jdoe"]  *   accountId = 1003407  *   email = jdoe@example.com  *   password = bcrypt:4:LCbmSBDivK/hhGVQMfkDpA==:XcWn0pKYSVU/UJgOvhidkEtmqCp6oKB7  *</pre>  *  * For NoteDb each method call results in one commit on refs/meta/external-ids branch.  *  *<p>On updating external IDs this class takes care to evict affected accounts from the account  * cache and thus triggers reindex for them.  */
end_comment

begin_class
DECL|class|ExternalIdsUpdate
specifier|public
class|class
name|ExternalIdsUpdate
block|{
comment|/**    * Factory to create an ExternalIdsUpdate instance for updating external IDs by the Gerrit server.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the external IDs.    */
annotation|@
name|Singleton
DECL|class|Server
specifier|public
specifier|static
class|class
name|Server
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|metaDataUpdateServerFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|Server
argument_list|>
name|metaDataUpdateServerFactory
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
annotation|@
name|Inject
DECL|method|Server ( GitRepositoryManager repoManager, Provider<MetaDataUpdate.Server> metaDataUpdateServerFactory, AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, RetryHelper retryHelper)
specifier|public
name|Server
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|Server
argument_list|>
name|metaDataUpdateServerFactory
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|metaDataUpdateServerFactory
operator|=
name|metaDataUpdateServerFactory
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|ExternalIdsUpdate
name|create
parameter_list|()
block|{
return|return
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
parameter_list|()
lambda|->
name|metaDataUpdateServerFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
argument_list|,
name|accountCache
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|retryHelper
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an ExternalIdsUpdate instance for updating external IDs by the Gerrit server.    *    *<p>Using this class no reindex will be performed for the affected accounts and they will also    * not be evicted from the account cache.    *    *<p>The Gerrit server identity will be used as author and committer for all commits that update    * the external IDs.    */
annotation|@
name|Singleton
DECL|class|ServerNoReindex
specifier|public
specifier|static
class|class
name|ServerNoReindex
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|metaDataUpdateServerFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|Server
argument_list|>
name|metaDataUpdateServerFactory
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
annotation|@
name|Inject
DECL|method|ServerNoReindex ( GitRepositoryManager repoManager, Provider<MetaDataUpdate.Server> metaDataUpdateServerFactory, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, RetryHelper retryHelper)
specifier|public
name|ServerNoReindex
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|Server
argument_list|>
name|metaDataUpdateServerFactory
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|metaDataUpdateServerFactory
operator|=
name|metaDataUpdateServerFactory
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|ExternalIdsUpdate
name|create
parameter_list|()
block|{
return|return
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
parameter_list|()
lambda|->
name|metaDataUpdateServerFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
argument_list|,
literal|null
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|retryHelper
argument_list|)
return|;
block|}
block|}
comment|/**    * Factory to create an ExternalIdsUpdate instance for updating external IDs by the current user.    *    *<p>The identity of the current user will be used as author for all commits that update the    * external IDs. The Gerrit server identity will be used as committer.    */
annotation|@
name|Singleton
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|metaDataUpdateUserFactory
specifier|private
specifier|final
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateUserFactory
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metricMaker
specifier|private
specifier|final
name|MetricMaker
name|metricMaker
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
annotation|@
name|Inject
DECL|method|User ( GitRepositoryManager repoManager, Provider<MetaDataUpdate.User> metaDataUpdateUserFactory, AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, RetryHelper retryHelper)
specifier|public
name|User
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|Provider
argument_list|<
name|MetaDataUpdate
operator|.
name|User
argument_list|>
name|metaDataUpdateUserFactory
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|metaDataUpdateUserFactory
operator|=
name|metaDataUpdateUserFactory
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metricMaker
operator|=
name|metricMaker
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|externalIdCache
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
name|ExternalIdsUpdate
name|create
parameter_list|()
block|{
return|return
operator|new
name|ExternalIdsUpdate
argument_list|(
name|repoManager
argument_list|,
parameter_list|()
lambda|->
name|metaDataUpdateUserFactory
operator|.
name|get
argument_list|()
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
argument_list|,
name|accountCache
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|retryHelper
argument_list|)
return|;
block|}
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|externalIdCache
specifier|private
specifier|final
name|ExternalIdCache
name|externalIdCache
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|afterReadRevision
specifier|private
specifier|final
name|Runnable
name|afterReadRevision
decl_stmt|;
DECL|field|updateCount
specifier|private
specifier|final
name|Counter0
name|updateCount
decl_stmt|;
DECL|method|ExternalIdsUpdate ( GitRepositoryManager repoManager, MetaDataUpdateFactory metaDataUpdateFactory, @Nullable AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, RetryHelper retryHelper)
specifier|private
name|ExternalIdsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|)
block|{
name|this
argument_list|(
name|repoManager
argument_list|,
name|metaDataUpdateFactory
argument_list|,
name|accountCache
argument_list|,
name|allUsersName
argument_list|,
name|metricMaker
argument_list|,
name|externalIds
argument_list|,
name|externalIdCache
argument_list|,
name|retryHelper
argument_list|,
name|Runnables
operator|.
name|doNothing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ExternalIdsUpdate ( GitRepositoryManager repoManager, MetaDataUpdateFactory metaDataUpdateFactory, @Nullable AccountCache accountCache, AllUsersName allUsersName, MetricMaker metricMaker, ExternalIds externalIds, ExternalIdCache externalIdCache, RetryHelper retryHelper, Runnable afterReadRevision)
specifier|public
name|ExternalIdsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|MetricMaker
name|metricMaker
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|ExternalIdCache
name|externalIdCache
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|Runnable
name|afterReadRevision
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|checkNotNull
argument_list|(
name|repoManager
argument_list|,
literal|"repoManager"
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaDataUpdateFactory
operator|=
name|checkNotNull
argument_list|(
name|metaDataUpdateFactory
argument_list|,
literal|"metaDataUpdateFactory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|checkNotNull
argument_list|(
name|allUsersName
argument_list|,
literal|"allUsersName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|checkNotNull
argument_list|(
name|externalIds
argument_list|,
literal|"externalIds"
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIdCache
operator|=
name|checkNotNull
argument_list|(
name|externalIdCache
argument_list|,
literal|"externalIdCache"
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|checkNotNull
argument_list|(
name|retryHelper
argument_list|,
literal|"retryHelper"
argument_list|)
expr_stmt|;
name|this
operator|.
name|afterReadRevision
operator|=
name|checkNotNull
argument_list|(
name|afterReadRevision
argument_list|,
literal|"afterReadRevision"
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateCount
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"notedb/external_id_update_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Total number of external ID updates."
argument_list|)
operator|.
name|setRate
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"updates"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts a new external ID.    *    *<p>If the external ID already exists, the insert fails with {@link OrmDuplicateKeyException}.    */
DECL|method|insert (ExternalId extId)
specifier|public
name|void
name|insert
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts new external IDs.    *    *<p>If any of the external ID already exists, the insert fails with {@link    * OrmDuplicateKeyException}.    */
DECL|method|insert (Collection<ExternalId> extIds)
specifier|public
name|void
name|insert
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|insert
argument_list|(
name|extIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates an external ID.    *    *<p>If the external ID already exists, it is overwritten, otherwise it is inserted.    */
DECL|method|upsert (ExternalId extId)
specifier|public
name|void
name|upsert
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|upsert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts or updates external IDs.    *    *<p>If any of the external IDs already exists, it is overwritten. New external IDs are inserted.    */
DECL|method|upsert (Collection<ExternalId> extIds)
specifier|public
name|void
name|upsert
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|upsert
argument_list|(
name|extIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes an external ID.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key, but otherwise doesn't match the specified external ID.    */
DECL|method|delete (ExternalId extId)
specifier|public
name|void
name|delete
parameter_list|(
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes external IDs.    *    * @throws IllegalStateException is thrown if there is an existing external ID that has the same    *     key as any of the external IDs that should be deleted, but otherwise doesn't match the that    *     external ID.    */
DECL|method|delete (Collection<ExternalId> extIds)
specifier|public
name|void
name|delete
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|extIds
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|delete
argument_list|(
name|extIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete an external ID by key.    *    * @throws IllegalStateException is thrown if the external ID does not belong to the specified    *     account.    */
DECL|method|delete (Account.Id accountId, ExternalId.Key extIdKey)
specifier|public
name|void
name|delete
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|delete
argument_list|(
name|accountId
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|extIdKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete external IDs by external ID key.    *    * @throws IllegalStateException is thrown if any of the external IDs does not belong to the    *     specified account.    */
DECL|method|delete (Account.Id accountId, Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|delete
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|delete
argument_list|(
name|accountId
argument_list|,
name|extIdKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete external IDs by external ID key.    *    *<p>The external IDs are deleted regardless of which account they belong to.    */
DECL|method|deleteByKeys (Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|deleteByKeys
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|deleteByKeys
argument_list|(
name|extIdKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Deletes all external IDs of the specified account. */
DECL|method|deleteAll (Account.Id accountId)
specifier|public
name|void
name|deleteAll
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|delete
argument_list|(
name|externalIds
operator|.
name|byAccount
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs for an account by external ID keys.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID key is specified for deletion and an external ID with the same key is specified to    * be added, the old external ID with that key is deleted first and then the new external ID is    * added (so the external ID for that key is replaced).    *    * @throws IllegalStateException is thrown if any of the specified external IDs does not belong to    *     the specified account.    */
DECL|method|replace ( Account.Id accountId, Collection<ExternalId.Key> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|replace
argument_list|(
name|accountId
argument_list|,
name|toDelete
argument_list|,
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs for an account by external ID keys.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID key is specified for deletion and an external ID with the same key is specified to    * be added, the old external ID with that key is deleted first and then the new external ID is    * added (so the external ID for that key is replaced).    *    *<p>The external IDs are replaced regardless of which account they belong to.    */
DECL|method|replaceByKeys (Collection<ExternalId.Key> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replaceByKeys
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|replaceByKeys
argument_list|(
name|toDelete
argument_list|,
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces an external ID.    *    * @throws IllegalStateException is thrown if the specified external IDs belong to different    *     accounts.    */
DECL|method|replace (ExternalId toDelete, ExternalId toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|ExternalId
name|toDelete
parameter_list|,
name|ExternalId
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|replace
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|toDelete
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replaces external IDs.    *    *<p>Deletion of external IDs is done before adding the new external IDs. This means if an    * external ID is specified for deletion and an external ID with the same key is specified to be    * added, the old external ID with that key is deleted first and then the new external ID is added    * (so the external ID for that key is replaced).    *    * @throws IllegalStateException is thrown if the specified external IDs belong to different    *     accounts.    */
DECL|method|replace (Collection<ExternalId> toDelete, Collection<ExternalId> toAdd)
specifier|public
name|void
name|replace
parameter_list|(
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toDelete
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
argument_list|>
name|toAdd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|updateNoteMap
argument_list|(
name|n
lambda|->
name|n
operator|.
name|replace
argument_list|(
name|toDelete
argument_list|,
name|toAdd
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateNoteMap (ExternalIdUpdater updater)
specifier|private
name|void
name|updateNoteMap
parameter_list|(
name|ExternalIdUpdater
name|updater
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
block|{
name|retryHelper
operator|.
name|execute
argument_list|(
name|ActionType
operator|.
name|ACCOUNT_UPDATE
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|ExternalIdNotes
name|extIdNotes
init|=
operator|new
name|ExternalIdNotes
argument_list|(
name|externalIdCache
argument_list|,
name|accountCache
argument_list|,
name|repo
argument_list|)
operator|.
name|setAfterReadRevision
argument_list|(
name|afterReadRevision
argument_list|)
operator|.
name|load
argument_list|()
decl_stmt|;
name|updater
operator|.
name|update
argument_list|(
name|extIdNotes
argument_list|)
expr_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|()
init|)
block|{
name|extIdNotes
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
name|extIdNotes
operator|.
name|updateCaches
argument_list|()
expr_stmt|;
name|updateCount
operator|.
name|increment
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|ExternalIdUpdater
specifier|private
specifier|static
interface|interface
name|ExternalIdUpdater
block|{
DECL|method|update (ExternalIdNotes extIdsNotes)
name|void
name|update
parameter_list|(
name|ExternalIdNotes
name|extIdsNotes
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmException
function_decl|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|FunctionalInterface
DECL|interface|MetaDataUpdateFactory
specifier|public
specifier|static
interface|interface
name|MetaDataUpdateFactory
block|{
DECL|method|create ()
name|MetaDataUpdate
name|create
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

