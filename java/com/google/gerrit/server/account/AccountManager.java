begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
operator|.
name|SCHEME_USERNAME
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|AccountFieldName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
operator|.
name|AccountUpdater
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|DuplicateExternalIdKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIds
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|auth
operator|.
name|NoSuchUserException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|GroupsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshKeyCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/** Tracks authentication related details for user accounts. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountManager
specifier|public
class|class
name|AccountManager
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|sequences
specifier|private
specifier|final
name|Sequences
name|sequences
decl_stmt|;
DECL|field|accounts
specifier|private
specifier|final
name|Accounts
name|accounts
decl_stmt|;
DECL|field|accountsUpdateProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
decl_stmt|;
DECL|field|byIdCache
specifier|private
specifier|final
name|AccountCache
name|byIdCache
decl_stmt|;
DECL|field|realm
specifier|private
specifier|final
name|Realm
name|realm
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|sshKeyCache
specifier|private
specifier|final
name|SshKeyCache
name|sshKeyCache
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|awaitsFirstAccountCheck
specifier|private
specifier|final
name|AtomicBoolean
name|awaitsFirstAccountCheck
decl_stmt|;
DECL|field|externalIds
specifier|private
specifier|final
name|ExternalIds
name|externalIds
decl_stmt|;
DECL|field|groupsUpdateFactory
specifier|private
specifier|final
name|GroupsUpdate
operator|.
name|Factory
name|groupsUpdateFactory
decl_stmt|;
DECL|field|autoUpdateAccountActiveStatus
specifier|private
specifier|final
name|boolean
name|autoUpdateAccountActiveStatus
decl_stmt|;
DECL|field|setInactiveFlag
specifier|private
specifier|final
name|SetInactiveFlag
name|setInactiveFlag
decl_stmt|;
annotation|@
name|Inject
DECL|method|AccountManager ( Sequences sequences, @GerritServerConfig Config cfg, Accounts accounts, @ServerInitiated Provider<AccountsUpdate> accountsUpdateProvider, AccountCache byIdCache, Realm accountMapper, IdentifiedUser.GenericFactory userFactory, SshKeyCache sshKeyCache, ProjectCache projectCache, ExternalIds externalIds, GroupsUpdate.Factory groupsUpdateFactory, SetInactiveFlag setInactiveFlag)
name|AccountManager
parameter_list|(
name|Sequences
name|sequences
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|Accounts
name|accounts
parameter_list|,
annotation|@
name|ServerInitiated
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
parameter_list|,
name|AccountCache
name|byIdCache
parameter_list|,
name|Realm
name|accountMapper
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|,
name|SshKeyCache
name|sshKeyCache
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|ExternalIds
name|externalIds
parameter_list|,
name|GroupsUpdate
operator|.
name|Factory
name|groupsUpdateFactory
parameter_list|,
name|SetInactiveFlag
name|setInactiveFlag
parameter_list|)
block|{
name|this
operator|.
name|sequences
operator|=
name|sequences
expr_stmt|;
name|this
operator|.
name|accounts
operator|=
name|accounts
expr_stmt|;
name|this
operator|.
name|accountsUpdateProvider
operator|=
name|accountsUpdateProvider
expr_stmt|;
name|this
operator|.
name|byIdCache
operator|=
name|byIdCache
expr_stmt|;
name|this
operator|.
name|realm
operator|=
name|accountMapper
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
name|this
operator|.
name|sshKeyCache
operator|=
name|sshKeyCache
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|awaitsFirstAccountCheck
operator|=
operator|new
name|AtomicBoolean
argument_list|(
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"capability"
argument_list|,
literal|"makeFirstUserAdmin"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalIds
operator|=
name|externalIds
expr_stmt|;
name|this
operator|.
name|groupsUpdateFactory
operator|=
name|groupsUpdateFactory
expr_stmt|;
name|this
operator|.
name|autoUpdateAccountActiveStatus
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|"autoUpdateAccountActiveStatus"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|setInactiveFlag
operator|=
name|setInactiveFlag
expr_stmt|;
block|}
comment|/** @return user identified by this external identity string */
DECL|method|lookup (String externalId)
specifier|public
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|lookup
parameter_list|(
name|String
name|externalId
parameter_list|)
throws|throws
name|AccountException
block|{
try|try
block|{
return|return
name|externalIds
operator|.
name|get
argument_list|(
name|ExternalId
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|externalId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ExternalId
operator|::
name|accountId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Cannot lookup account "
operator|+
name|externalId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authenticate the user, potentially creating a new account if they are new.    *    * @param who identity of the user, with any details we received about them.    * @return the result of authenticating the user.    * @throws AccountException the account does not exist, and cannot be created, or exists, but    *     cannot be located, is unable to be activated or deactivated, or is inactive, or cannot be    *     added to the admin group (only for the first account).    */
DECL|method|authenticate (AuthRequest who)
specifier|public
name|AuthResult
name|authenticate
parameter_list|(
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|AccountException
throws|,
name|IOException
block|{
try|try
block|{
name|who
operator|=
name|realm
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchUserException
name|e
parameter_list|)
block|{
name|deactivateAccountIfItExists
argument_list|(
name|who
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|optionalExtId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|optionalExtId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// New account, automatically create and return.
return|return
name|create
argument_list|(
name|who
argument_list|)
return|;
block|}
name|ExternalId
name|extId
init|=
name|optionalExtId
operator|.
name|get
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|byIdCache
operator|.
name|get
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accountState
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"Authentication with external ID %s failed. Account %s doesn't exist."
argument_list|,
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|extId
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Authentication error, account not found"
argument_list|)
throw|;
block|}
comment|// Account exists
name|Optional
argument_list|<
name|Account
argument_list|>
name|act
init|=
name|updateAccountActiveStatus
argument_list|(
name|who
argument_list|,
name|accountState
operator|.
name|get
argument_list|()
operator|.
name|account
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|act
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// The account was deleted since we checked for it last time. This should never happen
comment|// since we don't support deletion of accounts.
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Authentication error, account not found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|act
operator|.
name|get
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Authentication error, account inactive"
argument_list|)
throw|;
block|}
comment|// return the identity to the caller.
name|update
argument_list|(
name|who
argument_list|,
name|extId
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuthResult
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Authentication error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|deactivateAccountIfItExists (AuthRequest authRequest)
specifier|private
name|void
name|deactivateAccountIfItExists
parameter_list|(
name|AuthRequest
name|authRequest
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shouldUpdateActiveStatus
argument_list|(
name|authRequest
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|extId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|authRequest
operator|.
name|getExternalIdKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
name|setInactiveFlag
operator|.
name|deactivate
argument_list|(
name|extId
operator|.
name|get
argument_list|()
operator|.
name|accountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Unable to deactivate account %s"
argument_list|,
name|authRequest
operator|.
name|getUserName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|" for external ID key "
operator|+
name|authRequest
operator|.
name|getExternalIdKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateAccountActiveStatus (AuthRequest authRequest, Account account)
specifier|private
name|Optional
argument_list|<
name|Account
argument_list|>
name|updateAccountActiveStatus
parameter_list|(
name|AuthRequest
name|authRequest
parameter_list|,
name|Account
name|account
parameter_list|)
throws|throws
name|AccountException
block|{
if|if
condition|(
operator|!
name|shouldUpdateActiveStatus
argument_list|(
name|authRequest
argument_list|)
operator|||
name|authRequest
operator|.
name|isActive
argument_list|()
operator|==
name|account
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|account
argument_list|)
return|;
block|}
if|if
condition|(
name|authRequest
operator|.
name|isActive
argument_list|()
condition|)
block|{
try|try
block|{
name|setInactiveFlag
operator|.
name|activate
argument_list|(
name|account
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Unable to activate account "
operator|+
name|account
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|setInactiveFlag
operator|.
name|deactivate
argument_list|(
name|account
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Unable to deactivate account "
operator|+
name|account
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|byIdCache
operator|.
name|get
argument_list|(
name|account
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|AccountState
operator|::
name|account
argument_list|)
return|;
block|}
DECL|method|shouldUpdateActiveStatus (AuthRequest authRequest)
specifier|private
name|boolean
name|shouldUpdateActiveStatus
parameter_list|(
name|AuthRequest
name|authRequest
parameter_list|)
block|{
return|return
name|autoUpdateAccountActiveStatus
operator|&&
name|authRequest
operator|.
name|authProvidesAccountActiveStatus
argument_list|()
return|;
block|}
DECL|method|update (AuthRequest who, ExternalId extId)
specifier|private
name|void
name|update
parameter_list|(
name|AuthRequest
name|who
parameter_list|,
name|ExternalId
name|extId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|AccountException
block|{
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|extId
operator|.
name|accountId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Consumer
argument_list|<
name|InternalAccountUpdate
operator|.
name|Builder
argument_list|>
argument_list|>
name|accountUpdates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If the email address was modified by the authentication provider,
comment|// update our records to match the changed email.
comment|//
name|String
name|newEmail
init|=
name|who
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
name|String
name|oldEmail
init|=
name|extId
operator|.
name|email
argument_list|()
decl_stmt|;
if|if
condition|(
name|newEmail
operator|!=
literal|null
operator|&&
operator|!
name|newEmail
operator|.
name|equals
argument_list|(
name|oldEmail
argument_list|)
condition|)
block|{
name|ExternalId
name|extIdWithNewEmail
init|=
name|ExternalId
operator|.
name|create
argument_list|(
name|extId
operator|.
name|key
argument_list|()
argument_list|,
name|extId
operator|.
name|accountId
argument_list|()
argument_list|,
name|newEmail
argument_list|,
name|extId
operator|.
name|password
argument_list|()
argument_list|)
decl_stmt|;
name|checkEmailNotUsed
argument_list|(
name|extIdWithNewEmail
argument_list|)
expr_stmt|;
name|accountUpdates
operator|.
name|add
argument_list|(
name|u
lambda|->
name|u
operator|.
name|replaceExternalId
argument_list|(
name|extId
argument_list|,
name|extIdWithNewEmail
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldEmail
operator|!=
literal|null
operator|&&
name|oldEmail
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|preferredEmail
argument_list|()
argument_list|)
condition|)
block|{
name|accountUpdates
operator|.
name|add
argument_list|(
name|u
lambda|->
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|newEmail
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
condition|)
block|{
name|accountUpdates
operator|.
name|add
argument_list|(
name|u
lambda|->
name|u
operator|.
name|setFullName
argument_list|(
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|realm
operator|.
name|allowsEdit
argument_list|(
name|AccountFieldName
operator|.
name|FULL_NAME
argument_list|)
condition|)
block|{
name|accountUpdates
operator|.
name|add
argument_list|(
name|a
lambda|->
name|a
operator|.
name|setFullName
argument_list|(
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Not changing already set display name '%s' to '%s'"
argument_list|,
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|realm
operator|.
name|allowsEdit
argument_list|(
name|AccountFieldName
operator|.
name|USER_NAME
argument_list|)
operator|&&
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Not changing already set username %s to %s"
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Not setting username to %s"
argument_list|,
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|accountUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Update Account on Login"
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|AccountUpdater
operator|.
name|joinConsumers
argument_list|(
name|accountUpdates
argument_list|)
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|StorageException
argument_list|(
literal|"Account "
operator|+
name|user
operator|.
name|getAccountId
argument_list|()
operator|+
literal|" has been deleted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|create (AuthRequest who)
specifier|private
name|AuthResult
name|create
parameter_list|(
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|AccountException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Account
operator|.
name|Id
name|newId
init|=
name|Account
operator|.
name|id
argument_list|(
name|sequences
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Assigning new Id %s to account"
argument_list|,
name|newId
argument_list|)
expr_stmt|;
name|ExternalId
name|extId
init|=
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|,
name|newId
argument_list|,
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Created external Id: %s"
argument_list|,
name|extId
argument_list|)
expr_stmt|;
name|checkEmailNotUsed
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|ExternalId
name|userNameExtId
init|=
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|?
name|createUsername
argument_list|(
name|newId
argument_list|,
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|boolean
name|isFirstAccount
init|=
name|awaitsFirstAccountCheck
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
operator|&&
operator|!
name|accounts
operator|.
name|hasAnyAccount
argument_list|()
decl_stmt|;
name|AccountState
name|accountState
decl_stmt|;
try|try
block|{
name|accountState
operator|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|insert
argument_list|(
literal|"Create Account on First Login"
argument_list|,
name|newId
argument_list|,
name|u
lambda|->
block|{
name|u
operator|.
name|setFullName
argument_list|(
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
operator|.
name|setPreferredEmail
argument_list|(
name|extId
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|addExternalId
argument_list|(
name|extId
argument_list|)
expr_stmt|;
if|if
condition|(
name|userNameExtId
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|addExternalId
argument_list|(
name|userNameExtId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DuplicateExternalIdKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Cannot assign external ID \""
operator|+
name|e
operator|.
name|getDuplicateKey
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"\" to account "
operator|+
name|newId
operator|+
literal|"; external ID already in use."
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// If adding the account failed, it may be that it actually was the
comment|// first account. So we reset the 'check for first account'-guard, as
comment|// otherwise the first account would not get administration permissions.
name|awaitsFirstAccountCheck
operator|.
name|set
argument_list|(
name|isFirstAccount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userNameExtId
operator|!=
literal|null
condition|)
block|{
name|who
operator|.
name|getUserName
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|sshKeyCache
operator|::
name|evict
argument_list|)
expr_stmt|;
block|}
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|newId
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFirstAccount
condition|)
block|{
comment|// This is the first user account on our site. Assume this user
comment|// is going to be the site's administrator and just make them that
comment|// to bootstrap the authentication database.
comment|//
name|Permission
name|admin
init|=
name|projectCache
operator|.
name|getAllProjects
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getAccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
operator|.
name|getPermission
argument_list|(
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|adminGroupUuid
init|=
name|admin
operator|.
name|getRules
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|addGroupMember
argument_list|(
name|adminGroupUuid
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|realm
operator|.
name|onCreateAccount
argument_list|(
name|who
argument_list|,
name|accountState
operator|.
name|account
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuthResult
argument_list|(
name|newId
argument_list|,
name|extId
operator|.
name|key
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createUsername (Account.Id accountId, String username)
specifier|private
name|ExternalId
name|createUsername
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|AccountUserNameException
block|{
name|checkArgument
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ExternalId
operator|.
name|isValidUsername
argument_list|(
name|username
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccountUserNameException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot assign user name \"%s\" to account %s; name does not conform."
argument_list|,
name|username
argument_list|,
name|accountId
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|ExternalId
operator|.
name|create
argument_list|(
name|SCHEME_USERNAME
argument_list|,
name|username
argument_list|,
name|accountId
argument_list|)
return|;
block|}
DECL|method|checkEmailNotUsed (ExternalId extIdToBeCreated)
specifier|private
name|void
name|checkEmailNotUsed
parameter_list|(
name|ExternalId
name|extIdToBeCreated
parameter_list|)
throws|throws
name|IOException
throws|,
name|AccountException
block|{
name|String
name|email
init|=
name|extIdToBeCreated
operator|.
name|email
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|existingExtIdsWithEmail
init|=
name|externalIds
operator|.
name|byEmail
argument_list|(
name|email
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingExtIdsWithEmail
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Email %s is already assigned to account %s;"
operator|+
literal|" cannot create external ID %s with the same email for account %s."
argument_list|,
name|email
argument_list|,
name|existingExtIdsWithEmail
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|extIdToBeCreated
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|extIdToBeCreated
operator|.
name|accountId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Email '"
operator|+
name|email
operator|+
literal|"' in use by another account"
argument_list|)
throw|;
block|}
DECL|method|addGroupMember (AccountGroup.UUID groupUuid, IdentifiedUser user)
specifier|private
name|void
name|addGroupMember
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|AccountException
block|{
comment|// The user initiated this request by logging in. -> Attribute all modifications to that user.
name|GroupsUpdate
name|groupsUpdate
init|=
name|groupsUpdateFactory
operator|.
name|create
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|memberIds
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|memberIds
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|groupsUpdate
operator|.
name|updateGroup
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchGroupException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group %s not found"
argument_list|,
name|groupUuid
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Link another authentication identity to an existing account.    *    * @param to account to link the identity onto.    * @param who the additional identity.    * @return the result of linking the identity to the user.    * @throws AccountException the identity belongs to a different account, or it cannot be linked at    *     this time.    */
DECL|method|link (Account.Id to, AuthRequest who)
specifier|public
name|AuthResult
name|link
parameter_list|(
name|Account
operator|.
name|Id
name|to
parameter_list|,
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|AccountException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|optionalExtId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalExtId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ExternalId
name|extId
init|=
name|optionalExtId
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|extId
operator|.
name|accountId
argument_list|()
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Identity '"
operator|+
name|extId
operator|.
name|key
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"' in use by another account"
argument_list|)
throw|;
block|}
name|update
argument_list|(
name|who
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExternalId
name|newExtId
init|=
name|ExternalId
operator|.
name|createWithEmail
argument_list|(
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|,
name|to
argument_list|,
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
decl_stmt|;
name|checkEmailNotUsed
argument_list|(
name|newExtId
argument_list|)
expr_stmt|;
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Link External ID"
argument_list|,
name|to
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
name|u
operator|.
name|addExternalId
argument_list|(
name|newExtId
argument_list|)
expr_stmt|;
if|if
condition|(
name|who
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|a
operator|.
name|account
argument_list|()
operator|.
name|preferredEmail
argument_list|()
operator|==
literal|null
condition|)
block|{
name|u
operator|.
name|setPreferredEmail
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AuthResult
argument_list|(
name|to
argument_list|,
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Update the link to another unique authentication identity to an existing account.    *    *<p>Existing external identities with the same scheme will be removed and replaced with the new    * one.    *    * @param to account to link the identity onto.    * @param who the additional identity.    * @return the result of linking the identity to the user.    * @throws AccountException the identity belongs to a different account, or it cannot be linked at    *     this time.    */
DECL|method|updateLink (Account.Id to, AuthRequest who)
specifier|public
name|AuthResult
name|updateLink
parameter_list|(
name|Account
operator|.
name|Id
name|to
parameter_list|,
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|AccountException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Delete External IDs on Update Link"
argument_list|,
name|to
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
name|Set
argument_list|<
name|ExternalId
argument_list|>
name|filteredExtIdsByScheme
init|=
name|a
operator|.
name|externalIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|key
argument_list|()
operator|.
name|isScheme
argument_list|(
name|who
operator|.
name|getExternalIdKey
argument_list|()
operator|.
name|scheme
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredExtIdsByScheme
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|filteredExtIdsByScheme
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
operator|!
name|filteredExtIdsByScheme
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|e
lambda|->
name|e
operator|.
name|key
argument_list|()
operator|.
name|equals
argument_list|(
name|who
operator|.
name|getExternalIdKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
block|{
name|u
operator|.
name|deleteExternalIds
argument_list|(
name|filteredExtIdsByScheme
argument_list|)
block|;               }
block|}
block|)
class|;
end_class

begin_return
return|return
name|link
argument_list|(
name|to
argument_list|,
name|who
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**    * Unlink an external identity from an existing account.    *    * @param from account to unlink the external identity from    * @param extIdKey the key of the external ID that should be deleted    * @throws AccountException the identity belongs to a different account, or the identity was not    *     found    */
end_comment

begin_function
DECL|method|unlink (Account.Id from, ExternalId.Key extIdKey)
unit|public
name|void
name|unlink
parameter_list|(
name|Account
operator|.
name|Id
name|from
parameter_list|,
name|ExternalId
operator|.
name|Key
name|extIdKey
parameter_list|)
throws|throws
name|AccountException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|unlink
argument_list|(
name|from
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|extIdKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Unlink an external identities from an existing account.    *    * @param from account to unlink the external identity from    * @param extIdKeys the keys of the external IDs that should be deleted    * @throws AccountException any of the identity belongs to a different account, or any of the    *     identity was not found    */
end_comment

begin_function
DECL|method|unlink (Account.Id from, Collection<ExternalId.Key> extIdKeys)
specifier|public
name|void
name|unlink
parameter_list|(
name|Account
operator|.
name|Id
name|from
parameter_list|,
name|Collection
argument_list|<
name|ExternalId
operator|.
name|Key
argument_list|>
name|extIdKeys
parameter_list|)
throws|throws
name|AccountException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|extIdKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|ExternalId
argument_list|>
name|extIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|extIdKeys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalId
operator|.
name|Key
name|extIdKey
range|:
name|extIdKeys
control|)
block|{
name|Optional
argument_list|<
name|ExternalId
argument_list|>
name|extId
init|=
name|externalIds
operator|.
name|get
argument_list|(
name|extIdKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|extId
operator|.
name|get
argument_list|()
operator|.
name|accountId
argument_list|()
operator|.
name|equals
argument_list|(
name|from
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Identity '"
operator|+
name|extIdKey
operator|.
name|get
argument_list|()
operator|+
literal|"' in use by another account"
argument_list|)
throw|;
block|}
name|extIds
operator|.
name|add
argument_list|(
name|extId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Identity '"
operator|+
name|extIdKey
operator|.
name|get
argument_list|()
operator|+
literal|"' not found"
argument_list|)
throw|;
block|}
block|}
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Unlink External ID"
operator|+
operator|(
name|extIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
argument_list|,
name|from
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
name|u
operator|.
name|deleteExternalIds
argument_list|(
name|extIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|account
argument_list|()
operator|.
name|preferredEmail
argument_list|()
operator|!=
literal|null
operator|&&
name|extIds
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|e
lambda|->
name|a
operator|.
name|account
argument_list|()
operator|.
name|preferredEmail
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|email
argument_list|()
argument_list|)
argument_list|)
argument_list|)
block|{
name|u
operator|.
name|setPreferredEmail
argument_list|(
literal|null
argument_list|)
block|;               }
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

unit|} }
end_unit

