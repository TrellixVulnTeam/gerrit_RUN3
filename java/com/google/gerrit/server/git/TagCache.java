begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|serialize
operator|.
name|StringCacheSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|TagCache
specifier|public
class|class
name|TagCache
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"git_tags"
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|persist
argument_list|(
name|CACHE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|TagSetHolder
operator|.
name|class
argument_list|)
operator|.
name|version
argument_list|(
literal|1
argument_list|)
operator|.
name|keySerializer
argument_list|(
name|StringCacheSerializer
operator|.
name|INSTANCE
argument_list|)
operator|.
name|valueSerializer
argument_list|(
name|TagSetHolder
operator|.
name|Serializer
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|TagCache
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|String
argument_list|,
name|TagSetHolder
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Inject
DECL|method|TagCache (@amedCACHE_NAME) Cache<String, TagSetHolder> cache)
name|TagCache
parameter_list|(
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
name|Cache
argument_list|<
name|String
argument_list|,
name|TagSetHolder
argument_list|>
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
comment|/**    * Advise the cache that a reference fast-forwarded.    *    *<p>This operation is not necessary, the cache will automatically detect changes made to    * references and update itself on demand. However, this method may allow the cache to update more    * quickly and reuse the caller's computation of the fast-forward status of a branch.    *    * @param name project the branch is contained in.    * @param refName the branch name.    * @param oldValue the old value, before the fast-forward. The cache will only update itself if it    *     is still using this old value.    * @param newValue the current value, after the fast-forward.    */
DECL|method|updateFastForward ( Project.NameKey name, String refName, ObjectId oldValue, ObjectId newValue)
specifier|public
name|void
name|updateFastForward
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|,
name|String
name|refName
parameter_list|,
name|ObjectId
name|oldValue
parameter_list|,
name|ObjectId
name|newValue
parameter_list|)
block|{
comment|// Be really paranoid and null check everything. This method should
comment|// never fail with an exception. Some of these references can be null
comment|// (e.g. not all projects are cached, or the cache is not current).
comment|//
name|TagSetHolder
name|holder
init|=
name|cache
operator|.
name|getIfPresent
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
name|TagSet
name|tags
init|=
name|holder
operator|.
name|getTagSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|tags
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tags
operator|.
name|updateFastForward
argument_list|(
name|refName
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|get (Project.NameKey name)
specifier|public
name|TagSetHolder
name|get
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|,
parameter_list|()
lambda|->
operator|new
name|TagSetHolder
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|put (Project.NameKey name, TagSetHolder tags)
name|void
name|put
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|,
name|TagSetHolder
name|tags
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

