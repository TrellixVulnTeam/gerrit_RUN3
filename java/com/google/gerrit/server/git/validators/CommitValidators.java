begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.validators
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|CHANGE_ID_PATTERN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CHANGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CONFIG
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|config
operator|.
name|ConsistencyCheckInfo
operator|.
name|ConsistencyProblemInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
operator|.
name|NameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|externalids
operator|.
name|ExternalIdsConsistencyChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BanCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
operator|.
name|ForRef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|RefPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|HostKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CommitValidators
specifier|public
class|class
name|CommitValidators
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitValidators
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NEW_PATCHSET_PATTERN
specifier|public
specifier|static
specifier|final
name|Pattern
name|NEW_PATCHSET_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|REFS_CHANGES
operator|+
literal|"(?:[0-9][0-9]/)?([1-9][0-9]*)(?:/[1-9][0-9]*)?$"
argument_list|)
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|gerritIdent
specifier|private
specifier|final
name|PersonIdent
name|gerritIdent
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|pluginValidators
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|pluginValidators
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|externalIdsConsistencyChecker
specifier|private
specifier|final
name|ExternalIdsConsistencyChecker
name|externalIdsConsistencyChecker
decl_stmt|;
DECL|field|accountValidator
specifier|private
specifier|final
name|AccountValidator
name|accountValidator
decl_stmt|;
DECL|field|installCommitMsgHookCommand
specifier|private
specifier|final
name|String
name|installCommitMsgHookCommand
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory ( @erritPersonIdent PersonIdent gerritIdent, @CanonicalWebUrl @Nullable String canonicalWebUrl, @GerritServerConfig Config cfg, DynamicSet<CommitValidationListener> pluginValidators, GitRepositoryManager repoManager, AllUsersName allUsers, AllProjectsName allProjects, ExternalIdsConsistencyChecker externalIdsConsistencyChecker, AccountValidator accountValidator, ProjectCache projectCache)
name|Factory
parameter_list|(
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|gerritIdent
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
name|String
name|canonicalWebUrl
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|pluginValidators
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|,
name|ExternalIdsConsistencyChecker
name|externalIdsConsistencyChecker
parameter_list|,
name|AccountValidator
name|accountValidator
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|gerritIdent
operator|=
name|gerritIdent
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|pluginValidators
operator|=
name|pluginValidators
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|externalIdsConsistencyChecker
operator|=
name|externalIdsConsistencyChecker
expr_stmt|;
name|this
operator|.
name|accountValidator
operator|=
name|accountValidator
expr_stmt|;
name|this
operator|.
name|installCommitMsgHookCommand
operator|=
name|cfg
operator|!=
literal|null
condition|?
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"installCommitMsgHookCommand"
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
DECL|method|forReceiveCommits ( PermissionBackend.ForRef perm, Branch.NameKey branch, IdentifiedUser user, SshInfo sshInfo, Repository repo, RevWalk rw, @Nullable Change change)
specifier|public
name|CommitValidators
name|forReceiveCommits
parameter_list|(
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|,
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
annotation|@
name|Nullable
name|Change
name|change
parameter_list|)
throws|throws
name|IOException
block|{
name|NoteMap
name|rejectCommits
init|=
name|BanCommit
operator|.
name|loadRejectCommitsMap
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|)
decl_stmt|;
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|CommitValidators
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|UploadMergesPermissionValidator
argument_list|(
name|perm
argument_list|)
argument_list|,
operator|new
name|ProjectStateValidationListener
argument_list|(
name|projectState
argument_list|)
argument_list|,
operator|new
name|AmendedGerritMergeCommitValidationListener
argument_list|(
name|perm
argument_list|,
name|gerritIdent
argument_list|)
argument_list|,
operator|new
name|AuthorUploaderValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|,
operator|new
name|CommitterUploaderValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|,
operator|new
name|SignedOffByValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|projectState
argument_list|)
argument_list|,
operator|new
name|ChangeIdValidator
argument_list|(
name|projectState
argument_list|,
name|user
argument_list|,
name|canonicalWebUrl
argument_list|,
name|installCommitMsgHookCommand
argument_list|,
name|sshInfo
argument_list|,
name|change
argument_list|)
argument_list|,
operator|new
name|ConfigValidator
argument_list|(
name|branch
argument_list|,
name|user
argument_list|,
name|rw
argument_list|,
name|allUsers
argument_list|,
name|allProjects
argument_list|)
argument_list|,
operator|new
name|BannedCommitsValidator
argument_list|(
name|rejectCommits
argument_list|)
argument_list|,
operator|new
name|PluginCommitValidationListener
argument_list|(
name|pluginValidators
argument_list|)
argument_list|,
operator|new
name|ExternalIdUpdateListener
argument_list|(
name|allUsers
argument_list|,
name|externalIdsConsistencyChecker
argument_list|)
argument_list|,
operator|new
name|AccountCommitValidator
argument_list|(
name|repoManager
argument_list|,
name|allUsers
argument_list|,
name|accountValidator
argument_list|)
argument_list|,
operator|new
name|GroupCommitValidator
argument_list|(
name|allUsers
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|forGerritCommits ( ForRef perm, NameKey branch, IdentifiedUser user, SshInfo sshInfo, RevWalk rw, @Nullable Change change)
specifier|public
name|CommitValidators
name|forGerritCommits
parameter_list|(
name|ForRef
name|perm
parameter_list|,
name|NameKey
name|branch
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
annotation|@
name|Nullable
name|Change
name|change
parameter_list|)
throws|throws
name|IOException
block|{
name|ProjectState
name|projectState
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|CommitValidators
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|UploadMergesPermissionValidator
argument_list|(
name|perm
argument_list|)
argument_list|,
operator|new
name|ProjectStateValidationListener
argument_list|(
name|projectState
argument_list|)
argument_list|,
operator|new
name|AmendedGerritMergeCommitValidationListener
argument_list|(
name|perm
argument_list|,
name|gerritIdent
argument_list|)
argument_list|,
operator|new
name|AuthorUploaderValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|,
operator|new
name|SignedOffByValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ChangeIdValidator
argument_list|(
name|projectState
argument_list|,
name|user
argument_list|,
name|canonicalWebUrl
argument_list|,
name|installCommitMsgHookCommand
argument_list|,
name|sshInfo
argument_list|,
name|change
argument_list|)
argument_list|,
operator|new
name|ConfigValidator
argument_list|(
name|branch
argument_list|,
name|user
argument_list|,
name|rw
argument_list|,
name|allUsers
argument_list|,
name|allProjects
argument_list|)
argument_list|,
operator|new
name|PluginCommitValidationListener
argument_list|(
name|pluginValidators
argument_list|)
argument_list|,
operator|new
name|ExternalIdUpdateListener
argument_list|(
name|allUsers
argument_list|,
name|externalIdsConsistencyChecker
argument_list|)
argument_list|,
operator|new
name|AccountCommitValidator
argument_list|(
name|repoManager
argument_list|,
name|allUsers
argument_list|,
name|accountValidator
argument_list|)
argument_list|,
operator|new
name|GroupCommitValidator
argument_list|(
name|allUsers
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|forMergedCommits ( Project.NameKey project, PermissionBackend.ForRef perm, IdentifiedUser user)
specifier|public
name|CommitValidators
name|forMergedCommits
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Generally only include validators that are based on permissions of the
comment|// user creating a change for a merged commit; generally exclude
comment|// validators that would require amending the change in order to correct.
comment|//
comment|// Examples:
comment|//  - Change-Id and Signed-off-by can't be added to an already-merged
comment|//    commit.
comment|//  - If the commit is banned, we can't ban it here. In fact, creating a
comment|//    review of a previously merged and recently-banned commit is a use
comment|//    case for post-commit code review: so reviewers have a place to
comment|//    discuss what to do about it.
comment|//  - Plugin validators may do things like require certain commit message
comment|//    formats, so we play it safe and exclude them.
return|return
operator|new
name|CommitValidators
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|UploadMergesPermissionValidator
argument_list|(
name|perm
argument_list|)
argument_list|,
operator|new
name|ProjectStateValidationListener
argument_list|(
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
argument_list|)
argument_list|,
operator|new
name|AuthorUploaderValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|,
operator|new
name|CommitterUploaderValidator
argument_list|(
name|user
argument_list|,
name|perm
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|field|validators
specifier|private
specifier|final
name|List
argument_list|<
name|CommitValidationListener
argument_list|>
name|validators
decl_stmt|;
DECL|method|CommitValidators (List<CommitValidationListener> validators)
name|CommitValidators
parameter_list|(
name|List
argument_list|<
name|CommitValidationListener
argument_list|>
name|validators
parameter_list|)
block|{
name|this
operator|.
name|validators
operator|=
name|validators
expr_stmt|;
block|}
DECL|method|validate (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|validate
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|CommitValidationListener
name|commitValidator
range|:
name|validators
control|)
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|commitValidator
operator|.
name|onCommitReceived
argument_list|(
name|receiveEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitValidationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CommitValidationException occurred: {}"
argument_list|,
name|e
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Keep the old messages (and their order) in case of an exception
name|messages
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|messages
argument_list|)
throw|;
block|}
return|return
name|messages
return|;
block|}
DECL|class|ChangeIdValidator
specifier|public
specifier|static
class|class
name|ChangeIdValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|CHANGE_ID_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CHANGE_ID_PREFIX
init|=
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|":"
decl_stmt|;
DECL|field|MISSING_CHANGE_ID_MSG
specifier|private
specifier|static
specifier|final
name|String
name|MISSING_CHANGE_ID_MSG
init|=
literal|"[%s] missing "
operator|+
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|" in commit message footer"
decl_stmt|;
DECL|field|MISSING_SUBJECT_MSG
specifier|private
specifier|static
specifier|final
name|String
name|MISSING_SUBJECT_MSG
init|=
literal|"[%s] missing subject; "
operator|+
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|" must be in commit message footer"
decl_stmt|;
DECL|field|MULTIPLE_CHANGE_ID_MSG
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPLE_CHANGE_ID_MSG
init|=
literal|"[%s] multiple "
operator|+
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|" lines in commit message footer"
decl_stmt|;
DECL|field|INVALID_CHANGE_ID_MSG
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_CHANGE_ID_MSG
init|=
literal|"[%s] invalid "
operator|+
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|" line format in commit message footer"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CHANGE_ID_MISMATCH_MSG
specifier|public
specifier|static
specifier|final
name|String
name|CHANGE_ID_MISMATCH_MSG
init|=
literal|"[%s] "
operator|+
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|" in commit message footer does not match"
operator|+
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
operator|+
literal|" of target change"
decl_stmt|;
DECL|field|CHANGE_ID
specifier|private
specifier|static
specifier|final
name|Pattern
name|CHANGE_ID
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|CHANGE_ID_PATTERN
argument_list|)
decl_stmt|;
DECL|field|projectState
specifier|private
specifier|final
name|ProjectState
name|projectState
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|field|installCommitMsgHookCommand
specifier|private
specifier|final
name|String
name|installCommitMsgHookCommand
decl_stmt|;
DECL|field|sshInfo
specifier|private
specifier|final
name|SshInfo
name|sshInfo
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|change
specifier|private
specifier|final
name|Change
name|change
decl_stmt|;
DECL|method|ChangeIdValidator ( ProjectState projectState, IdentifiedUser user, String canonicalWebUrl, String installCommitMsgHookCommand, SshInfo sshInfo, Change change)
specifier|public
name|ChangeIdValidator
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|,
name|String
name|canonicalWebUrl
parameter_list|,
name|String
name|installCommitMsgHookCommand
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|this
operator|.
name|projectState
operator|=
name|projectState
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
name|this
operator|.
name|installCommitMsgHookCommand
operator|=
name|installCommitMsgHookCommand
expr_stmt|;
name|this
operator|.
name|sshInfo
operator|=
name|sshInfo
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|change
operator|=
name|change
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
operator|!
name|shouldValidateChangeId
argument_list|(
name|receiveEvent
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|RevCommit
name|commit
init|=
name|receiveEvent
operator|.
name|commit
decl_stmt|;
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
argument_list|)
decl_stmt|;
name|String
name|sha1
init|=
name|commit
operator|.
name|abbreviate
argument_list|(
name|RevId
operator|.
name|ABBREV_LEN
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|shortMsg
init|=
name|commit
operator|.
name|getShortMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|shortMsg
operator|.
name|startsWith
argument_list|(
name|CHANGE_ID_PREFIX
argument_list|)
operator|&&
name|CHANGE_ID
operator|.
name|matcher
argument_list|(
name|shortMsg
operator|.
name|substring
argument_list|(
name|CHANGE_ID_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|MISSING_SUBJECT_MSG
argument_list|,
name|sha1
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
if|if
condition|(
name|projectState
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|REQUIRE_CHANGE_ID
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|MISSING_CHANGE_ID_MSG
argument_list|,
name|sha1
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|getMissingChangeIdErrorMsg
argument_list|(
name|errMsg
argument_list|,
name|commit
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|errMsg
argument_list|,
name|messages
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|idList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|MULTIPLE_CHANGE_ID_MSG
argument_list|,
name|sha1
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|errMsg
argument_list|,
name|messages
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|v
init|=
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Reject Change-Ids with wrong format and invalid placeholder ID from
comment|// Egit (I0000000000000000000000000000000000000000).
if|if
condition|(
operator|!
name|CHANGE_ID
operator|.
name|matcher
argument_list|(
name|v
argument_list|)
operator|.
name|matches
argument_list|()
operator|||
name|v
operator|.
name|matches
argument_list|(
literal|"^I00*$"
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|INVALID_CHANGE_ID_MSG
argument_list|,
name|sha1
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|getMissingChangeIdErrorMsg
argument_list|(
name|errMsg
argument_list|,
name|receiveEvent
operator|.
name|commit
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|errMsg
argument_list|,
name|messages
argument_list|)
throw|;
block|}
if|if
condition|(
name|change
operator|!=
literal|null
operator|&&
operator|!
name|v
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|CHANGE_ID_MISMATCH_MSG
argument_list|,
name|sha1
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|method|shouldValidateChangeId (CommitReceivedEvent event)
specifier|private
specifier|static
name|boolean
name|shouldValidateChangeId
parameter_list|(
name|CommitReceivedEvent
name|event
parameter_list|)
block|{
return|return
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|event
operator|.
name|command
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|NEW_PATCHSET_PATTERN
operator|.
name|matcher
argument_list|(
name|event
operator|.
name|command
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
DECL|method|getMissingChangeIdErrorMsg (String errMsg, RevCommit c)
specifier|private
name|CommitValidationMessage
name|getMissingChangeIdErrorMsg
parameter_list|(
name|String
name|errMsg
parameter_list|,
name|RevCommit
name|c
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR: "
argument_list|)
operator|.
name|append
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getFullMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|CHANGE_ID_PREFIX
argument_list|)
condition|)
block|{
name|String
name|lastLine
init|=
name|Iterables
operator|.
name|getLast
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|split
argument_list|(
name|c
operator|.
name|getFullMessage
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lastLine
operator|.
name|contains
argument_list|(
name|CHANGE_ID_PREFIX
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Hint: A potential "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Change-Id was found, but it was not in the "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"footer (last paragraph) of the commit message."
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Hint: To automatically insert "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FooterConstants
operator|.
name|CHANGE_ID
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", install the hook:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCommitMessageHookInstallationHint
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"And then amend the commit:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  git commit --amend\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommitValidationMessage
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getCommitMessageHookInstallationHint ()
specifier|private
name|String
name|getCommitMessageHookInstallationHint
parameter_list|()
block|{
if|if
condition|(
name|installCommitMsgHookCommand
operator|!=
literal|null
condition|)
block|{
return|return
name|installCommitMsgHookCommand
return|;
block|}
specifier|final
name|List
argument_list|<
name|HostKey
argument_list|>
name|hostKeys
init|=
name|sshInfo
operator|.
name|getHostKeys
argument_list|()
decl_stmt|;
comment|// If there are no SSH keys, the commit-msg hook must be installed via
comment|// HTTP(S)
if|if
condition|(
name|hostKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|p
init|=
literal|"${gitdir}/hooks/commit-msg"
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"  gitdir=$(git rev-parse --git-dir); curl -o %s %stools/hooks/commit-msg ; chmod +x %s"
argument_list|,
name|p
argument_list|,
name|canonicalWebUrl
argument_list|,
name|p
argument_list|)
return|;
block|}
comment|// SSH keys exist, so the hook can be installed with scp.
name|String
name|sshHost
decl_stmt|;
name|int
name|sshPort
decl_stmt|;
name|String
name|host
init|=
name|hostKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|host
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
if|if
condition|(
name|host
operator|.
name|startsWith
argument_list|(
literal|"*:"
argument_list|)
condition|)
block|{
name|sshHost
operator|=
name|getGerritHost
argument_list|(
name|canonicalWebUrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sshHost
operator|=
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|sshPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|host
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sshHost
operator|=
name|host
expr_stmt|;
name|sshPort
operator|=
literal|22
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"  gitdir=$(git rev-parse --git-dir); scp -p -P %d %s@%s:hooks/commit-msg ${gitdir}/hooks/"
argument_list|,
name|sshPort
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"<USERNAME>"
argument_list|)
argument_list|,
name|sshHost
argument_list|)
return|;
block|}
block|}
comment|/** If this is the special project configuration branch, validate the config. */
DECL|class|ConfigValidator
specifier|public
specifier|static
class|class
name|ConfigValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|branch
specifier|private
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|rw
specifier|private
specifier|final
name|RevWalk
name|rw
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|method|ConfigValidator ( Branch.NameKey branch, IdentifiedUser user, RevWalk rw, AllUsersName allUsers, AllProjectsName allProjects)
specifier|public
name|ConfigValidator
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|AllProjectsName
name|allProjects
parameter_list|)
block|{
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|rw
operator|=
name|rw
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjects
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|receiveEvent
operator|.
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|rw
argument_list|,
name|receiveEvent
operator|.
name|command
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getValidationErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid project configuration:"
argument_list|,
name|messages
argument_list|)
expr_stmt|;
for|for
control|(
name|ValidationError
name|err
range|:
name|cfg
operator|.
name|getValidationErrors
argument_list|()
control|)
block|{
name|addError
argument_list|(
literal|"  "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
literal|"invalid project configuration"
argument_list|)
throw|;
block|}
if|if
condition|(
name|allUsers
operator|.
name|equals
argument_list|(
name|receiveEvent
operator|.
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|allProjects
operator|.
name|equals
argument_list|(
name|cfg
operator|.
name|getProject
argument_list|()
operator|.
name|getParent
argument_list|(
name|allProjects
argument_list|)
argument_list|)
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid project configuration:"
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|addError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  %s must inherit from %s"
argument_list|,
name|allUsers
operator|.
name|get
argument_list|()
argument_list|,
name|allProjects
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|messages
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
literal|"invalid project configuration"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"User "
operator|+
name|user
operator|.
name|getLoggableName
argument_list|()
operator|+
literal|" tried to push an invalid project configuration "
operator|+
name|receiveEvent
operator|.
name|command
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" for project "
operator|+
name|receiveEvent
operator|.
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"invalid project configuration"
argument_list|,
name|messages
argument_list|)
throw|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/** Require permission to upload merge commits. */
DECL|class|UploadMergesPermissionValidator
specifier|public
specifier|static
class|class
name|UploadMergesPermissionValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|perm
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForRef
name|perm
decl_stmt|;
DECL|method|UploadMergesPermissionValidator (PermissionBackend.ForRef perm)
specifier|public
name|UploadMergesPermissionValidator
parameter_list|(
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|)
block|{
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
name|receiveEvent
operator|.
name|commit
operator|.
name|getParentCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|MERGE
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"you are not allowed to upload merges"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot check MERGE"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"internal auth error"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Execute commit validation plug-ins */
DECL|class|PluginCommitValidationListener
specifier|public
specifier|static
class|class
name|PluginCommitValidationListener
implements|implements
name|CommitValidationListener
block|{
DECL|field|commitValidationListeners
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|commitValidationListeners
decl_stmt|;
DECL|method|PluginCommitValidationListener ( final DynamicSet<CommitValidationListener> commitValidationListeners)
specifier|public
name|PluginCommitValidationListener
parameter_list|(
specifier|final
name|DynamicSet
argument_list|<
name|CommitValidationListener
argument_list|>
name|commitValidationListeners
parameter_list|)
block|{
name|this
operator|.
name|commitValidationListeners
operator|=
name|commitValidationListeners
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CommitValidationListener
name|validator
range|:
name|commitValidationListeners
control|)
block|{
try|try
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|validator
operator|.
name|onCommitReceived
argument_list|(
name|receiveEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitValidationException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|messages
argument_list|)
throw|;
block|}
block|}
return|return
name|messages
return|;
block|}
block|}
DECL|class|SignedOffByValidator
specifier|public
specifier|static
class|class
name|SignedOffByValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForRef
name|perm
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|ProjectState
name|state
decl_stmt|;
DECL|method|SignedOffByValidator ( IdentifiedUser user, PermissionBackend.ForRef perm, ProjectState state)
specifier|public
name|SignedOffByValidator
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|,
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|,
name|ProjectState
name|state
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|USE_SIGNED_OFF_BY
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|RevCommit
name|commit
init|=
name|receiveEvent
operator|.
name|commit
decl_stmt|;
name|PersonIdent
name|committer
init|=
name|commit
operator|.
name|getCommitterIdent
argument_list|()
decl_stmt|;
name|PersonIdent
name|author
init|=
name|commit
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|boolean
name|sboAuthor
init|=
literal|false
decl_stmt|;
name|boolean
name|sboCommitter
init|=
literal|false
decl_stmt|;
name|boolean
name|sboMe
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FooterLine
name|footer
range|:
name|commit
operator|.
name|getFooterLines
argument_list|()
control|)
block|{
if|if
condition|(
name|footer
operator|.
name|matches
argument_list|(
name|FooterKey
operator|.
name|SIGNED_OFF_BY
argument_list|)
condition|)
block|{
name|String
name|e
init|=
name|footer
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|sboAuthor
operator||=
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sboCommitter
operator||=
name|committer
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sboMe
operator||=
name|user
operator|.
name|hasEmailAddress
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|sboAuthor
operator|&&
operator|!
name|sboCommitter
operator|&&
operator|!
name|sboMe
condition|)
block|{
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|FORGE_COMMITTER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|denied
parameter_list|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"not Signed-off-by author/committer/uploader in commit message footer"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot check FORGE_COMMITTER"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"internal auth error"
argument_list|)
throw|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/** Require that author matches the uploader. */
DECL|class|AuthorUploaderValidator
specifier|public
specifier|static
class|class
name|AuthorUploaderValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForRef
name|perm
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|method|AuthorUploaderValidator ( IdentifiedUser user, PermissionBackend.ForRef perm, String canonicalWebUrl)
specifier|public
name|AuthorUploaderValidator
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|,
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|,
name|String
name|canonicalWebUrl
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
name|PersonIdent
name|author
init|=
name|receiveEvent
operator|.
name|commit
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|hasEmailAddress
argument_list|(
name|author
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|FORGE_AUTHOR
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"invalid author"
argument_list|,
name|invalidEmail
argument_list|(
name|receiveEvent
operator|.
name|commit
argument_list|,
literal|"author"
argument_list|,
name|author
argument_list|,
name|user
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot check FORGE_AUTHOR"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"internal auth error"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Require that committer matches the uploader. */
DECL|class|CommitterUploaderValidator
specifier|public
specifier|static
class|class
name|CommitterUploaderValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForRef
name|perm
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
DECL|method|CommitterUploaderValidator ( IdentifiedUser user, PermissionBackend.ForRef perm, String canonicalWebUrl)
specifier|public
name|CommitterUploaderValidator
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|,
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|,
name|String
name|canonicalWebUrl
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
name|PersonIdent
name|committer
init|=
name|receiveEvent
operator|.
name|commit
operator|.
name|getCommitterIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|hasEmailAddress
argument_list|(
name|committer
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
try|try
block|{
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|FORGE_COMMITTER
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"invalid committer"
argument_list|,
name|invalidEmail
argument_list|(
name|receiveEvent
operator|.
name|commit
argument_list|,
literal|"committer"
argument_list|,
name|committer
argument_list|,
name|user
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot check FORGE_COMMITTER"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"internal auth error"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Don't allow the user to amend a merge created by Gerrit Code Review. This seems to happen all    * too often, due to users not paying any attention to what they are doing.    */
DECL|class|AmendedGerritMergeCommitValidationListener
specifier|public
specifier|static
class|class
name|AmendedGerritMergeCommitValidationListener
implements|implements
name|CommitValidationListener
block|{
DECL|field|perm
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForRef
name|perm
decl_stmt|;
DECL|field|gerritIdent
specifier|private
specifier|final
name|PersonIdent
name|gerritIdent
decl_stmt|;
DECL|method|AmendedGerritMergeCommitValidationListener ( PermissionBackend.ForRef perm, PersonIdent gerritIdent)
specifier|public
name|AmendedGerritMergeCommitValidationListener
parameter_list|(
name|PermissionBackend
operator|.
name|ForRef
name|perm
parameter_list|,
name|PersonIdent
name|gerritIdent
parameter_list|)
block|{
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|gerritIdent
operator|=
name|gerritIdent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
name|PersonIdent
name|author
init|=
name|receiveEvent
operator|.
name|commit
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|receiveEvent
operator|.
name|commit
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
operator|&&
name|author
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|gerritIdent
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|author
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|gerritIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Stop authors from amending the merge commits that Gerrit itself creates.
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|FORGE_SERVER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|denied
parameter_list|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"pushing merge commit %s by %s requires '%s' permission"
argument_list|,
name|receiveEvent
operator|.
name|commit
operator|.
name|getId
argument_list|()
argument_list|,
name|gerritIdent
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|RefPermission
operator|.
name|FORGE_SERVER
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"cannot check FORGE_SERVER"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"internal auth error"
argument_list|)
throw|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/** Reject banned commits. */
DECL|class|BannedCommitsValidator
specifier|public
specifier|static
class|class
name|BannedCommitsValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|rejectCommits
specifier|private
specifier|final
name|NoteMap
name|rejectCommits
decl_stmt|;
DECL|method|BannedCommitsValidator (NoteMap rejectCommits)
specifier|public
name|BannedCommitsValidator
parameter_list|(
name|NoteMap
name|rejectCommits
parameter_list|)
block|{
name|this
operator|.
name|rejectCommits
operator|=
name|rejectCommits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
try|try
block|{
if|if
condition|(
name|rejectCommits
operator|.
name|contains
argument_list|(
name|receiveEvent
operator|.
name|commit
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"contains banned commit "
operator|+
name|receiveEvent
operator|.
name|commit
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|m
init|=
literal|"error checking banned commits"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Validates updates to refs/meta/external-ids. */
DECL|class|ExternalIdUpdateListener
specifier|public
specifier|static
class|class
name|ExternalIdUpdateListener
implements|implements
name|CommitValidationListener
block|{
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|externalIdsConsistencyChecker
specifier|private
specifier|final
name|ExternalIdsConsistencyChecker
name|externalIdsConsistencyChecker
decl_stmt|;
DECL|method|ExternalIdUpdateListener ( AllUsersName allUsers, ExternalIdsConsistencyChecker externalIdsConsistencyChecker)
specifier|public
name|ExternalIdUpdateListener
parameter_list|(
name|AllUsersName
name|allUsers
parameter_list|,
name|ExternalIdsConsistencyChecker
name|externalIdsConsistencyChecker
parameter_list|)
block|{
name|this
operator|.
name|externalIdsConsistencyChecker
operator|=
name|externalIdsConsistencyChecker
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
name|allUsers
operator|.
name|equals
argument_list|(
name|receiveEvent
operator|.
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|&&
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
operator|.
name|equals
argument_list|(
name|receiveEvent
operator|.
name|refName
argument_list|)
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|ConsistencyProblemInfo
argument_list|>
name|problems
init|=
name|externalIdsConsistencyChecker
operator|.
name|check
argument_list|(
name|receiveEvent
operator|.
name|commit
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|msgs
init|=
name|problems
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|new
name|CommitValidationMessage
argument_list|(
name|p
operator|.
name|message
argument_list|,
name|p
operator|.
name|status
operator|==
name|ConsistencyProblemInfo
operator|.
name|Status
operator|.
name|ERROR
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|msgs
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|ValidationMessage
operator|::
name|isError
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"invalid external IDs"
argument_list|,
name|msgs
argument_list|)
throw|;
block|}
return|return
name|msgs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|String
name|m
init|=
literal|"error validating external IDs"
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|class|AccountCommitValidator
specifier|public
specifier|static
class|class
name|AccountCommitValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|accountValidator
specifier|private
specifier|final
name|AccountValidator
name|accountValidator
decl_stmt|;
DECL|method|AccountCommitValidator ( GitRepositoryManager repoManager, AllUsersName allUsers, AccountValidator accountValidator)
specifier|public
name|AccountCommitValidator
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|AccountValidator
name|accountValidator
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|accountValidator
operator|=
name|accountValidator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
operator|!
name|allUsers
operator|.
name|equals
argument_list|(
name|receiveEvent
operator|.
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|receiveEvent
operator|.
name|command
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
argument_list|)
condition|)
block|{
comment|// no validation on push for review, will be checked on submit by
comment|// MergeValidators.AccountMergeValidator
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
name|Account
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|receiveEvent
operator|.
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountId
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|errorMessages
init|=
name|accountValidator
operator|.
name|validate
argument_list|(
name|accountId
argument_list|,
name|repo
argument_list|,
name|receiveEvent
operator|.
name|revWalk
argument_list|,
name|receiveEvent
operator|.
name|command
operator|.
name|getOldId
argument_list|()
argument_list|,
name|receiveEvent
operator|.
name|commit
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errorMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"invalid account configuration"
argument_list|,
name|errorMessages
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|m
lambda|->
operator|new
name|CommitValidationMessage
argument_list|(
name|m
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|m
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Validating update for account %s failed"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitValidationException
argument_list|(
name|m
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/** Rejects updates to group branches. */
DECL|class|GroupCommitValidator
specifier|public
specifier|static
class|class
name|GroupCommitValidator
implements|implements
name|CommitValidationListener
block|{
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|method|GroupCommitValidator (AllUsersName allUsers)
specifier|public
name|GroupCommitValidator
parameter_list|(
name|AllUsersName
name|allUsers
parameter_list|)
block|{
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
comment|// Groups are stored inside the 'All-Users' repository.
if|if
condition|(
operator|!
name|allUsers
operator|.
name|equals
argument_list|(
name|receiveEvent
operator|.
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|receiveEvent
operator|.
name|command
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|MagicBranch
operator|.
name|NEW_CHANGE
argument_list|)
condition|)
block|{
comment|// no validation on push for review, will be checked on submit by
comment|// MergeValidators.GroupMergeValidator
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|RefNames
operator|.
name|isGroupRef
argument_list|(
name|receiveEvent
operator|.
name|command
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"group update not allowed"
argument_list|)
throw|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/** Rejects updates to projects that don't allow writes. */
DECL|class|ProjectStateValidationListener
specifier|public
specifier|static
class|class
name|ProjectStateValidationListener
implements|implements
name|CommitValidationListener
block|{
DECL|field|projectState
specifier|private
specifier|final
name|ProjectState
name|projectState
decl_stmt|;
DECL|method|ProjectStateValidationListener (ProjectState projectState)
specifier|public
name|ProjectStateValidationListener
parameter_list|(
name|ProjectState
name|projectState
parameter_list|)
block|{
name|this
operator|.
name|projectState
operator|=
name|projectState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCommitReceived (CommitReceivedEvent receiveEvent)
specifier|public
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|onCommitReceived
parameter_list|(
name|CommitReceivedEvent
name|receiveEvent
parameter_list|)
throws|throws
name|CommitValidationException
block|{
if|if
condition|(
name|projectState
operator|.
name|statePermitsWrite
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
throw|throw
operator|new
name|CommitValidationException
argument_list|(
literal|"project state does not permit write"
argument_list|)
throw|;
block|}
block|}
DECL|method|invalidEmail ( RevCommit c, String type, PersonIdent who, IdentifiedUser currentUser, String canonicalWebUrl)
specifier|private
specifier|static
name|CommitValidationMessage
name|invalidEmail
parameter_list|(
name|RevCommit
name|c
parameter_list|,
name|String
name|type
parameter_list|,
name|PersonIdent
name|who
parameter_list|,
name|IdentifiedUser
name|currentUser
parameter_list|,
name|String
name|canonicalWebUrl
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  In commit "
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  "
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|" email address "
argument_list|)
operator|.
name|append
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  does not match your user account and you have no 'forge "
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|"' permission.\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  You have not registered any email addresses.\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  The following addresses are currently registered:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|address
range|:
name|currentUser
operator|.
name|getEmailAddresses
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:    "
argument_list|)
operator|.
name|append
argument_list|(
name|address
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  To register an email address, please visit:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR:  "
argument_list|)
operator|.
name|append
argument_list|(
name|canonicalWebUrl
argument_list|)
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|PageLinks
operator|.
name|SETTINGS_CONTACT
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommitValidationMessage
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get the Gerrit hostname.    *    * @return the hostname from the canonical URL if it is configured, otherwise whatever the OS says    *     the hostname is.    */
DECL|method|getGerritHost (String canonicalWebUrl)
specifier|private
specifier|static
name|String
name|getGerritHost
parameter_list|(
name|String
name|canonicalWebUrl
parameter_list|)
block|{
if|if
condition|(
name|canonicalWebUrl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|canonicalWebUrl
argument_list|)
operator|.
name|getHost
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ignored
parameter_list|)
block|{       }
block|}
return|return
name|SystemReader
operator|.
name|getInstance
argument_list|()
operator|.
name|getHostname
argument_list|()
return|;
block|}
DECL|method|addError (String error, List<CommitValidationMessage> messages)
specifier|private
specifier|static
name|void
name|addError
parameter_list|(
name|String
name|error
parameter_list|,
name|List
argument_list|<
name|CommitValidationMessage
argument_list|>
name|messages
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|CommitValidationMessage
argument_list|(
name|error
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

