begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommonConverters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|ChangeIdUtil
import|;
end_import

begin_comment
comment|/** Static utilities for working with {@link RevCommit}s. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|CommitUtil
specifier|public
class|class
name|CommitUtil
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|CommitUtil ( GitRepositoryManager repoManager, @GerritPersonIdent Provider<PersonIdent> serverIdent)
name|CommitUtil
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
block|}
DECL|method|toCommitInfo (RevCommit commit)
specifier|public
specifier|static
name|CommitInfo
name|toCommitInfo
parameter_list|(
name|RevCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toCommitInfo
argument_list|(
name|commit
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|toCommitInfo (RevCommit commit, @Nullable RevWalk walk)
specifier|public
specifier|static
name|CommitInfo
name|toCommitInfo
parameter_list|(
name|RevCommit
name|commit
parameter_list|,
annotation|@
name|Nullable
name|RevWalk
name|walk
parameter_list|)
throws|throws
name|IOException
block|{
name|CommitInfo
name|info
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|commit
operator|=
name|commit
operator|.
name|getName
argument_list|()
expr_stmt|;
name|info
operator|.
name|author
operator|=
name|CommonConverters
operator|.
name|toGitPerson
argument_list|(
name|commit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|committer
operator|=
name|CommonConverters
operator|.
name|toGitPerson
argument_list|(
name|commit
operator|.
name|getCommitterIdent
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|subject
operator|=
name|commit
operator|.
name|getShortMessage
argument_list|()
expr_stmt|;
name|info
operator|.
name|message
operator|=
name|commit
operator|.
name|getFullMessage
argument_list|()
expr_stmt|;
name|info
operator|.
name|parents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|commit
operator|.
name|getParentCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commit
operator|.
name|getParentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RevCommit
name|p
init|=
name|walk
operator|==
literal|null
condition|?
name|commit
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
else|:
name|walk
operator|.
name|parseCommit
argument_list|(
name|commit
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|CommitInfo
name|parentInfo
init|=
operator|new
name|CommitInfo
argument_list|()
decl_stmt|;
name|parentInfo
operator|.
name|commit
operator|=
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
name|parentInfo
operator|.
name|subject
operator|=
name|p
operator|.
name|getShortMessage
argument_list|()
expr_stmt|;
name|info
operator|.
name|parents
operator|.
name|add
argument_list|(
name|parentInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
comment|/**    * Allows creating a revert commit.    *    * @param message Commit message for the revert commit.    * @param notes ChangeNotes of the change being reverted.    * @param user Current User performing the revert.    * @return ObjectId that represents the newly created commit.    * @throws ResourceConflictException Can't revert the initial commit.    * @throws IOException Thrown in case of I/O errors.    */
DECL|method|createRevertCommit (String message, ChangeNotes notes, CurrentUser user)
specifier|public
name|ObjectId
name|createRevertCommit
parameter_list|(
name|String
name|message
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|IOException
block|{
name|message
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Project
operator|.
name|NameKey
name|project
init|=
name|notes
operator|.
name|getProjectName
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|git
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|ObjectInserter
name|oi
operator|=
name|git
operator|.
name|newObjectInserter
argument_list|()
init|;
name|ObjectReader
name|reader
operator|=
name|oi
operator|.
name|newReader
argument_list|()
init|;
name|RevWalk
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
return|return
name|createRevertCommit
argument_list|(
name|message
argument_list|,
name|notes
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|oi
argument_list|,
name|revWalk
argument_list|)
return|;
block|}
block|}
comment|/**    * @param message Commit message for the revert commit.    * @param notes ChangeNotes of the change being reverted.    * @param user Current User performing the revert.    * @param generatedChangeId The changeId for the commit message, can be null since it is not    *     needed for commits, only for changes.    * @param ts Timestamp of creation for the commit.    * @param oi ObjectInserter for inserting the newly created commit.    * @param revWalk Used for parsing the original commit.    * @return ObjectId that represents the newly created commit.    * @throws ResourceConflictException Can't revert the initial commit.    * @throws IOException Thrown in case of I/O errors.    */
DECL|method|createRevertCommit ( String message, ChangeNotes notes, CurrentUser user, @Nullable ObjectId generatedChangeId, Timestamp ts, ObjectInserter oi, RevWalk revWalk)
specifier|public
name|ObjectId
name|createRevertCommit
parameter_list|(
name|String
name|message
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
annotation|@
name|Nullable
name|ObjectId
name|generatedChangeId
parameter_list|,
name|Timestamp
name|ts
parameter_list|,
name|ObjectInserter
name|oi
parameter_list|,
name|RevWalk
name|revWalk
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|IOException
block|{
name|PatchSet
name|patch
init|=
name|notes
operator|.
name|getCurrentPatchSet
argument_list|()
decl_stmt|;
name|RevCommit
name|commitToRevert
init|=
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|patch
operator|.
name|commitId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitToRevert
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"Cannot revert initial commit"
argument_list|)
throw|;
block|}
name|PersonIdent
name|committerIdent
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
name|PersonIdent
name|authorIdent
init|=
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|newCommitterIdent
argument_list|(
name|ts
argument_list|,
name|committerIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
decl_stmt|;
name|RevCommit
name|parentToCommitToRevert
init|=
name|commitToRevert
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|revWalk
operator|.
name|parseHeaders
argument_list|(
name|parentToCommitToRevert
argument_list|)
expr_stmt|;
name|CommitBuilder
name|revertCommitBuilder
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|revertCommitBuilder
operator|.
name|addParentId
argument_list|(
name|commitToRevert
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setTreeId
argument_list|(
name|parentToCommitToRevert
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|revertCommitBuilder
operator|.
name|setCommitter
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
name|Change
name|changeToRevert
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
name|changeToRevert
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|.
name|length
argument_list|()
operator|>
literal|63
condition|)
block|{
name|subject
operator|=
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|)
operator|+
literal|"..."
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|message
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|ChangeMessages
operator|.
name|get
argument_list|()
operator|.
name|revertChangeDefaultMessage
argument_list|,
name|subject
argument_list|,
name|patch
operator|.
name|commitId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|generatedChangeId
operator|!=
literal|null
condition|)
block|{
name|revertCommitBuilder
operator|.
name|setMessage
argument_list|(
name|ChangeIdUtil
operator|.
name|insertId
argument_list|(
name|message
argument_list|,
name|generatedChangeId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|revertCommitBuilder
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

