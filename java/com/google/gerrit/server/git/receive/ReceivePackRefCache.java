begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_comment
comment|/**  * Simple cache for accessing refs by name, prefix or {@link ObjectId}. Intended to be used when  * processing a {@code git push}.  *  *<p>This class is not thread safe.  */
end_comment

begin_interface
DECL|interface|ReceivePackRefCache
specifier|public
interface|interface
name|ReceivePackRefCache
block|{
comment|/**    * Returns an instance that delegates all calls to the provided {@link RefDatabase}. To be used in    * tests or when the ref database is fast with forward (name to {@link ObjectId}) and inverse    * ({@code ObjectId} to name) lookups.    */
DECL|method|noCache (RefDatabase delegate)
specifier|static
name|ReceivePackRefCache
name|noCache
parameter_list|(
name|RefDatabase
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|NoCache
argument_list|(
name|delegate
argument_list|)
return|;
block|}
comment|/**    * Returns an instance that answers calls based on refs previously advertised and captured in    * {@link AllRefsWatcher}. Speeds up inverse lookups by building a {@code Map<ObjectId,    * List<Ref>>} and a {@code Map<Change.Id, List<Ref>>}.    *    *<p>This implementation speeds up lookups when the ref database does not support inverse ({@code    * ObjectId} to name) lookups.    */
DECL|method|withAdvertisedRefs (Supplier<Map<String, Ref>> allRefsSupplier)
specifier|static
name|ReceivePackRefCache
name|withAdvertisedRefs
parameter_list|(
name|Supplier
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
argument_list|>
name|allRefsSupplier
parameter_list|)
block|{
return|return
operator|new
name|WithAdvertisedRefs
argument_list|(
name|allRefsSupplier
argument_list|)
return|;
block|}
comment|/** Returns a list of refs whose name starts with {@code prefix} that point to {@code id}. */
DECL|method|tipsFromObjectId (ObjectId id, @Nullable String prefix)
name|ImmutableList
argument_list|<
name|Ref
argument_list|>
name|tipsFromObjectId
parameter_list|(
name|ObjectId
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns all refs whose name starts with {@code prefix}. */
DECL|method|byPrefix (String prefix)
name|ImmutableList
argument_list|<
name|Ref
argument_list|>
name|byPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns a ref whose name matches {@code ref} or {@code null} if such a ref does not exist. */
annotation|@
name|Nullable
DECL|method|exactRef (String ref)
name|Ref
name|exactRef
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|class|NoCache
class|class
name|NoCache
implements|implements
name|ReceivePackRefCache
block|{
DECL|field|delegate
specifier|private
specifier|final
name|RefDatabase
name|delegate
decl_stmt|;
DECL|method|NoCache (RefDatabase delegate)
specifier|private
name|NoCache
parameter_list|(
name|RefDatabase
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tipsFromObjectId (ObjectId id, @Nullable String prefix)
specifier|public
name|ImmutableList
argument_list|<
name|Ref
argument_list|>
name|tipsFromObjectId
parameter_list|(
name|ObjectId
name|id
parameter_list|,
annotation|@
name|Nullable
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getTipsWithSha1
argument_list|(
name|id
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|prefix
operator|==
literal|null
operator|||
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|byPrefix (String prefix)
specifier|public
name|ImmutableList
argument_list|<
name|Ref
argument_list|>
name|byPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getRefsByPrefix
argument_list|(
name|prefix
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|exactRef (String name)
specifier|public
name|Ref
name|exactRef
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|exactRef
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|WithAdvertisedRefs
class|class
name|WithAdvertisedRefs
implements|implements
name|ReceivePackRefCache
block|{
comment|/** We estimate that a change has an average of 4 patch sets plus the meta ref. */
DECL|field|ESTIMATED_NUMBER_OF_REFS_PER_CHANGE
specifier|private
specifier|static
specifier|final
name|int
name|ESTIMATED_NUMBER_OF_REFS_PER_CHANGE
init|=
literal|5
decl_stmt|;
DECL|field|allRefsSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
argument_list|>
name|allRefsSupplier
decl_stmt|;
comment|// Collections lazily populated during processing.
DECL|field|allRefs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
decl_stmt|;
comment|/** Contains only patch set refs. */
DECL|field|refsByChange
specifier|private
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|refsByChange
decl_stmt|;
comment|/** Contains all refs. */
DECL|field|refsByObjectId
specifier|private
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|refsByObjectId
decl_stmt|;
DECL|method|WithAdvertisedRefs (Supplier<Map<String, Ref>> allRefsSupplier)
specifier|private
name|WithAdvertisedRefs
parameter_list|(
name|Supplier
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
argument_list|>
name|allRefsSupplier
parameter_list|)
block|{
name|this
operator|.
name|allRefsSupplier
operator|=
name|allRefsSupplier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tipsFromObjectId (ObjectId id, String prefix)
specifier|public
name|ImmutableList
argument_list|<
name|Ref
argument_list|>
name|tipsFromObjectId
parameter_list|(
name|ObjectId
name|id
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|lazilyInitRefMaps
argument_list|()
expr_stmt|;
return|return
name|refsByObjectId
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|prefix
operator|==
literal|null
operator|||
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|byPrefix (String prefix)
specifier|public
name|ImmutableList
argument_list|<
name|Ref
argument_list|>
name|byPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|lazilyInitRefMaps
argument_list|()
expr_stmt|;
if|if
condition|(
name|RefNames
operator|.
name|isRefsChanges
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|Change
operator|.
name|Id
name|cId
init|=
name|Change
operator|.
name|Id
operator|.
name|fromRefPart
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cId
operator|!=
literal|null
condition|)
block|{
return|return
name|refsByChange
operator|.
name|get
argument_list|(
name|cId
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|allRefs
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|exactRef (String name)
specifier|public
name|Ref
name|exactRef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|allRefs
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|allRefs ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
parameter_list|()
block|{
if|if
condition|(
name|allRefs
operator|==
literal|null
condition|)
block|{
name|allRefs
operator|=
name|allRefsSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|allRefs
return|;
block|}
DECL|method|lazilyInitRefMaps ()
specifier|private
name|void
name|lazilyInitRefMaps
parameter_list|()
block|{
if|if
condition|(
name|refsByChange
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|refsByObjectId
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|refsByChange
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|allRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|/
name|ESTIMATED_NUMBER_OF_REFS_PER_CHANGE
argument_list|)
operator|.
name|arrayListValues
argument_list|(
name|ESTIMATED_NUMBER_OF_REFS_PER_CHANGE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|allRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ObjectId
name|objectId
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectId
operator|!=
literal|null
condition|)
block|{
name|refsByObjectId
operator|.
name|put
argument_list|(
name|objectId
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeId
operator|!=
literal|null
condition|)
block|{
name|refsByChange
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_interface

end_unit

