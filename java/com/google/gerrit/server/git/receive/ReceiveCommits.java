begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
operator|.
name|CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CHANGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|isConfigRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|HashtagsUtil
operator|.
name|cleanupHashtag
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|UNKNOWN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveConstants
operator|.
name|COMMAND_REJECTION_MESSAGE_FOOTER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveConstants
operator|.
name|ONLY_CHANGE_OWNER_OR_PROJECT_OWNER_CAN_MODIFY_WIP
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveConstants
operator|.
name|PUSH_OPTION_SKIP_VALIDATION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|ReceiveConstants
operator|.
name|SAME_CHANGE_ID_IN_MULTIPLE_CHANGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
operator|.
name|NEW_PATCHSET_PATTERN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|getRecipientsFromFooters
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparingInt
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_HEADS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|NOT_ATTEMPTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_MISSING_OBJECT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
operator|.
name|REJECTED_OTHER_REASON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelTypes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|HashtagsInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectConfigEntryType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CreateGroupPermissionSyncer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|Sequences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ServerInitiated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountsUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeInserter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|SetHashtagsOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|PluginConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ProjectConfigEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEdit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|ChangeEditUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|CommitReceivedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BanCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ChangeReportFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GroupCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergedByPushOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ReceivePackInitializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|TagCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidationMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|CommitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|RefOperationValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|RefOperationValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|ValidationMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
operator|.
name|MailRecipients
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchSetInfoFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|GlobalPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ProjectPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|RefPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|CreateRefControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeOpRepoManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|SubmoduleException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|SubmoduleOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoOnlyOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestScopePropagator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
operator|.
name|CmdLineParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|filter
operator|.
name|RevFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_comment
comment|/**  * Receives change upload using the Git receive-pack protocol.  *  *<p>Conceptually, most use of Gerrit is a push of some commits to refs/for/BRANCH. However, the  * receive-pack protocol that this is based on allows multiple ref updates to be processed at once.  */
end_comment

begin_class
DECL|class|ReceiveCommits
class|class
name|ReceiveCommits
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|enum|ReceiveError
specifier|private
enum|enum
name|ReceiveError
block|{
DECL|enumConstant|CONFIG_UPDATE
name|CONFIG_UPDATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"Configuration changes can only be pushed by project owners\n"
operator|+
literal|"who also have 'Push' rights on "
operator|+
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
block|,
DECL|enumConstant|UPDATE
name|UPDATE
argument_list|(
literal|"You are not allowed to perform this operation.\n"
operator|+
literal|"To push into this reference you need 'Push' rights."
argument_list|)
block|,
DECL|enumConstant|DELETE
name|DELETE
argument_list|(
literal|"You need 'Delete Reference' rights or 'Push' rights with the \n"
operator|+
literal|"'Force Push' flag set to delete references."
argument_list|)
block|,
DECL|enumConstant|DELETE_CHANGES
name|DELETE_CHANGES
argument_list|(
literal|"Cannot delete from '"
operator|+
name|REFS_CHANGES
operator|+
literal|"'"
argument_list|)
block|,
DECL|enumConstant|CODE_REVIEW
name|CODE_REVIEW
argument_list|(
literal|"You need 'Push' rights to upload code review requests.\n"
operator|+
literal|"Verify that you are pushing to the right branch."
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|ReceiveError (String value)
name|ReceiveError
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|get ()
name|String
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create ( ProjectState projectState, IdentifiedUser user, ReceivePack receivePack, AllRefsWatcher allRefsWatcher, SetMultimap<ReviewerStateInternal, Account.Id> extraReviewers, MessageSender messageSender)
name|ReceiveCommits
name|create
parameter_list|(
name|ProjectState
name|projectState
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|,
name|ReceivePack
name|receivePack
parameter_list|,
name|AllRefsWatcher
name|allRefsWatcher
parameter_list|,
name|SetMultimap
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|extraReviewers
parameter_list|,
name|MessageSender
name|messageSender
parameter_list|)
function_decl|;
block|}
DECL|class|ReceivePackMessageSender
specifier|private
class|class
name|ReceivePackMessageSender
implements|implements
name|MessageSender
block|{
annotation|@
name|Override
DECL|method|sendMessage (String what)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|receivePack
operator|.
name|sendMessage
argument_list|(
name|what
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendError (String what)
specifier|public
name|void
name|sendError
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|receivePack
operator|.
name|sendError
argument_list|(
name|what
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendBytes (byte[] what)
specifier|public
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|)
block|{
name|sendBytes
argument_list|(
name|what
argument_list|,
literal|0
argument_list|,
name|what
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendBytes (byte[] what, int off, int len)
specifier|public
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|what
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
try|try
block|{
name|receivePack
operator|.
name|getMessageOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|what
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore write failures (matching JGit behavior).
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
try|try
block|{
name|receivePack
operator|.
name|getMessageOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore write failures (matching JGit behavior).
block|}
block|}
block|}
DECL|field|INSERT_EXCEPTION
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|Exception
argument_list|,
name|RestApiException
argument_list|>
name|INSERT_EXCEPTION
init|=
operator|new
name|Function
argument_list|<
name|Exception
argument_list|,
name|RestApiException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RestApiException
name|apply
parameter_list|(
name|Exception
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|RestApiException
condition|)
block|{
return|return
operator|(
name|RestApiException
operator|)
name|input
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|input
operator|instanceof
name|ExecutionException
operator|)
operator|&&
operator|(
name|input
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RestApiException
operator|)
condition|)
block|{
return|return
operator|(
name|RestApiException
operator|)
name|input
operator|.
name|getCause
argument_list|()
return|;
block|}
return|return
operator|new
name|RestApiException
argument_list|(
literal|"Error inserting change/patchset"
argument_list|,
name|input
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// ReceiveCommits has a lot of fields, sorry. Here and in the constructor they are split up
comment|// somewhat, and kept sorted lexicographically within sections, except where later assignments
comment|// depend on previous ones.
comment|// Injected fields.
DECL|field|accountResolver
specifier|private
specifier|final
name|AccountResolver
name|accountResolver
decl_stmt|;
DECL|field|accountsUpdateProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
decl_stmt|;
DECL|field|allProjectsName
specifier|private
specifier|final
name|AllProjectsName
name|allProjectsName
decl_stmt|;
DECL|field|batchUpdateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
decl_stmt|;
DECL|field|editUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|editUtil
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|changeInserterFactory
specifier|private
specifier|final
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
decl_stmt|;
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|changeFormatter
specifier|private
specifier|final
name|ChangeReportFormatter
name|changeFormatter
decl_stmt|;
DECL|field|optionParserFactory
specifier|private
specifier|final
name|CmdLineParser
operator|.
name|Factory
name|optionParserFactory
decl_stmt|;
DECL|field|commitValidatorsFactory
specifier|private
specifier|final
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
decl_stmt|;
DECL|field|createGroupPermissionSyncer
specifier|private
specifier|final
name|CreateGroupPermissionSyncer
name|createGroupPermissionSyncer
decl_stmt|;
DECL|field|createRefControl
specifier|private
specifier|final
name|CreateRefControl
name|createRefControl
decl_stmt|;
DECL|field|pluginConfigEntries
specifier|private
specifier|final
name|DynamicMap
argument_list|<
name|ProjectConfigEntry
argument_list|>
name|pluginConfigEntries
decl_stmt|;
DECL|field|initializers
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|ReceivePackInitializer
argument_list|>
name|initializers
decl_stmt|;
DECL|field|mergedByPushOpFactory
specifier|private
specifier|final
name|MergedByPushOp
operator|.
name|Factory
name|mergedByPushOpFactory
decl_stmt|;
DECL|field|notesMigration
specifier|private
specifier|final
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|patchSetInfoFactory
specifier|private
specifier|final
name|PatchSetInfoFactory
name|patchSetInfoFactory
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|mergeOpProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeOp
argument_list|>
name|mergeOpProvider
decl_stmt|;
DECL|field|ormProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|ormProvider
decl_stmt|;
DECL|field|receiveConfig
specifier|private
specifier|final
name|ReceiveConfig
name|receiveConfig
decl_stmt|;
DECL|field|refValidatorsFactory
specifier|private
specifier|final
name|RefOperationValidators
operator|.
name|Factory
name|refValidatorsFactory
decl_stmt|;
DECL|field|replaceOpFactory
specifier|private
specifier|final
name|ReplaceOp
operator|.
name|Factory
name|replaceOpFactory
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|requestScopePropagator
specifier|private
specifier|final
name|RequestScopePropagator
name|requestScopePropagator
decl_stmt|;
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|seq
specifier|private
specifier|final
name|Sequences
name|seq
decl_stmt|;
DECL|field|hashtagsFactory
specifier|private
specifier|final
name|SetHashtagsOp
operator|.
name|Factory
name|hashtagsFactory
decl_stmt|;
DECL|field|sshInfo
specifier|private
specifier|final
name|SshInfo
name|sshInfo
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|tagCache
specifier|private
specifier|final
name|TagCache
name|tagCache
decl_stmt|;
DECL|field|canonicalWebUrl
specifier|private
specifier|final
name|String
name|canonicalWebUrl
decl_stmt|;
comment|// Assisted injected fields.
DECL|field|allRefsWatcher
specifier|private
specifier|final
name|AllRefsWatcher
name|allRefsWatcher
decl_stmt|;
DECL|field|extraReviewers
specifier|private
specifier|final
name|ImmutableSetMultimap
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|extraReviewers
decl_stmt|;
DECL|field|projectState
specifier|private
specifier|final
name|ProjectState
name|projectState
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|IdentifiedUser
name|user
decl_stmt|;
DECL|field|receivePack
specifier|private
specifier|final
name|ReceivePack
name|receivePack
decl_stmt|;
comment|// Immutable fields derived from constructor arguments.
DECL|field|allowPushToRefsChanges
specifier|private
specifier|final
name|boolean
name|allowPushToRefsChanges
decl_stmt|;
DECL|field|labelTypes
specifier|private
specifier|final
name|LabelTypes
name|labelTypes
decl_stmt|;
DECL|field|rejectCommits
specifier|private
specifier|final
name|NoteMap
name|rejectCommits
decl_stmt|;
DECL|field|permissions
specifier|private
specifier|final
name|PermissionBackend
operator|.
name|ForProject
name|permissions
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
name|project
decl_stmt|;
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
comment|// Collections populated during processing.
DECL|field|updateGroups
specifier|private
specifier|final
name|List
argument_list|<
name|UpdateGroupsRequest
argument_list|>
name|updateGroups
decl_stmt|;
DECL|field|messages
specifier|private
specifier|final
name|List
argument_list|<
name|ValidationMessage
argument_list|>
name|messages
decl_stmt|;
DECL|field|errors
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|ReceiveError
argument_list|,
name|String
argument_list|>
name|errors
decl_stmt|;
DECL|field|pushOptions
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pushOptions
decl_stmt|;
DECL|field|replaceByChange
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ReplaceRequest
argument_list|>
name|replaceByChange
decl_stmt|;
annotation|@
name|AutoValue
DECL|class|ValidCommitKey
specifier|protected
specifier|abstract
specifier|static
class|class
name|ValidCommitKey
block|{
DECL|method|getObjectId ()
specifier|abstract
name|ObjectId
name|getObjectId
parameter_list|()
function_decl|;
DECL|method|getBranch ()
specifier|abstract
name|Branch
operator|.
name|NameKey
name|getBranch
parameter_list|()
function_decl|;
block|}
DECL|field|validCommits
specifier|private
specifier|final
name|Set
argument_list|<
name|ValidCommitKey
argument_list|>
name|validCommits
decl_stmt|;
comment|/**    * Actual commands to be executed, as opposed to the mix of actual and magic commands that were    * provided over the wire.    *    *<p>Excludes commands executed implicitly as part of other {@link BatchUpdateOp}s, such as    * creating patch set refs.    */
DECL|field|actualCommands
specifier|private
specifier|final
name|List
argument_list|<
name|ReceiveCommand
argument_list|>
name|actualCommands
decl_stmt|;
comment|// Collections lazily populated during processing.
DECL|field|refsByChange
specifier|private
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|refsByChange
decl_stmt|;
DECL|field|refsById
specifier|private
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|refsById
decl_stmt|;
comment|// Other settings populated during processing.
DECL|field|magicBranch
specifier|private
name|MagicBranchInput
name|magicBranch
decl_stmt|;
DECL|field|newChangeForAllNotInTarget
specifier|private
name|boolean
name|newChangeForAllNotInTarget
decl_stmt|;
DECL|field|setFullNameTo
specifier|private
name|String
name|setFullNameTo
decl_stmt|;
DECL|field|setChangeAsPrivate
specifier|private
name|boolean
name|setChangeAsPrivate
decl_stmt|;
DECL|field|noteDbPushOption
specifier|private
name|Optional
argument_list|<
name|NoteDbPushOption
argument_list|>
name|noteDbPushOption
decl_stmt|;
comment|// Handles for outputting back over the wire to the end user.
DECL|field|newProgress
specifier|private
name|Task
name|newProgress
decl_stmt|;
DECL|field|replaceProgress
specifier|private
name|Task
name|replaceProgress
decl_stmt|;
DECL|field|closeProgress
specifier|private
name|Task
name|closeProgress
decl_stmt|;
DECL|field|commandProgress
specifier|private
name|Task
name|commandProgress
decl_stmt|;
DECL|field|messageSender
specifier|private
name|MessageSender
name|messageSender
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReceiveCommits ( AccountResolver accountResolver, @ServerInitiated Provider<AccountsUpdate> accountsUpdateProvider, AllProjectsName allProjectsName, BatchUpdate.Factory batchUpdateFactory, @GerritServerConfig Config cfg, ChangeEditUtil editUtil, ChangeIndexer indexer, ChangeInserter.Factory changeInserterFactory, ChangeNotes.Factory notesFactory, DynamicItem<ChangeReportFormatter> changeFormatterProvider, CmdLineParser.Factory optionParserFactory, CommitValidators.Factory commitValidatorsFactory, CreateGroupPermissionSyncer createGroupPermissionSyncer, CreateRefControl createRefControl, DynamicMap<ProjectConfigEntry> pluginConfigEntries, DynamicSet<ReceivePackInitializer> initializers, MergedByPushOp.Factory mergedByPushOpFactory, NotesMigration notesMigration, PatchSetInfoFactory patchSetInfoFactory, PatchSetUtil psUtil, PermissionBackend permissionBackend, ProjectCache projectCache, Provider<InternalChangeQuery> queryProvider, Provider<MergeOp> mergeOpProvider, Provider<MergeOpRepoManager> ormProvider, ReceiveConfig receiveConfig, RefOperationValidators.Factory refValidatorsFactory, ReplaceOp.Factory replaceOpFactory, RetryHelper retryHelper, RequestScopePropagator requestScopePropagator, ReviewDb db, Sequences seq, SetHashtagsOp.Factory hashtagsFactory, SshInfo sshInfo, SubmoduleOp.Factory subOpFactory, TagCache tagCache, @CanonicalWebUrl @Nullable String canonicalWebUrl, @Assisted ProjectState projectState, @Assisted IdentifiedUser user, @Assisted ReceivePack rp, @Assisted AllRefsWatcher allRefsWatcher, @Assisted SetMultimap<ReviewerStateInternal, Account.Id> extraReviewers, @Nullable @Assisted MessageSender messageSender)
name|ReceiveCommits
parameter_list|(
name|AccountResolver
name|accountResolver
parameter_list|,
annotation|@
name|ServerInitiated
name|Provider
argument_list|<
name|AccountsUpdate
argument_list|>
name|accountsUpdateProvider
parameter_list|,
name|AllProjectsName
name|allProjectsName
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ChangeEditUtil
name|editUtil
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|ChangeInserter
operator|.
name|Factory
name|changeInserterFactory
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|,
name|DynamicItem
argument_list|<
name|ChangeReportFormatter
argument_list|>
name|changeFormatterProvider
parameter_list|,
name|CmdLineParser
operator|.
name|Factory
name|optionParserFactory
parameter_list|,
name|CommitValidators
operator|.
name|Factory
name|commitValidatorsFactory
parameter_list|,
name|CreateGroupPermissionSyncer
name|createGroupPermissionSyncer
parameter_list|,
name|CreateRefControl
name|createRefControl
parameter_list|,
name|DynamicMap
argument_list|<
name|ProjectConfigEntry
argument_list|>
name|pluginConfigEntries
parameter_list|,
name|DynamicSet
argument_list|<
name|ReceivePackInitializer
argument_list|>
name|initializers
parameter_list|,
name|MergedByPushOp
operator|.
name|Factory
name|mergedByPushOpFactory
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|,
name|PatchSetInfoFactory
name|patchSetInfoFactory
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|Provider
argument_list|<
name|MergeOp
argument_list|>
name|mergeOpProvider
parameter_list|,
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|ormProvider
parameter_list|,
name|ReceiveConfig
name|receiveConfig
parameter_list|,
name|RefOperationValidators
operator|.
name|Factory
name|refValidatorsFactory
parameter_list|,
name|ReplaceOp
operator|.
name|Factory
name|replaceOpFactory
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|RequestScopePropagator
name|requestScopePropagator
parameter_list|,
name|ReviewDb
name|db
parameter_list|,
name|Sequences
name|seq
parameter_list|,
name|SetHashtagsOp
operator|.
name|Factory
name|hashtagsFactory
parameter_list|,
name|SshInfo
name|sshInfo
parameter_list|,
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
name|TagCache
name|tagCache
parameter_list|,
annotation|@
name|CanonicalWebUrl
annotation|@
name|Nullable
name|String
name|canonicalWebUrl
parameter_list|,
annotation|@
name|Assisted
name|ProjectState
name|projectState
parameter_list|,
annotation|@
name|Assisted
name|IdentifiedUser
name|user
parameter_list|,
annotation|@
name|Assisted
name|ReceivePack
name|rp
parameter_list|,
annotation|@
name|Assisted
name|AllRefsWatcher
name|allRefsWatcher
parameter_list|,
annotation|@
name|Assisted
name|SetMultimap
argument_list|<
name|ReviewerStateInternal
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|extraReviewers
parameter_list|,
annotation|@
name|Nullable
annotation|@
name|Assisted
name|MessageSender
name|messageSender
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Injected fields.
name|this
operator|.
name|accountResolver
operator|=
name|accountResolver
expr_stmt|;
name|this
operator|.
name|accountsUpdateProvider
operator|=
name|accountsUpdateProvider
expr_stmt|;
name|this
operator|.
name|allProjectsName
operator|=
name|allProjectsName
expr_stmt|;
name|this
operator|.
name|batchUpdateFactory
operator|=
name|batchUpdateFactory
expr_stmt|;
name|this
operator|.
name|changeFormatter
operator|=
name|changeFormatterProvider
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|changeInserterFactory
operator|=
name|changeInserterFactory
expr_stmt|;
name|this
operator|.
name|commitValidatorsFactory
operator|=
name|commitValidatorsFactory
expr_stmt|;
name|this
operator|.
name|createRefControl
operator|=
name|createRefControl
expr_stmt|;
name|this
operator|.
name|createGroupPermissionSyncer
operator|=
name|createGroupPermissionSyncer
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|editUtil
operator|=
name|editUtil
expr_stmt|;
name|this
operator|.
name|hashtagsFactory
operator|=
name|hashtagsFactory
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|initializers
operator|=
name|initializers
expr_stmt|;
name|this
operator|.
name|mergeOpProvider
operator|=
name|mergeOpProvider
expr_stmt|;
name|this
operator|.
name|mergedByPushOpFactory
operator|=
name|mergedByPushOpFactory
expr_stmt|;
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|this
operator|.
name|optionParserFactory
operator|=
name|optionParserFactory
expr_stmt|;
name|this
operator|.
name|ormProvider
operator|=
name|ormProvider
expr_stmt|;
name|this
operator|.
name|patchSetInfoFactory
operator|=
name|patchSetInfoFactory
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|pluginConfigEntries
operator|=
name|pluginConfigEntries
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|receiveConfig
operator|=
name|receiveConfig
expr_stmt|;
name|this
operator|.
name|refValidatorsFactory
operator|=
name|refValidatorsFactory
expr_stmt|;
name|this
operator|.
name|replaceOpFactory
operator|=
name|replaceOpFactory
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|requestScopePropagator
operator|=
name|requestScopePropagator
expr_stmt|;
name|this
operator|.
name|seq
operator|=
name|seq
expr_stmt|;
name|this
operator|.
name|sshInfo
operator|=
name|sshInfo
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|tagCache
operator|=
name|tagCache
expr_stmt|;
comment|// Assisted injected fields.
name|this
operator|.
name|allRefsWatcher
operator|=
name|allRefsWatcher
expr_stmt|;
name|this
operator|.
name|extraReviewers
operator|=
name|ImmutableSetMultimap
operator|.
name|copyOf
argument_list|(
name|extraReviewers
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectState
operator|=
name|projectState
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|receivePack
operator|=
name|rp
expr_stmt|;
comment|// Immutable fields derived from constructor arguments.
name|allowPushToRefsChanges
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"receive"
argument_list|,
literal|"allowPushToRefsChanges"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|repo
operator|=
name|rp
operator|.
name|getRepository
argument_list|()
expr_stmt|;
name|project
operator|=
name|projectState
operator|.
name|getProject
argument_list|()
expr_stmt|;
name|labelTypes
operator|=
name|projectState
operator|.
name|getLabelTypes
argument_list|()
expr_stmt|;
name|permissions
operator|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|project
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|rejectCommits
operator|=
name|BanCommit
operator|.
name|loadRejectCommitsMap
argument_list|(
name|rp
operator|.
name|getRepository
argument_list|()
argument_list|,
name|rp
operator|.
name|getRevWalk
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|canonicalWebUrl
operator|=
name|canonicalWebUrl
expr_stmt|;
comment|// Collections populated during processing.
name|actualCommands
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|errors
operator|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|messages
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|pushOptions
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|replaceByChange
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|updateGroups
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|validCommits
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
comment|// Other settings populated during processing.
name|newChangeForAllNotInTarget
operator|=
name|projectState
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|CREATE_NEW_CHANGE_FOR_ALL_NOT_IN_TARGET
argument_list|)
expr_stmt|;
comment|// Handles for outputting back over the wire to the end user.
name|this
operator|.
name|messageSender
operator|=
name|messageSender
operator|!=
literal|null
condition|?
name|messageSender
else|:
operator|new
name|ReceivePackMessageSender
argument_list|()
expr_stmt|;
block|}
DECL|method|init ()
name|void
name|init
parameter_list|()
block|{
for|for
control|(
name|ReceivePackInitializer
name|i
range|:
name|initializers
control|)
block|{
name|i
operator|.
name|init
argument_list|(
name|projectState
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|receivePack
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMessageSender ()
name|MessageSender
name|getMessageSender
parameter_list|()
block|{
return|return
name|messageSender
return|;
block|}
DECL|method|getProject ()
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|addMessage (String message)
specifier|private
name|void
name|addMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|CommitValidationMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addError (String error)
name|void
name|addError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|messages
operator|.
name|add
argument_list|(
operator|new
name|CommitValidationMessage
argument_list|(
name|error
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessages ()
name|void
name|sendMessages
parameter_list|()
block|{
for|for
control|(
name|ValidationMessage
name|m
range|:
name|messages
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
block|{
name|messageSender
operator|.
name|sendError
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageSender
operator|.
name|sendMessage
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processCommands (Collection<ReceiveCommand> commands, MultiProgressMonitor progress)
name|void
name|processCommands
parameter_list|(
name|Collection
argument_list|<
name|ReceiveCommand
argument_list|>
name|commands
parameter_list|,
name|MultiProgressMonitor
name|progress
parameter_list|)
block|{
name|newProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"new"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|replaceProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"updated"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|closeProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"closed"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
name|commandProgress
operator|=
name|progress
operator|.
name|beginSubTask
argument_list|(
literal|"refs"
argument_list|,
name|UNKNOWN
argument_list|)
expr_stmt|;
try|try
init|(
name|TraceContext
name|traceContext
init|=
operator|new
name|TraceContext
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|RECEIVE_ID
argument_list|,
name|RequestId
operator|.
name|forProject
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
try|try
block|{
name|parsePushOptions
argument_list|()
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Parsing %d commands"
argument_list|,
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|commands
control|)
block|{
if|if
condition|(
operator|!
name|projectState
operator|.
name|getProject
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|permitsWrite
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit: project state does not permit write"
argument_list|)
expr_stmt|;
break|break;
block|}
name|parseCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionBackendException
decl||
name|NoSuchProjectException
decl||
name|IOException
name|err
parameter_list|)
block|{
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|actualCommands
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to process refs in %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|newChanges
operator|=
name|selectNewAndReplacedChangesFromMagicBranch
argument_list|()
expr_stmt|;
block|}
name|preparePatchSetsForReplace
argument_list|(
name|newChanges
argument_list|)
expr_stmt|;
name|insertChangesAndPatchSets
argument_list|(
name|newChanges
argument_list|)
expr_stmt|;
name|newProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|replaceProgress
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Handling error conditions: %s"
argument_list|,
name|errors
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReceiveError
name|error
range|:
name|errors
operator|.
name|keySet
argument_list|()
control|)
block|{
name|receivePack
operator|.
name|sendMessage
argument_list|(
name|buildError
argument_list|(
name|error
argument_list|,
name|errors
operator|.
name|get
argument_list|(
name|error
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|receivePack
operator|.
name|sendMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"User: %s"
argument_list|,
name|user
operator|.
name|getLoggableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|receivePack
operator|.
name|sendMessage
argument_list|(
name|COMMAND_REJECTION_MESSAGE_FOOTER
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReceiveCommand
name|c
range|:
name|actualCommands
control|)
block|{
comment|// Most post-update steps should happen in UpdateOneRefOp#postUpdate. The only steps that
comment|// should happen in this loop are things that can't happen within one BatchUpdate because
comment|// they involve kicking off an additional BatchUpdate.
if|if
condition|(
name|c
operator|.
name|getResult
argument_list|()
operator|!=
name|OK
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isHead
argument_list|(
name|c
argument_list|)
operator|||
name|isConfig
argument_list|(
name|c
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|autoCloseChanges
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|branches
operator|.
name|add
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
break|break;
block|}
block|}
block|}
comment|// Update superproject gitlinks if required.
if|if
condition|(
operator|!
name|branches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
init|(
name|MergeOpRepoManager
name|orm
init|=
name|ormProvider
operator|.
name|get
argument_list|()
init|)
block|{
name|orm
operator|.
name|setContext
argument_list|(
name|db
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|SubmoduleOp
name|op
init|=
name|subOpFactory
operator|.
name|create
argument_list|(
name|branches
argument_list|,
name|orm
argument_list|)
decl_stmt|;
name|op
operator|.
name|updateSuperProjects
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Can't update the superprojects"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update account info with details discovered during commit walking.
name|updateAccountInfo
argument_list|()
expr_stmt|;
name|closeProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|commandProgress
operator|.
name|end
argument_list|()
expr_stmt|;
name|progress
operator|.
name|end
argument_list|()
expr_stmt|;
name|reportMessages
argument_list|(
name|newChanges
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reportMessages (List<CreateRequest> newChanges)
specifier|private
name|void
name|reportMessages
parameter_list|(
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
parameter_list|)
block|{
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|created
init|=
name|newChanges
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|change
operator|!=
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|created
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
literal|"New Changes:"
argument_list|)
expr_stmt|;
for|for
control|(
name|CreateRequest
name|c
range|:
name|created
control|)
block|{
name|addMessage
argument_list|(
name|changeFormatter
operator|.
name|newChange
argument_list|(
name|ChangeReportFormatter
operator|.
name|Input
operator|.
name|builder
argument_list|()
operator|.
name|setChange
argument_list|(
name|c
operator|.
name|change
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ReplaceRequest
argument_list|>
name|updated
init|=
name|replaceByChange
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|OK
argument_list|)
operator|.
name|sorted
argument_list|(
name|comparingInt
argument_list|(
name|r
lambda|->
name|r
operator|.
name|notes
operator|.
name|getChangeId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|updated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
literal|"Updated Changes:"
argument_list|)
expr_stmt|;
name|boolean
name|edit
init|=
name|magicBranch
operator|!=
literal|null
operator|&&
operator|(
name|magicBranch
operator|.
name|edit
operator|||
name|magicBranch
operator|.
name|draft
operator|)
decl_stmt|;
name|Boolean
name|isPrivate
init|=
literal|null
decl_stmt|;
name|Boolean
name|wip
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|magicBranch
operator|.
name|isPrivate
condition|)
block|{
name|isPrivate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|magicBranch
operator|.
name|removePrivate
condition|)
block|{
name|isPrivate
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|workInProgress
condition|)
block|{
name|wip
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|magicBranch
operator|.
name|ready
condition|)
block|{
name|wip
operator|=
literal|false
expr_stmt|;
block|}
block|}
for|for
control|(
name|ReplaceRequest
name|u
range|:
name|updated
control|)
block|{
name|String
name|subject
decl_stmt|;
if|if
condition|(
name|edit
condition|)
block|{
try|try
block|{
name|subject
operator|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|u
operator|.
name|newCommitId
argument_list|)
operator|.
name|getShortMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Log and fall back to original change subject
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"failed to get subject for edit patch set"
argument_list|)
expr_stmt|;
name|subject
operator|=
name|u
operator|.
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|subject
operator|=
name|u
operator|.
name|info
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isPrivate
operator|==
literal|null
condition|)
block|{
name|isPrivate
operator|=
name|u
operator|.
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|isPrivate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wip
operator|==
literal|null
condition|)
block|{
name|wip
operator|=
name|u
operator|.
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
expr_stmt|;
block|}
name|ChangeReportFormatter
operator|.
name|Input
name|input
init|=
name|ChangeReportFormatter
operator|.
name|Input
operator|.
name|builder
argument_list|()
operator|.
name|setChange
argument_list|(
name|u
operator|.
name|notes
operator|.
name|getChange
argument_list|()
argument_list|)
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|setIsEdit
argument_list|(
name|edit
argument_list|)
operator|.
name|setIsPrivate
argument_list|(
name|isPrivate
argument_list|)
operator|.
name|setIsWorkInProgress
argument_list|(
name|wip
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addMessage
argument_list|(
name|changeFormatter
operator|.
name|changeUpdated
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// TODO(xchangcheng): remove after migrating tools which are using this magic branch.
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|publish
condition|)
block|{
name|addMessage
argument_list|(
literal|"Pushing to refs/publish/* is deprecated, use refs/for/* instead."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertChangesAndPatchSets (List<CreateRequest> newChanges)
specifier|private
name|void
name|insertChangesAndPatchSets
parameter_list|(
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
parameter_list|)
block|{
name|ReceiveCommand
name|magicBranchCmd
init|=
name|magicBranch
operator|!=
literal|null
condition|?
name|magicBranch
operator|.
name|cmd
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|magicBranchCmd
operator|!=
literal|null
operator|&&
name|magicBranchCmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Skipping change updates on %s because ref update failed: %s %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|magicBranchCmd
operator|.
name|getResult
argument_list|()
argument_list|,
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|magicBranchCmd
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|user
operator|.
name|materializedCopy
argument_list|()
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|ObjectReader
name|reader
operator|=
name|ins
operator|.
name|newReader
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|)
operator|.
name|updateChangesInParallel
argument_list|()
expr_stmt|;
name|bu
operator|.
name|setRefLogMessage
argument_list|(
literal|"push"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding %d replace requests"
argument_list|,
name|newChanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|replace
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|replace
operator|.
name|addOps
argument_list|(
name|bu
argument_list|,
name|replaceProgress
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding %d create requests"
argument_list|,
name|newChanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CreateRequest
name|create
range|:
name|newChanges
control|)
block|{
name|create
operator|.
name|addOps
argument_list|(
name|bu
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding %d group update requests"
argument_list|,
name|newChanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|updateGroups
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|r
operator|.
name|addOps
argument_list|(
name|bu
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding %d additional ref updates"
argument_list|,
name|actualCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|actualCommands
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|bu
operator|.
name|addRepoOnlyOp
argument_list|(
operator|new
name|UpdateOneRefOp
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Executing batch"
argument_list|)
expr_stmt|;
try|try
block|{
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
throw|throw
name|INSERT_EXCEPTION
operator|.
name|apply
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|magicBranchCmd
operator|!=
literal|null
condition|)
block|{
name|magicBranchCmd
operator|.
name|setResult
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReplaceRequest
name|replace
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|rejectMessage
init|=
name|replace
operator|.
name|getRejectMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|rejectMessage
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|replace
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Not necessarily the magic branch, so need to set OK on the original value.
name|replace
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|OK
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Rejecting due to message from ReplaceOp"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|replace
operator|.
name|inputCommand
argument_list|,
name|rejectMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|addMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranchCmd
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
decl||
name|IOException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Can't insert change/patch set for %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranchCmd
argument_list|,
literal|"internal server error: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|submit
condition|)
block|{
try|try
block|{
name|submit
argument_list|(
name|newChanges
argument_list|,
name|replaceByChange
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|addMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranchCmd
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
decl||
name|OrmException
decl||
name|UpdateException
decl||
name|IOException
decl||
name|ConfigInvalidException
decl||
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error submitting changes to %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranchCmd
argument_list|,
literal|"error during submit"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildError (ReceiveError error, List<String> branches)
specifier|private
name|String
name|buildError
parameter_list|(
name|ReceiveError
name|error
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|branches
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|branches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Branch "
argument_list|)
operator|.
name|append
argument_list|(
name|branches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Branches"
argument_list|)
expr_stmt|;
name|String
name|delim
init|=
literal|" "
decl_stmt|;
for|for
control|(
name|String
name|branch
range|:
name|branches
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
operator|.
name|append
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|", "
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
operator|.
name|append
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Parses push options specified as "git push -o OPTION" */
DECL|method|parsePushOptions ()
specifier|private
name|void
name|parsePushOptions
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|optionList
init|=
name|receivePack
operator|.
name|getPushOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|optionList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|option
range|:
name|optionList
control|)
block|{
name|int
name|e
init|=
name|option
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|>
literal|0
condition|)
block|{
name|pushOptions
operator|.
name|put
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|e
argument_list|)
argument_list|,
name|option
operator|.
name|substring
argument_list|(
name|e
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pushOptions
operator|.
name|put
argument_list|(
name|option
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|noteDbValues
init|=
name|pushOptions
operator|.
name|get
argument_list|(
literal|"notedb"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noteDbValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// These semantics for duplicates/errors are somewhat arbitrary and may not match e.g. the
comment|// CommandLineParser behavior used by MagicBranchInput.
name|String
name|value
init|=
name|noteDbValues
operator|.
name|get
argument_list|(
name|noteDbValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|noteDbPushOption
operator|=
name|NoteDbPushOption
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noteDbPushOption
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid value in -o "
operator|+
name|NoteDbPushOption
operator|.
name|OPTION_NAME
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|noteDbPushOption
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|NoteDbPushOption
operator|.
name|DISALLOW
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseCommand (ReceiveCommand cmd)
specifier|private
name|void
name|parseCommand
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
throws|,
name|NoSuchProjectException
throws|,
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Already rejected by the core receive process.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Already processed by core: %s %s"
argument_list|,
name|cmd
operator|.
name|getResult
argument_list|()
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not valid ref"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|parseMagicBranch
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|projectState
operator|.
name|isAllUsers
argument_list|()
operator|&&
name|RefNames
operator|.
name|REFS_USERS_SELF
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|newName
init|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Swapping out command for %s to %s"
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|,
name|newName
argument_list|)
expr_stmt|;
specifier|final
name|ReceiveCommand
name|orgCmd
init|=
name|cmd
decl_stmt|;
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|,
name|newName
argument_list|,
name|cmd
operator|.
name|getType
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResult
parameter_list|(
name|Result
name|s
parameter_list|,
name|String
name|m
parameter_list|)
block|{
name|super
operator|.
name|setResult
argument_list|(
name|s
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|orgCmd
operator|.
name|setResult
argument_list|(
name|s
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|Matcher
name|m
init|=
name|NEW_PATCHSET_PATTERN
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|allowPushToRefsChanges
condition|)
block|{
comment|// The referenced change must exist and must still be open.
comment|//
name|Change
operator|.
name|Id
name|changeId
init|=
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|parseReplaceCommand
argument_list|(
name|cmd
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"upload to refs/changes not allowed"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|RefNames
operator|.
name|isNoteDbMetaRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Reject pushes to NoteDb refs without a special option and permission. Note that this
comment|// prohibition doesn't depend on NoteDb being enabled in any way, since all sites will
comment|// migrate to NoteDb eventually, and we don't want garbage data waiting there when the
comment|// migration finishes.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s NoteDb ref %s with %s=%s"
argument_list|,
name|cmd
operator|.
name|getType
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|,
name|NoteDbPushOption
operator|.
name|OPTION_NAME
argument_list|,
name|noteDbPushOption
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Optional
operator|.
name|of
argument_list|(
name|NoteDbPushOption
operator|.
name|ALLOW
argument_list|)
operator|.
name|equals
argument_list|(
name|noteDbPushOption
argument_list|)
condition|)
block|{
comment|// Only reject this command, not the whole push. This supports the use case of "git clone
comment|// --mirror" followed by "git push --mirror", when the user doesn't really intend to clone
comment|// or mirror the NoteDb data; there is no single refspec that describes all refs *except*
comment|// NoteDb refs.
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"NoteDb update requires -o "
operator|+
name|NoteDbPushOption
operator|.
name|OPTION_NAME
operator|+
literal|"="
operator|+
name|NoteDbPushOption
operator|.
name|ALLOW
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|check
argument_list|(
name|GlobalPermission
operator|.
name|ACCESS_DATABASE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"NoteDb update requires access database permission"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|parseCreate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|parseUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|parseDelete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE_NONFASTFORWARD
case|:
name|parseRewind
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
default|default:
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit: unknown command type "
operator|+
name|cmd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isConfig
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Processing %s command"
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|permissions
operator|.
name|check
argument_list|(
name|ProjectPermission
operator|.
name|WRITE_CONFIG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"must be either project owner or have %s permission"
argument_list|,
name|ProjectPermission
operator|.
name|WRITE_CONFIG
operator|.
name|describeForException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
case|case
name|UPDATE_NONFASTFORWARD
case|:
try|try
block|{
name|ProjectConfig
name|cfg
init|=
operator|new
name|ProjectConfig
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getValidationErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addError
argument_list|(
literal|"Invalid project configuration:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ValidationError
name|err
range|:
name|cfg
operator|.
name|getValidationErrors
argument_list|()
control|)
block|{
name|addError
argument_list|(
literal|"  "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"User %s tried to push invalid project configuration %s for %s"
argument_list|,
name|user
operator|.
name|getLoggableName
argument_list|()
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Project
operator|.
name|NameKey
name|newParent
init|=
name|cfg
operator|.
name|getProject
argument_list|()
operator|.
name|getParent
argument_list|(
name|allProjectsName
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|oldParent
init|=
name|project
operator|.
name|getParent
argument_list|(
name|allProjectsName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldParent
operator|==
literal|null
condition|)
block|{
comment|// update of the 'All-Projects' project
if|if
condition|(
name|newParent
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration: root project cannot have parent"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|oldParent
operator|.
name|equals
argument_list|(
name|newParent
argument_list|)
condition|)
block|{
try|try
block|{
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|check
argument_list|(
name|GlobalPermission
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration: only Gerrit admin can set parent"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|projectCache
operator|.
name|get
argument_list|(
name|newParent
argument_list|)
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration: parent does not exist"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|ProjectConfigEntry
argument_list|>
name|e
range|:
name|pluginConfigEntries
control|)
block|{
name|PluginConfig
name|pluginCfg
init|=
name|cfg
operator|.
name|getPluginConfig
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
decl_stmt|;
name|ProjectConfigEntry
name|configEntry
init|=
name|e
operator|.
name|getProvider
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|pluginCfg
operator|.
name|getString
argument_list|(
name|e
operator|.
name|getExportName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|oldValue
init|=
name|projectState
operator|.
name|getConfig
argument_list|()
operator|.
name|getPluginConfig
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
operator|.
name|getString
argument_list|(
name|e
operator|.
name|getExportName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|configEntry
operator|.
name|getType
argument_list|()
operator|==
name|ProjectConfigEntryType
operator|.
name|ARRAY
condition|)
block|{
name|oldValue
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|projectState
operator|.
name|getConfig
argument_list|()
operator|.
name|getPluginConfig
argument_list|(
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
operator|.
name|getStringList
argument_list|(
name|e
operator|.
name|getExportName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|value
operator|==
literal|null
condition|?
name|oldValue
operator|!=
literal|null
else|:
operator|!
name|value
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
operator|)
operator|&&
operator|!
name|configEntry
operator|.
name|isEditable
argument_list|(
name|projectState
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"invalid project configuration: Not allowed to set parameter"
operator|+
literal|" '%s' of plugin '%s' on project '%s'."
argument_list|,
name|e
operator|.
name|getExportName
argument_list|()
argument_list|,
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ProjectConfigEntryType
operator|.
name|LIST
operator|.
name|equals
argument_list|(
name|configEntry
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|configEntry
operator|.
name|getPermittedValues
argument_list|()
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"invalid project configuration: The value '%s' is "
operator|+
literal|"not permitted for parameter '%s' of plugin '%s'."
argument_list|,
name|value
argument_list|,
name|e
operator|.
name|getExportName
argument_list|()
argument_list|,
name|e
operator|.
name|getPluginName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid project configuration"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"User %s tried to push invalid project configuration %s for %s"
argument_list|,
name|user
operator|.
name|getLoggableName
argument_list|()
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|DELETE
case|:
break|break;
default|default:
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit: don't know how to handle config update of type "
operator|+
name|cmd
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|method|parseCreate (ReceiveCommand cmd)
specifier|private
name|void
name|parseCreate
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
throws|,
name|NoSuchProjectException
throws|,
name|IOException
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid object %s for %s creation"
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Creating %s"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|Branch
operator|.
name|NameKey
name|branch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Must pass explicit user instead of injecting a provider into CreateRefControl, since
comment|// Provider<CurrentUser> within ReceiveCommits will always return anonymous.
name|createRefControl
operator|.
name|checkCreateRef
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|user
argument_list|)
argument_list|,
name|receivePack
operator|.
name|getRepository
argument_list|()
argument_list|,
name|branch
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
decl||
name|ResourceConflictException
name|denied
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit: "
operator|+
name|denied
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|validRefOperation
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
comment|// validRefOperation sets messages, so no need to provide more feedback.
return|return;
block|}
name|validateNewCommits
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|actualCommands
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|parseUpdate (ReceiveCommand cmd)
specifier|private
name|void
name|parseUpdate
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Updating %s"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|boolean
name|ok
decl_stmt|;
try|try
block|{
name|permissions
operator|.
name|ref
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|err
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
if|if
condition|(
name|isHead
argument_list|(
name|cmd
argument_list|)
operator|&&
operator|!
name|isCommit
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|validRefOperation
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|validateNewCommits
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|actualCommands
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|ReceiveError
operator|.
name|CONFIG_UPDATE
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|ReceiveError
operator|.
name|UPDATE
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"prohibited by Gerrit: ref update access denied"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isCommit (ReceiveCommand cmd)
specifier|private
name|boolean
name|isCommit
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RevObject
name|obj
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid object %s for %s"
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|RevCommit
condition|)
block|{
return|return
literal|true
return|;
block|}
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not a commit"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|parseDelete (ReceiveCommand cmd)
specifier|private
name|void
name|parseDelete
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Deleting %s"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|REFS_CHANGES
argument_list|)
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|ReceiveError
operator|.
name|DELETE_CHANGES
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete changes"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canDelete
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validRefOperation
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|actualCommands
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete project configuration"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|put
argument_list|(
name|ReceiveError
operator|.
name|DELETE
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot delete references"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|canDelete (ReceiveCommand cmd)
specifier|private
name|boolean
name|canDelete
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
if|if
condition|(
name|isConfigRef
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Never allow to delete the meta config branch.
return|return
literal|false
return|;
block|}
try|try
block|{
name|permissions
operator|.
name|ref
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|DELETE
argument_list|)
expr_stmt|;
return|return
name|projectState
operator|.
name|statePermitsWrite
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|parseRewind (ReceiveCommand cmd)
specifier|private
name|void
name|parseRewind
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|RevCommit
name|newObject
decl_stmt|;
try|try
block|{
name|newObject
operator|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|newObject
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid object %s for %s forced update"
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid object"
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Rewinding %s"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|newObject
operator|!=
literal|null
condition|)
block|{
name|validateNewCommits
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return;
block|}
block|}
name|boolean
name|ok
decl_stmt|;
try|try
block|{
name|permissions
operator|.
name|ref
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|FORCE_UPDATE
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|err
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
if|if
condition|(
operator|!
name|validRefOperation
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
return|return;
block|}
name|actualCommands
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"need '"
operator|+
name|PermissionRule
operator|.
name|FORCE_PUSH
operator|+
literal|"' privilege."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MagicBranchInput
specifier|static
class|class
name|MagicBranchInput
block|{
DECL|field|COMMAS
specifier|private
specifier|static
specifier|final
name|Splitter
name|COMMAS
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
DECL|field|cmd
specifier|final
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|labelTypes
specifier|final
name|LabelTypes
name|labelTypes
decl_stmt|;
DECL|field|notesMigration
specifier|final
name|NotesMigration
name|notesMigration
decl_stmt|;
DECL|field|defaultPublishComments
specifier|private
specifier|final
name|boolean
name|defaultPublishComments
decl_stmt|;
DECL|field|dest
name|Branch
operator|.
name|NameKey
name|dest
decl_stmt|;
DECL|field|perm
name|PermissionBackend
operator|.
name|ForRef
name|perm
decl_stmt|;
DECL|field|reviewer
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|reviewer
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
DECL|field|cc
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|cc
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
DECL|field|labels
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|labels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|message
name|String
name|message
decl_stmt|;
DECL|field|baseCommit
name|List
argument_list|<
name|RevCommit
argument_list|>
name|baseCommit
decl_stmt|;
DECL|field|cmdLineParser
name|CmdLineParser
name|cmdLineParser
decl_stmt|;
DECL|field|hashtags
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--base"
argument_list|,
name|metaVar
operator|=
literal|"BASE"
argument_list|,
name|usage
operator|=
literal|"merge base of changes"
argument_list|)
DECL|field|base
name|List
argument_list|<
name|ObjectId
argument_list|>
name|base
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--topic"
argument_list|,
name|metaVar
operator|=
literal|"NAME"
argument_list|,
name|usage
operator|=
literal|"attach topic to changes"
argument_list|)
DECL|field|topic
name|String
name|topic
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--draft"
argument_list|,
name|usage
operator|=
literal|"Will be removed. Before that, this option will be mapped to '--private'"
operator|+
literal|"for new changes and '--edit' for existing changes"
argument_list|)
DECL|field|draft
name|boolean
name|draft
decl_stmt|;
DECL|field|publish
name|boolean
name|publish
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--private"
argument_list|,
name|usage
operator|=
literal|"mark new/updated change as private"
argument_list|)
DECL|field|isPrivate
name|boolean
name|isPrivate
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--remove-private"
argument_list|,
name|usage
operator|=
literal|"remove privacy flag from updated change"
argument_list|)
DECL|field|removePrivate
name|boolean
name|removePrivate
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--wip"
argument_list|,
name|aliases
operator|=
block|{
literal|"-work-in-progress"
block|}
argument_list|,
name|usage
operator|=
literal|"mark change as work in progress"
argument_list|)
DECL|field|workInProgress
name|boolean
name|workInProgress
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--ready"
argument_list|,
name|usage
operator|=
literal|"mark change as ready"
argument_list|)
DECL|field|ready
name|boolean
name|ready
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--edit"
argument_list|,
name|aliases
operator|=
block|{
literal|"-e"
block|}
argument_list|,
name|usage
operator|=
literal|"upload as change edit"
argument_list|)
DECL|field|edit
name|boolean
name|edit
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--submit"
argument_list|,
name|usage
operator|=
literal|"immediately submit the change"
argument_list|)
DECL|field|submit
name|boolean
name|submit
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--merged"
argument_list|,
name|usage
operator|=
literal|"create single change for a merged commit"
argument_list|)
DECL|field|merged
name|boolean
name|merged
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--publish-comments"
argument_list|,
name|usage
operator|=
literal|"publish all draft comments on updated changes"
argument_list|)
DECL|field|publishComments
specifier|private
name|boolean
name|publishComments
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--no-publish-comments"
argument_list|,
name|aliases
operator|=
block|{
literal|"--np"
block|}
argument_list|,
name|usage
operator|=
literal|"do not publish draft comments"
argument_list|)
DECL|field|noPublishComments
specifier|private
name|boolean
name|noPublishComments
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--notify"
argument_list|,
name|usage
operator|=
literal|"Notify handling that defines to whom email notifications "
operator|+
literal|"should be sent. Allowed values are NONE, OWNER, "
operator|+
literal|"OWNER_REVIEWERS, ALL. If not set, the default is ALL."
argument_list|)
DECL|field|notify
specifier|private
name|NotifyHandling
name|notify
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--notify-to"
argument_list|,
name|metaVar
operator|=
literal|"USER"
argument_list|,
name|usage
operator|=
literal|"user that should be notified"
argument_list|)
DECL|field|tos
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|tos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--notify-cc"
argument_list|,
name|metaVar
operator|=
literal|"USER"
argument_list|,
name|usage
operator|=
literal|"user that should be CC'd"
argument_list|)
DECL|field|ccs
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ccs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--notify-bcc"
argument_list|,
name|metaVar
operator|=
literal|"USER"
argument_list|,
name|usage
operator|=
literal|"user that should be BCC'd"
argument_list|)
DECL|field|bccs
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|bccs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--reviewer"
argument_list|,
name|aliases
operator|=
block|{
literal|"-r"
block|}
argument_list|,
name|metaVar
operator|=
literal|"EMAIL"
argument_list|,
name|usage
operator|=
literal|"add reviewer to changes"
argument_list|)
DECL|method|reviewer (Account.Id id)
name|void
name|reviewer
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|reviewer
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--cc"
argument_list|,
name|metaVar
operator|=
literal|"EMAIL"
argument_list|,
name|usage
operator|=
literal|"notify user by CC"
argument_list|)
DECL|method|cc (Account.Id id)
name|void
name|cc
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--label"
argument_list|,
name|aliases
operator|=
block|{
literal|"-l"
block|}
argument_list|,
name|metaVar
operator|=
literal|"LABEL+VALUE"
argument_list|,
name|usage
operator|=
literal|"label(s) to assign (defaults to +1 if no value provided"
argument_list|)
DECL|method|addLabel (String token)
name|void
name|addLabel
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|CmdLineException
block|{
name|LabelVote
name|v
init|=
name|LabelVote
operator|.
name|parse
argument_list|(
name|token
argument_list|)
decl_stmt|;
try|try
block|{
name|LabelType
operator|.
name|checkName
argument_list|(
name|v
operator|.
name|label
argument_list|()
argument_list|)
expr_stmt|;
name|ApprovalsUtil
operator|.
name|checkLabel
argument_list|(
name|labelTypes
argument_list|,
name|v
operator|.
name|label
argument_list|()
argument_list|,
name|v
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
throw|throw
name|cmdLineParser
operator|.
name|reject
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|labels
operator|.
name|put
argument_list|(
name|v
operator|.
name|label
argument_list|()
argument_list|,
name|v
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--message"
argument_list|,
name|aliases
operator|=
block|{
literal|"-m"
block|}
argument_list|,
name|metaVar
operator|=
literal|"MESSAGE"
argument_list|,
name|usage
operator|=
literal|"Comment message to apply to the review"
argument_list|)
DECL|method|addMessage (String token)
name|void
name|addMessage
parameter_list|(
name|String
name|token
parameter_list|)
block|{
comment|// Many characters have special meaning in the context of a git ref.
comment|//
comment|// Clients can use underscores to represent spaces.
name|message
operator|=
name|token
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Other characters can be represented using percent-encoding.
name|message
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|message
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Ignore decoding errors; leave message as percent-encoded.
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// This shouldn't happen; surely URLDecoder recognizes UTF-8.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--hashtag"
argument_list|,
name|aliases
operator|=
block|{
literal|"-t"
block|}
argument_list|,
name|metaVar
operator|=
literal|"HASHTAG"
argument_list|,
name|usage
operator|=
literal|"add hashtag to changes"
argument_list|)
DECL|method|addHashtag (String token)
name|void
name|addHashtag
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|CmdLineException
block|{
if|if
condition|(
operator|!
name|notesMigration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
throw|throw
name|cmdLineParser
operator|.
name|reject
argument_list|(
literal|"cannot add hashtags; noteDb is disabled"
argument_list|)
throw|;
block|}
name|String
name|hashtag
init|=
name|cleanupHashtag
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hashtag
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hashtags
operator|.
name|add
argument_list|(
name|hashtag
argument_list|)
expr_stmt|;
block|}
comment|// TODO(dpursehouse): validate hashtags
block|}
DECL|method|MagicBranchInput ( IdentifiedUser user, ReceiveCommand cmd, LabelTypes labelTypes, NotesMigration notesMigration)
name|MagicBranchInput
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|,
name|LabelTypes
name|labelTypes
parameter_list|,
name|NotesMigration
name|notesMigration
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|draft
operator|=
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|MagicBranch
operator|.
name|NEW_DRAFT_CHANGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|publish
operator|=
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|MagicBranch
operator|.
name|NEW_PUBLISH_CHANGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelTypes
operator|=
name|labelTypes
expr_stmt|;
name|this
operator|.
name|notesMigration
operator|=
name|notesMigration
expr_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|user
operator|.
name|state
argument_list|()
operator|.
name|getGeneralPreferences
argument_list|()
decl_stmt|;
name|this
operator|.
name|defaultPublishComments
operator|=
name|prefs
operator|!=
literal|null
condition|?
name|firstNonNull
argument_list|(
name|user
operator|.
name|state
argument_list|()
operator|.
name|getGeneralPreferences
argument_list|()
operator|.
name|publishCommentsOnPush
argument_list|,
literal|false
argument_list|)
else|:
literal|false
expr_stmt|;
block|}
DECL|method|getMailRecipients ()
name|MailRecipients
name|getMailRecipients
parameter_list|()
block|{
return|return
operator|new
name|MailRecipients
argument_list|(
name|reviewer
argument_list|,
name|cc
argument_list|)
return|;
block|}
DECL|method|getAccountsToNotify ()
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|getAccountsToNotify
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|accountsToNotify
operator|.
name|putAll
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
name|tos
argument_list|)
expr_stmt|;
name|accountsToNotify
operator|.
name|putAll
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
name|ccs
argument_list|)
expr_stmt|;
name|accountsToNotify
operator|.
name|putAll
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
name|bccs
argument_list|)
expr_stmt|;
return|return
name|accountsToNotify
return|;
block|}
DECL|method|shouldPublishComments ()
name|boolean
name|shouldPublishComments
parameter_list|()
block|{
if|if
condition|(
name|publishComments
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|noPublishComments
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|defaultPublishComments
return|;
block|}
comment|/**      * returns the destination ref of the magic branch, and populates options in the cmdLineParser.      */
DECL|method|parse (Repository repo, Set<String> refs, ListMultimap<String, String> pushOptions)
name|String
name|parse
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|refs
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pushOptions
parameter_list|)
throws|throws
name|CmdLineException
block|{
name|String
name|ref
init|=
name|RefNames
operator|.
name|fullName
argument_list|(
name|MagicBranch
operator|.
name|getDestBranchName
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|(
name|pushOptions
argument_list|)
decl_stmt|;
comment|// Process and lop off the "%OPTION" suffix.
name|int
name|optionStart
init|=
name|ref
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|optionStart
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|COMMAS
operator|.
name|split
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|optionStart
operator|+
literal|1
argument_list|)
argument_list|)
control|)
block|{
name|int
name|e
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|e
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|e
argument_list|)
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|e
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|put
argument_list|(
name|s
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|ref
operator|=
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|optionStart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cmdLineParser
operator|.
name|parseOptionMap
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|// We accept refs/for/BRANCHNAME/TOPIC. Since we don't know
comment|// for sure where the branch ends and the topic starts, look
comment|// backward for a split that works. This behavior has not been
comment|// documented and should probably be deprecated.
name|String
name|head
init|=
name|readHEAD
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|int
name|split
init|=
name|ref
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|name
init|=
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|head
argument_list|)
condition|)
block|{
break|break;
block|}
name|split
operator|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|split
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|<=
name|Constants
operator|.
name|R_REFS
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
if|if
condition|(
name|split
operator|<
name|ref
operator|.
name|length
argument_list|()
condition|)
block|{
name|topic
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|split
argument_list|)
return|;
block|}
DECL|method|getNotify ()
name|NotifyHandling
name|getNotify
parameter_list|()
block|{
if|if
condition|(
name|notify
operator|!=
literal|null
condition|)
block|{
return|return
name|notify
return|;
block|}
if|if
condition|(
name|workInProgress
condition|)
block|{
return|return
name|NotifyHandling
operator|.
name|OWNER
return|;
block|}
return|return
name|NotifyHandling
operator|.
name|ALL
return|;
block|}
DECL|method|getNotify (ChangeNotes notes)
name|NotifyHandling
name|getNotify
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
block|{
if|if
condition|(
name|notify
operator|!=
literal|null
condition|)
block|{
return|return
name|notify
return|;
block|}
if|if
condition|(
name|workInProgress
operator|||
operator|(
operator|!
name|ready
operator|&&
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
operator|)
condition|)
block|{
return|return
name|NotifyHandling
operator|.
name|OWNER
return|;
block|}
return|return
name|NotifyHandling
operator|.
name|ALL
return|;
block|}
block|}
comment|/**    * Parse the magic branch data (refs/for/BRANCH/OPTIONALTOPIC%OPTIONS) into the magicBranch    * member.    *    *<p>Assumes we are handling a magic branch here.    */
DECL|method|parseMagicBranch (ReceiveCommand cmd)
specifier|private
name|void
name|parseMagicBranch
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
comment|// Permit exactly one new change request per push.
if|if
condition|(
name|magicBranch
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Found magic branch %s"
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|magicBranch
operator|=
operator|new
name|MagicBranchInput
argument_list|(
name|user
argument_list|,
name|cmd
argument_list|,
name|labelTypes
argument_list|,
name|notesMigration
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|reviewer
operator|.
name|addAll
argument_list|(
name|extraReviewers
operator|.
name|get
argument_list|(
name|ReviewerStateInternal
operator|.
name|REVIEWER
argument_list|)
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|cc
operator|.
name|addAll
argument_list|(
name|extraReviewers
operator|.
name|get
argument_list|(
name|ReviewerStateInternal
operator|.
name|CC
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ref
decl_stmt|;
name|magicBranch
operator|.
name|cmdLineParser
operator|=
name|optionParserFactory
operator|.
name|create
argument_list|(
name|magicBranch
argument_list|)
expr_stmt|;
try|try
block|{
name|ref
operator|=
name|magicBranch
operator|.
name|parse
argument_list|(
name|repo
argument_list|,
name|receivePack
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|pushOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmdLineException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|magicBranch
operator|.
name|cmdLineParser
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Invalid branch syntax"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ref
operator|=
literal|null
expr_stmt|;
comment|// never happens
block|}
if|if
condition|(
name|magicBranch
operator|.
name|topic
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|topic
operator|.
name|length
argument_list|()
operator|>
name|ChangeUtil
operator|.
name|TOPIC_MAX_LENGTH
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"topic length exceeds the limit (%d)"
argument_list|,
name|ChangeUtil
operator|.
name|TOPIC_MAX_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|cmdLineParser
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"\nHelp for refs/for/branch:\n\n"
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|cmdLineParser
operator|.
name|printUsage
argument_list|(
name|w
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"see help"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|projectState
operator|.
name|isAllUsers
argument_list|()
operator|&&
name|RefNames
operator|.
name|REFS_USERS_SELF
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Handling %s"
argument_list|,
name|RefNames
operator|.
name|REFS_USERS_SELF
argument_list|)
expr_stmt|;
name|ref
operator|=
name|RefNames
operator|.
name|refsUsers
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|receivePack
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|equals
argument_list|(
name|readHEAD
argument_list|(
name|repo
argument_list|)
argument_list|)
operator|&&
operator|!
name|ref
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Ref %s not found"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
condition|)
block|{
name|String
name|n
init|=
name|ref
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|R_HEADS
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"branch "
operator|+
name|n
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|ref
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|magicBranch
operator|.
name|dest
operator|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|perm
operator|=
name|permissions
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
expr_stmt|;
try|try
block|{
name|magicBranch
operator|.
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|CREATE_CHANGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|denied
parameter_list|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|ReceiveError
operator|.
name|CODE_REVIEW
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|denied
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|projectState
operator|.
name|statePermitsWrite
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"project state does not permit write"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO(davido): Remove legacy support for drafts magic branch option
comment|// after repo-tool supports private and work-in-progress changes.
if|if
condition|(
name|magicBranch
operator|.
name|draft
operator|&&
operator|!
name|receiveConfig
operator|.
name|allowDrafts
condition|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|ReceiveError
operator|.
name|CODE_REVIEW
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"draft workflow is disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|isPrivate
operator|&&
name|magicBranch
operator|.
name|removePrivate
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"the options 'private' and 'remove-private' are mutually exclusive"
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|privateByDefault
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|PRIVATE_BY_DEFAULT
argument_list|)
decl_stmt|;
name|setChangeAsPrivate
operator|=
name|magicBranch
operator|.
name|draft
operator|||
name|magicBranch
operator|.
name|isPrivate
operator|||
operator|(
name|privateByDefault
operator|&&
operator|!
name|magicBranch
operator|.
name|removePrivate
operator|)
expr_stmt|;
if|if
condition|(
name|receiveConfig
operator|.
name|disablePrivateChanges
operator|&&
name|setChangeAsPrivate
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"private changes are disabled"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|workInProgress
operator|&&
name|magicBranch
operator|.
name|ready
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"the options 'wip' and 'ready' are mutually exclusive"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|publishComments
operator|&&
name|magicBranch
operator|.
name|noPublishComments
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"the options 'publish-comments' and 'no-publish-comments' are mutually exclusive"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|submit
condition|)
block|{
try|try
block|{
name|permissions
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|UPDATE_BY_SUBMIT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|RevWalk
name|walk
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|tip
decl_stmt|;
try|try
block|{
name|tip
operator|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|magicBranch
operator|.
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Tip of push: %s"
argument_list|,
name|tip
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|ex
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|destBranch
init|=
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|magicBranch
operator|.
name|merged
condition|)
block|{
if|if
condition|(
name|magicBranch
operator|.
name|base
operator|!=
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"cannot use merged with base"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevCommit
name|branchTip
init|=
name|readBranchTip
argument_list|(
name|cmd
argument_list|,
name|magicBranch
operator|.
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|branchTip
operator|==
literal|null
condition|)
block|{
return|return;
comment|// readBranchTip already rejected cmd.
block|}
if|if
condition|(
operator|!
name|walk
operator|.
name|isMergedInto
argument_list|(
name|tip
argument_list|,
name|branchTip
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"not merged into branch"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// If tip is a merge commit, or the root commit or
comment|// if %base or %merged was specified, ignore newChangeForAllNotInTarget.
if|if
condition|(
name|tip
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
operator|||
name|magicBranch
operator|.
name|base
operator|!=
literal|null
operator|||
name|magicBranch
operator|.
name|merged
operator|||
name|tip
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Forcing newChangeForAllNotInTarget = false"
argument_list|)
expr_stmt|;
name|newChangeForAllNotInTarget
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|magicBranch
operator|.
name|base
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Handling %%base: %s"
argument_list|,
name|magicBranch
operator|.
name|base
argument_list|)
expr_stmt|;
name|magicBranch
operator|.
name|baseCommit
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|magicBranch
operator|.
name|base
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|magicBranch
operator|.
name|base
control|)
block|{
try|try
block|{
name|magicBranch
operator|.
name|baseCommit
operator|.
name|add
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|notCommit
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"base must be a commit"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|e
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"base not found"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Project %s cannot read %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|id
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|newChangeForAllNotInTarget
condition|)
block|{
name|RevCommit
name|branchTip
init|=
name|readBranchTip
argument_list|(
name|cmd
argument_list|,
name|magicBranch
operator|.
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|branchTip
operator|==
literal|null
condition|)
block|{
return|return;
comment|// readBranchTip already rejected cmd.
block|}
name|magicBranch
operator|.
name|baseCommit
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Set baseCommit = %s"
argument_list|,
name|magicBranch
operator|.
name|baseCommit
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|ex
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error walking to %s in project %s"
argument_list|,
name|destBranch
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Validate that the new commits are connected with the target
comment|// branch.  If they aren't, we want to abort. We do this check by
comment|// looking to see if we can compute a merge base between the new
comment|// commits and the target branch head.
comment|//
try|try
block|{
name|Ref
name|targetRef
init|=
name|receivePack
operator|.
name|getAdvertisedRefs
argument_list|()
operator|.
name|get
argument_list|(
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRef
operator|==
literal|null
operator|||
name|targetRef
operator|.
name|getObjectId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// The destination branch does not yet exist. Assume the
comment|// history being sent for review will start it and thus
comment|// is "connected" to the branch.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Branch is unborn"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevCommit
name|h
init|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|targetRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Current branch tip: %s"
argument_list|,
name|h
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|RevFilter
name|oldRevFilter
init|=
name|walk
operator|.
name|getRevFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRevFilter
argument_list|(
name|RevFilter
operator|.
name|MERGE_BASE
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|walk
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"no common ancestry"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|setRevFilter
argument_list|(
name|oldRevFilter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readHEAD (Repository repo)
specifier|private
specifier|static
name|String
name|readHEAD
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
try|try
block|{
return|return
name|repo
operator|.
name|getFullBranch
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot read HEAD symref"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|readBranchTip (ReceiveCommand cmd, Branch.NameKey branch)
specifier|private
name|RevCommit
name|readBranchTip
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|,
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|IOException
block|{
name|Ref
name|r
init|=
name|allRefs
argument_list|()
operator|.
name|get
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|branch
operator|.
name|get
argument_list|()
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
return|;
block|}
comment|// Handle an upload to refs/changes/XX/CHANGED-NUMBER.
DECL|method|parseReplaceCommand (ReceiveCommand cmd, Change.Id changeId)
specifier|private
name|void
name|parseReplaceCommand
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Parsing replace command"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Type
operator|.
name|CREATE
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid usage"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevCommit
name|newCommit
decl_stmt|;
try|try
block|{
name|newCommit
operator|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Replacing with %s"
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot parse %s as commit"
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"invalid commit"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Change
name|changeEnt
decl_stmt|;
try|try
block|{
name|changeEnt
operator|=
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|changeId
argument_list|)
operator|.
name|getChange
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Change not found %s"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot lookup existing change %s"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|project
operator|.
name|getNameKey
argument_list|()
operator|.
name|equals
argument_list|(
name|changeEnt
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"change "
operator|+
name|changeId
operator|+
literal|" does not belong to project "
operator|+
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Replacing change %s"
argument_list|,
name|changeEnt
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|requestReplace
argument_list|(
name|cmd
argument_list|,
literal|true
argument_list|,
name|changeEnt
argument_list|,
name|newCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|requestReplace ( ReceiveCommand cmd, boolean checkMergedInto, Change change, RevCommit newCommit)
specifier|private
name|boolean
name|requestReplace
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|,
name|boolean
name|checkMergedInto
parameter_list|,
name|Change
name|change
parameter_list|,
name|RevCommit
name|newCommit
parameter_list|)
block|{
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|changeFormatter
operator|.
name|changeClosed
argument_list|(
name|ChangeReportFormatter
operator|.
name|Input
operator|.
name|builder
argument_list|()
operator|.
name|setChange
argument_list|(
name|change
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ReplaceRequest
name|req
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|cmd
argument_list|,
name|checkMergedInto
argument_list|)
decl_stmt|;
if|if
condition|(
name|replaceByChange
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"duplicate request"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|replaceByChange
operator|.
name|put
argument_list|(
name|req
operator|.
name|ontoChange
argument_list|,
name|req
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|selectNewAndReplacedChangesFromMagicBranch ()
specifier|private
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|selectNewAndReplacedChangesFromMagicBranch
parameter_list|()
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Finding new and replaced changes"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|existing
init|=
name|changeRefsById
argument_list|()
decl_stmt|;
name|GroupCollector
name|groupCollector
init|=
name|GroupCollector
operator|.
name|create
argument_list|(
name|changeRefsById
argument_list|()
argument_list|,
name|db
argument_list|,
name|psUtil
argument_list|,
name|notesFactory
argument_list|,
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|RevCommit
name|start
init|=
name|setUpWalkForSelectingChanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|LinkedHashMap
argument_list|<
name|RevCommit
argument_list|,
name|ChangeLookup
argument_list|>
name|pending
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Change
operator|.
name|Key
argument_list|>
name|newChangeIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|maxBatchChanges
init|=
name|receiveConfig
operator|.
name|getEffectiveMaxBatchChangesLimit
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
name|int
name|alreadyTracked
init|=
literal|0
decl_stmt|;
name|boolean
name|rejectImplicitMerges
init|=
name|start
operator|.
name|getParentCount
argument_list|()
operator|==
literal|1
operator|&&
name|projectCache
operator|.
name|get
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|REJECT_IMPLICIT_MERGES
argument_list|)
comment|// Don't worry about implicit merges when creating changes for
comment|// already-merged commits; they're already in history, so it's too
comment|// late.
operator|&&
operator|!
name|magicBranch
operator|.
name|merged
decl_stmt|;
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|mergedParents
decl_stmt|;
if|if
condition|(
name|rejectImplicitMerges
condition|)
block|{
name|mergedParents
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mergedParents
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|RevCommit
name|c
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|total
operator|++
expr_stmt|;
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|c
operator|.
name|name
argument_list|()
decl_stmt|;
name|groupCollector
operator|.
name|visit
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Ref
argument_list|>
name|existingRefs
init|=
name|existing
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|rejectImplicitMerges
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|mergedParents
argument_list|,
name|c
operator|.
name|getParents
argument_list|()
argument_list|)
expr_stmt|;
name|mergedParents
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|boolean
name|commitAlreadyTracked
init|=
operator|!
name|existingRefs
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitAlreadyTracked
condition|)
block|{
name|alreadyTracked
operator|++
expr_stmt|;
comment|// Corner cases where an existing commit might need a new group:
comment|// A) Existing commit has a null group; wasn't assigned during schema
comment|//    upgrade, or schema upgrade is performed on a running server.
comment|// B) Let A<-B<-C, then:
comment|//      1. Push A to refs/heads/master
comment|//      2. Push B to refs/for/master
comment|//      3. Force push A~ to refs/heads/master
comment|//      4. Push C to refs/for/master.
comment|//      B will be in existing so we aren't replacing the patch set. It
comment|//      used to have its own group, but now needs to to be changed to
comment|//      A's group.
comment|// C) Commit is a PatchSet of a pre-existing change uploaded with a
comment|//    different target branch.
for|for
control|(
name|Ref
name|ref
range|:
name|existingRefs
control|)
block|{
name|updateGroups
operator|.
name|add
argument_list|(
operator|new
name|UpdateGroupsRequest
argument_list|(
name|ref
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|newChangeForAllNotInTarget
operator|||
name|magicBranch
operator|.
name|base
operator|!=
literal|null
operator|)
condition|)
block|{
continue|continue;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pending
operator|.
name|put
argument_list|(
name|c
argument_list|,
operator|new
name|ChangeLookup
argument_list|(
name|c
argument_list|,
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|idList
operator|.
name|get
argument_list|(
name|idList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pending
operator|.
name|put
argument_list|(
name|c
argument_list|,
operator|new
name|ChangeLookup
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|n
init|=
name|pending
operator|.
name|size
argument_list|()
operator|+
name|newChanges
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxBatchChanges
operator|!=
literal|0
operator|&&
name|n
operator|>
name|maxBatchChanges
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"%d changes exceeds limit of %d"
argument_list|,
name|n
argument_list|,
name|maxBatchChanges
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"the number of pushed changes in a batch exceeds the max limit "
operator|+
name|maxBatchChanges
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|commitAlreadyTracked
condition|)
block|{
name|boolean
name|changeExistsOnDestBranch
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|pending
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|destChanges
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|magicBranch
operator|.
name|dest
argument_list|)
condition|)
block|{
name|changeExistsOnDestBranch
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|changeExistsOnDestBranch
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Creating new change for %s even though it is already tracked"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|magicBranch
operator|.
name|dest
argument_list|,
name|magicBranch
operator|.
name|cmd
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
condition|)
block|{
comment|// Not a change the user can propose? Abort as early as possible.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Aborting early due to invalid commit"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// Don't allow merges to be uploaded in commit chain via all-not-in-target
if|if
condition|(
name|newChangeForAllNotInTarget
operator|&&
name|c
operator|.
name|getParentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"Pushing merges in commit chains with 'all not in target' is not allowed,\n"
operator|+
literal|"to override please set the base manually"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Rejecting merge commit %s with newChangeForAllNotInTarget"
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Should we early return here?
block|}
if|if
condition|(
name|idList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newChanges
operator|.
name|add
argument_list|(
operator|new
name|CreateRequest
argument_list|(
name|c
argument_list|,
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Finished initial RevWalk with %d commits total: %d already"
operator|+
literal|" tracked, %d new changes with no Change-Id, and %d deferred"
operator|+
literal|" lookups"
argument_list|,
name|total
argument_list|,
name|alreadyTracked
argument_list|,
name|newChanges
operator|.
name|size
argument_list|()
argument_list|,
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rejectImplicitMerges
condition|)
block|{
name|rejectImplicitMerges
argument_list|(
name|mergedParents
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ChangeLookup
argument_list|>
name|itr
init|=
name|pending
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ChangeLookup
name|p
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|changeKey
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|newChangeIds
operator|.
name|contains
argument_list|(
name|p
operator|.
name|changeKey
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Multiple commits with Change-Id %s"
argument_list|,
name|p
operator|.
name|changeKey
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
name|SAME_CHANGE_ID_IN_MULTIPLE_CHANGES
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
init|=
name|p
operator|.
name|destChanges
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Multiple changes in branch %s with Change-Id %s: %s"
argument_list|,
name|magicBranch
operator|.
name|dest
argument_list|,
name|p
operator|.
name|changeKey
argument_list|,
name|changes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|cd
lambda|->
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// WTF, multiple changes in this branch have the same key?
comment|// Since the commit is new, the user should recreate it with
comment|// a different Change-Id. In practice, we should never see
comment|// this error message as Change-Id should be unique per branch.
comment|//
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
name|p
operator|.
name|changeKey
operator|.
name|get
argument_list|()
operator|+
literal|" has duplicates"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Schedule as a replacement to this one matching change.
comment|//
name|RevId
name|currentPs
init|=
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|currentPatchSet
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
comment|// If Commit is already current PatchSet of target Change.
if|if
condition|(
name|p
operator|.
name|commit
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|currentPs
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// There are no commits left to check, all commits in pending were already
comment|// current PatchSet of the corresponding target changes.
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"commit(s) already exists (as current patchset)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Commit is already current PatchSet.
comment|// Remove from pending and try next commit.
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|requestReplace
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|false
argument_list|,
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|change
argument_list|()
argument_list|,
name|p
operator|.
name|commit
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isValidChangeId
argument_list|(
name|p
operator|.
name|changeKey
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"invalid Change-Id"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// In case the change look up from the index failed,
comment|// double check against the existing refs
if|if
condition|(
name|foundInExistingRef
argument_list|(
name|existing
operator|.
name|get
argument_list|(
name|p
operator|.
name|commit
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"commit(s) already exists (as current patchset)"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|newChangeIds
operator|.
name|add
argument_list|(
name|p
operator|.
name|changeKey
argument_list|)
expr_stmt|;
block|}
name|newChanges
operator|.
name|add
argument_list|(
operator|new
name|CreateRequest
argument_list|(
name|p
operator|.
name|commit
argument_list|,
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Finished deferred lookups with %d updates and %d new changes"
argument_list|,
name|replaceByChange
operator|.
name|size
argument_list|()
argument_list|,
name|newChanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Should never happen, the core receive process would have
comment|// identified the missing object earlier before we got control.
comment|//
name|magicBranch
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot query database to locate prior changes"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"database error"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|newChanges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|replaceByChange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"no new changes"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|newChanges
operator|.
name|isEmpty
argument_list|()
operator|&&
name|magicBranch
operator|.
name|edit
condition|)
block|{
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"edit is not supported for new changes"
argument_list|)
expr_stmt|;
return|return
name|newChanges
return|;
block|}
try|try
block|{
name|SortedSetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|String
argument_list|>
name|groups
init|=
name|groupCollector
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|newIds
init|=
name|seq
operator|.
name|nextChangeIds
argument_list|(
name|newChanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newChanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CreateRequest
name|create
init|=
name|newChanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|create
operator|.
name|setChangeId
argument_list|(
name|newIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|.
name|groups
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|groups
operator|.
name|get
argument_list|(
name|create
operator|.
name|commit
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReplaceRequest
name|replace
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
name|replace
operator|.
name|groups
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|groups
operator|.
name|get
argument_list|(
name|replace
operator|.
name|newCommitId
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|UpdateGroupsRequest
name|update
range|:
name|updateGroups
control|)
block|{
name|update
operator|.
name|groups
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
operator|(
name|groups
operator|.
name|get
argument_list|(
name|update
operator|.
name|commit
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Finished updating groups from GroupCollector"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error collecting groups for changes"
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
return|return
name|newChanges
return|;
block|}
DECL|method|foundInExistingRef (Collection<Ref> existingRefs)
specifier|private
name|boolean
name|foundInExistingRef
parameter_list|(
name|Collection
argument_list|<
name|Ref
argument_list|>
name|existingRefs
parameter_list|)
throws|throws
name|OrmException
block|{
for|for
control|(
name|Ref
name|ref
range|:
name|existingRefs
control|)
block|{
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|Change
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Change
name|change
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|magicBranch
operator|.
name|dest
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Found change %s from existing refs."
argument_list|,
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reindex the change asynchronously, ignoring errors.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|indexer
operator|.
name|indexAsync
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|setUpWalkForSelectingChanges ()
specifier|private
name|RevCommit
name|setUpWalkForSelectingChanges
parameter_list|()
throws|throws
name|IOException
block|{
name|RevWalk
name|rw
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|start
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|magicBranch
operator|.
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|markStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|.
name|baseCommit
operator|!=
literal|null
condition|)
block|{
name|markExplicitBasesUninteresting
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|magicBranch
operator|.
name|merged
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Marking parents of merged commit %s uninteresting"
argument_list|,
name|start
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|start
operator|.
name|getParents
argument_list|()
control|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|markHeadsAsUninteresting
argument_list|(
name|rw
argument_list|,
name|magicBranch
operator|.
name|dest
operator|!=
literal|null
condition|?
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|start
return|;
block|}
DECL|method|markExplicitBasesUninteresting ()
specifier|private
name|void
name|markExplicitBasesUninteresting
parameter_list|()
throws|throws
name|IOException
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Marking %d base commits uninteresting"
argument_list|,
name|magicBranch
operator|.
name|baseCommit
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RevCommit
name|c
range|:
name|magicBranch
operator|.
name|baseCommit
control|)
block|{
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|markUninteresting
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|Ref
name|targetRef
init|=
name|allRefs
argument_list|()
operator|.
name|get
argument_list|(
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRef
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Marking target ref %s (%s) uninteresting"
argument_list|,
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
argument_list|,
name|targetRef
operator|.
name|getObjectId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|markUninteresting
argument_list|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|targetRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rejectImplicitMerges (Set<RevCommit> mergedParents)
specifier|private
name|void
name|rejectImplicitMerges
parameter_list|(
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|mergedParents
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|mergedParents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Ref
name|targetRef
init|=
name|allRefs
argument_list|()
operator|.
name|get
argument_list|(
name|magicBranch
operator|.
name|dest
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRef
operator|!=
literal|null
condition|)
block|{
name|RevWalk
name|rw
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|tip
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|targetRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|containsImplicitMerges
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RevCommit
name|p
range|:
name|mergedParents
control|)
block|{
name|containsImplicitMerges
operator|&=
operator|!
name|rw
operator|.
name|isMergedInto
argument_list|(
name|p
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsImplicitMerges
condition|)
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|RevCommit
name|p
range|:
name|mergedParents
control|)
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|rw
operator|.
name|markUninteresting
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
operator|new
name|CommitValidationMessage
argument_list|(
literal|"ERROR: Implicit Merge of "
operator|+
name|c
operator|.
name|abbreviate
argument_list|(
literal|7
argument_list|)
operator|.
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getShortMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reject
argument_list|(
name|magicBranch
operator|.
name|cmd
argument_list|,
literal|"implicit merges detected"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Mark all branch tips as uninteresting in the given revwalk,
comment|// so we get only the new commits when walking rw.
DECL|method|markHeadsAsUninteresting (RevWalk rw, @Nullable String forRef)
specifier|private
name|void
name|markHeadsAsUninteresting
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
annotation|@
name|Nullable
name|String
name|forRef
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|allRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|R_HEADS
argument_list|)
operator|||
name|ref
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|forRef
argument_list|)
operator|)
operator|&&
name|ref
operator|.
name|getObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid ref %s in %s"
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Marked %d heads as uninteresting"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|isValidChangeId (String idStr)
specifier|private
specifier|static
name|boolean
name|isValidChangeId
parameter_list|(
name|String
name|idStr
parameter_list|)
block|{
return|return
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I[0-9a-fA-F]{40}$"
argument_list|)
operator|&&
operator|!
name|idStr
operator|.
name|matches
argument_list|(
literal|"^I00*$"
argument_list|)
return|;
block|}
DECL|class|ChangeLookup
specifier|private
class|class
name|ChangeLookup
block|{
DECL|field|commit
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|changeKey
specifier|final
name|Change
operator|.
name|Key
name|changeKey
decl_stmt|;
DECL|field|destChanges
specifier|final
name|List
argument_list|<
name|ChangeData
argument_list|>
name|destChanges
decl_stmt|;
DECL|method|ChangeLookup (RevCommit c, Change.Key key)
name|ChangeLookup
parameter_list|(
name|RevCommit
name|c
parameter_list|,
name|Change
operator|.
name|Key
name|key
parameter_list|)
throws|throws
name|OrmException
block|{
name|commit
operator|=
name|c
expr_stmt|;
name|changeKey
operator|=
name|key
expr_stmt|;
name|destChanges
operator|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byBranchKey
argument_list|(
name|magicBranch
operator|.
name|dest
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|ChangeLookup (RevCommit c)
name|ChangeLookup
parameter_list|(
name|RevCommit
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
name|commit
operator|=
name|c
expr_stmt|;
name|destChanges
operator|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byBranchCommit
argument_list|(
name|magicBranch
operator|.
name|dest
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|changeKey
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|CreateRequest
specifier|private
class|class
name|CreateRequest
block|{
DECL|field|commit
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|refName
specifier|private
specifier|final
name|String
name|refName
decl_stmt|;
DECL|field|changeId
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|cmd
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|ins
name|ChangeInserter
name|ins
decl_stmt|;
DECL|field|groups
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|change
name|Change
name|change
decl_stmt|;
DECL|method|CreateRequest (RevCommit commit, String refName)
name|CreateRequest
parameter_list|(
name|RevCommit
name|commit
parameter_list|,
name|String
name|refName
parameter_list|)
block|{
name|this
operator|.
name|commit
operator|=
name|commit
expr_stmt|;
name|this
operator|.
name|refName
operator|=
name|refName
expr_stmt|;
block|}
DECL|method|setChangeId (int id)
specifier|private
name|void
name|setChangeId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|possiblyOverrideWorkInProgress
argument_list|()
expr_stmt|;
name|changeId
operator|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ins
operator|=
name|changeInserterFactory
operator|.
name|create
argument_list|(
name|changeId
argument_list|,
name|commit
argument_list|,
name|refName
argument_list|)
operator|.
name|setTopic
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
operator|.
name|setPrivate
argument_list|(
name|setChangeAsPrivate
argument_list|)
operator|.
name|setWorkInProgress
argument_list|(
name|magicBranch
operator|.
name|workInProgress
argument_list|)
comment|// Changes already validated in validateNewCommits.
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|.
name|merged
condition|)
block|{
name|ins
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|commit
argument_list|,
name|ins
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|receivePack
operator|.
name|getPushCertificate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ins
operator|.
name|setPushCertificate
argument_list|(
name|receivePack
operator|.
name|getPushCertificate
argument_list|()
operator|.
name|toTextWithSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|possiblyOverrideWorkInProgress ()
specifier|private
name|void
name|possiblyOverrideWorkInProgress
parameter_list|()
block|{
comment|// When wip or ready explicitly provided, leave it as is.
if|if
condition|(
name|magicBranch
operator|.
name|workInProgress
operator|||
name|magicBranch
operator|.
name|ready
condition|)
block|{
return|return;
block|}
name|magicBranch
operator|.
name|workInProgress
operator|=
name|projectState
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|WORK_IN_PROGRESS_BY_DEFAULT
argument_list|)
operator|||
name|firstNonNull
argument_list|(
name|user
operator|.
name|state
argument_list|()
operator|.
name|getGeneralPreferences
argument_list|()
operator|.
name|workInProgressByDefault
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|addOps (BatchUpdate bu)
specifier|private
name|void
name|addOps
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|)
throws|throws
name|RestApiException
block|{
name|checkState
argument_list|(
name|changeId
operator|!=
literal|null
argument_list|,
literal|"must call setChangeId before addOps"
argument_list|)
expr_stmt|;
try|try
block|{
name|RevWalk
name|rw
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|ins
operator|.
name|setGroups
argument_list|(
name|groups
argument_list|)
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|me
init|=
name|user
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FooterLine
argument_list|>
name|footerLines
init|=
name|commit
operator|.
name|getFooterLines
argument_list|()
decl_stmt|;
name|MailRecipients
name|recipients
init|=
operator|new
name|MailRecipients
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|approvals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|checkNotNull
argument_list|(
name|magicBranch
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|add
argument_list|(
name|magicBranch
operator|.
name|getMailRecipients
argument_list|()
argument_list|)
expr_stmt|;
name|approvals
operator|=
name|magicBranch
operator|.
name|labels
expr_stmt|;
name|recipients
operator|.
name|add
argument_list|(
name|getRecipientsFromFooters
argument_list|(
name|accountResolver
argument_list|,
name|footerLines
argument_list|)
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|remove
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
name|ApprovalsUtil
operator|.
name|renderMessageWithApprovals
argument_list|(
name|psId
operator|.
name|get
argument_list|()
argument_list|,
name|approvals
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|PatchSetApproval
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|magicBranch
operator|.
name|message
argument_list|)
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|magicBranch
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
name|bu
operator|.
name|insertChange
argument_list|(
name|ins
operator|.
name|setReviewers
argument_list|(
name|recipients
operator|.
name|getReviewers
argument_list|()
argument_list|)
operator|.
name|setExtraCC
argument_list|(
name|recipients
operator|.
name|getCcOnly
argument_list|()
argument_list|)
operator|.
name|setApprovals
argument_list|(
name|approvals
argument_list|)
operator|.
name|setMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setNotify
argument_list|(
name|magicBranch
operator|.
name|getNotify
argument_list|()
argument_list|)
operator|.
name|setAccountsToNotify
argument_list|(
name|magicBranch
operator|.
name|getAccountsToNotify
argument_list|()
argument_list|)
operator|.
name|setRequestScopePropagator
argument_list|(
name|requestScopePropagator
argument_list|)
operator|.
name|setSendMail
argument_list|(
literal|true
argument_list|)
operator|.
name|setPatchSetDescription
argument_list|(
name|magicBranch
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|magicBranch
operator|.
name|hashtags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Any change owner is allowed to add hashtags when creating a change.
name|bu
operator|.
name|addOp
argument_list|(
name|changeId
argument_list|,
name|hashtagsFactory
operator|.
name|create
argument_list|(
operator|new
name|HashtagsInput
argument_list|(
name|magicBranch
operator|.
name|hashtags
argument_list|)
argument_list|)
operator|.
name|setFireEvent
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
condition|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|changeId
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
operator|.
name|setTopic
argument_list|(
name|magicBranch
operator|.
name|topic
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|bu
operator|.
name|addOp
argument_list|(
name|changeId
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
name|change
operator|=
name|ctx
operator|.
name|getChange
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|changeId
argument_list|,
operator|new
name|ChangeProgressOp
argument_list|(
name|newProgress
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|INSERT_EXCEPTION
operator|.
name|apply
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|submit (Collection<CreateRequest> create, Collection<ReplaceRequest> replace)
specifier|private
name|void
name|submit
parameter_list|(
name|Collection
argument_list|<
name|CreateRequest
argument_list|>
name|create
parameter_list|,
name|Collection
argument_list|<
name|ReplaceRequest
argument_list|>
name|replace
parameter_list|)
throws|throws
name|OrmException
throws|,
name|RestApiException
throws|,
name|UpdateException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|PermissionBackendException
block|{
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|Change
argument_list|>
name|bySha
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|create
operator|.
name|size
argument_list|()
operator|+
name|replace
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CreateRequest
name|r
range|:
name|create
control|)
block|{
name|checkNotNull
argument_list|(
name|r
operator|.
name|change
argument_list|,
literal|"cannot submit new change %s; op may not have run"
argument_list|,
name|r
operator|.
name|changeId
argument_list|)
expr_stmt|;
name|bySha
operator|.
name|put
argument_list|(
name|r
operator|.
name|commit
argument_list|,
name|r
operator|.
name|change
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReplaceRequest
name|r
range|:
name|replace
control|)
block|{
name|bySha
operator|.
name|put
argument_list|(
name|r
operator|.
name|newCommitId
argument_list|,
name|r
operator|.
name|notes
operator|.
name|getChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Change
name|tipChange
init|=
name|bySha
operator|.
name|get
argument_list|(
name|magicBranch
operator|.
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|tipChange
argument_list|,
literal|"tip of push does not correspond to a change; found these changes: %s"
argument_list|,
name|bySha
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Processing submit with tip change %s (%s)"
argument_list|,
name|tipChange
operator|.
name|getId
argument_list|()
argument_list|,
name|magicBranch
operator|.
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|MergeOp
name|op
init|=
name|mergeOpProvider
operator|.
name|get
argument_list|()
init|)
block|{
name|op
operator|.
name|merge
argument_list|(
name|db
argument_list|,
name|tipChange
argument_list|,
name|user
argument_list|,
literal|false
argument_list|,
operator|new
name|SubmitInput
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|preparePatchSetsForReplace (List<CreateRequest> newChanges)
specifier|private
name|void
name|preparePatchSetsForReplace
parameter_list|(
name|List
argument_list|<
name|CreateRequest
argument_list|>
name|newChanges
parameter_list|)
block|{
try|try
block|{
name|readChangesForReplace
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ReplaceRequest
argument_list|>
name|itr
init|=
name|replaceByChange
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ReplaceRequest
name|req
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|validate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot read database before replacement for project %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|PermissionBackendException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot read repository before replacement for project %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|==
name|NOT_ATTEMPTED
condition|)
block|{
name|req
operator|.
name|inputCommand
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Read %d changes to replace"
argument_list|,
name|replaceByChange
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
name|magicBranch
operator|.
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
comment|// Cancel creations tied to refs/for/ or refs/drafts/ command.
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceByChange
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|req
operator|.
name|inputCommand
operator|==
name|magicBranch
operator|.
name|cmd
operator|&&
name|req
operator|.
name|cmd
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CreateRequest
name|req
range|:
name|newChanges
control|)
block|{
name|req
operator|.
name|cmd
operator|.
name|setResult
argument_list|(
name|Result
operator|.
name|REJECTED_OTHER_REASON
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readChangesForReplace ()
specifier|private
name|void
name|readChangesForReplace
parameter_list|()
throws|throws
name|OrmException
block|{
name|Collection
argument_list|<
name|ChangeNotes
argument_list|>
name|allNotes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|replaceByChange
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|r
operator|.
name|ontoChange
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeNotes
name|notes
range|:
name|allNotes
control|)
block|{
name|replaceByChange
operator|.
name|get
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|notes
operator|=
name|notes
expr_stmt|;
block|}
block|}
DECL|class|ReplaceRequest
specifier|private
class|class
name|ReplaceRequest
block|{
DECL|field|ontoChange
specifier|final
name|Change
operator|.
name|Id
name|ontoChange
decl_stmt|;
DECL|field|newCommitId
specifier|final
name|ObjectId
name|newCommitId
decl_stmt|;
DECL|field|inputCommand
specifier|final
name|ReceiveCommand
name|inputCommand
decl_stmt|;
DECL|field|checkMergedInto
specifier|final
name|boolean
name|checkMergedInto
decl_stmt|;
DECL|field|notes
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|revisions
name|BiMap
argument_list|<
name|RevCommit
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
decl_stmt|;
DECL|field|psId
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|prev
name|ReceiveCommand
name|prev
decl_stmt|;
DECL|field|cmd
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|field|info
name|PatchSetInfo
name|info
decl_stmt|;
DECL|field|priorPatchSet
specifier|private
name|PatchSet
operator|.
name|Id
name|priorPatchSet
decl_stmt|;
DECL|field|groups
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|replaceOp
specifier|private
name|ReplaceOp
name|replaceOp
decl_stmt|;
DECL|method|ReplaceRequest ( Change.Id toChange, RevCommit newCommit, ReceiveCommand cmd, boolean checkMergedInto)
name|ReplaceRequest
parameter_list|(
name|Change
operator|.
name|Id
name|toChange
parameter_list|,
name|RevCommit
name|newCommit
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|,
name|boolean
name|checkMergedInto
parameter_list|)
block|{
name|this
operator|.
name|ontoChange
operator|=
name|toChange
expr_stmt|;
name|this
operator|.
name|newCommitId
operator|=
name|newCommit
operator|.
name|copy
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputCommand
operator|=
name|checkNotNull
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkMergedInto
operator|=
name|checkMergedInto
expr_stmt|;
name|revisions
operator|=
name|HashBiMap
operator|.
name|create
argument_list|()
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|refs
argument_list|(
name|toChange
argument_list|)
control|)
block|{
try|try
block|{
name|revisions
operator|.
name|forcePut
argument_list|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Project %s contains invalid change ref %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Validate the new patch set commit for this change.      *      *<p><strong>Side effects:</strong>      *      *<ul>      *<li>May add error or warning messages to the progress monitor      *<li>Will reject {@code cmd} prior to returning false      *<li>May reset {@code receivePack.getRevWalk()}; do not call in the middle of a walk.      *</ul>      *      * @param autoClose whether the caller intends to auto-close the change after adding a new patch      *     set.      * @return whether the new commit is valid      * @throws IOException      * @throws OrmException      * @throws PermissionBackendException      */
DECL|method|validate (boolean autoClose)
name|boolean
name|validate
parameter_list|(
name|boolean
name|autoClose
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
throws|,
name|PermissionBackendException
block|{
if|if
condition|(
operator|!
name|autoClose
operator|&&
name|inputCommand
operator|.
name|getResult
argument_list|()
operator|!=
name|NOT_ATTEMPTED
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|notes
operator|==
literal|null
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Change
name|change
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|priorPatchSet
operator|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsValue
argument_list|(
name|priorPatchSet
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" missing revisions"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|RevCommit
name|newCommit
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|newCommitId
argument_list|)
decl_stmt|;
name|RevCommit
name|priorCommit
init|=
name|revisions
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|priorPatchSet
argument_list|)
decl_stmt|;
comment|// Not allowed to create a new patch set if the current patch set is locked.
if|if
condition|(
name|psUtil
operator|.
name|isPatchSetLocked
argument_list|(
name|notes
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"cannot add patch set to "
operator|+
name|ontoChange
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|permissions
operator|.
name|change
argument_list|(
name|notes
argument_list|)
operator|.
name|database
argument_list|(
name|db
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|ADD_PATCH_SET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|no
parameter_list|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"cannot add patch set to "
operator|+
name|ontoChange
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|projectState
operator|.
name|statePermitsWrite
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"cannot add patch set to "
operator|+
name|ontoChange
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"change "
operator|+
name|ontoChange
operator|+
literal|" closed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|revisions
operator|.
name|containsKey
argument_list|(
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"commit already exists (in the change)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|Ref
name|r
range|:
name|receivePack
operator|.
name|getRepository
argument_list|()
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
literal|"refs/changes"
argument_list|)
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getObjectId
argument_list|()
operator|.
name|equals
argument_list|(
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
literal|"commit already exists (in the project)"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|RevCommit
name|prior
range|:
name|revisions
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// Don't allow a change to directly depend upon itself. This is a
comment|// very common error due to users making a new commit rather than
comment|// amending when trying to address review comments.
if|if
condition|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|isMergedInto
argument_list|(
name|prior
argument_list|,
name|newCommit
argument_list|)
condition|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
name|SAME_CHANGE_ID_IN_MULTIPLE_CHANGES
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|change
operator|.
name|getDest
argument_list|()
argument_list|,
name|inputCommand
argument_list|,
name|newCommit
argument_list|,
name|change
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|priorCommit
argument_list|)
expr_stmt|;
comment|// Don't allow the same tree if the commit message is unmodified
comment|// or no parents were updated (rebase), else warn that only part
comment|// of the commit was modified.
if|if
condition|(
name|newCommit
operator|.
name|getTree
argument_list|()
operator|.
name|equals
argument_list|(
name|priorCommit
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|messageEq
init|=
name|Objects
operator|.
name|equals
argument_list|(
name|newCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|priorCommit
operator|.
name|getFullMessage
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|parentsEq
init|=
name|parentsEqual
argument_list|(
name|newCommit
argument_list|,
name|priorCommit
argument_list|)
decl_stmt|;
name|boolean
name|authorEq
init|=
name|authorEqual
argument_list|(
name|newCommit
argument_list|,
name|priorCommit
argument_list|)
decl_stmt|;
name|ObjectReader
name|reader
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageEq
operator|&&
name|parentsEq
operator|&&
name|authorEq
operator|&&
operator|!
name|autoClose
condition|)
block|{
name|addMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(W) No changes between prior commit %s and new commit %s"
argument_list|,
name|reader
operator|.
name|abbreviate
argument_list|(
name|priorCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|reader
operator|.
name|abbreviate
argument_list|(
name|newCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"(I) "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|reader
operator|.
name|abbreviate
argument_list|(
name|newCommit
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" no files changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authorEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", author changed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", message updated"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentsEq
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", was rebased"
argument_list|)
expr_stmt|;
block|}
name|addMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
operator|(
name|magicBranch
operator|.
name|workInProgress
operator|||
name|magicBranch
operator|.
name|ready
operator|)
operator|&&
name|magicBranch
operator|.
name|workInProgress
operator|!=
name|change
operator|.
name|isWorkInProgress
argument_list|()
operator|&&
operator|!
name|user
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|hasWriteConfigPermission
init|=
literal|false
decl_stmt|;
try|try
block|{
name|permissions
operator|.
name|check
argument_list|(
name|ProjectPermission
operator|.
name|WRITE_CONFIG
argument_list|)
expr_stmt|;
name|hasWriteConfigPermission
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
comment|// Do nothing.
block|}
if|if
condition|(
operator|!
name|hasWriteConfigPermission
condition|)
block|{
try|try
block|{
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|check
argument_list|(
name|GlobalPermission
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e1
parameter_list|)
block|{
name|reject
argument_list|(
name|inputCommand
argument_list|,
name|ONLY_CHANGE_OWNER_OR_PROJECT_OWNER_CAN_MODIFY_WIP
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
operator|(
name|magicBranch
operator|.
name|edit
operator|||
name|magicBranch
operator|.
name|draft
operator|)
condition|)
block|{
return|return
name|newEdit
argument_list|()
return|;
block|}
name|newPatchSet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|newEdit ()
specifier|private
name|boolean
name|newEdit
parameter_list|()
block|{
name|psId
operator|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|edit
init|=
literal|null
decl_stmt|;
try|try
block|{
name|edit
operator|=
name|editUtil
operator|.
name|byChange
argument_list|(
name|notes
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot retrieve edit"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|edit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
comment|// replace edit
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
argument_list|,
name|newCommitId
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete old edit ref on rebase
name|prev
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getEditCommit
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|edit
operator|.
name|get
argument_list|()
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|createEditCommand
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|createEditCommand
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createEditCommand ()
specifier|private
name|void
name|createEditCommand
parameter_list|()
block|{
comment|// create new edit
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newCommitId
argument_list|,
name|RefNames
operator|.
name|refsEdit
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newPatchSet ()
specifier|private
name|void
name|newPatchSet
parameter_list|()
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|RevCommit
name|newCommit
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|newCommitId
argument_list|)
decl_stmt|;
name|psId
operator|=
name|ChangeUtil
operator|.
name|nextPatchSetIdFromAllRefsMap
argument_list|(
name|allRefs
argument_list|()
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|patchSetInfoFactory
operator|.
name|get
argument_list|(
name|receivePack
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|newCommit
argument_list|,
name|psId
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newCommitId
argument_list|,
name|psId
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addOps (BatchUpdate bu, @Nullable Task progress)
name|void
name|addOps
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|,
annotation|@
name|Nullable
name|Task
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|magicBranch
operator|!=
literal|null
operator|&&
operator|(
name|magicBranch
operator|.
name|edit
operator|||
name|magicBranch
operator|.
name|draft
operator|)
condition|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|ReindexOnlyOp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|bu
operator|.
name|addRepoOnlyOp
argument_list|(
operator|new
name|UpdateOneRefOp
argument_list|(
name|prev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bu
operator|.
name|addRepoOnlyOp
argument_list|(
operator|new
name|UpdateOneRefOp
argument_list|(
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RevWalk
name|rw
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
comment|// TODO(dborowitz): Move to ReplaceOp#updateRepo.
name|RevCommit
name|newCommit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|newCommitId
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|newCommit
argument_list|)
expr_stmt|;
name|RevCommit
name|priorCommit
init|=
name|revisions
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|priorPatchSet
argument_list|)
decl_stmt|;
name|replaceOp
operator|=
name|replaceOpFactory
operator|.
name|create
argument_list|(
name|projectState
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|checkMergedInto
argument_list|,
name|priorPatchSet
argument_list|,
name|priorCommit
argument_list|,
name|psId
argument_list|,
name|newCommit
argument_list|,
name|info
argument_list|,
name|groups
argument_list|,
name|magicBranch
argument_list|,
name|receivePack
operator|.
name|getPushCertificate
argument_list|()
argument_list|)
operator|.
name|setRequestScopePropagator
argument_list|(
name|requestScopePropagator
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|replaceOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
operator|new
name|ChangeProgressOp
argument_list|(
name|progress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRejectMessage ()
name|String
name|getRejectMessage
parameter_list|()
block|{
return|return
name|replaceOp
operator|!=
literal|null
condition|?
name|replaceOp
operator|.
name|getRejectMessage
argument_list|()
else|:
literal|null
return|;
block|}
block|}
DECL|class|UpdateGroupsRequest
specifier|private
class|class
name|UpdateGroupsRequest
block|{
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|commit
specifier|private
specifier|final
name|RevCommit
name|commit
decl_stmt|;
DECL|field|groups
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|method|UpdateGroupsRequest (Ref ref, RevCommit commit)
name|UpdateGroupsRequest
parameter_list|(
name|Ref
name|ref
parameter_list|,
name|RevCommit
name|commit
parameter_list|)
block|{
name|this
operator|.
name|psId
operator|=
name|checkNotNull
argument_list|(
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|commit
operator|=
name|commit
expr_stmt|;
block|}
DECL|method|addOps (BatchUpdate bu)
specifier|private
name|void
name|addOps
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|PatchSet
name|ps
init|=
name|psUtil
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oldGroups
init|=
name|ps
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldGroups
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sameGroups
argument_list|(
name|oldGroups
argument_list|,
name|groups
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|psUtil
operator|.
name|setGroups
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
argument_list|,
name|ps
argument_list|,
name|groups
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|sameGroups (List<String> a, List<String> b)
specifier|private
name|boolean
name|sameGroups
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|a
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|b
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|a
argument_list|)
operator|.
name|equals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|UpdateOneRefOp
specifier|private
class|class
name|UpdateOneRefOp
implements|implements
name|RepoOnlyOp
block|{
DECL|field|cmd
specifier|private
specifier|final
name|ReceiveCommand
name|cmd
decl_stmt|;
DECL|method|UpdateOneRefOp (ReceiveCommand cmd)
specifier|private
name|UpdateOneRefOp
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|checkNotNull
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateRepo (RepoContext ctx)
specifier|public
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|ctx
operator|.
name|addRefUpdate
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postUpdate (Context ctx)
specifier|public
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
block|{
name|String
name|refName
init|=
name|cmd
operator|.
name|getRefName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|==
name|ReceiveCommand
operator|.
name|Type
operator|.
name|UPDATE
condition|)
block|{
comment|// aka fast-forward
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Updating tag cache on fast-forward of %s"
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|refName
argument_list|,
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|,
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isConfig
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Reloading project in cache"
argument_list|)
expr_stmt|;
try|try
block|{
name|projectCache
operator|.
name|evict
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot evict from project cache, name key: %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Updating project description"
argument_list|)
expr_stmt|;
name|repo
operator|.
name|setGitwebDescription
argument_list|(
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"cannot update description of %s"
argument_list|,
name|project
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allProjectsName
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|createGroupPermissionSyncer
operator|.
name|syncIfNeeded
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Can't sync create group permissions"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|ReindexOnlyOp
specifier|private
specifier|static
class|class
name|ReindexOnlyOp
implements|implements
name|BatchUpdateOp
block|{
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
block|{
comment|// Trigger reindexing even though change isn't actually updated.
return|return
literal|true
return|;
block|}
block|}
DECL|method|refs (Change.Id changeId)
specifier|private
name|List
argument_list|<
name|Ref
argument_list|>
name|refs
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
return|return
name|refsByChange
argument_list|()
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
return|;
block|}
DECL|method|initChangeRefMaps ()
specifier|private
name|void
name|initChangeRefMaps
parameter_list|()
block|{
if|if
condition|(
name|refsByChange
operator|==
literal|null
condition|)
block|{
name|int
name|estRefsPerChange
init|=
literal|4
decl_stmt|;
name|refsById
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|refsByChange
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|allRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|/
name|estRefsPerChange
argument_list|)
operator|.
name|arrayListValues
argument_list|(
name|estRefsPerChange
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|allRefs
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ObjectId
name|obj
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|!=
literal|null
condition|)
block|{
name|refsById
operator|.
name|put
argument_list|(
name|obj
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|refsByChange
operator|.
name|put
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|refsByChange ()
specifier|private
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Ref
argument_list|>
name|refsByChange
parameter_list|()
block|{
name|initChangeRefMaps
argument_list|()
expr_stmt|;
return|return
name|refsByChange
return|;
block|}
DECL|method|changeRefsById ()
specifier|private
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|changeRefsById
parameter_list|()
block|{
name|initChangeRefMaps
argument_list|()
expr_stmt|;
return|return
name|refsById
return|;
block|}
DECL|method|parentsEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|parentsEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getParentCount
argument_list|()
operator|!=
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|getParentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getParent
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|authorEqual (RevCommit a, RevCommit b)
specifier|static
name|boolean
name|authorEqual
parameter_list|(
name|RevCommit
name|a
parameter_list|,
name|RevCommit
name|b
parameter_list|)
block|{
name|PersonIdent
name|aAuthor
init|=
name|a
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
name|PersonIdent
name|bAuthor
init|=
name|b
operator|.
name|getAuthorIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|&&
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|aAuthor
operator|==
literal|null
operator|||
name|bAuthor
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|aAuthor
operator|.
name|getName
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|aAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|bAuthor
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validRefOperation (ReceiveCommand cmd)
specifier|private
name|boolean
name|validRefOperation
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|RefOperationValidators
name|refValidators
init|=
name|refValidatorsFactory
operator|.
name|create
argument_list|(
name|getProject
argument_list|()
argument_list|,
name|user
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
try|try
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|refValidators
operator|.
name|validateForRefOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefOperationValidationException
name|e
parameter_list|)
block|{
name|messages
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|e
operator|.
name|getMessages
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|validateNewCommits (Branch.NameKey branch, ReceiveCommand cmd)
specifier|private
name|void
name|validateNewCommits
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|PermissionBackend
operator|.
name|ForRef
name|perm
init|=
name|permissions
operator|.
name|ref
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|||
name|NEW_PATCHSET_PATTERN
operator|.
name|matcher
argument_list|(
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|)
operator|&&
name|pushOptions
operator|.
name|containsKey
argument_list|(
name|PUSH_OPTION_SKIP_VALIDATION
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|projectState
operator|.
name|is
argument_list|(
name|BooleanProjectConfig
operator|.
name|USE_SIGNED_OFF_BY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"requireSignedOffBy prevents option "
operator|+
name|PUSH_OPTION_SKIP_VALIDATION
argument_list|)
throw|;
block|}
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|SKIP_VALIDATION
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|rejectCommits
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"reject-commits prevents "
operator|+
name|PUSH_OPTION_SKIP_VALIDATION
argument_list|)
throw|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Short-circuiting new commit validation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|denied
parameter_list|)
block|{
name|reject
argument_list|(
name|cmd
argument_list|,
name|denied
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|boolean
name|missingFullName
init|=
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
decl_stmt|;
name|RevWalk
name|walk
init|=
name|receivePack
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|walk
operator|.
name|reset
argument_list|()
expr_stmt|;
name|walk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|NONE
argument_list|)
expr_stmt|;
try|try
block|{
name|RevObject
name|parsedObject
init|=
name|walk
operator|.
name|parseAny
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parsedObject
operator|instanceof
name|RevCommit
operator|)
condition|)
block|{
return|return;
block|}
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|existing
init|=
name|changeRefsById
argument_list|()
decl_stmt|;
name|walk
operator|.
name|markStart
argument_list|(
operator|(
name|RevCommit
operator|)
name|parsedObject
argument_list|)
expr_stmt|;
name|markHeadsAsUninteresting
argument_list|(
name|walk
argument_list|,
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|limit
init|=
name|receiveConfig
operator|.
name|maxBatchCommits
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RevCommit
name|c
init|;
operator|(
name|c
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
operator|++
name|n
operator|>
name|limit
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Number of new commits exceeds limit of %d"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot push more than %d commits to %s without %s option "
operator|+
literal|"(see %sDocumentation/user-upload.html#skip_validation for details)"
argument_list|,
name|limit
argument_list|,
name|branch
operator|.
name|get
argument_list|()
argument_list|,
name|PUSH_OPTION_SKIP_VALIDATION
argument_list|,
name|canonicalWebUrl
argument_list|)
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
literal|"too many commits"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|existing
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|validCommit
argument_list|(
name|walk
argument_list|,
name|branch
argument_list|,
name|cmd
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|missingFullName
operator|&&
name|user
operator|.
name|hasEmailAddress
argument_list|(
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Will update full name of caller"
argument_list|)
expr_stmt|;
name|setFullNameTo
operator|=
name|c
operator|.
name|getCommitterIdent
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|missingFullName
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Validated %d new commits"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_MISSING_OBJECT
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Invalid pack upload; one or more objects weren't sent"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validCommit ( RevWalk rw, Branch.NameKey branch, ReceiveCommand cmd, ObjectId id, @Nullable Change change)
specifier|private
name|boolean
name|validCommit
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|ReceiveCommand
name|cmd
parameter_list|,
name|ObjectId
name|id
parameter_list|,
annotation|@
name|Nullable
name|Change
name|change
parameter_list|)
throws|throws
name|IOException
block|{
name|PermissionBackend
operator|.
name|ForRef
name|perm
init|=
name|permissions
operator|.
name|ref
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ValidCommitKey
name|key
init|=
operator|new
name|AutoValue_ReceiveCommits_ValidCommitKey
argument_list|(
name|id
operator|.
name|copy
argument_list|()
argument_list|,
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|validCommits
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
try|try
init|(
name|CommitReceivedEvent
name|receiveEvent
init|=
operator|new
name|CommitReceivedEvent
argument_list|(
name|cmd
argument_list|,
name|project
argument_list|,
name|branch
operator|.
name|get
argument_list|()
argument_list|,
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|c
argument_list|,
name|user
argument_list|)
init|)
block|{
name|boolean
name|isMerged
init|=
name|magicBranch
operator|!=
literal|null
operator|&&
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|magicBranch
operator|.
name|cmd
operator|.
name|getRefName
argument_list|()
argument_list|)
operator|&&
name|magicBranch
operator|.
name|merged
decl_stmt|;
name|CommitValidators
name|validators
init|=
name|isMerged
condition|?
name|commitValidatorsFactory
operator|.
name|forMergedCommits
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|perm
argument_list|,
name|user
operator|.
name|asIdentifiedUser
argument_list|()
argument_list|)
else|:
name|commitValidatorsFactory
operator|.
name|forReceiveCommits
argument_list|(
name|perm
argument_list|,
name|branch
argument_list|,
name|user
operator|.
name|asIdentifiedUser
argument_list|()
argument_list|,
name|sshInfo
argument_list|,
name|repo
argument_list|,
name|rw
argument_list|,
name|change
argument_list|)
decl_stmt|;
name|messages
operator|.
name|addAll
argument_list|(
name|validators
operator|.
name|validate
argument_list|(
name|receiveEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitValidationException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Commit validation failed on %s"
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
name|reject
argument_list|(
name|cmd
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|validCommits
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|autoCloseChanges (ReceiveCommand cmd)
specifier|private
name|void
name|autoCloseChanges
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Starting auto-closing of changes"
argument_list|)
expr_stmt|;
name|String
name|refName
init|=
name|cmd
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
operator|!
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|refName
argument_list|)
argument_list|,
literal|"shouldn't be auto-closing changes on magic branch %s"
argument_list|,
name|refName
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Combine this BatchUpdate with the main one in
comment|// insertChangesAndPatchSets.
try|try
block|{
name|retryHelper
operator|.
name|execute
argument_list|(
name|updateFactory
lambda|->
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|updateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|projectState
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|user
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
init|;
name|ObjectInserter
name|ins
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|;
name|ObjectReader
name|reader
operator|=
name|ins
operator|.
name|newReader
argument_list|()
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|reader
argument_list|)
init|)
block|{
name|bu
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|)
operator|.
name|updateChangesInParallel
argument_list|()
expr_stmt|;
comment|// TODO(dborowitz): Teach BatchUpdate to ignore missing changes.
name|RevCommit
name|newTip
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getNewId
argument_list|()
argument_list|)
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|branch
init|=
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|newTip
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ObjectId
operator|.
name|zeroId
argument_list|()
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
condition|)
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|cmd
operator|.
name|getOldId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|Ref
argument_list|>
name|byCommit
init|=
name|changeRefsById
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|ChangeNotes
argument_list|>
name|byKey
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ReplaceRequest
argument_list|>
name|replaceAndClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|existingPatchSets
init|=
literal|0
decl_stmt|;
name|int
name|newPatchSets
init|=
literal|0
decl_stmt|;
name|COMMIT
label|:
for|for
control|(
name|RevCommit
name|c
init|;
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|byCommit
operator|.
name|get
argument_list|(
name|c
operator|.
name|copy
argument_list|()
argument_list|)
control|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
name|getChangeNotes
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notes
operator|.
name|isPresent
argument_list|()
operator|&&
name|notes
operator|.
name|get
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getDest
argument_list|()
operator|.
name|equals
argument_list|(
name|branch
argument_list|)
condition|)
block|{
name|existingPatchSets
operator|++
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|mergedByPushOpFactory
operator|.
name|create
argument_list|(
name|requestScopePropagator
argument_list|,
name|psId
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue
name|COMMIT
continue|;
block|}
block|}
for|for
control|(
name|String
name|changeId
range|:
name|c
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
control|)
block|{
if|if
condition|(
name|byKey
operator|==
literal|null
condition|)
block|{
name|byKey
operator|=
name|executeIndexQuery
argument_list|(
parameter_list|()
lambda|->
name|openChangesByKeyByBranch
argument_list|(
name|branch
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChangeNotes
name|onto
init|=
name|byKey
operator|.
name|get
argument_list|(
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|onto
operator|!=
literal|null
condition|)
block|{
name|newPatchSets
operator|++
expr_stmt|;
comment|// Hold onto this until we're done with the walk, as the call to
comment|// req.validate below calls isMergedInto which resets the walk.
name|ReplaceRequest
name|req
init|=
operator|new
name|ReplaceRequest
argument_list|(
name|onto
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|c
argument_list|,
name|cmd
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|req
operator|.
name|notes
operator|=
name|onto
expr_stmt|;
name|replaceAndClose
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
continue|continue
name|COMMIT
continue|;
block|}
block|}
block|}
for|for
control|(
name|ReplaceRequest
name|req
range|:
name|replaceAndClose
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|req
operator|.
name|notes
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|req
operator|.
name|validate
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Not closing %s because validation failed"
argument_list|,
name|id
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|req
operator|.
name|addOps
argument_list|(
name|bu
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|id
argument_list|,
name|mergedByPushOpFactory
operator|.
name|create
argument_list|(
name|requestScopePropagator
argument_list|,
name|req
operator|.
name|psId
argument_list|,
name|refName
argument_list|)
operator|.
name|setPatchSetProvider
argument_list|(
name|req
operator|.
name|replaceOp
operator|::
name|getPatchSet
argument_list|)
argument_list|)
expr_stmt|;
name|bu
operator|.
name|addOp
argument_list|(
name|id
argument_list|,
operator|new
name|ChangeProgressOp
argument_list|(
name|closeProgress
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Auto-closing %s changes with existing patch sets and %s with new patch sets"
argument_list|,
name|existingPatchSets
argument_list|,
name|newPatchSets
argument_list|)
expr_stmt|;
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OrmException
decl||
name|PermissionBackendException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to auto-close changes"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|,
comment|// Use a multiple of the default timeout to account for inner retries that may otherwise
comment|// eat up the whole timeout so that no time is left to retry this outer action.
name|RetryHelper
operator|.
name|options
argument_list|()
operator|.
name|timeout
argument_list|(
name|retryHelper
operator|.
name|getDefaultTimeout
argument_list|(
name|ActionType
operator|.
name|CHANGE_UPDATE
argument_list|)
operator|.
name|multipliedBy
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestApiException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Can't insert patchset"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to auto-close changes"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getChangeNotes (Change.Id changeId)
specifier|private
name|Optional
argument_list|<
name|ChangeNotes
argument_list|>
name|getChangeNotes
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|notesFactory
operator|.
name|createChecked
argument_list|(
name|db
argument_list|,
name|project
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|changeId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
DECL|method|executeIndexQuery (Action<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|executeIndexQuery
parameter_list|(
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|OrmException
block|{
try|try
block|{
return|return
name|retryHelper
operator|.
name|execute
argument_list|(
name|ActionType
operator|.
name|INDEX_QUERY
argument_list|,
name|action
argument_list|,
name|OrmException
operator|.
name|class
operator|::
name|isInstance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|OrmException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|updateAccountInfo ()
specifier|private
name|void
name|updateAccountInfo
parameter_list|()
block|{
if|if
condition|(
name|setFullNameTo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Updating full name of caller"
argument_list|)
expr_stmt|;
try|try
block|{
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accountsUpdateProvider
operator|.
name|get
argument_list|()
operator|.
name|update
argument_list|(
literal|"Set Full Name on Receive Commits"
argument_list|,
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|u
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|a
operator|.
name|getAccount
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
condition|)
block|{
name|u
operator|.
name|setFullName
argument_list|(
name|setFullNameTo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|accountState
operator|.
name|map
argument_list|(
name|AccountState
operator|::
name|getAccount
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|a
lambda|->
name|user
operator|.
name|getAccount
argument_list|()
operator|.
name|setFullName
argument_list|(
name|a
operator|.
name|getFullName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to update full name of caller"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openChangesByKeyByBranch (Branch.NameKey branch)
specifier|private
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|ChangeNotes
argument_list|>
name|openChangesByKeyByBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
throws|throws
name|OrmException
block|{
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|ChangeNotes
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byBranchOpen
argument_list|(
name|branch
argument_list|)
control|)
block|{
try|try
block|{
name|r
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|cd
operator|.
name|notes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
comment|// Ignore deleted change
block|}
block|}
return|return
name|r
return|;
block|}
comment|// allRefsWatcher hooks into the protocol negotation to get a list of all known refs.
comment|// This is used as a cache of ref -> sha1 values, and to build an inverse index
comment|// of (change => list of refs) and a (SHA1 => refs).
DECL|method|allRefs ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|allRefs
parameter_list|()
block|{
return|return
name|allRefsWatcher
operator|.
name|getAllRefs
argument_list|()
return|;
block|}
DECL|method|reject (@ullable ReceiveCommand cmd, String why)
specifier|private
name|void
name|reject
parameter_list|(
annotation|@
name|Nullable
name|ReceiveCommand
name|cmd
parameter_list|,
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|setResult
argument_list|(
name|REJECTED_OTHER_REASON
argument_list|,
name|why
argument_list|)
expr_stmt|;
name|commandProgress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isHead (ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isHead
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
return|;
block|}
DECL|method|isConfig (ReceiveCommand cmd)
specifier|private
specifier|static
name|boolean
name|isConfig
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
block|{
return|return
name|cmd
operator|.
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
return|;
block|}
block|}
end_class

end_unit

