begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git.receive
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|HookUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|MagicBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|AdvertiseRefsHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|BaseReceivePack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ServiceMayNotContinueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|UploadPack
import|;
end_import

begin_comment
comment|/**  * Exposes only the non refs/changes/ reference names and provide additional haves.  *  *<p>Negotiation on Git push is suboptimal in that it tends to send more objects to the server than  * it should. This results in increased latencies for {@code git push}.  *  *<p>Ref advertisement for Git pushes still works in a "the server speaks first fashion" as Git  * Protocol V2 only addressed fetches Therefore the server needs to send all available references.  * For large repositories, this can be in the tens of megabytes to send to the client. We therefore  * remove all refs in refs/changes/* to scale down that footprint. Trivially, this would increase  * the unnecessary objects that the client has to send to the server because the common ancestor it  * finds in negotiation might be further back in history.  *  *<p>To work around this, we advertise the last 32 changes in that repository as additional {@code  * .haves}. This is a heuristical approach that aims at scaling down the number of unnecessary  * objects that client sends to the server. Unnecessary here refers to objects that the server  * already has.  *  *<p>For some code paths in {@link com.google.gerrit.server.git.DefaultAdvertiseRefsHook}, we  * already removed refs/changes, so the logic to skip these in this class become a no-op.  *  *<p>TODO(hiesel): Instrument this heuristic and proof its value.  */
end_comment

begin_class
DECL|class|ReceiveCommitsAdvertiseRefsHook
specifier|public
class|class
name|ReceiveCommitsAdvertiseRefsHook
implements|implements
name|AdvertiseRefsHook
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|method|ReceiveCommitsAdvertiseRefsHook ( Provider<InternalChangeQuery> queryProvider, Project.NameKey projectName)
specifier|public
name|ReceiveCommitsAdvertiseRefsHook
parameter_list|(
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advertiseRefs (UploadPack us)
specifier|public
name|void
name|advertiseRefs
parameter_list|(
name|UploadPack
name|us
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ReceiveCommitsAdvertiseRefsHook cannot be used for UploadPack"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|advertiseRefs (BaseReceivePack rp)
specifier|public
name|void
name|advertiseRefs
parameter_list|(
name|BaseReceivePack
name|rp
parameter_list|)
throws|throws
name|ServiceMayNotContinueException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|advertisedRefs
init|=
name|HookUtil
operator|.
name|ensureAllRefsAdvertised
argument_list|(
name|rp
argument_list|)
decl_stmt|;
name|advertisedRefs
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ReceiveCommitsAdvertiseRefsHook
operator|::
name|skip
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|r
lambda|->
name|advertisedRefs
operator|.
name|remove
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setAdvertisedRefs
argument_list|(
name|advertisedRefs
argument_list|,
name|advertiseOpenChanges
argument_list|(
name|rp
operator|.
name|getRepository
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|advertiseOpenChanges (Repository repo)
specifier|private
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|advertiseOpenChanges
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|ServiceMayNotContinueException
block|{
comment|// Advertise some recent open changes, in case a commit is based on one.
name|int
name|limit
init|=
literal|32
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|ObjectId
argument_list|>
name|r
init|=
name|Sets
operator|.
name|newHashSetWithExpectedSize
argument_list|(
name|limit
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|setRequestedFields
argument_list|(
comment|// Required for ChangeIsVisibleToPrdicate.
name|ChangeField
operator|.
name|CHANGE
argument_list|,
name|ChangeField
operator|.
name|REVIEWER
argument_list|,
comment|// Required during advertiseOpenChanges.
name|ChangeField
operator|.
name|PATCH_SET
argument_list|)
operator|.
name|enforceVisibility
argument_list|(
literal|true
argument_list|)
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
operator|.
name|byProjectOpen
argument_list|(
name|projectName
argument_list|)
control|)
block|{
name|PatchSet
name|ps
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
block|{
comment|// Ensure we actually observed a patch set ref pointing to this
comment|// object, in case the database is out of sync with the repo and the
comment|// object doesn't actually exist.
try|try
block|{
name|Ref
name|psRef
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|patchSetRef
argument_list|(
name|ps
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|psRef
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|ps
operator|.
name|commitId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceMayNotContinueException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|err
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot list open changes of %s"
argument_list|,
name|projectName
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
DECL|method|skip (String name)
specifier|private
specifier|static
name|boolean
name|skip
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS_CHANGES
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS_CACHE_AUTOMERGE
argument_list|)
operator|||
name|MagicBranch
operator|.
name|isMagicBranch
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

