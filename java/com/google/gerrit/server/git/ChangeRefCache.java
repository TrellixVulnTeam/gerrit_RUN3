begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|RefState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
operator|.
name|TraceTimer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ManualRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|OneOffRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/**  * Cache for the minimal information per change that we need to compute visibility. Used for ref  * filtering.  *  *<p>This class is thread safe.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ChangeRefCache
specifier|public
class|class
name|ChangeRefCache
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|ID_CACHE
specifier|static
specifier|final
name|String
name|ID_CACHE
init|=
literal|"change_refs"
decl_stmt|;
DECL|class|Module
specifier|public
specifier|static
class|class
name|Module
extends|extends
name|CacheModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|cache
argument_list|(
name|ID_CACHE
argument_list|,
name|Key
operator|.
name|class
argument_list|,
operator|new
name|TypeLiteral
argument_list|<
name|CachedChange
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|maximumWeight
argument_list|(
literal|10000
argument_list|)
operator|.
name|loader
argument_list|(
name|Loader
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ChangeRefCache
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|Key
specifier|abstract
specifier|static
class|class
name|Key
block|{
DECL|method|project ()
specifier|abstract
name|Project
operator|.
name|NameKey
name|project
parameter_list|()
function_decl|;
DECL|method|changeId ()
specifier|abstract
name|Change
operator|.
name|Id
name|changeId
parameter_list|()
function_decl|;
DECL|method|metaId ()
specifier|abstract
name|ObjectId
name|metaId
parameter_list|()
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|CachedChange
specifier|abstract
specifier|static
class|class
name|CachedChange
block|{
comment|// Subset of fields in ChangeData, specifically fields needed to serve
comment|// VisibleRefFilter without touching the database. More can be added as
comment|// necessary.
DECL|method|change ()
specifier|abstract
name|Change
name|change
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|reviewers ()
specifier|abstract
name|ReviewerSet
name|reviewers
parameter_list|()
function_decl|;
block|}
DECL|field|cache
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|Key
argument_list|,
name|CachedChange
argument_list|>
name|cache
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|requestContext
specifier|private
specifier|final
name|OneOffRequestContext
name|requestContext
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|gerritOptions
specifier|private
specifier|final
name|GerritOptions
name|gerritOptions
decl_stmt|;
DECL|field|gerritConfig
specifier|private
specifier|final
name|Config
name|gerritConfig
decl_stmt|;
DECL|field|bootstrappedProjects
specifier|private
specifier|final
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|bootstrappedProjects
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeRefCache ( @amedID_CACHE) LoadingCache<Key, CachedChange> cache, ChangeData.Factory changeDataFactory, OneOffRequestContext requestContext, Provider<InternalChangeQuery> queryProvider, GerritOptions gerritOptions, @GerritServerConfig Config gerritConfig)
name|ChangeRefCache
parameter_list|(
annotation|@
name|Named
argument_list|(
name|ID_CACHE
argument_list|)
name|LoadingCache
argument_list|<
name|Key
argument_list|,
name|CachedChange
argument_list|>
name|cache
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|,
name|OneOffRequestContext
name|requestContext
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|GerritOptions
name|gerritOptions
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|gerritConfig
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
name|this
operator|.
name|requestContext
operator|=
name|requestContext
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|gerritOptions
operator|=
name|gerritOptions
expr_stmt|;
name|this
operator|.
name|gerritConfig
operator|=
name|gerritConfig
expr_stmt|;
comment|// Uses a CopyOnWriteArraySet internally to keep track of projects that are already
comment|// bootstrapped. This is efficient because we read from the set on every call to this method to
comment|// check if bootstrapping is required. Writes occur only if we bootstrapped, so once per
comment|// project.
name|this
operator|.
name|bootstrappedProjects
operator|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read changes from the cache.    *    *<p>Returned changes only include the {@code Change} object (with id, branch) and the reviewers.    * There is no guarantee that additional fields are populated, although they can be.    *    * @param project project to read.    * @param changeId change ID to read    * @param metaId object ID of the meta branch to read. This is only used to ensure consistency. It    *     does not allow for reading non-current meta versions.    * @return change data    * @throws IllegalArgumentException in case no change is found    */
DECL|method|getChangeData (Project.NameKey project, Change.Id changeId, ObjectId metaId)
specifier|public
name|ChangeData
name|getChangeData
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|ObjectId
name|metaId
parameter_list|)
block|{
name|Key
name|key
init|=
operator|new
name|AutoValue_ChangeRefCache_Key
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|,
name|metaId
argument_list|)
decl_stmt|;
name|CachedChange
name|cached
init|=
name|cache
operator|.
name|getUnchecked
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no change found for key "
operator|+
name|key
argument_list|)
throw|;
block|}
name|ChangeData
name|cd
init|=
name|changeDataFactory
operator|.
name|create
argument_list|(
name|cached
operator|.
name|change
argument_list|()
argument_list|)
decl_stmt|;
name|cd
operator|.
name|setReviewers
argument_list|(
name|cached
operator|.
name|reviewers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cd
return|;
block|}
comment|/**    * This method bootstraps the cache by querying the change index if it hasn't been bootstrapped    * before, in which case it is a cheap no-op.    *    * @param project the project to bootstrap    */
DECL|method|bootstrapIfNecessary (Project.NameKey project)
specifier|public
name|void
name|bootstrapIfNecessary
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
if|if
condition|(
operator|!
name|gerritOptions
operator|.
name|enableMasterFeatures
argument_list|()
condition|)
block|{
comment|// Bootstrapping using the ChangeIndex is only supported on master in a master-slave replica.
return|return;
block|}
if|if
condition|(
name|gerritConfig
operator|.
name|getInt
argument_list|(
literal|"cache"
argument_list|,
name|ID_CACHE
argument_list|,
literal|"memoryLimit"
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// The cache is disabled, don't bother bootstrapping.
return|return;
block|}
if|if
condition|(
name|bootstrappedProjects
operator|.
name|contains
argument_list|(
name|project
argument_list|)
condition|)
block|{
comment|// We have bootstrapped for this project before. If the cache is too small, we might have
comment|// evicted all entries by now. Don't bother about this though as we don't want to add the
comment|// complexity of checking for existing projects, since that might not be authoritative as well
comment|// since we could have already evicted the majority of the entries.
return|return;
block|}
try|try
init|(
name|TraceTimer
name|ignored
init|=
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"bootstrapping ChangeRef cache for project "
operator|+
name|project
argument_list|)
init|;
name|ManualRequestContext
name|ignored2
operator|=
name|requestContext
operator|.
name|open
argument_list|()
init|)
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|setRequestedFields
argument_list|(
name|ChangeField
operator|.
name|CHANGE
argument_list|,
name|ChangeField
operator|.
name|REVIEWER
argument_list|,
name|ChangeField
operator|.
name|REF_STATE
argument_list|)
operator|.
name|byProject
argument_list|(
name|project
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|Set
argument_list|<
name|RefState
argument_list|>
name|refStates
init|=
name|RefState
operator|.
name|parseStates
argument_list|(
name|cd
operator|.
name|getRefStates
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|RefState
argument_list|>
name|refState
init|=
name|refStates
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|ref
argument_list|()
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|refState
operator|.
name|isPresent
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|cache
operator|.
name|put
argument_list|(
operator|new
name|AutoValue_ChangeRefCache_Key
argument_list|(
name|project
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|refState
operator|.
name|get
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AutoValue_ChangeRefCache_CachedChange
argument_list|(
name|cd
operator|.
name|change
argument_list|()
argument_list|,
name|cd
operator|.
name|getReviewers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Mark the project as bootstrapped. We could have bootstrapped it multiple times for
comment|// simultaneous requests. We accept this in favor of less thread synchronization and
comment|// complexity.
name|bootstrappedProjects
operator|.
name|add
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"unable to bootstrap ChangeRef cache for project "
operator|+
name|project
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Loader
specifier|static
class|class
name|Loader
extends|extends
name|CacheLoader
argument_list|<
name|Key
argument_list|,
name|CachedChange
argument_list|>
block|{
DECL|field|notesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Loader (ChangeNotes.Factory notesFactory)
name|Loader
parameter_list|(
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
parameter_list|)
block|{
name|this
operator|.
name|notesFactory
operator|=
name|notesFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load (Key key)
specifier|public
name|CachedChange
name|load
parameter_list|(
name|Key
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeNotes
name|notes
init|=
name|notesFactory
operator|.
name|create
argument_list|(
name|key
operator|.
name|project
argument_list|()
argument_list|,
name|key
operator|.
name|changeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notes
operator|.
name|getMetaId
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|metaId
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|AutoValue_ChangeRefCache_CachedChange
argument_list|(
name|notes
operator|.
name|getChange
argument_list|()
argument_list|,
name|notes
operator|.
name|getReviewers
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"unable to load change"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|resetBootstrappedProjects ()
specifier|public
name|void
name|resetBootstrappedProjects
parameter_list|()
block|{
name|bootstrappedProjects
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

