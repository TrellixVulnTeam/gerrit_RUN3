begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.index.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|AccountIndexedListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
operator|.
name|TraceTimer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
DECL|class|AccountIndexerImpl
specifier|public
class|class
name|AccountIndexerImpl
implements|implements
name|AccountIndexer
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (AccountIndexCollection indexes)
name|AccountIndexerImpl
name|create
parameter_list|(
name|AccountIndexCollection
name|indexes
parameter_list|)
function_decl|;
DECL|method|create (@ullable AccountIndex index)
name|AccountIndexerImpl
name|create
parameter_list|(
annotation|@
name|Nullable
name|AccountIndex
name|index
parameter_list|)
function_decl|;
block|}
DECL|field|byIdCache
specifier|private
specifier|final
name|AccountCache
name|byIdCache
decl_stmt|;
DECL|field|indexedListener
specifier|private
specifier|final
name|PluginSetContext
argument_list|<
name|AccountIndexedListener
argument_list|>
name|indexedListener
decl_stmt|;
DECL|field|stalenessChecker
specifier|private
specifier|final
name|StalenessChecker
name|stalenessChecker
decl_stmt|;
DECL|field|indexes
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountIndexCollection
name|indexes
decl_stmt|;
DECL|field|index
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountIndex
name|index
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|AccountIndexerImpl ( AccountCache byIdCache, PluginSetContext<AccountIndexedListener> indexedListener, StalenessChecker stalenessChecker, @Assisted AccountIndexCollection indexes)
name|AccountIndexerImpl
parameter_list|(
name|AccountCache
name|byIdCache
parameter_list|,
name|PluginSetContext
argument_list|<
name|AccountIndexedListener
argument_list|>
name|indexedListener
parameter_list|,
name|StalenessChecker
name|stalenessChecker
parameter_list|,
annotation|@
name|Assisted
name|AccountIndexCollection
name|indexes
parameter_list|)
block|{
name|this
operator|.
name|byIdCache
operator|=
name|byIdCache
expr_stmt|;
name|this
operator|.
name|indexedListener
operator|=
name|indexedListener
expr_stmt|;
name|this
operator|.
name|stalenessChecker
operator|=
name|stalenessChecker
expr_stmt|;
name|this
operator|.
name|indexes
operator|=
name|indexes
expr_stmt|;
name|this
operator|.
name|index
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|AssistedInject
DECL|method|AccountIndexerImpl ( AccountCache byIdCache, PluginSetContext<AccountIndexedListener> indexedListener, StalenessChecker stalenessChecker, @Assisted @Nullable AccountIndex index)
name|AccountIndexerImpl
parameter_list|(
name|AccountCache
name|byIdCache
parameter_list|,
name|PluginSetContext
argument_list|<
name|AccountIndexedListener
argument_list|>
name|indexedListener
parameter_list|,
name|StalenessChecker
name|stalenessChecker
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|AccountIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|byIdCache
operator|=
name|byIdCache
expr_stmt|;
name|this
operator|.
name|indexedListener
operator|=
name|indexedListener
expr_stmt|;
name|this
operator|.
name|stalenessChecker
operator|=
name|stalenessChecker
expr_stmt|;
name|this
operator|.
name|indexes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index (Account.Id id)
specifier|public
name|void
name|index
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|byIdCache
operator|.
name|evict
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|byIdCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountState
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Replace account %d in index"
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Delete account %d from index"
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Index
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
name|i
range|:
name|getWriteIndexes
argument_list|()
control|)
block|{
comment|// Evict the cache to get an up-to-date value for sure.
if|if
condition|(
name|accountState
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
init|(
name|TraceTimer
name|traceTimer
init|=
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"Replacing account %d in index version %d"
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|i
operator|.
name|getSchema
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
init|)
block|{
name|i
operator|.
name|replace
argument_list|(
name|accountState
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|TraceTimer
name|traceTimer
init|=
name|TraceContext
operator|.
name|newTimer
argument_list|(
literal|"Deleteing account %d in index version %d"
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|i
operator|.
name|getSchema
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
init|)
block|{
name|i
operator|.
name|delete
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fireAccountIndexedEvent
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reindexIfStale (Account.Id id)
specifier|public
name|boolean
name|reindexIfStale
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|stalenessChecker
operator|.
name|isStale
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|fireAccountIndexedEvent (int id)
specifier|private
name|void
name|fireAccountIndexedEvent
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|indexedListener
operator|.
name|runEach
argument_list|(
name|l
lambda|->
name|l
operator|.
name|onAccountIndexed
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getWriteIndexes ()
specifier|private
name|Collection
argument_list|<
name|AccountIndex
argument_list|>
name|getWriteIndexes
parameter_list|()
block|{
if|if
condition|(
name|indexes
operator|!=
literal|null
condition|)
block|{
return|return
name|indexes
operator|.
name|getWriteIndexes
argument_list|()
return|;
block|}
return|return
name|index
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|singleton
argument_list|(
name|index
argument_list|)
else|:
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
block|}
end_class

end_unit

