begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.index.group
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|FieldBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|StalenessCheckResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Checks if documents in the group index are stale.  *  *<p>An index document is considered stale if the stored SHA1 differs from the HEAD SHA1 of the  * groups branch.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|StalenessChecker
specifier|public
class|class
name|StalenessChecker
block|{
DECL|field|FIELDS
specifier|public
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|FIELDS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|GroupField
operator|.
name|UUID
operator|.
name|getName
argument_list|()
argument_list|,
name|GroupField
operator|.
name|REF_STATE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|indexes
specifier|private
specifier|final
name|GroupIndexCollection
name|indexes
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|indexConfig
specifier|private
specifier|final
name|IndexConfig
name|indexConfig
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
annotation|@
name|Inject
DECL|method|StalenessChecker ( GroupIndexCollection indexes, GitRepositoryManager repoManager, IndexConfig indexConfig, AllUsersName allUsers)
name|StalenessChecker
parameter_list|(
name|GroupIndexCollection
name|indexes
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|IndexConfig
name|indexConfig
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|)
block|{
name|this
operator|.
name|indexes
operator|=
name|indexes
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|indexConfig
operator|=
name|indexConfig
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
block|}
DECL|method|check (AccountGroup.UUID uuid)
specifier|public
name|StalenessCheckResult
name|check
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupIndex
name|i
init|=
name|indexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
comment|// No index; caller couldn't do anything if it is stale.
return|return
name|StalenessCheckResult
operator|.
name|notStale
argument_list|()
return|;
block|}
name|Optional
argument_list|<
name|FieldBundle
argument_list|>
name|result
init|=
name|i
operator|.
name|getRaw
argument_list|(
name|uuid
argument_list|,
name|IndexedGroupQuery
operator|.
name|createOptions
argument_list|(
name|indexConfig
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|FIELDS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// The document is missing in the index.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
comment|// Stale if the group actually exists.
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|StalenessCheckResult
operator|.
name|notStale
argument_list|()
return|;
block|}
return|return
name|StalenessCheckResult
operator|.
name|stale
argument_list|(
literal|"Document missing in index, but found %s in the repo"
argument_list|,
name|ref
argument_list|)
return|;
block|}
block|}
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectId
name|head
init|=
name|ref
operator|==
literal|null
condition|?
name|ObjectId
operator|.
name|zeroId
argument_list|()
else|:
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|ObjectId
name|idFromIndex
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|result
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|GroupField
operator|.
name|REF_STATE
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|.
name|equals
argument_list|(
name|idFromIndex
argument_list|)
condition|)
block|{
return|return
name|StalenessCheckResult
operator|.
name|notStale
argument_list|()
return|;
block|}
return|return
name|StalenessCheckResult
operator|.
name|stale
argument_list|(
literal|"Document has unexpected ref state (%s != %s)"
argument_list|,
name|head
argument_list|,
name|idFromIndex
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

