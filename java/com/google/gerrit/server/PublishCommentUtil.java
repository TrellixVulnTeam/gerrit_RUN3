begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Comment
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentForValidation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentValidationFailure
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|validators
operator|.
name|CommentValidator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|PublishCommentUtil
specifier|public
class|class
name|PublishCommentUtil
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|patchListCache
specifier|private
specifier|final
name|PatchListCache
name|patchListCache
decl_stmt|;
DECL|field|psUtil
specifier|private
specifier|final
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|commentsUtil
specifier|private
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|PublishCommentUtil ( CommentsUtil commentsUtil, PatchListCache patchListCache, PatchSetUtil psUtil)
name|PublishCommentUtil
parameter_list|(
name|CommentsUtil
name|commentsUtil
parameter_list|,
name|PatchListCache
name|patchListCache
parameter_list|,
name|PatchSetUtil
name|psUtil
parameter_list|)
block|{
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|psUtil
operator|=
name|psUtil
expr_stmt|;
name|this
operator|.
name|patchListCache
operator|=
name|patchListCache
expr_stmt|;
block|}
DECL|method|publish ( ChangeContext ctx, PatchSet.Id psId, Collection<Comment> draftComments, @Nullable String tag)
specifier|public
name|void
name|publish
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|Collection
argument_list|<
name|Comment
argument_list|>
name|draftComments
parameter_list|,
annotation|@
name|Nullable
name|String
name|tag
parameter_list|)
block|{
name|ChangeNotes
name|notes
init|=
name|ctx
operator|.
name|getNotes
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|notes
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|draftComments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
init|=
name|psUtil
operator|.
name|getAsMap
argument_list|(
name|notes
argument_list|,
name|draftComments
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|d
lambda|->
name|psId
argument_list|(
name|notes
argument_list|,
name|d
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Comment
argument_list|>
name|commentsToPublish
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|draftComment
range|:
name|draftComments
control|)
block|{
name|PatchSet
operator|.
name|Id
name|psIdOfDraftComment
init|=
name|psId
argument_list|(
name|notes
argument_list|,
name|draftComment
argument_list|)
decl_stmt|;
name|PatchSet
name|ps
init|=
name|patchSets
operator|.
name|get
argument_list|(
name|psIdOfDraftComment
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
comment|// This can happen if changes with the same numeric ID exist:
comment|// - change 12345 has 3 patch sets in repo X
comment|// - another change 12345 has 7 patch sets in repo Y
comment|// - the user saves a draft comment on patch set 6 of the change in repo Y
comment|// - this draft comment gets stored in:
comment|//   AllUsers -> refs/draft-comments/45/12345/<account-id>
comment|// - when posting a review with draft handling PUBLISH_ALL_REVISIONS on the change in
comment|//   repo X, the draft comments are loaded from
comment|//   AllUsers -> refs/draft-comments/45/12345/<account-id>, including the draft
comment|//   comment that was saved for patch set 6 of the change in repo Y
comment|// - patch set 6 does not exist for the change in repo x, hence we get null for the patch
comment|//   set here
comment|// Instead of failing hard (and returning an Internal Server Error) to the caller,
comment|// just ignore that comment.
comment|// Gerrit ensures that numeric change IDs are unique, but you can get duplicates if
comment|// change refs of one repo are copied/pushed to another repo on the same host (this
comment|// should never be done, but we know it happens).
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Ignoring draft comment %s on non existing patch set %s (repo = %s)"
argument_list|,
name|draftComment
argument_list|,
name|psIdOfDraftComment
argument_list|,
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|draftComment
operator|.
name|writtenOn
operator|=
name|ctx
operator|.
name|getWhen
argument_list|()
expr_stmt|;
name|draftComment
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
comment|// Draft may have been created by a different real user; copy the current real user. (Only
comment|// applies to X-Gerrit-RunAs, since modifying drafts via on_behalf_of is not allowed.)
name|ctx
operator|.
name|getUser
argument_list|()
operator|.
name|updateRealAccountId
argument_list|(
name|draftComment
operator|::
name|setRealAuthor
argument_list|)
expr_stmt|;
try|try
block|{
name|CommentsUtil
operator|.
name|setCommentCommitId
argument_list|(
name|draftComment
argument_list|,
name|patchListCache
argument_list|,
name|notes
operator|.
name|getChange
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|commentsToPublish
operator|.
name|add
argument_list|(
name|draftComment
argument_list|)
expr_stmt|;
block|}
name|commentsUtil
operator|.
name|putComments
argument_list|(
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
argument_list|,
name|Status
operator|.
name|PUBLISHED
argument_list|,
name|commentsToPublish
argument_list|)
expr_stmt|;
block|}
DECL|method|psId (ChangeNotes notes, Comment c)
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|Comment
name|c
parameter_list|)
block|{
return|return
name|PatchSet
operator|.
name|id
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|c
operator|.
name|key
operator|.
name|patchSetId
argument_list|)
return|;
block|}
comment|/**    * Helper to run the specified set of {@link CommentValidator}-s on the specified comments.    *    * @return See {@link CommentValidator#validateComments(ImmutableList)}.    */
DECL|method|findInvalidComments ( PluginSetContext<CommentValidator> commentValidators, ImmutableList<CommentForValidation> commentsForValidation)
specifier|public
specifier|static
name|ImmutableList
argument_list|<
name|CommentValidationFailure
argument_list|>
name|findInvalidComments
parameter_list|(
name|PluginSetContext
argument_list|<
name|CommentValidator
argument_list|>
name|commentValidators
parameter_list|,
name|ImmutableList
argument_list|<
name|CommentForValidation
argument_list|>
name|commentsForValidation
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|CommentValidationFailure
argument_list|>
name|commentValidationFailures
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
name|commentValidators
operator|.
name|runEach
argument_list|(
name|listener
lambda|->
name|commentValidationFailures
operator|.
name|addAll
argument_list|(
name|listener
operator|.
name|validateComments
argument_list|(
name|commentsForValidation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|commentValidationFailures
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

