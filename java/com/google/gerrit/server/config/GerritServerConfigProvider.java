begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NotesMigration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|securestore
operator|.
name|SecureStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_comment
comment|/**  * Provides {@link Config} annotated with {@link GerritServerConfig}.  *  *<p>To react on config updates, the caller should implement @see GerritConfigListener.  *  *<p>The few callers that need a reloaded-on-demand config can inject a {@code  * GerritServerConfigProvider} and request the lastest config with fetchLatestConfig().  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|GerritServerConfigProvider
specifier|public
class|class
name|GerritServerConfigProvider
implements|implements
name|Provider
argument_list|<
name|Config
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|site
specifier|private
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|secureStore
specifier|private
specifier|final
name|SecureStore
name|secureStore
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|gerritConfig
specifier|private
name|GerritConfig
name|gerritConfig
decl_stmt|;
annotation|@
name|Inject
DECL|method|GerritServerConfigProvider (SitePaths site, SecureStore secureStore)
name|GerritServerConfigProvider
parameter_list|(
name|SitePaths
name|site
parameter_list|,
name|SecureStore
name|secureStore
parameter_list|)
block|{
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|secureStore
operator|=
name|secureStore
expr_stmt|;
name|this
operator|.
name|gerritConfig
operator|=
name|loadConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|Config
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|gerritConfig
return|;
block|}
block|}
DECL|method|updateConfig ()
specifier|protected
name|ConfigUpdatedEvent
name|updateConfig
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Config
name|oldConfig
init|=
name|gerritConfig
decl_stmt|;
name|gerritConfig
operator|=
name|loadConfig
argument_list|()
expr_stmt|;
return|return
operator|new
name|ConfigUpdatedEvent
argument_list|(
name|oldConfig
argument_list|,
name|gerritConfig
argument_list|)
return|;
block|}
block|}
DECL|method|loadConfig ()
specifier|public
name|GerritConfig
name|loadConfig
parameter_list|()
block|{
name|FileBasedConfig
name|baseConfig
init|=
name|loadConfig
argument_list|(
literal|null
argument_list|,
name|site
operator|.
name|gerrit_config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseConfig
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atInfo
argument_list|()
operator|.
name|log
argument_list|(
literal|"No %s; assuming defaults"
argument_list|,
name|site
operator|.
name|gerrit_config
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileBasedConfig
name|noteDbConfigOverBaseConfig
init|=
name|loadConfig
argument_list|(
name|baseConfig
argument_list|,
name|site
operator|.
name|notedb_config
argument_list|)
decl_stmt|;
name|checkNoteDbConfig
argument_list|(
name|noteDbConfigOverBaseConfig
argument_list|)
expr_stmt|;
return|return
operator|new
name|GerritConfig
argument_list|(
name|noteDbConfigOverBaseConfig
argument_list|,
name|baseConfig
argument_list|,
name|secureStore
argument_list|)
return|;
block|}
DECL|method|loadConfig (@ullable Config base, Path path)
specifier|private
specifier|static
name|FileBasedConfig
name|loadConfig
parameter_list|(
annotation|@
name|Nullable
name|Config
name|base
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|FileBasedConfig
name|cfg
init|=
operator|new
name|FileBasedConfig
argument_list|(
name|base
argument_list|,
name|path
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|DETECTED
argument_list|)
decl_stmt|;
try|try
block|{
name|cfg
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|cfg
return|;
block|}
DECL|method|checkNoteDbConfig (FileBasedConfig noteDbConfig)
specifier|private
specifier|static
name|void
name|checkNoteDbConfig
parameter_list|(
name|FileBasedConfig
name|noteDbConfig
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bad
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|section
range|:
name|noteDbConfig
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|NotesMigration
operator|.
name|SECTION_NOTE_DB
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|subsection
range|:
name|noteDbConfig
operator|.
name|getSubsections
argument_list|(
name|section
argument_list|)
control|)
block|{
name|noteDbConfig
operator|.
name|getNames
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
literal|false
argument_list|)
operator|.
name|forEach
argument_list|(
name|n
lambda|->
name|bad
operator|.
name|add
argument_list|(
name|section
operator|+
literal|"."
operator|+
name|subsection
operator|+
literal|"."
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|noteDbConfig
operator|.
name|getNames
argument_list|(
name|section
argument_list|,
literal|false
argument_list|)
operator|.
name|forEach
argument_list|(
name|n
lambda|->
name|bad
operator|.
name|add
argument_list|(
name|section
operator|+
literal|"."
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bad
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Non-NoteDb config options not allowed in "
operator|+
name|noteDbConfig
operator|.
name|getFile
argument_list|()
operator|+
literal|":\n"
operator|+
name|bad
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

