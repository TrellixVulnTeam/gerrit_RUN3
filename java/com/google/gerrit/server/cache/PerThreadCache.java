begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.cache
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Caches object instances for a request as {@link ThreadLocal} in the serving thread.  *  *<p>This class is intended to cache objects that have a high instantiation cost, are specific to  * the current request and potentially need to be instantiated multiple times while serving a  * request.  *  *<p>This is different from the key-value storage in {@code CurrentUser}: {@code CurrentUser}  * offers a key-value storage by providing thread-safe {@code get} and {@code put} methods. Once the  * value is retrieved through {@code get} there is not thread-safety anymore - apart from the  * retrieved object guarantees. Depending on the implementation of {@code CurrentUser}, it might be  * shared between the request serving thread as well as sub- or background treads.  *  *<p>In comparison to that, this class guarantees thread safety even on non-thread-safe objects as  * its cache is tied to the serving thread only. While allowing to cache non-thread-safe objects, it  * has the downside of not sharing any objects with background threads or executors.  *  *<p>Lastly, this class offers a cache, that requires callers to also provide a {@code Supplier} in  * case the object is not present in the cache, while {@code CurrentUser} provides a storage where  * just retrieving stored values is a valid operation.  *  *<p>To prevent OOM errors on requests that would cache a lot of objects, this class enforces an  * internal limit after which no new elements are cached. All {@code get} calls are served by  * invoking the {@code Supplier} after that.  */
end_comment

begin_class
DECL|class|PerThreadCache
specifier|public
class|class
name|PerThreadCache
implements|implements
name|AutoCloseable
block|{
DECL|field|CACHE
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|PerThreadCache
argument_list|>
name|CACHE
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Cache at maximum 50 values per thread. This value was chosen arbitrarily. Some endpoints (like    * ListProjects) break the assumption that the data cached in a request is limited. To prevent    * this class from accumulating an unbound number of objects, we enforce this limit.    */
DECL|field|PER_THREAD_CACHE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PER_THREAD_CACHE_SIZE
init|=
literal|50
decl_stmt|;
comment|/**    * Unique key for key-value mappings stored in PerThreadCache. The key is based on the value's    * class and a list of identifiers that in combination uniquely set the object apart form others    * of the same class.    */
DECL|class|Key
specifier|public
specifier|static
specifier|final
class|class
name|Key
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
DECL|field|identifiers
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Object
argument_list|>
name|identifiers
decl_stmt|;
comment|/**      * Returns a key based on the value's class and an identifier that uniquely identify the value.      * The identifier needs to implement {@code equals()} and {@hashCode()}.      */
DECL|method|create (Class<T> clazz, Object identifier)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Object
name|identifier
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|<>
argument_list|(
name|clazz
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|identifier
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a key based on the value's class and a set of identifiers that uniquely identify the      * value. Identifiers need to implement {@code equals()} and {@hashCode()}.      */
DECL|method|create (Class<T> clazz, Object... identifiers)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Object
modifier|...
name|identifiers
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|<>
argument_list|(
name|clazz
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|identifiers
argument_list|)
argument_list|)
return|;
block|}
DECL|method|Key (Class<T> clazz, ImmutableList<Object> identifiers)
specifier|private
name|Key
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ImmutableList
argument_list|<
name|Object
argument_list|>
name|identifiers
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|identifiers
operator|=
name|identifiers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|clazz
argument_list|,
name|identifiers
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Key
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Key
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|Key
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|clazz
operator|==
name|other
operator|.
name|clazz
operator|&&
name|this
operator|.
name|identifiers
operator|.
name|equals
argument_list|(
name|other
operator|.
name|identifiers
argument_list|)
return|;
block|}
block|}
DECL|method|create ()
specifier|public
specifier|static
name|PerThreadCache
name|create
parameter_list|()
block|{
name|checkState
argument_list|(
name|CACHE
operator|.
name|get
argument_list|()
operator|==
literal|null
argument_list|,
literal|"called create() twice on the same request"
argument_list|)
expr_stmt|;
name|PerThreadCache
name|cache
init|=
operator|new
name|PerThreadCache
argument_list|()
decl_stmt|;
name|CACHE
operator|.
name|set
argument_list|(
name|cache
argument_list|)
expr_stmt|;
return|return
name|cache
return|;
block|}
annotation|@
name|Nullable
DECL|method|get ()
specifier|public
specifier|static
name|PerThreadCache
name|get
parameter_list|()
block|{
return|return
name|CACHE
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getOrCompute (Key<T> key, Supplier<T> loader)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getOrCompute
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|loader
parameter_list|)
block|{
name|PerThreadCache
name|cache
init|=
name|get
argument_list|()
decl_stmt|;
return|return
name|cache
operator|!=
literal|null
condition|?
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|loader
argument_list|)
else|:
name|loader
operator|.
name|get
argument_list|()
return|;
block|}
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
name|PER_THREAD_CACHE_SIZE
argument_list|)
decl_stmt|;
DECL|method|PerThreadCache ()
specifier|private
name|PerThreadCache
parameter_list|()
block|{}
comment|/**    * Returns an instance of {@code T} that was either loaded from the cache or obtained from the    * provided {@link Supplier}.    */
DECL|method|get (Key<T> key, Supplier<T> loader)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|loader
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|value
init|=
operator|(
name|T
operator|)
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|loader
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|<
name|PER_THREAD_CACHE_SIZE
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|CACHE
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

