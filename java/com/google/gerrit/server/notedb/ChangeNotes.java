begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|SetView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RobotComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerByEmailSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ReviewerStatusUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|RefCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbChangeState
operator|.
name|PrimaryStorage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** View of a single {@link Change} based on the log of its notes branch. */
end_comment

begin_class
DECL|class|ChangeNotes
specifier|public
class|class
name|ChangeNotes
extends|extends
name|AbstractChangeNotes
argument_list|<
name|ChangeNotes
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|PSA_BY_TIME
specifier|static
specifier|final
name|Ordering
argument_list|<
name|PatchSetApproval
argument_list|>
name|PSA_BY_TIME
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|comparing
argument_list|(
name|PatchSetApproval
operator|::
name|getGranted
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|MESSAGE_BY_TIME
specifier|public
specifier|static
specifier|final
name|Ordering
argument_list|<
name|ChangeMessage
argument_list|>
name|MESSAGE_BY_TIME
init|=
name|Ordering
operator|.
name|from
argument_list|(
name|comparing
argument_list|(
name|ChangeMessage
operator|::
name|getWrittenOn
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|parseException ( Change.Id changeId, String fmt, Object... args)
specifier|public
specifier|static
name|ConfigInvalidException
name|parseException
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fmt
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
operator|new
name|ConfigInvalidException
argument_list|(
literal|"Change "
operator|+
name|changeId
operator|+
literal|": "
operator|+
name|String
operator|.
name|format
argument_list|(
name|fmt
argument_list|,
name|args
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|readOneReviewDbChange (ReviewDb db, Change.Id id)
specifier|public
specifier|static
name|Change
name|readOneReviewDbChange
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|args
specifier|private
specifier|final
name|Args
name|args
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|VisibleForTesting
annotation|@
name|Inject
DECL|method|Factory ( Args args, Provider<InternalChangeQuery> queryProvider, ProjectCache projectCache)
specifier|public
name|Factory
parameter_list|(
name|Args
name|args
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
DECL|method|createChecked (ReviewDb db, Change c)
specifier|public
name|ChangeNotes
name|createChecked
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|createChecked
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createChecked (ReviewDb db, Project.NameKey project, Change.Id changeId)
specifier|public
name|ChangeNotes
name|createChecked
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|readOneReviewDbChange
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
comment|// Change isn't in ReviewDb, but its primary storage might be in NoteDb.
comment|// Prepopulate the change exists with proper noteDbState field.
name|change
operator|=
name|newNoteDbOnlyChange
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|equals
argument_list|(
name|project
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
return|return
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
DECL|method|createChecked (Change.Id changeId)
specifier|public
name|ChangeNotes
name|createChecked
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|InternalChangeQuery
name|query
init|=
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|noFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|changes
init|=
name|query
operator|.
name|byLegacyChangeId
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
if|if
condition|(
name|changes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"Multiple changes found for %d"
argument_list|,
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
return|return
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|notes
argument_list|()
return|;
block|}
DECL|method|newNoteDbOnlyChange (Project.NameKey project, Change.Id changeId)
specifier|public
specifier|static
name|Change
name|newNoteDbOnlyChange
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
name|Change
name|change
init|=
operator|new
name|Change
argument_list|(
literal|null
argument_list|,
name|changeId
argument_list|,
literal|null
argument_list|,
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|project
argument_list|,
literal|"INVALID_NOTE_DB_ONLY"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|change
operator|.
name|setNoteDbState
argument_list|(
name|NoteDbChangeState
operator|.
name|NOTE_DB_PRIMARY_STATE
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
DECL|method|loadChangeFromDb (ReviewDb db, Project.NameKey project, Change.Id changeId)
specifier|private
name|Change
name|loadChangeFromDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkArgument
argument_list|(
name|project
operator|!=
literal|null
argument_list|,
literal|"project is required"
argument_list|)
expr_stmt|;
name|Change
name|change
init|=
name|readOneReviewDbChange
argument_list|(
name|db
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
return|return
name|newNoteDbOnlyChange
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|changeId
argument_list|)
throw|;
block|}
name|checkArgument
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
operator|.
name|equals
argument_list|(
name|project
argument_list|)
argument_list|,
literal|"passed project %s when creating ChangeNotes for %s, but actual project is %s"
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|,
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
DECL|method|create (ReviewDb db, Project.NameKey project, Change.Id changeId)
specifier|public
name|ChangeNotes
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|loadChangeFromDb
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|changeId
argument_list|)
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
comment|/**      * Create change notes for a change that was loaded from index. This method should only be used      * when database access is harmful and potentially stale data from the index is acceptable.      *      * @param change change loaded from secondary index      * @return change notes      */
DECL|method|createFromIndexedChange (Change change)
specifier|public
name|ChangeNotes
name|createFromIndexedChange
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|change
argument_list|)
return|;
block|}
DECL|method|createForBatchUpdate (Change change, boolean shouldExist)
specifier|public
name|ChangeNotes
name|createForBatchUpdate
parameter_list|(
name|Change
name|change
parameter_list|,
name|boolean
name|shouldExist
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|change
argument_list|,
name|shouldExist
argument_list|,
literal|null
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
DECL|method|create (Change change, RefCache refs)
specifier|public
name|ChangeNotes
name|create
parameter_list|(
name|Change
name|change
parameter_list|,
name|RefCache
name|refs
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|change
argument_list|,
literal|true
argument_list|,
name|refs
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
comment|// TODO(ekempin): Remove when database backend is deleted
comment|/**      * Instantiate ChangeNotes for a change that has been loaded by a batch read from the database.      */
DECL|method|createFromChangeOnlyWhenNoteDbDisabled (Change change)
specifier|private
name|ChangeNotes
name|createFromChangeOnlyWhenNoteDbDisabled
parameter_list|(
name|Change
name|change
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkState
argument_list|(
operator|!
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
argument_list|,
literal|"do not call createFromChangeWhenNoteDbDisabled when NoteDb is enabled"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|change
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
DECL|method|create (ReviewDb db, Collection<Change.Id> changeIds)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changeIds
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|changeId
range|:
name|changeIds
control|)
block|{
try|try
block|{
name|notes
operator|.
name|add
argument_list|(
name|createChecked
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
comment|// Ignore missing changes to match Access#get(Iterable) behavior.
block|}
block|}
return|return
name|notes
return|;
block|}
for|for
control|(
name|Change
name|c
range|:
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeIds
argument_list|)
control|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|notes
return|;
block|}
DECL|method|create ( ReviewDb db, Project.NameKey project, Collection<Change.Id> changeIds, Predicate<ChangeNotes> predicate)
specifier|public
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Collection
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|changeIds
parameter_list|,
name|Predicate
argument_list|<
name|ChangeNotes
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|Change
operator|.
name|Id
name|cid
range|:
name|changeIds
control|)
block|{
try|try
block|{
name|ChangeNotes
name|cn
init|=
name|create
argument_list|(
name|db
argument_list|,
name|project
argument_list|,
name|cid
argument_list|)
decl_stmt|;
if|if
condition|(
name|cn
operator|.
name|getChange
argument_list|()
operator|!=
literal|null
operator|&&
name|predicate
operator|.
name|test
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchChangeException
name|e
parameter_list|)
block|{
comment|// Match ReviewDb behavior, returning not found; maybe the caller learned about it from
comment|// a dangling patch set ref or something.
continue|continue;
block|}
block|}
return|return
name|notes
return|;
block|}
for|for
control|(
name|Change
name|c
range|:
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|changeIds
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|project
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeNotes
name|cn
init|=
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|notes
return|;
block|}
DECL|method|create ( ReviewDb db, Predicate<ChangeNotes> predicate)
specifier|public
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ChangeNotes
argument_list|>
name|create
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Predicate
argument_list|<
name|ChangeNotes
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|ListMultimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|ChangeNotes
argument_list|>
name|m
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|projectCache
operator|.
name|all
argument_list|()
control|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|args
operator|.
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|)
block|{
name|scan
argument_list|(
name|repo
argument_list|,
name|project
argument_list|)
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|r
operator|.
name|error
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|ChangeNotesResult
operator|::
name|notes
argument_list|)
operator|.
name|filter
argument_list|(
name|predicate
argument_list|)
operator|.
name|forEach
argument_list|(
name|n
lambda|->
name|m
operator|.
name|put
argument_list|(
name|n
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Change
name|change
range|:
name|ReviewDbUtil
operator|.
name|unwrapDb
argument_list|(
name|db
argument_list|)
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
control|)
block|{
name|ChangeNotes
name|notes
init|=
name|createFromChangeOnlyWhenNoteDbDisabled
argument_list|(
name|change
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|notes
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|,
name|notes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|m
argument_list|)
return|;
block|}
DECL|method|scan (Repository repo, Project.NameKey project)
specifier|public
name|Stream
argument_list|<
name|ChangeNotesResult
argument_list|>
name|scan
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IOException
block|{
name|ScanResult
name|sr
init|=
name|scanChangeIds
argument_list|(
name|repo
argument_list|)
decl_stmt|;
return|return
name|sr
operator|.
name|all
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|id
lambda|->
name|scanOneChange
argument_list|(
name|project
argument_list|,
name|sr
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
DECL|method|scanOneChange (Project.NameKey project, ScanResult sr, Change.Id id)
specifier|private
name|ChangeNotesResult
name|scanOneChange
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|ScanResult
name|sr
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sr
operator|.
name|fromMetaRefs
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// Stray patch set refs can happen due to normal error conditions, e.g. failed
comment|// push processing, so aren't worth even a warning.
return|return
literal|null
return|;
block|}
comment|// TODO(dborowitz): See discussion in BatchUpdate#newChangeContext.
name|Change
name|change
init|=
name|ChangeNotes
operator|.
name|Factory
operator|.
name|newNoteDbOnlyChange
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"adding change %s found in project %s"
argument_list|,
name|id
argument_list|,
name|project
argument_list|)
expr_stmt|;
return|return
name|toResult
argument_list|(
name|change
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|toResult (Change rawChangeFromReviewDbOrNoteDb)
specifier|private
name|ChangeNotesResult
name|toResult
parameter_list|(
name|Change
name|rawChangeFromReviewDbOrNoteDb
parameter_list|)
block|{
name|ChangeNotes
name|n
init|=
operator|new
name|ChangeNotes
argument_list|(
name|args
argument_list|,
name|rawChangeFromReviewDbOrNoteDb
argument_list|)
decl_stmt|;
try|try
block|{
name|n
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
return|return
name|ChangeNotesResult
operator|.
name|error
argument_list|(
name|n
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
return|return
name|ChangeNotesResult
operator|.
name|notes
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/** Result of {@link #scan(Repository,Project.NameKey)}. */
annotation|@
name|AutoValue
DECL|class|ChangeNotesResult
specifier|public
specifier|abstract
specifier|static
class|class
name|ChangeNotesResult
block|{
DECL|method|error (Change.Id id, OrmException e)
specifier|static
name|ChangeNotesResult
name|error
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|OrmException
name|e
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeNotes_Factory_ChangeNotesResult
argument_list|(
name|id
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|notes (ChangeNotes notes)
specifier|static
name|ChangeNotesResult
name|notes
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_ChangeNotes_Factory_ChangeNotesResult
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|notes
argument_list|)
return|;
block|}
comment|/** Change ID that was scanned. */
DECL|method|id ()
specifier|public
specifier|abstract
name|Change
operator|.
name|Id
name|id
parameter_list|()
function_decl|;
comment|/** Error encountered while loading this change, if any. */
DECL|method|error ()
specifier|public
specifier|abstract
name|Optional
argument_list|<
name|OrmException
argument_list|>
name|error
parameter_list|()
function_decl|;
comment|/**        * Notes loaded for this change.        *        * @return notes.        * @throws IllegalStateException if there was an error loading the change; callers must check        *     that {@link #error()} is absent before attempting to look up the notes.        */
DECL|method|notes ()
specifier|public
name|ChangeNotes
name|notes
parameter_list|()
block|{
name|checkState
argument_list|(
name|maybeNotes
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"no ChangeNotes loaded; check error().isPresent() first"
argument_list|)
expr_stmt|;
return|return
name|maybeNotes
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|maybeNotes ()
specifier|abstract
name|ChangeNotes
name|maybeNotes
parameter_list|()
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|ScanResult
specifier|abstract
specifier|static
class|class
name|ScanResult
block|{
DECL|method|fromPatchSetRefs ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|fromPatchSetRefs
parameter_list|()
function_decl|;
DECL|method|fromMetaRefs ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|fromMetaRefs
parameter_list|()
function_decl|;
DECL|method|all ()
name|SetView
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|all
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|union
argument_list|(
name|fromPatchSetRefs
argument_list|()
argument_list|,
name|fromMetaRefs
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|scanChangeIds (Repository repo)
specifier|private
specifier|static
name|ScanResult
name|scanChangeIds
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|fromPs
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|fromMeta
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|REFS_CHANGES
argument_list|)
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|Change
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
operator|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|RefNames
operator|.
name|META_SUFFIX
argument_list|)
condition|?
name|fromMeta
else|:
name|fromPs
operator|)
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AutoValue_ChangeNotes_Factory_ScanResult
argument_list|(
name|fromPs
operator|.
name|build
argument_list|()
argument_list|,
name|fromMeta
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|field|shouldExist
specifier|private
specifier|final
name|boolean
name|shouldExist
decl_stmt|;
DECL|field|refs
specifier|private
specifier|final
name|RefCache
name|refs
decl_stmt|;
DECL|field|change
specifier|private
name|Change
name|change
decl_stmt|;
DECL|field|state
specifier|private
name|ChangeNotesState
name|state
decl_stmt|;
comment|// Parsed note map state, used by ChangeUpdate to make in-place editing of
comment|// notes easier.
DECL|field|revisionNoteMap
name|RevisionNoteMap
argument_list|<
name|ChangeRevisionNote
argument_list|>
name|revisionNoteMap
decl_stmt|;
DECL|field|draftCommentNotes
specifier|private
name|DraftCommentNotes
name|draftCommentNotes
decl_stmt|;
DECL|field|robotCommentNotes
specifier|private
name|RobotCommentNotes
name|robotCommentNotes
decl_stmt|;
comment|// Lazy defensive copies of mutable ReviewDb types, to avoid polluting the
comment|// ChangeNotesCache from handlers.
DECL|field|patchSets
specifier|private
name|ImmutableSortedMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|patchSets
decl_stmt|;
DECL|field|approvals
specifier|private
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
decl_stmt|;
DECL|field|commentKeys
specifier|private
name|ImmutableSet
argument_list|<
name|Comment
operator|.
name|Key
argument_list|>
name|commentKeys
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|ChangeNotes (Args args, Change change)
specifier|public
name|ChangeNotes
parameter_list|(
name|Args
name|args
parameter_list|,
name|Change
name|change
parameter_list|)
block|{
name|this
argument_list|(
name|args
argument_list|,
name|change
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ChangeNotes (Args args, Change change, boolean shouldExist, @Nullable RefCache refs)
specifier|private
name|ChangeNotes
parameter_list|(
name|Args
name|args
parameter_list|,
name|Change
name|change
parameter_list|,
name|boolean
name|shouldExist
parameter_list|,
annotation|@
name|Nullable
name|RefCache
name|refs
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|change
operator|=
operator|new
name|Change
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|this
operator|.
name|shouldExist
operator|=
name|shouldExist
expr_stmt|;
name|this
operator|.
name|refs
operator|=
name|refs
expr_stmt|;
block|}
DECL|method|getChange ()
specifier|public
name|Change
name|getChange
parameter_list|()
block|{
return|return
name|change
return|;
block|}
DECL|method|getMetaId ()
specifier|public
name|ObjectId
name|getMetaId
parameter_list|()
block|{
return|return
name|state
operator|.
name|metaId
argument_list|()
return|;
block|}
DECL|method|getPatchSets ()
specifier|public
name|ImmutableSortedMap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|getPatchSets
parameter_list|()
block|{
if|if
condition|(
name|patchSets
operator|==
literal|null
condition|)
block|{
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|b
init|=
name|ImmutableSortedMap
operator|.
name|orderedBy
argument_list|(
name|comparing
argument_list|(
name|PatchSet
operator|.
name|Id
operator|::
name|get
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSet
argument_list|>
name|e
range|:
name|state
operator|.
name|patchSets
argument_list|()
control|)
block|{
name|b
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|PatchSet
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|patchSets
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|patchSets
return|;
block|}
DECL|method|getApprovals ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|getApprovals
parameter_list|()
block|{
if|if
condition|(
name|approvals
operator|==
literal|null
condition|)
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|b
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|PatchSetApproval
argument_list|>
name|e
range|:
name|state
operator|.
name|approvals
argument_list|()
control|)
block|{
name|b
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|PatchSetApproval
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|approvals
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|approvals
return|;
block|}
DECL|method|getReviewers ()
specifier|public
name|ReviewerSet
name|getReviewers
parameter_list|()
block|{
return|return
name|state
operator|.
name|reviewers
argument_list|()
return|;
block|}
comment|/** @return reviewers that do not currently have a Gerrit account and were added by email. */
DECL|method|getReviewersByEmail ()
specifier|public
name|ReviewerByEmailSet
name|getReviewersByEmail
parameter_list|()
block|{
return|return
name|state
operator|.
name|reviewersByEmail
argument_list|()
return|;
block|}
comment|/** @return reviewers that were modified during this change's current WIP phase. */
DECL|method|getPendingReviewers ()
specifier|public
name|ReviewerSet
name|getPendingReviewers
parameter_list|()
block|{
return|return
name|state
operator|.
name|pendingReviewers
argument_list|()
return|;
block|}
comment|/** @return reviewers by email that were modified during this change's current WIP phase. */
DECL|method|getPendingReviewersByEmail ()
specifier|public
name|ReviewerByEmailSet
name|getPendingReviewersByEmail
parameter_list|()
block|{
return|return
name|state
operator|.
name|pendingReviewersByEmail
argument_list|()
return|;
block|}
DECL|method|getReviewerUpdates ()
specifier|public
name|ImmutableList
argument_list|<
name|ReviewerStatusUpdate
argument_list|>
name|getReviewerUpdates
parameter_list|()
block|{
return|return
name|state
operator|.
name|reviewerUpdates
argument_list|()
return|;
block|}
comment|/** @return an ImmutableSet of Account.Ids of all users that have been assigned to this change. */
DECL|method|getPastAssignees ()
specifier|public
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getPastAssignees
parameter_list|()
block|{
return|return
name|state
operator|.
name|pastAssignees
argument_list|()
return|;
block|}
comment|/** @return a ImmutableSet of all hashtags for this change sorted in alphabetical order. */
DECL|method|getHashtags ()
specifier|public
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|getHashtags
parameter_list|()
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|state
operator|.
name|hashtags
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return a list of all users who have ever been a reviewer on this change. */
DECL|method|getAllPastReviewers ()
specifier|public
name|ImmutableList
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getAllPastReviewers
parameter_list|()
block|{
return|return
name|state
operator|.
name|allPastReviewers
argument_list|()
return|;
block|}
comment|/**    * @return submit records stored during the most recent submit; only for changes that were    *     actually submitted.    */
DECL|method|getSubmitRecords ()
specifier|public
name|ImmutableList
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|()
block|{
return|return
name|state
operator|.
name|submitRecords
argument_list|()
return|;
block|}
comment|/** @return all change messages, in chronological order, oldest first. */
DECL|method|getChangeMessages ()
specifier|public
name|ImmutableList
argument_list|<
name|ChangeMessage
argument_list|>
name|getChangeMessages
parameter_list|()
block|{
return|return
name|state
operator|.
name|changeMessages
argument_list|()
return|;
block|}
comment|/** @return inline comments on each revision. */
DECL|method|getComments ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|Comment
argument_list|>
name|getComments
parameter_list|()
block|{
return|return
name|state
operator|.
name|publishedComments
argument_list|()
return|;
block|}
DECL|method|getCommentKeys ()
specifier|public
name|ImmutableSet
argument_list|<
name|Comment
operator|.
name|Key
argument_list|>
name|getCommentKeys
parameter_list|()
block|{
if|if
condition|(
name|commentKeys
operator|==
literal|null
condition|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Comment
operator|.
name|Key
argument_list|>
name|b
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|getComments
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|b
operator|.
name|add
argument_list|(
operator|new
name|Comment
operator|.
name|Key
argument_list|(
name|c
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commentKeys
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|commentKeys
return|;
block|}
DECL|method|getDraftComments (Account.Id author)
specifier|public
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|Comment
argument_list|>
name|getDraftComments
parameter_list|(
name|Account
operator|.
name|Id
name|author
parameter_list|)
throws|throws
name|OrmException
block|{
return|return
name|getDraftComments
argument_list|(
name|author
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getDraftComments ( Account.Id author, @Nullable Ref ref)
specifier|public
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|Comment
argument_list|>
name|getDraftComments
parameter_list|(
name|Account
operator|.
name|Id
name|author
parameter_list|,
annotation|@
name|Nullable
name|Ref
name|ref
parameter_list|)
throws|throws
name|OrmException
block|{
name|loadDraftComments
argument_list|(
name|author
argument_list|,
name|ref
argument_list|)
expr_stmt|;
comment|// Filter out any zombie draft comments. These are drafts that are also in
comment|// the published map, and arise when the update to All-Users to delete them
comment|// during the publish operation failed.
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|Multimaps
operator|.
name|filterEntries
argument_list|(
name|draftCommentNotes
operator|.
name|getComments
argument_list|()
argument_list|,
name|e
lambda|->
operator|!
name|getCommentKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRobotComments ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|RevId
argument_list|,
name|RobotComment
argument_list|>
name|getRobotComments
parameter_list|()
throws|throws
name|OrmException
block|{
name|loadRobotComments
argument_list|()
expr_stmt|;
return|return
name|robotCommentNotes
operator|.
name|getComments
argument_list|()
return|;
block|}
comment|/**    * If draft comments have already been loaded for this author, then they will not be reloaded.    * However, this method will load the comments if no draft comments have been loaded or if the    * caller would like the drafts for another author.    */
DECL|method|loadDraftComments (Account.Id author, @Nullable Ref ref)
specifier|private
name|void
name|loadDraftComments
parameter_list|(
name|Account
operator|.
name|Id
name|author
parameter_list|,
annotation|@
name|Nullable
name|Ref
name|ref
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|draftCommentNotes
operator|==
literal|null
operator|||
operator|!
name|author
operator|.
name|equals
argument_list|(
name|draftCommentNotes
operator|.
name|getAuthor
argument_list|()
argument_list|)
operator|||
name|ref
operator|!=
literal|null
condition|)
block|{
name|draftCommentNotes
operator|=
operator|new
name|DraftCommentNotes
argument_list|(
name|args
argument_list|,
name|getChangeId
argument_list|()
argument_list|,
name|author
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|draftCommentNotes
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadRobotComments ()
specifier|private
name|void
name|loadRobotComments
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
name|robotCommentNotes
operator|==
literal|null
condition|)
block|{
name|robotCommentNotes
operator|=
operator|new
name|RobotCommentNotes
argument_list|(
name|args
argument_list|,
name|change
argument_list|)
expr_stmt|;
name|robotCommentNotes
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDraftCommentNotes ()
name|DraftCommentNotes
name|getDraftCommentNotes
parameter_list|()
block|{
return|return
name|draftCommentNotes
return|;
block|}
DECL|method|getRobotCommentNotes ()
specifier|public
name|RobotCommentNotes
name|getRobotCommentNotes
parameter_list|()
block|{
return|return
name|robotCommentNotes
return|;
block|}
DECL|method|containsComment (Comment c)
specifier|public
name|boolean
name|containsComment
parameter_list|(
name|Comment
name|c
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|containsCommentPublished
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|loadDraftComments
argument_list|(
name|c
operator|.
name|author
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|draftCommentNotes
operator|.
name|containsComment
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|containsCommentPublished (Comment c)
specifier|public
name|boolean
name|containsCommentPublished
parameter_list|(
name|Comment
name|c
parameter_list|)
block|{
for|for
control|(
name|Comment
name|l
range|:
name|getComments
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|key
operator|.
name|equals
argument_list|(
name|l
operator|.
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|public
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|changeMetaRef
argument_list|(
name|getChangeId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCurrentPatchSet ()
specifier|public
name|PatchSet
name|getCurrentPatchSet
parameter_list|()
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|change
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
return|return
name|requireNonNull
argument_list|(
name|getPatchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"missing current patch set %s"
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReadOnlyUntil ()
specifier|public
name|Timestamp
name|getReadOnlyUntil
parameter_list|()
block|{
return|return
name|state
operator|.
name|readOnlyUntil
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad (LoadHandle handle)
specifier|protected
name|void
name|onLoad
parameter_list|(
name|LoadHandle
name|handle
parameter_list|)
throws|throws
name|NoSuchChangeException
throws|,
name|IOException
block|{
name|ObjectId
name|rev
init|=
name|handle
operator|.
name|id
argument_list|()
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|migration
operator|.
name|readChanges
argument_list|()
operator|&&
name|PrimaryStorage
operator|.
name|of
argument_list|(
name|change
argument_list|)
operator|==
name|PrimaryStorage
operator|.
name|NOTE_DB
operator|&&
name|shouldExist
condition|)
block|{
throw|throw
operator|new
name|NoSuchChangeException
argument_list|(
name|getChangeId
argument_list|()
argument_list|)
throw|;
block|}
name|loadDefaults
argument_list|()
expr_stmt|;
return|return;
block|}
name|ChangeNotesCache
operator|.
name|Value
name|v
init|=
name|args
operator|.
name|cache
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|getProjectName
argument_list|()
argument_list|,
name|getChangeId
argument_list|()
argument_list|,
name|rev
argument_list|,
name|handle
operator|.
name|walk
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|=
name|v
operator|.
name|state
argument_list|()
expr_stmt|;
name|state
operator|.
name|copyColumnsTo
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|revisionNoteMap
operator|=
name|v
operator|.
name|revisionNoteMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadDefaults ()
specifier|protected
name|void
name|loadDefaults
parameter_list|()
block|{
name|state
operator|=
name|ChangeNotesState
operator|.
name|empty
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProjectName ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|change
operator|.
name|getProject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readRef (Repository repo)
specifier|protected
name|ObjectId
name|readRef
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|refs
operator|!=
literal|null
condition|?
name|refs
operator|.
name|get
argument_list|(
name|getRefName
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
else|:
name|super
operator|.
name|readRef
argument_list|(
name|repo
argument_list|)
return|;
block|}
block|}
end_class

end_unit

