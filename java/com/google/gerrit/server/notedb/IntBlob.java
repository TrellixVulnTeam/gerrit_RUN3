begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RefUpdateUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
annotation|@
name|AutoValue
DECL|class|IntBlob
specifier|public
specifier|abstract
class|class
name|IntBlob
block|{
DECL|method|parse (Repository repo, String refName)
specifier|public
specifier|static
name|Optional
argument_list|<
name|IntBlob
argument_list|>
name|parse
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|)
throws|throws
name|IOException
throws|,
name|StorageException
block|{
try|try
init|(
name|ObjectReader
name|or
init|=
name|repo
operator|.
name|newObjectReader
argument_list|()
init|)
block|{
return|return
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|,
name|or
argument_list|)
return|;
block|}
block|}
DECL|method|parse (Repository repo, String refName, RevWalk rw)
specifier|public
specifier|static
name|Optional
argument_list|<
name|IntBlob
argument_list|>
name|parse
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|,
name|RevWalk
name|rw
parameter_list|)
throws|throws
name|IOException
throws|,
name|StorageException
block|{
return|return
name|parse
argument_list|(
name|repo
argument_list|,
name|refName
argument_list|,
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parse (Repository repo, String refName, ObjectReader or)
specifier|private
specifier|static
name|Optional
argument_list|<
name|IntBlob
argument_list|>
name|parse
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|refName
parameter_list|,
name|ObjectReader
name|or
parameter_list|)
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|ObjectId
name|id
init|=
name|ref
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|ObjectLoader
name|ol
init|=
name|or
operator|.
name|open
argument_list|(
name|id
argument_list|,
name|OBJ_BLOB
argument_list|)
decl_stmt|;
if|if
condition|(
name|ol
operator|.
name|getType
argument_list|()
operator|!=
name|OBJ_BLOB
condition|)
block|{
comment|// In theory this should be thrown by open but not all implementations may do it properly
comment|// (certainly InMemoryRepository doesn't).
throw|throw
operator|new
name|IncorrectObjectTypeException
argument_list|(
name|id
argument_list|,
name|OBJ_BLOB
argument_list|)
throw|;
block|}
name|String
name|str
init|=
name|CharMatcher
operator|.
name|whitespace
argument_list|()
operator|.
name|trimFrom
argument_list|(
operator|new
name|String
argument_list|(
name|ol
operator|.
name|getCachedBytes
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|value
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"invalid value in "
operator|+
name|refName
operator|+
literal|" blob at "
operator|+
name|id
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|IntBlob
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|tryStore ( Repository repo, RevWalk rw, Project.NameKey projectName, String refName, @Nullable ObjectId oldId, int val, GitReferenceUpdated gitRefUpdated)
specifier|public
specifier|static
name|RefUpdate
name|tryStore
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|String
name|refName
parameter_list|,
annotation|@
name|Nullable
name|ObjectId
name|oldId
parameter_list|,
name|int
name|val
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|newId
decl_stmt|;
try|try
init|(
name|ObjectInserter
name|ins
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|newId
operator|=
name|ins
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|ins
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|RefUpdate
name|ru
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldId
operator|!=
literal|null
condition|)
block|{
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
block|}
name|ru
operator|.
name|disableRefLog
argument_list|()
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Required for non-commitish updates.
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|ru
operator|.
name|update
argument_list|(
name|rw
argument_list|)
decl_stmt|;
if|if
condition|(
name|refUpdated
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|projectName
argument_list|,
name|ru
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|ru
return|;
block|}
DECL|method|store ( Repository repo, RevWalk rw, Project.NameKey projectName, String refName, @Nullable ObjectId oldId, int val, GitReferenceUpdated gitRefUpdated)
specifier|public
specifier|static
name|void
name|store
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|String
name|refName
parameter_list|,
annotation|@
name|Nullable
name|ObjectId
name|oldId
parameter_list|,
name|int
name|val
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|)
throws|throws
name|IOException
block|{
name|RefUpdateUtil
operator|.
name|checkResult
argument_list|(
name|tryStore
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|projectName
argument_list|,
name|refName
argument_list|,
name|oldId
argument_list|,
name|val
argument_list|,
name|gitRefUpdated
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|refUpdated (RefUpdate.Result result)
specifier|private
specifier|static
name|boolean
name|refUpdated
parameter_list|(
name|RefUpdate
operator|.
name|Result
name|result
parameter_list|)
block|{
return|return
name|result
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
operator|||
name|result
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|create (AnyObjectId id, int value)
specifier|static
name|IntBlob
name|create
parameter_list|(
name|AnyObjectId
name|id
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_IntBlob
argument_list|(
name|id
operator|.
name|copy
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|id ()
specifier|public
specifier|abstract
name|ObjectId
name|id
parameter_list|()
function_decl|;
DECL|method|value ()
specifier|public
specifier|abstract
name|int
name|value
parameter_list|()
function_decl|;
block|}
end_class

end_unit

