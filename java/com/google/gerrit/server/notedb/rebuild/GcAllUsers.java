begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb.rebuild
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|rebuild
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ConfigConstants
operator|.
name|CONFIG_GC_SECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ConfigConstants
operator|.
name|CONFIG_KEY_AUTO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GarbageCollectionResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GarbageCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LocalDiskRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|GcAllUsers
specifier|public
class|class
name|GcAllUsers
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|gcFactory
specifier|private
specifier|final
name|GarbageCollection
operator|.
name|Factory
name|gcFactory
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|GcAllUsers ( AllUsersName allUsers, GarbageCollection.Factory gcFactory, GitRepositoryManager repoManager)
name|GcAllUsers
parameter_list|(
name|AllUsersName
name|allUsers
parameter_list|,
name|GarbageCollection
operator|.
name|Factory
name|gcFactory
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|)
block|{
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|gcFactory
operator|=
name|gcFactory
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
block|}
DECL|method|runWithLogger ()
specifier|public
name|void
name|runWithLogger
parameter_list|()
block|{
comment|// Print log messages using logger, and skip progress.
name|run
argument_list|(
name|s
lambda|->
name|logger
operator|.
name|atInfo
argument_list|()
operator|.
name|log
argument_list|(
name|s
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|run (PrintWriter writer)
specifier|public
name|void
name|run
parameter_list|(
name|PrintWriter
name|writer
parameter_list|)
block|{
comment|// Print both log messages and progress to given writer.
name|run
argument_list|(
name|checkNotNull
argument_list|(
name|writer
argument_list|)
operator|::
name|println
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
DECL|method|run (Consumer<String> logOneLine, @Nullable PrintWriter progressWriter)
specifier|private
name|void
name|run
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|logOneLine
parameter_list|,
annotation|@
name|Nullable
name|PrintWriter
name|progressWriter
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|repoManager
operator|instanceof
name|LocalDiskRepositoryManager
operator|)
condition|)
block|{
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"Skipping GC of "
operator|+
name|allUsers
operator|+
literal|"; not a local disk repo"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|enableAutoGc
argument_list|(
name|logOneLine
argument_list|)
condition|)
block|{
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"Skipping GC of "
operator|+
name|allUsers
operator|+
literal|" due to disabling "
operator|+
name|CONFIG_GC_SECTION
operator|+
literal|"."
operator|+
name|CONFIG_KEY_AUTO
argument_list|)
expr_stmt|;
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"If loading accounts is slow after the NoteDb migration, run `git gc` on "
operator|+
name|allUsers
operator|+
literal|" manually"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|progressWriter
operator|==
literal|null
condition|)
block|{
comment|// Mimic log line from GarbageCollection.
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"collecting garbage for \""
operator|+
name|allUsers
operator|+
literal|"\":\n"
argument_list|)
expr_stmt|;
block|}
name|GarbageCollectionResult
name|result
init|=
name|gcFactory
operator|.
name|create
argument_list|()
operator|.
name|run
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|allUsers
argument_list|)
argument_list|,
name|progressWriter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|GarbageCollectionResult
operator|.
name|Error
name|e
range|:
name|result
operator|.
name|getErrors
argument_list|()
control|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|GC_ALREADY_SCHEDULED
case|:
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"GC already scheduled for "
operator|+
name|e
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GC_FAILED
case|:
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"GC failed for "
operator|+
name|e
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPOSITORY_NOT_FOUND
case|:
name|logOneLine
operator|.
name|accept
argument_list|(
name|e
operator|.
name|getProjectName
argument_list|()
operator|+
literal|" repo not found"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"GC failed for "
operator|+
name|e
operator|.
name|getProjectName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|enableAutoGc (Consumer<String> logOneLine)
specifier|private
name|boolean
name|enableAutoGc
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|logOneLine
parameter_list|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsers
argument_list|)
init|)
block|{
return|return
name|repo
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|CONFIG_GC_SECTION
argument_list|,
name|CONFIG_KEY_AUTO
argument_list|,
operator|-
literal|1
argument_list|)
operator|!=
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logOneLine
operator|.
name|accept
argument_list|(
literal|"Error reading config for "
operator|+
name|allUsers
operator|+
literal|":\n"
operator|+
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

