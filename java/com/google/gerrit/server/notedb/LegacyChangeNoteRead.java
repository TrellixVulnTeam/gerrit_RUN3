begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
operator|.
name|parseException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|GitDateParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|MutableInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|QuotedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_class
DECL|class|LegacyChangeNoteRead
specifier|public
class|class
name|LegacyChangeNoteRead
block|{
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
annotation|@
name|Inject
DECL|method|LegacyChangeNoteRead (@erritServerId String serverId)
specifier|public
name|LegacyChangeNoteRead
parameter_list|(
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|)
block|{
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
block|}
DECL|method|parseIdent (PersonIdent ident, Change.Id changeId)
specifier|public
name|Account
operator|.
name|Id
name|parseIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|NoteDbUtil
operator|.
name|parseIdent
argument_list|(
name|ident
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"cannot retrieve account id: %s"
argument_list|,
name|ident
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|match (byte[] note, MutableInteger p, byte[] expected)
specifier|private
specifier|static
name|boolean
name|match
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|p
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
block|{
name|int
name|m
init|=
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|p
operator|.
name|value
argument_list|,
name|expected
argument_list|)
decl_stmt|;
return|return
name|m
operator|==
name|p
operator|.
name|value
operator|+
name|expected
operator|.
name|length
return|;
block|}
DECL|method|parseNote (byte[] note, MutableInteger p, Change.Id changeId)
specifier|public
name|List
argument_list|<
name|Comment
argument_list|>
name|parseNote
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|p
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|p
operator|.
name|value
operator|>=
name|note
operator|.
name|length
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Comment
operator|.
name|Key
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Comment
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|sizeOfNote
init|=
name|note
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|psb
init|=
name|ChangeNoteUtil
operator|.
name|PATCH_SET
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bpsb
init|=
name|ChangeNoteUtil
operator|.
name|BASE_PATCH_SET
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bpn
init|=
name|ChangeNoteUtil
operator|.
name|PARENT_NUMBER
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectId
name|commitId
init|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|parseStringField
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|REVISION
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
literal|null
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
literal|null
decl_stmt|;
name|boolean
name|isForBase
init|=
literal|false
decl_stmt|;
name|Integer
name|parentNumber
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|value
operator|<
name|sizeOfNote
condition|)
block|{
name|boolean
name|matchPs
init|=
name|match
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|psb
argument_list|)
decl_stmt|;
name|boolean
name|matchBase
init|=
name|match
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|bpsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchPs
condition|)
block|{
name|fileName
operator|=
literal|null
expr_stmt|;
name|psId
operator|=
name|parsePsId
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|PATCH_SET
argument_list|)
expr_stmt|;
name|isForBase
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchBase
condition|)
block|{
name|fileName
operator|=
literal|null
expr_stmt|;
name|psId
operator|=
name|parsePsId
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|BASE_PATCH_SET
argument_list|)
expr_stmt|;
name|isForBase
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|match
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|bpn
argument_list|)
condition|)
block|{
name|parentNumber
operator|=
name|parseParentNumber
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"missing %s or %s header"
argument_list|,
name|ChangeNoteUtil
operator|.
name|PATCH_SET
argument_list|,
name|ChangeNoteUtil
operator|.
name|BASE_PATCH_SET
argument_list|)
throw|;
block|}
name|Comment
name|c
init|=
name|parseComment
argument_list|(
name|note
argument_list|,
name|p
argument_list|,
name|fileName
argument_list|,
name|psId
argument_list|,
name|commitId
argument_list|,
name|isForBase
argument_list|,
name|parentNumber
argument_list|)
decl_stmt|;
name|fileName
operator|=
name|c
operator|.
name|key
operator|.
name|filename
expr_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|add
argument_list|(
name|c
operator|.
name|key
argument_list|)
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"multiple comments for %s in note"
argument_list|,
name|c
operator|.
name|key
argument_list|)
throw|;
block|}
name|result
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseComment ( byte[] note, MutableInteger curr, String currentFileName, PatchSet.Id psId, ObjectId commitId, boolean isForBase, Integer parentNumber)
specifier|private
name|Comment
name|parseComment
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|String
name|currentFileName
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|ObjectId
name|commitId
parameter_list|,
name|boolean
name|isForBase
parameter_list|,
name|Integer
name|parentNumber
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|psId
operator|.
name|changeId
argument_list|()
decl_stmt|;
comment|// Check if there is a new file.
name|boolean
name|newFile
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|ChangeNoteUtil
operator|.
name|FILE
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newFile
condition|)
block|{
comment|// If so, parse the new file name.
name|currentFileName
operator|=
name|parseFilename
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFileName
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|ChangeNoteUtil
operator|.
name|FILE
argument_list|)
throw|;
block|}
name|CommentRange
name|range
init|=
name|parseCommentRange
argument_list|(
name|note
argument_list|,
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|ChangeNoteUtil
operator|.
name|COMMENT_RANGE
argument_list|)
throw|;
block|}
name|Timestamp
name|commentTime
init|=
name|parseTimestamp
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|aId
init|=
name|parseAuthor
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|AUTHOR
argument_list|)
decl_stmt|;
name|boolean
name|hasRealAuthor
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|ChangeNoteUtil
operator|.
name|REAL_AUTHOR
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|Account
operator|.
name|Id
name|raId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasRealAuthor
condition|)
block|{
name|raId
operator|=
name|parseAuthor
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|REAL_AUTHOR
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasParent
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|ChangeNoteUtil
operator|.
name|PARENT
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|parentUUID
init|=
literal|null
decl_stmt|;
name|boolean
name|unresolved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hasParent
condition|)
block|{
name|parentUUID
operator|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|PARENT
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasUnresolved
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|ChangeNoteUtil
operator|.
name|UNRESOLVED
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasUnresolved
condition|)
block|{
name|unresolved
operator|=
name|parseBooleanField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|UNRESOLVED
argument_list|)
expr_stmt|;
block|}
name|String
name|uuid
init|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|UUID
argument_list|)
decl_stmt|;
name|boolean
name|hasTag
init|=
operator|(
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|ChangeNoteUtil
operator|.
name|TAG
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|tag
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasTag
condition|)
block|{
name|tag
operator|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|ChangeNoteUtil
operator|.
name|TAG
argument_list|)
expr_stmt|;
block|}
name|int
name|commentLength
init|=
name|parseCommentLength
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|curr
operator|.
name|value
operator|+
name|commentLength
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|message
argument_list|,
literal|"message contents"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|Comment
name|c
init|=
operator|new
name|Comment
argument_list|(
operator|new
name|Comment
operator|.
name|Key
argument_list|(
name|uuid
argument_list|,
name|currentFileName
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|aId
argument_list|,
name|commentTime
argument_list|,
name|isForBase
condition|?
call|(
name|short
call|)
argument_list|(
name|parentNumber
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
name|parentNumber
argument_list|)
else|:
operator|(
name|short
operator|)
literal|1
argument_list|,
name|message
argument_list|,
name|serverId
argument_list|,
name|unresolved
argument_list|)
decl_stmt|;
name|c
operator|.
name|lineNbr
operator|=
name|range
operator|.
name|getEndLine
argument_list|()
expr_stmt|;
name|c
operator|.
name|parentUuid
operator|=
name|parentUUID
expr_stmt|;
name|c
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|c
operator|.
name|setCommitId
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
if|if
condition|(
name|raId
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setRealAuthor
argument_list|(
name|raId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|getStartCharacter
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|c
operator|.
name|setRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
operator|+
name|commentLength
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|parseStringField ( byte[] note, MutableInteger curr, Change.Id changeId, String fieldName)
specifier|private
specifier|static
name|String
name|parseStringField
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfField
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|startOfField
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * @return a comment range. If the comment range line in the note only has one number, we return a    *     CommentRange with that one number as the end line and the other fields as -1. If the    *     comment range line in the note contains a whole comment range, then we return a    *     CommentRange with all fields set. If the line is not correctly formatted, return null.    */
DECL|method|parseCommentRange (byte[] note, MutableInteger ptr)
specifier|private
specifier|static
name|CommentRange
name|parseCommentRange
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|ptr
parameter_list|)
block|{
name|CommentRange
name|range
init|=
operator|new
name|CommentRange
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|last
init|=
name|ptr
operator|.
name|value
decl_stmt|;
name|int
name|startLine
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'\n'
condition|)
block|{
name|range
operator|.
name|setEndLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
return|return
name|range
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|':'
condition|)
block|{
name|range
operator|.
name|setStartLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|last
operator|=
name|ptr
operator|.
name|value
expr_stmt|;
name|int
name|startChar
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'-'
condition|)
block|{
name|range
operator|.
name|setStartCharacter
argument_list|(
name|startChar
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|last
operator|=
name|ptr
operator|.
name|value
expr_stmt|;
name|int
name|endLine
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|':'
condition|)
block|{
name|range
operator|.
name|setEndLine
argument_list|(
name|endLine
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|last
operator|=
name|ptr
operator|.
name|value
expr_stmt|;
name|int
name|endChar
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|ptr
operator|.
name|value
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|.
name|value
operator|==
name|last
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|note
index|[
name|ptr
operator|.
name|value
index|]
operator|==
literal|'\n'
condition|)
block|{
name|range
operator|.
name|setEndCharacter
argument_list|(
name|endChar
argument_list|)
expr_stmt|;
name|ptr
operator|.
name|value
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|range
return|;
block|}
DECL|method|parsePsId ( byte[] note, MutableInteger curr, Change.Id changeId, String fieldName)
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|parsePsId
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfPsId
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|int
name|patchSetId
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|startOfPsId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
name|checkResult
argument_list|(
name|patchSetId
argument_list|,
literal|"patchset id"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|PatchSet
operator|.
name|id
argument_list|(
name|changeId
argument_list|,
name|patchSetId
argument_list|)
return|;
block|}
DECL|method|parseParentNumber (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|Integer
name|parseParentNumber
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|ChangeNoteUtil
operator|.
name|PARENT_NUMBER
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|int
name|parentNumber
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|start
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|ChangeNoteUtil
operator|.
name|PARENT_NUMBER
argument_list|)
throw|;
block|}
name|checkResult
argument_list|(
name|parentNumber
argument_list|,
literal|"parent number"
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|parentNumber
argument_list|)
return|;
block|}
DECL|method|parseFilename (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|String
name|parseFilename
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|ChangeNoteUtil
operator|.
name|FILE
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfFileName
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|QuotedString
operator|.
name|GIT_PATH
operator|.
name|dequote
argument_list|(
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|startOfFileName
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseTimestamp (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|Timestamp
name|parseTimestamp
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
name|Timestamp
name|commentTime
decl_stmt|;
name|String
name|dateString
init|=
name|RawParseUtils
operator|.
name|decode
argument_list|(
name|UTF_8
argument_list|,
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|endOfLine
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|commentTime
operator|=
operator|new
name|Timestamp
argument_list|(
name|GitDateParser
operator|.
name|parse
argument_list|(
name|dateString
argument_list|,
literal|null
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
literal|"could not parse comment timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|commentTime
argument_list|,
literal|"comment timestamp"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseAuthor ( byte[] note, MutableInteger curr, Change.Id changeId, String fieldName)
specifier|private
name|Account
operator|.
name|Id
name|parseAuthor
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|fieldName
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfAccountId
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|2
decl_stmt|;
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|note
argument_list|,
name|startOfAccountId
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|aId
init|=
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
name|curr
operator|.
name|value
operator|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|aId
argument_list|,
name|fieldName
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseCommentLength (byte[] note, MutableInteger curr, Change.Id changeId)
specifier|private
specifier|static
name|int
name|parseCommentLength
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|checkHeaderLineFormat
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|ChangeNoteUtil
operator|.
name|LENGTH
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|int
name|startOfLength
init|=
name|RawParseUtils
operator|.
name|endOfFooterLineKey
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
operator|+
literal|1
decl_stmt|;
name|MutableInteger
name|i
init|=
operator|new
name|MutableInteger
argument_list|()
decl_stmt|;
name|i
operator|.
name|value
operator|=
name|startOfLength
expr_stmt|;
name|int
name|commentLength
init|=
name|RawParseUtils
operator|.
name|parseBase10
argument_list|(
name|note
argument_list|,
name|startOfLength
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|==
name|startOfLength
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|ChangeNoteUtil
operator|.
name|LENGTH
argument_list|)
throw|;
block|}
name|int
name|endOfLine
init|=
name|RawParseUtils
operator|.
name|nextLF
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|value
operator|!=
name|endOfLine
operator|-
literal|1
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|ChangeNoteUtil
operator|.
name|LENGTH
argument_list|)
throw|;
block|}
name|curr
operator|.
name|value
operator|=
name|endOfLine
expr_stmt|;
return|return
name|checkResult
argument_list|(
name|commentLength
argument_list|,
literal|"comment length"
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|parseBooleanField ( byte[] note, MutableInteger curr, Change.Id changeId, String fieldName)
specifier|private
name|boolean
name|parseBooleanField
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|String
name|str
init|=
name|parseStringField
argument_list|(
name|note
argument_list|,
name|curr
argument_list|,
name|changeId
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"invalid boolean for %s: %s"
argument_list|,
name|fieldName
argument_list|,
name|str
argument_list|)
throw|;
block|}
DECL|method|checkResult (T o, String fieldName, Change.Id changeId)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkResult
parameter_list|(
name|T
name|o
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
DECL|method|checkResult (int i, String fieldName, Change.Id changeId)
specifier|private
specifier|static
name|int
name|checkResult
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
return|return
name|i
return|;
block|}
DECL|method|checkHeaderLineFormat ( byte[] note, MutableInteger curr, String fieldName, Change.Id changeId)
specifier|private
specifier|static
name|void
name|checkHeaderLineFormat
parameter_list|(
name|byte
index|[]
name|note
parameter_list|,
name|MutableInteger
name|curr
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|boolean
name|correct
init|=
name|RawParseUtils
operator|.
name|match
argument_list|(
name|note
argument_list|,
name|curr
operator|.
name|value
argument_list|,
name|fieldName
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|int
name|p
init|=
name|curr
operator|.
name|value
operator|+
name|fieldName
operator|.
name|length
argument_list|()
decl_stmt|;
name|correct
operator|&=
operator|(
name|p
operator|<
name|note
operator|.
name|length
operator|&&
name|note
index|[
name|p
index|]
operator|==
literal|':'
operator|)
expr_stmt|;
name|p
operator|++
expr_stmt|;
name|correct
operator|&=
operator|(
name|p
operator|<
name|note
operator|.
name|length
operator|&&
name|note
index|[
name|p
index|]
operator|==
literal|' '
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|correct
condition|)
block|{
throw|throw
name|parseException
argument_list|(
name|changeId
argument_list|,
literal|"could not parse %s"
argument_list|,
name|fieldName
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

