begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
operator|.
name|COMMENT_ORDER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|UsedAt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|QuotedString
import|;
end_import

begin_class
DECL|class|LegacyChangeNoteWrite
specifier|public
class|class
name|LegacyChangeNoteWrite
block|{
DECL|field|serverIdent
specifier|private
specifier|final
name|PersonIdent
name|serverIdent
decl_stmt|;
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
annotation|@
name|Inject
DECL|method|LegacyChangeNoteWrite ( @erritPersonIdent PersonIdent serverIdent, @GerritServerId String serverId)
specifier|public
name|LegacyChangeNoteWrite
parameter_list|(
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|)
block|{
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
block|}
DECL|method|newIdent (Account.Id authorId, Date when, PersonIdent serverIdent)
specifier|public
name|PersonIdent
name|newIdent
parameter_list|(
name|Account
operator|.
name|Id
name|authorId
parameter_list|,
name|Date
name|when
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|authorId
operator|.
name|toString
argument_list|()
argument_list|,
name|authorId
operator|.
name|get
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|,
name|when
argument_list|,
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|newIdent (Account author, Date when, PersonIdent serverIdent)
specifier|public
name|PersonIdent
name|newIdent
parameter_list|(
name|Account
name|author
parameter_list|,
name|Date
name|when
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|author
operator|.
name|toString
argument_list|()
argument_list|,
name|author
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
argument_list|,
name|when
argument_list|,
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getServerId ()
specifier|public
name|String
name|getServerId
parameter_list|()
block|{
return|return
name|serverId
return|;
block|}
DECL|method|appendHeaderField (PrintWriter writer, String field, String value)
specifier|private
name|void
name|appendHeaderField
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build a note that contains the metadata for and the contents of all of the comments in the    * given comments.    *    * @param comments Comments to be written to the output stream, keyed by patch set ID; multiple    *     patch sets are allowed since base revisions may be shared across patch sets. All of the    *     comments must share the same RevId, and all the comments for a given patch set must have    *     the same side.    * @param out output stream to write to.    */
annotation|@
name|UsedAt
argument_list|(
name|UsedAt
operator|.
name|Project
operator|.
name|GOOGLE
argument_list|)
DECL|method|buildNote (ListMultimap<Integer, Comment> comments, OutputStream out)
specifier|public
name|void
name|buildNote
parameter_list|(
name|ListMultimap
argument_list|<
name|Integer
argument_list|,
name|Comment
argument_list|>
name|comments
parameter_list|,
name|OutputStream
name|out
parameter_list|)
block|{
if|if
condition|(
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|psIds
init|=
name|comments
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|streamWriter
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|streamWriter
argument_list|)
init|)
block|{
name|ObjectId
name|commitId
init|=
name|comments
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getCommitId
argument_list|()
decl_stmt|;
name|String
name|commitName
init|=
name|commitId
operator|.
name|name
argument_list|()
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|REVISION
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|psId
range|:
name|psIds
control|)
block|{
name|List
argument_list|<
name|Comment
argument_list|>
name|psComments
init|=
name|COMMENT_ORDER
operator|.
name|sortedCopy
argument_list|(
name|comments
operator|.
name|get
argument_list|(
name|psId
argument_list|)
argument_list|)
decl_stmt|;
name|Comment
name|first
init|=
name|psComments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|short
name|side
init|=
name|first
operator|.
name|side
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|side
operator|<=
literal|0
condition|?
name|ChangeNoteUtil
operator|.
name|BASE_PATCH_SET
else|:
name|ChangeNoteUtil
operator|.
name|PATCH_SET
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|side
operator|<
literal|0
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|PARENT_NUMBER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|-
name|side
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|currentFilename
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|psComments
control|)
block|{
name|checkArgument
argument_list|(
name|commitId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getCommitId
argument_list|()
argument_list|)
argument_list|,
literal|"All comments being added must have all the same RevId. The "
operator|+
literal|"comment below does not have the same RevId as the others "
operator|+
literal|"(%s).\n%s"
argument_list|,
name|commitId
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|side
operator|==
name|c
operator|.
name|side
argument_list|,
literal|"All comments being added must all have the same side. The "
operator|+
literal|"comment below does not have the same side as the others "
operator|+
literal|"(%s).\n%s"
argument_list|,
name|side
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|String
name|commentFilename
init|=
name|QuotedString
operator|.
name|GIT_PATH
operator|.
name|quote
argument_list|(
name|c
operator|.
name|key
operator|.
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|commentFilename
operator|.
name|equals
argument_list|(
name|currentFilename
argument_list|)
condition|)
block|{
name|currentFilename
operator|=
name|commentFilename
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"File: "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|commentFilename
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
name|appendOneComment
argument_list|(
name|writer
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|appendOneComment (PrintWriter writer, Comment c)
specifier|private
name|void
name|appendOneComment
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|Comment
name|c
parameter_list|)
block|{
comment|// The CommentRange field for a comment is allowed to be null. If it is
comment|// null, then in the first line, we simply use the line number field for a
comment|// comment instead. If it isn't null, we write the comment range itself.
name|Comment
operator|.
name|Range
name|range
init|=
name|c
operator|.
name|range
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|startLine
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|startChar
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|endLine
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|range
operator|.
name|endChar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|print
argument_list|(
name|c
operator|.
name|lineNbr
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|NoteDbUtil
operator|.
name|formatTime
argument_list|(
name|serverIdent
argument_list|,
name|c
operator|.
name|writtenOn
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|appendIdent
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|AUTHOR
argument_list|,
name|c
operator|.
name|author
operator|.
name|getId
argument_list|()
argument_list|,
name|c
operator|.
name|writtenOn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getRealAuthor
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|author
argument_list|)
condition|)
block|{
name|appendIdent
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|REAL_AUTHOR
argument_list|,
name|c
operator|.
name|getRealAuthor
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|c
operator|.
name|writtenOn
argument_list|)
expr_stmt|;
block|}
name|String
name|parent
init|=
name|c
operator|.
name|parentUuid
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|PARENT
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|UNRESOLVED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|c
operator|.
name|unresolved
argument_list|)
argument_list|)
expr_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|UUID
argument_list|,
name|c
operator|.
name|key
operator|.
name|uuid
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|tag
operator|!=
literal|null
condition|)
block|{
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|TAG
argument_list|,
name|c
operator|.
name|tag
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|messageBytes
init|=
name|c
operator|.
name|message
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|ChangeNoteUtil
operator|.
name|LENGTH
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|messageBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|c
operator|.
name|message
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendIdent (PrintWriter writer, String header, Account.Id id, Timestamp ts)
specifier|private
name|void
name|appendIdent
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|header
parameter_list|,
name|Account
operator|.
name|Id
name|id
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
block|{
name|PersonIdent
name|ident
init|=
name|newIdent
argument_list|(
name|id
argument_list|,
name|ts
argument_list|,
name|serverIdent
argument_list|)
decl_stmt|;
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|name
argument_list|,
name|ident
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|name
argument_list|,
name|ident
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|appendHeaderField
argument_list|(
name|writer
argument_list|,
name|header
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

