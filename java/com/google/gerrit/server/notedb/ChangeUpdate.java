begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|changeMetaRef
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_ASSIGNEE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_BRANCH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_CURRENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_HASHTAGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_LABEL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PATCH_SET_DESCRIPTION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_PRIVATE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_REAL_USER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_REVERT_OF
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_STATUS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBMISSION_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_SUBMITTED_WITH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_TAG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_TOPIC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
operator|.
name|FOOTER_WORK_IN_PROGRESS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUtil
operator|.
name|sanitizeFooter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|OBJ_BLOB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RevId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RobotComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|IntKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|notes
operator|.
name|NoteMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_comment
comment|/**  * A delta to apply to a change.  *  *<p>This delta will become two unique commits: one in the AllUsers repo that will contain the  * draft comments on this change and one in the notes branch that will contain approvals, reviewers,  * change status, subject, submit records, the change message, and published comments. There are  * limitations on the set of modifications that can be handled in a single update. In particular,  * there is a single author and timestamp for each update.  *  *<p>This class is not thread-safe.  */
end_comment

begin_class
DECL|class|ChangeUpdate
specifier|public
class|class
name|ChangeUpdate
extends|extends
name|AbstractChangeUpdate
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (ChangeNotes notes, CurrentUser user, Date when)
name|ChangeUpdate
name|create
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Date
name|when
parameter_list|)
function_decl|;
annotation|@
name|VisibleForTesting
DECL|method|create ( ChangeNotes notes, CurrentUser user, Date when, Comparator<String> labelNameComparator)
name|ChangeUpdate
name|create
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Date
name|when
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|labelNameComparator
parameter_list|)
function_decl|;
block|}
DECL|field|updateManagerFactory
specifier|private
specifier|final
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
decl_stmt|;
DECL|field|draftUpdateFactory
specifier|private
specifier|final
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
decl_stmt|;
DECL|field|robotCommentUpdateFactory
specifier|private
specifier|final
name|RobotCommentUpdate
operator|.
name|Factory
name|robotCommentUpdateFactory
decl_stmt|;
DECL|field|deleteCommentRewriterFactory
specifier|private
specifier|final
name|DeleteCommentRewriter
operator|.
name|Factory
name|deleteCommentRewriterFactory
decl_stmt|;
DECL|field|approvals
specifier|private
specifier|final
name|Table
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|Short
argument_list|>
argument_list|>
name|approvals
decl_stmt|;
DECL|field|reviewers
specifier|private
specifier|final
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|reviewers
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|reviewersByEmail
specifier|private
specifier|final
name|Map
argument_list|<
name|Address
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|reviewersByEmail
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|comments
specifier|private
specifier|final
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|commitSubject
specifier|private
name|String
name|commitSubject
decl_stmt|;
DECL|field|subject
specifier|private
name|String
name|subject
decl_stmt|;
DECL|field|changeId
specifier|private
name|String
name|changeId
decl_stmt|;
DECL|field|branch
specifier|private
name|String
name|branch
decl_stmt|;
DECL|field|status
specifier|private
name|Change
operator|.
name|Status
name|status
decl_stmt|;
DECL|field|submitRecords
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
decl_stmt|;
DECL|field|submissionId
specifier|private
name|String
name|submissionId
decl_stmt|;
DECL|field|topic
specifier|private
name|String
name|topic
decl_stmt|;
DECL|field|commit
specifier|private
name|String
name|commit
decl_stmt|;
DECL|field|assignee
specifier|private
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|assignee
decl_stmt|;
DECL|field|hashtags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
decl_stmt|;
DECL|field|changeMessage
specifier|private
name|String
name|changeMessage
decl_stmt|;
DECL|field|tag
specifier|private
name|String
name|tag
decl_stmt|;
DECL|field|psState
specifier|private
name|PatchSetState
name|psState
decl_stmt|;
DECL|field|groups
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|groups
decl_stmt|;
DECL|field|pushCert
specifier|private
name|String
name|pushCert
decl_stmt|;
DECL|field|isAllowWriteToNewtRef
specifier|private
name|boolean
name|isAllowWriteToNewtRef
decl_stmt|;
DECL|field|psDescription
specifier|private
name|String
name|psDescription
decl_stmt|;
DECL|field|currentPatchSet
specifier|private
name|boolean
name|currentPatchSet
decl_stmt|;
DECL|field|isPrivate
specifier|private
name|Boolean
name|isPrivate
decl_stmt|;
DECL|field|workInProgress
specifier|private
name|Boolean
name|workInProgress
decl_stmt|;
DECL|field|revertOf
specifier|private
name|Integer
name|revertOf
decl_stmt|;
DECL|field|draftUpdate
specifier|private
name|ChangeDraftUpdate
name|draftUpdate
decl_stmt|;
DECL|field|robotCommentUpdate
specifier|private
name|RobotCommentUpdate
name|robotCommentUpdate
decl_stmt|;
DECL|field|deleteCommentRewriter
specifier|private
name|DeleteCommentRewriter
name|deleteCommentRewriter
decl_stmt|;
DECL|field|deleteChangeMessageRewriter
specifier|private
name|DeleteChangeMessageRewriter
name|deleteChangeMessageRewriter
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|ChangeUpdate ( @erritPersonIdent PersonIdent serverIdent, NoteDbUpdateManager.Factory updateManagerFactory, ChangeDraftUpdate.Factory draftUpdateFactory, RobotCommentUpdate.Factory robotCommentUpdateFactory, DeleteCommentRewriter.Factory deleteCommentRewriterFactory, ProjectCache projectCache, @Assisted ChangeNotes notes, @Assisted CurrentUser user, @Assisted Date when, ChangeNoteUtil noteUtil)
specifier|private
name|ChangeUpdate
parameter_list|(
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
parameter_list|,
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
parameter_list|,
name|RobotCommentUpdate
operator|.
name|Factory
name|robotCommentUpdateFactory
parameter_list|,
name|DeleteCommentRewriter
operator|.
name|Factory
name|deleteCommentRewriterFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|Assisted
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Assisted
name|CurrentUser
name|user
parameter_list|,
annotation|@
name|Assisted
name|Date
name|when
parameter_list|,
name|ChangeNoteUtil
name|noteUtil
parameter_list|)
block|{
name|this
argument_list|(
name|serverIdent
argument_list|,
name|updateManagerFactory
argument_list|,
name|draftUpdateFactory
argument_list|,
name|robotCommentUpdateFactory
argument_list|,
name|deleteCommentRewriterFactory
argument_list|,
name|notes
argument_list|,
name|user
argument_list|,
name|when
argument_list|,
name|projectCache
operator|.
name|get
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|nameComparator
argument_list|()
argument_list|,
name|noteUtil
argument_list|)
expr_stmt|;
block|}
DECL|method|approvals ( Comparator<String> nameComparator)
specifier|private
specifier|static
name|Table
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|Short
argument_list|>
argument_list|>
name|approvals
parameter_list|(
name|Comparator
argument_list|<
name|String
argument_list|>
name|nameComparator
parameter_list|)
block|{
return|return
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|nameComparator
argument_list|,
name|comparing
argument_list|(
name|IntKey
operator|::
name|get
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|AssistedInject
DECL|method|ChangeUpdate ( @erritPersonIdent PersonIdent serverIdent, NoteDbUpdateManager.Factory updateManagerFactory, ChangeDraftUpdate.Factory draftUpdateFactory, RobotCommentUpdate.Factory robotCommentUpdateFactory, DeleteCommentRewriter.Factory deleteCommentRewriterFactory, @Assisted ChangeNotes notes, @Assisted CurrentUser user, @Assisted Date when, @Assisted Comparator<String> labelNameComparator, ChangeNoteUtil noteUtil)
specifier|private
name|ChangeUpdate
parameter_list|(
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
parameter_list|,
name|ChangeDraftUpdate
operator|.
name|Factory
name|draftUpdateFactory
parameter_list|,
name|RobotCommentUpdate
operator|.
name|Factory
name|robotCommentUpdateFactory
parameter_list|,
name|DeleteCommentRewriter
operator|.
name|Factory
name|deleteCommentRewriterFactory
parameter_list|,
annotation|@
name|Assisted
name|ChangeNotes
name|notes
parameter_list|,
annotation|@
name|Assisted
name|CurrentUser
name|user
parameter_list|,
annotation|@
name|Assisted
name|Date
name|when
parameter_list|,
annotation|@
name|Assisted
name|Comparator
argument_list|<
name|String
argument_list|>
name|labelNameComparator
parameter_list|,
name|ChangeNoteUtil
name|noteUtil
parameter_list|)
block|{
name|super
argument_list|(
name|notes
argument_list|,
name|user
argument_list|,
name|serverIdent
argument_list|,
name|noteUtil
argument_list|,
name|when
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateManagerFactory
operator|=
name|updateManagerFactory
expr_stmt|;
name|this
operator|.
name|draftUpdateFactory
operator|=
name|draftUpdateFactory
expr_stmt|;
name|this
operator|.
name|robotCommentUpdateFactory
operator|=
name|robotCommentUpdateFactory
expr_stmt|;
name|this
operator|.
name|deleteCommentRewriterFactory
operator|=
name|deleteCommentRewriterFactory
expr_stmt|;
name|this
operator|.
name|approvals
operator|=
name|approvals
argument_list|(
name|labelNameComparator
argument_list|)
expr_stmt|;
block|}
DECL|method|commit ()
specifier|public
name|ObjectId
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|NoteDbUpdateManager
name|updateManager
init|=
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|getProjectName
argument_list|()
argument_list|)
init|)
block|{
name|updateManager
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|updateManager
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
name|getResult
argument_list|()
return|;
block|}
DECL|method|setChangeId (String changeId)
specifier|public
name|void
name|setChangeId
parameter_list|(
name|String
name|changeId
parameter_list|)
block|{
name|String
name|old
init|=
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|old
operator|.
name|equals
argument_list|(
name|changeId
argument_list|)
argument_list|,
literal|"The Change-Id was already set to %s, so we cannot set this Change-Id: %s"
argument_list|,
name|old
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|changeId
expr_stmt|;
block|}
DECL|method|setBranch (String branch)
specifier|public
name|void
name|setBranch
parameter_list|(
name|String
name|branch
parameter_list|)
block|{
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
block|}
DECL|method|setStatus (Change.Status status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|Change
operator|.
name|Status
name|status
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|status
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|,
literal|"use merge(Iterable<SubmitRecord>)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|fixStatus (Change.Status status)
specifier|public
name|void
name|fixStatus
parameter_list|(
name|Change
operator|.
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|putApproval (String label, short value)
specifier|public
name|void
name|putApproval
parameter_list|(
name|String
name|label
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|putApprovalFor
argument_list|(
name|getAccountId
argument_list|()
argument_list|,
name|label
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putApprovalFor (Account.Id reviewer, String label, short value)
specifier|public
name|void
name|putApprovalFor
parameter_list|(
name|Account
operator|.
name|Id
name|reviewer
parameter_list|,
name|String
name|label
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|approvals
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|reviewer
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeApproval (String label)
specifier|public
name|void
name|removeApproval
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|removeApprovalFor
argument_list|(
name|getAccountId
argument_list|()
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
DECL|method|removeApprovalFor (Account.Id reviewer, String label)
specifier|public
name|void
name|removeApprovalFor
parameter_list|(
name|Account
operator|.
name|Id
name|reviewer
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|approvals
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|reviewer
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|merge (RequestId submissionId, Iterable<SubmitRecord> submitRecords)
specifier|public
name|void
name|merge
parameter_list|(
name|RequestId
name|submissionId
parameter_list|,
name|Iterable
argument_list|<
name|SubmitRecord
argument_list|>
name|submitRecords
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|Change
operator|.
name|Status
operator|.
name|MERGED
expr_stmt|;
name|this
operator|.
name|submissionId
operator|=
name|submissionId
operator|.
name|toStringForStorage
argument_list|()
expr_stmt|;
name|this
operator|.
name|submitRecords
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|submitRecords
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|this
operator|.
name|submitRecords
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"no submit records specified at submit time"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
comment|// Only until we improve ChangeRebuilder to call merge().
DECL|method|setSubmissionId (String submissionId)
specifier|public
name|void
name|setSubmissionId
parameter_list|(
name|String
name|submissionId
parameter_list|)
block|{
name|this
operator|.
name|submissionId
operator|=
name|submissionId
expr_stmt|;
block|}
DECL|method|setSubjectForCommit (String commitSubject)
specifier|public
name|void
name|setSubjectForCommit
parameter_list|(
name|String
name|commitSubject
parameter_list|)
block|{
name|this
operator|.
name|commitSubject
operator|=
name|commitSubject
expr_stmt|;
block|}
DECL|method|setSubject (String subject)
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCommit ()
name|ObjectId
name|getCommit
parameter_list|()
block|{
return|return
name|ObjectId
operator|.
name|fromString
argument_list|(
name|commit
argument_list|)
return|;
block|}
DECL|method|setChangeMessage (String changeMessage)
specifier|public
name|void
name|setChangeMessage
parameter_list|(
name|String
name|changeMessage
parameter_list|)
block|{
name|this
operator|.
name|changeMessage
operator|=
name|changeMessage
expr_stmt|;
block|}
DECL|method|setTag (String tag)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
DECL|method|setPsDescription (String psDescription)
specifier|public
name|void
name|setPsDescription
parameter_list|(
name|String
name|psDescription
parameter_list|)
block|{
name|this
operator|.
name|psDescription
operator|=
name|psDescription
expr_stmt|;
block|}
DECL|method|putComment (PatchLineComment.Status status, Comment c)
specifier|public
name|void
name|putComment
parameter_list|(
name|PatchLineComment
operator|.
name|Status
name|status
parameter_list|,
name|Comment
name|c
parameter_list|)
block|{
name|verifyComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|createDraftUpdateIfNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|PatchLineComment
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
name|draftUpdate
operator|.
name|putComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comments
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Always delete the corresponding comment from drafts. Published comments
comment|// are immutable, meaning in normal operation we only hit this path when
comment|// publishing a comment. It's exactly in that case that we have to delete
comment|// the draft.
name|draftUpdate
operator|.
name|deleteComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putRobotComment (RobotComment c)
specifier|public
name|void
name|putRobotComment
parameter_list|(
name|RobotComment
name|c
parameter_list|)
block|{
name|verifyComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|createRobotCommentUpdateIfNull
argument_list|()
expr_stmt|;
name|robotCommentUpdate
operator|.
name|putComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteComment (Comment c)
specifier|public
name|void
name|deleteComment
parameter_list|(
name|Comment
name|c
parameter_list|)
block|{
name|verifyComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|createDraftUpdateIfNull
argument_list|()
operator|.
name|deleteComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteCommentByRewritingHistory (String uuid, String newMessage)
specifier|public
name|void
name|deleteCommentByRewritingHistory
parameter_list|(
name|String
name|uuid
parameter_list|,
name|String
name|newMessage
parameter_list|)
block|{
name|deleteCommentRewriter
operator|=
name|deleteCommentRewriterFactory
operator|.
name|create
argument_list|(
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|uuid
argument_list|,
name|newMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteChangeMessageByRewritingHistory (String targetMessageId, String newMessage)
specifier|public
name|void
name|deleteChangeMessageByRewritingHistory
parameter_list|(
name|String
name|targetMessageId
parameter_list|,
name|String
name|newMessage
parameter_list|)
block|{
name|deleteChangeMessageRewriter
operator|=
operator|new
name|DeleteChangeMessageRewriter
argument_list|(
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|targetMessageId
argument_list|,
name|newMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createDraftUpdateIfNull ()
name|ChangeDraftUpdate
name|createDraftUpdateIfNull
parameter_list|()
block|{
if|if
condition|(
name|draftUpdate
operator|==
literal|null
condition|)
block|{
name|ChangeNotes
name|notes
init|=
name|getNotes
argument_list|()
decl_stmt|;
if|if
condition|(
name|notes
operator|!=
literal|null
condition|)
block|{
name|draftUpdate
operator|=
name|draftUpdateFactory
operator|.
name|create
argument_list|(
name|notes
argument_list|,
name|accountId
argument_list|,
name|realAccountId
argument_list|,
name|authorIdent
argument_list|,
name|when
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// tests will always take the notes != null path above.
name|draftUpdate
operator|=
name|draftUpdateFactory
operator|.
name|create
argument_list|(
name|getChange
argument_list|()
argument_list|,
name|accountId
argument_list|,
name|realAccountId
argument_list|,
name|authorIdent
argument_list|,
name|when
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|draftUpdate
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createRobotCommentUpdateIfNull ()
name|RobotCommentUpdate
name|createRobotCommentUpdateIfNull
parameter_list|()
block|{
if|if
condition|(
name|robotCommentUpdate
operator|==
literal|null
condition|)
block|{
name|ChangeNotes
name|notes
init|=
name|getNotes
argument_list|()
decl_stmt|;
if|if
condition|(
name|notes
operator|!=
literal|null
condition|)
block|{
name|robotCommentUpdate
operator|=
name|robotCommentUpdateFactory
operator|.
name|create
argument_list|(
name|notes
argument_list|,
name|accountId
argument_list|,
name|realAccountId
argument_list|,
name|authorIdent
argument_list|,
name|when
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|robotCommentUpdate
operator|=
name|robotCommentUpdateFactory
operator|.
name|create
argument_list|(
name|getChange
argument_list|()
argument_list|,
name|accountId
argument_list|,
name|realAccountId
argument_list|,
name|authorIdent
argument_list|,
name|when
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|robotCommentUpdate
return|;
block|}
DECL|method|setTopic (String topic)
specifier|public
name|void
name|setTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommit (RevWalk rw, ObjectId id)
specifier|public
name|void
name|setCommit
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|setCommit
argument_list|(
name|rw
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommit (RevWalk rw, ObjectId id, String pushCert)
specifier|public
name|void
name|setCommit
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|id
parameter_list|,
name|String
name|pushCert
parameter_list|)
throws|throws
name|IOException
block|{
name|RevCommit
name|commit
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|rw
operator|.
name|parseBody
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|this
operator|.
name|commit
operator|=
name|commit
operator|.
name|name
argument_list|()
expr_stmt|;
name|subject
operator|=
name|commit
operator|.
name|getShortMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|pushCert
operator|=
name|pushCert
expr_stmt|;
block|}
comment|/**    * Set the revision without depending on the commit being present in the repository; should only    * be used for converting old corrupt commits.    */
DECL|method|setRevisionForMissingCommit (String id, String pushCert)
specifier|public
name|void
name|setRevisionForMissingCommit
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|pushCert
parameter_list|)
block|{
name|commit
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|pushCert
operator|=
name|pushCert
expr_stmt|;
block|}
DECL|method|setHashtags (Set<String> hashtags)
specifier|public
name|void
name|setHashtags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|hashtags
parameter_list|)
block|{
name|this
operator|.
name|hashtags
operator|=
name|hashtags
expr_stmt|;
block|}
DECL|method|setAssignee (Account.Id assignee)
specifier|public
name|void
name|setAssignee
parameter_list|(
name|Account
operator|.
name|Id
name|assignee
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|assignee
operator|!=
literal|null
argument_list|,
literal|"use removeAssignee"
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignee
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|assignee
argument_list|)
expr_stmt|;
block|}
DECL|method|removeAssignee ()
specifier|public
name|void
name|removeAssignee
parameter_list|()
block|{
name|this
operator|.
name|assignee
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
DECL|method|getReviewers ()
specifier|public
name|Map
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|getReviewers
parameter_list|()
block|{
return|return
name|reviewers
return|;
block|}
DECL|method|putReviewer (Account.Id reviewer, ReviewerStateInternal type)
specifier|public
name|void
name|putReviewer
parameter_list|(
name|Account
operator|.
name|Id
name|reviewer
parameter_list|,
name|ReviewerStateInternal
name|type
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|type
operator|!=
name|ReviewerStateInternal
operator|.
name|REMOVED
argument_list|,
literal|"invalid ReviewerType"
argument_list|)
expr_stmt|;
name|reviewers
operator|.
name|put
argument_list|(
name|reviewer
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|removeReviewer (Account.Id reviewer)
specifier|public
name|void
name|removeReviewer
parameter_list|(
name|Account
operator|.
name|Id
name|reviewer
parameter_list|)
block|{
name|reviewers
operator|.
name|put
argument_list|(
name|reviewer
argument_list|,
name|ReviewerStateInternal
operator|.
name|REMOVED
argument_list|)
expr_stmt|;
block|}
DECL|method|putReviewerByEmail (Address reviewer, ReviewerStateInternal type)
specifier|public
name|void
name|putReviewerByEmail
parameter_list|(
name|Address
name|reviewer
parameter_list|,
name|ReviewerStateInternal
name|type
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|type
operator|!=
name|ReviewerStateInternal
operator|.
name|REMOVED
argument_list|,
literal|"invalid ReviewerType"
argument_list|)
expr_stmt|;
name|reviewersByEmail
operator|.
name|put
argument_list|(
name|reviewer
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|removeReviewerByEmail (Address reviewer)
specifier|public
name|void
name|removeReviewerByEmail
parameter_list|(
name|Address
name|reviewer
parameter_list|)
block|{
name|reviewersByEmail
operator|.
name|put
argument_list|(
name|reviewer
argument_list|,
name|ReviewerStateInternal
operator|.
name|REMOVED
argument_list|)
expr_stmt|;
block|}
DECL|method|setPatchSetState (PatchSetState psState)
specifier|public
name|void
name|setPatchSetState
parameter_list|(
name|PatchSetState
name|psState
parameter_list|)
block|{
name|this
operator|.
name|psState
operator|=
name|psState
expr_stmt|;
block|}
DECL|method|setCurrentPatchSet ()
specifier|public
name|void
name|setCurrentPatchSet
parameter_list|()
block|{
name|this
operator|.
name|currentPatchSet
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|setGroups (List<String> groups)
specifier|public
name|void
name|setGroups
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|groups
argument_list|,
literal|"groups may not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
block|}
DECL|method|setRevertOf (int revertOf)
specifier|public
name|void
name|setRevertOf
parameter_list|(
name|int
name|revertOf
parameter_list|)
block|{
name|int
name|ownId
init|=
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|ownId
operator|!=
name|revertOf
argument_list|,
literal|"A change cannot revert itself"
argument_list|)
expr_stmt|;
name|this
operator|.
name|revertOf
operator|=
name|revertOf
expr_stmt|;
name|rootOnly
operator|=
literal|true
expr_stmt|;
block|}
comment|/** @return the tree id for the updated tree */
DECL|method|storeRevisionNotes (RevWalk rw, ObjectInserter inserter, ObjectId curr)
specifier|private
name|ObjectId
name|storeRevisionNotes
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|,
name|ObjectId
name|curr
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
if|if
condition|(
name|comments
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pushCert
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RevisionNoteMap
argument_list|<
name|ChangeRevisionNote
argument_list|>
name|rnm
init|=
name|getRevisionNoteMap
argument_list|(
name|rw
argument_list|,
name|curr
argument_list|)
decl_stmt|;
name|RevisionNoteBuilder
operator|.
name|Cache
name|cache
init|=
operator|new
name|RevisionNoteBuilder
operator|.
name|Cache
argument_list|(
name|rnm
argument_list|)
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|comments
control|)
block|{
name|c
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
operator|new
name|RevId
argument_list|(
name|c
operator|.
name|revId
argument_list|)
argument_list|)
operator|.
name|putComment
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pushCert
operator|!=
literal|null
condition|)
block|{
name|checkState
argument_list|(
name|commit
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
operator|new
name|RevId
argument_list|(
name|commit
argument_list|)
argument_list|)
operator|.
name|setPushCertificate
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|RevId
argument_list|,
name|RevisionNoteBuilder
argument_list|>
name|builders
init|=
name|cache
operator|.
name|getBuilders
argument_list|()
decl_stmt|;
name|checkComments
argument_list|(
name|rnm
operator|.
name|revisionNotes
argument_list|,
name|builders
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RevId
argument_list|,
name|RevisionNoteBuilder
argument_list|>
name|e
range|:
name|builders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ObjectId
name|data
init|=
name|inserter
operator|.
name|insert
argument_list|(
name|OBJ_BLOB
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|build
argument_list|(
name|noteUtil
operator|.
name|getChangeNoteJson
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rnm
operator|.
name|noteMap
operator|.
name|set
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|rnm
operator|.
name|noteMap
operator|.
name|writeTree
argument_list|(
name|inserter
argument_list|)
return|;
block|}
DECL|method|getRevisionNoteMap (RevWalk rw, ObjectId curr)
specifier|private
name|RevisionNoteMap
argument_list|<
name|ChangeRevisionNote
argument_list|>
name|getRevisionNoteMap
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectId
name|curr
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
if|if
condition|(
name|curr
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|RevisionNoteMap
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|// The old ChangeNotes may have already parsed the revision notes. We can reuse them as long as
comment|// the ref hasn't advanced.
name|ChangeNotes
name|notes
init|=
name|getNotes
argument_list|()
decl_stmt|;
if|if
condition|(
name|notes
operator|!=
literal|null
operator|&&
name|notes
operator|.
name|revisionNoteMap
operator|!=
literal|null
condition|)
block|{
name|ObjectId
name|idFromNotes
init|=
name|firstNonNull
argument_list|(
name|notes
operator|.
name|load
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFromNotes
operator|.
name|equals
argument_list|(
name|curr
argument_list|)
condition|)
block|{
return|return
name|notes
operator|.
name|revisionNoteMap
return|;
block|}
block|}
name|NoteMap
name|noteMap
init|=
name|NoteMap
operator|.
name|read
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|rw
operator|.
name|parseCommit
argument_list|(
name|curr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Even though reading from changes might not be enabled, we need to
comment|// parse any existing revision notes so we can merge them.
return|return
name|RevisionNoteMap
operator|.
name|parse
argument_list|(
name|noteUtil
operator|.
name|getChangeNoteJson
argument_list|()
argument_list|,
name|noteUtil
operator|.
name|getLegacyChangeNoteRead
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|,
name|rw
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|noteMap
argument_list|,
name|PatchLineComment
operator|.
name|Status
operator|.
name|PUBLISHED
argument_list|)
return|;
block|}
DECL|method|checkComments ( Map<RevId, ChangeRevisionNote> existingNotes, Map<RevId, RevisionNoteBuilder> toUpdate)
specifier|private
name|void
name|checkComments
parameter_list|(
name|Map
argument_list|<
name|RevId
argument_list|,
name|ChangeRevisionNote
argument_list|>
name|existingNotes
parameter_list|,
name|Map
argument_list|<
name|RevId
argument_list|,
name|RevisionNoteBuilder
argument_list|>
name|toUpdate
parameter_list|)
block|{
comment|// Prohibit various kinds of illegal operations on comments.
name|Set
argument_list|<
name|Comment
operator|.
name|Key
argument_list|>
name|existing
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeRevisionNote
name|rn
range|:
name|existingNotes
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Comment
name|c
range|:
name|rn
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|existing
operator|.
name|add
argument_list|(
name|c
operator|.
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|draftUpdate
operator|!=
literal|null
condition|)
block|{
comment|// Take advantage of an existing update on All-Users to prune any
comment|// published comments from drafts. NoteDbUpdateManager takes care of
comment|// ensuring that this update is applied before its dependent draft
comment|// update.
comment|//
comment|// Deleting aggressively in this way, combined with filtering out
comment|// duplicate published/draft comments in ChangeNotes#getDraftComments,
comment|// makes up for the fact that updates between the change repo and
comment|// All-Users are not atomic.
comment|//
comment|// TODO(dborowitz): We might want to distinguish between deleted
comment|// drafts that we're fixing up after the fact by putting them in a
comment|// separate commit. But note that we don't care much about the commit
comment|// graph of the draft ref, particularly because the ref is completely
comment|// deleted when all drafts are gone.
name|draftUpdate
operator|.
name|deleteComment
argument_list|(
name|c
operator|.
name|revId
argument_list|,
name|c
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|RevisionNoteBuilder
name|b
range|:
name|toUpdate
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Comment
name|c
range|:
name|b
operator|.
name|put
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|existing
operator|.
name|contains
argument_list|(
name|c
operator|.
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Cannot update existing published comment: "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|changeMetaRef
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bypassMaxUpdates ()
specifier|protected
name|boolean
name|bypassMaxUpdates
parameter_list|()
block|{
comment|// Allow abandoning or submitting a change even if it would exceed the max update count.
return|return
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|isClosed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|applyImpl (RevWalk rw, ObjectInserter ins, ObjectId curr)
specifier|protected
name|CommitBuilder
name|applyImpl
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|ins
parameter_list|,
name|ObjectId
name|curr
parameter_list|)
throws|throws
name|IOException
block|{
name|checkState
argument_list|(
name|deleteCommentRewriter
operator|==
literal|null
operator|&&
name|deleteChangeMessageRewriter
operator|==
literal|null
argument_list|,
literal|"cannot update and rewrite ref in one BatchUpdate"
argument_list|)
expr_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|int
name|ps
init|=
name|psId
operator|!=
literal|null
condition|?
name|psId
operator|.
name|get
argument_list|()
else|:
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitSubject
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|commitSubject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"Update patch set "
argument_list|)
operator|.
name|append
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|changeMessage
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|changeMessage
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
name|addPatchSetFooter
argument_list|(
name|msg
argument_list|,
name|ps
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentPatchSet
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_CURRENT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|psDescription
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_PATCH_SET_DESCRIPTION
argument_list|,
name|psDescription
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changeId
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_CHANGE_ID
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_SUBJECT
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_BRANCH
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_STATUS
argument_list|,
name|status
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topic
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_TOPIC
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_COMMIT
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignee
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|assignee
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_ASSIGNEE
argument_list|)
expr_stmt|;
name|addIdent
argument_list|(
name|msg
argument_list|,
name|assignee
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_ASSIGNEE
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|Joiner
name|comma
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashtags
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_HASHTAGS
argument_list|,
name|comma
operator|.
name|join
argument_list|(
name|hashtags
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_TAG
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_GROUPS
argument_list|,
name|comma
operator|.
name|join
argument_list|(
name|groups
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|e
range|:
name|reviewers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getFooterKey
argument_list|()
argument_list|)
expr_stmt|;
name|addIdent
argument_list|(
name|msg
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Address
argument_list|,
name|ReviewerStateInternal
argument_list|>
name|e
range|:
name|reviewersByEmail
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getByEmailFooterKey
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Table
operator|.
name|Cell
argument_list|<
name|String
argument_list|,
name|Account
operator|.
name|Id
argument_list|,
name|Optional
argument_list|<
name|Short
argument_list|>
argument_list|>
name|c
range|:
name|approvals
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_LABEL
argument_list|)
expr_stmt|;
comment|// Label names/values are safe to append without sanitizing.
if|if
condition|(
operator|!
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|c
operator|.
name|getRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
name|LabelVote
operator|.
name|create
argument_list|(
name|c
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|formatWithEquals
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Account
operator|.
name|Id
name|id
init|=
name|c
operator|.
name|getColumnKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
name|addIdent
argument_list|(
name|msg
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submissionId
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_SUBMISSION_ID
argument_list|,
name|submissionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submitRecords
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SubmitRecord
name|rec
range|:
name|submitRecords
control|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|)
operator|.
name|append
argument_list|(
name|rec
operator|.
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|rec
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|sanitizeFooter
argument_list|(
name|rec
operator|.
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|rec
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|label
range|:
name|rec
operator|.
name|labels
control|)
block|{
comment|// Label names/values are safe to append without sanitizing.
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_SUBMITTED_WITH
argument_list|)
operator|.
name|append
argument_list|(
name|label
operator|.
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|label
operator|.
name|label
argument_list|)
expr_stmt|;
if|if
condition|(
name|label
operator|.
name|appliedBy
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|addIdent
argument_list|(
name|msg
argument_list|,
name|label
operator|.
name|appliedBy
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO(maximeg) We might want to list plugins that validated this submission.
block|}
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|accountId
argument_list|,
name|realAccountId
argument_list|)
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_REAL_USER
argument_list|)
expr_stmt|;
name|addIdent
argument_list|(
name|msg
argument_list|,
name|realAccountId
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPrivate
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_PRIVATE
argument_list|,
name|isPrivate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workInProgress
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_WORK_IN_PROGRESS
argument_list|,
name|workInProgress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revertOf
operator|!=
literal|null
condition|)
block|{
name|addFooter
argument_list|(
name|msg
argument_list|,
name|FOOTER_REVERT_OF
argument_list|,
name|revertOf
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|setMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ObjectId
name|treeId
init|=
name|storeRevisionNotes
argument_list|(
name|rw
argument_list|,
name|ins
argument_list|,
name|curr
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeId
operator|!=
literal|null
condition|)
block|{
name|cb
operator|.
name|setTreeId
argument_list|(
name|treeId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|cb
return|;
block|}
DECL|method|addPatchSetFooter (StringBuilder sb, int ps)
specifier|private
name|void
name|addPatchSetFooter
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|int
name|ps
parameter_list|)
block|{
name|addFooter
argument_list|(
name|sb
argument_list|,
name|FOOTER_PATCH_SET
argument_list|)
operator|.
name|append
argument_list|(
name|ps
argument_list|)
expr_stmt|;
if|if
condition|(
name|psState
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|psState
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProjectName ()
specifier|protected
name|Project
operator|.
name|NameKey
name|getProjectName
parameter_list|()
block|{
return|return
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|commitSubject
operator|==
literal|null
operator|&&
name|approvals
operator|.
name|isEmpty
argument_list|()
operator|&&
name|changeMessage
operator|==
literal|null
operator|&&
name|comments
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reviewers
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reviewersByEmail
operator|.
name|isEmpty
argument_list|()
operator|&&
name|changeId
operator|==
literal|null
operator|&&
name|branch
operator|==
literal|null
operator|&&
name|status
operator|==
literal|null
operator|&&
name|submissionId
operator|==
literal|null
operator|&&
name|submitRecords
operator|==
literal|null
operator|&&
name|assignee
operator|==
literal|null
operator|&&
name|hashtags
operator|==
literal|null
operator|&&
name|topic
operator|==
literal|null
operator|&&
name|commit
operator|==
literal|null
operator|&&
name|psState
operator|==
literal|null
operator|&&
name|groups
operator|==
literal|null
operator|&&
name|tag
operator|==
literal|null
operator|&&
name|psDescription
operator|==
literal|null
operator|&&
operator|!
name|currentPatchSet
operator|&&
name|isPrivate
operator|==
literal|null
operator|&&
name|workInProgress
operator|==
literal|null
operator|&&
name|revertOf
operator|==
literal|null
return|;
block|}
DECL|method|getDraftUpdate ()
name|ChangeDraftUpdate
name|getDraftUpdate
parameter_list|()
block|{
return|return
name|draftUpdate
return|;
block|}
DECL|method|getRobotCommentUpdate ()
name|RobotCommentUpdate
name|getRobotCommentUpdate
parameter_list|()
block|{
return|return
name|robotCommentUpdate
return|;
block|}
DECL|method|getDeleteCommentRewriter ()
specifier|public
name|DeleteCommentRewriter
name|getDeleteCommentRewriter
parameter_list|()
block|{
return|return
name|deleteCommentRewriter
return|;
block|}
DECL|method|getDeleteChangeMessageRewriter ()
specifier|public
name|DeleteChangeMessageRewriter
name|getDeleteChangeMessageRewriter
parameter_list|()
block|{
return|return
name|deleteChangeMessageRewriter
return|;
block|}
DECL|method|setAllowWriteToNewRef (boolean allow)
specifier|public
name|void
name|setAllowWriteToNewRef
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|isAllowWriteToNewtRef
operator|=
name|allow
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allowWriteToNewRef ()
specifier|public
name|boolean
name|allowWriteToNewRef
parameter_list|()
block|{
return|return
name|isAllowWriteToNewtRef
return|;
block|}
DECL|method|setPrivate (boolean isPrivate)
specifier|public
name|void
name|setPrivate
parameter_list|(
name|boolean
name|isPrivate
parameter_list|)
block|{
name|this
operator|.
name|isPrivate
operator|=
name|isPrivate
expr_stmt|;
block|}
DECL|method|setWorkInProgress (boolean workInProgress)
specifier|public
name|void
name|setWorkInProgress
parameter_list|(
name|boolean
name|workInProgress
parameter_list|)
block|{
name|this
operator|.
name|workInProgress
operator|=
name|workInProgress
expr_stmt|;
block|}
DECL|method|addFooter (StringBuilder sb, FooterKey footer)
specifier|private
specifier|static
name|StringBuilder
name|addFooter
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|FooterKey
name|footer
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
name|footer
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
return|;
block|}
DECL|method|addFooter (StringBuilder sb, FooterKey footer, Object... values)
specifier|private
specifier|static
name|void
name|addFooter
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|FooterKey
name|footer
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
name|addFooter
argument_list|(
name|sb
argument_list|,
name|footer
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sanitizeFooter
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
DECL|method|addIdent (StringBuilder sb, Account.Id accountId)
specifier|private
name|StringBuilder
name|addIdent
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|PersonIdent
name|ident
init|=
name|newIdent
argument_list|(
name|accountId
argument_list|,
name|when
argument_list|)
decl_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|sb
argument_list|,
name|ident
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|sb
argument_list|,
name|ident
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
block|}
end_class

end_unit

