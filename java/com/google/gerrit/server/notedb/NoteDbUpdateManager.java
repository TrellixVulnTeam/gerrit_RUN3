begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbTable
operator|.
name|CHANGES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RefUpdateUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Timer1
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChainedReceiveCommands
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_comment
comment|/**  * Object to manage a single sequence of updates to NoteDb.  *  *<p>Instances are one-time-use. Handles updating both the change repo and the All-Users repo for  * any affected changes, with proper ordering.  *  *<p>To see the state that would be applied prior to executing the full sequence of updates, use  * {@link #stage()}.  */
end_comment

begin_class
DECL|class|NoteDbUpdateManager
specifier|public
class|class
name|NoteDbUpdateManager
implements|implements
name|AutoCloseable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Project.NameKey projectName)
name|NoteDbUpdateManager
name|create
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
function_decl|;
block|}
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NoteDbMetrics
name|metrics
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|maxUpdates
specifier|private
specifier|final
name|int
name|maxUpdates
decl_stmt|;
DECL|field|changeUpdates
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|ChangeUpdate
argument_list|>
name|changeUpdates
decl_stmt|;
DECL|field|draftUpdates
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|ChangeDraftUpdate
argument_list|>
name|draftUpdates
decl_stmt|;
DECL|field|robotCommentUpdates
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|RobotCommentUpdate
argument_list|>
name|robotCommentUpdates
decl_stmt|;
DECL|field|rewriters
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|NoteDbRewriter
argument_list|>
name|rewriters
decl_stmt|;
DECL|field|toDelete
specifier|private
specifier|final
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|toDelete
decl_stmt|;
DECL|field|changeRepo
specifier|private
name|OpenRepo
name|changeRepo
decl_stmt|;
DECL|field|allUsersRepo
specifier|private
name|OpenRepo
name|allUsersRepo
decl_stmt|;
DECL|field|updateAllUsersAsync
specifier|private
name|AllUsersAsyncUpdate
name|updateAllUsersAsync
decl_stmt|;
DECL|field|executed
specifier|private
name|boolean
name|executed
decl_stmt|;
DECL|field|refLogMessage
specifier|private
name|String
name|refLogMessage
decl_stmt|;
DECL|field|refLogIdent
specifier|private
name|PersonIdent
name|refLogIdent
decl_stmt|;
DECL|field|pushCert
specifier|private
name|PushCertificate
name|pushCert
decl_stmt|;
annotation|@
name|Inject
DECL|method|NoteDbUpdateManager ( @erritServerConfig Config cfg, @GerritPersonIdent Provider<PersonIdent> serverIdent, GitRepositoryManager repoManager, AllUsersName allUsersName, NoteDbMetrics metrics, AllUsersAsyncUpdate updateAllUsersAsync, @Assisted Project.NameKey projectName)
name|NoteDbUpdateManager
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|NoteDbMetrics
name|metrics
parameter_list|,
name|AllUsersAsyncUpdate
name|updateAllUsersAsync
parameter_list|,
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|updateAllUsersAsync
operator|=
name|updateAllUsersAsync
expr_stmt|;
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
name|maxUpdates
operator|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"maxUpdates"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|changeUpdates
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|draftUpdates
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|robotCommentUpdates
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|rewriters
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|toDelete
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|allUsersRepo
operator|!=
literal|null
condition|)
block|{
name|OpenRepo
name|r
init|=
name|allUsersRepo
decl_stmt|;
name|allUsersRepo
operator|=
literal|null
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|changeRepo
operator|!=
literal|null
condition|)
block|{
name|OpenRepo
name|r
init|=
name|changeRepo
decl_stmt|;
name|changeRepo
operator|=
literal|null
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setChangeRepo ( Repository repo, RevWalk rw, @Nullable ObjectInserter ins, ChainedReceiveCommands cmds)
specifier|public
name|NoteDbUpdateManager
name|setChangeRepo
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
annotation|@
name|Nullable
name|ObjectInserter
name|ins
parameter_list|,
name|ChainedReceiveCommands
name|cmds
parameter_list|)
block|{
name|checkState
argument_list|(
name|changeRepo
operator|==
literal|null
argument_list|,
literal|"change repo already initialized"
argument_list|)
expr_stmt|;
name|changeRepo
operator|=
operator|new
name|OpenRepo
argument_list|(
name|repo
argument_list|,
name|rw
argument_list|,
name|ins
argument_list|,
name|cmds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRefLogMessage (String message)
specifier|public
name|NoteDbUpdateManager
name|setRefLogMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|refLogMessage
operator|=
name|message
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRefLogIdent (PersonIdent ident)
specifier|public
name|NoteDbUpdateManager
name|setRefLogIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|)
block|{
name|this
operator|.
name|refLogIdent
operator|=
name|ident
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set a push certificate for the push that originally triggered this NoteDb update.    *    *<p>The pusher will not necessarily have specified any of the NoteDb refs explicitly, such as    * when processing a push to {@code refs/for/master}. That's fine; this is just passed to the    * underlying {@link BatchRefUpdate}, and the implementation decides what to do with it.    *    *<p>The cert should be associated with the main repo. There is currently no way of associating a    * push cert with the {@code All-Users} repo, since it is not currently possible to update draft    * changes via push.    *    * @param pushCert push certificate; may be null.    * @return this    */
DECL|method|setPushCertificate (PushCertificate pushCert)
specifier|public
name|NoteDbUpdateManager
name|setPushCertificate
parameter_list|(
name|PushCertificate
name|pushCert
parameter_list|)
block|{
name|this
operator|.
name|pushCert
operator|=
name|pushCert
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|initChangeRepo ()
specifier|private
name|void
name|initChangeRepo
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|changeRepo
operator|==
literal|null
condition|)
block|{
name|changeRepo
operator|=
name|OpenRepo
operator|.
name|open
argument_list|(
name|repoManager
argument_list|,
name|projectName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initAllUsersRepo ()
specifier|private
name|void
name|initAllUsersRepo
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|allUsersRepo
operator|==
literal|null
condition|)
block|{
name|allUsersRepo
operator|=
name|OpenRepo
operator|.
name|open
argument_list|(
name|repoManager
argument_list|,
name|allUsersName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isEmpty ()
specifier|private
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|changeUpdates
operator|.
name|isEmpty
argument_list|()
operator|&&
name|draftUpdates
operator|.
name|isEmpty
argument_list|()
operator|&&
name|robotCommentUpdates
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rewriters
operator|.
name|isEmpty
argument_list|()
operator|&&
name|toDelete
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|hasCommands
argument_list|(
name|changeRepo
argument_list|)
operator|&&
operator|!
name|hasCommands
argument_list|(
name|allUsersRepo
argument_list|)
operator|&&
name|updateAllUsersAsync
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|hasCommands (@ullable OpenRepo or)
specifier|private
specifier|static
name|boolean
name|hasCommands
parameter_list|(
annotation|@
name|Nullable
name|OpenRepo
name|or
parameter_list|)
block|{
return|return
name|or
operator|!=
literal|null
operator|&&
operator|!
name|or
operator|.
name|cmds
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Add an update to the list of updates to execute.    *    *<p>Updates should only be added to the manager after all mutations have been made, as this    * method may eagerly access the update.    *    * @param update the update to add.    */
DECL|method|add (ChangeUpdate update)
specifier|public
name|void
name|add
parameter_list|(
name|ChangeUpdate
name|update
parameter_list|)
block|{
name|checkNotExecuted
argument_list|()
expr_stmt|;
name|checkArgument
argument_list|(
name|update
operator|.
name|getProjectName
argument_list|()
operator|.
name|equals
argument_list|(
name|projectName
argument_list|)
argument_list|,
literal|"update for project %s cannot be added to manager for project %s"
argument_list|,
name|update
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|projectName
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|rewriters
operator|.
name|containsKey
argument_list|(
name|update
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
literal|"cannot update& rewrite ref %s in one BatchUpdate"
argument_list|,
name|update
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeDraftUpdate
name|du
init|=
name|update
operator|.
name|getDraftUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|du
operator|!=
literal|null
condition|)
block|{
name|draftUpdates
operator|.
name|put
argument_list|(
name|du
operator|.
name|getRefName
argument_list|()
argument_list|,
name|du
argument_list|)
expr_stmt|;
block|}
name|RobotCommentUpdate
name|rcu
init|=
name|update
operator|.
name|getRobotCommentUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
name|rcu
operator|!=
literal|null
condition|)
block|{
name|robotCommentUpdates
operator|.
name|put
argument_list|(
name|rcu
operator|.
name|getRefName
argument_list|()
argument_list|,
name|rcu
argument_list|)
expr_stmt|;
block|}
name|DeleteCommentRewriter
name|deleteCommentRewriter
init|=
name|update
operator|.
name|getDeleteCommentRewriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|deleteCommentRewriter
operator|!=
literal|null
condition|)
block|{
comment|// Checks whether there is any ChangeUpdate or rewriter added earlier for the same ref.
name|checkArgument
argument_list|(
operator|!
name|changeUpdates
operator|.
name|containsKey
argument_list|(
name|deleteCommentRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
literal|"cannot update& rewrite ref %s in one BatchUpdate"
argument_list|,
name|deleteCommentRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|rewriters
operator|.
name|containsKey
argument_list|(
name|deleteCommentRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
literal|"cannot rewrite the same ref %s in one BatchUpdate"
argument_list|,
name|deleteCommentRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|rewriters
operator|.
name|put
argument_list|(
name|deleteCommentRewriter
operator|.
name|getRefName
argument_list|()
argument_list|,
name|deleteCommentRewriter
argument_list|)
expr_stmt|;
block|}
name|DeleteChangeMessageRewriter
name|deleteChangeMessageRewriter
init|=
name|update
operator|.
name|getDeleteChangeMessageRewriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|deleteChangeMessageRewriter
operator|!=
literal|null
condition|)
block|{
comment|// Checks whether there is any ChangeUpdate or rewriter added earlier for the same ref.
name|checkArgument
argument_list|(
operator|!
name|changeUpdates
operator|.
name|containsKey
argument_list|(
name|deleteChangeMessageRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
literal|"cannot update& rewrite ref %s in one BatchUpdate"
argument_list|,
name|deleteChangeMessageRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|rewriters
operator|.
name|containsKey
argument_list|(
name|deleteChangeMessageRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
argument_list|,
literal|"cannot rewrite the same ref %s in one BatchUpdate"
argument_list|,
name|deleteChangeMessageRewriter
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|rewriters
operator|.
name|put
argument_list|(
name|deleteChangeMessageRewriter
operator|.
name|getRefName
argument_list|()
argument_list|,
name|deleteChangeMessageRewriter
argument_list|)
expr_stmt|;
block|}
name|changeUpdates
operator|.
name|put
argument_list|(
name|update
operator|.
name|getRefName
argument_list|()
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
DECL|method|add (ChangeDraftUpdate draftUpdate)
specifier|public
name|void
name|add
parameter_list|(
name|ChangeDraftUpdate
name|draftUpdate
parameter_list|)
block|{
name|checkNotExecuted
argument_list|()
expr_stmt|;
name|draftUpdates
operator|.
name|put
argument_list|(
name|draftUpdate
operator|.
name|getRefName
argument_list|()
argument_list|,
name|draftUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteChange (Change.Id id)
specifier|public
name|void
name|deleteChange
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
name|checkNotExecuted
argument_list|()
expr_stmt|;
name|toDelete
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stage updates in the manager's internal list of commands.    *    * @throws IOException if a storage layer error occurs.    */
DECL|method|stage ()
specifier|private
name|void
name|stage
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Timer1
operator|.
name|Context
name|timer
init|=
name|metrics
operator|.
name|stageUpdateLatency
operator|.
name|start
argument_list|(
name|CHANGES
argument_list|)
init|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|initChangeRepo
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|draftUpdates
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|toDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|initAllUsersRepo
argument_list|()
expr_stmt|;
block|}
name|addCommands
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNotExecuted
argument_list|()
expr_stmt|;
if|if
condition|(
name|changeRepo
operator|!=
literal|null
condition|)
block|{
name|changeRepo
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|allUsersRepo
operator|!=
literal|null
condition|)
block|{
name|allUsersRepo
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
DECL|method|execute ()
specifier|public
name|BatchRefUpdate
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|execute
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|execute (boolean dryrun)
specifier|public
name|BatchRefUpdate
name|execute
parameter_list|(
name|boolean
name|dryrun
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotExecuted
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
name|executed
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
init|(
name|Timer1
operator|.
name|Context
name|timer
init|=
name|metrics
operator|.
name|updateLatency
operator|.
name|start
argument_list|(
name|CHANGES
argument_list|)
init|)
block|{
name|stage
argument_list|()
expr_stmt|;
comment|// ChangeUpdates must execute before ChangeDraftUpdates.
comment|//
comment|// ChangeUpdate will automatically delete draft comments for any published
comment|// comments, but the updates to the two repos don't happen atomically.
comment|// Thus if the change meta update succeeds and the All-Users update fails,
comment|// we may have stale draft comments. Doing it in this order allows stale
comment|// comments to be filtered out by ChangeNotes, reflecting the fact that
comment|// comments can only go from DRAFT to PUBLISHED, not vice versa.
name|BatchRefUpdate
name|result
init|=
name|execute
argument_list|(
name|changeRepo
argument_list|,
name|dryrun
argument_list|,
name|pushCert
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|allUsersRepo
argument_list|,
name|dryrun
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
comment|// Only execute the asynchronous operation if we are not in dry-run mode: The dry run would
comment|// have to run synchronous to be of any value at all. For the removal of draft comments from
comment|// All-Users we don't care much of the operation succeeds, so we are skipping the dry run
comment|// altogether.
name|updateAllUsersAsync
operator|.
name|execute
argument_list|(
name|refLogIdent
argument_list|,
name|refLogMessage
argument_list|,
name|pushCert
argument_list|)
expr_stmt|;
block|}
name|executed
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|execute (OpenRepo or, boolean dryrun, @Nullable PushCertificate pushCert)
specifier|private
name|BatchRefUpdate
name|execute
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|boolean
name|dryrun
parameter_list|,
annotation|@
name|Nullable
name|PushCertificate
name|pushCert
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|or
operator|==
literal|null
operator|||
name|or
operator|.
name|cmds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
name|or
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// OpenRepo buffers objects separately; caller may assume that objects are available in the
comment|// inserter it previously passed via setChangeRepo.
name|or
operator|.
name|flushToFinalInserter
argument_list|()
expr_stmt|;
block|}
name|BatchRefUpdate
name|bru
init|=
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
name|bru
operator|.
name|setPushCertificate
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
if|if
condition|(
name|refLogMessage
operator|!=
literal|null
condition|)
block|{
name|bru
operator|.
name|setRefLogMessage
argument_list|(
name|refLogMessage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bru
operator|.
name|setRefLogMessage
argument_list|(
name|firstNonNull
argument_list|(
name|NoteDbUtil
operator|.
name|guessRestApiHandler
argument_list|()
argument_list|,
literal|"Update NoteDb refs"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|bru
operator|.
name|setRefLogIdent
argument_list|(
name|refLogIdent
operator|!=
literal|null
condition|?
name|refLogIdent
else|:
name|serverIdent
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|bru
operator|.
name|setAtomic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|or
operator|.
name|cmds
operator|.
name|addTo
argument_list|(
name|bru
argument_list|)
expr_stmt|;
name|bru
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
name|RefUpdateUtil
operator|.
name|executeChecked
argument_list|(
name|bru
argument_list|,
name|or
operator|.
name|rw
argument_list|)
expr_stmt|;
block|}
return|return
name|bru
return|;
block|}
DECL|method|addCommands ()
specifier|private
name|void
name|addCommands
parameter_list|()
throws|throws
name|IOException
block|{
name|changeRepo
operator|.
name|addUpdates
argument_list|(
name|changeUpdates
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|maxUpdates
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|draftUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|publishOnly
init|=
name|draftUpdates
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|ChangeDraftUpdate
operator|::
name|canRunAsync
argument_list|)
decl_stmt|;
if|if
condition|(
name|publishOnly
condition|)
block|{
name|updateAllUsersAsync
operator|.
name|setDraftUpdates
argument_list|(
name|draftUpdates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allUsersRepo
operator|.
name|addUpdates
argument_list|(
name|draftUpdates
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|robotCommentUpdates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|changeRepo
operator|.
name|addUpdates
argument_list|(
name|robotCommentUpdates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rewriters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addRewrites
argument_list|(
name|rewriters
argument_list|,
name|changeRepo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|toDelete
control|)
block|{
name|doDelete
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doDelete (Change.Id id)
specifier|private
name|void
name|doDelete
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|metaRef
init|=
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|old
init|=
name|changeRepo
operator|.
name|cmds
operator|.
name|get
argument_list|(
name|metaRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|changeRepo
operator|.
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|old
operator|.
name|get
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|metaRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Just scan repo for ref names, but get "old" values from cmds.
for|for
control|(
name|Ref
name|r
range|:
name|allUsersRepo
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|RefNames
operator|.
name|refsDraftCommentsPrefix
argument_list|(
name|id
argument_list|)
argument_list|)
control|)
block|{
name|old
operator|=
name|allUsersRepo
operator|.
name|cmds
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|allUsersRepo
operator|.
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|old
operator|.
name|get
argument_list|()
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkNotExecuted ()
specifier|private
name|void
name|checkNotExecuted
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|executed
argument_list|,
literal|"update has already been executed"
argument_list|)
expr_stmt|;
block|}
DECL|method|addRewrites (ListMultimap<String, NoteDbRewriter> rewriters, OpenRepo openRepo)
specifier|private
specifier|static
name|void
name|addRewrites
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|NoteDbRewriter
argument_list|>
name|rewriters
parameter_list|,
name|OpenRepo
name|openRepo
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|NoteDbRewriter
argument_list|>
argument_list|>
name|entry
range|:
name|rewriters
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|refName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ObjectId
name|oldTip
init|=
name|openRepo
operator|.
name|cmds
operator|.
name|get
argument_list|(
name|refName
argument_list|)
operator|.
name|orElse
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTip
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ref %s is empty"
argument_list|,
name|refName
argument_list|)
argument_list|)
throw|;
block|}
name|ObjectId
name|currTip
init|=
name|oldTip
decl_stmt|;
try|try
block|{
for|for
control|(
name|NoteDbRewriter
name|noteDbRewriter
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ObjectId
name|nextTip
init|=
name|noteDbRewriter
operator|.
name|rewriteCommitHistory
argument_list|(
name|openRepo
operator|.
name|rw
argument_list|,
name|openRepo
operator|.
name|tempIns
argument_list|,
name|currTip
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextTip
operator|!=
literal|null
condition|)
block|{
name|currTip
operator|=
name|nextTip
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Cannot rewrite commit history"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|oldTip
operator|.
name|equals
argument_list|(
name|currTip
argument_list|)
condition|)
block|{
name|openRepo
operator|.
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|oldTip
argument_list|,
name|currTip
argument_list|,
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

