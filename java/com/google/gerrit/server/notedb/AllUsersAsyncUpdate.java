begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.notedb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|RefUpdateUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|FanOutExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_comment
comment|/**  * Performs an update on {@code All-Users} asynchronously if required. No-op in case no updates were  * scheduled for asynchronous execution.  */
end_comment

begin_class
DECL|class|AllUsersAsyncUpdate
specifier|public
class|class
name|AllUsersAsyncUpdate
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|draftUpdates
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|ChangeDraftUpdate
argument_list|>
name|draftUpdates
decl_stmt|;
DECL|field|serverIdent
specifier|private
name|PersonIdent
name|serverIdent
decl_stmt|;
annotation|@
name|Inject
DECL|method|AllUsersAsyncUpdate ( @anOutExecutor ExecutorService executor, AllUsersName allUsersName, GitRepositoryManager repoManager)
name|AllUsersAsyncUpdate
parameter_list|(
annotation|@
name|FanOutExecutor
name|ExecutorService
name|executor
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|GitRepositoryManager
name|repoManager
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|draftUpdates
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|setDraftUpdates (ListMultimap<String, ChangeDraftUpdate> draftUpdates)
name|void
name|setDraftUpdates
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|ChangeDraftUpdate
argument_list|>
name|draftUpdates
parameter_list|)
block|{
name|checkState
argument_list|(
name|isEmpty
argument_list|()
argument_list|,
literal|"attempted to set draft comment updates for async execution twice"
argument_list|)
expr_stmt|;
name|boolean
name|allPublishOnly
init|=
name|draftUpdates
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|ChangeDraftUpdate
operator|::
name|canRunAsync
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|allPublishOnly
argument_list|,
literal|"not all updates can be run asynchronously"
argument_list|)
expr_stmt|;
comment|// Add deep copies to avoid any threading issues.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ChangeDraftUpdate
argument_list|>
name|entry
range|:
name|draftUpdates
operator|.
name|entries
argument_list|()
control|)
block|{
name|this
operator|.
name|draftUpdates
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|draftUpdates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Save the PersonIdent for later so that we get consistent time stamps in the commit and ref
comment|// log.
name|serverIdent
operator|=
name|Iterables
operator|.
name|get
argument_list|(
name|draftUpdates
operator|.
name|entries
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|serverIdent
expr_stmt|;
block|}
block|}
comment|/** Returns true if no operations should be performed on the repo. */
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|draftUpdates
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** Executes repository update asynchronously. No-op in case no updates were scheduled. */
DECL|method|execute (PersonIdent refLogIdent, String refLogMessage, PushCertificate pushCert)
name|void
name|execute
parameter_list|(
name|PersonIdent
name|refLogIdent
parameter_list|,
name|String
name|refLogMessage
parameter_list|,
name|PushCertificate
name|pushCert
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|executor
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|OpenRepo
name|allUsersRepo
init|=
name|OpenRepo
operator|.
name|open
argument_list|(
name|repoManager
argument_list|,
name|allUsersName
argument_list|)
init|)
block|{
name|allUsersRepo
operator|.
name|addUpdatesNoLimits
argument_list|(
name|draftUpdates
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|flush
argument_list|()
expr_stmt|;
name|BatchRefUpdate
name|bru
init|=
name|allUsersRepo
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
name|bru
operator|.
name|setPushCertificate
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
if|if
condition|(
name|refLogMessage
operator|!=
literal|null
condition|)
block|{
name|bru
operator|.
name|setRefLogMessage
argument_list|(
name|refLogMessage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bru
operator|.
name|setRefLogMessage
argument_list|(
name|firstNonNull
argument_list|(
name|NoteDbUtil
operator|.
name|guessRestApiHandler
argument_list|()
argument_list|,
literal|"Update NoteDb refs async"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|bru
operator|.
name|setRefLogIdent
argument_list|(
name|refLogIdent
operator|!=
literal|null
condition|?
name|refLogIdent
else|:
name|serverIdent
argument_list|)
expr_stmt|;
name|bru
operator|.
name|setAtomic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allUsersRepo
operator|.
name|cmds
operator|.
name|addTo
argument_list|(
name|bru
argument_list|)
expr_stmt|;
name|bru
operator|.
name|setAllowNonFastForwards
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RefUpdateUtil
operator|.
name|executeChecked
argument_list|(
name|bru
argument_list|,
name|allUsersRepo
operator|.
name|rw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to delete draft comments asynchronously after publishing them"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

