begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_comment
comment|/**  * A representation of a group in NoteDb.  *  *<p>Groups in NoteDb can be created by following the descriptions of {@link  * #createForNewGroup(Repository, InternalGroupCreation)}. For reading groups from NoteDb or  * updating them, refer to {@link #loadForGroup(Repository, AccountGroup.UUID)} or {@link  * #loadForGroupSnapshot(Repository, AccountGroup.UUID, ObjectId)}.  *  *<p><strong>Note:</strong>Any modification (group creation or update) only becomes permanent (and  * hence written to NoteDb) if {@link #commit(MetaDataUpdate)} is called.  *  *<p><strong>Warning:</strong>This class is a low-level API for groups in NoteDb. Most code which  * deals with internal Gerrit groups should use {@link Groups} or {@link GroupsUpdate} instead.  *  *<p><em>Internal details</em>  *  *<p>Each group is represented by a commit on a branch as defined by {@link  * RefNames#refsGroups(AccountGroup.UUID)}. Previous versions of the group exist as older commits on  * the same branch and can be reached by following along the parent references. New commits for  * updates are only created if a real modification occurs.  *  *<p>The commit messages of all commits on that branch form the audit log for the group. The  * messages mention any important modifications which happened for the group to avoid costly  * computations.  *  *<p>Within each commit, the properties of a group are spread across three files:  *  *<ul>  *<li><em>group.config</em>, which holds all basic properties of a group (further specified by  *       {@link GroupConfigEntry}), formatted as a JGit {@link Config} file  *<li><em>members</em>, which lists all members (accounts) of a group, formatted as one numeric  *       ID per line  *<li><em>subgroups</em>, which lists all subgroups of a group, formatted as one UUID per line  *</ul>  *  *<p>The files<em>members</em> and<em>subgroups</em> need not exist, which means that the group  * doesn't have any members or subgroups.  */
end_comment

begin_class
DECL|class|GroupConfig
specifier|public
class|class
name|GroupConfig
extends|extends
name|VersionedMetaData
block|{
DECL|field|GROUP_CONFIG_FILE
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|String
name|GROUP_CONFIG_FILE
init|=
literal|"group.config"
decl_stmt|;
DECL|field|MEMBERS_FILE
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|String
name|MEMBERS_FILE
init|=
literal|"members"
decl_stmt|;
DECL|field|SUBGROUPS_FILE
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|String
name|SUBGROUPS_FILE
init|=
literal|"subgroups"
decl_stmt|;
DECL|field|LINE_SEPARATOR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LINE_SEPARATOR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\R"
argument_list|)
decl_stmt|;
comment|/**    * Creates a {@code GroupConfig} for a new group from the {@code InternalGroupCreation} blueprint.    * Further, optional properties can be specified by setting an {@code InternalGroupUpdate} via    * {@link #setGroupUpdate(InternalGroupUpdate, AuditLogFormatter)} on the returned {@code    * GroupConfig}.    *    *<p><strong>Note:</strong>The returned {@code GroupConfig} has to be committed via {@link    * #commit(MetaDataUpdate)} in order to create the group for real.    *    * @param repository the repository which holds the NoteDb commits for groups    * @param groupCreation an {@code InternalGroupCreation} specifying all properties which are    *     required for a new group    * @return a {@code GroupConfig} for a group creation    * @throws IOException if the repository can't be accessed for some reason    * @throws ConfigInvalidException if a group with the same UUID already exists but can't be read    *     due to an invalid format    * @throws OrmDuplicateKeyException if a group with the same UUID already exists    */
DECL|method|createForNewGroup ( Repository repository, InternalGroupCreation groupCreation)
specifier|public
specifier|static
name|GroupConfig
name|createForNewGroup
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|InternalGroupCreation
name|groupCreation
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
block|{
name|GroupConfig
name|groupConfig
init|=
operator|new
name|GroupConfig
argument_list|(
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|load
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|setGroupCreation
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
return|return
name|groupConfig
return|;
block|}
comment|/**    * Creates a {@code GroupConfig} for an existing group.    *    *<p>The group is automatically loaded within this method and can be accessed via {@link    * #getLoadedGroup()}.    *    *<p>It's safe to call this method for non-existing groups. In that case, {@link    * #getLoadedGroup()} won't return any group. Thus, the existence of a group can be easily tested.    *    *<p>The group represented by the returned {@code GroupConfig} can be updated by setting an    * {@code InternalGroupUpdate} via {@link #setGroupUpdate(InternalGroupUpdate, AuditLogFormatter)}    * and committing the {@code GroupConfig} via {@link #commit(MetaDataUpdate)}.    *    * @param repository the repository which holds the NoteDb commits for groups    * @param groupUuid the UUID of the group    * @return a {@code GroupConfig} for the group with the specified UUID    * @throws IOException if the repository can't be accessed for some reason    * @throws ConfigInvalidException if the group exists but can't be read due to an invalid format    */
DECL|method|loadForGroup (Repository repository, AccountGroup.UUID groupUuid)
specifier|public
specifier|static
name|GroupConfig
name|loadForGroup
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|GroupConfig
name|groupConfig
init|=
operator|new
name|GroupConfig
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|load
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|groupConfig
return|;
block|}
comment|/**    * Creates a {@code GroupConfig} for an existing group at a specific revision of the repository.    *    *<p>This method behaves nearly the same as {@link #loadForGroup(Repository, AccountGroup.UUID)}.    * The only difference is that {@link #loadForGroup(Repository, AccountGroup.UUID)} loads the    * group from the current state of the repository whereas this method loads the group at a    * specific (maybe past) revision.    *    * @param repository the repository which holds the NoteDb commits for groups    * @param groupUuid the UUID of the group    * @param commitId the revision of the repository at which the group should be loaded    * @return a {@code GroupConfig} for the group with the specified UUID    * @throws IOException if the repository can't be accessed for some reason    * @throws ConfigInvalidException if the group exists but can't be read due to an invalid format    */
DECL|method|loadForGroupSnapshot ( Repository repository, AccountGroup.UUID groupUuid, ObjectId commitId)
specifier|public
specifier|static
name|GroupConfig
name|loadForGroupSnapshot
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|ObjectId
name|commitId
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|GroupConfig
name|groupConfig
init|=
operator|new
name|GroupConfig
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|load
argument_list|(
name|repository
argument_list|,
name|commitId
argument_list|)
expr_stmt|;
return|return
name|groupConfig
return|;
block|}
DECL|field|groupUuid
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|groupUuid
decl_stmt|;
DECL|field|ref
specifier|private
specifier|final
name|String
name|ref
decl_stmt|;
DECL|field|loadedGroup
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|loadedGroup
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|groupCreation
specifier|private
name|Optional
argument_list|<
name|InternalGroupCreation
argument_list|>
name|groupCreation
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|groupUpdate
specifier|private
name|Optional
argument_list|<
name|InternalGroupUpdate
argument_list|>
name|groupUpdate
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|auditLogFormatter
specifier|private
name|AuditLogFormatter
name|auditLogFormatter
init|=
name|AuditLogFormatter
operator|.
name|createPartiallyWorkingFallBack
argument_list|()
decl_stmt|;
DECL|field|isLoaded
specifier|private
name|boolean
name|isLoaded
init|=
literal|false
decl_stmt|;
DECL|field|allowSaveEmptyName
specifier|private
name|boolean
name|allowSaveEmptyName
decl_stmt|;
DECL|method|GroupConfig (AccountGroup.UUID groupUuid)
specifier|private
name|GroupConfig
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
name|this
operator|.
name|groupUuid
operator|=
name|checkNotNull
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|ref
operator|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the group loaded from NoteDb.    *    *<p>If not any NoteDb commits exist for the group represented by this {@code GroupConfig}, no    * group is returned.    *    *<p>After {@link #commit(MetaDataUpdate)} was called on this {@code GroupConfig}, this method    * returns a group which is in line with the latest NoteDb commit for this group. So, after    * creating a {@code GroupConfig} for a new group and committing it, this method can be used to    * retrieve a representation of the created group. The same holds for the representation of an    * updated group.    *    * @return the loaded group, or an empty {@code Optional} if the group doesn't exist    */
DECL|method|getLoadedGroup ()
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|getLoadedGroup
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|loadedGroup
return|;
block|}
comment|/**    * Specifies how the current group should be updated.    *    *<p>If the group is newly created, the {@code InternalGroupUpdate} can be used to specify    * optional properties.    *    *<p><strong>Note:</strong>This method doesn't perform the update. It only contains the    * instructions for the update. To apply the update for real and write the result back to NoteDb,    * call {@link #commit(MetaDataUpdate)} on this {@code GroupConfig}.    *    * @param groupUpdate an {@code InternalGroupUpdate} outlining the modifications which should be    *     applied    * @param auditLogFormatter an {@code AuditLogFormatter} for formatting the commit message in a    *     parsable way    */
DECL|method|setGroupUpdate (InternalGroupUpdate groupUpdate, AuditLogFormatter auditLogFormatter)
specifier|public
name|void
name|setGroupUpdate
parameter_list|(
name|InternalGroupUpdate
name|groupUpdate
parameter_list|,
name|AuditLogFormatter
name|auditLogFormatter
parameter_list|)
block|{
name|this
operator|.
name|groupUpdate
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|groupUpdate
argument_list|)
expr_stmt|;
name|this
operator|.
name|auditLogFormatter
operator|=
name|auditLogFormatter
expr_stmt|;
block|}
comment|/**    * Allows the new name of a group to be empty during creation or update.    *    *<p><strong>Note:</strong>This method exists only to support the migration of legacy groups    * which don't always necessarily have a name. Nowadays, we enforce that groups always have names.    * When we remove the migration code, we can probably remove this method as well.    */
DECL|method|setAllowSaveEmptyName ()
specifier|public
name|void
name|setAllowSaveEmptyName
parameter_list|()
block|{
name|this
operator|.
name|allowSaveEmptyName
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|setGroupCreation (InternalGroupCreation groupCreation)
specifier|private
name|void
name|setGroupCreation
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|)
throws|throws
name|OrmDuplicateKeyException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
if|if
condition|(
name|loadedGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OrmDuplicateKeyException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group %s already exists"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|groupCreation
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|groupCreation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|public
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|RevCommit
name|earliestCommit
init|=
name|rw
operator|.
name|next
argument_list|()
decl_stmt|;
name|Timestamp
name|createdOn
init|=
operator|new
name|Timestamp
argument_list|(
name|earliestCommit
operator|.
name|getCommitTime
argument_list|()
operator|*
literal|1000L
argument_list|)
decl_stmt|;
name|Config
name|config
init|=
name|readConfig
argument_list|(
name|GROUP_CONFIG_FILE
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|readMembers
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|readSubgroups
argument_list|()
decl_stmt|;
name|loadedGroup
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|createFrom
argument_list|(
name|groupUuid
argument_list|,
name|config
argument_list|,
name|members
argument_list|,
name|subgroups
argument_list|,
name|createdOn
argument_list|,
name|revision
operator|.
name|toObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|isLoaded
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commit (MetaDataUpdate update)
specifier|public
name|RevCommit
name|commit
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
block|{
name|RevCommit
name|c
init|=
name|super
operator|.
name|commit
argument_list|(
name|update
argument_list|)
decl_stmt|;
name|loadedGroup
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|loadedGroup
operator|.
name|get
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setRefState
argument_list|(
name|c
operator|.
name|toObjectId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|groupCreation
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|groupUpdate
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Group was neither created nor changed. -> A new commit isn't necessary.
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|allowSaveEmptyName
operator|&&
name|getNewName
argument_list|()
operator|.
name|equals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Name of the group %s must be defined"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Commit timestamps are internally truncated to seconds. To return the correct 'createdOn' time
comment|// for new groups, we explicitly need to truncate the timestamp here.
name|Timestamp
name|commitTimestamp
init|=
name|TimeUtil
operator|.
name|truncateToSecond
argument_list|(
name|groupUpdate
operator|.
name|flatMap
argument_list|(
name|InternalGroupUpdate
operator|::
name|getUpdatedOn
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|TimeUtil
operator|::
name|nowTs
argument_list|)
argument_list|)
decl_stmt|;
name|commit
operator|.
name|setAuthor
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|commit
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|commitTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setCommitter
argument_list|(
operator|new
name|PersonIdent
argument_list|(
name|commit
operator|.
name|getCommitter
argument_list|()
argument_list|,
name|commitTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|InternalGroup
name|updatedGroup
init|=
name|updateGroup
argument_list|(
name|commitTimestamp
argument_list|)
decl_stmt|;
name|String
name|commitMessage
init|=
name|createCommitMessage
argument_list|(
name|loadedGroup
argument_list|,
name|updatedGroup
argument_list|)
decl_stmt|;
name|commit
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|loadedGroup
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|updatedGroup
argument_list|)
expr_stmt|;
name|groupCreation
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|groupUpdate
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|checkLoaded ()
specifier|private
name|void
name|checkLoaded
parameter_list|()
block|{
name|checkState
argument_list|(
name|isLoaded
argument_list|,
literal|"Group %s not loaded yet"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getNewName ()
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getNewName
parameter_list|()
block|{
if|if
condition|(
name|groupUpdate
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|groupUpdate
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|map
argument_list|(
name|n
lambda|->
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|n
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|groupCreation
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|groupCreation
operator|.
name|get
argument_list|()
operator|.
name|getNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|updateGroup (Timestamp commitTimestamp)
specifier|private
name|InternalGroup
name|updateGroup
parameter_list|(
name|Timestamp
name|commitTimestamp
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Config
name|config
init|=
name|updateGroupProperties
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
init|=
name|loadedGroup
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getMembers
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|ImmutableSet
operator|::
name|of
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updatedMembers
init|=
name|updateMembers
argument_list|(
name|originalMembers
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|originalSubgroups
init|=
name|loadedGroup
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getSubgroups
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|ImmutableSet
operator|::
name|of
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|updatedSubgroups
init|=
name|updateSubgroups
argument_list|(
name|originalSubgroups
argument_list|)
decl_stmt|;
name|Timestamp
name|createdOn
init|=
name|loadedGroup
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getCreatedOn
argument_list|)
operator|.
name|orElse
argument_list|(
name|commitTimestamp
argument_list|)
decl_stmt|;
return|return
name|createFrom
argument_list|(
name|groupUuid
argument_list|,
name|config
argument_list|,
name|updatedMembers
operator|.
name|orElse
argument_list|(
name|originalMembers
argument_list|)
argument_list|,
name|updatedSubgroups
operator|.
name|orElse
argument_list|(
name|originalSubgroups
argument_list|)
argument_list|,
name|createdOn
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|updateGroupProperties ()
specifier|private
name|Config
name|updateGroupProperties
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Config
name|config
init|=
name|readConfig
argument_list|(
name|GROUP_CONFIG_FILE
argument_list|)
decl_stmt|;
name|groupCreation
operator|.
name|ifPresent
argument_list|(
name|internalGroupCreation
lambda|->
name|Arrays
operator|.
name|stream
argument_list|(
name|GroupConfigEntry
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|configEntry
lambda|->
name|configEntry
operator|.
name|initNewConfig
argument_list|(
name|config
argument_list|,
name|internalGroupCreation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groupUpdate
operator|.
name|ifPresent
argument_list|(
name|internalGroupUpdate
lambda|->
name|Arrays
operator|.
name|stream
argument_list|(
name|GroupConfigEntry
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|configEntry
lambda|->
name|configEntry
operator|.
name|updateConfigValue
argument_list|(
name|config
argument_list|,
name|internalGroupUpdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|saveConfig
argument_list|(
name|GROUP_CONFIG_FILE
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|updateMembers (ImmutableSet<Account.Id> originalMembers)
specifier|private
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updateMembers
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updatedMembers
init|=
name|groupUpdate
operator|.
name|map
argument_list|(
name|InternalGroupUpdate
operator|::
name|getMemberModification
argument_list|)
operator|.
name|map
argument_list|(
name|memberModification
lambda|->
name|memberModification
operator|.
name|apply
argument_list|(
name|originalMembers
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ImmutableSet
operator|::
name|copyOf
argument_list|)
operator|.
name|filter
argument_list|(
name|members
lambda|->
operator|!
name|originalMembers
operator|.
name|equals
argument_list|(
name|members
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedMembers
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|saveMembers
argument_list|(
name|updatedMembers
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|updatedMembers
return|;
block|}
DECL|method|updateSubgroups ( ImmutableSet<AccountGroup.UUID> originalSubgroups)
specifier|private
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|updateSubgroups
parameter_list|(
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|originalSubgroups
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
argument_list|>
name|updatedSubgroups
init|=
name|groupUpdate
operator|.
name|map
argument_list|(
name|InternalGroupUpdate
operator|::
name|getSubgroupModification
argument_list|)
operator|.
name|map
argument_list|(
name|subgroupModification
lambda|->
name|subgroupModification
operator|.
name|apply
argument_list|(
name|originalSubgroups
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ImmutableSet
operator|::
name|copyOf
argument_list|)
operator|.
name|filter
argument_list|(
name|subgroups
lambda|->
operator|!
name|originalSubgroups
operator|.
name|equals
argument_list|(
name|subgroups
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedSubgroups
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|saveSubgroups
argument_list|(
name|updatedSubgroups
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|updatedSubgroups
return|;
block|}
DECL|method|saveMembers (ImmutableSet<Account.Id> members)
specifier|private
name|void
name|saveMembers
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
parameter_list|)
throws|throws
name|IOException
block|{
name|saveToFile
argument_list|(
name|MEMBERS_FILE
argument_list|,
name|members
argument_list|,
name|member
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|member
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|saveSubgroups (ImmutableSet<AccountGroup.UUID> subgroups)
specifier|private
name|void
name|saveSubgroups
parameter_list|(
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
parameter_list|)
throws|throws
name|IOException
block|{
name|saveToFile
argument_list|(
name|SUBGROUPS_FILE
argument_list|,
name|subgroups
argument_list|,
name|AccountGroup
operator|.
name|UUID
operator|::
name|get
argument_list|)
expr_stmt|;
block|}
DECL|method|saveToFile ( String filePath, ImmutableSet<E> elements, Function<E, String> toStringFunction)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|void
name|saveToFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|,
name|Function
argument_list|<
name|E
argument_list|,
name|String
argument_list|>
name|toStringFunction
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileContent
init|=
name|elements
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|toStringFunction
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|saveUTF8
argument_list|(
name|filePath
argument_list|,
name|fileContent
argument_list|)
expr_stmt|;
block|}
DECL|method|readMembers ()
specifier|private
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|readMembers
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|readFromFile
argument_list|(
name|MEMBERS_FILE
argument_list|,
name|entry
lambda|->
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readSubgroups ()
specifier|private
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|readSubgroups
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|readFromFile
argument_list|(
name|SUBGROUPS_FILE
argument_list|,
name|AccountGroup
operator|.
name|UUID
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|readFromFile (String filePath, Function<String, E> fromStringFunction)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|readFromFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|E
argument_list|>
name|fromStringFunction
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|String
name|fileContent
init|=
name|readUTF8
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|LINE_SEPARATOR_PATTERN
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|fileContent
argument_list|)
decl_stmt|;
return|return
name|Streams
operator|.
name|stream
argument_list|(
name|lines
argument_list|)
operator|.
name|map
argument_list|(
name|fromStringFunction
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid file %s for commit %s"
argument_list|,
name|filePath
argument_list|,
name|revision
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createFrom ( AccountGroup.UUID groupUuid, Config config, ImmutableSet<Account.Id> members, ImmutableSet<AccountGroup.UUID> subgroups, Timestamp createdOn, ObjectId refState)
specifier|private
specifier|static
name|InternalGroup
name|createFrom
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|Config
name|config
parameter_list|,
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
parameter_list|,
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
parameter_list|,
name|Timestamp
name|createdOn
parameter_list|,
name|ObjectId
name|refState
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|InternalGroup
operator|.
name|Builder
name|group
init|=
name|InternalGroup
operator|.
name|builder
argument_list|()
decl_stmt|;
name|group
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupConfigEntry
name|configEntry
range|:
name|GroupConfigEntry
operator|.
name|values
argument_list|()
control|)
block|{
name|configEntry
operator|.
name|readFromConfig
argument_list|(
name|groupUuid
argument_list|,
name|group
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setMembers
argument_list|(
name|members
argument_list|)
expr_stmt|;
name|group
operator|.
name|setSubgroups
argument_list|(
name|subgroups
argument_list|)
expr_stmt|;
name|group
operator|.
name|setCreatedOn
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
name|group
operator|.
name|setRefState
argument_list|(
name|refState
argument_list|)
expr_stmt|;
return|return
name|group
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createCommitMessage ( Optional<InternalGroup> originalGroup, InternalGroup updatedGroup)
specifier|private
name|String
name|createCommitMessage
parameter_list|(
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|originalGroup
parameter_list|,
name|InternalGroup
name|updatedGroup
parameter_list|)
block|{
name|GroupConfigCommitMessage
name|commitMessage
init|=
operator|new
name|GroupConfigCommitMessage
argument_list|(
name|auditLogFormatter
argument_list|,
name|updatedGroup
argument_list|)
decl_stmt|;
name|originalGroup
operator|.
name|ifPresent
argument_list|(
name|commitMessage
operator|::
name|setOriginalGroup
argument_list|)
expr_stmt|;
return|return
name|commitMessage
operator|.
name|create
argument_list|()
return|;
block|}
block|}
end_class

end_unit

