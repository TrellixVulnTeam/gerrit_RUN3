begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_comment
comment|// TODO(aliceks): Add Javadoc descriptions to this file.
end_comment

begin_class
DECL|class|GroupConfig
specifier|public
class|class
name|GroupConfig
extends|extends
name|VersionedMetaData
block|{
DECL|field|GROUP_CONFIG_FILE
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_CONFIG_FILE
init|=
literal|"group.config"
decl_stmt|;
DECL|field|MEMBERS_FILE
specifier|private
specifier|static
specifier|final
name|String
name|MEMBERS_FILE
init|=
literal|"members"
decl_stmt|;
DECL|field|LINE_SEPARATOR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LINE_SEPARATOR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\R"
argument_list|)
decl_stmt|;
DECL|field|groupUuid
specifier|private
specifier|final
name|AccountGroup
operator|.
name|UUID
name|groupUuid
decl_stmt|;
DECL|field|ref
specifier|private
specifier|final
name|String
name|ref
decl_stmt|;
DECL|field|loadedGroup
specifier|private
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|loadedGroup
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|groupUpdate
specifier|private
name|Optional
argument_list|<
name|InternalGroupUpdate
argument_list|>
name|groupUpdate
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|accountNameEmailRetriever
specifier|private
name|Function
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|accountNameEmailRetriever
init|=
name|Account
operator|.
name|Id
operator|::
name|toString
decl_stmt|;
DECL|field|isLoaded
specifier|private
name|boolean
name|isLoaded
init|=
literal|false
decl_stmt|;
DECL|method|GroupConfig (AccountGroup.UUID groupUuid)
specifier|private
name|GroupConfig
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
name|this
operator|.
name|groupUuid
operator|=
name|checkNotNull
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|ref
operator|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
block|}
DECL|method|loadForGroup (Repository repository, AccountGroup.UUID groupUuid)
specifier|public
specifier|static
name|GroupConfig
name|loadForGroup
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|GroupConfig
name|groupConfig
init|=
operator|new
name|GroupConfig
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|load
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|groupConfig
return|;
block|}
DECL|method|getLoadedGroup ()
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|getLoadedGroup
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|loadedGroup
return|;
block|}
DECL|method|setGroupUpdate ( InternalGroupUpdate groupUpdate, Function<Account.Id, String> accountNameEmailRetriever)
specifier|public
name|void
name|setGroupUpdate
parameter_list|(
name|InternalGroupUpdate
name|groupUpdate
parameter_list|,
name|Function
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|accountNameEmailRetriever
parameter_list|)
block|{
name|this
operator|.
name|groupUpdate
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|groupUpdate
argument_list|)
expr_stmt|;
name|this
operator|.
name|accountNameEmailRetriever
operator|=
name|accountNameEmailRetriever
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|RevCommit
name|earliestCommit
init|=
name|rw
operator|.
name|next
argument_list|()
decl_stmt|;
name|Timestamp
name|createdOn
init|=
operator|new
name|Timestamp
argument_list|(
name|earliestCommit
operator|.
name|getCommitTime
argument_list|()
operator|*
literal|1000L
argument_list|)
decl_stmt|;
name|Config
name|config
init|=
name|readConfig
argument_list|(
name|GROUP_CONFIG_FILE
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
init|=
name|readMembers
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
init|=
name|ImmutableSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|loadedGroup
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|createFrom
argument_list|(
name|groupUuid
argument_list|,
name|config
argument_list|,
name|members
argument_list|,
name|subgroups
argument_list|,
name|createdOn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|isLoaded
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|createFrom ( AccountGroup.UUID groupUuid, Config config, ImmutableSet<Account.Id> members, ImmutableSet<AccountGroup.UUID> subgroups, Timestamp createdOn)
specifier|private
specifier|static
name|InternalGroup
name|createFrom
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|Config
name|config
parameter_list|,
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
parameter_list|,
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroups
parameter_list|,
name|Timestamp
name|createdOn
parameter_list|)
block|{
name|InternalGroup
operator|.
name|Builder
name|group
init|=
name|InternalGroup
operator|.
name|builder
argument_list|()
decl_stmt|;
name|group
operator|.
name|setGroupUUID
argument_list|(
name|groupUuid
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|GroupConfigEntry
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|configEntry
lambda|->
name|configEntry
operator|.
name|readFromConfig
argument_list|(
name|group
argument_list|,
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setMembers
argument_list|(
name|members
argument_list|)
expr_stmt|;
name|group
operator|.
name|setSubgroups
argument_list|(
name|subgroups
argument_list|)
expr_stmt|;
name|group
operator|.
name|setCreatedOn
argument_list|(
name|createdOn
argument_list|)
expr_stmt|;
return|return
name|group
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|groupUpdate
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Group was not changed. -> A new commit isn't necessary.
return|return
literal|false
return|;
block|}
name|checkState
argument_list|(
name|loadedGroup
operator|.
name|isPresent
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Cannot update non-existent group %s"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Timestamp
name|createdOn
init|=
name|loadedGroup
operator|.
name|get
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
decl_stmt|;
name|Config
name|config
init|=
name|updateGroupProperties
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
init|=
name|loadedGroup
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getMembers
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|ImmutableSet
operator|::
name|of
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updatedMembers
init|=
name|updateMembers
argument_list|(
name|originalMembers
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|originalSubgroups
init|=
name|loadedGroup
operator|.
name|get
argument_list|()
operator|.
name|getSubgroups
argument_list|()
decl_stmt|;
name|String
name|commitMessage
init|=
name|createCommitMessage
argument_list|(
name|originalMembers
argument_list|,
name|updatedMembers
argument_list|)
decl_stmt|;
name|commit
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|loadedGroup
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|createFrom
argument_list|(
name|groupUuid
argument_list|,
name|config
argument_list|,
name|updatedMembers
operator|.
name|orElse
argument_list|(
name|originalMembers
argument_list|)
argument_list|,
name|originalSubgroups
argument_list|,
name|createdOn
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|checkLoaded ()
specifier|private
name|void
name|checkLoaded
parameter_list|()
block|{
name|checkState
argument_list|(
name|isLoaded
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Group %s not loaded yet"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateGroupProperties ()
specifier|private
name|Config
name|updateGroupProperties
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|Config
name|config
init|=
name|readConfig
argument_list|(
name|GROUP_CONFIG_FILE
argument_list|)
decl_stmt|;
name|groupUpdate
operator|.
name|ifPresent
argument_list|(
name|internalGroupUpdate
lambda|->
name|Arrays
operator|.
name|stream
argument_list|(
name|GroupConfigEntry
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|configEntry
lambda|->
name|configEntry
operator|.
name|updateConfigValue
argument_list|(
name|config
argument_list|,
name|internalGroupUpdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|saveConfig
argument_list|(
name|GROUP_CONFIG_FILE
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|updateMembers (ImmutableSet<Account.Id> originalMembers)
specifier|private
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updateMembers
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updatedMembers
init|=
name|groupUpdate
operator|.
name|map
argument_list|(
name|InternalGroupUpdate
operator|::
name|getMemberModification
argument_list|)
operator|.
name|map
argument_list|(
name|memberModification
lambda|->
name|memberModification
operator|.
name|apply
argument_list|(
name|originalMembers
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ImmutableSet
operator|::
name|copyOf
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedMembers
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|saveMembers
argument_list|(
name|updatedMembers
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|updatedMembers
return|;
block|}
DECL|method|saveMembers (ImmutableSet<Account.Id> members)
specifier|private
name|void
name|saveMembers
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|members
parameter_list|)
throws|throws
name|IOException
block|{
name|saveToFile
argument_list|(
name|MEMBERS_FILE
argument_list|,
name|members
argument_list|,
name|member
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|member
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|saveToFile ( String filePath, ImmutableSet<E> elements, Function<E, String> toStringFunction)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|void
name|saveToFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|,
name|Function
argument_list|<
name|E
argument_list|,
name|String
argument_list|>
name|toStringFunction
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileContent
init|=
name|elements
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|toStringFunction
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|saveUTF8
argument_list|(
name|filePath
argument_list|,
name|fileContent
argument_list|)
expr_stmt|;
block|}
DECL|method|readMembers ()
specifier|private
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|readMembers
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|readFromFile
argument_list|(
name|MEMBERS_FILE
argument_list|,
name|entry
lambda|->
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readFromFile (String filePath, Function<String, E> fromStringFunction)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|ImmutableSet
argument_list|<
name|E
argument_list|>
name|readFromFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|E
argument_list|>
name|fromStringFunction
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|String
name|fileContent
init|=
name|readUTF8
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Splitter
operator|.
name|on
argument_list|(
name|LINE_SEPARATOR_PATTERN
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|fileContent
argument_list|)
decl_stmt|;
return|return
name|Streams
operator|.
name|stream
argument_list|(
name|lines
argument_list|)
operator|.
name|map
argument_list|(
name|fromStringFunction
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid file %s for commit %s"
argument_list|,
name|filePath
argument_list|,
name|revision
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createCommitMessage ( ImmutableSet<Account.Id> originalMembers, Optional<ImmutableSet<Account.Id>> updatedMembers)
specifier|private
name|String
name|createCommitMessage
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
parameter_list|,
name|Optional
argument_list|<
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|>
name|updatedMembers
parameter_list|)
block|{
name|String
name|summaryLine
init|=
literal|"Update group"
decl_stmt|;
name|StringJoiner
name|footerJoiner
init|=
operator|new
name|StringJoiner
argument_list|(
literal|"\n"
argument_list|,
literal|"\n\n"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|footerJoiner
operator|.
name|setEmptyValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|updatedMembers
operator|.
name|ifPresent
argument_list|(
name|newMembers
lambda|->
name|getCommitFootersForMemberModifications
argument_list|(
name|originalMembers
argument_list|,
name|newMembers
argument_list|)
operator|.
name|forEach
argument_list|(
name|footerJoiner
operator|::
name|add
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|footer
init|=
name|footerJoiner
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|summaryLine
operator|+
name|footer
return|;
block|}
DECL|method|getCommitFootersForMemberModifications ( ImmutableSet<Account.Id> oldMembers, ImmutableSet<Account.Id> newMembers)
specifier|private
name|Stream
argument_list|<
name|String
argument_list|>
name|getCommitFootersForMemberModifications
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|oldMembers
parameter_list|,
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|newMembers
parameter_list|)
block|{
name|Stream
argument_list|<
name|String
argument_list|>
name|removedMembers
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|oldMembers
argument_list|,
name|newMembers
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountNameEmailRetriever
argument_list|)
operator|.
name|map
argument_list|(
literal|"Remove: "
operator|::
name|concat
argument_list|)
decl_stmt|;
name|Stream
argument_list|<
name|String
argument_list|>
name|addedMembers
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|newMembers
argument_list|,
name|oldMembers
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountNameEmailRetriever
argument_list|)
operator|.
name|map
argument_list|(
literal|"Add: "
operator|::
name|concat
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|removedMembers
argument_list|,
name|addedMembers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

