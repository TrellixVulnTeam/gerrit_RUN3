begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * In NoteDb the owner of a group is determined by permissions on the group ref. Everyone who can  * update the group ref is owner of the group.  *  *<p>This class updates the permissions for the group owner when a new group owner is set. It also  * allows to read the existing group permissions to determine the current group owner.  *  *<p>This class relies on the group permissions being exclusively managed by Gerrit. Manual  * modifications of the group permissions must not be allowed. This guarantees that each group has  * exactly one set of owner permissions and there is always a single owner group.  */
end_comment

begin_class
DECL|class|GroupOwnerPermissions
specifier|public
class|class
name|GroupOwnerPermissions
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GroupOwnerPermissions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|allUsersRepo
specifier|private
specifier|final
name|Repository
name|allUsersRepo
decl_stmt|;
DECL|field|metaDataUpdateFactory
annotation|@
name|Nullable
specifier|private
specifier|final
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
decl_stmt|;
comment|/**    * @param allUsersName Name of the All-Users repository in which the groups are stored.    * @param allUsersRepo All-Users repository.    * @param metaDataUpdateFactory Factory to create a {@link MetaDataUpdate}, required for updating    *     the group owner. Can be {@code null} if the group owner is read-only.    */
DECL|method|GroupOwnerPermissions ( AllUsersName allUsersName, Repository allUsersRepo, @Nullable MetaDataUpdateFactory metaDataUpdateFactory)
specifier|public
name|GroupOwnerPermissions
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|,
annotation|@
name|Nullable
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
parameter_list|)
block|{
name|this
operator|.
name|allUsersName
operator|=
name|checkNotNull
argument_list|(
name|allUsersName
argument_list|)
expr_stmt|;
name|this
operator|.
name|allUsersRepo
operator|=
name|checkNotNull
argument_list|(
name|allUsersRepo
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaDataUpdateFactory
operator|=
name|metaDataUpdateFactory
expr_stmt|;
block|}
comment|/**    * Determines the owner group from the permissions on the group ref.    *    * @param groupUuid UUID of the group for which the group owner should be read.    * @return UUID of the owner group, {@code null} if the owner permissions are missing or if owner    *     permissions for multiple groups exist.    */
DECL|method|readOwnerGroup (AccountGroup.UUID groupUuid)
specifier|public
name|AccountGroup
operator|.
name|UUID
name|readOwnerGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfig
name|config
init|=
operator|new
name|ProjectConfig
argument_list|(
name|allUsersName
argument_list|)
decl_stmt|;
name|config
operator|.
name|load
argument_list|(
name|allUsersRepo
argument_list|)
expr_stmt|;
name|String
name|ref
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
name|AccessSection
name|accessSection
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessSection
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Permission
name|pushPermission
init|=
name|accessSection
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
decl_stmt|;
if|if
condition|(
name|pushPermission
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|rules
init|=
name|pushPermission
operator|.
name|getRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|rules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|rules
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Group %s has multiple group owner permissions, expected exactly one"
argument_list|,
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rules
argument_list|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
return|;
block|}
comment|/**    * Updating the group owner permissions.    *    *<p>For the new group owner READ/PUSH permissions on the group ref are added, for the old group    * owner the permissions are removed.    *    * @param groupUuid UUID of the group for which the owner permissions should be updated.    * @param oldOwnerGroupReference Group reference for the old owner group, {@code null} if the    *     group is newly created.    * @param newOwnerGroupReference Group reference for the new owner group.    */
DECL|method|updateOwnerPermissions ( AccountGroup.UUID groupUuid, @Nullable GroupReference oldOwnerGroupReference, GroupReference newOwnerGroupReference)
specifier|public
name|void
name|updateOwnerPermissions
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
annotation|@
name|Nullable
name|GroupReference
name|oldOwnerGroupReference
parameter_list|,
name|GroupReference
name|newOwnerGroupReference
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|checkNotNull
argument_list|(
name|metaDataUpdateFactory
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|newOwnerGroupReference
argument_list|)
expr_stmt|;
if|if
condition|(
name|newOwnerGroupReference
operator|.
name|equals
argument_list|(
name|oldOwnerGroupReference
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|ref
init|=
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|ProjectConfig
name|config
init|=
name|ProjectConfig
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOwnerGroupReference
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|permission
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
control|)
block|{
name|config
operator|.
name|remove
argument_list|(
name|config
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|)
argument_list|,
operator|new
name|Permission
argument_list|(
name|permission
argument_list|)
argument_list|,
operator|new
name|PermissionRule
argument_list|(
name|oldOwnerGroupReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|AccessSection
name|accessSection
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|permission
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|Permission
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|PUSH
argument_list|)
control|)
block|{
name|accessSection
operator|.
name|getPermission
argument_list|(
name|permission
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|newOwnerGroupReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

