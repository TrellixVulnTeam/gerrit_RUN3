begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|Groups
operator|.
name|getExistingGroupFromReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NameAlreadyUsedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupById
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupIncludeCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|audit
operator|.
name|AuditService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AnonymousCowardName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|RenameGroupOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * A database accessor for write calls related to groups.  *  *<p>All calls which write group related details to the database (either ReviewDb or NoteDb) are  * gathered here. Other classes should always use this class instead of accessing the database  * directly. There are a few exceptions though: schema classes, wrapper classes, and classes  * executed during init. The latter ones should use {@code GroupsOnInit} instead.  *  *<p>If not explicitly stated, all methods of this class refer to<em>internal</em> groups.  */
end_comment

begin_class
DECL|class|GroupsUpdate
specifier|public
class|class
name|GroupsUpdate
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
comment|/**      * Creates a {@code GroupsUpdate} which uses the identity of the specified user to mark database      * modifications executed by it. For NoteDb, this identity is used as author and committer for      * all related commits.      *      *<p><strong>Note</strong>: Please use this method with care and rather consider to use the      * correct annotation on the provider of a {@code GroupsUpdate} instead.      *      * @param currentUser the user to which modifications should be attributed, or {@code null} if      *     the Gerrit server identity should be used      */
DECL|method|create (@ullable IdentifiedUser currentUser)
name|GroupsUpdate
name|create
parameter_list|(
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|)
function_decl|;
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|groupIncludeCache
specifier|private
specifier|final
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|auditService
specifier|private
specifier|final
name|AuditService
name|auditService
decl_stmt|;
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|anonymousCowardName
specifier|private
specifier|final
name|String
name|anonymousCowardName
decl_stmt|;
DECL|field|renameGroupOpFactory
specifier|private
specifier|final
name|RenameGroupOp
operator|.
name|Factory
name|renameGroupOpFactory
decl_stmt|;
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
DECL|field|currentUser
annotation|@
name|Nullable
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|authorIdent
specifier|private
specifier|final
name|PersonIdent
name|authorIdent
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|writeGroupsToNoteDb
specifier|private
specifier|final
name|boolean
name|writeGroupsToNoteDb
decl_stmt|;
annotation|@
name|Inject
DECL|method|GroupsUpdate ( GitRepositoryManager repoManager, AllUsersName allUsersName, GroupCache groupCache, GroupIncludeCache groupIncludeCache, AuditService auditService, AccountCache accountCache, @AnonymousCowardName String anonymousCowardName, RenameGroupOp.Factory renameGroupOpFactory, @GerritServerId String serverId, @GerritPersonIdent PersonIdent serverIdent, MetaDataUpdate.User metaDataUpdateUserFactory, MetaDataUpdate.Server metaDataUpdateServerFactory, @GerritServerConfig Config config, @Assisted @Nullable IdentifiedUser currentUser)
name|GroupsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|GroupCache
name|groupCache
parameter_list|,
name|GroupIncludeCache
name|groupIncludeCache
parameter_list|,
name|AuditService
name|auditService
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|AnonymousCowardName
name|String
name|anonymousCowardName
parameter_list|,
name|RenameGroupOp
operator|.
name|Factory
name|renameGroupOpFactory
parameter_list|,
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|MetaDataUpdate
operator|.
name|User
name|metaDataUpdateUserFactory
parameter_list|,
name|MetaDataUpdate
operator|.
name|Server
name|metaDataUpdateServerFactory
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|groupIncludeCache
operator|=
name|groupIncludeCache
expr_stmt|;
name|this
operator|.
name|auditService
operator|=
name|auditService
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|anonymousCowardName
operator|=
name|anonymousCowardName
expr_stmt|;
name|this
operator|.
name|renameGroupOpFactory
operator|=
name|renameGroupOpFactory
expr_stmt|;
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|metaDataUpdateFactory
operator|=
name|getMetaDataUpdateFactory
argument_list|(
name|metaDataUpdateUserFactory
argument_list|,
name|metaDataUpdateServerFactory
argument_list|,
name|currentUser
argument_list|,
name|serverIdent
argument_list|,
name|serverId
argument_list|,
name|anonymousCowardName
argument_list|)
expr_stmt|;
name|authorIdent
operator|=
name|getAuthorIdent
argument_list|(
name|serverIdent
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
comment|// TODO(aliceks): Remove this flag when all other necessary TODOs for writing groups to NoteDb
comment|// have been addressed.
comment|// Don't flip this flag in a production setting! We only added it to spread the implementation
comment|// of groups in NoteDb among several changes which are gradually merged.
name|writeGroupsToNoteDb
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"writeGroupsToNoteDb"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// TODO(aliceks): Introduce a common class for MetaDataUpdate.User and MetaDataUpdate.Server which
comment|// doesn't require this ugly code. In addition, allow to pass in the repository and to use another
comment|// author ident.
DECL|method|getMetaDataUpdateFactory ( MetaDataUpdate.User metaDataUpdateUserFactory, MetaDataUpdate.Server metaDataUpdateServerFactory, @Nullable IdentifiedUser currentUser, PersonIdent serverIdent, String serverId, String anonymousCowardName)
specifier|private
specifier|static
name|MetaDataUpdateFactory
name|getMetaDataUpdateFactory
parameter_list|(
name|MetaDataUpdate
operator|.
name|User
name|metaDataUpdateUserFactory
parameter_list|,
name|MetaDataUpdate
operator|.
name|Server
name|metaDataUpdateServerFactory
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|,
name|String
name|serverId
parameter_list|,
name|String
name|anonymousCowardName
parameter_list|)
block|{
return|return
name|currentUser
operator|!=
literal|null
condition|?
name|projectName
lambda|->
block|{
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateUserFactory
operator|.
name|create
argument_list|(
name|projectName
argument_list|,
name|currentUser
argument_list|)
decl_stmt|;
name|PersonIdent
name|authorIdent
init|=
name|getAuditLogAuthorIdent
argument_list|(
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|serverIdent
argument_list|,
name|serverId
argument_list|,
name|anonymousCowardName
argument_list|)
decl_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
return|return
name|metaDataUpdate
return|;
block|}
else|:
name|metaDataUpdateServerFactory
operator|::
name|create
return|;
block|}
DECL|method|getAuditLogAuthorIdent ( Account author, PersonIdent serverIdent, String serverId, String anonymousCowardName)
specifier|private
specifier|static
name|PersonIdent
name|getAuditLogAuthorIdent
parameter_list|(
name|Account
name|author
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|,
name|String
name|serverId
parameter_list|,
name|String
name|anonymousCowardName
parameter_list|)
block|{
return|return
operator|new
name|PersonIdent
argument_list|(
name|author
operator|.
name|getName
argument_list|(
name|anonymousCowardName
argument_list|)
argument_list|,
name|getEmailForAuditLog
argument_list|(
name|author
operator|.
name|getId
argument_list|()
argument_list|,
name|serverId
argument_list|)
argument_list|,
name|serverIdent
operator|.
name|getWhen
argument_list|()
argument_list|,
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAuthorIdent ( PersonIdent serverIdent, @Nullable IdentifiedUser currentUser)
specifier|private
specifier|static
name|PersonIdent
name|getAuthorIdent
parameter_list|(
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|)
block|{
return|return
name|currentUser
operator|!=
literal|null
condition|?
name|createPersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|currentUser
argument_list|)
else|:
name|serverIdent
return|;
block|}
DECL|method|createPersonIdent (PersonIdent ident, IdentifiedUser user)
specifier|private
specifier|static
name|PersonIdent
name|createPersonIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|ident
operator|.
name|getWhen
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Adds/Creates the specified group for the specified members (accounts).    *    * @param db the {@code ReviewDb} instance to update    * @param group the group to add    * @param memberIds the IDs of the accounts which should be members of the created group    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the cache entry of one of the new members couldn't be invalidated, or    *     the new group couldn't be indexed    * @return the created group    */
DECL|method|addGroup (ReviewDb db, AccountGroup group, Set<Account.Id> memberIds)
specifier|public
name|InternalGroup
name|addGroup
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
name|group
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|memberIds
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|addNewGroup
argument_list|(
name|db
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|addNewGroupMembers
argument_list|(
name|db
argument_list|,
name|group
argument_list|,
name|memberIds
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|onCreateGroup
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|InternalGroup
operator|.
name|create
argument_list|(
name|group
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|memberIds
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Adds the specified group.    *    *<p><strong>Note</strong>: This method doesn't update the index! It just adds the group to the    * database. Use this method with care.    *    * @param db the {@code ReviewDb} instance to update    * @param group the group to add    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    */
DECL|method|addNewGroup (ReviewDb db, AccountGroup group)
specifier|public
specifier|static
name|void
name|addNewGroup
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
name|group
parameter_list|)
throws|throws
name|OrmException
block|{
name|AccountGroupName
name|gn
init|=
operator|new
name|AccountGroupName
argument_list|(
name|group
argument_list|)
decl_stmt|;
comment|// first insert the group name to validate that the group name hasn't
comment|// already been used to create another group
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|gn
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the specified group.    *    * @param db the {@code ReviewDb} instance to update    * @param groupUuid the UUID of the group to update    * @param groupUpdate an {@code InternalGroupUpdate} which indicates the desired updates on the    *     group    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if indexing fails, or an error occurs while reading/writing from/to NoteDb    * @throws NoSuchGroupException if the specified group doesn't exist    */
DECL|method|updateGroup (ReviewDb db, AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|public
name|void
name|updateGroup
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchGroupException
throws|,
name|ConfigInvalidException
block|{
name|UpdateResult
name|result
init|=
name|updateGroupInDb
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|updateCachesOnGroupUpdate
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|updateGroupInDb ( ReviewDb db, AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|public
name|UpdateResult
name|updateGroupInDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchGroupException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|AccountGroup
name|group
init|=
name|getExistingGroupFromReviewDb
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|UpdateResult
name|reviewDbUpdateResult
init|=
name|updateGroupInReviewDb
argument_list|(
name|db
argument_list|,
name|group
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writeGroupsToNoteDb
condition|)
block|{
return|return
name|reviewDbUpdateResult
return|;
block|}
name|Optional
argument_list|<
name|UpdateResult
argument_list|>
name|noteDbUpdateResult
init|=
name|updateGroupInNoteDb
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
return|return
name|noteDbUpdateResult
operator|.
name|orElse
argument_list|(
name|reviewDbUpdateResult
argument_list|)
return|;
block|}
DECL|method|applyUpdate (AccountGroup group, InternalGroupUpdate groupUpdate)
specifier|private
specifier|static
name|void
name|applyUpdate
parameter_list|(
name|AccountGroup
name|group
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
block|{
name|groupUpdate
operator|.
name|getDescription
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|d
lambda|->
name|group
operator|.
name|setDescription
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groupUpdate
operator|.
name|getOwnerGroupUUID
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|group
operator|::
name|setOwnerGroupUUID
argument_list|)
expr_stmt|;
name|groupUpdate
operator|.
name|getVisibleToAll
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|group
operator|::
name|setVisibleToAll
argument_list|)
expr_stmt|;
block|}
DECL|method|updateGroupInReviewDb ( ReviewDb db, AccountGroup group, InternalGroupUpdate groupUpdate)
specifier|private
name|UpdateResult
name|updateGroupInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
name|group
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmException
block|{
name|applyUpdate
argument_list|(
name|group
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|update
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|modifiedMembers
init|=
name|updateMembersInReviewDb
argument_list|(
name|db
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|modifiedSubgroups
init|=
name|updateSubgroupsInReviewDb
argument_list|(
name|db
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|UpdateResult
operator|.
name|Builder
name|resultBuilder
init|=
name|UpdateResult
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUuid
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|.
name|setGroupId
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|group
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|setModifiedMembers
argument_list|(
name|modifiedMembers
argument_list|)
operator|.
name|setModifiedSubgroups
argument_list|(
name|modifiedSubgroups
argument_list|)
decl_stmt|;
return|return
name|resultBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Renames the specified group.    *    * @param db the {@code ReviewDb} instance to update    * @param groupUuid the UUID of the group to rename    * @param newName the new name of the group    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the cache entry for the group couldn't be invalidated    * @throws NoSuchGroupException if the specified group doesn't exist    * @throws NameAlreadyUsedException if another group has the name {@code newName}    */
DECL|method|renameGroup (ReviewDb db, AccountGroup.UUID groupUuid, AccountGroup.NameKey newName)
specifier|public
name|void
name|renameGroup
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|AccountGroup
operator|.
name|NameKey
name|newName
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|NameAlreadyUsedException
throws|,
name|NoSuchGroupException
block|{
name|AccountGroup
name|group
init|=
name|getExistingGroupFromReviewDb
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|oldName
init|=
name|group
operator|.
name|getNameKey
argument_list|()
decl_stmt|;
try|try
block|{
name|AccountGroupName
name|id
init|=
operator|new
name|AccountGroupName
argument_list|(
name|newName
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|insert
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|AccountGroupName
name|other
init|=
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|get
argument_list|(
name|newName
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
comment|// If we are using this identity, don't report the exception.
if|if
condition|(
name|other
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Otherwise, someone else has this identity.
throw|throw
operator|new
name|NameAlreadyUsedException
argument_list|(
literal|"group with name "
operator|+
name|newName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
name|group
operator|.
name|setNameKey
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|update
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroupNames
argument_list|()
operator|.
name|deleteKeys
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|oldName
argument_list|)
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|evictAfterRename
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|evict
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|group
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|renameGroupOpFactory
operator|.
name|create
argument_list|(
name|authorIdent
argument_list|,
name|groupUuid
argument_list|,
name|oldName
operator|.
name|get
argument_list|()
argument_list|,
name|newName
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
block|}
DECL|method|updateMembersInReviewDb ( ReviewDb db, AccountGroup.Id groupId, InternalGroupUpdate groupUpdate)
specifier|private
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|updateMembersInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmException
block|{
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
init|=
name|Groups
operator|.
name|getMembersFromReviewDb
argument_list|(
name|db
argument_list|,
name|groupId
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|updatedMembers
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|groupUpdate
operator|.
name|getMemberModification
argument_list|()
operator|.
name|apply
argument_list|(
name|originalMembers
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|addedMembers
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|updatedMembers
argument_list|,
name|originalMembers
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addedMembers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addGroupMembersInReviewDb
argument_list|(
name|db
argument_list|,
name|groupId
argument_list|,
name|addedMembers
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|removedMembers
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|originalMembers
argument_list|,
name|updatedMembers
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removedMembers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeGroupMembersInReviewDb
argument_list|(
name|db
argument_list|,
name|groupId
argument_list|,
name|removedMembers
argument_list|)
expr_stmt|;
block|}
return|return
name|Sets
operator|.
name|union
argument_list|(
name|addedMembers
argument_list|,
name|removedMembers
argument_list|)
operator|.
name|immutableCopy
argument_list|()
return|;
block|}
DECL|method|addGroupMembersInReviewDb ( ReviewDb db, AccountGroup.Id groupId, Set<Account.Id> newMemberIds)
specifier|private
name|void
name|addGroupMembersInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|newMemberIds
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|AccountGroupMember
argument_list|>
name|newMembers
init|=
name|newMemberIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountId
lambda|->
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroupMember
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|auditService
operator|.
name|dispatchAddAccountsToGroup
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|newMembers
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|insert
argument_list|(
name|newMembers
argument_list|)
expr_stmt|;
block|}
DECL|method|removeGroupMembersInReviewDb ( ReviewDb db, AccountGroup.Id groupId, Set<Account.Id> accountIds)
specifier|private
name|void
name|removeGroupMembersInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|AccountGroupMember
argument_list|>
name|membersToRemove
init|=
name|accountIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountId
lambda|->
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|groupId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroupMember
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|auditService
operator|.
name|dispatchDeleteAccountsFromGroup
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|membersToRemove
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|delete
argument_list|(
name|membersToRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|updateSubgroupsInReviewDb ( ReviewDb db, AccountGroup.Id groupId, InternalGroupUpdate groupUpdate)
specifier|private
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|updateSubgroupsInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmException
block|{
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|originalSubgroups
init|=
name|Groups
operator|.
name|getSubgroupsFromReviewDb
argument_list|(
name|db
argument_list|,
name|groupId
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|updatedSubgroups
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|groupUpdate
operator|.
name|getSubgroupModification
argument_list|()
operator|.
name|apply
argument_list|(
name|originalSubgroups
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|addedSubgroups
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|updatedSubgroups
argument_list|,
name|originalSubgroups
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addedSubgroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addSubgroupsInReviewDb
argument_list|(
name|db
argument_list|,
name|groupId
argument_list|,
name|addedSubgroups
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|removedSubgroups
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|originalSubgroups
argument_list|,
name|updatedSubgroups
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removedSubgroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeSubgroupsInReviewDb
argument_list|(
name|db
argument_list|,
name|groupId
argument_list|,
name|removedSubgroups
argument_list|)
expr_stmt|;
block|}
return|return
name|Sets
operator|.
name|union
argument_list|(
name|addedSubgroups
argument_list|,
name|removedSubgroups
argument_list|)
operator|.
name|immutableCopy
argument_list|()
return|;
block|}
DECL|method|addSubgroupsInReviewDb ( ReviewDb db, AccountGroup.Id parentGroupId, Set<AccountGroup.UUID> subgroupUuids)
specifier|private
name|void
name|addSubgroupsInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|parentGroupId
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroupUuids
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|AccountGroupById
argument_list|>
name|newSubgroups
init|=
name|subgroupUuids
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|subgroupUuid
lambda|->
operator|new
name|AccountGroupById
operator|.
name|Key
argument_list|(
name|parentGroupId
argument_list|,
name|subgroupUuid
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroupById
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|auditService
operator|.
name|dispatchAddGroupsToGroup
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|newSubgroups
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupById
argument_list|()
operator|.
name|insert
argument_list|(
name|newSubgroups
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSubgroupsInReviewDb ( ReviewDb db, AccountGroup.Id parentGroupId, Set<AccountGroup.UUID> subgroupUuids)
specifier|private
name|void
name|removeSubgroupsInReviewDb
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|Id
name|parentGroupId
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|subgroupUuids
parameter_list|)
throws|throws
name|OrmException
block|{
name|Set
argument_list|<
name|AccountGroupById
argument_list|>
name|subgroupsToRemove
init|=
name|subgroupUuids
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|subgroupUuid
lambda|->
operator|new
name|AccountGroupById
operator|.
name|Key
argument_list|(
name|parentGroupId
argument_list|,
name|subgroupUuid
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroupById
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|auditService
operator|.
name|dispatchDeleteGroupsFromGroup
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|subgroupsToRemove
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupById
argument_list|()
operator|.
name|delete
argument_list|(
name|subgroupsToRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|updateGroupInNoteDb ( AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|private
name|Optional
argument_list|<
name|UpdateResult
argument_list|>
name|updateGroupInNoteDb
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|GroupConfig
name|groupConfig
init|=
name|loadFor
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// TODO(aliceks): Throw a NoSuchGroupException here when all groups are stored in NoteDb.
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|updateGroupInNoteDb
argument_list|(
name|groupConfig
argument_list|,
name|groupUpdate
argument_list|)
return|;
block|}
DECL|method|loadFor (AccountGroup.UUID groupUuid)
specifier|private
name|GroupConfig
name|loadFor
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|repository
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repository
argument_list|,
name|groupUuid
argument_list|)
return|;
block|}
block|}
DECL|method|updateGroupInNoteDb ( GroupConfig groupConfig, InternalGroupUpdate groupUpdate)
specifier|private
name|Optional
argument_list|<
name|UpdateResult
argument_list|>
name|updateGroupInNoteDb
parameter_list|(
name|GroupConfig
name|groupConfig
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|originalGroup
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|this
operator|::
name|getAccountNameEmail
argument_list|,
name|this
operator|::
name|getGroupName
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|groupConfig
argument_list|)
expr_stmt|;
name|InternalGroup
name|updatedGroup
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"Updated group wasn't automatically loaded"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|modifiedMembers
init|=
name|getModifiedMembers
argument_list|(
name|originalGroup
argument_list|,
name|updatedGroup
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|modifiedSubgroups
init|=
name|getModifiedSubgroups
argument_list|(
name|originalGroup
argument_list|,
name|updatedGroup
argument_list|)
decl_stmt|;
name|UpdateResult
operator|.
name|Builder
name|resultBuilder
init|=
name|UpdateResult
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUuid
argument_list|(
name|updatedGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|.
name|setGroupId
argument_list|(
name|updatedGroup
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|updatedGroup
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|setModifiedMembers
argument_list|(
name|modifiedMembers
argument_list|)
operator|.
name|setModifiedSubgroups
argument_list|(
name|modifiedSubgroups
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|resultBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAccountNameEmail (Account.Id accountId)
specifier|private
name|String
name|getAccountNameEmail
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|AccountState
name|accountState
init|=
name|accountCache
operator|.
name|getOrNull
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|String
name|accountName
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|accountState
argument_list|)
operator|.
name|map
argument_list|(
name|AccountState
operator|::
name|getAccount
argument_list|)
operator|.
name|map
argument_list|(
name|account
lambda|->
name|account
operator|.
name|getName
argument_list|(
name|anonymousCowardName
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|anonymousCowardName
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|getEmailForAuditLog
argument_list|(
name|accountId
argument_list|,
name|serverId
argument_list|)
decl_stmt|;
name|StringBuilder
name|formattedResult
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|formattedResult
argument_list|,
name|accountName
argument_list|)
expr_stmt|;
name|formattedResult
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|PersonIdent
operator|.
name|appendSanitized
argument_list|(
name|formattedResult
argument_list|,
name|email
argument_list|)
expr_stmt|;
name|formattedResult
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|formattedResult
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getEmailForAuditLog (Account.Id accountId, String serverId)
specifier|private
specifier|static
name|String
name|getEmailForAuditLog
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|serverId
parameter_list|)
block|{
return|return
name|accountId
operator|.
name|get
argument_list|()
operator|+
literal|"@"
operator|+
name|serverId
return|;
block|}
DECL|method|getGroupName (AccountGroup.UUID groupUuid)
specifier|private
name|String
name|getGroupName
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
return|return
name|groupCache
operator|.
name|get
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getName
argument_list|)
operator|.
name|map
argument_list|(
name|name
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"%s<%s>"
argument_list|,
name|name
argument_list|,
name|groupUuid
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|commit (GroupConfig groupConfig)
specifier|private
name|void
name|commit
parameter_list|(
name|GroupConfig
name|groupConfig
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getModifiedMembers ( Optional<InternalGroup> originalGroup, InternalGroup updatedGroup)
specifier|private
specifier|static
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getModifiedMembers
parameter_list|(
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|originalGroup
parameter_list|,
name|InternalGroup
name|updatedGroup
parameter_list|)
block|{
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|originalMembers
init|=
name|originalGroup
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getMembers
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|ImmutableSet
operator|::
name|of
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|originalMembers
argument_list|,
name|updatedGroup
operator|.
name|getMembers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getModifiedSubgroups ( Optional<InternalGroup> originalGroup, InternalGroup updatedGroup)
specifier|private
specifier|static
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getModifiedSubgroups
parameter_list|(
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|originalGroup
parameter_list|,
name|InternalGroup
name|updatedGroup
parameter_list|)
block|{
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|originalSubgroups
init|=
name|originalGroup
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getSubgroups
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|ImmutableSet
operator|::
name|of
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|originalSubgroups
argument_list|,
name|updatedGroup
operator|.
name|getSubgroups
argument_list|()
argument_list|)
return|;
block|}
DECL|method|updateCachesOnGroupUpdate (UpdateResult result)
specifier|private
name|void
name|updateCachesOnGroupUpdate
parameter_list|(
name|UpdateResult
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|groupCache
operator|.
name|evict
argument_list|(
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|modifiedMember
range|:
name|result
operator|.
name|getModifiedMembers
argument_list|()
control|)
block|{
name|groupIncludeCache
operator|.
name|evictGroupsWithMember
argument_list|(
name|modifiedMember
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|modifiedSubgroup
range|:
name|result
operator|.
name|getModifiedSubgroups
argument_list|()
control|)
block|{
name|groupIncludeCache
operator|.
name|evictParentGroupsOf
argument_list|(
name|modifiedSubgroup
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds an account as member to a group. The account is only added as a new member if it isn't    * already a member of the group.    *    *<p><strong>Note</strong>: This method doesn't check whether the account exists!    *    * @param db the {@code ReviewDb} instance to update    * @param groupUuid the UUID of the group    * @param accountId the ID of the account to add    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the cache entry of the new member couldn't be invalidated    * @throws NoSuchGroupException if the specified group doesn't exist    */
DECL|method|addGroupMember (ReviewDb db, AccountGroup.UUID groupUuid, Account.Id accountId)
specifier|public
name|void
name|addGroupMember
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchGroupException
throws|,
name|ConfigInvalidException
block|{
name|addGroupMembers
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds several accounts as members to a group. Only accounts which currently aren't members of    * the group are added.    *    *<p><strong>Note</strong>: This method doesn't check whether the accounts exist!    *    * @param db the {@code ReviewDb} instance to update    * @param groupUuid the UUID of the group    * @param accountIds a set of IDs of accounts to add    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the group or one of the new members couldn't be indexed    * @throws NoSuchGroupException if the specified group doesn't exist    */
DECL|method|addGroupMembers (ReviewDb db, AccountGroup.UUID groupUuid, Set<Account.Id> accountIds)
specifier|public
name|void
name|addGroupMembers
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchGroupException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|memberIds
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|memberIds
argument_list|,
name|accountIds
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|addNewGroupMembers (ReviewDb db, AccountGroup group, Set<Account.Id> newMemberIds)
specifier|private
name|void
name|addNewGroupMembers
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
name|group
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|newMemberIds
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|AccountGroupMember
argument_list|>
name|newMembers
init|=
name|newMemberIds
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|accountId
lambda|->
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|accountId
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroupMember
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|auditService
operator|.
name|dispatchAddAccountsToGroup
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|newMembers
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|insert
argument_list|(
name|newMembers
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|evict
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|group
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AccountGroupMember
name|newMember
range|:
name|newMembers
control|)
block|{
name|groupIncludeCache
operator|.
name|evictGroupsWithMember
argument_list|(
name|newMember
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removes several members (accounts) from a group. Only accounts which currently are members of    * the group are removed.    *    * @param db the {@code ReviewDb} instance to update    * @param groupUuid the UUID of the group    * @param accountIds a set of IDs of accounts to remove    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the group or one of the removed members couldn't be indexed    * @throws NoSuchGroupException if the specified group doesn't exist    */
DECL|method|removeGroupMembers ( ReviewDb db, AccountGroup.UUID groupUuid, Set<Account.Id> accountIds)
specifier|public
name|void
name|removeGroupMembers
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
throws|,
name|NoSuchGroupException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setMemberModification
argument_list|(
name|memberIds
lambda|->
name|Sets
operator|.
name|difference
argument_list|(
name|memberIds
argument_list|,
name|accountIds
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|db
argument_list|,
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds several groups as subgroups to a group. Only groups which currently aren't subgroups of    * the group are added.    *    *<p>The parent group must be an internal group whereas the subgroups can either be internal or    * external groups.    *    *<p><strong>Note</strong>: This method doesn't check whether the subgroups exist!    *    * @param db the {@code ReviewDb} instance to update    * @param parentGroupUuid the UUID of the parent group    * @param newSubgroupUuids a set of IDs of the groups to add as subgroups    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the parent group couldn't be indexed    * @throws NoSuchGroupException if the specified parent group doesn't exist    */
DECL|method|addSubgroups ( ReviewDb db, AccountGroup.UUID parentGroupUuid, Set<AccountGroup.UUID> newSubgroupUuids)
specifier|public
name|void
name|addSubgroups
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|parentGroupUuid
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|newSubgroupUuids
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchGroupException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroupUuids
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|subgroupUuids
argument_list|,
name|newSubgroupUuids
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|db
argument_list|,
name|parentGroupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes several subgroups from a parent group. Only groups which currently are subgroups of the    * group are removed.    *    *<p>The parent group must be an internal group whereas the subgroups can either be internal or    * external groups.    *    * @param db the {@code ReviewDb} instance to update    * @param parentGroupUuid the UUID of the parent group    * @param removedSubgroupUuids a set of IDs of the subgroups to remove from the parent group    * @throws OrmException if an error occurs while reading/writing from/to ReviewDb    * @throws IOException if the parent group couldn't be indexed    * @throws NoSuchGroupException if the specified parent group doesn't exist    */
DECL|method|removeSubgroups ( ReviewDb db, AccountGroup.UUID parentGroupUuid, Set<AccountGroup.UUID> removedSubgroupUuids)
specifier|public
name|void
name|removeSubgroups
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|parentGroupUuid
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|removedSubgroupUuids
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchGroupException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroupUpdate
name|groupUpdate
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setSubgroupModification
argument_list|(
name|subgroupUuids
lambda|->
name|Sets
operator|.
name|difference
argument_list|(
name|subgroupUuids
argument_list|,
name|removedSubgroupUuids
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|updateGroup
argument_list|(
name|db
argument_list|,
name|parentGroupUuid
argument_list|,
name|groupUpdate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|MetaDataUpdateFactory
specifier|private
interface|interface
name|MetaDataUpdateFactory
block|{
DECL|method|create (Project.NameKey projectName)
name|MetaDataUpdate
name|create
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|UpdateResult
specifier|abstract
specifier|static
class|class
name|UpdateResult
block|{
DECL|method|getGroupUuid ()
specifier|abstract
name|AccountGroup
operator|.
name|UUID
name|getGroupUuid
parameter_list|()
function_decl|;
DECL|method|getGroupId ()
specifier|abstract
name|AccountGroup
operator|.
name|Id
name|getGroupId
parameter_list|()
function_decl|;
DECL|method|getGroupName ()
specifier|abstract
name|AccountGroup
operator|.
name|NameKey
name|getGroupName
parameter_list|()
function_decl|;
DECL|method|getModifiedMembers ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getModifiedMembers
parameter_list|()
function_decl|;
DECL|method|getModifiedSubgroups ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getModifiedSubgroups
parameter_list|()
function_decl|;
DECL|method|builder ()
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|AutoValue_GroupsUpdate_UpdateResult
operator|.
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|AutoValue
operator|.
name|Builder
DECL|class|Builder
specifier|abstract
specifier|static
class|class
name|Builder
block|{
DECL|method|setGroupUuid (AccountGroup.UUID groupUuid)
specifier|abstract
name|Builder
name|setGroupUuid
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
function_decl|;
DECL|method|setGroupId (AccountGroup.Id groupId)
specifier|abstract
name|Builder
name|setGroupId
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
function_decl|;
DECL|method|setGroupName (AccountGroup.NameKey name)
specifier|abstract
name|Builder
name|setGroupName
parameter_list|(
name|AccountGroup
operator|.
name|NameKey
name|name
parameter_list|)
function_decl|;
DECL|method|setModifiedMembers (Set<Account.Id> modifiedMembers)
specifier|abstract
name|Builder
name|setModifiedMembers
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|modifiedMembers
parameter_list|)
function_decl|;
DECL|method|setModifiedSubgroups (Set<AccountGroup.UUID> modifiedSubgroups)
specifier|abstract
name|Builder
name|setModifiedSubgroups
parameter_list|(
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|modifiedSubgroups
parameter_list|)
function_decl|;
DECL|method|build ()
specifier|abstract
name|UpdateResult
name|build
parameter_list|()
function_decl|;
block|}
block|}
block|}
end_class

end_unit

