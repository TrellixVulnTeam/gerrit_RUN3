begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchGroupException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupIncludeCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|GroupAuditService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RefUpdateUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * A database accessor for write calls related to groups.  *  *<p>All calls which write group related details to the database are gathered here. Other classes  * should always use this class instead of accessing the database directly. There are a few  * exceptions though: schema classes, wrapper classes, and classes executed during init. The latter  * ones should use {@code GroupsOnInit} instead.  *  *<p>If not explicitly stated, all methods of this class refer to<em>internal</em> groups.  */
end_comment

begin_class
DECL|class|GroupsUpdate
specifier|public
class|class
name|GroupsUpdate
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
comment|/**      * Creates a {@code GroupsUpdate} which uses the identity of the specified user to mark database      * modifications executed by it. For NoteDb, this identity is used as author and committer for      * all related commits.      *      *<p><strong>Note</strong>: Please use this method with care and rather consider to use the      * correct annotation on the provider of a {@code GroupsUpdate} instead.      *      * @param currentUser the user to which modifications should be attributed, or {@code null} if      *     the Gerrit server identity should be used      */
DECL|method|create (@ullable IdentifiedUser currentUser)
name|GroupsUpdate
name|create
parameter_list|(
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|)
function_decl|;
block|}
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|groupCache
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|groupIncludeCache
specifier|private
specifier|final
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|Provider
argument_list|<
name|GroupIndexer
argument_list|>
name|indexer
decl_stmt|;
DECL|field|groupAuditService
specifier|private
specifier|final
name|GroupAuditService
name|groupAuditService
decl_stmt|;
DECL|field|renameGroupOpFactory
specifier|private
specifier|final
name|RenameGroupOp
operator|.
name|Factory
name|renameGroupOpFactory
decl_stmt|;
DECL|field|currentUser
annotation|@
name|Nullable
specifier|private
specifier|final
name|IdentifiedUser
name|currentUser
decl_stmt|;
DECL|field|auditLogFormatter
specifier|private
specifier|final
name|AuditLogFormatter
name|auditLogFormatter
decl_stmt|;
DECL|field|authorIdent
specifier|private
specifier|final
name|PersonIdent
name|authorIdent
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|MetaDataUpdateFactory
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
annotation|@
name|Inject
DECL|method|GroupsUpdate ( GitRepositoryManager repoManager, AllUsersName allUsersName, GroupBackend groupBackend, GroupCache groupCache, GroupIncludeCache groupIncludeCache, Provider<GroupIndexer> indexer, GroupAuditService auditService, AccountCache accountCache, RenameGroupOp.Factory renameGroupOpFactory, @GerritServerId String serverId, @GerritPersonIdent PersonIdent serverIdent, MetaDataUpdate.InternalFactory metaDataUpdateInternalFactory, GitReferenceUpdated gitRefUpdated, RetryHelper retryHelper, @Assisted @Nullable IdentifiedUser currentUser)
name|GroupsUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|GroupBackend
name|groupBackend
parameter_list|,
name|GroupCache
name|groupCache
parameter_list|,
name|GroupIncludeCache
name|groupIncludeCache
parameter_list|,
name|Provider
argument_list|<
name|GroupIndexer
argument_list|>
name|indexer
parameter_list|,
name|GroupAuditService
name|auditService
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|RenameGroupOp
operator|.
name|Factory
name|renameGroupOpFactory
parameter_list|,
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|MetaDataUpdate
operator|.
name|InternalFactory
name|metaDataUpdateInternalFactory
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
annotation|@
name|Assisted
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|groupIncludeCache
operator|=
name|groupIncludeCache
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|groupAuditService
operator|=
name|auditService
expr_stmt|;
name|this
operator|.
name|renameGroupOpFactory
operator|=
name|renameGroupOpFactory
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|auditLogFormatter
operator|=
name|AuditLogFormatter
operator|.
name|createBackedBy
argument_list|(
name|accountCache
argument_list|,
name|groupBackend
argument_list|,
name|serverId
argument_list|)
expr_stmt|;
name|metaDataUpdateFactory
operator|=
name|getMetaDataUpdateFactory
argument_list|(
name|metaDataUpdateInternalFactory
argument_list|,
name|currentUser
argument_list|,
name|serverIdent
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|authorIdent
operator|=
name|getAuthorIdent
argument_list|(
name|serverIdent
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetaDataUpdateFactory ( MetaDataUpdate.InternalFactory metaDataUpdateInternalFactory, @Nullable IdentifiedUser currentUser, PersonIdent serverIdent, AuditLogFormatter auditLogFormatter)
specifier|private
specifier|static
name|MetaDataUpdateFactory
name|getMetaDataUpdateFactory
parameter_list|(
name|MetaDataUpdate
operator|.
name|InternalFactory
name|metaDataUpdateInternalFactory
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|,
name|PersonIdent
name|serverIdent
parameter_list|,
name|AuditLogFormatter
name|auditLogFormatter
parameter_list|)
block|{
return|return
parameter_list|(
name|projectName
parameter_list|,
name|repository
parameter_list|,
name|batchRefUpdate
parameter_list|)
lambda|->
block|{
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateInternalFactory
operator|.
name|create
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|batchRefUpdate
argument_list|)
decl_stmt|;
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|serverIdent
argument_list|)
expr_stmt|;
name|PersonIdent
name|authorIdent
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|metaDataUpdate
operator|.
name|setAuthor
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
name|authorIdent
operator|=
name|auditLogFormatter
operator|.
name|getParsableAuthorIdent
argument_list|(
name|currentUser
operator|.
name|getAccount
argument_list|()
argument_list|,
name|serverIdent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorIdent
operator|=
name|serverIdent
expr_stmt|;
block|}
name|metaDataUpdate
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|authorIdent
argument_list|)
expr_stmt|;
return|return
name|metaDataUpdate
return|;
block|}
return|;
block|}
DECL|method|getAuthorIdent ( PersonIdent serverIdent, @Nullable IdentifiedUser currentUser)
specifier|private
specifier|static
name|PersonIdent
name|getAuthorIdent
parameter_list|(
name|PersonIdent
name|serverIdent
parameter_list|,
annotation|@
name|Nullable
name|IdentifiedUser
name|currentUser
parameter_list|)
block|{
return|return
name|currentUser
operator|!=
literal|null
condition|?
name|createPersonIdent
argument_list|(
name|serverIdent
argument_list|,
name|currentUser
argument_list|)
else|:
name|serverIdent
return|;
block|}
DECL|method|createPersonIdent (PersonIdent ident, IdentifiedUser user)
specifier|private
specifier|static
name|PersonIdent
name|createPersonIdent
parameter_list|(
name|PersonIdent
name|ident
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|ident
operator|.
name|getWhen
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates the specified group for the specified members (accounts).    *    * @param groupCreation an {@code InternalGroupCreation} which specifies all mandatory properties    *     of the group    * @param groupUpdate an {@code InternalGroupUpdate} which specifies optional properties of the    *     group. If this {@code InternalGroupUpdate} updates a property which was already specified    *     by the {@code InternalGroupCreation}, the value of this {@code InternalGroupUpdate} wins.    * @throws OrmDuplicateKeyException if a group with the chosen name already exists    * @throws IOException if indexing fails, or an error occurs while reading/writing from/to NoteDb    * @return the created {@code InternalGroup}    */
DECL|method|createGroup ( InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|public
name|InternalGroup
name|createGroup
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmDuplicateKeyException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|InternalGroup
name|createdGroup
init|=
name|createGroupInNoteDbWithRetry
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|evictCachesOnGroupCreation
argument_list|(
name|createdGroup
argument_list|)
expr_stmt|;
name|dispatchAuditEventsOnGroupCreation
argument_list|(
name|createdGroup
argument_list|)
expr_stmt|;
return|return
name|createdGroup
return|;
block|}
comment|/**    * Updates the specified group.    *    * @param groupUuid the UUID of the group to update    * @param groupUpdate an {@code InternalGroupUpdate} which indicates the desired updates on the    *     group    * @throws OrmDuplicateKeyException if the new name of the group is used by another group    * @throws IOException if indexing fails, or an error occurs while reading/writing from/to NoteDb    * @throws NoSuchGroupException if the specified group doesn't exist    */
DECL|method|updateGroup (AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|public
name|void
name|updateGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|OrmDuplicateKeyException
throws|,
name|IOException
throws|,
name|NoSuchGroupException
throws|,
name|ConfigInvalidException
block|{
name|Optional
argument_list|<
name|Timestamp
argument_list|>
name|updatedOn
init|=
name|groupUpdate
operator|.
name|getUpdatedOn
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|updatedOn
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|updatedOn
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
name|groupUpdate
operator|=
name|groupUpdate
operator|.
name|toBuilder
argument_list|()
operator|.
name|setUpdatedOn
argument_list|(
name|updatedOn
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|UpdateResult
name|result
init|=
name|updateGroupInNoteDbWithRetry
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
decl_stmt|;
name|updateNameInProjectConfigsIfNecessary
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|evictCachesOnGroupUpdate
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|dispatchAuditEventsOnGroupUpdate
argument_list|(
name|result
argument_list|,
name|updatedOn
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createGroupInNoteDbWithRetry ( InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|private
name|InternalGroup
name|createGroupInNoteDbWithRetry
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
block|{
try|try
block|{
return|return
name|retryHelper
operator|.
name|execute
argument_list|(
name|RetryHelper
operator|.
name|ActionType
operator|.
name|GROUP_UPDATE
argument_list|,
parameter_list|()
lambda|->
name|createGroupInNoteDb
argument_list|(
name|groupCreation
argument_list|,
name|groupUpdate
argument_list|)
argument_list|,
name|LockFailureException
operator|.
name|class
operator|::
name|isInstance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|OrmDuplicateKeyException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|createGroupInNoteDb ( InternalGroupCreation groupCreation, InternalGroupUpdate groupUpdate)
specifier|public
name|InternalGroup
name|createGroupInNoteDb
parameter_list|(
name|InternalGroupCreation
name|groupCreation
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|AccountGroup
operator|.
name|NameKey
name|groupName
init|=
name|groupUpdate
operator|.
name|getName
argument_list|()
operator|.
name|orElseGet
argument_list|(
name|groupCreation
operator|::
name|getNameKey
argument_list|)
decl_stmt|;
name|GroupNameNotes
name|groupNameNotes
init|=
name|GroupNameNotes
operator|.
name|forNewGroup
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupCreation
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|createForNewGroup
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupCreation
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|allUsersRepo
argument_list|,
name|groupConfig
argument_list|,
name|groupNameNotes
argument_list|)
expr_stmt|;
return|return
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"Created group wasn't automatically loaded"
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|updateGroupInNoteDbWithRetry ( AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|private
name|UpdateResult
name|updateGroupInNoteDbWithRetry
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
throws|,
name|NoSuchGroupException
block|{
try|try
block|{
return|return
name|retryHelper
operator|.
name|execute
argument_list|(
name|RetryHelper
operator|.
name|ActionType
operator|.
name|GROUP_UPDATE
argument_list|,
parameter_list|()
lambda|->
name|updateGroupInNoteDb
argument_list|(
name|groupUuid
argument_list|,
name|groupUpdate
argument_list|)
argument_list|,
name|LockFailureException
operator|.
name|class
operator|::
name|isInstance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|ConfigInvalidException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|OrmDuplicateKeyException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|NoSuchGroupException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|updateGroupInNoteDb ( AccountGroup.UUID groupUuid, InternalGroupUpdate groupUpdate)
specifier|public
name|UpdateResult
name|updateGroupInNoteDb
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|,
name|InternalGroupUpdate
name|groupUpdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
throws|,
name|NoSuchGroupException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|groupUpdate
argument_list|,
name|auditLogFormatter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchGroupException
argument_list|(
name|groupUuid
argument_list|)
throw|;
block|}
name|InternalGroup
name|originalGroup
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|GroupNameNotes
name|groupNameNotes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|groupUpdate
operator|.
name|getName
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|NameKey
name|oldName
init|=
name|originalGroup
operator|.
name|getNameKey
argument_list|()
decl_stmt|;
name|AccountGroup
operator|.
name|NameKey
name|newName
init|=
name|groupUpdate
operator|.
name|getName
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|groupNameNotes
operator|=
name|GroupNameNotes
operator|.
name|forRename
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupUuid
argument_list|,
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|(
name|allUsersRepo
argument_list|,
name|groupConfig
argument_list|,
name|groupNameNotes
argument_list|)
expr_stmt|;
name|InternalGroup
name|updatedGroup
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"Updated group wasn't automatically loaded"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getUpdateResult
argument_list|(
name|originalGroup
argument_list|,
name|updatedGroup
argument_list|)
return|;
block|}
block|}
DECL|method|getUpdateResult ( InternalGroup originalGroup, InternalGroup updatedGroup)
specifier|private
specifier|static
name|UpdateResult
name|getUpdateResult
parameter_list|(
name|InternalGroup
name|originalGroup
parameter_list|,
name|InternalGroup
name|updatedGroup
parameter_list|)
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|addedMembers
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|updatedGroup
operator|.
name|getMembers
argument_list|()
argument_list|,
name|originalGroup
operator|.
name|getMembers
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|deletedMembers
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|originalGroup
operator|.
name|getMembers
argument_list|()
argument_list|,
name|updatedGroup
operator|.
name|getMembers
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|addedSubgroups
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|updatedGroup
operator|.
name|getSubgroups
argument_list|()
argument_list|,
name|originalGroup
operator|.
name|getSubgroups
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|deletedSubgroups
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|originalGroup
operator|.
name|getSubgroups
argument_list|()
argument_list|,
name|updatedGroup
operator|.
name|getSubgroups
argument_list|()
argument_list|)
decl_stmt|;
name|UpdateResult
operator|.
name|Builder
name|resultBuilder
init|=
name|UpdateResult
operator|.
name|builder
argument_list|()
operator|.
name|setGroupUuid
argument_list|(
name|updatedGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|.
name|setGroupId
argument_list|(
name|updatedGroup
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|updatedGroup
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|setAddedMembers
argument_list|(
name|addedMembers
argument_list|)
operator|.
name|setDeletedMembers
argument_list|(
name|deletedMembers
argument_list|)
operator|.
name|setAddedSubgroups
argument_list|(
name|addedSubgroups
argument_list|)
operator|.
name|setDeletedSubgroups
argument_list|(
name|deletedSubgroups
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|originalGroup
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|updatedGroup
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
name|resultBuilder
operator|.
name|setPreviousGroupName
argument_list|(
name|originalGroup
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resultBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|commit ( Repository allUsersRepo, GroupConfig groupConfig, @Nullable GroupNameNotes groupNameNotes)
specifier|private
name|void
name|commit
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|GroupConfig
name|groupConfig
parameter_list|,
annotation|@
name|Nullable
name|GroupNameNotes
name|groupNameNotes
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchRefUpdate
name|batchRefUpdate
init|=
name|allUsersRepo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
init|)
block|{
name|groupConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNameNotes
operator|!=
literal|null
condition|)
block|{
comment|// MetaDataUpdates unfortunately can't be reused. -> Create a new one.
try|try
init|(
name|MetaDataUpdate
name|metaDataUpdate
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|batchRefUpdate
argument_list|)
init|)
block|{
name|groupNameNotes
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
block|}
name|RefUpdateUtil
operator|.
name|executeChecked
argument_list|(
name|batchRefUpdate
argument_list|,
name|allUsersRepo
argument_list|)
expr_stmt|;
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|allUsersName
argument_list|,
name|batchRefUpdate
argument_list|,
name|currentUser
operator|!=
literal|null
condition|?
name|currentUser
operator|.
name|state
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|evictCachesOnGroupCreation (InternalGroup createdGroup)
specifier|private
name|void
name|evictCachesOnGroupCreation
parameter_list|(
name|InternalGroup
name|createdGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"evict caches on creation of group %s"
argument_list|,
name|createdGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// By UUID is used for the index and hence should be evicted before refreshing the index.
name|groupCache
operator|.
name|evict
argument_list|(
name|createdGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|get
argument_list|()
operator|.
name|index
argument_list|(
name|createdGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// These caches use the result from the index and hence must be evicted after refreshing the
comment|// index.
name|groupCache
operator|.
name|evict
argument_list|(
name|createdGroup
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|evict
argument_list|(
name|createdGroup
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
name|createdGroup
operator|.
name|getMembers
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupIncludeCache
operator|::
name|evictGroupsWithMember
argument_list|)
expr_stmt|;
name|createdGroup
operator|.
name|getSubgroups
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupIncludeCache
operator|::
name|evictParentGroupsOf
argument_list|)
expr_stmt|;
block|}
DECL|method|evictCachesOnGroupUpdate (UpdateResult result)
specifier|private
name|void
name|evictCachesOnGroupUpdate
parameter_list|(
name|UpdateResult
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"evict caches on update of group %s"
argument_list|,
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|// By UUID is used for the index and hence should be evicted before refreshing the index.
name|groupCache
operator|.
name|evict
argument_list|(
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|get
argument_list|()
operator|.
name|index
argument_list|(
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|// These caches use the result from the index and hence must be evicted after refreshing the
comment|// index.
name|groupCache
operator|.
name|evict
argument_list|(
name|result
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|groupCache
operator|.
name|evict
argument_list|(
name|result
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|getPreviousGroupName
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|groupCache
operator|::
name|evict
argument_list|)
expr_stmt|;
name|result
operator|.
name|getAddedMembers
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupIncludeCache
operator|::
name|evictGroupsWithMember
argument_list|)
expr_stmt|;
name|result
operator|.
name|getDeletedMembers
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupIncludeCache
operator|::
name|evictGroupsWithMember
argument_list|)
expr_stmt|;
name|result
operator|.
name|getAddedSubgroups
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupIncludeCache
operator|::
name|evictParentGroupsOf
argument_list|)
expr_stmt|;
name|result
operator|.
name|getDeletedSubgroups
argument_list|()
operator|.
name|forEach
argument_list|(
name|groupIncludeCache
operator|::
name|evictParentGroupsOf
argument_list|)
expr_stmt|;
block|}
DECL|method|updateNameInProjectConfigsIfNecessary (UpdateResult result)
specifier|private
name|void
name|updateNameInProjectConfigsIfNecessary
parameter_list|(
name|UpdateResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getPreviousGroupName
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|AccountGroup
operator|.
name|NameKey
name|previousName
init|=
name|result
operator|.
name|getPreviousGroupName
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|renameGroupOpFactory
operator|.
name|create
argument_list|(
name|authorIdent
argument_list|,
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|,
name|previousName
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupName
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
block|}
block|}
DECL|method|dispatchAuditEventsOnGroupCreation (InternalGroup createdGroup)
specifier|private
name|void
name|dispatchAuditEventsOnGroupCreation
parameter_list|(
name|InternalGroup
name|createdGroup
parameter_list|)
block|{
if|if
condition|(
name|currentUser
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|createdGroup
operator|.
name|getMembers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAuditService
operator|.
name|dispatchAddMembers
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|createdGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|createdGroup
operator|.
name|getMembers
argument_list|()
argument_list|,
name|createdGroup
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|createdGroup
operator|.
name|getSubgroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAuditService
operator|.
name|dispatchAddSubgroups
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|createdGroup
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|createdGroup
operator|.
name|getSubgroups
argument_list|()
argument_list|,
name|createdGroup
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispatchAuditEventsOnGroupUpdate (UpdateResult result, Timestamp updatedOn)
specifier|private
name|void
name|dispatchAuditEventsOnGroupUpdate
parameter_list|(
name|UpdateResult
name|result
parameter_list|,
name|Timestamp
name|updatedOn
parameter_list|)
block|{
if|if
condition|(
name|currentUser
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|getAddedMembers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAuditService
operator|.
name|dispatchAddMembers
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|,
name|result
operator|.
name|getAddedMembers
argument_list|()
argument_list|,
name|updatedOn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|getDeletedMembers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAuditService
operator|.
name|dispatchDeleteMembers
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|,
name|result
operator|.
name|getDeletedMembers
argument_list|()
argument_list|,
name|updatedOn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|getAddedSubgroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAuditService
operator|.
name|dispatchAddSubgroups
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|,
name|result
operator|.
name|getAddedSubgroups
argument_list|()
argument_list|,
name|updatedOn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|getDeletedSubgroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupAuditService
operator|.
name|dispatchDeleteSubgroups
argument_list|(
name|currentUser
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|result
operator|.
name|getGroupUuid
argument_list|()
argument_list|,
name|result
operator|.
name|getDeletedSubgroups
argument_list|()
argument_list|,
name|updatedOn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|FunctionalInterface
DECL|interface|MetaDataUpdateFactory
specifier|private
interface|interface
name|MetaDataUpdateFactory
block|{
DECL|method|create ( Project.NameKey projectName, Repository repository, BatchRefUpdate batchRefUpdate)
name|MetaDataUpdate
name|create
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|Repository
name|repository
parameter_list|,
name|BatchRefUpdate
name|batchRefUpdate
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|UpdateResult
specifier|abstract
specifier|static
class|class
name|UpdateResult
block|{
DECL|method|getGroupUuid ()
specifier|abstract
name|AccountGroup
operator|.
name|UUID
name|getGroupUuid
parameter_list|()
function_decl|;
DECL|method|getGroupId ()
specifier|abstract
name|AccountGroup
operator|.
name|Id
name|getGroupId
parameter_list|()
function_decl|;
DECL|method|getGroupName ()
specifier|abstract
name|AccountGroup
operator|.
name|NameKey
name|getGroupName
parameter_list|()
function_decl|;
DECL|method|getPreviousGroupName ()
specifier|abstract
name|Optional
argument_list|<
name|AccountGroup
operator|.
name|NameKey
argument_list|>
name|getPreviousGroupName
parameter_list|()
function_decl|;
DECL|method|getAddedMembers ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getAddedMembers
parameter_list|()
function_decl|;
DECL|method|getDeletedMembers ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getDeletedMembers
parameter_list|()
function_decl|;
DECL|method|getAddedSubgroups ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getAddedSubgroups
parameter_list|()
function_decl|;
DECL|method|getDeletedSubgroups ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getDeletedSubgroups
parameter_list|()
function_decl|;
DECL|method|builder ()
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|AutoValue_GroupsUpdate_UpdateResult
operator|.
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|AutoValue
operator|.
name|Builder
DECL|class|Builder
specifier|abstract
specifier|static
class|class
name|Builder
block|{
DECL|method|setGroupUuid (AccountGroup.UUID groupUuid)
specifier|abstract
name|Builder
name|setGroupUuid
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
function_decl|;
DECL|method|setGroupId (AccountGroup.Id groupId)
specifier|abstract
name|Builder
name|setGroupId
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
function_decl|;
DECL|method|setGroupName (AccountGroup.NameKey name)
specifier|abstract
name|Builder
name|setGroupName
parameter_list|(
name|AccountGroup
operator|.
name|NameKey
name|name
parameter_list|)
function_decl|;
DECL|method|setPreviousGroupName (AccountGroup.NameKey previousName)
specifier|abstract
name|Builder
name|setPreviousGroupName
parameter_list|(
name|AccountGroup
operator|.
name|NameKey
name|previousName
parameter_list|)
function_decl|;
DECL|method|setAddedMembers (Set<Account.Id> addedMembers)
specifier|abstract
name|Builder
name|setAddedMembers
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|addedMembers
parameter_list|)
function_decl|;
DECL|method|setDeletedMembers (Set<Account.Id> deletedMembers)
specifier|abstract
name|Builder
name|setDeletedMembers
parameter_list|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|deletedMembers
parameter_list|)
function_decl|;
DECL|method|setAddedSubgroups (Set<AccountGroup.UUID> addedSubgroups)
specifier|abstract
name|Builder
name|setAddedSubgroups
parameter_list|(
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|addedSubgroups
parameter_list|)
function_decl|;
DECL|method|setDeletedSubgroups (Set<AccountGroup.UUID> deletedSubgroups)
specifier|abstract
name|Builder
name|setDeletedSubgroups
parameter_list|(
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|deletedSubgroups
parameter_list|)
function_decl|;
DECL|method|build ()
specifier|abstract
name|UpdateResult
name|build
parameter_list|()
function_decl|;
block|}
block|}
block|}
end_class

end_unit

