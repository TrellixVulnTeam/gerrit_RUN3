begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupByIdAud
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMemberAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|FooterLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|RawParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** NoteDb reader for group audit log. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AuditLogReader
class|class
name|AuditLogReader
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuditLogReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serverId
specifier|private
specifier|final
name|String
name|serverId
decl_stmt|;
annotation|@
name|Inject
DECL|method|AuditLogReader (@erritServerId String serverId)
name|AuditLogReader
parameter_list|(
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|)
block|{
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
block|}
comment|// Having separate methods for reading the two types of audit records mirrors the split in
comment|// ReviewDb. Once ReviewDb is gone, the audit record interface becomes more flexible and we can
comment|// revisit this, e.g. to do only a single walk, or even change the record types.
DECL|method|getMembersAudit (Repository repo, AccountGroup.UUID uuid)
name|ImmutableList
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|getMembersAudit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|getMembersAudit
argument_list|(
name|getGroupId
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|parseCommits
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getMembersAudit ( AccountGroup.Id groupId, List<ParsedCommit> commits)
specifier|private
name|ImmutableList
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|getMembersAudit
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|List
argument_list|<
name|ParsedCommit
argument_list|>
name|commits
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|MemberKey
argument_list|,
name|AccountGroupMemberAudit
argument_list|>
name|audits
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|linkedListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|result
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ParsedCommit
name|pc
range|:
name|commits
control|)
block|{
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|pc
operator|.
name|addedMembers
argument_list|()
control|)
block|{
name|MemberKey
name|key
init|=
name|MemberKey
operator|.
name|create
argument_list|(
name|groupId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|AccountGroupMemberAudit
name|audit
init|=
operator|new
name|AccountGroupMemberAudit
argument_list|(
operator|new
name|AccountGroupMemberAudit
operator|.
name|Key
argument_list|(
name|id
argument_list|,
name|groupId
argument_list|,
name|pc
operator|.
name|when
argument_list|()
argument_list|)
argument_list|,
name|pc
operator|.
name|authorId
argument_list|()
argument_list|)
decl_stmt|;
name|audits
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|audit
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|pc
operator|.
name|removedMembers
argument_list|()
control|)
block|{
name|List
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|adds
init|=
name|audits
operator|.
name|get
argument_list|(
name|MemberKey
operator|.
name|create
argument_list|(
name|groupId
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|adds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AccountGroupMemberAudit
name|audit
init|=
name|adds
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|audit
operator|.
name|removed
argument_list|(
name|pc
operator|.
name|authorId
argument_list|()
argument_list|,
name|pc
operator|.
name|when
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Match old behavior of DbGroupAuditListener and add a "legacy" add/remove pair.
name|AccountGroupMemberAudit
name|audit
init|=
operator|new
name|AccountGroupMemberAudit
argument_list|(
operator|new
name|AccountGroupMemberAudit
operator|.
name|Key
argument_list|(
name|id
argument_list|,
name|groupId
argument_list|,
name|pc
operator|.
name|when
argument_list|()
argument_list|)
argument_list|,
name|pc
operator|.
name|authorId
argument_list|()
argument_list|)
decl_stmt|;
name|audit
operator|.
name|removedLegacy
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getSubgroupsAudit (Repository repo, AccountGroup.UUID uuid)
name|ImmutableList
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|getSubgroupsAudit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|getSubgroupsAudit
argument_list|(
name|getGroupId
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|parseCommits
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSubgroupsAudit ( AccountGroup.Id groupId, List<ParsedCommit> commits)
specifier|private
name|ImmutableList
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|getSubgroupsAudit
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|List
argument_list|<
name|ParsedCommit
argument_list|>
name|commits
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|SubgroupKey
argument_list|,
name|AccountGroupByIdAud
argument_list|>
name|audits
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|linkedListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|result
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ParsedCommit
name|pc
range|:
name|commits
control|)
block|{
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|pc
operator|.
name|addedSubgroups
argument_list|()
control|)
block|{
name|SubgroupKey
name|key
init|=
name|SubgroupKey
operator|.
name|create
argument_list|(
name|groupId
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|AccountGroupByIdAud
name|audit
init|=
operator|new
name|AccountGroupByIdAud
argument_list|(
operator|new
name|AccountGroupByIdAud
operator|.
name|Key
argument_list|(
name|groupId
argument_list|,
name|uuid
argument_list|,
name|pc
operator|.
name|when
argument_list|()
argument_list|)
argument_list|,
name|pc
operator|.
name|authorId
argument_list|()
argument_list|)
decl_stmt|;
name|audits
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|audit
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|audit
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|pc
operator|.
name|removedSubgroups
argument_list|()
control|)
block|{
name|List
argument_list|<
name|AccountGroupByIdAud
argument_list|>
name|adds
init|=
name|audits
operator|.
name|get
argument_list|(
name|SubgroupKey
operator|.
name|create
argument_list|(
name|groupId
argument_list|,
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|adds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AccountGroupByIdAud
name|audit
init|=
name|adds
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|audit
operator|.
name|removed
argument_list|(
name|pc
operator|.
name|authorId
argument_list|()
argument_list|,
name|pc
operator|.
name|when
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Unlike members, DbGroupAuditListener didn't insert an add/remove pair here.
block|}
block|}
block|}
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|parse (AccountGroup.UUID uuid, RevCommit c)
specifier|private
name|Optional
argument_list|<
name|ParsedCommit
argument_list|>
name|parse
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|RevCommit
name|c
parameter_list|)
block|{
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|authorId
init|=
name|NoteDbUtil
operator|.
name|parseIdent
argument_list|(
name|c
operator|.
name|getAuthorIdent
argument_list|()
argument_list|,
name|serverId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authorId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Only report audit events from identified users, since this is a non-nullable field in
comment|// ReviewDb. May be revisited after groups are fully migrated to NoteDb.
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|addedMembers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|addedSubgroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|removedMembers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|removedSubgroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FooterLine
name|line
range|:
name|c
operator|.
name|getFooterLines
argument_list|()
control|)
block|{
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|GroupConfigCommitMessage
operator|.
name|FOOTER_ADD_MEMBER
argument_list|)
condition|)
block|{
name|parseAccount
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|addedMembers
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|GroupConfigCommitMessage
operator|.
name|FOOTER_REMOVE_MEMBER
argument_list|)
condition|)
block|{
name|parseAccount
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|removedMembers
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|GroupConfigCommitMessage
operator|.
name|FOOTER_ADD_GROUP
argument_list|)
condition|)
block|{
name|parseGroup
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|addedSubgroups
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|matches
argument_list|(
name|GroupConfigCommitMessage
operator|.
name|FOOTER_REMOVE_GROUP
argument_list|)
condition|)
block|{
name|parseGroup
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|removedSubgroups
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|AutoValue_AuditLogReader_ParsedCommit
argument_list|(
name|authorId
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|c
operator|.
name|getAuthorIdent
argument_list|()
operator|.
name|getWhen
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|addedMembers
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|removedMembers
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|addedSubgroups
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|removedSubgroups
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseAccount (AccountGroup.UUID uuid, RevCommit c, FooterLine line)
specifier|private
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|parseAccount
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|RevCommit
name|c
parameter_list|,
name|FooterLine
name|line
parameter_list|)
block|{
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|result
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|ident
lambda|->
name|NoteDbUtil
operator|.
name|parseIdent
argument_list|(
name|ident
argument_list|,
name|serverId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|logInvalid
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseGroup ( AccountGroup.UUID uuid, RevCommit c, FooterLine line)
specifier|private
specifier|static
name|Optional
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|parseGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|RevCommit
name|c
parameter_list|,
name|FooterLine
name|line
parameter_list|)
block|{
name|PersonIdent
name|ident
init|=
name|RawParseUtils
operator|.
name|parsePersonIdent
argument_list|(
name|line
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ident
operator|==
literal|null
condition|)
block|{
name|logInvalid
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|AccountGroup
operator|.
name|UUID
argument_list|(
name|ident
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|logInvalid (AccountGroup.UUID uuid, RevCommit c, FooterLine line)
specifier|private
specifier|static
name|void
name|logInvalid
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|RevCommit
name|c
parameter_list|,
name|FooterLine
name|line
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Invalid footer line in commit {} while parsing audit log for group {}: {}"
argument_list|,
name|c
operator|.
name|name
argument_list|()
argument_list|,
name|uuid
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
DECL|method|parseCommits (Repository repo, AccountGroup.UUID uuid)
specifier|private
name|ImmutableList
argument_list|<
name|ParsedCommit
argument_list|>
name|parseCommits
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|refsGroups
argument_list|(
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rw
operator|.
name|setRetainBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|COMMIT_TIME_DESC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ParsedCommit
argument_list|>
name|result
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|RevCommit
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|parse
argument_list|(
name|uuid
argument_list|,
name|c
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|result
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|getGroupId (Repository repo, AccountGroup.UUID uuid)
specifier|private
name|AccountGroup
operator|.
name|Id
name|getGroupId
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
throws|throws
name|ConfigInvalidException
throws|,
name|IOException
block|{
comment|// TODO(dborowitz): This re-walks all commits just to find createdOn, which we don't need.
return|return
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|repo
argument_list|,
name|uuid
argument_list|)
operator|.
name|getLoadedGroup
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|AutoValue
DECL|class|MemberKey
specifier|abstract
specifier|static
class|class
name|MemberKey
block|{
DECL|method|create (AccountGroup.Id groupId, Account.Id memberId)
specifier|static
name|MemberKey
name|create
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|Account
operator|.
name|Id
name|memberId
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_AuditLogReader_MemberKey
argument_list|(
name|groupId
argument_list|,
name|memberId
argument_list|)
return|;
block|}
DECL|method|groupId ()
specifier|abstract
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|()
function_decl|;
DECL|method|memberId ()
specifier|abstract
name|Account
operator|.
name|Id
name|memberId
parameter_list|()
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|SubgroupKey
specifier|abstract
specifier|static
class|class
name|SubgroupKey
block|{
DECL|method|create (AccountGroup.Id groupId, AccountGroup.UUID subgroupUuid)
specifier|static
name|SubgroupKey
name|create
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_AuditLogReader_SubgroupKey
argument_list|(
name|groupId
argument_list|,
name|subgroupUuid
argument_list|)
return|;
block|}
DECL|method|groupId ()
specifier|abstract
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|()
function_decl|;
DECL|method|subgroupUuid ()
specifier|abstract
name|AccountGroup
operator|.
name|UUID
name|subgroupUuid
parameter_list|()
function_decl|;
block|}
annotation|@
name|AutoValue
DECL|class|ParsedCommit
specifier|abstract
specifier|static
class|class
name|ParsedCommit
block|{
DECL|method|authorId ()
specifier|abstract
name|Account
operator|.
name|Id
name|authorId
parameter_list|()
function_decl|;
DECL|method|when ()
specifier|abstract
name|Timestamp
name|when
parameter_list|()
function_decl|;
DECL|method|addedMembers ()
specifier|abstract
name|ImmutableList
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|addedMembers
parameter_list|()
function_decl|;
DECL|method|removedMembers ()
specifier|abstract
name|ImmutableList
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|removedMembers
parameter_list|()
function_decl|;
DECL|method|addedSubgroups ()
specifier|abstract
name|ImmutableList
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|addedSubgroups
parameter_list|()
function_decl|;
DECL|method|removedSubgroups ()
specifier|abstract
name|ImmutableList
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|removedSubgroups
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

