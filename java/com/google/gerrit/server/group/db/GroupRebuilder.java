begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupByIdAud
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMemberAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|VersionedMetaData
operator|.
name|BatchMetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
operator|.
name|MemberModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
operator|.
name|InternalGroupUpdate
operator|.
name|SubgroupModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** Helper for rebuilding an entire group's NoteDb refs. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|GroupRebuilder
specifier|public
class|class
name|GroupRebuilder
block|{
DECL|field|serverIdent
specifier|private
specifier|final
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|allUsers
specifier|private
specifier|final
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|metaDataUpdateFactory
specifier|private
specifier|final
name|MetaDataUpdate
operator|.
name|InternalFactory
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|newPersonIdentFunc
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|PersonIdent
argument_list|,
name|PersonIdent
argument_list|>
name|newPersonIdentFunc
decl_stmt|;
DECL|field|getAccountNameEmailFunc
specifier|private
specifier|final
name|Function
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|getAccountNameEmailFunc
decl_stmt|;
DECL|field|getGroupNameFunc
specifier|private
specifier|final
name|Function
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|String
argument_list|>
name|getGroupNameFunc
decl_stmt|;
annotation|@
name|Inject
DECL|method|GroupRebuilder ( @erritPersonIdent Provider<PersonIdent> serverIdent, @GerritServerId String serverId, AllUsersName allUsers, MetaDataUpdate.InternalFactory metaDataUpdateFactory, AccountCache accountCache, GroupBackend groupBackend)
name|GroupRebuilder
parameter_list|(
annotation|@
name|GerritPersonIdent
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
annotation|@
name|GerritServerId
name|String
name|serverId
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|MetaDataUpdate
operator|.
name|InternalFactory
name|metaDataUpdateFactory
parameter_list|,
name|AccountCache
name|accountCache
parameter_list|,
name|GroupBackend
name|groupBackend
parameter_list|)
block|{
name|this
argument_list|(
name|serverIdent
argument_list|,
name|allUsers
argument_list|,
name|metaDataUpdateFactory
argument_list|,
comment|// TODO(dborowitz): These probably won't work during init.
parameter_list|(
name|id
parameter_list|,
name|ident
parameter_list|)
lambda|->
operator|new
name|PersonIdent
argument_list|(
name|GroupsUpdate
operator|.
name|getAccountName
argument_list|(
name|accountCache
argument_list|,
name|id
argument_list|)
argument_list|,
name|GroupsUpdate
operator|.
name|getEmailForAuditLog
argument_list|(
name|id
argument_list|,
name|serverId
argument_list|)
argument_list|,
name|ident
operator|.
name|getWhen
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
argument_list|,
name|id
lambda|->
name|GroupsUpdate
operator|.
name|getAccountNameEmail
argument_list|(
name|accountCache
argument_list|,
name|id
argument_list|,
name|serverId
argument_list|)
argument_list|,
name|uuid
lambda|->
name|GroupsUpdate
operator|.
name|getGroupName
argument_list|(
name|groupBackend
argument_list|,
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|GroupRebuilder ( Provider<PersonIdent> serverIdent, AllUsersName allUsers, MetaDataUpdate.InternalFactory metaDataUpdateFactory, BiFunction<Account.Id, PersonIdent, PersonIdent> newPersonIdentFunc, Function<Account.Id, String> getAccountNameEmailFunc, Function<AccountGroup.UUID, String> getGroupNameFunc)
name|GroupRebuilder
parameter_list|(
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
parameter_list|,
name|AllUsersName
name|allUsers
parameter_list|,
name|MetaDataUpdate
operator|.
name|InternalFactory
name|metaDataUpdateFactory
parameter_list|,
name|BiFunction
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|PersonIdent
argument_list|,
name|PersonIdent
argument_list|>
name|newPersonIdentFunc
parameter_list|,
name|Function
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|getAccountNameEmailFunc
parameter_list|,
name|Function
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|String
argument_list|>
name|getGroupNameFunc
parameter_list|)
block|{
name|this
operator|.
name|serverIdent
operator|=
name|serverIdent
expr_stmt|;
name|this
operator|.
name|allUsers
operator|=
name|allUsers
expr_stmt|;
name|this
operator|.
name|metaDataUpdateFactory
operator|=
name|metaDataUpdateFactory
expr_stmt|;
name|this
operator|.
name|newPersonIdentFunc
operator|=
name|newPersonIdentFunc
expr_stmt|;
name|this
operator|.
name|getAccountNameEmailFunc
operator|=
name|getAccountNameEmailFunc
expr_stmt|;
name|this
operator|.
name|getGroupNameFunc
operator|=
name|getGroupNameFunc
expr_stmt|;
block|}
DECL|method|rebuild (Repository allUsersRepo, GroupBundle bundle, @Nullable BatchRefUpdate bru)
specifier|public
name|void
name|rebuild
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|GroupBundle
name|bundle
parameter_list|,
annotation|@
name|Nullable
name|BatchRefUpdate
name|bru
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|OrmDuplicateKeyException
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|allUsersRepo
argument_list|,
name|bundle
operator|.
name|uuid
argument_list|()
argument_list|)
decl_stmt|;
name|AccountGroup
name|group
init|=
name|bundle
operator|.
name|group
argument_list|()
decl_stmt|;
name|groupConfig
operator|.
name|setAllowSaveEmptyName
argument_list|()
expr_stmt|;
name|groupConfig
operator|.
name|setGroupCreation
argument_list|(
name|InternalGroupCreation
operator|.
name|builder
argument_list|()
operator|.
name|setId
argument_list|(
name|bundle
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|setNameKey
argument_list|(
name|group
operator|.
name|getNameKey
argument_list|()
argument_list|)
operator|.
name|setGroupUUID
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
operator|.
name|setCreatedOn
argument_list|(
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|InternalGroupUpdate
operator|.
name|Builder
name|updateBuilder
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
operator|.
name|setOwnerGroupUUID
argument_list|(
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
argument_list|)
operator|.
name|setVisibleToAll
argument_list|(
name|group
operator|.
name|isVisibleToAll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|.
name|group
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateBuilder
operator|.
name|setDescription
argument_list|(
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|updateBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|getAccountNameEmailFunc
argument_list|,
name|getGroupNameFunc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Key
argument_list|,
name|Collection
argument_list|<
name|Event
argument_list|>
argument_list|>
name|events
init|=
name|toEvents
argument_list|(
name|bundle
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|PersonIdent
name|nowServerIdent
init|=
name|getServerIdent
argument_list|(
name|events
argument_list|)
decl_stmt|;
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|allUsers
argument_list|,
name|allUsersRepo
argument_list|,
name|bru
argument_list|)
decl_stmt|;
comment|// Creation is done by the server (unlike later audit events).
name|PersonIdent
name|created
init|=
operator|new
name|PersonIdent
argument_list|(
name|nowServerIdent
argument_list|,
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
decl_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setAuthor
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|md
operator|.
name|getCommitBuilder
argument_list|()
operator|.
name|setCommitter
argument_list|(
name|created
argument_list|)
expr_stmt|;
comment|// Rebuild group ref.
try|try
init|(
name|BatchMetaDataUpdate
name|batch
init|=
name|groupConfig
operator|.
name|openUpdate
argument_list|(
name|md
argument_list|)
init|)
block|{
name|batch
operator|.
name|write
argument_list|(
name|groupConfig
argument_list|,
name|md
operator|.
name|getCommitBuilder
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Collection
argument_list|<
name|Event
argument_list|>
argument_list|>
name|e
range|:
name|events
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InternalGroupUpdate
operator|.
name|Builder
name|ub
init|=
name|InternalGroupUpdate
operator|.
name|builder
argument_list|()
decl_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|forEach
argument_list|(
name|event
lambda|->
name|event
operator|.
name|update
argument_list|()
operator|.
name|accept
argument_list|(
name|ub
argument_list|)
argument_list|)
expr_stmt|;
name|groupConfig
operator|.
name|setGroupUpdate
argument_list|(
name|ub
operator|.
name|build
argument_list|()
argument_list|,
name|getAccountNameEmailFunc
argument_list|,
name|getGroupNameFunc
argument_list|)
expr_stmt|;
name|PersonIdent
name|currServerIdent
init|=
operator|new
name|PersonIdent
argument_list|(
name|nowServerIdent
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|when
argument_list|()
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setAuthor
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|accountId
argument_list|()
operator|.
name|map
argument_list|(
name|id
lambda|->
name|newPersonIdentFunc
operator|.
name|apply
argument_list|(
name|id
argument_list|,
name|currServerIdent
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|currServerIdent
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setCommitter
argument_list|(
name|currServerIdent
argument_list|)
expr_stmt|;
name|batch
operator|.
name|write
argument_list|(
name|groupConfig
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|createRef
argument_list|(
name|groupConfig
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toEvents (GroupBundle bundle)
specifier|private
name|ListMultimap
argument_list|<
name|Key
argument_list|,
name|Event
argument_list|>
name|toEvents
parameter_list|(
name|GroupBundle
name|bundle
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|Key
argument_list|,
name|Event
argument_list|>
name|result
init|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|Key
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|arrayListValues
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Event
name|e
decl_stmt|;
for|for
control|(
name|AccountGroupMemberAudit
name|a
range|:
name|bundle
operator|.
name|memberAudit
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|bundle
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
literal|"key %s does not match group %s"
argument_list|,
name|a
operator|.
name|getKey
argument_list|()
argument_list|,
name|bundle
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|Account
operator|.
name|Id
name|accountId
init|=
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|e
operator|=
name|event
argument_list|(
name|Type
operator|.
name|ADD_MEMBER
argument_list|,
name|a
operator|.
name|getAddedBy
argument_list|()
argument_list|,
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getAddedOn
argument_list|()
argument_list|,
name|addMember
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|key
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|e
operator|=
name|event
argument_list|(
name|Type
operator|.
name|REMOVE_MEMBER
argument_list|,
name|a
operator|.
name|getRemovedBy
argument_list|()
argument_list|,
name|a
operator|.
name|getRemovedOn
argument_list|()
argument_list|,
name|removeMember
argument_list|(
name|accountId
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|key
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|AccountGroupByIdAud
name|a
range|:
name|bundle
operator|.
name|byIdAudit
argument_list|()
control|)
block|{
name|checkArgument
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|bundle
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
literal|"key %s does not match group %s"
argument_list|,
name|a
operator|.
name|getKey
argument_list|()
argument_list|,
name|bundle
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|AccountGroup
operator|.
name|UUID
name|uuid
init|=
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getIncludeUUID
argument_list|()
decl_stmt|;
name|e
operator|=
name|event
argument_list|(
name|Type
operator|.
name|ADD_GROUP
argument_list|,
name|a
operator|.
name|getAddedBy
argument_list|()
argument_list|,
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getAddedOn
argument_list|()
argument_list|,
name|addGroup
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|key
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|e
operator|=
name|event
argument_list|(
name|Type
operator|.
name|REMOVE_GROUP
argument_list|,
name|a
operator|.
name|getRemovedBy
argument_list|()
argument_list|,
name|a
operator|.
name|getRemovedOn
argument_list|()
argument_list|,
name|removeGroup
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|key
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Due to clock skew, audit events may be in the future relative to this machine. Ensure the
comment|// fixup event happens after any other events, both for the purposes of sorting Keys correctly
comment|// and to avoid non-monotonic timestamps in the commit history.
name|Timestamp
name|maxTs
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|result
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Key
operator|::
name|when
argument_list|)
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|max
argument_list|(
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Timestamp
name|fixupTs
init|=
operator|new
name|Timestamp
argument_list|(
name|maxTs
operator|.
name|getTime
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|e
operator|=
name|serverEvent
argument_list|(
name|Type
operator|.
name|FIXUP
argument_list|,
name|fixupTs
argument_list|,
name|setCurrentMembership
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|key
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getServerIdent (Map<Key, Collection<Event>> events)
specifier|private
name|PersonIdent
name|getServerIdent
parameter_list|(
name|Map
argument_list|<
name|Key
argument_list|,
name|Collection
argument_list|<
name|Event
argument_list|>
argument_list|>
name|events
parameter_list|)
block|{
comment|// Created with MultimapBuilder.treeKeys, so the keySet is navigable.
name|Key
name|lastKey
init|=
operator|(
operator|(
name|NavigableSet
argument_list|<
name|Key
argument_list|>
operator|)
name|events
operator|.
name|keySet
argument_list|()
operator|)
operator|.
name|last
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|lastKey
operator|.
name|type
argument_list|()
operator|==
name|Type
operator|.
name|FIXUP
argument_list|)
expr_stmt|;
name|PersonIdent
name|ident
init|=
name|serverIdent
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|PersonIdent
argument_list|(
name|ident
operator|.
name|getName
argument_list|()
argument_list|,
name|ident
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|events
operator|.
name|get
argument_list|(
name|lastKey
argument_list|)
argument_list|)
operator|.
name|when
argument_list|()
argument_list|,
name|ident
operator|.
name|getTimeZone
argument_list|()
argument_list|)
return|;
block|}
DECL|method|addMember (Account.Id toAdd)
specifier|private
specifier|static
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|addMember
parameter_list|(
name|Account
operator|.
name|Id
name|toAdd
parameter_list|)
block|{
return|return
name|b
lambda|->
block|{
name|MemberModification
name|prev
init|=
name|b
operator|.
name|getMemberModification
argument_list|()
decl_stmt|;
name|b
operator|.
name|setMemberModification
argument_list|(
name|in
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|prev
operator|.
name|apply
argument_list|(
name|in
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|toAdd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|removeMember (Account.Id toRemove)
specifier|private
specifier|static
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|removeMember
parameter_list|(
name|Account
operator|.
name|Id
name|toRemove
parameter_list|)
block|{
return|return
name|b
lambda|->
block|{
name|MemberModification
name|prev
init|=
name|b
operator|.
name|getMemberModification
argument_list|()
decl_stmt|;
name|b
operator|.
name|setMemberModification
argument_list|(
name|in
lambda|->
name|Sets
operator|.
name|difference
argument_list|(
name|prev
operator|.
name|apply
argument_list|(
name|in
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|toRemove
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|addGroup (AccountGroup.UUID toAdd)
specifier|private
specifier|static
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|addGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|toAdd
parameter_list|)
block|{
return|return
name|b
lambda|->
block|{
name|SubgroupModification
name|prev
init|=
name|b
operator|.
name|getSubgroupModification
argument_list|()
decl_stmt|;
name|b
operator|.
name|setSubgroupModification
argument_list|(
name|in
lambda|->
name|Sets
operator|.
name|union
argument_list|(
name|prev
operator|.
name|apply
argument_list|(
name|in
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|toAdd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|removeGroup (AccountGroup.UUID toRemove)
specifier|private
specifier|static
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|removeGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|toRemove
parameter_list|)
block|{
return|return
name|b
lambda|->
block|{
name|SubgroupModification
name|prev
init|=
name|b
operator|.
name|getSubgroupModification
argument_list|()
decl_stmt|;
name|b
operator|.
name|setSubgroupModification
argument_list|(
name|in
lambda|->
name|Sets
operator|.
name|difference
argument_list|(
name|prev
operator|.
name|apply
argument_list|(
name|in
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|toRemove
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|setCurrentMembership (GroupBundle bundle)
specifier|private
specifier|static
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|setCurrentMembership
parameter_list|(
name|GroupBundle
name|bundle
parameter_list|)
block|{
comment|// Overwrite members and subgroups with the current values. The storage layer will do the
comment|// set differences to compute the appropriate delta, if any.
return|return
name|b
lambda|->
name|b
operator|.
name|setMemberModification
argument_list|(
name|in
lambda|->
name|bundle
operator|.
name|members
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSubgroupModification
argument_list|(
name|in
lambda|->
name|bundle
operator|.
name|byId
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getIncludeUUID
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|event ( Type type, Account.Id accountId, Timestamp when, Consumer<InternalGroupUpdate.Builder> update)
specifier|private
specifier|static
name|Event
name|event
parameter_list|(
name|Type
name|type
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|Timestamp
name|when
parameter_list|,
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|update
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_GroupRebuilder_Event
argument_list|(
name|type
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|accountId
argument_list|)
argument_list|,
name|when
argument_list|,
name|update
argument_list|)
return|;
block|}
DECL|method|serverEvent ( Type type, Timestamp when, Consumer<InternalGroupUpdate.Builder> update)
specifier|private
specifier|static
name|Event
name|serverEvent
parameter_list|(
name|Type
name|type
parameter_list|,
name|Timestamp
name|when
parameter_list|,
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|update
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_GroupRebuilder_Event
argument_list|(
name|type
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|when
argument_list|,
name|update
argument_list|)
return|;
block|}
annotation|@
name|AutoValue
DECL|class|Event
specifier|abstract
specifier|static
class|class
name|Event
block|{
DECL|method|type ()
specifier|abstract
name|Type
name|type
parameter_list|()
function_decl|;
DECL|method|accountId ()
specifier|abstract
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountId
parameter_list|()
function_decl|;
DECL|method|when ()
specifier|abstract
name|Timestamp
name|when
parameter_list|()
function_decl|;
DECL|method|update ()
specifier|abstract
name|Consumer
argument_list|<
name|InternalGroupUpdate
operator|.
name|Builder
argument_list|>
name|update
parameter_list|()
function_decl|;
DECL|method|key ()
name|Key
name|key
parameter_list|()
block|{
return|return
operator|new
name|AutoValue_GroupRebuilder_Key
argument_list|(
name|accountId
argument_list|()
argument_list|,
name|when
argument_list|()
argument_list|,
name|type
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Distinct event types.    *    *<p>Events at the same time by the same user are batched together by type. The types should    * correspond to the possible batch operations supported by {@link    * com.google.gerrit.server.audit.AuditService}.    */
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enumConstant|ADD_MEMBER
name|ADD_MEMBER
block|,
DECL|enumConstant|REMOVE_MEMBER
name|REMOVE_MEMBER
block|,
DECL|enumConstant|ADD_GROUP
name|ADD_GROUP
block|,
DECL|enumConstant|REMOVE_GROUP
name|REMOVE_GROUP
block|,
DECL|enumConstant|FIXUP
name|FIXUP
block|;   }
annotation|@
name|AutoValue
DECL|class|Key
specifier|abstract
specifier|static
class|class
name|Key
block|{
DECL|field|COMPARATOR
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Key
argument_list|>
name|COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|Key
operator|::
name|when
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|k
lambda|->
name|k
operator|.
name|accountId
argument_list|()
operator|.
name|map
argument_list|(
name|Account
operator|.
name|Id
operator|::
name|get
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Comparator
operator|.
name|nullsFirst
argument_list|(
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenComparing
argument_list|(
name|Key
operator|::
name|type
argument_list|)
decl_stmt|;
DECL|method|accountId ()
specifier|abstract
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountId
parameter_list|()
function_decl|;
DECL|method|when ()
specifier|abstract
name|Timestamp
name|when
parameter_list|()
function_decl|;
DECL|method|type ()
specifier|abstract
name|Type
name|type
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

