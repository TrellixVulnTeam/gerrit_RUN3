begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.db
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|db
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupByIdAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroupMemberAudit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * A database accessor for read calls related to groups.  *  *<p>All calls which read group related details from the database are gathered here. Other classes  * should always use this class instead of accessing the database directly. There are a few  * exceptions though: schema classes, wrapper classes, and classes executed during init. The latter  * ones should use {@code GroupsOnInit} instead.  *  *<p>Most callers should not need to read groups directly from the database; they should use the  * {@link com.google.gerrit.server.account.GroupCache GroupCache} instead.  *  *<p>If not explicitly stated, all methods of this class refer to<em>internal</em> groups.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|Groups
specifier|public
class|class
name|Groups
block|{
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|auditLogReader
specifier|private
specifier|final
name|AuditLogReader
name|auditLogReader
decl_stmt|;
annotation|@
name|Inject
DECL|method|Groups ( GitRepositoryManager repoManager, AllUsersName allUsersName, AuditLogReader auditLogReader)
specifier|public
name|Groups
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
name|AuditLogReader
name|auditLogReader
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|auditLogReader
operator|=
name|auditLogReader
expr_stmt|;
block|}
comment|/**    * Returns the {@code InternalGroup} for the specified UUID if it exists.    *    * @param groupUuid the UUID of the group    * @return the found {@code InternalGroup} if it exists, or else an empty {@code Optional}    * @throws IOException if the group couldn't be retrieved from NoteDb    * @throws ConfigInvalidException if the group couldn't be retrieved from NoteDb    */
DECL|method|getGroup (AccountGroup.UUID groupUuid)
specifier|public
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|getGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|getGroupFromNoteDb
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|groupUuid
argument_list|)
return|;
block|}
block|}
DECL|method|getGroupFromNoteDb ( AllUsersName allUsersName, Repository allUsersRepository, AccountGroup.UUID groupUuid)
specifier|private
specifier|static
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|getGroupFromNoteDb
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepository
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|GroupConfig
name|groupConfig
init|=
name|GroupConfig
operator|.
name|loadForGroup
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepository
argument_list|,
name|groupUuid
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|loadedGroup
init|=
name|groupConfig
operator|.
name|getLoadedGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadedGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Check consistency with group name notes.
name|GroupsNoteDbConsistencyChecker
operator|.
name|ensureConsistentWithGroupNameNotes
argument_list|(
name|allUsersRepository
argument_list|,
name|loadedGroup
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|loadedGroup
return|;
block|}
comment|/**    * Returns {@code GroupReference}s for all internal groups.    *    * @return a stream of the {@code GroupReference}s of all internal groups    * @throws IOException if an error occurs while reading from NoteDb    * @throws ConfigInvalidException if the data in NoteDb is in an incorrect format    */
DECL|method|getAllGroupReferences ()
specifier|public
name|Stream
argument_list|<
name|GroupReference
argument_list|>
name|getAllGroupReferences
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|GroupNameNotes
operator|.
name|loadAllGroups
argument_list|(
name|allUsersRepo
argument_list|)
operator|.
name|stream
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns all known external groups. External groups are 'known' when they are specified as a    * subgroup of an internal group.    *    * @return a stream of the UUIDs of the known external groups    * @throws IOException if an error occurs while reading from NoteDb    * @throws ConfigInvalidException if the data in NoteDb is in an incorrect format    */
DECL|method|getExternalGroups ()
specifier|public
name|Stream
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getExternalGroups
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|Repository
name|allUsersRepo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
return|return
name|getExternalGroupsFromNoteDb
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|)
return|;
block|}
block|}
DECL|method|getExternalGroupsFromNoteDb ( AllUsersName allUsersName, Repository allUsersRepo)
specifier|private
specifier|static
name|Stream
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getExternalGroupsFromNoteDb
parameter_list|(
name|AllUsersName
name|allUsersName
parameter_list|,
name|Repository
name|allUsersRepo
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ImmutableList
argument_list|<
name|GroupReference
argument_list|>
name|allInternalGroups
init|=
name|GroupNameNotes
operator|.
name|loadAllGroups
argument_list|(
name|allUsersRepo
argument_list|)
decl_stmt|;
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|allSubgroups
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupReference
name|internalGroup
range|:
name|allInternalGroups
control|)
block|{
name|Optional
argument_list|<
name|InternalGroup
argument_list|>
name|group
init|=
name|getGroupFromNoteDb
argument_list|(
name|allUsersName
argument_list|,
name|allUsersRepo
argument_list|,
name|internalGroup
operator|.
name|getUUID
argument_list|()
argument_list|)
decl_stmt|;
name|group
operator|.
name|map
argument_list|(
name|InternalGroup
operator|::
name|getSubgroups
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|allSubgroups
operator|::
name|addAll
argument_list|)
expr_stmt|;
block|}
return|return
name|allSubgroups
operator|.
name|build
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|groupUuid
lambda|->
operator|!
name|AccountGroup
operator|.
name|isInternalGroup
argument_list|(
name|groupUuid
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the membership audit records for a given group.    *    * @param allUsersRepo All-Users repository.    * @param groupUuid the UUID of the group    * @return the audit records, in arbitrary order; empty if the group does not exist    * @throws IOException if an error occurs while reading from NoteDb    * @throws ConfigInvalidException if the group couldn't be retrieved from NoteDb    */
DECL|method|getMembersAudit ( Repository allUsersRepo, AccountGroup.UUID groupUuid)
specifier|public
name|List
argument_list|<
name|AccountGroupMemberAudit
argument_list|>
name|getMembersAudit
parameter_list|(
name|Repository
name|allUsersRepo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|auditLogReader
operator|.
name|getMembersAudit
argument_list|(
name|allUsersRepo
argument_list|,
name|groupUuid
argument_list|)
return|;
block|}
comment|/**    * Returns the subgroup audit records for a given group.    *    * @param repo All-Users repository.    * @param groupUuid the UUID of the group    * @return the audit records, in arbitrary order; empty if the group does not exist    * @throws IOException if an error occurs while reading from NoteDb    * @throws ConfigInvalidException if the group couldn't be retrieved from NoteDb    */
DECL|method|getSubgroupsAudit (Repository repo, AccountGroup.UUID groupUuid)
specifier|public
name|List
argument_list|<
name|AccountGroupByIdAudit
argument_list|>
name|getSubgroupsAudit
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
return|return
name|auditLogReader
operator|.
name|getSubgroupsAudit
argument_list|(
name|repo
argument_list|,
name|groupUuid
argument_list|)
return|;
block|}
block|}
end_class

end_unit

