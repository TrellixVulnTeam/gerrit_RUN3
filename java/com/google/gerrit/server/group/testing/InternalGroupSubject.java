begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.testing
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertAbout
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|BooleanSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|ComparableSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|FailureMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|IterableSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|StringSubject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_class
DECL|class|InternalGroupSubject
specifier|public
class|class
name|InternalGroupSubject
extends|extends
name|Subject
block|{
DECL|method|assertThat (InternalGroup group)
specifier|public
specifier|static
name|InternalGroupSubject
name|assertThat
parameter_list|(
name|InternalGroup
name|group
parameter_list|)
block|{
return|return
name|assertAbout
argument_list|(
name|internalGroups
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|group
argument_list|)
return|;
block|}
DECL|method|internalGroups ()
specifier|public
specifier|static
name|Subject
operator|.
name|Factory
argument_list|<
name|InternalGroupSubject
argument_list|,
name|InternalGroup
argument_list|>
name|internalGroups
parameter_list|()
block|{
return|return
name|InternalGroupSubject
operator|::
operator|new
return|;
block|}
DECL|field|group
specifier|private
specifier|final
name|InternalGroup
name|group
decl_stmt|;
DECL|method|InternalGroupSubject (FailureMetadata metadata, InternalGroup group)
specifier|private
name|InternalGroupSubject
parameter_list|(
name|FailureMetadata
name|metadata
parameter_list|,
name|InternalGroup
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
DECL|method|groupUuid ()
specifier|public
name|ComparableSubject
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupUuid
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getGroupUUID()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|nameKey ()
specifier|public
name|ComparableSubject
argument_list|<
name|AccountGroup
operator|.
name|NameKey
argument_list|>
name|nameKey
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getNameKey()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getNameKey
argument_list|()
argument_list|)
return|;
block|}
DECL|method|name ()
specifier|public
name|StringSubject
name|name
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getName()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|id ()
specifier|public
name|Subject
name|id
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getId()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|description ()
specifier|public
name|StringSubject
name|description
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getDescription()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ownerGroupUuid ()
specifier|public
name|ComparableSubject
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|ownerGroupUuid
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getOwnerGroupUUID()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getOwnerGroupUUID
argument_list|()
argument_list|)
return|;
block|}
DECL|method|visibleToAll ()
specifier|public
name|BooleanSubject
name|visibleToAll
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"isVisibleToAll()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|isVisibleToAll
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createdOn ()
specifier|public
name|ComparableSubject
argument_list|<
name|Timestamp
argument_list|>
name|createdOn
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getCreatedOn()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
return|;
block|}
DECL|method|members ()
specifier|public
name|IterableSubject
name|members
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getMembers()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getMembers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|subgroups ()
specifier|public
name|IterableSubject
name|subgroups
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getSubgroups()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getSubgroups
argument_list|()
argument_list|)
return|;
block|}
DECL|method|refState ()
specifier|public
name|ComparableSubject
argument_list|<
name|ObjectId
argument_list|>
name|refState
parameter_list|()
block|{
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|check
argument_list|(
literal|"getRefState()"
argument_list|)
operator|.
name|that
argument_list|(
name|group
operator|.
name|getRefState
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

