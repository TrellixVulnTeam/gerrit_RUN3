begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.group.testing
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupMembership
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Implementation of GroupBackend for tests. */
end_comment

begin_class
DECL|class|TestGroupBackend
specifier|public
class|class
name|TestGroupBackend
implements|implements
name|GroupBackend
block|{
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"testbackend:"
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|Map
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|,
name|GroupDescription
operator|.
name|Basic
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Create a group by name.    *    * @param name the group name, optionally prefixed by "testbackend:".    * @return the created group    */
DECL|method|create (String name)
specifier|public
name|GroupDescription
operator|.
name|Basic
name|create
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|create
argument_list|(
name|AccountGroup
operator|.
name|uuid
argument_list|(
name|name
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
condition|?
name|name
else|:
name|PREFIX
operator|+
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a group by UUID.    *    * @param uuid the group UUID to add.    * @return the created group    */
DECL|method|create (AccountGroup.UUID uuid)
specifier|public
name|GroupDescription
operator|.
name|Basic
name|create
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
name|checkState
argument_list|(
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
argument_list|,
literal|"test group UUID must have prefix '"
operator|+
name|PREFIX
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|groups
operator|.
name|containsKey
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
return|return
name|groups
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
name|GroupDescription
operator|.
name|Basic
name|group
init|=
operator|new
name|GroupDescription
operator|.
name|Basic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AccountGroup
operator|.
name|UUID
name|getGroupUUID
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|uuid
operator|.
name|get
argument_list|()
operator|.
name|substring
argument_list|(
name|PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEmailAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
comment|/**    * Remove a group. No-op if the group does not exist.    *    * @param uuid the group.    */
DECL|method|remove (AccountGroup.UUID uuid)
specifier|public
name|void
name|remove
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
name|groups
operator|.
name|remove
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handles (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|handles
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|uuid
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|get (AccountGroup.UUID uuid)
specifier|public
name|GroupDescription
operator|.
name|Basic
name|get
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|uuid
operator|==
literal|null
condition|?
literal|null
else|:
name|groups
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|suggest (String name, ProjectState project)
specifier|public
name|Collection
argument_list|<
name|GroupReference
argument_list|>
name|suggest
parameter_list|(
name|String
name|name
parameter_list|,
name|ProjectState
name|project
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|membershipsOf (IdentifiedUser user)
specifier|public
name|GroupMembership
name|membershipsOf
parameter_list|(
name|IdentifiedUser
name|user
parameter_list|)
block|{
return|return
name|GroupMembership
operator|.
name|EMPTY
return|;
block|}
annotation|@
name|Override
DECL|method|isVisibleToAll (AccountGroup.UUID uuid)
specifier|public
name|boolean
name|isVisibleToAll
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

