begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.submit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|Attempt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRequirement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmitInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter0
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|InternalUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|NotifyUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeTip
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|MergeValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeOpRepoManager
operator|.
name|OpenBranch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
operator|.
name|MergeOpRepoManager
operator|.
name|OpenRepo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_comment
comment|/**  * Merges changes in submission order into a single branch.  *  *<p>Branches are reduced to the minimum number of heads needed to merge everything. This allows  * commits to be entered into the queue in any order (such as ancestors before descendants) and only  * the most recent commit on any line of development will be merged. All unmerged commits along a  * line of development must be in the submission queue in order to merge the tip of that line.  *  *<p>Conflicts are handled by discarding the entire line of development and marking it as  * conflicting, even if an earlier commit along that same line can be merged cleanly.  */
end_comment

begin_class
DECL|class|MergeOp
specifier|public
class|class
name|MergeOp
implements|implements
name|AutoCloseable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|SUBMIT_RULE_OPTIONS
specifier|private
specifier|static
specifier|final
name|SubmitRuleOptions
name|SUBMIT_RULE_OPTIONS
init|=
name|SubmitRuleOptions
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|SUBMIT_RULE_OPTIONS_ALLOW_CLOSED
specifier|private
specifier|static
specifier|final
name|SubmitRuleOptions
name|SUBMIT_RULE_OPTIONS_ALLOW_CLOSED
init|=
name|SUBMIT_RULE_OPTIONS
operator|.
name|toBuilder
argument_list|()
operator|.
name|allowClosed
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|class|CommitStatus
specifier|public
specifier|static
class|class
name|CommitStatus
block|{
DECL|field|changes
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeData
argument_list|>
name|changes
decl_stmt|;
DECL|field|byBranch
specifier|private
specifier|final
name|ImmutableSetMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|byBranch
decl_stmt|;
DECL|field|commits
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|CodeReviewCommit
argument_list|>
name|commits
decl_stmt|;
DECL|field|problems
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|problems
decl_stmt|;
DECL|field|allowClosed
specifier|private
specifier|final
name|boolean
name|allowClosed
decl_stmt|;
DECL|method|CommitStatus (ChangeSet cs, boolean allowClosed)
specifier|private
name|CommitStatus
parameter_list|(
name|ChangeSet
name|cs
parameter_list|,
name|boolean
name|allowClosed
parameter_list|)
throws|throws
name|OrmException
block|{
name|checkArgument
argument_list|(
operator|!
name|cs
operator|.
name|furtherHiddenChanges
argument_list|()
argument_list|,
literal|"CommitStatus must not be called with hidden changes"
argument_list|)
expr_stmt|;
name|changes
operator|=
name|cs
operator|.
name|changesById
argument_list|()
expr_stmt|;
name|ImmutableSetMultimap
operator|.
name|Builder
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|bb
init|=
name|ImmutableSetMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|bb
operator|.
name|put
argument_list|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byBranch
operator|=
name|bb
operator|.
name|build
argument_list|()
expr_stmt|;
name|commits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|problems
operator|=
name|MultimapBuilder
operator|.
name|treeKeys
argument_list|(
name|comparing
argument_list|(
name|Change
operator|.
name|Id
operator|::
name|get
argument_list|)
argument_list|)
operator|.
name|arrayListValues
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|allowClosed
operator|=
name|allowClosed
expr_stmt|;
block|}
DECL|method|getChangeIds ()
specifier|public
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|getChangeIds
parameter_list|()
block|{
return|return
name|changes
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getChangeIds (Branch.NameKey branch)
specifier|public
name|ImmutableSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|getChangeIds
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
return|return
name|byBranch
operator|.
name|get
argument_list|(
name|branch
argument_list|)
return|;
block|}
DECL|method|get (Change.Id changeId)
specifier|public
name|CodeReviewCommit
name|get
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
return|return
name|commits
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
return|;
block|}
DECL|method|put (CodeReviewCommit c)
specifier|public
name|void
name|put
parameter_list|(
name|CodeReviewCommit
name|c
parameter_list|)
block|{
name|commits
operator|.
name|put
argument_list|(
name|c
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|problem (Change.Id id, String problem)
specifier|public
name|void
name|problem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|problem
parameter_list|)
block|{
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|problem
argument_list|)
expr_stmt|;
block|}
DECL|method|logProblem (Change.Id id, Throwable t)
specifier|public
name|void
name|logProblem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error reading change"
decl_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|t
argument_list|)
operator|.
name|log
argument_list|(
literal|"%s %s"
argument_list|,
name|msg
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|logProblem (Change.Id id, String msg)
specifier|public
name|void
name|logProblem
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s %s"
argument_list|,
name|msg
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|problems
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|isOk ()
specifier|public
name|boolean
name|isOk
parameter_list|()
block|{
return|return
name|problems
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getProblems ()
specifier|public
name|ImmutableListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|String
argument_list|>
name|getProblems
parameter_list|()
block|{
return|return
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|problems
argument_list|)
return|;
block|}
DECL|method|getSubmitRecords (Change.Id id)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
comment|// Use the cached submit records from the original ChangeData in the input
comment|// ChangeSet, which were checked earlier in the integrate process. Even in
comment|// the case of a race where the submit records may have changed, it makes
comment|// more sense to store the original results of the submit rule evaluator
comment|// than to fail at this point.
comment|//
comment|// However, do NOT expose that ChangeData directly, as it is way out of
comment|// date by this point.
name|ChangeData
name|cd
init|=
name|checkNotNull
argument_list|(
name|changes
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"ChangeData for %s"
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
name|checkNotNull
argument_list|(
name|cd
operator|.
name|getSubmitRecords
argument_list|(
name|submitRuleOptions
argument_list|(
name|allowClosed
argument_list|)
argument_list|)
argument_list|,
literal|"getSubmitRecord only valid after submit rules are evalutated"
argument_list|)
return|;
block|}
DECL|method|maybeFailVerbose ()
specifier|public
name|void
name|maybeFailVerbose
parameter_list|()
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|isOk
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
literal|"Failed to submit "
operator|+
name|changes
operator|.
name|size
argument_list|()
operator|+
literal|" change"
operator|+
operator|(
name|changes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|" due to the following problems:\n"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|problems
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Change
operator|.
name|Id
name|id
range|:
name|problems
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ps
operator|.
name|add
argument_list|(
literal|"Change "
operator|+
name|id
operator|+
literal|": "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|problems
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|msg
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|join
argument_list|(
name|ps
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|maybeFail (String msgPrefix)
specifier|public
name|void
name|maybeFail
parameter_list|(
name|String
name|msgPrefix
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
if|if
condition|(
name|isOk
argument_list|()
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
name|msgPrefix
argument_list|)
operator|.
name|append
argument_list|(
literal|" of change"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|ids
init|=
name|problems
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"s "
argument_list|)
operator|.
name|append
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|cmUtil
specifier|private
specifier|final
name|ChangeMessagesUtil
name|cmUtil
decl_stmt|;
DECL|field|batchUpdateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
decl_stmt|;
DECL|field|internalUserFactory
specifier|private
specifier|final
name|InternalUser
operator|.
name|Factory
name|internalUserFactory
decl_stmt|;
DECL|field|mergeSuperSet
specifier|private
specifier|final
name|MergeSuperSet
name|mergeSuperSet
decl_stmt|;
DECL|field|mergeValidatorsFactory
specifier|private
specifier|final
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
decl_stmt|;
DECL|field|queryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|submitStrategyFactory
specifier|private
specifier|final
name|SubmitStrategyFactory
name|submitStrategyFactory
decl_stmt|;
DECL|field|subOpFactory
specifier|private
specifier|final
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
decl_stmt|;
DECL|field|ormProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|ormProvider
decl_stmt|;
DECL|field|notifyUtil
specifier|private
specifier|final
name|NotifyUtil
name|notifyUtil
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|changeDataFactory
specifier|private
specifier|final
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|ts
specifier|private
name|Timestamp
name|ts
decl_stmt|;
DECL|field|submissionId
specifier|private
name|RequestId
name|submissionId
decl_stmt|;
DECL|field|caller
specifier|private
name|IdentifiedUser
name|caller
decl_stmt|;
DECL|field|orm
specifier|private
name|MergeOpRepoManager
name|orm
decl_stmt|;
DECL|field|commitStatus
specifier|private
name|CommitStatus
name|commitStatus
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|submitInput
specifier|private
name|SubmitInput
name|submitInput
decl_stmt|;
DECL|field|accountsToNotify
specifier|private
name|ListMultimap
argument_list|<
name|RecipientType
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountsToNotify
decl_stmt|;
DECL|field|allProjects
specifier|private
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|allProjects
decl_stmt|;
DECL|field|dryrun
specifier|private
name|boolean
name|dryrun
decl_stmt|;
DECL|field|topicMetrics
specifier|private
name|TopicMetrics
name|topicMetrics
decl_stmt|;
annotation|@
name|Inject
DECL|method|MergeOp ( ChangeMessagesUtil cmUtil, BatchUpdate.Factory batchUpdateFactory, InternalUser.Factory internalUserFactory, MergeSuperSet mergeSuperSet, MergeValidators.Factory mergeValidatorsFactory, Provider<InternalChangeQuery> queryProvider, SubmitStrategyFactory submitStrategyFactory, SubmoduleOp.Factory subOpFactory, Provider<MergeOpRepoManager> ormProvider, NotifyUtil notifyUtil, TopicMetrics topicMetrics, RetryHelper retryHelper, ChangeData.Factory changeDataFactory)
name|MergeOp
parameter_list|(
name|ChangeMessagesUtil
name|cmUtil
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
parameter_list|,
name|InternalUser
operator|.
name|Factory
name|internalUserFactory
parameter_list|,
name|MergeSuperSet
name|mergeSuperSet
parameter_list|,
name|MergeValidators
operator|.
name|Factory
name|mergeValidatorsFactory
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
parameter_list|,
name|SubmitStrategyFactory
name|submitStrategyFactory
parameter_list|,
name|SubmoduleOp
operator|.
name|Factory
name|subOpFactory
parameter_list|,
name|Provider
argument_list|<
name|MergeOpRepoManager
argument_list|>
name|ormProvider
parameter_list|,
name|NotifyUtil
name|notifyUtil
parameter_list|,
name|TopicMetrics
name|topicMetrics
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
parameter_list|)
block|{
name|this
operator|.
name|cmUtil
operator|=
name|cmUtil
expr_stmt|;
name|this
operator|.
name|batchUpdateFactory
operator|=
name|batchUpdateFactory
expr_stmt|;
name|this
operator|.
name|internalUserFactory
operator|=
name|internalUserFactory
expr_stmt|;
name|this
operator|.
name|mergeSuperSet
operator|=
name|mergeSuperSet
expr_stmt|;
name|this
operator|.
name|mergeValidatorsFactory
operator|=
name|mergeValidatorsFactory
expr_stmt|;
name|this
operator|.
name|queryProvider
operator|=
name|queryProvider
expr_stmt|;
name|this
operator|.
name|submitStrategyFactory
operator|=
name|submitStrategyFactory
expr_stmt|;
name|this
operator|.
name|subOpFactory
operator|=
name|subOpFactory
expr_stmt|;
name|this
operator|.
name|ormProvider
operator|=
name|ormProvider
expr_stmt|;
name|this
operator|.
name|notifyUtil
operator|=
name|notifyUtil
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|topicMetrics
operator|=
name|topicMetrics
expr_stmt|;
name|this
operator|.
name|changeDataFactory
operator|=
name|changeDataFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|orm
operator|!=
literal|null
condition|)
block|{
name|orm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkSubmitRule (ChangeData cd, boolean allowClosed)
specifier|public
specifier|static
name|void
name|checkSubmitRule
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|allowClosed
parameter_list|)
throws|throws
name|ResourceConflictException
throws|,
name|OrmException
block|{
name|PatchSet
name|patchSet
init|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|patchSet
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"missing current patch set for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|results
init|=
name|getSubmitRecords
argument_list|(
name|cd
argument_list|,
name|allowClosed
argument_list|)
decl_stmt|;
if|if
condition|(
name|SubmitRecord
operator|.
name|allRecordsOK
argument_list|(
name|results
argument_list|)
condition|)
block|{
comment|// Rules supplied a valid solution.
return|return;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s"
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|patchSet
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|SubmitRecord
name|record
range|:
name|results
control|)
block|{
switch|switch
condition|(
name|record
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
break|break;
case|case
name|CLOSED
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"change is closed"
argument_list|)
throw|;
case|case
name|RULE_ERROR
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
literal|"submit rule error: "
operator|+
name|record
operator|.
name|errorMessage
argument_list|)
throw|;
case|case
name|NOT_READY
case|:
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|describeNotReady
argument_list|(
name|cd
argument_list|,
name|record
argument_list|)
argument_list|)
throw|;
case|case
name|FORCED
case|:
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected SubmitRecord status %s for %s in %s"
argument_list|,
name|record
operator|.
name|status
argument_list|,
name|patchSet
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|submitRuleOptions (boolean allowClosed)
specifier|private
specifier|static
name|SubmitRuleOptions
name|submitRuleOptions
parameter_list|(
name|boolean
name|allowClosed
parameter_list|)
block|{
return|return
name|allowClosed
condition|?
name|SUBMIT_RULE_OPTIONS_ALLOW_CLOSED
else|:
name|SUBMIT_RULE_OPTIONS
return|;
block|}
DECL|method|getSubmitRecords (ChangeData cd, boolean allowClosed)
specifier|private
specifier|static
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|getSubmitRecords
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|boolean
name|allowClosed
parameter_list|)
block|{
return|return
name|cd
operator|.
name|submitRecords
argument_list|(
name|submitRuleOptions
argument_list|(
name|allowClosed
argument_list|)
argument_list|)
return|;
block|}
DECL|method|describeNotReady (ChangeData cd, SubmitRecord record)
specifier|private
specifier|static
name|String
name|describeNotReady
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|SubmitRecord
name|record
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|blockingConditions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
name|blockingConditions
operator|.
name|add
argument_list|(
name|describeLabels
argument_list|(
name|cd
argument_list|,
name|record
operator|.
name|labels
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|record
operator|.
name|requirements
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|requirements
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SubmitRequirement
operator|::
name|fallbackText
argument_list|)
operator|.
name|forEach
argument_list|(
name|blockingConditions
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|blockingConditions
argument_list|)
return|;
block|}
DECL|method|describeLabels (ChangeData cd, List<SubmitRecord.Label> labels)
specifier|private
specifier|static
name|String
name|describeLabels
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|List
argument_list|<
name|SubmitRecord
operator|.
name|Label
argument_list|>
name|labels
parameter_list|)
throws|throws
name|OrmException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|labelResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubmitRecord
operator|.
name|Label
name|lbl
range|:
name|labels
control|)
block|{
switch|switch
condition|(
name|lbl
operator|.
name|status
condition|)
block|{
case|case
name|OK
case|:
case|case
name|MAY
case|:
break|break;
case|case
name|REJECT
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"blocked by "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEED
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"needs "
operator|+
name|lbl
operator|.
name|label
argument_list|)
expr_stmt|;
break|break;
case|case
name|IMPOSSIBLE
case|:
name|labelResults
operator|.
name|add
argument_list|(
literal|"needs "
operator|+
name|lbl
operator|.
name|label
operator|+
literal|" (check project access)"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported SubmitRecord.Label %s for %s in %s"
argument_list|,
name|lbl
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"; "
argument_list|)
operator|.
name|join
argument_list|(
name|labelResults
argument_list|)
return|;
block|}
DECL|method|checkSubmitRulesAndState (ChangeSet cs, boolean allowMerged)
specifier|private
name|void
name|checkSubmitRulesAndState
parameter_list|(
name|ChangeSet
name|cs
parameter_list|,
name|boolean
name|allowMerged
parameter_list|)
throws|throws
name|ResourceConflictException
block|{
name|checkArgument
argument_list|(
operator|!
name|cs
operator|.
name|furtherHiddenChanges
argument_list|()
argument_list|,
literal|"checkSubmitRulesAndState called for topic with hidden change"
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
try|try
block|{
name|Change
operator|.
name|Status
name|status
init|=
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|status
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
operator|&&
name|allowMerged
operator|)
condition|)
block|{
name|commitStatus
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" is "
operator|+
name|cd
operator|.
name|change
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cd
operator|.
name|change
argument_list|()
operator|.
name|isWorkInProgress
argument_list|()
condition|)
block|{
name|commitStatus
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" is work in progress"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkSubmitRule
argument_list|(
name|cd
argument_list|,
name|allowMerged
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|commitStatus
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error checking submit rules for change"
decl_stmt|;
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"%s %s"
argument_list|,
name|msg
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commitStatus
operator|.
name|problem
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
name|commitStatus
operator|.
name|maybeFailVerbose
argument_list|()
expr_stmt|;
block|}
DECL|method|bypassSubmitRules (ChangeSet cs, boolean allowClosed)
specifier|private
name|void
name|bypassSubmitRules
parameter_list|(
name|ChangeSet
name|cs
parameter_list|,
name|boolean
name|allowClosed
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|cs
operator|.
name|furtherHiddenChanges
argument_list|()
argument_list|,
literal|"cannot bypass submit rules for topic with hidden change"
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cs
operator|.
name|changes
argument_list|()
control|)
block|{
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getSubmitRecords
argument_list|(
name|cd
argument_list|,
name|allowClosed
argument_list|)
argument_list|)
decl_stmt|;
name|SubmitRecord
name|forced
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|forced
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|FORCED
expr_stmt|;
name|records
operator|.
name|add
argument_list|(
name|forced
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setSubmitRecords
argument_list|(
name|submitRuleOptions
argument_list|(
name|allowClosed
argument_list|)
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merges the given change.    *    *<p>Depending on the server configuration, more changes may be affected, e.g. by submission of a    * topic or via superproject subscriptions. All affected changes are integrated using the projects    * integration strategy.    *    * @param db the review database.    * @param change the change to be merged.    * @param caller the identity of the caller    * @param checkSubmitRules whether the prolog submit rules should be evaluated    * @param submitInput parameters regarding the merge    * @throws OrmException an error occurred reading or writing the database.    * @throws RestApiException if an error occurred.    * @throws PermissionBackendException if permissions can't be checked    * @throws IOException an error occurred reading from NoteDb.    */
DECL|method|merge ( ReviewDb db, Change change, IdentifiedUser caller, boolean checkSubmitRules, SubmitInput submitInput, boolean dryrun)
specifier|public
name|void
name|merge
parameter_list|(
name|ReviewDb
name|db
parameter_list|,
name|Change
name|change
parameter_list|,
name|IdentifiedUser
name|caller
parameter_list|,
name|boolean
name|checkSubmitRules
parameter_list|,
name|SubmitInput
name|submitInput
parameter_list|,
name|boolean
name|dryrun
parameter_list|)
throws|throws
name|OrmException
throws|,
name|RestApiException
throws|,
name|UpdateException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
throws|,
name|PermissionBackendException
block|{
name|this
operator|.
name|submitInput
operator|=
name|submitInput
expr_stmt|;
name|this
operator|.
name|accountsToNotify
operator|=
name|notifyUtil
operator|.
name|resolveAccounts
argument_list|(
name|submitInput
operator|.
name|notifyDetails
argument_list|)
expr_stmt|;
name|this
operator|.
name|dryrun
operator|=
name|dryrun
expr_stmt|;
name|this
operator|.
name|caller
operator|=
name|caller
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|submissionId
operator|=
operator|new
name|RequestId
argument_list|(
name|change
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|TraceContext
name|traceContext
init|=
name|TraceContext
operator|.
name|open
argument_list|()
operator|.
name|addTag
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|SUBMISSION_ID
argument_list|,
name|submissionId
argument_list|)
init|)
block|{
name|openRepoManager
argument_list|()
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Beginning integration of %s"
argument_list|,
name|change
argument_list|)
expr_stmt|;
try|try
block|{
name|ChangeSet
name|indexBackedChangeSet
init|=
name|mergeSuperSet
operator|.
name|setMergeOpRepoManager
argument_list|(
name|orm
argument_list|)
operator|.
name|completeChangeSet
argument_list|(
name|db
argument_list|,
name|change
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexBackedChangeSet
operator|.
name|ids
argument_list|()
operator|.
name|contains
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|"change %s missing from %s"
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|indexBackedChangeSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexBackedChangeSet
operator|.
name|furtherHiddenChanges
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"A change to be submitted with "
operator|+
name|change
operator|.
name|getId
argument_list|()
operator|+
literal|" is not visible"
argument_list|)
throw|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Calculated to merge %s"
argument_list|,
name|indexBackedChangeSet
argument_list|)
expr_stmt|;
comment|// Reload ChangeSet so that we don't rely on (potentially) stale index data for merging
name|ChangeSet
name|cs
init|=
name|reloadChanges
argument_list|(
name|indexBackedChangeSet
argument_list|)
decl_stmt|;
comment|// Count cross-project submissions outside of the retry loop. The chance of a single project
comment|// failing increases with the number of projects, so the failure count would be inflated if
comment|// this metric were incremented inside of integrateIntoHistory.
name|int
name|projects
init|=
name|cs
operator|.
name|projects
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|projects
operator|>
literal|1
condition|)
block|{
name|topicMetrics
operator|.
name|topicSubmissions
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|RetryTracker
name|retryTracker
init|=
operator|new
name|RetryTracker
argument_list|()
decl_stmt|;
name|retryHelper
operator|.
name|execute
argument_list|(
name|updateFactory
lambda|->
block|{
name|long
name|attempt
init|=
name|retryTracker
operator|.
name|lastAttemptNumber
operator|+
literal|1
decl_stmt|;
name|boolean
name|isRetry
init|=
name|attempt
operator|>
literal|1
decl_stmt|;
if|if
condition|(
name|isRetry
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Retrying, attempt #%d; skipping merged changes"
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
expr_stmt|;
name|openRepoManager
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|commitStatus
operator|=
operator|new
name|CommitStatus
argument_list|(
name|cs
argument_list|,
name|isRetry
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkSubmitRules
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Checking submit rules and state"
argument_list|)
expr_stmt|;
name|checkSubmitRulesAndState
argument_list|(
name|cs
argument_list|,
name|isRetry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Bypassing submit rules"
argument_list|)
expr_stmt|;
name|bypassSubmitRules
argument_list|(
name|cs
argument_list|,
name|isRetry
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|integrateIntoHistory
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IntegrationException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error from integrateIntoHistory"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
argument_list|,
name|RetryHelper
operator|.
name|options
argument_list|()
operator|.
name|listener
argument_list|(
name|retryTracker
argument_list|)
comment|// Up to the entire submit operation is retried, including possibly many projects.
comment|// Multiply the timeout by the number of projects we're actually attempting to
comment|// submit.
operator|.
name|timeout
argument_list|(
name|retryHelper
operator|.
name|getDefaultTimeout
argument_list|(
name|ActionType
operator|.
name|CHANGE_UPDATE
argument_list|)
operator|.
name|multipliedBy
argument_list|(
name|cs
operator|.
name|projects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projects
operator|>
literal|1
condition|)
block|{
name|topicMetrics
operator|.
name|topicSubmissionsCompleted
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Anything before the merge attempt is an error
throw|throw
operator|new
name|OrmException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|openRepoManager ()
specifier|private
name|void
name|openRepoManager
parameter_list|()
block|{
if|if
condition|(
name|orm
operator|!=
literal|null
condition|)
block|{
name|orm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|orm
operator|=
name|ormProvider
operator|.
name|get
argument_list|()
expr_stmt|;
name|orm
operator|.
name|setContext
argument_list|(
name|db
argument_list|,
name|ts
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
DECL|method|reloadChanges (ChangeSet changeSet)
specifier|private
name|ChangeSet
name|reloadChanges
parameter_list|(
name|ChangeSet
name|changeSet
parameter_list|)
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|visible
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changeSet
operator|.
name|changes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|nonVisible
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changeSet
operator|.
name|nonVisibleChanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|changeSet
operator|.
name|changes
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|visible
operator|.
name|add
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|project
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changeSet
operator|.
name|nonVisibleChanges
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|nonVisible
operator|.
name|add
argument_list|(
name|changeDataFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|c
operator|.
name|project
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ChangeSet
argument_list|(
name|visible
argument_list|,
name|nonVisible
argument_list|)
return|;
block|}
DECL|class|RetryTracker
specifier|private
class|class
name|RetryTracker
implements|implements
name|RetryListener
block|{
DECL|field|lastAttemptNumber
name|long
name|lastAttemptNumber
decl_stmt|;
annotation|@
name|Override
DECL|method|onRetry (Attempt<V> attempt)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|onRetry
parameter_list|(
name|Attempt
argument_list|<
name|V
argument_list|>
name|attempt
parameter_list|)
block|{
name|lastAttemptNumber
operator|=
name|attempt
operator|.
name|getAttemptNumber
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Singleton
DECL|class|TopicMetrics
specifier|private
specifier|static
class|class
name|TopicMetrics
block|{
DECL|field|topicSubmissions
specifier|final
name|Counter0
name|topicSubmissions
decl_stmt|;
DECL|field|topicSubmissionsCompleted
specifier|final
name|Counter0
name|topicSubmissionsCompleted
decl_stmt|;
annotation|@
name|Inject
DECL|method|TopicMetrics (MetricMaker metrics)
name|TopicMetrics
parameter_list|(
name|MetricMaker
name|metrics
parameter_list|)
block|{
name|topicSubmissions
operator|=
name|metrics
operator|.
name|newCounter
argument_list|(
literal|"topic/cross_project_submit"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Attempts at cross project topic submission"
argument_list|)
operator|.
name|setRate
argument_list|()
argument_list|)
expr_stmt|;
name|topicSubmissionsCompleted
operator|=
name|metrics
operator|.
name|newCounter
argument_list|(
literal|"topic/cross_project_submit_completed"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Cross project topic submissions that concluded successfully"
argument_list|)
operator|.
name|setRate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|integrateIntoHistory (ChangeSet cs)
specifier|private
name|void
name|integrateIntoHistory
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
throws|throws
name|IntegrationException
throws|,
name|RestApiException
throws|,
name|UpdateException
block|{
name|checkArgument
argument_list|(
operator|!
name|cs
operator|.
name|furtherHiddenChanges
argument_list|()
argument_list|,
literal|"cannot integrate hidden changes into history"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Beginning merge attempt on %s"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|BranchBatch
argument_list|>
name|toSubmit
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|ChangeData
argument_list|>
name|cbb
decl_stmt|;
try|try
block|{
name|cbb
operator|=
name|cs
operator|.
name|changesByBranch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Error reading changes to submit"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|branches
init|=
name|cbb
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|branches
control|)
block|{
name|OpenRepo
name|or
init|=
name|openRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|or
operator|!=
literal|null
condition|)
block|{
name|toSubmit
operator|.
name|put
argument_list|(
name|branch
argument_list|,
name|validateChangeList
argument_list|(
name|or
argument_list|,
name|cbb
operator|.
name|get
argument_list|(
name|branch
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Done checks that don't involve running submit strategies.
name|commitStatus
operator|.
name|maybeFailVerbose
argument_list|()
expr_stmt|;
try|try
block|{
name|SubmoduleOp
name|submoduleOp
init|=
name|subOpFactory
operator|.
name|create
argument_list|(
name|branches
argument_list|,
name|orm
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SubmitStrategy
argument_list|>
name|strategies
init|=
name|getSubmitStrategies
argument_list|(
name|toSubmit
argument_list|,
name|submoduleOp
argument_list|,
name|dryrun
argument_list|)
decl_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|submoduleOp
operator|.
name|getProjectsInOrder
argument_list|()
expr_stmt|;
name|batchUpdateFactory
operator|.
name|execute
argument_list|(
name|orm
operator|.
name|batchUpdates
argument_list|(
name|allProjects
argument_list|)
argument_list|,
operator|new
name|SubmitStrategyListener
argument_list|(
name|submitInput
argument_list|,
name|strategies
argument_list|,
name|commitStatus
argument_list|)
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SubmoduleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|LockFailureException
condition|)
block|{
comment|// Lock failures are a special case: RetryHelper depends on this specific causal chain in
comment|// order to trigger a retry. The downside of throwing here is we will not get the nicer
comment|// error message constructed below, in the case where this is the final attempt and the
comment|// operation is not retried further. This is not a huge downside, and is hopefully so rare
comment|// as to be unnoticeable, assuming RetryHelper is retrying sufficiently.
throw|throw
name|e
throw|;
block|}
comment|// BatchUpdate may have inadvertently wrapped an IntegrationException
comment|// thrown by some legacy SubmitStrategyOp code that intended the error
comment|// message to be user-visible. Copy the message from the wrapped
comment|// exception.
comment|//
comment|// If you happen across one of these, the correct fix is to convert the
comment|// inner IntegrationException to a ResourceConflictException.
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IntegrationException
condition|)
block|{
name|msg
operator|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|genericMergeError
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IntegrationException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getAllProjects ()
specifier|public
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|getAllProjects
parameter_list|()
block|{
return|return
name|allProjects
return|;
block|}
DECL|method|getMergeOpRepoManager ()
specifier|public
name|MergeOpRepoManager
name|getMergeOpRepoManager
parameter_list|()
block|{
return|return
name|orm
return|;
block|}
DECL|method|getSubmitStrategies ( Map<Branch.NameKey, BranchBatch> toSubmit, SubmoduleOp submoduleOp, boolean dryrun)
specifier|private
name|List
argument_list|<
name|SubmitStrategy
argument_list|>
name|getSubmitStrategies
parameter_list|(
name|Map
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|,
name|BranchBatch
argument_list|>
name|toSubmit
parameter_list|,
name|SubmoduleOp
name|submoduleOp
parameter_list|,
name|boolean
name|dryrun
parameter_list|)
throws|throws
name|IntegrationException
throws|,
name|NoSuchProjectException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|SubmitStrategy
argument_list|>
name|strategies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|allBranches
init|=
name|submoduleOp
operator|.
name|getBranchesInOrder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|allCommits
init|=
name|toSubmit
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BranchBatch
operator|::
name|commits
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Branch
operator|.
name|NameKey
name|branch
range|:
name|allBranches
control|)
block|{
name|OpenRepo
name|or
init|=
name|orm
operator|.
name|getRepo
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSubmit
operator|.
name|containsKey
argument_list|(
name|branch
argument_list|)
condition|)
block|{
name|BranchBatch
name|submitting
init|=
name|toSubmit
operator|.
name|get
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"adding ops for branch batch %s"
argument_list|,
name|submitting
argument_list|)
expr_stmt|;
name|OpenBranch
name|ob
init|=
name|or
operator|.
name|getBranch
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|submitting
operator|.
name|submitType
argument_list|()
argument_list|,
literal|"null submit type for %s; expected to previously fail fast"
argument_list|,
name|submitting
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commitsToSubmit
init|=
name|submitting
operator|.
name|commits
argument_list|()
decl_stmt|;
name|ob
operator|.
name|mergeTip
operator|=
operator|new
name|MergeTip
argument_list|(
name|ob
operator|.
name|oldTip
argument_list|,
name|commitsToSubmit
argument_list|)
expr_stmt|;
name|SubmitStrategy
name|strategy
init|=
name|submitStrategyFactory
operator|.
name|create
argument_list|(
name|submitting
operator|.
name|submitType
argument_list|()
argument_list|,
name|db
argument_list|,
name|or
operator|.
name|rw
argument_list|,
name|or
operator|.
name|canMergeFlag
argument_list|,
name|getAlreadyAccepted
argument_list|(
name|or
argument_list|,
name|ob
operator|.
name|oldTip
argument_list|)
argument_list|,
name|allCommits
argument_list|,
name|branch
argument_list|,
name|caller
argument_list|,
name|ob
operator|.
name|mergeTip
argument_list|,
name|commitStatus
argument_list|,
name|submissionId
argument_list|,
name|submitInput
argument_list|,
name|accountsToNotify
argument_list|,
name|submoduleOp
argument_list|,
name|dryrun
argument_list|)
decl_stmt|;
name|strategies
operator|.
name|add
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|addOps
argument_list|(
name|or
operator|.
name|getUpdate
argument_list|()
argument_list|,
name|commitsToSubmit
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitting
operator|.
name|submitType
argument_list|()
operator|.
name|equals
argument_list|(
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
argument_list|)
operator|&&
name|submoduleOp
operator|.
name|hasSubscription
argument_list|(
name|branch
argument_list|)
condition|)
block|{
name|submoduleOp
operator|.
name|addOp
argument_list|(
name|or
operator|.
name|getUpdate
argument_list|()
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no open change for this branch
comment|// add submodule triggered op into BatchUpdate
name|submoduleOp
operator|.
name|addOp
argument_list|(
name|or
operator|.
name|getUpdate
argument_list|()
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|strategies
return|;
block|}
DECL|method|getAlreadyAccepted (OpenRepo or, CodeReviewCommit branchTip)
specifier|private
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|getAlreadyAccepted
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|CodeReviewCommit
name|branchTip
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|Set
argument_list|<
name|RevCommit
argument_list|>
name|alreadyAccepted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchTip
operator|!=
literal|null
condition|)
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|branchTip
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Ref
name|r
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
control|)
block|{
try|try
block|{
name|CodeReviewCommit
name|aac
init|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|commitStatus
operator|.
name|commits
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|aac
argument_list|)
condition|)
block|{
name|alreadyAccepted
operator|.
name|add
argument_list|(
name|aac
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|iote
parameter_list|)
block|{
comment|// Not a commit? Skip over it.
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to determine already accepted commits."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Found %d existing heads: %s"
argument_list|,
name|alreadyAccepted
operator|.
name|size
argument_list|()
argument_list|,
name|alreadyAccepted
argument_list|)
expr_stmt|;
return|return
name|alreadyAccepted
return|;
block|}
annotation|@
name|AutoValue
DECL|class|BranchBatch
specifier|abstract
specifier|static
class|class
name|BranchBatch
block|{
annotation|@
name|Nullable
DECL|method|submitType ()
specifier|abstract
name|SubmitType
name|submitType
parameter_list|()
function_decl|;
DECL|method|commits ()
specifier|abstract
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commits
parameter_list|()
function_decl|;
block|}
DECL|method|validateChangeList (OpenRepo or, Collection<ChangeData> submitted)
specifier|private
name|BranchBatch
name|validateChangeList
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|submitted
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Validating %d changes"
argument_list|,
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|CodeReviewCommit
argument_list|>
name|toSubmit
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|submitted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
init|=
name|getRevisions
argument_list|(
name|or
argument_list|,
name|submitted
argument_list|)
decl_stmt|;
name|SubmitType
name|submitType
init|=
literal|null
decl_stmt|;
name|ChangeData
name|choseSubmitTypeFrom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|submitted
control|)
block|{
name|Change
operator|.
name|Id
name|changeId
init|=
name|cd
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeNotes
name|notes
decl_stmt|;
name|Change
name|chg
decl_stmt|;
name|SubmitType
name|st
decl_stmt|;
try|try
block|{
name|notes
operator|=
name|cd
operator|.
name|notes
argument_list|()
expr_stmt|;
name|chg
operator|=
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
name|st
operator|=
name|getSubmitType
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"No submit type for change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|submitType
operator|==
literal|null
condition|)
block|{
name|submitType
operator|=
name|st
expr_stmt|;
name|choseSubmitTypeFrom
operator|=
name|cd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st
operator|!=
name|submitType
condition|)
block|{
name|commitStatus
operator|.
name|problem
argument_list|(
name|changeId
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Change has submit type %s, but previously chose submit type %s "
operator|+
literal|"from change %s in the same batch"
argument_list|,
name|st
argument_list|,
name|submitType
argument_list|,
name|choseSubmitTypeFrom
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|chg
operator|.
name|currentPatchSetId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Missing current patch set on change"
decl_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s %s"
argument_list|,
name|msg
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|commitStatus
operator|.
name|problem
argument_list|(
name|changeId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PatchSet
name|ps
decl_stmt|;
name|Branch
operator|.
name|NameKey
name|destBranch
init|=
name|chg
operator|.
name|getDest
argument_list|()
decl_stmt|;
try|try
block|{
name|ps
operator|=
name|cd
operator|.
name|currentPatchSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ps
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Missing patch set or revision on change"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|idstr
init|=
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectId
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|ObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|revisions
operator|.
name|containsEntry
argument_list|(
name|id
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|revisions
operator|.
name|containsValue
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO This is actually an error, the patch set ref exists but points to a revision that
comment|// is different from the revision that we have stored for the patch set in the change
comment|// meta data.
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Revision "
operator|+
name|idstr
operator|+
literal|" of patch set "
operator|+
name|ps
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" does not match the revision of the patch set ref "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// The patch set ref is not found but we want to merge the change. We can't safely do that
comment|// if the patch set ref is missing. In a multi-master setup this can indicate a replication
comment|// lag (e.g. the change meta data was already replicated, but the replication of the patch
comment|// set ref is still pending).
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
literal|"Patch set ref "
operator|+
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|toRefName
argument_list|()
operator|+
literal|" not found. Expected patch set ref of "
operator|+
name|ps
operator|.
name|getPatchSetId
argument_list|()
operator|+
literal|" to point to revision "
operator|+
name|idstr
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CodeReviewCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
name|or
operator|.
name|rw
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|changeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|setNotes
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|commit
operator|.
name|setPatchsetId
argument_list|(
name|ps
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|commitStatus
operator|.
name|put
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|MergeValidators
name|mergeValidators
init|=
name|mergeValidatorsFactory
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|mergeValidators
operator|.
name|validatePreMerge
argument_list|(
name|or
operator|.
name|repo
argument_list|,
name|commit
argument_list|,
name|or
operator|.
name|project
argument_list|,
name|destBranch
argument_list|,
name|ps
operator|.
name|getId
argument_list|()
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MergeValidationException
name|mve
parameter_list|)
block|{
name|commitStatus
operator|.
name|problem
argument_list|(
name|changeId
argument_list|,
name|mve
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commit
operator|.
name|add
argument_list|(
name|or
operator|.
name|canMergeFlag
argument_list|)
expr_stmt|;
name|toSubmit
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Submitting on this run: %s"
argument_list|,
name|toSubmit
argument_list|)
expr_stmt|;
return|return
operator|new
name|AutoValue_MergeOp_BranchBatch
argument_list|(
name|submitType
argument_list|,
name|toSubmit
argument_list|)
return|;
block|}
DECL|method|getRevisions (OpenRepo or, Collection<ChangeData> cds)
specifier|private
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|getRevisions
parameter_list|(
name|OpenRepo
name|or
parameter_list|,
name|Collection
argument_list|<
name|ChangeData
argument_list|>
name|cds
parameter_list|)
throws|throws
name|IntegrationException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|refNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|Change
name|c
init|=
name|cd
operator|.
name|change
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|refNames
operator|.
name|add
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SetMultimap
argument_list|<
name|ObjectId
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|revisions
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|(
name|cds
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|hashSetValues
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|e
range|:
name|or
operator|.
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|exactRef
argument_list|(
name|refNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|refNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|revisions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|revisions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Failed to validate changes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getSubmitType (ChangeData cd)
specifier|private
name|SubmitType
name|getSubmitType
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
name|SubmitTypeRecord
name|str
init|=
name|cd
operator|.
name|submitTypeRecord
argument_list|()
decl_stmt|;
return|return
name|str
operator|.
name|isOk
argument_list|()
condition|?
name|str
operator|.
name|type
else|:
literal|null
return|;
block|}
DECL|method|openRepo (Project.NameKey project)
specifier|private
name|OpenRepo
name|openRepo
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IntegrationException
block|{
try|try
block|{
return|return
name|orm
operator|.
name|getRepo
argument_list|(
name|project
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Project %s no longer exists, abandoning open changes."
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|abandonAllOpenChangeForDeletedProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Error opening project "
operator|+
name|project
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|abandonAllOpenChangeForDeletedProject (Project.NameKey destProject)
specifier|private
name|void
name|abandonAllOpenChangeForDeletedProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|destProject
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|ChangeData
name|cd
range|:
name|queryProvider
operator|.
name|get
argument_list|()
operator|.
name|byProjectOpen
argument_list|(
name|destProject
argument_list|)
control|)
block|{
try|try
init|(
name|BatchUpdate
name|bu
init|=
name|batchUpdateFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|destProject
argument_list|,
name|internalUserFactory
operator|.
name|create
argument_list|()
argument_list|,
name|ts
argument_list|)
init|)
block|{
name|bu
operator|.
name|addOp
argument_list|(
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|BatchUpdateOp
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|OrmException
block|{
name|Change
name|change
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|change
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
argument_list|)
expr_stmt|;
name|ChangeMessage
name|msg
init|=
name|ChangeMessagesUtil
operator|.
name|newMessage
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|,
name|internalUserFactory
operator|.
name|create
argument_list|()
argument_list|,
name|change
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_MERGED
argument_list|,
literal|"Project was deleted."
argument_list|)
decl_stmt|;
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|ctx
operator|.
name|getDb
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUpdate
argument_list|(
name|change
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|bu
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UpdateException
decl||
name|RestApiException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot abandon changes for deleted project %s"
argument_list|,
name|destProject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot abandon changes for deleted project %s"
argument_list|,
name|destProject
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|genericMergeError (ChangeSet cs)
specifier|private
name|String
name|genericMergeError
parameter_list|(
name|ChangeSet
name|cs
parameter_list|)
block|{
name|int
name|c
init|=
name|cs
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|1
condition|)
block|{
return|return
literal|"Error submitting change"
return|;
block|}
name|int
name|p
init|=
name|cs
operator|.
name|projects
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|1
condition|)
block|{
comment|// Fused updates: it's correct to say that none of the n changes were submitted.
return|return
literal|"Error submitting "
operator|+
name|c
operator|+
literal|" changes"
return|;
block|}
comment|// Multiple projects involved, but we don't know at this point what failed. At least give the
comment|// user a heads up that some changes may be unsubmitted, even if the change screen they land on
comment|// after the error message says that this particular change was submitted.
return|return
literal|"Error submitting some of the "
operator|+
name|c
operator|+
literal|" changes to one or more of the "
operator|+
name|p
operator|+
literal|" projects involved; some projects may have submitted successfully, but others may have"
operator|+
literal|" failed"
return|;
block|}
block|}
end_class

end_unit

