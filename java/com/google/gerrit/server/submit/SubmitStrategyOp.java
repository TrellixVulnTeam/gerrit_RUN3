begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.submit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|submit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ReviewerStateInternal
operator|.
name|REVIEWER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|LabelId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ApprovalsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeMessagesUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|LabelNormalizer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|CodeReviewCommit
operator|.
name|CodeReviewRevWalk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GroupCollector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MergeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdateOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|ChangeContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RepoContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_class
DECL|class|SubmitStrategyOp
specifier|abstract
class|class
name|SubmitStrategyOp
implements|implements
name|BatchUpdateOp
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|args
specifier|protected
specifier|final
name|SubmitStrategy
operator|.
name|Arguments
name|args
decl_stmt|;
DECL|field|toMerge
specifier|protected
specifier|final
name|CodeReviewCommit
name|toMerge
decl_stmt|;
DECL|field|command
specifier|private
name|ReceiveCommand
name|command
decl_stmt|;
DECL|field|submitter
specifier|private
name|PatchSetApproval
name|submitter
decl_stmt|;
DECL|field|mergeResultRev
specifier|private
name|ObjectId
name|mergeResultRev
decl_stmt|;
DECL|field|mergedPatchSet
specifier|private
name|PatchSet
name|mergedPatchSet
decl_stmt|;
DECL|field|updatedChange
specifier|private
name|Change
name|updatedChange
decl_stmt|;
DECL|field|alreadyMergedCommit
specifier|private
name|CodeReviewCommit
name|alreadyMergedCommit
decl_stmt|;
DECL|field|changeAlreadyMerged
specifier|private
name|boolean
name|changeAlreadyMerged
decl_stmt|;
DECL|method|SubmitStrategyOp (SubmitStrategy.Arguments args, CodeReviewCommit toMerge)
specifier|protected
name|SubmitStrategyOp
parameter_list|(
name|SubmitStrategy
operator|.
name|Arguments
name|args
parameter_list|,
name|CodeReviewCommit
name|toMerge
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|toMerge
operator|=
name|toMerge
expr_stmt|;
block|}
DECL|method|getId ()
specifier|final
name|Change
operator|.
name|Id
name|getId
parameter_list|()
block|{
return|return
name|toMerge
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|getCommit ()
specifier|final
name|CodeReviewCommit
name|getCommit
parameter_list|()
block|{
return|return
name|toMerge
return|;
block|}
DECL|method|getDest ()
specifier|protected
specifier|final
name|Branch
operator|.
name|NameKey
name|getDest
parameter_list|()
block|{
return|return
name|toMerge
operator|.
name|change
argument_list|()
operator|.
name|getDest
argument_list|()
return|;
block|}
DECL|method|getProject ()
specifier|protected
specifier|final
name|Project
operator|.
name|NameKey
name|getProject
parameter_list|()
block|{
return|return
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateRepo (RepoContext ctx)
specifier|public
specifier|final
name|void
name|updateRepo
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s#updateRepo for change %s"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|toMerge
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
operator|==
name|args
operator|.
name|rw
argument_list|,
literal|"SubmitStrategyOp requires callers to call BatchUpdate#setRepository with exactly the same"
operator|+
literal|" CodeReviewRevWalk instance from the SubmitStrategy.Arguments: %s != %s"
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|args
operator|.
name|rw
argument_list|)
expr_stmt|;
comment|// Run the submit strategy implementation and record the merge tip state so
comment|// we can create the ref update.
name|CodeReviewCommit
name|tipBefore
init|=
name|args
operator|.
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
decl_stmt|;
name|alreadyMergedCommit
operator|=
name|getAlreadyMergedCommit
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|alreadyMergedCommit
operator|==
literal|null
condition|)
block|{
name|updateRepoImpl
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Already merged as %s"
argument_list|,
name|alreadyMergedCommit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CodeReviewCommit
name|tipAfter
init|=
name|args
operator|.
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|tipBefore
argument_list|,
name|tipAfter
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Did not move tip"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|tipAfter
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"No merge tip, no update to perform"
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Moved tip from %s to %s"
argument_list|,
name|tipBefore
argument_list|,
name|tipAfter
argument_list|)
expr_stmt|;
name|checkProjectConfig
argument_list|(
name|ctx
argument_list|,
name|tipAfter
argument_list|)
expr_stmt|;
comment|// Needed by postUpdate, at which point mergeTip will have advanced further,
comment|// so it's easier to just snapshot the command.
name|command
operator|=
operator|new
name|ReceiveCommand
argument_list|(
name|firstNonNull
argument_list|(
name|tipBefore
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
argument_list|,
name|tipAfter
argument_list|,
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addRefUpdate
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|args
operator|.
name|submoduleOp
operator|.
name|addBranchTip
argument_list|(
name|getDest
argument_list|()
argument_list|,
name|tipAfter
argument_list|)
expr_stmt|;
block|}
DECL|method|checkProjectConfig (RepoContext ctx, CodeReviewCommit commit)
specifier|private
name|void
name|checkProjectConfig
parameter_list|(
name|RepoContext
name|ctx
parameter_list|,
name|CodeReviewCommit
name|commit
parameter_list|)
throws|throws
name|IntegrationException
block|{
name|String
name|refName
init|=
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Loading new configuration from %s"
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
expr_stmt|;
try|try
block|{
name|ProjectConfig
name|cfg
init|=
name|args
operator|.
name|projectConfigFactory
operator|.
name|create
argument_list|(
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"Submit would store invalid"
operator|+
literal|" project configuration "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
literal|" for "
operator|+
name|getProject
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getAlreadyMergedCommit (RepoContext ctx)
specifier|private
name|CodeReviewCommit
name|getAlreadyMergedCommit
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|CodeReviewCommit
name|tip
init|=
name|args
operator|.
name|mergeTip
operator|.
name|getInitialTip
argument_list|()
decl_stmt|;
if|if
condition|(
name|tip
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CodeReviewRevWalk
name|rw
init|=
operator|(
name|CodeReviewRevWalk
operator|)
name|ctx
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|getId
argument_list|()
decl_stmt|;
name|String
name|refPrefix
init|=
name|id
operator|.
name|toRefPrefix
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|refs
init|=
name|ctx
operator|.
name|getRepoView
argument_list|()
operator|.
name|getRefs
argument_list|(
name|refPrefix
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CodeReviewCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|refs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|e
range|:
name|refs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|refPrefix
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|CodeReviewCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setPatchsetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|commits
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
decl||
name|IncorrectObjectTypeException
name|ex
parameter_list|)
block|{
continue|continue;
comment|// Bogus ref, can't be merged into tip so we don't care.
block|}
block|}
name|commits
operator|.
name|sort
argument_list|(
name|comparing
argument_list|(
parameter_list|(
name|CodeReviewCommit
name|c
parameter_list|)
lambda|->
name|c
operator|.
name|getPatchsetId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|CodeReviewCommit
name|result
init|=
name|MergeUtil
operator|.
name|findAnyMergedInto
argument_list|(
name|rw
argument_list|,
name|commits
argument_list|,
name|tip
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Some patch set of this change is actually merged into the target
comment|// branch, most likely because a previous run of MergeOp failed after
comment|// updateRepo, during updateChange.
comment|//
comment|// Do the best we can to clean this up: mark the change as merged and set
comment|// the current patch set. Don't touch the dest branch at all. This can
comment|// lead to some odd situations like another change in the set merging in
comment|// a different patch set of this change, but that's unavoidable at this
comment|// point.  At least the change will end up in the right state.
comment|//
comment|// TODO(dborowitz): Consider deleting later junk patch set refs. They
comment|// presumably don't have PatchSets pointing to them.
name|rw
operator|.
name|parseBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|args
operator|.
name|canMergeFlag
argument_list|)
expr_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|result
operator|.
name|getPatchsetId
argument_list|()
decl_stmt|;
name|result
operator|.
name|copyFrom
argument_list|(
name|toMerge
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPatchsetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
comment|// Got overwriten by copyFrom.
name|result
operator|.
name|setStatusCode
argument_list|(
name|CommitMergeStatus
operator|.
name|ALREADY_MERGED
argument_list|)
expr_stmt|;
name|args
operator|.
name|commitStatus
operator|.
name|put
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|updateChange (ChangeContext ctx)
specifier|public
specifier|final
name|boolean
name|updateChange
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s#updateChange for change %s"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|toMerge
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|toMerge
operator|.
name|setNotes
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update change and notes from ctx.
if|if
condition|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
comment|// Either another thread won a race, or we are retrying a whole topic submission after one
comment|// repo failed with lock failure.
if|if
condition|(
name|alreadyMergedCommit
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Change is already merged according to its status, but we were unable to find it"
operator|+
literal|" merged into the current tip (%s)"
argument_list|,
name|args
operator|.
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Change is already merged"
argument_list|)
expr_stmt|;
block|}
name|changeAlreadyMerged
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|alreadyMergedCommit
operator|!=
literal|null
condition|)
block|{
name|alreadyMergedCommit
operator|.
name|setNotes
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|mergedPatchSet
operator|=
name|getOrCreateAlreadyMergedPatchSet
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PatchSet
name|newPatchSet
init|=
name|updateChangeImpl
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|oldPsId
init|=
name|requireNonNull
argument_list|(
name|toMerge
operator|.
name|getPatchsetId
argument_list|()
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|newPsId
init|=
name|requireNonNull
argument_list|(
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPatchSet
operator|==
literal|null
condition|)
block|{
name|checkState
argument_list|(
name|oldPsId
operator|.
name|equals
argument_list|(
name|newPsId
argument_list|)
argument_list|,
literal|"patch set advanced from %s to %s but updateChangeImpl did not"
operator|+
literal|" return new patch set instance"
argument_list|,
name|oldPsId
argument_list|,
name|newPsId
argument_list|)
expr_stmt|;
comment|// Ok to use stale notes to get the old patch set, which didn't change
comment|// during the submit strategy.
name|mergedPatchSet
operator|=
name|requireNonNull
argument_list|(
name|args
operator|.
name|psUtil
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|oldPsId
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"missing old patch set %s"
argument_list|,
name|oldPsId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PatchSet
operator|.
name|Id
name|n
init|=
name|newPatchSet
operator|.
name|getId
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
operator|!
name|n
operator|.
name|equals
argument_list|(
name|oldPsId
argument_list|)
operator|&&
name|n
operator|.
name|equals
argument_list|(
name|newPsId
argument_list|)
argument_list|,
literal|"current patch was %s and is now %s, but updateChangeImpl returned"
operator|+
literal|" new patch set instance at %s"
argument_list|,
name|oldPsId
argument_list|,
name|newPsId
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|mergedPatchSet
operator|=
name|newPatchSet
expr_stmt|;
block|}
block|}
name|Change
name|c
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
decl_stmt|;
name|CodeReviewCommit
name|commit
init|=
name|args
operator|.
name|commitStatus
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|requireNonNull
argument_list|(
name|commit
argument_list|,
parameter_list|()
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"missing commit for change %s"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|CommitMergeStatus
name|s
init|=
name|commit
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|requireNonNull
argument_list|(
name|s
argument_list|,
parameter_list|()
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"status not set for change %s; expected to previously fail fast"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Status of change %s (%s) on %s: %s"
argument_list|,
name|id
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|,
name|c
operator|.
name|getDest
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|setApproval
argument_list|(
name|ctx
argument_list|,
name|args
operator|.
name|caller
argument_list|)
expr_stmt|;
name|mergeResultRev
operator|=
name|alreadyMergedCommit
operator|==
literal|null
condition|?
name|args
operator|.
name|mergeTip
operator|.
name|getMergeResults
argument_list|()
operator|.
name|get
argument_list|(
name|commit
argument_list|)
comment|// Our fixup code is not smart enough to find a merge commit
comment|// corresponding to the merge result. This results in a different
comment|// ChangeMergedEvent in the fixup case, but we'll just live with that.
else|:
name|alreadyMergedCommit
expr_stmt|;
try|try
block|{
name|setMerged
argument_list|(
name|ctx
argument_list|,
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error updating change status for "
operator|+
name|id
decl_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|args
operator|.
name|commitStatus
operator|.
name|logProblem
argument_list|(
name|id
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// It's possible this happened before updating anything in the db, but
comment|// it's hard to know for sure, so just return true below to be safe.
block|}
name|updatedChange
operator|=
name|c
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|getOrCreateAlreadyMergedPatchSet (ChangeContext ctx)
specifier|private
name|PatchSet
name|getOrCreateAlreadyMergedPatchSet
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|OrmException
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|alreadyMergedCommit
operator|.
name|getPatchsetId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Fixing up already-merged patch set %s"
argument_list|,
name|psId
argument_list|)
expr_stmt|;
name|PatchSet
name|prevPs
init|=
name|args
operator|.
name|psUtil
operator|.
name|current
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseBody
argument_list|(
name|alreadyMergedCommit
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|setCurrentPatchSet
argument_list|(
name|psId
argument_list|,
name|alreadyMergedCommit
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|getOriginalSubject
argument_list|()
argument_list|)
expr_stmt|;
name|PatchSet
name|existing
init|=
name|args
operator|.
name|psUtil
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Patch set row exists, only updating change"
argument_list|)
expr_stmt|;
return|return
name|existing
return|;
block|}
comment|// No patch set for the already merged commit, although we know it came form
comment|// a patch set ref. Fix up the database. Note that this uses the current
comment|// user as the uploader, which is as good a guess as any.
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|prevPs
operator|!=
literal|null
condition|?
name|prevPs
operator|.
name|getGroups
argument_list|()
else|:
name|GroupCollector
operator|.
name|getDefaultGroups
argument_list|(
name|alreadyMergedCommit
argument_list|)
decl_stmt|;
return|return
name|args
operator|.
name|psUtil
operator|.
name|insert
argument_list|(
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ctx
operator|.
name|getUpdate
argument_list|(
name|psId
argument_list|)
argument_list|,
name|psId
argument_list|,
name|alreadyMergedCommit
argument_list|,
name|groups
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|setApproval (ChangeContext ctx, IdentifiedUser user)
specifier|private
name|void
name|setApproval
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|IdentifiedUser
name|user
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|records
init|=
name|args
operator|.
name|commitStatus
operator|.
name|getSubmitRecords
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|oldPsId
init|=
name|toMerge
operator|.
name|getPatchsetId
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|newPsId
init|=
name|ctx
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Add approval for %s"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ChangeUpdate
name|origPsUpdate
init|=
name|ctx
operator|.
name|getUpdate
argument_list|(
name|oldPsId
argument_list|)
decl_stmt|;
name|origPsUpdate
operator|.
name|putReviewer
argument_list|(
name|user
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|REVIEWER
argument_list|)
expr_stmt|;
name|LabelNormalizer
operator|.
name|Result
name|normalized
init|=
name|approve
argument_list|(
name|ctx
argument_list|,
name|origPsUpdate
argument_list|)
decl_stmt|;
name|ChangeUpdate
name|newPsUpdate
init|=
name|ctx
operator|.
name|getUpdate
argument_list|(
name|newPsId
argument_list|)
decl_stmt|;
name|newPsUpdate
operator|.
name|merge
argument_list|(
name|args
operator|.
name|submissionId
argument_list|,
name|records
argument_list|)
expr_stmt|;
comment|// If the submit strategy created a new revision (rebase, cherry-pick), copy
comment|// approvals as well.
if|if
condition|(
operator|!
name|newPsId
operator|.
name|equals
argument_list|(
name|oldPsId
argument_list|)
condition|)
block|{
name|saveApprovals
argument_list|(
name|normalized
argument_list|,
name|newPsUpdate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|submitter
operator|=
name|convertPatchSet
argument_list|(
name|newPsId
argument_list|)
operator|.
name|apply
argument_list|(
name|submitter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|approve (ChangeContext ctx, ChangeUpdate update)
specifier|private
name|LabelNormalizer
operator|.
name|Result
name|approve
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|ChangeUpdate
name|update
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|update
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|PatchSetApproval
operator|.
name|Key
argument_list|,
name|PatchSetApproval
argument_list|>
name|byKey
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|args
operator|.
name|approvalsUtil
operator|.
name|byPatchSet
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|psId
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|ctx
operator|.
name|getRepoView
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
control|)
block|{
name|byKey
operator|.
name|put
argument_list|(
name|psa
operator|.
name|getKey
argument_list|()
argument_list|,
name|psa
argument_list|)
expr_stmt|;
block|}
name|submitter
operator|=
name|ApprovalsUtil
operator|.
name|newApproval
argument_list|(
name|psId
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|,
name|LabelId
operator|.
name|legacySubmit
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
name|byKey
operator|.
name|put
argument_list|(
name|submitter
operator|.
name|getKey
argument_list|()
argument_list|,
name|submitter
argument_list|)
expr_stmt|;
comment|// Flatten out existing approvals for this patch set based upon the current
comment|// permissions. Once the change is closed the approvals are not updated at
comment|// presentation view time, except for zero votes used to indicate a reviewer
comment|// was added. So we need to make sure votes are accurate now. This way if
comment|// permissions get modified in the future, historical records stay accurate.
name|LabelNormalizer
operator|.
name|Result
name|normalized
init|=
name|args
operator|.
name|labelNormalizer
operator|.
name|normalize
argument_list|(
name|ctx
operator|.
name|getNotes
argument_list|()
argument_list|,
name|byKey
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|update
operator|.
name|putApproval
argument_list|(
name|submitter
operator|.
name|getLabel
argument_list|()
argument_list|,
name|submitter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|saveApprovals
argument_list|(
name|normalized
argument_list|,
name|update
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|normalized
return|;
block|}
DECL|method|saveApprovals ( LabelNormalizer.Result normalized, ChangeUpdate update, boolean includeUnchanged)
specifier|private
name|void
name|saveApprovals
parameter_list|(
name|LabelNormalizer
operator|.
name|Result
name|normalized
parameter_list|,
name|ChangeUpdate
name|update
parameter_list|,
name|boolean
name|includeUnchanged
parameter_list|)
block|{
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|normalized
operator|.
name|updated
argument_list|()
control|)
block|{
name|update
operator|.
name|putApprovalFor
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|normalized
operator|.
name|deleted
argument_list|()
control|)
block|{
name|update
operator|.
name|removeApprovalFor
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO(dborowitz): Don't use a label in NoteDb; just check when status
comment|// change happened.
for|for
control|(
name|PatchSetApproval
name|psa
range|:
name|normalized
operator|.
name|unchanged
argument_list|()
control|)
block|{
if|if
condition|(
name|includeUnchanged
operator|||
name|psa
operator|.
name|isLegacySubmit
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Adding submit label %s"
argument_list|,
name|psa
argument_list|)
expr_stmt|;
name|update
operator|.
name|putApprovalFor
argument_list|(
name|psa
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|psa
operator|.
name|getLabel
argument_list|()
argument_list|,
name|psa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|convertPatchSet ( final PatchSet.Id psId)
specifier|private
specifier|static
name|Function
argument_list|<
name|PatchSetApproval
argument_list|,
name|PatchSetApproval
argument_list|>
name|convertPatchSet
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
return|return
name|psa
lambda|->
block|{
if|if
condition|(
name|psa
operator|.
name|getPatchSetId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
return|return
name|psa
return|;
block|}
return|return
operator|new
name|PatchSetApproval
argument_list|(
name|psId
argument_list|,
name|psa
argument_list|)
return|;
block|}
return|;
block|}
DECL|method|getByAccountName ()
specifier|private
name|String
name|getByAccountName
parameter_list|()
block|{
name|requireNonNull
argument_list|(
name|submitter
argument_list|,
literal|"getByAccountName called before submitter populated"
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Account
argument_list|>
name|account
init|=
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|AccountState
operator|::
name|getAccount
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|.
name|isPresent
argument_list|()
operator|&&
name|account
operator|.
name|get
argument_list|()
operator|.
name|getFullName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|" by "
operator|+
name|account
operator|.
name|get
argument_list|()
operator|.
name|getFullName
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|message (ChangeContext ctx, CodeReviewCommit commit, CommitMergeStatus s)
specifier|private
name|ChangeMessage
name|message
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|CodeReviewCommit
name|commit
parameter_list|,
name|CommitMergeStatus
name|s
parameter_list|)
throws|throws
name|OrmException
block|{
name|requireNonNull
argument_list|(
name|s
argument_list|,
literal|"CommitMergeStatus may not be null"
argument_list|)
expr_stmt|;
name|String
name|txt
init|=
name|s
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
condition|)
block|{
return|return
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
operator|.
name|getPatchsetId
argument_list|()
argument_list|,
name|txt
operator|+
name|getByAccountName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
name|CommitMergeStatus
operator|.
name|CLEAN_REBASE
operator|||
name|s
operator|==
name|CommitMergeStatus
operator|.
name|CLEAN_PICK
condition|)
block|{
return|return
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
operator|.
name|getPatchsetId
argument_list|()
argument_list|,
name|txt
operator|+
literal|" as "
operator|+
name|commit
operator|.
name|name
argument_list|()
operator|+
name|getByAccountName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
name|CommitMergeStatus
operator|.
name|SKIPPED_IDENTICAL_TREE
condition|)
block|{
return|return
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
operator|.
name|getPatchsetId
argument_list|()
argument_list|,
name|txt
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
name|CommitMergeStatus
operator|.
name|ALREADY_MERGED
condition|)
block|{
comment|// Best effort to mimic the message that would have happened had this
comment|// succeeded the first time around.
switch|switch
condition|(
name|args
operator|.
name|submitType
condition|)
block|{
case|case
name|FAST_FORWARD_ONLY
case|:
case|case
name|MERGE_ALWAYS
case|:
case|case
name|MERGE_IF_NECESSARY
case|:
return|return
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
argument_list|,
name|CommitMergeStatus
operator|.
name|CLEAN_MERGE
argument_list|)
return|;
case|case
name|CHERRY_PICK
case|:
return|return
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
argument_list|,
name|CommitMergeStatus
operator|.
name|CLEAN_PICK
argument_list|)
return|;
case|case
name|REBASE_IF_NECESSARY
case|:
case|case
name|REBASE_ALWAYS
case|:
return|return
name|message
argument_list|(
name|ctx
argument_list|,
name|commit
argument_list|,
name|CommitMergeStatus
operator|.
name|CLEAN_REBASE
argument_list|)
return|;
case|case
name|INHERIT
case|:
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected submit type "
operator|+
name|args
operator|.
name|submitType
operator|.
name|toString
argument_list|()
operator|+
literal|" for change "
operator|+
name|commit
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected status "
operator|+
name|s
operator|+
literal|" for change "
operator|+
name|commit
operator|.
name|change
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"; expected to previously fail fast"
argument_list|)
throw|;
block|}
block|}
DECL|method|message (ChangeContext ctx, PatchSet.Id psId, String body)
specifier|private
name|ChangeMessage
name|message
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|String
name|body
parameter_list|)
block|{
return|return
name|ChangeMessagesUtil
operator|.
name|newMessage
argument_list|(
name|psId
argument_list|,
name|ctx
operator|.
name|getUser
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|,
name|body
argument_list|,
name|ChangeMessagesUtil
operator|.
name|TAG_MERGED
argument_list|)
return|;
block|}
DECL|method|setMerged (ChangeContext ctx, ChangeMessage msg)
specifier|private
name|void
name|setMerged
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|,
name|ChangeMessage
name|msg
parameter_list|)
block|{
name|Change
name|c
init|=
name|ctx
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Setting change %s merged"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setStatus
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubmissionId
argument_list|(
name|args
operator|.
name|submissionId
operator|.
name|toStringForStorage
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): We need to be able to change the author of the message,
comment|// which is not the user from the update context. addMergedMessage was able
comment|// to do this in the past.
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|cmUtil
operator|.
name|addChangeMessage
argument_list|(
name|ctx
operator|.
name|getUpdate
argument_list|(
name|msg
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|postUpdate (Context ctx)
specifier|public
specifier|final
name|void
name|postUpdate
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|changeAlreadyMerged
condition|)
block|{
comment|// TODO(dborowitz): This is suboptimal behavior in the presence of retries: postUpdate steps
comment|// will never get run for changes that submitted successfully on any but the final attempt.
comment|// This is primarily a temporary workaround for the fact that the submitter field is not
comment|// populated in the changeAlreadyMerged case.
comment|//
comment|// If we naively execute postUpdate even if the change is already merged when updateChange
comment|// being, then we are subject to a race where postUpdate steps are run twice if two submit
comment|// processes run at the same time.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"Skipping post-update steps for change %s"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|postUpdateImpl
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|tagCache
operator|.
name|updateFastForward
argument_list|(
name|getProject
argument_list|()
argument_list|,
name|command
operator|.
name|getRefName
argument_list|()
argument_list|,
name|command
operator|.
name|getOldId
argument_list|()
argument_list|,
name|command
operator|.
name|getNewId
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(dborowitz): Move to BatchUpdate? Would also allow us to run once
comment|// per project even if multiple changes to refs/meta/config are submitted.
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|getDest
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|args
operator|.
name|projectCache
operator|.
name|evict
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|ProjectState
name|p
init|=
name|args
operator|.
name|projectCache
operator|.
name|get
argument_list|(
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Repository
name|git
init|=
name|args
operator|.
name|repoManager
operator|.
name|openRepository
argument_list|(
name|getProject
argument_list|()
argument_list|)
init|)
block|{
name|git
operator|.
name|setGitwebDescription
argument_list|(
name|p
operator|.
name|getProject
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"cannot update description of %s"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Assume the change must have been merged at this point, otherwise we would
comment|// have failed fast in one of the other steps.
try|try
block|{
name|args
operator|.
name|mergedSenderFactory
operator|.
name|create
argument_list|(
name|ctx
operator|.
name|getProject
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|,
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|args
operator|.
name|submitInput
operator|.
name|notify
argument_list|,
name|args
operator|.
name|accountsToNotify
argument_list|)
operator|.
name|sendAsync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot email merged notification for %s"
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeResultRev
operator|!=
literal|null
operator|&&
operator|!
name|args
operator|.
name|dryrun
condition|)
block|{
name|args
operator|.
name|changeMerged
operator|.
name|fire
argument_list|(
name|updatedChange
argument_list|,
name|mergedPatchSet
argument_list|,
name|args
operator|.
name|accountCache
operator|.
name|get
argument_list|(
name|submitter
operator|.
name|getAccountId
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|args
operator|.
name|mergeTip
operator|.
name|getCurrentTip
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|ctx
operator|.
name|getWhen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @see #updateRepo(RepoContext)    * @param ctx    */
DECL|method|updateRepoImpl (RepoContext ctx)
specifier|protected
name|void
name|updateRepoImpl
parameter_list|(
name|RepoContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{}
comment|/**    * @see #updateChange(ChangeContext)    * @param ctx    * @return a new patch set if one was created by the submit strategy, or null if not.    */
DECL|method|updateChangeImpl (ChangeContext ctx)
specifier|protected
name|PatchSet
name|updateChangeImpl
parameter_list|(
name|ChangeContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
comment|/**    * @see #postUpdate(Context)    * @param ctx    */
DECL|method|postUpdateImpl (Context ctx)
specifier|protected
name|void
name|postUpdateImpl
parameter_list|(
name|Context
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{}
comment|/**    * Amend the commit with gitlink update    *    * @param commit    */
DECL|method|amendGitlink (CodeReviewCommit commit)
specifier|protected
name|CodeReviewCommit
name|amendGitlink
parameter_list|(
name|CodeReviewCommit
name|commit
parameter_list|)
throws|throws
name|IntegrationException
block|{
if|if
condition|(
operator|!
name|args
operator|.
name|submoduleOp
operator|.
name|hasSubscription
argument_list|(
name|args
operator|.
name|destBranch
argument_list|)
condition|)
block|{
return|return
name|commit
return|;
block|}
comment|// Modify the commit with gitlink update
try|try
block|{
return|return
name|args
operator|.
name|submoduleOp
operator|.
name|composeGitlinksCommit
argument_list|(
name|args
operator|.
name|destBranch
argument_list|,
name|commit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SubmoduleException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IntegrationException
argument_list|(
literal|"cannot update gitlink for the commit at branch: "
operator|+
name|args
operator|.
name|destBranch
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

