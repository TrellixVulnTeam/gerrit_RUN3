begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.edit
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MergeConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RawInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ChangeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|ChangeFileContentModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|DeleteFileModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|RenameFileModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|RestoreFileModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|TreeCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|TreeModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ChangePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|CommitMessageUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|MergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|merge
operator|.
name|ThreeWayMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_comment
comment|/**  * Utility functions to manipulate change edits.  *  *<p>This class contains methods to modify edit's content. For retrieving, publishing and deleting  * edit see {@link ChangeEditUtil}.  *  *<p>  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ChangeEditModifier
specifier|public
class|class
name|ChangeEditModifier
block|{
DECL|field|tz
specifier|private
specifier|final
name|TimeZone
name|tz
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|changeEditUtil
specifier|private
specifier|final
name|ChangeEditUtil
name|changeEditUtil
decl_stmt|;
DECL|field|patchSetUtil
specifier|private
specifier|final
name|PatchSetUtil
name|patchSetUtil
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChangeEditModifier ( @erritPersonIdent PersonIdent gerritIdent, ChangeIndexer indexer, Provider<CurrentUser> currentUser, PermissionBackend permissionBackend, ChangeEditUtil changeEditUtil, PatchSetUtil patchSetUtil, ProjectCache projectCache)
name|ChangeEditModifier
parameter_list|(
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|gerritIdent
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ChangeEditUtil
name|changeEditUtil
parameter_list|,
name|PatchSetUtil
name|patchSetUtil
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|tz
operator|=
name|gerritIdent
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
name|this
operator|.
name|changeEditUtil
operator|=
name|changeEditUtil
expr_stmt|;
name|this
operator|.
name|patchSetUtil
operator|=
name|patchSetUtil
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
comment|/**    * Creates a new change edit.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change for which the change edit should be created    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if a change edit already existed for the change    * @throws PermissionBackendException    */
DECL|method|createEdit (Repository repository, ChangeNotes notes)
specifier|public
name|void
name|createEdit
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|assertCanEdit
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|changeEdit
init|=
name|lookupChangeEdit
argument_list|(
name|notes
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A change edit already exists for change %s"
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|PatchSet
name|currentPatchSet
init|=
name|lookupCurrentPatchSet
argument_list|(
name|notes
argument_list|)
decl_stmt|;
name|ObjectId
name|patchSetCommitId
init|=
name|currentPatchSet
operator|.
name|commitId
argument_list|()
decl_stmt|;
name|createEdit
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
name|currentPatchSet
argument_list|,
name|patchSetCommitId
argument_list|,
name|TimeUtil
operator|.
name|nowTs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rebase change edit on latest patch set    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change whose change edit should be rebased    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if a change edit doesn't exist for the specified    *     change, the change edit is already based on the latest patch set, or the change represents    *     the root commit    * @throws MergeConflictException if rebase fails due to merge conflicts    * @throws PermissionBackendException    */
DECL|method|rebaseEdit (Repository repository, ChangeNotes notes)
specifier|public
name|void
name|rebaseEdit
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|MergeConflictException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|assertCanEdit
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|optionalChangeEdit
init|=
name|lookupChangeEdit
argument_list|(
name|notes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|optionalChangeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No change edit exists for change %s"
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ChangeEdit
name|changeEdit
init|=
name|optionalChangeEdit
operator|.
name|get
argument_list|()
decl_stmt|;
name|PatchSet
name|currentPatchSet
init|=
name|lookupCurrentPatchSet
argument_list|(
name|notes
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBasedOn
argument_list|(
name|changeEdit
argument_list|,
name|currentPatchSet
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Change edit for change %s is already based on latest patch set %s"
argument_list|,
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|currentPatchSet
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|rebase
argument_list|(
name|repository
argument_list|,
name|changeEdit
argument_list|,
name|currentPatchSet
argument_list|)
expr_stmt|;
block|}
DECL|method|rebase (Repository repository, ChangeEdit changeEdit, PatchSet currentPatchSet)
specifier|private
name|void
name|rebase
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeEdit
name|changeEdit
parameter_list|,
name|PatchSet
name|currentPatchSet
parameter_list|)
throws|throws
name|IOException
throws|,
name|MergeConflictException
throws|,
name|InvalidChangeOperationException
block|{
name|RevCommit
name|currentEditCommit
init|=
name|changeEdit
operator|.
name|getEditCommit
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEditCommit
operator|.
name|getParentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
literal|"Rebase change edit against root commit not supported"
argument_list|)
throw|;
block|}
name|Change
name|change
init|=
name|changeEdit
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|RevCommit
name|basePatchSetCommit
init|=
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|currentPatchSet
argument_list|)
decl_stmt|;
name|RevTree
name|basePatchSetTree
init|=
name|basePatchSetCommit
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|merge
argument_list|(
name|repository
argument_list|,
name|changeEdit
argument_list|,
name|basePatchSetTree
argument_list|)
decl_stmt|;
name|Timestamp
name|nowTimestamp
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|String
name|commitMessage
init|=
name|currentEditCommit
operator|.
name|getFullMessage
argument_list|()
decl_stmt|;
name|ObjectId
name|newEditCommitId
init|=
name|createCommit
argument_list|(
name|repository
argument_list|,
name|basePatchSetCommit
argument_list|,
name|newTreeId
argument_list|,
name|commitMessage
argument_list|,
name|nowTimestamp
argument_list|)
decl_stmt|;
name|String
name|newEditRefName
init|=
name|getEditRefName
argument_list|(
name|change
argument_list|,
name|currentPatchSet
argument_list|)
decl_stmt|;
name|updateReferenceWithNameChange
argument_list|(
name|repository
argument_list|,
name|changeEdit
operator|.
name|getRefName
argument_list|()
argument_list|,
name|currentEditCommit
argument_list|,
name|newEditRefName
argument_list|,
name|newEditCommitId
argument_list|,
name|nowTimestamp
argument_list|)
expr_stmt|;
name|reindex
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modifies the commit message of a change edit. If the change edit doesn't exist, a new one will    * be created based on the current patch set.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change whose change edit's message should be    *     modified    * @param newCommitMessage the new commit message    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws UnchangedCommitMessageException if the commit message is the same as before    * @throws PermissionBackendException    * @throws BadRequestException if the commit message is malformed    */
DECL|method|modifyMessage (Repository repository, ChangeNotes notes, String newCommitMessage)
specifier|public
name|void
name|modifyMessage
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|newCommitMessage
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|UnchangedCommitMessageException
throws|,
name|PermissionBackendException
throws|,
name|BadRequestException
throws|,
name|ResourceConflictException
block|{
name|assertCanEdit
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|newCommitMessage
operator|=
name|CommitMessageUtil
operator|.
name|checkAndSanitizeCommitMessage
argument_list|(
name|newCommitMessage
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|optionalChangeEdit
init|=
name|lookupChangeEdit
argument_list|(
name|notes
argument_list|)
decl_stmt|;
name|PatchSet
name|basePatchSet
init|=
name|getBasePatchSet
argument_list|(
name|optionalChangeEdit
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|RevCommit
name|basePatchSetCommit
init|=
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|basePatchSet
argument_list|)
decl_stmt|;
name|RevCommit
name|baseCommit
init|=
name|optionalChangeEdit
operator|.
name|map
argument_list|(
name|ChangeEdit
operator|::
name|getEditCommit
argument_list|)
operator|.
name|orElse
argument_list|(
name|basePatchSetCommit
argument_list|)
decl_stmt|;
name|String
name|currentCommitMessage
init|=
name|baseCommit
operator|.
name|getFullMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCommitMessage
operator|.
name|equals
argument_list|(
name|currentCommitMessage
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnchangedCommitMessageException
argument_list|()
throw|;
block|}
name|RevTree
name|baseTree
init|=
name|baseCommit
operator|.
name|getTree
argument_list|()
decl_stmt|;
name|Timestamp
name|nowTimestamp
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|ObjectId
name|newEditCommit
init|=
name|createCommit
argument_list|(
name|repository
argument_list|,
name|basePatchSetCommit
argument_list|,
name|baseTree
argument_list|,
name|newCommitMessage
argument_list|,
name|nowTimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalChangeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|updateEdit
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|repository
argument_list|,
name|optionalChangeEdit
operator|.
name|get
argument_list|()
argument_list|,
name|newEditCommit
argument_list|,
name|nowTimestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createEdit
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
name|basePatchSet
argument_list|,
name|newEditCommit
argument_list|,
name|nowTimestamp
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Modifies the contents of a file of a change edit. If the change edit doesn't exist, a new one    * will be created based on the current patch set.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change whose change edit should be modified    * @param filePath the path of the file whose contents should be modified    * @param newContent the new file content    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if the file already had the specified content    * @throws PermissionBackendException    * @throws ResourceConflictException if the project state does not permit the operation    */
DECL|method|modifyFile ( Repository repository, ChangeNotes notes, String filePath, RawInput newContent)
specifier|public
name|void
name|modifyFile
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|filePath
parameter_list|,
name|RawInput
name|newContent
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|modifyTree
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
operator|new
name|ChangeFileContentModification
argument_list|(
name|filePath
argument_list|,
name|newContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes a file from the Git tree of a change edit. If the change edit doesn't exist, a new one    * will be created based on the current patch set.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change whose change edit should be modified    * @param file path of the file which should be deleted    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if the file does not exist    * @throws PermissionBackendException    * @throws ResourceConflictException if the project state does not permit the operation    */
DECL|method|deleteFile (Repository repository, ChangeNotes notes, String file)
specifier|public
name|void
name|deleteFile
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|modifyTree
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
operator|new
name|DeleteFileModification
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renames a file of a change edit or moves it to another directory. If the change edit doesn't    * exist, a new one will be created based on the current patch set.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change whose change edit should be modified    * @param currentFilePath the current path/name of the file    * @param newFilePath the desired path/name of the file    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if the file was already renamed to the specified new    *     name    * @throws PermissionBackendException    * @throws ResourceConflictException if the project state does not permit the operation    */
DECL|method|renameFile ( Repository repository, ChangeNotes notes, String currentFilePath, String newFilePath)
specifier|public
name|void
name|renameFile
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|currentFilePath
parameter_list|,
name|String
name|newFilePath
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|modifyTree
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
operator|new
name|RenameFileModification
argument_list|(
name|currentFilePath
argument_list|,
name|newFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restores a file of a change edit to the state it was in before the patch set on which the    * change edit is based. If the change edit doesn't exist, a new one will be created based on the    * current patch set.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change whose change edit should be modified    * @param file the path of the file which should be restored    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if the file was already restored    * @throws PermissionBackendException    */
DECL|method|restoreFile (Repository repository, ChangeNotes notes, String file)
specifier|public
name|void
name|restoreFile
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|AuthException
throws|,
name|InvalidChangeOperationException
throws|,
name|IOException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|modifyTree
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
operator|new
name|RestoreFileModification
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyTree ( Repository repository, ChangeNotes notes, TreeModification treeModification)
specifier|private
name|void
name|modifyTree
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|TreeModification
name|treeModification
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|assertCanEdit
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|optionalChangeEdit
init|=
name|lookupChangeEdit
argument_list|(
name|notes
argument_list|)
decl_stmt|;
name|PatchSet
name|basePatchSet
init|=
name|getBasePatchSet
argument_list|(
name|optionalChangeEdit
argument_list|,
name|notes
argument_list|)
decl_stmt|;
name|RevCommit
name|basePatchSetCommit
init|=
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|basePatchSet
argument_list|)
decl_stmt|;
name|RevCommit
name|baseCommit
init|=
name|optionalChangeEdit
operator|.
name|map
argument_list|(
name|ChangeEdit
operator|::
name|getEditCommit
argument_list|)
operator|.
name|orElse
argument_list|(
name|basePatchSetCommit
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|createNewTree
argument_list|(
name|repository
argument_list|,
name|baseCommit
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|treeModification
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|commitMessage
init|=
name|baseCommit
operator|.
name|getFullMessage
argument_list|()
decl_stmt|;
name|Timestamp
name|nowTimestamp
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|ObjectId
name|newEditCommit
init|=
name|createCommit
argument_list|(
name|repository
argument_list|,
name|basePatchSetCommit
argument_list|,
name|newTreeId
argument_list|,
name|commitMessage
argument_list|,
name|nowTimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalChangeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|updateEdit
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|repository
argument_list|,
name|optionalChangeEdit
operator|.
name|get
argument_list|()
argument_list|,
name|newEditCommit
argument_list|,
name|nowTimestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createEdit
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
name|basePatchSet
argument_list|,
name|newEditCommit
argument_list|,
name|nowTimestamp
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Applies the indicated modifications to the specified patch set. If a change edit exists and is    * based on the same patch set, the modified patch set tree is merged with the change edit. If the    * change edit doesn't exist, a new one will be created.    *    * @param repository the affected Git repository    * @param notes the {@link ChangeNotes} of the change to which the patch set belongs    * @param patchSet the {@code PatchSet} which should be modified    * @param treeModifications the modifications which should be applied    * @return the resulting {@code ChangeEdit}    * @throws AuthException if the user isn't authenticated or not allowed to use change edits    * @throws InvalidChangeOperationException if the existing change edit is based on another patch    *     set or no change edit exists but the specified patch set isn't the current one    * @throws MergeConflictException if the modified patch set tree can't be merged with an existing    *     change edit    */
DECL|method|combineWithModifiedPatchSetTree ( Repository repository, ChangeNotes notes, PatchSet patchSet, List<TreeModification> treeModifications)
specifier|public
name|ChangeEdit
name|combineWithModifiedPatchSetTree
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|,
name|List
argument_list|<
name|TreeModification
argument_list|>
name|treeModifications
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
throws|,
name|InvalidChangeOperationException
throws|,
name|MergeConflictException
throws|,
name|PermissionBackendException
throws|,
name|ResourceConflictException
block|{
name|assertCanEdit
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|optionalChangeEdit
init|=
name|lookupChangeEdit
argument_list|(
name|notes
argument_list|)
decl_stmt|;
name|ensureAllowedPatchSet
argument_list|(
name|notes
argument_list|,
name|optionalChangeEdit
argument_list|,
name|patchSet
argument_list|)
expr_stmt|;
name|RevCommit
name|patchSetCommit
init|=
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|patchSet
argument_list|)
decl_stmt|;
name|ObjectId
name|newTreeId
init|=
name|createNewTree
argument_list|(
name|repository
argument_list|,
name|patchSetCommit
argument_list|,
name|treeModifications
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalChangeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ChangeEdit
name|changeEdit
init|=
name|optionalChangeEdit
operator|.
name|get
argument_list|()
decl_stmt|;
name|newTreeId
operator|=
name|merge
argument_list|(
name|repository
argument_list|,
name|changeEdit
argument_list|,
name|newTreeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectId
operator|.
name|isEqual
argument_list|(
name|newTreeId
argument_list|,
name|changeEdit
operator|.
name|getEditCommit
argument_list|()
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
comment|// Modifications are already contained in the change edit.
return|return
name|changeEdit
return|;
block|}
block|}
name|String
name|commitMessage
init|=
name|optionalChangeEdit
operator|.
name|map
argument_list|(
name|ChangeEdit
operator|::
name|getEditCommit
argument_list|)
operator|.
name|orElse
argument_list|(
name|patchSetCommit
argument_list|)
operator|.
name|getFullMessage
argument_list|()
decl_stmt|;
name|Timestamp
name|nowTimestamp
init|=
name|TimeUtil
operator|.
name|nowTs
argument_list|()
decl_stmt|;
name|ObjectId
name|newEditCommit
init|=
name|createCommit
argument_list|(
name|repository
argument_list|,
name|patchSetCommit
argument_list|,
name|newTreeId
argument_list|,
name|commitMessage
argument_list|,
name|nowTimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalChangeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|updateEdit
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|repository
argument_list|,
name|optionalChangeEdit
operator|.
name|get
argument_list|()
argument_list|,
name|newEditCommit
argument_list|,
name|nowTimestamp
argument_list|)
return|;
block|}
return|return
name|createEdit
argument_list|(
name|repository
argument_list|,
name|notes
argument_list|,
name|patchSet
argument_list|,
name|newEditCommit
argument_list|,
name|nowTimestamp
argument_list|)
return|;
block|}
DECL|method|assertCanEdit (ChangeNotes notes)
specifier|private
name|void
name|assertCanEdit
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|AuthException
throws|,
name|PermissionBackendException
throws|,
name|IOException
throws|,
name|ResourceConflictException
block|{
if|if
condition|(
operator|!
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Authentication required"
argument_list|)
throw|;
block|}
name|Change
name|c
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isNew
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"change %s is %s"
argument_list|,
name|c
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|ChangeUtil
operator|.
name|status
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
comment|// Not allowed to edit if the current patch set is locked.
name|patchSetUtil
operator|.
name|checkPatchSetNotLocked
argument_list|(
name|notes
argument_list|)
expr_stmt|;
try|try
block|{
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|change
argument_list|(
name|notes
argument_list|)
operator|.
name|check
argument_list|(
name|ChangePermission
operator|.
name|ADD_PATCH_SET
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|)
operator|.
name|checkStatePermitsWrite
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|denied
parameter_list|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"edit not permitted"
argument_list|,
name|denied
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureAllowedPatchSet ( ChangeNotes notes, Optional<ChangeEdit> optionalChangeEdit, PatchSet patchSet)
specifier|private
specifier|static
name|void
name|ensureAllowedPatchSet
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|,
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|optionalChangeEdit
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|)
throws|throws
name|InvalidChangeOperationException
block|{
if|if
condition|(
name|optionalChangeEdit
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ChangeEdit
name|changeEdit
init|=
name|optionalChangeEdit
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isBasedOn
argument_list|(
name|changeEdit
argument_list|,
name|patchSet
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Only the patch set %s on which the existing change edit is based may be modified "
operator|+
literal|"(specified patch set: %s)"
argument_list|,
name|changeEdit
operator|.
name|getBasePatchSet
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|patchSet
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|patchSet
operator|.
name|id
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|currentPatchSetId
init|=
name|notes
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|patchSetId
operator|.
name|equals
argument_list|(
name|currentPatchSetId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A change edit may only be created for the current patch set %s (and not for %s)"
argument_list|,
name|currentPatchSetId
argument_list|,
name|patchSetId
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|lookupChangeEdit (ChangeNotes notes)
specifier|private
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|lookupChangeEdit
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
throws|throws
name|AuthException
throws|,
name|IOException
block|{
return|return
name|changeEditUtil
operator|.
name|byChange
argument_list|(
name|notes
argument_list|)
return|;
block|}
DECL|method|getBasePatchSet (Optional<ChangeEdit> optionalChangeEdit, ChangeNotes notes)
specifier|private
name|PatchSet
name|getBasePatchSet
parameter_list|(
name|Optional
argument_list|<
name|ChangeEdit
argument_list|>
name|optionalChangeEdit
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|)
block|{
name|Optional
argument_list|<
name|PatchSet
argument_list|>
name|editBasePatchSet
init|=
name|optionalChangeEdit
operator|.
name|map
argument_list|(
name|ChangeEdit
operator|::
name|getBasePatchSet
argument_list|)
decl_stmt|;
return|return
name|editBasePatchSet
operator|.
name|isPresent
argument_list|()
condition|?
name|editBasePatchSet
operator|.
name|get
argument_list|()
else|:
name|lookupCurrentPatchSet
argument_list|(
name|notes
argument_list|)
return|;
block|}
DECL|method|lookupCurrentPatchSet (ChangeNotes notes)
specifier|private
name|PatchSet
name|lookupCurrentPatchSet
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
block|{
return|return
name|patchSetUtil
operator|.
name|current
argument_list|(
name|notes
argument_list|)
return|;
block|}
DECL|method|isBasedOn (ChangeEdit changeEdit, PatchSet patchSet)
specifier|private
specifier|static
name|boolean
name|isBasedOn
parameter_list|(
name|ChangeEdit
name|changeEdit
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|)
block|{
name|PatchSet
name|editBasePatchSet
init|=
name|changeEdit
operator|.
name|getBasePatchSet
argument_list|()
decl_stmt|;
return|return
name|editBasePatchSet
operator|.
name|id
argument_list|()
operator|.
name|equals
argument_list|(
name|patchSet
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
DECL|method|lookupCommit (Repository repository, PatchSet patchSet)
specifier|private
specifier|static
name|RevCommit
name|lookupCommit
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|PatchSet
name|patchSet
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectId
name|patchSetCommitId
init|=
name|patchSet
operator|.
name|commitId
argument_list|()
decl_stmt|;
return|return
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|patchSetCommitId
argument_list|)
return|;
block|}
DECL|method|lookupCommit (Repository repository, ObjectId commitId)
specifier|private
specifier|static
name|RevCommit
name|lookupCommit
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ObjectId
name|commitId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|repository
argument_list|)
init|)
block|{
return|return
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|commitId
argument_list|)
return|;
block|}
block|}
DECL|method|createNewTree ( Repository repository, RevCommit baseCommit, List<TreeModification> treeModifications)
specifier|private
specifier|static
name|ObjectId
name|createNewTree
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|RevCommit
name|baseCommit
parameter_list|,
name|List
argument_list|<
name|TreeModification
argument_list|>
name|treeModifications
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidChangeOperationException
block|{
name|TreeCreator
name|treeCreator
init|=
operator|new
name|TreeCreator
argument_list|(
name|baseCommit
argument_list|)
decl_stmt|;
name|treeCreator
operator|.
name|addTreeModifications
argument_list|(
name|treeModifications
argument_list|)
expr_stmt|;
name|ObjectId
name|newTreeId
init|=
name|treeCreator
operator|.
name|createNewTreeAndGetId
argument_list|(
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectId
operator|.
name|isEqual
argument_list|(
name|newTreeId
argument_list|,
name|baseCommit
operator|.
name|getTree
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidChangeOperationException
argument_list|(
literal|"no changes were made"
argument_list|)
throw|;
block|}
return|return
name|newTreeId
return|;
block|}
DECL|method|merge (Repository repository, ChangeEdit changeEdit, ObjectId newTreeId)
specifier|private
specifier|static
name|ObjectId
name|merge
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeEdit
name|changeEdit
parameter_list|,
name|ObjectId
name|newTreeId
parameter_list|)
throws|throws
name|IOException
throws|,
name|MergeConflictException
block|{
name|PatchSet
name|basePatchSet
init|=
name|changeEdit
operator|.
name|getBasePatchSet
argument_list|()
decl_stmt|;
name|ObjectId
name|basePatchSetCommitId
init|=
name|basePatchSet
operator|.
name|commitId
argument_list|()
decl_stmt|;
name|ObjectId
name|editCommitId
init|=
name|changeEdit
operator|.
name|getEditCommit
argument_list|()
decl_stmt|;
name|ThreeWayMerger
name|threeWayMerger
init|=
name|MergeStrategy
operator|.
name|RESOLVE
operator|.
name|newMerger
argument_list|(
name|repository
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|threeWayMerger
operator|.
name|setBase
argument_list|(
name|basePatchSetCommitId
argument_list|)
expr_stmt|;
name|boolean
name|successful
init|=
name|threeWayMerger
operator|.
name|merge
argument_list|(
name|newTreeId
argument_list|,
name|editCommitId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|successful
condition|)
block|{
throw|throw
operator|new
name|MergeConflictException
argument_list|(
literal|"The existing change edit could not be merged with another tree."
argument_list|)
throw|;
block|}
return|return
name|threeWayMerger
operator|.
name|getResultTreeId
argument_list|()
return|;
block|}
DECL|method|createCommit ( Repository repository, RevCommit basePatchSetCommit, ObjectId tree, String commitMessage, Timestamp timestamp)
specifier|private
name|ObjectId
name|createCommit
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|RevCommit
name|basePatchSetCommit
parameter_list|,
name|ObjectId
name|tree
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ObjectInserter
name|objectInserter
init|=
name|repository
operator|.
name|newObjectInserter
argument_list|()
init|)
block|{
name|CommitBuilder
name|builder
init|=
operator|new
name|CommitBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTreeId
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setParentIds
argument_list|(
name|basePatchSetCommit
operator|.
name|getParents
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAuthor
argument_list|(
name|basePatchSetCommit
operator|.
name|getAuthorIdent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCommitter
argument_list|(
name|getCommitterIdent
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|ObjectId
name|newCommitId
init|=
name|objectInserter
operator|.
name|insert
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|objectInserter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|newCommitId
return|;
block|}
block|}
DECL|method|getCommitterIdent (Timestamp commitTimestamp)
specifier|private
name|PersonIdent
name|getCommitterIdent
parameter_list|(
name|Timestamp
name|commitTimestamp
parameter_list|)
block|{
name|IdentifiedUser
name|user
init|=
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
decl_stmt|;
return|return
name|user
operator|.
name|newCommitterIdent
argument_list|(
name|commitTimestamp
argument_list|,
name|tz
argument_list|)
return|;
block|}
DECL|method|createEdit ( Repository repository, ChangeNotes notes, PatchSet basePatchSet, ObjectId newEditCommitId, Timestamp timestamp)
specifier|private
name|ChangeEdit
name|createEdit
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ChangeNotes
name|notes
parameter_list|,
name|PatchSet
name|basePatchSet
parameter_list|,
name|ObjectId
name|newEditCommitId
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|Change
name|change
init|=
name|notes
operator|.
name|getChange
argument_list|()
decl_stmt|;
name|String
name|editRefName
init|=
name|getEditRefName
argument_list|(
name|change
argument_list|,
name|basePatchSet
argument_list|)
decl_stmt|;
name|updateReference
argument_list|(
name|notes
operator|.
name|getProjectName
argument_list|()
argument_list|,
name|repository
argument_list|,
name|editRefName
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|newEditCommitId
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|reindex
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|RevCommit
name|newEditCommit
init|=
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|newEditCommitId
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChangeEdit
argument_list|(
name|change
argument_list|,
name|editRefName
argument_list|,
name|newEditCommit
argument_list|,
name|basePatchSet
argument_list|)
return|;
block|}
DECL|method|getEditRefName (Change change, PatchSet basePatchSet)
specifier|private
name|String
name|getEditRefName
parameter_list|(
name|Change
name|change
parameter_list|,
name|PatchSet
name|basePatchSet
parameter_list|)
block|{
name|IdentifiedUser
name|me
init|=
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
decl_stmt|;
return|return
name|RefNames
operator|.
name|refsEdit
argument_list|(
name|me
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|change
operator|.
name|getId
argument_list|()
argument_list|,
name|basePatchSet
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
DECL|method|updateEdit ( Project.NameKey projectName, Repository repository, ChangeEdit changeEdit, ObjectId newEditCommitId, Timestamp timestamp)
specifier|private
name|ChangeEdit
name|updateEdit
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|Repository
name|repository
parameter_list|,
name|ChangeEdit
name|changeEdit
parameter_list|,
name|ObjectId
name|newEditCommitId
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|editRefName
init|=
name|changeEdit
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|RevCommit
name|currentEditCommit
init|=
name|changeEdit
operator|.
name|getEditCommit
argument_list|()
decl_stmt|;
name|updateReference
argument_list|(
name|projectName
argument_list|,
name|repository
argument_list|,
name|editRefName
argument_list|,
name|currentEditCommit
argument_list|,
name|newEditCommitId
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|reindex
argument_list|(
name|changeEdit
operator|.
name|getChange
argument_list|()
argument_list|)
expr_stmt|;
name|RevCommit
name|newEditCommit
init|=
name|lookupCommit
argument_list|(
name|repository
argument_list|,
name|newEditCommitId
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChangeEdit
argument_list|(
name|changeEdit
operator|.
name|getChange
argument_list|()
argument_list|,
name|editRefName
argument_list|,
name|newEditCommit
argument_list|,
name|changeEdit
operator|.
name|getBasePatchSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|updateReference ( Project.NameKey projectName, Repository repository, String refName, ObjectId currentObjectId, ObjectId targetObjectId, Timestamp timestamp)
specifier|private
name|void
name|updateReference
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|Repository
name|repository
parameter_list|,
name|String
name|refName
parameter_list|,
name|ObjectId
name|currentObjectId
parameter_list|,
name|ObjectId
name|targetObjectId
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|RefUpdate
name|ru
init|=
name|repository
operator|.
name|updateRef
argument_list|(
name|refName
argument_list|)
decl_stmt|;
name|ru
operator|.
name|setExpectedOldObjectId
argument_list|(
name|currentObjectId
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setNewObjectId
argument_list|(
name|targetObjectId
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogIdent
argument_list|(
name|getRefLogIdent
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setRefLogMessage
argument_list|(
literal|"inline edit (amend)"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|repository
argument_list|)
init|)
block|{
name|RefUpdate
operator|.
name|Result
name|res
init|=
name|ru
operator|.
name|update
argument_list|(
name|revWalk
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
operator|&&
name|res
operator|!=
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot update "
operator|+
name|ru
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
name|projectName
operator|+
literal|": "
operator|+
name|ru
operator|.
name|getResult
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|updateReferenceWithNameChange ( Repository repository, String currentRefName, ObjectId currentObjectId, String newRefName, ObjectId targetObjectId, Timestamp timestamp)
specifier|private
name|void
name|updateReferenceWithNameChange
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|String
name|currentRefName
parameter_list|,
name|ObjectId
name|currentObjectId
parameter_list|,
name|String
name|newRefName
parameter_list|,
name|ObjectId
name|targetObjectId
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|BatchRefUpdate
name|batchRefUpdate
init|=
name|repository
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|newBatchUpdate
argument_list|()
decl_stmt|;
name|batchRefUpdate
operator|.
name|addCommand
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|targetObjectId
argument_list|,
name|newRefName
argument_list|)
argument_list|)
expr_stmt|;
name|batchRefUpdate
operator|.
name|addCommand
argument_list|(
operator|new
name|ReceiveCommand
argument_list|(
name|currentObjectId
argument_list|,
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|,
name|currentRefName
argument_list|)
argument_list|)
expr_stmt|;
name|batchRefUpdate
operator|.
name|setRefLogMessage
argument_list|(
literal|"rebase edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|batchRefUpdate
operator|.
name|setRefLogIdent
argument_list|(
name|getRefLogIdent
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|RevWalk
name|revWalk
init|=
operator|new
name|RevWalk
argument_list|(
name|repository
argument_list|)
init|)
block|{
name|batchRefUpdate
operator|.
name|execute
argument_list|(
name|revWalk
argument_list|,
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReceiveCommand
name|cmd
range|:
name|batchRefUpdate
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getResult
argument_list|()
operator|!=
name|ReceiveCommand
operator|.
name|Result
operator|.
name|OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed: "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getRefLogIdent (Timestamp timestamp)
specifier|private
name|PersonIdent
name|getRefLogIdent
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
name|IdentifiedUser
name|user
init|=
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
decl_stmt|;
return|return
name|user
operator|.
name|newRefLogIdent
argument_list|(
name|timestamp
argument_list|,
name|tz
argument_list|)
return|;
block|}
DECL|method|reindex (Change change)
specifier|private
name|void
name|reindex
parameter_list|(
name|Change
name|change
parameter_list|)
block|{
name|indexer
operator|.
name|index
argument_list|(
name|change
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

