begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|toImmutableSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPattern
operator|.
name|isRE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ParameterizedString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|RefPatternMatcher
specifier|public
specifier|abstract
class|class
name|RefPatternMatcher
block|{
DECL|method|getMatcher (String pattern)
specifier|public
specifier|static
name|RefPatternMatcher
name|getMatcher
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|.
name|contains
argument_list|(
literal|"${"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExpandParameters
argument_list|(
name|pattern
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
operator|new
name|Regexp
argument_list|(
name|pattern
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Prefix
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Exact
argument_list|(
name|pattern
argument_list|)
return|;
block|}
block|}
DECL|method|match (String ref, CurrentUser user)
specifier|public
specifier|abstract
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
function_decl|;
DECL|class|Exact
specifier|private
specifier|static
class|class
name|Exact
extends|extends
name|RefPatternMatcher
block|{
DECL|field|expect
specifier|private
specifier|final
name|String
name|expect
decl_stmt|;
DECL|method|Exact (String name)
name|Exact
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|expect
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (String ref, CurrentUser user)
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|expect
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
return|;
block|}
block|}
DECL|class|Prefix
specifier|private
specifier|static
class|class
name|Prefix
extends|extends
name|RefPatternMatcher
block|{
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|method|Prefix (String pfx)
name|Prefix
parameter_list|(
name|String
name|pfx
parameter_list|)
block|{
name|prefix
operator|=
name|pfx
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (String ref, CurrentUser user)
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
DECL|class|Regexp
specifier|private
specifier|static
class|class
name|Regexp
extends|extends
name|RefPatternMatcher
block|{
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
DECL|method|Regexp (String re)
name|Regexp
parameter_list|(
name|String
name|re
parameter_list|)
block|{
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match (String ref, CurrentUser user)
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|ref
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
DECL|class|ExpandParameters
specifier|static
class|class
name|ExpandParameters
extends|extends
name|RefPatternMatcher
block|{
DECL|field|template
specifier|private
specifier|final
name|ParameterizedString
name|template
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|method|ExpandParameters (String pattern)
name|ExpandParameters
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|template
operator|=
operator|new
name|ParameterizedString
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRE
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
comment|// Replace ${username} and ${shardeduserid} with ":PLACEHOLDER:"
comment|// as : is not legal in a reference and the string :PLACEHOLDER:
comment|// is not likely to be a valid part of the regex. This later
comment|// allows the pattern prefix to be clipped, saving time on
comment|// evaluation.
name|String
name|replacement
init|=
literal|":PLACEHOLDER:"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|RefPattern
operator|.
name|USERID_SHARDED
argument_list|,
name|replacement
argument_list|,
name|RefPattern
operator|.
name|USERNAME
argument_list|,
name|replacement
argument_list|)
decl_stmt|;
name|Automaton
name|am
init|=
name|RefPattern
operator|.
name|toRegExp
argument_list|(
name|template
operator|.
name|replace
argument_list|(
name|params
argument_list|)
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
name|String
name|rePrefix
init|=
name|am
operator|.
name|getCommonPrefix
argument_list|()
decl_stmt|;
name|prefix
operator|=
name|rePrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rePrefix
operator|.
name|indexOf
argument_list|(
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|match (String ref, CurrentUser user)
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|ref
parameter_list|,
name|CurrentUser
name|user
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|username
range|:
name|getUsernames
argument_list|(
name|user
argument_list|)
control|)
block|{
name|String
name|u
decl_stmt|;
if|if
condition|(
name|isRE
argument_list|(
name|template
operator|.
name|getPattern
argument_list|()
argument_list|)
condition|)
block|{
name|u
operator|=
name|Pattern
operator|.
name|quote
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u
operator|=
name|username
expr_stmt|;
block|}
name|Account
operator|.
name|Id
name|accountId
init|=
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|?
name|user
operator|.
name|getAccountId
argument_list|()
else|:
literal|null
decl_stmt|;
name|RefPatternMatcher
name|next
init|=
name|getMatcher
argument_list|(
name|expand
argument_list|(
name|template
argument_list|,
name|u
argument_list|,
name|accountId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|match
argument_list|(
name|expand
argument_list|(
name|ref
argument_list|,
name|u
argument_list|,
name|accountId
argument_list|)
argument_list|,
name|user
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getUsernames (CurrentUser user)
specifier|private
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|getUsernames
parameter_list|(
name|CurrentUser
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
return|return
name|Streams
operator|.
name|concat
argument_list|(
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|getEmailAddresses
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableSet
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|user
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
DECL|method|matchPrefix (String ref)
name|boolean
name|matchPrefix
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
DECL|method|expand (String parameterizedRef, String userName, Account.Id accountId)
specifier|private
name|String
name|expand
parameter_list|(
name|String
name|parameterizedRef
parameter_list|,
name|String
name|userName
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|parameterizedRef
operator|.
name|contains
argument_list|(
literal|"${"
argument_list|)
condition|)
block|{
return|return
name|expand
argument_list|(
operator|new
name|ParameterizedString
argument_list|(
name|parameterizedRef
argument_list|)
argument_list|,
name|userName
argument_list|,
name|accountId
argument_list|)
return|;
block|}
return|return
name|parameterizedRef
return|;
block|}
DECL|method|expand ( ParameterizedString parameterizedRef, String userName, Account.Id accountId)
specifier|private
name|String
name|expand
parameter_list|(
name|ParameterizedString
name|parameterizedRef
parameter_list|,
name|String
name|userName
parameter_list|,
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|RefPattern
operator|.
name|USERNAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|accountId
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|RefPattern
operator|.
name|USERID_SHARDED
argument_list|,
name|RefNames
operator|.
name|shard
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parameterizedRef
operator|.
name|replace
argument_list|(
name|params
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

