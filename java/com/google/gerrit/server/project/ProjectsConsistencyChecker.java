begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|FooterConstants
operator|.
name|CHANGE_ID
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|Predicate
operator|.
name|and
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|Predicate
operator|.
name|or
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeStatusPredicate
operator|.
name|open
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FixInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|CheckProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|CheckProjectInput
operator|.
name|AutoCloseableChangesCheckInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|CheckProjectResultInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|CheckProjectResultInfo
operator|.
name|AutoCloseableChangesCheckResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeIdPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|CommitPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ProjectPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|RefPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|ProjectsConsistencyChecker
specifier|public
class|class
name|ProjectsConsistencyChecker
block|{
DECL|field|AUTO_CLOSE_MAX_COMMITS_LIMIT
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|int
name|AUTO_CLOSE_MAX_COMMITS_LIMIT
init|=
literal|10000
decl_stmt|;
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|retryHelper
specifier|private
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|changeQueryProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|changeQueryProvider
decl_stmt|;
DECL|field|changeJsonFactory
specifier|private
specifier|final
name|ChangeJson
operator|.
name|Factory
name|changeJsonFactory
decl_stmt|;
DECL|field|indexConfig
specifier|private
specifier|final
name|IndexConfig
name|indexConfig
decl_stmt|;
annotation|@
name|Inject
DECL|method|ProjectsConsistencyChecker ( GitRepositoryManager repoManager, RetryHelper retryHelper, Provider<InternalChangeQuery> changeQueryProvider, ChangeJson.Factory changeJsonFactory, IndexConfig indexConfig)
name|ProjectsConsistencyChecker
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|changeQueryProvider
parameter_list|,
name|ChangeJson
operator|.
name|Factory
name|changeJsonFactory
parameter_list|,
name|IndexConfig
name|indexConfig
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|changeQueryProvider
operator|=
name|changeQueryProvider
expr_stmt|;
name|this
operator|.
name|changeJsonFactory
operator|=
name|changeJsonFactory
expr_stmt|;
name|this
operator|.
name|indexConfig
operator|=
name|indexConfig
expr_stmt|;
block|}
DECL|method|check (Project.NameKey projectName, CheckProjectInput input)
specifier|public
name|CheckProjectResultInfo
name|check
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|CheckProjectInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestApiException
block|{
name|CheckProjectResultInfo
name|r
init|=
operator|new
name|CheckProjectResultInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|autoCloseableChangesCheck
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|autoCloseableChangesCheckResult
operator|=
name|checkForAutoCloseableChanges
argument_list|(
name|projectName
argument_list|,
name|input
operator|.
name|autoCloseableChangesCheck
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|checkForAutoCloseableChanges ( Project.NameKey projectName, AutoCloseableChangesCheckInput input)
specifier|private
name|AutoCloseableChangesCheckResult
name|checkForAutoCloseableChanges
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|AutoCloseableChangesCheckInput
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestApiException
block|{
name|AutoCloseableChangesCheckResult
name|r
init|=
operator|new
name|AutoCloseableChangesCheckResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|input
operator|.
name|branch
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"branch is required"
argument_list|)
throw|;
block|}
name|boolean
name|fix
init|=
name|input
operator|.
name|fix
operator|!=
literal|null
condition|?
name|input
operator|.
name|fix
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|maxCommits
operator|!=
literal|null
operator|&&
name|input
operator|.
name|maxCommits
operator|>
name|AUTO_CLOSE_MAX_COMMITS_LIMIT
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"max commits can at most be set to "
operator|+
name|AUTO_CLOSE_MAX_COMMITS_LIMIT
argument_list|)
throw|;
block|}
name|int
name|maxCommits
init|=
name|input
operator|.
name|maxCommits
operator|!=
literal|null
condition|?
name|input
operator|.
name|maxCommits
else|:
name|AUTO_CLOSE_MAX_COMMITS_LIMIT
decl_stmt|;
comment|// Result that we want to return to the client.
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|autoCloseableChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Remember the change IDs of all changes that we already included into the result, so that we
comment|// can avoid including the same change twice.
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|seenChanges
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|projectName
argument_list|)
init|;
name|RevWalk
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|String
name|branch
init|=
name|RefNames
operator|.
name|fullName
argument_list|(
name|input
operator|.
name|branch
argument_list|)
decl_stmt|;
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnprocessableEntityException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"branch '%s' not found"
argument_list|,
name|input
operator|.
name|branch
argument_list|)
argument_list|)
throw|;
block|}
name|rw
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|rw
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
comment|// Cache the SHA1's of all merged commits. We need this for knowing which commit merged the
comment|// change when auto-closing changes by commit.
name|List
argument_list|<
name|ObjectId
argument_list|>
name|mergedSha1s
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Cache the Change-Id to commit SHA1 mapping for all Change-Id's that we find in merged
comment|// commits. We need this for knowing which commit merged the change when auto-closing
comment|// changes by Change-Id.
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|ObjectId
argument_list|>
name|changeIdToMergedSha1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Base predicate which is fixed for every change query.
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|basePredicate
init|=
name|and
argument_list|(
operator|new
name|ProjectPredicate
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RefPredicate
argument_list|(
name|branch
argument_list|)
argument_list|,
name|open
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxLeafPredicates
init|=
name|indexConfig
operator|.
name|maxTerms
argument_list|()
operator|-
name|basePredicate
operator|.
name|getLeafCount
argument_list|()
decl_stmt|;
comment|// List of predicates by which we want to find open changes for the branch. These predicates
comment|// will be combined with the 'or' operator.
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|maxLeafPredicates
argument_list|)
decl_stmt|;
name|RevCommit
name|commit
decl_stmt|;
name|int
name|skippedCommits
init|=
literal|0
decl_stmt|;
name|int
name|walkedCommits
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|commit
operator|=
name|rw
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|skipCommits
operator|!=
literal|null
operator|&&
name|skippedCommits
operator|<
name|input
operator|.
name|skipCommits
condition|)
block|{
name|skippedCommits
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|walkedCommits
operator|>=
name|maxCommits
condition|)
block|{
break|break;
block|}
name|walkedCommits
operator|++
expr_stmt|;
name|ObjectId
name|commitId
init|=
name|commit
operator|.
name|copy
argument_list|()
decl_stmt|;
name|mergedSha1s
operator|.
name|add
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
comment|// Consider all Change-Id lines since this is what ReceiveCommits#autoCloseChanges does.
name|List
argument_list|<
name|String
argument_list|>
name|changeIds
init|=
name|commit
operator|.
name|getFooterLines
argument_list|(
name|CHANGE_ID
argument_list|)
decl_stmt|;
comment|// Number of predicates that we need to add for this commit, 1 per Change-Id plus one for
comment|// the commit.
name|int
name|newPredicatesCount
init|=
name|changeIds
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
comment|// We accumulated the max number of query terms that can be used in one query, execute
comment|// the query and start a new one.
if|if
condition|(
name|predicates
operator|.
name|size
argument_list|()
operator|+
name|newPredicatesCount
operator|>
name|maxLeafPredicates
condition|)
block|{
name|autoCloseableChanges
operator|.
name|addAll
argument_list|(
name|executeQueryAndAutoCloseChanges
argument_list|(
name|basePredicate
argument_list|,
name|seenChanges
argument_list|,
name|predicates
argument_list|,
name|fix
argument_list|,
name|changeIdToMergedSha1
argument_list|,
name|mergedSha1s
argument_list|)
argument_list|)
expr_stmt|;
name|mergedSha1s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeIdToMergedSha1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|predicates
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|newPredicatesCount
operator|>
name|maxLeafPredicates
condition|)
block|{
comment|// Whee, a single commit generates more than maxLeafPredicates predicates. Give up.
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"commit %s contains more Change-Ids than we can handle"
argument_list|,
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|changeIds
operator|.
name|forEach
argument_list|(
name|changeId
lambda|->
block|{
comment|// It can happen that there are multiple merged commits with the same Change-Id
comment|// footer (e.g. if a change was cherry-picked to a stable branch stable branch which
comment|// then got merged back into master, or just by directly pushing several commits
comment|// with the same Change-Id). In this case it is hard to say which of the commits
comment|// should be used to auto-close an open change with the same Change-Id (and branch).
comment|// Possible approaches are:
comment|// 1. use the oldest commit with that Change-Id to auto-close the change
comment|// 2. use the newest commit with that Change-Id to auto-close the change
comment|// Possibility 1. has the disadvantage that the commit may have been merged before
comment|// the change was created in which case it is strange how it could auto-close the
comment|// change. Also this strategy would require to walk all commits since otherwise we
comment|// cannot be sure that we have seen the oldest commit with that Change-Id.
comment|// Possibility 2 has the disadvantage that it doesn't produce the same result as if
comment|// auto-closing on push would have worked, since on direct push the first commit with
comment|// a Change-Id of an open change would have closed that change. Also for this we
comment|// would need to consider all commits that are skipped.
comment|// Since both possibilities are not perfect and require extra effort we choose the
comment|// easiest approach, which is use the newest commit with that Change-Id that we have
comment|// seen (this means we ignore skipped commits). This should be okay since the
comment|// important thing for callers is that auto-closable changes are closed. Which of the
comment|// commits is used to auto-close a change if there are several candidates is of minor
comment|// importance and hence can be non-deterministic.
name|Change
operator|.
name|Key
name|changeKey
init|=
operator|new
name|Change
operator|.
name|Key
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changeIdToMergedSha1
operator|.
name|containsKey
argument_list|(
name|changeKey
argument_list|)
condition|)
block|{
name|changeIdToMergedSha1
operator|.
name|put
argument_list|(
name|changeKey
argument_list|,
name|commitId
argument_list|)
expr_stmt|;
block|}
comment|// Find changes that have a matching Change-Id.
name|predicates
operator|.
name|add
argument_list|(
operator|new
name|ChangeIdPredicate
argument_list|(
name|changeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Find changes that have a matching commit.
name|predicates
operator|.
name|add
argument_list|(
operator|new
name|CommitPredicate
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|predicates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Execute the query with the remaining predicates that were collected.
name|autoCloseableChanges
operator|.
name|addAll
argument_list|(
name|executeQueryAndAutoCloseChanges
argument_list|(
name|basePredicate
argument_list|,
name|seenChanges
argument_list|,
name|predicates
argument_list|,
name|fix
argument_list|,
name|changeIdToMergedSha1
argument_list|,
name|mergedSha1s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|autoCloseableChanges
operator|=
name|autoCloseableChanges
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|executeQueryAndAutoCloseChanges ( Predicate<ChangeData> basePredicate, Set<Change.Id> seenChanges, List<Predicate<ChangeData>> predicates, boolean fix, Map<Change.Key, ObjectId> changeIdToMergedSha1, List<ObjectId> mergedSha1s)
specifier|private
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|executeQueryAndAutoCloseChanges
parameter_list|(
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
name|basePredicate
parameter_list|,
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|seenChanges
parameter_list|,
name|List
argument_list|<
name|Predicate
argument_list|<
name|ChangeData
argument_list|>
argument_list|>
name|predicates
parameter_list|,
name|boolean
name|fix
parameter_list|,
name|Map
argument_list|<
name|Change
operator|.
name|Key
argument_list|,
name|ObjectId
argument_list|>
name|changeIdToMergedSha1
parameter_list|,
name|List
argument_list|<
name|ObjectId
argument_list|>
name|mergedSha1s
parameter_list|)
block|{
if|if
condition|(
name|predicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
try|try
block|{
name|List
argument_list|<
name|ChangeData
argument_list|>
name|queryResult
init|=
name|retryHelper
operator|.
name|execute
argument_list|(
name|ActionType
operator|.
name|INDEX_QUERY
argument_list|,
parameter_list|()
lambda|->
block|{
comment|// Execute the query.
return|return
name|changeQueryProvider
operator|.
name|get
argument_list|()
operator|.
name|setRequestedFields
argument_list|(
name|ChangeField
operator|.
name|CHANGE
argument_list|,
name|ChangeField
operator|.
name|PATCH_SET
argument_list|)
operator|.
name|query
argument_list|(
name|and
argument_list|(
name|basePredicate
argument_list|,
name|or
argument_list|(
name|predicates
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
argument_list|,
name|StorageException
operator|.
name|class
operator|::
name|isInstance
argument_list|)
decl_stmt|;
comment|// Result for this query that we want to return to the client.
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|autoCloseableChangesByBranch
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeData
name|autoCloseableChange
range|:
name|queryResult
control|)
block|{
comment|// Skip changes that we have already processed, either by this query or by
comment|// earlier queries.
if|if
condition|(
name|seenChanges
operator|.
name|add
argument_list|(
name|autoCloseableChange
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|retryHelper
operator|.
name|execute
argument_list|(
name|ActionType
operator|.
name|CHANGE_UPDATE
argument_list|,
parameter_list|()
lambda|->
block|{
comment|// Auto-close by change
if|if
condition|(
name|changeIdToMergedSha1
operator|.
name|containsKey
argument_list|(
name|autoCloseableChange
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|autoCloseableChangesByBranch
operator|.
name|add
argument_list|(
name|changeJson
argument_list|(
name|fix
argument_list|,
name|changeIdToMergedSha1
operator|.
name|get
argument_list|(
name|autoCloseableChange
operator|.
name|change
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|format
argument_list|(
name|autoCloseableChange
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Auto-close by commit
for|for
control|(
name|ObjectId
name|patchSetSha1
range|:
name|autoCloseableChange
operator|.
name|patchSets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ps
lambda|->
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|mergedSha1s
operator|.
name|contains
argument_list|(
name|patchSetSha1
argument_list|)
condition|)
block|{
name|autoCloseableChangesByBranch
operator|.
name|add
argument_list|(
name|changeJson
argument_list|(
name|fix
argument_list|,
name|patchSetSha1
argument_list|)
operator|.
name|format
argument_list|(
name|autoCloseableChange
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|,
name|StorageException
operator|.
name|class
operator|::
name|isInstance
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|autoCloseableChangesByBranch
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|StorageException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|changeJson (Boolean fix, ObjectId mergedAs)
specifier|private
name|ChangeJson
name|changeJson
parameter_list|(
name|Boolean
name|fix
parameter_list|,
name|ObjectId
name|mergedAs
parameter_list|)
block|{
name|ChangeJson
name|changeJson
init|=
name|changeJsonFactory
operator|.
name|create
argument_list|(
name|ListChangesOption
operator|.
name|CHECK
argument_list|)
decl_stmt|;
if|if
condition|(
name|fix
operator|!=
literal|null
operator|&&
name|fix
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|FixInput
name|fixInput
init|=
operator|new
name|FixInput
argument_list|()
decl_stmt|;
name|fixInput
operator|.
name|expectMergedAs
operator|=
name|mergedAs
operator|.
name|name
argument_list|()
expr_stmt|;
name|changeJson
operator|.
name|fix
argument_list|(
name|fixInput
argument_list|)
expr_stmt|;
block|}
return|return
name|changeJson
return|;
block|}
block|}
end_class

end_unit

