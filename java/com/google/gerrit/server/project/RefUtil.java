begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_REFS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_TAGS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|IncorrectObjectTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|MissingObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RevisionSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|ObjectWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|RefUtil
specifier|public
class|class
name|RefUtil
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RefUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|parseBaseRevision ( Repository repo, Project.NameKey projectName, String baseRevision)
specifier|public
specifier|static
name|ObjectId
name|parseBaseRevision
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|String
name|baseRevision
parameter_list|)
throws|throws
name|InvalidRevisionException
block|{
try|try
block|{
name|ObjectId
name|revid
init|=
name|repo
operator|.
name|resolve
argument_list|(
name|baseRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|revid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
return|return
name|revid
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot resolve \""
operator|+
name|baseRevision
operator|+
literal|"\" in project \""
operator|+
name|projectName
operator|.
name|get
argument_list|()
operator|+
literal|"\""
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|RevisionSyntaxException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid revision syntax \""
operator|+
name|baseRevision
operator|+
literal|"\""
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
block|}
DECL|method|verifyConnected (Repository repo, ObjectId revid)
specifier|public
specifier|static
name|RevWalk
name|verifyConnected
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|ObjectId
name|revid
parameter_list|)
throws|throws
name|InvalidRevisionException
block|{
try|try
block|{
name|ObjectWalk
name|rw
init|=
operator|new
name|ObjectWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
try|try
block|{
name|rw
operator|.
name|markStart
argument_list|(
name|rw
operator|.
name|parseCommit
argument_list|(
name|revid
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
name|RefDatabase
name|refDb
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Ref
argument_list|>
name|refs
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|refDb
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|.
name|values
argument_list|()
argument_list|,
name|refDb
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_TAGS
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Ref
name|rc
init|=
name|refDb
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|refs
operator|=
name|Iterables
operator|.
name|concat
argument_list|(
name|refs
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|rc
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Ref
name|r
range|:
name|refs
control|)
block|{
try|try
block|{
name|rw
operator|.
name|markUninteresting
argument_list|(
name|rw
operator|.
name|parseAny
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingObjectException
name|err
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|rw
operator|.
name|checkConnectivity
argument_list|()
expr_stmt|;
return|return
name|rw
return|;
block|}
catch|catch
parameter_list|(
name|IncorrectObjectTypeException
decl||
name|MissingObjectException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Repository \""
operator|+
name|repo
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"\" may be corrupt; suggest running git fsck"
argument_list|,
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidRevisionException
argument_list|()
throw|;
block|}
block|}
DECL|method|getRefPrefix (String refName)
specifier|public
specifier|static
name|String
name|getRefPrefix
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
name|int
name|i
init|=
name|refName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
name|Constants
operator|.
name|R_HEADS
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|refName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
return|;
block|}
return|return
name|Constants
operator|.
name|R_HEADS
return|;
block|}
DECL|method|normalizeTagRef (String tag)
specifier|public
specifier|static
name|String
name|normalizeTagRef
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|String
name|result
init|=
name|tag
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|startsWith
argument_list|(
name|R_REFS
argument_list|)
operator|&&
operator|!
name|result
operator|.
name|startsWith
argument_list|(
name|R_TAGS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid tag name \""
operator|+
name|result
operator|+
literal|"\""
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|startsWith
argument_list|(
name|R_TAGS
argument_list|)
condition|)
block|{
name|result
operator|=
name|R_TAGS
operator|+
name|result
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Repository
operator|.
name|isValidRefName
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid tag name \""
operator|+
name|result
operator|+
literal|"\""
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/** Error indicating the revision is invalid as supplied. */
DECL|class|InvalidRevisionException
specifier|static
class|class
name|InvalidRevisionException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"Invalid Revision"
decl_stmt|;
DECL|method|InvalidRevisionException ()
name|InvalidRevisionException
parameter_list|()
block|{
name|super
argument_list|(
name|MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

