begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rules
operator|.
name|PrologRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rules
operator|.
name|SubmitRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Evaluates a submit-like Prolog rule found in the rules.pl file of the current project and filters  * the results through rules found in the parent projects, all the way up to All-Projects.  */
end_comment

begin_class
DECL|class|SubmitRuleEvaluator
specifier|public
class|class
name|SubmitRuleEvaluator
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubmitRuleEvaluator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MSG
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MSG
init|=
literal|"Error evaluating project rules, check server log"
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|prologRule
specifier|private
specifier|final
name|PrologRule
name|prologRule
decl_stmt|;
DECL|field|submitRules
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|SubmitRule
argument_list|>
name|submitRules
decl_stmt|;
DECL|field|opts
specifier|private
specifier|final
name|SubmitRuleOptions
name|opts
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
comment|/** Returns a new {@link SubmitRuleEvaluator} with the specified options */
DECL|method|create (SubmitRuleOptions options)
name|SubmitRuleEvaluator
name|create
parameter_list|(
name|SubmitRuleOptions
name|options
parameter_list|)
function_decl|;
block|}
annotation|@
name|Inject
DECL|method|SubmitRuleEvaluator ( ProjectCache projectCache, PrologRule prologRule, DynamicSet<SubmitRule> submitRules, @Assisted SubmitRuleOptions options)
specifier|private
name|SubmitRuleEvaluator
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|PrologRule
name|prologRule
parameter_list|,
name|DynamicSet
argument_list|<
name|SubmitRule
argument_list|>
name|submitRules
parameter_list|,
annotation|@
name|Assisted
name|SubmitRuleOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|prologRule
operator|=
name|prologRule
expr_stmt|;
name|this
operator|.
name|submitRules
operator|=
name|submitRules
expr_stmt|;
name|this
operator|.
name|opts
operator|=
name|options
expr_stmt|;
block|}
DECL|method|defaultRuleError ()
specifier|public
specifier|static
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|defaultRuleError
parameter_list|()
block|{
return|return
name|createRuleError
argument_list|(
name|DEFAULT_MSG
argument_list|)
return|;
block|}
DECL|method|createRuleError (String err)
specifier|public
specifier|static
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|createRuleError
parameter_list|(
name|String
name|err
parameter_list|)
block|{
name|SubmitRecord
name|rec
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|rec
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|RULE_ERROR
expr_stmt|;
name|rec
operator|.
name|errorMessage
operator|=
name|err
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|rec
argument_list|)
return|;
block|}
DECL|method|defaultTypeError ()
specifier|public
specifier|static
name|SubmitTypeRecord
name|defaultTypeError
parameter_list|()
block|{
return|return
name|SubmitTypeRecord
operator|.
name|error
argument_list|(
name|DEFAULT_MSG
argument_list|)
return|;
block|}
comment|/**    * Evaluate the submit rules.    *    * @return List of {@link SubmitRecord} objects returned from the evaluated rules, including any    *     errors.    * @param cd ChangeData to evaluate    */
DECL|method|evaluate (ChangeData cd)
specifier|public
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|evaluate
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
name|Change
name|change
decl_stmt|;
name|ProjectState
name|projectState
decl_stmt|;
try|try
block|{
name|change
operator|=
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Change not found"
argument_list|)
throw|;
block|}
name|projectState
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
decl||
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
name|ruleError
argument_list|(
literal|"Error looking up change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|opts
operator|.
name|allowClosed
argument_list|()
operator|&&
name|change
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|SubmitRecord
name|rec
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|rec
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|CLOSED
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|rec
argument_list|)
return|;
block|}
comment|// We evaluate all the plugin-defined evaluators,
comment|// and then we collect the results in one list.
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
name|submitRules
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|evaluate
argument_list|(
name|cd
argument_list|,
name|opts
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ruleError (String err, Exception e)
specifier|private
name|List
argument_list|<
name|SubmitRecord
argument_list|>
name|ruleError
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|.
name|logErrors
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultRuleError
argument_list|()
return|;
block|}
return|return
name|createRuleError
argument_list|(
name|err
argument_list|)
return|;
block|}
comment|/**    * Evaluate the submit type rules to get the submit type.    *    * @return record from the evaluated rules.    * @param cd    */
DECL|method|getSubmitType (ChangeData cd)
specifier|public
name|SubmitTypeRecord
name|getSubmitType
parameter_list|(
name|ChangeData
name|cd
parameter_list|)
block|{
name|ProjectState
name|projectState
decl_stmt|;
try|try
block|{
name|projectState
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
name|typeError
argument_list|(
literal|"Error looking up change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
return|return
name|prologRule
operator|.
name|getSubmitType
argument_list|(
name|cd
argument_list|,
name|opts
argument_list|)
return|;
block|}
DECL|method|typeError (String err, Exception e)
specifier|private
name|SubmitTypeRecord
name|typeError
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|.
name|logErrors
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultTypeError
argument_list|()
return|;
block|}
return|return
name|SubmitTypeRecord
operator|.
name|error
argument_list|(
name|err
argument_list|)
return|;
block|}
block|}
end_class

end_unit

