begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|LabelDefinitionInfo
import|;
end_import

begin_class
DECL|class|LabelDefinitionJson
specifier|public
class|class
name|LabelDefinitionJson
block|{
DECL|method|format (Project.NameKey projectName, LabelType labelType)
specifier|public
specifier|static
name|LabelDefinitionInfo
name|format
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|LabelType
name|labelType
parameter_list|)
block|{
name|LabelDefinitionInfo
name|label
init|=
operator|new
name|LabelDefinitionInfo
argument_list|()
decl_stmt|;
name|label
operator|.
name|name
operator|=
name|labelType
operator|.
name|getName
argument_list|()
expr_stmt|;
name|label
operator|.
name|projectName
operator|=
name|projectName
operator|.
name|get
argument_list|()
expr_stmt|;
name|label
operator|.
name|function
operator|=
name|labelType
operator|.
name|getFunction
argument_list|()
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
name|label
operator|.
name|values
operator|=
name|labelType
operator|.
name|getValues
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toMap
argument_list|(
name|LabelValue
operator|::
name|formatValue
argument_list|,
name|LabelValue
operator|::
name|getText
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|defaultValue
operator|=
name|labelType
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|label
operator|.
name|branches
operator|=
name|labelType
operator|.
name|getRefPatterns
argument_list|()
operator|!=
literal|null
condition|?
name|labelType
operator|.
name|getRefPatterns
argument_list|()
else|:
literal|null
expr_stmt|;
name|label
operator|.
name|canOverride
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|canOverride
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyAnyScore
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyAnyScore
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyMinScore
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyMinScore
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyMaxScore
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyAllScoresIfNoChange
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyAllScoresIfNoChange
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyAllScoresIfNoCodeChange
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyAllScoresIfNoCodeChange
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyAllScoresOnTrivialRebase
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyAllScoresOnTrivialRebase
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|copyAllScoresOnMergeFirstParentUpdate
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|isCopyAllScoresOnMergeFirstParentUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|allowPostSubmit
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|allowPostSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|ignoreSelfApproval
operator|=
name|toBoolean
argument_list|(
name|labelType
operator|.
name|ignoreSelfApproval
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|label
return|;
block|}
DECL|method|toBoolean (boolean v)
specifier|private
specifier|static
name|Boolean
name|toBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
return|return
name|v
condition|?
name|v
else|:
literal|null
return|;
block|}
DECL|method|LabelDefinitionJson ()
specifier|private
name|LabelDefinitionJson
parameter_list|()
block|{}
block|}
end_class

end_unit

