begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ProjectInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|ProjectPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Retrieve child projects (ie. projects whose access inherits from a given parent.) */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ChildProjects
specifier|public
class|class
name|ChildProjects
block|{
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|allProjects
specifier|private
specifier|final
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|json
specifier|private
specifier|final
name|ProjectJson
name|json
decl_stmt|;
annotation|@
name|Inject
DECL|method|ChildProjects ( ProjectCache projectCache, PermissionBackend permissionBackend, AllProjectsName allProjectsName, ProjectJson json)
name|ChildProjects
parameter_list|(
name|ProjectCache
name|projectCache
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|AllProjectsName
name|allProjectsName
parameter_list|,
name|ProjectJson
name|json
parameter_list|)
block|{
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|allProjects
operator|=
name|allProjectsName
expr_stmt|;
name|this
operator|.
name|json
operator|=
name|json
expr_stmt|;
block|}
comment|/** Gets all child projects recursively. */
DECL|method|list (Project.NameKey parent)
specifier|public
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|list
parameter_list|(
name|Project
operator|.
name|NameKey
name|parent
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
argument_list|>
name|projects
init|=
name|readAllReadableProjects
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|children
init|=
name|parentToChildren
argument_list|(
name|projects
argument_list|)
decl_stmt|;
name|PermissionBackend
operator|.
name|WithUser
name|perm
init|=
name|permissionBackend
operator|.
name|currentUser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|depthFirstFormat
argument_list|(
name|results
argument_list|,
name|perm
argument_list|,
name|projects
argument_list|,
name|children
argument_list|,
name|parent
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
DECL|method|readAllReadableProjects ()
specifier|private
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
argument_list|>
name|readAllReadableProjects
parameter_list|()
block|{
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
argument_list|>
name|projects
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Project
operator|.
name|NameKey
name|name
range|:
name|projectCache
operator|.
name|all
argument_list|()
control|)
block|{
name|ProjectState
name|c
init|=
name|projectCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|statePermitsRead
argument_list|()
condition|)
block|{
name|projects
operator|.
name|put
argument_list|(
name|c
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|projects
return|;
block|}
comment|/** Map of parent project to direct child. */
DECL|method|parentToChildren ( Map<Project.NameKey, Project> projects)
specifier|private
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|parentToChildren
parameter_list|(
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
argument_list|>
name|projects
parameter_list|)
block|{
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|m
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
argument_list|>
name|e
range|:
name|projects
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|allProjects
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getParent
argument_list|(
name|allProjects
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
DECL|method|depthFirstFormat ( List<ProjectInfo> results, PermissionBackend.WithUser perm, Map<Project.NameKey, Project> projects, Multimap<Project.NameKey, Project.NameKey> children, Project.NameKey parent)
specifier|private
name|void
name|depthFirstFormat
parameter_list|(
name|List
argument_list|<
name|ProjectInfo
argument_list|>
name|results
parameter_list|,
name|PermissionBackend
operator|.
name|WithUser
name|perm
parameter_list|,
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
argument_list|>
name|projects
parameter_list|,
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Project
operator|.
name|NameKey
argument_list|>
name|children
parameter_list|,
name|Project
operator|.
name|NameKey
name|parent
parameter_list|)
throws|throws
name|PermissionBackendException
block|{
name|List
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|canSee
init|=
name|perm
operator|.
name|filter
argument_list|(
name|ProjectPermission
operator|.
name|ACCESS
argument_list|,
name|children
operator|.
name|get
argument_list|(
name|parent
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|children
operator|.
name|removeAll
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// removing all entries prevents cycles.
for|for
control|(
name|Project
operator|.
name|NameKey
name|c
range|:
name|canSee
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|json
operator|.
name|format
argument_list|(
name|projects
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|depthFirstFormat
argument_list|(
name|results
argument_list|,
name|perm
argument_list|,
name|projects
argument_list|,
name|children
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

