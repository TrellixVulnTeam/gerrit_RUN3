begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|RefPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Manages access control for creating Git references (aka branches, tags). */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|CreateRefControl
specifier|public
class|class
name|CreateRefControl
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CreateRefControl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|permissionBackend
specifier|private
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|projectCache
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|CreateRefControl (PermissionBackend permissionBackend, ProjectCache projectCache)
name|CreateRefControl
parameter_list|(
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
comment|/**    * Checks whether the {@link CurrentUser} can create a new Git ref.    *    * @param user the user performing the operation    * @param repo repository on which user want to create    * @param branch the branch the new {@link RevObject} should be created on    * @param object the object the user will start the reference with    * @throws AuthException if creation is denied; the message explains the denial.    * @throws PermissionBackendException on failure of permission checks.    */
DECL|method|checkCreateRef ( Provider<? extends CurrentUser> user, Repository repo, Branch.NameKey branch, RevObject object)
specifier|public
name|void
name|checkCreateRef
parameter_list|(
name|Provider
argument_list|<
name|?
extends|extends
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|RevObject
name|object
parameter_list|)
throws|throws
name|AuthException
throws|,
name|PermissionBackendException
throws|,
name|NoSuchProjectException
throws|,
name|IOException
block|{
name|ProjectState
name|ps
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ps
operator|.
name|getProject
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|permitsWrite
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"project state does not permit write"
argument_list|)
throw|;
block|}
name|PermissionBackend
operator|.
name|ForRef
name|perm
init|=
name|permissionBackend
operator|.
name|user
argument_list|(
name|user
argument_list|)
operator|.
name|ref
argument_list|(
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|RevCommit
condition|)
block|{
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|checkCreateCommit
argument_list|(
name|user
argument_list|,
name|repo
argument_list|,
operator|(
name|RevCommit
operator|)
name|object
argument_list|,
name|ps
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|RevTag
condition|)
block|{
name|RevTag
name|tag
init|=
operator|(
name|RevTag
operator|)
name|object
decl_stmt|;
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|rw
operator|.
name|parseBody
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"RevWalk(%s) parsing %s:"
argument_list|,
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|tag
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// If tagger is present, require it matches the user's email.
name|PersonIdent
name|tagger
init|=
name|tag
operator|.
name|getTaggerIdent
argument_list|()
decl_stmt|;
if|if
condition|(
name|tagger
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|user
operator|.
name|get
argument_list|()
operator|.
name|isIdentifiedUser
argument_list|()
operator|||
operator|!
name|user
operator|.
name|get
argument_list|()
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|hasEmailAddress
argument_list|(
name|tagger
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|perm
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|FORGE_COMMITTER
argument_list|)
expr_stmt|;
block|}
name|RevObject
name|target
init|=
name|tag
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|RevCommit
condition|)
block|{
name|checkCreateCommit
argument_list|(
name|user
argument_list|,
name|repo
argument_list|,
operator|(
name|RevCommit
operator|)
name|target
argument_list|,
name|ps
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkCreateRef
argument_list|(
name|user
argument_list|,
name|repo
argument_list|,
name|branch
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|// If the tag has a PGP signature, allow a lower level of permission
comment|// than if it doesn't have a PGP signature.
name|RefControl
name|refControl
init|=
name|ps
operator|.
name|controlFor
argument_list|(
name|user
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|controlForRef
argument_list|(
name|branch
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getFullMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-----BEGIN PGP SIGNATURE-----\n"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|refControl
operator|.
name|canPerform
argument_list|(
name|Permission
operator|.
name|CREATE_SIGNED_TAG
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|Permission
operator|.
name|CREATE_SIGNED_TAG
operator|+
literal|" not permitted"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|refControl
operator|.
name|canPerform
argument_list|(
name|Permission
operator|.
name|CREATE_TAG
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
name|Permission
operator|.
name|CREATE_TAG
operator|+
literal|" not permitted"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Check if the user is allowed to create a new commit object if this creation would introduce a    * new commit to the repository.    */
DECL|method|checkCreateCommit ( Provider<? extends CurrentUser> user, Repository repo, RevCommit commit, ProjectState projectState, PermissionBackend.ForRef forRef)
specifier|private
name|void
name|checkCreateCommit
parameter_list|(
name|Provider
argument_list|<
name|?
extends|extends
name|CurrentUser
argument_list|>
name|user
parameter_list|,
name|Repository
name|repo
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|PermissionBackend
operator|.
name|ForRef
name|forRef
parameter_list|)
throws|throws
name|AuthException
throws|,
name|PermissionBackendException
block|{
try|try
block|{
comment|// If the user has update (push) permission, they can create the ref regardless
comment|// of whether they are pushing any new objects along with the create.
name|forRef
operator|.
name|check
argument_list|(
name|RefPermission
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AuthException
name|denied
parameter_list|)
block|{
comment|// Fall through to check reachability.
block|}
if|if
condition|(
name|projectState
operator|.
name|controlFor
argument_list|(
name|user
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isReachableFromHeadsOrTags
argument_list|(
name|repo
argument_list|,
name|commit
argument_list|)
condition|)
block|{
comment|// If the user has no push permissions, check whether the object is
comment|// merged into a branch or tag readable by this user. If so, they are
comment|// not effectively "pushing" more objects, so they can create the ref
comment|// even if they don't have push permission.
return|return;
block|}
throw|throw
operator|new
name|AuthException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s for creating new commit object not permitted"
argument_list|,
name|RefPermission
operator|.
name|UPDATE
operator|.
name|describeForException
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

