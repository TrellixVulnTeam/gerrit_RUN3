begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|RefInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|dk
operator|.
name|brics
operator|.
name|automaton
operator|.
name|RunAutomaton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|RefFilter
specifier|public
class|class
name|RefFilter
parameter_list|<
name|T
extends|extends
name|RefInfo
parameter_list|>
block|{
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|matchSubstring
specifier|private
name|String
name|matchSubstring
decl_stmt|;
DECL|field|matchRegex
specifier|private
name|String
name|matchRegex
decl_stmt|;
DECL|field|start
specifier|private
name|int
name|start
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|method|RefFilter (String prefix)
specifier|public
name|RefFilter
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
DECL|method|subString (String subString)
specifier|public
name|RefFilter
argument_list|<
name|T
argument_list|>
name|subString
parameter_list|(
name|String
name|subString
parameter_list|)
block|{
name|this
operator|.
name|matchSubstring
operator|=
name|subString
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|regex (String regex)
specifier|public
name|RefFilter
argument_list|<
name|T
argument_list|>
name|regex
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|matchRegex
operator|=
name|regex
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|start (int start)
specifier|public
name|RefFilter
argument_list|<
name|T
argument_list|>
name|start
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|limit (int limit)
specifier|public
name|RefFilter
argument_list|<
name|T
argument_list|>
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|filter (List<T> refs)
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|refs
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|matchSubstring
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|matchRegex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"specify exactly one of m/r"
argument_list|)
throw|;
block|}
name|FluentIterable
argument_list|<
name|T
argument_list|>
name|results
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|refs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|matchSubstring
argument_list|)
condition|)
block|{
name|results
operator|=
name|results
operator|.
name|filter
argument_list|(
operator|new
name|SubstringPredicate
argument_list|(
name|matchSubstring
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|matchRegex
argument_list|)
condition|)
block|{
name|results
operator|=
name|results
operator|.
name|filter
argument_list|(
operator|new
name|RegexPredicate
argument_list|(
name|matchRegex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>
literal|0
condition|)
block|{
name|results
operator|=
name|results
operator|.
name|skip
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|results
operator|=
name|results
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
name|results
operator|.
name|toList
argument_list|()
return|;
block|}
DECL|class|SubstringPredicate
specifier|private
class|class
name|SubstringPredicate
implements|implements
name|Predicate
argument_list|<
name|T
argument_list|>
block|{
DECL|field|substring
specifier|private
specifier|final
name|String
name|substring
decl_stmt|;
DECL|method|SubstringPredicate (String substring)
specifier|private
name|SubstringPredicate
parameter_list|(
name|String
name|substring
parameter_list|)
block|{
name|this
operator|.
name|substring
operator|=
name|substring
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (T in)
specifier|public
name|boolean
name|apply
parameter_list|(
name|T
name|in
parameter_list|)
block|{
name|String
name|ref
init|=
name|in
operator|.
name|ref
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|ref
operator|=
name|ref
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ref
operator|=
name|ref
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
return|return
name|ref
operator|.
name|contains
argument_list|(
name|substring
argument_list|)
return|;
block|}
block|}
DECL|class|RegexPredicate
specifier|private
class|class
name|RegexPredicate
implements|implements
name|Predicate
argument_list|<
name|T
argument_list|>
block|{
DECL|field|a
specifier|private
specifier|final
name|RunAutomaton
name|a
decl_stmt|;
DECL|method|RegexPredicate (String regex)
specifier|private
name|RegexPredicate
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
name|regex
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
name|regex
operator|=
name|regex
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|regex
operator|.
name|endsWith
argument_list|(
literal|"$"
argument_list|)
operator|&&
operator|!
name|regex
operator|.
name|endsWith
argument_list|(
literal|"\\$"
argument_list|)
condition|)
block|{
name|regex
operator|=
name|regex
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|regex
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|a
operator|=
operator|new
name|RunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
name|regex
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|apply (T in)
specifier|public
name|boolean
name|apply
parameter_list|(
name|T
name|in
parameter_list|)
block|{
name|String
name|ref
init|=
name|in
operator|.
name|ref
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|ref
operator|=
name|ref
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|a
operator|.
name|run
argument_list|(
name|ref
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

