begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
operator|.
name|isPermission
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
operator|.
name|DEFAULT_SUBMIT_TYPE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Shorts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ContributorAgreement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|RefConfigSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubscribeSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ProjectWatches
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|PluginConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|BranchOrderSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|NotifyConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|VersionedMetaData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|ProjectConfig
specifier|public
class|class
name|ProjectConfig
extends|extends
name|VersionedMetaData
implements|implements
name|ValidationError
operator|.
name|Sink
block|{
DECL|field|COMMENTLINK
specifier|public
specifier|static
specifier|final
name|String
name|COMMENTLINK
init|=
literal|"commentlink"
decl_stmt|;
DECL|field|KEY_MATCH
specifier|private
specifier|static
specifier|final
name|String
name|KEY_MATCH
init|=
literal|"match"
decl_stmt|;
DECL|field|KEY_HTML
specifier|private
specifier|static
specifier|final
name|String
name|KEY_HTML
init|=
literal|"html"
decl_stmt|;
DECL|field|KEY_LINK
specifier|private
specifier|static
specifier|final
name|String
name|KEY_LINK
init|=
literal|"link"
decl_stmt|;
DECL|field|KEY_ENABLED
specifier|private
specifier|static
specifier|final
name|String
name|KEY_ENABLED
init|=
literal|"enabled"
decl_stmt|;
DECL|field|PROJECT_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|PROJECT_CONFIG
init|=
literal|"project.config"
decl_stmt|;
DECL|field|PROJECT
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT
init|=
literal|"project"
decl_stmt|;
DECL|field|KEY_DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DESCRIPTION
init|=
literal|"description"
decl_stmt|;
DECL|field|ACCESS
specifier|public
specifier|static
specifier|final
name|String
name|ACCESS
init|=
literal|"access"
decl_stmt|;
DECL|field|KEY_INHERIT_FROM
specifier|private
specifier|static
specifier|final
name|String
name|KEY_INHERIT_FROM
init|=
literal|"inheritFrom"
decl_stmt|;
DECL|field|KEY_GROUP_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|String
name|KEY_GROUP_PERMISSIONS
init|=
literal|"exclusiveGroupPermissions"
decl_stmt|;
DECL|field|ACCOUNTS
specifier|private
specifier|static
specifier|final
name|String
name|ACCOUNTS
init|=
literal|"accounts"
decl_stmt|;
DECL|field|KEY_SAME_GROUP_VISIBILITY
specifier|private
specifier|static
specifier|final
name|String
name|KEY_SAME_GROUP_VISIBILITY
init|=
literal|"sameGroupVisibility"
decl_stmt|;
DECL|field|BRANCH_ORDER
specifier|private
specifier|static
specifier|final
name|String
name|BRANCH_ORDER
init|=
literal|"branchOrder"
decl_stmt|;
DECL|field|BRANCH
specifier|private
specifier|static
specifier|final
name|String
name|BRANCH
init|=
literal|"branch"
decl_stmt|;
DECL|field|CONTRIBUTOR_AGREEMENT
specifier|private
specifier|static
specifier|final
name|String
name|CONTRIBUTOR_AGREEMENT
init|=
literal|"contributor-agreement"
decl_stmt|;
DECL|field|KEY_ACCEPTED
specifier|private
specifier|static
specifier|final
name|String
name|KEY_ACCEPTED
init|=
literal|"accepted"
decl_stmt|;
DECL|field|KEY_AUTO_VERIFY
specifier|private
specifier|static
specifier|final
name|String
name|KEY_AUTO_VERIFY
init|=
literal|"autoVerify"
decl_stmt|;
DECL|field|KEY_AGREEMENT_URL
specifier|private
specifier|static
specifier|final
name|String
name|KEY_AGREEMENT_URL
init|=
literal|"agreementUrl"
decl_stmt|;
DECL|field|NOTIFY
specifier|private
specifier|static
specifier|final
name|String
name|NOTIFY
init|=
literal|"notify"
decl_stmt|;
DECL|field|KEY_EMAIL
specifier|private
specifier|static
specifier|final
name|String
name|KEY_EMAIL
init|=
literal|"email"
decl_stmt|;
DECL|field|KEY_FILTER
specifier|private
specifier|static
specifier|final
name|String
name|KEY_FILTER
init|=
literal|"filter"
decl_stmt|;
DECL|field|KEY_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|KEY_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|KEY_HEADER
init|=
literal|"header"
decl_stmt|;
DECL|field|CAPABILITY
specifier|private
specifier|static
specifier|final
name|String
name|CAPABILITY
init|=
literal|"capability"
decl_stmt|;
DECL|field|RECEIVE
specifier|private
specifier|static
specifier|final
name|String
name|RECEIVE
init|=
literal|"receive"
decl_stmt|;
DECL|field|KEY_CHECK_RECEIVED_OBJECTS
specifier|private
specifier|static
specifier|final
name|String
name|KEY_CHECK_RECEIVED_OBJECTS
init|=
literal|"checkReceivedObjects"
decl_stmt|;
DECL|field|SUBMIT
specifier|private
specifier|static
specifier|final
name|String
name|SUBMIT
init|=
literal|"submit"
decl_stmt|;
DECL|field|KEY_ACTION
specifier|private
specifier|static
specifier|final
name|String
name|KEY_ACTION
init|=
literal|"action"
decl_stmt|;
DECL|field|KEY_STATE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_STATE
init|=
literal|"state"
decl_stmt|;
DECL|field|KEY_MAX_OBJECT_SIZE_LIMIT
specifier|private
specifier|static
specifier|final
name|String
name|KEY_MAX_OBJECT_SIZE_LIMIT
init|=
literal|"maxObjectSizeLimit"
decl_stmt|;
DECL|field|SUBSCRIBE_SECTION
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIBE_SECTION
init|=
literal|"allowSuperproject"
decl_stmt|;
DECL|field|SUBSCRIBE_MATCH_REFS
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIBE_MATCH_REFS
init|=
literal|"matching"
decl_stmt|;
DECL|field|SUBSCRIBE_MULTI_MATCH_REFS
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIBE_MULTI_MATCH_REFS
init|=
literal|"all"
decl_stmt|;
DECL|field|DASHBOARD
specifier|private
specifier|static
specifier|final
name|String
name|DASHBOARD
init|=
literal|"dashboard"
decl_stmt|;
DECL|field|KEY_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DEFAULT
init|=
literal|"default"
decl_stmt|;
DECL|field|KEY_LOCAL_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|KEY_LOCAL_DEFAULT
init|=
literal|"local-default"
decl_stmt|;
DECL|field|LABEL
specifier|private
specifier|static
specifier|final
name|String
name|LABEL
init|=
literal|"label"
decl_stmt|;
DECL|field|KEY_FUNCTION
specifier|private
specifier|static
specifier|final
name|String
name|KEY_FUNCTION
init|=
literal|"function"
decl_stmt|;
DECL|field|KEY_DEFAULT_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_DEFAULT_VALUE
init|=
literal|"defaultValue"
decl_stmt|;
DECL|field|KEY_COPY_MIN_SCORE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_COPY_MIN_SCORE
init|=
literal|"copyMinScore"
decl_stmt|;
DECL|field|KEY_ALLOW_POST_SUBMIT
specifier|private
specifier|static
specifier|final
name|String
name|KEY_ALLOW_POST_SUBMIT
init|=
literal|"allowPostSubmit"
decl_stmt|;
DECL|field|KEY_COPY_MAX_SCORE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_COPY_MAX_SCORE
init|=
literal|"copyMaxScore"
decl_stmt|;
DECL|field|KEY_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
init|=
literal|"copyAllScoresOnMergeFirstParentUpdate"
decl_stmt|;
DECL|field|KEY_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
init|=
literal|"copyAllScoresOnTrivialRebase"
decl_stmt|;
DECL|field|KEY_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
init|=
literal|"copyAllScoresIfNoCodeChange"
decl_stmt|;
DECL|field|KEY_COPY_ALL_SCORES_IF_NO_CHANGE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_COPY_ALL_SCORES_IF_NO_CHANGE
init|=
literal|"copyAllScoresIfNoChange"
decl_stmt|;
DECL|field|KEY_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_VALUE
init|=
literal|"value"
decl_stmt|;
DECL|field|KEY_CAN_OVERRIDE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_CAN_OVERRIDE
init|=
literal|"canOverride"
decl_stmt|;
DECL|field|KEY_BRANCH
specifier|private
specifier|static
specifier|final
name|String
name|KEY_BRANCH
init|=
literal|"branch"
decl_stmt|;
DECL|field|LEGACY_PERMISSION_PUSH_TAG
specifier|private
specifier|static
specifier|final
name|String
name|LEGACY_PERMISSION_PUSH_TAG
init|=
literal|"pushTag"
decl_stmt|;
DECL|field|LEGACY_PERMISSION_PUSH_SIGNED_TAG
specifier|private
specifier|static
specifier|final
name|String
name|LEGACY_PERMISSION_PUSH_SIGNED_TAG
init|=
literal|"pushSignedTag"
decl_stmt|;
DECL|field|PLUGIN
specifier|private
specifier|static
specifier|final
name|String
name|PLUGIN
init|=
literal|"plugin"
decl_stmt|;
DECL|field|DEFAULT_STATE_VALUE
specifier|private
specifier|static
specifier|final
name|ProjectState
name|DEFAULT_STATE_VALUE
init|=
name|ProjectState
operator|.
name|ACTIVE
decl_stmt|;
DECL|field|EXTENSION_PANELS
specifier|private
specifier|static
specifier|final
name|String
name|EXTENSION_PANELS
init|=
literal|"extension-panels"
decl_stmt|;
DECL|field|KEY_PANEL
specifier|private
specifier|static
specifier|final
name|String
name|KEY_PANEL
init|=
literal|"panel"
decl_stmt|;
DECL|field|EXCLUSIVE_PERMISSIONS_SPLIT_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|EXCLUSIVE_PERMISSIONS_SPLIT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[, \t]{1,}"
argument_list|)
decl_stmt|;
DECL|field|projectName
specifier|private
name|Project
operator|.
name|NameKey
name|projectName
decl_stmt|;
DECL|field|project
specifier|private
name|Project
name|project
decl_stmt|;
DECL|field|accountsSection
specifier|private
name|AccountsSection
name|accountsSection
decl_stmt|;
DECL|field|groupList
specifier|private
name|GroupList
name|groupList
decl_stmt|;
DECL|field|accessSections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AccessSection
argument_list|>
name|accessSections
decl_stmt|;
DECL|field|branchOrderSection
specifier|private
name|BranchOrderSection
name|branchOrderSection
decl_stmt|;
DECL|field|contributorAgreements
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ContributorAgreement
argument_list|>
name|contributorAgreements
decl_stmt|;
DECL|field|notifySections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NotifyConfig
argument_list|>
name|notifySections
decl_stmt|;
DECL|field|labelSections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|labelSections
decl_stmt|;
DECL|field|mimeTypes
specifier|private
name|ConfiguredMimeTypes
name|mimeTypes
decl_stmt|;
DECL|field|subscribeSections
specifier|private
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|SubscribeSection
argument_list|>
name|subscribeSections
decl_stmt|;
DECL|field|commentLinkSections
specifier|private
name|List
argument_list|<
name|CommentLinkInfoImpl
argument_list|>
name|commentLinkSections
decl_stmt|;
DECL|field|validationErrors
specifier|private
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validationErrors
decl_stmt|;
DECL|field|rulesId
specifier|private
name|ObjectId
name|rulesId
decl_stmt|;
DECL|field|maxObjectSizeLimit
specifier|private
name|long
name|maxObjectSizeLimit
decl_stmt|;
DECL|field|pluginConfigs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|pluginConfigs
decl_stmt|;
DECL|field|checkReceivedObjects
specifier|private
name|boolean
name|checkReceivedObjects
decl_stmt|;
DECL|field|sectionsWithUnknownPermissions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|sectionsWithUnknownPermissions
decl_stmt|;
DECL|field|hasLegacyPermissions
specifier|private
name|boolean
name|hasLegacyPermissions
decl_stmt|;
DECL|field|extensionPanelSections
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|extensionPanelSections
decl_stmt|;
DECL|field|groupsByName
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|groupsByName
decl_stmt|;
DECL|method|read (MetaDataUpdate update)
specifier|public
specifier|static
name|ProjectConfig
name|read
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfig
name|r
init|=
operator|new
name|ProjectConfig
argument_list|(
name|update
operator|.
name|getProjectName
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|load
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|read (MetaDataUpdate update, ObjectId id)
specifier|public
specifier|static
name|ProjectConfig
name|read
parameter_list|(
name|MetaDataUpdate
name|update
parameter_list|,
name|ObjectId
name|id
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|ProjectConfig
name|r
init|=
operator|new
name|ProjectConfig
argument_list|(
name|update
operator|.
name|getProjectName
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|load
argument_list|(
name|update
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|buildCommentLink (Config cfg, String name, boolean allowRaw)
specifier|public
specifier|static
name|CommentLinkInfoImpl
name|buildCommentLink
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|allowRaw
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
name|match
init|=
name|cfg
operator|.
name|getString
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_MATCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
comment|// Unfortunately this validation isn't entirely complete. Clients
comment|// can have exceptions trying to evaluate the pattern if they don't
comment|// support a token used, even if the server does support the token.
comment|//
comment|// At the minimum, we can trap problems related to unmatched groups.
name|Pattern
operator|.
name|compile
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
name|String
name|link
init|=
name|cfg
operator|.
name|getString
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_LINK
argument_list|)
decl_stmt|;
name|String
name|html
init|=
name|cfg
operator|.
name|getString
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_HTML
argument_list|)
decl_stmt|;
name|boolean
name|hasHtml
init|=
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|html
argument_list|)
decl_stmt|;
name|String
name|rawEnabled
init|=
name|cfg
operator|.
name|getString
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_ENABLED
argument_list|)
decl_stmt|;
name|Boolean
name|enabled
decl_stmt|;
if|if
condition|(
name|rawEnabled
operator|!=
literal|null
condition|)
block|{
name|enabled
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enabled
operator|=
literal|null
expr_stmt|;
block|}
name|checkArgument
argument_list|(
name|allowRaw
operator|||
operator|!
name|hasHtml
argument_list|,
literal|"Raw html replacement not allowed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|match
argument_list|)
operator|&&
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|link
argument_list|)
operator|&&
operator|!
name|hasHtml
operator|&&
name|enabled
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
return|return
operator|new
name|CommentLinkInfoImpl
operator|.
name|Enabled
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|new
name|CommentLinkInfoImpl
operator|.
name|Disabled
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|new
name|CommentLinkInfoImpl
argument_list|(
name|name
argument_list|,
name|match
argument_list|,
name|link
argument_list|,
name|html
argument_list|,
name|enabled
argument_list|)
return|;
block|}
DECL|method|addCommentLinkSection (CommentLinkInfoImpl commentLink)
specifier|public
name|void
name|addCommentLinkSection
parameter_list|(
name|CommentLinkInfoImpl
name|commentLink
parameter_list|)
block|{
name|commentLinkSections
operator|.
name|add
argument_list|(
name|commentLink
argument_list|)
expr_stmt|;
block|}
DECL|method|ProjectConfig (Project.NameKey projectName)
specifier|public
name|ProjectConfig
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
block|{
name|this
operator|.
name|projectName
operator|=
name|projectName
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|Project
operator|.
name|NameKey
name|getName
parameter_list|()
block|{
return|return
name|projectName
return|;
block|}
DECL|method|getProject ()
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|getAccountsSection ()
specifier|public
name|AccountsSection
name|getAccountsSection
parameter_list|()
block|{
return|return
name|accountsSection
return|;
block|}
DECL|method|getExtensionPanelSections ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getExtensionPanelSections
parameter_list|()
block|{
return|return
name|extensionPanelSections
return|;
block|}
DECL|method|getAccessSection (String name)
specifier|public
name|AccessSection
name|getAccessSection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getAccessSection
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getAccessSection (String name, boolean create)
specifier|public
name|AccessSection
name|getAccessSection
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|AccessSection
name|as
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|as
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|as
operator|=
operator|new
name|AccessSection
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|accessSections
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|as
argument_list|)
expr_stmt|;
block|}
return|return
name|as
return|;
block|}
DECL|method|getAccessSections ()
specifier|public
name|Collection
argument_list|<
name|AccessSection
argument_list|>
name|getAccessSections
parameter_list|()
block|{
return|return
name|sort
argument_list|(
name|accessSections
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBranchOrderSection ()
specifier|public
name|BranchOrderSection
name|getBranchOrderSection
parameter_list|()
block|{
return|return
name|branchOrderSection
return|;
block|}
DECL|method|getSubscribeSections ()
specifier|public
name|Map
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|SubscribeSection
argument_list|>
name|getSubscribeSections
parameter_list|()
block|{
return|return
name|subscribeSections
return|;
block|}
DECL|method|getSubscribeSections (Branch.NameKey branch)
specifier|public
name|Collection
argument_list|<
name|SubscribeSection
argument_list|>
name|getSubscribeSections
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|Collection
argument_list|<
name|SubscribeSection
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubscribeSection
name|s
range|:
name|subscribeSections
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|appliesTo
argument_list|(
name|branch
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|addSubscribeSection (SubscribeSection s)
specifier|public
name|void
name|addSubscribeSection
parameter_list|(
name|SubscribeSection
name|s
parameter_list|)
block|{
name|subscribeSections
operator|.
name|put
argument_list|(
name|s
operator|.
name|getProject
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|remove (AccessSection section)
specifier|public
name|void
name|remove
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|section
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionsWithUnknownPermissions
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|AccessSection
name|a
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|a
operator|.
name|setPermissions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Permission
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessSections
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|remove (AccessSection section, Permission permission)
specifier|public
name|void
name|remove
parameter_list|(
name|AccessSection
name|section
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|AccessSection
name|a
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|remove
argument_list|(
name|permission
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getPermissions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|remove (AccessSection section, Permission permission, PermissionRule rule)
specifier|public
name|void
name|remove
parameter_list|(
name|AccessSection
name|section
parameter_list|,
name|Permission
name|permission
parameter_list|,
name|PermissionRule
name|rule
parameter_list|)
block|{
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|(
name|section
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|section
operator|!=
literal|null
operator|&&
name|permission
operator|!=
literal|null
condition|)
block|{
name|AccessSection
name|a
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Permission
name|p
init|=
name|a
operator|.
name|getPermission
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|p
operator|.
name|remove
argument_list|(
name|rule
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getRules
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|a
operator|.
name|remove
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getPermissions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|replace (AccessSection section)
specifier|public
name|void
name|replace
parameter_list|(
name|AccessSection
name|section
parameter_list|)
block|{
for|for
control|(
name|Permission
name|permission
range|:
name|section
operator|.
name|getPermissions
argument_list|()
control|)
block|{
for|for
control|(
name|PermissionRule
name|rule
range|:
name|permission
operator|.
name|getRules
argument_list|()
control|)
block|{
name|rule
operator|.
name|setGroup
argument_list|(
name|resolve
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|accessSections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
DECL|method|getContributorAgreement (String name)
specifier|public
name|ContributorAgreement
name|getContributorAgreement
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getContributorAgreement
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getContributorAgreement (String name, boolean create)
specifier|public
name|ContributorAgreement
name|getContributorAgreement
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|ContributorAgreement
name|ca
init|=
name|contributorAgreements
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|ca
operator|=
operator|new
name|ContributorAgreement
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|contributorAgreements
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ca
argument_list|)
expr_stmt|;
block|}
return|return
name|ca
return|;
block|}
DECL|method|getContributorAgreements ()
specifier|public
name|Collection
argument_list|<
name|ContributorAgreement
argument_list|>
name|getContributorAgreements
parameter_list|()
block|{
return|return
name|sort
argument_list|(
name|contributorAgreements
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|remove (ContributorAgreement section)
specifier|public
name|void
name|remove
parameter_list|(
name|ContributorAgreement
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|accessSections
operator|.
name|remove
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replace (ContributorAgreement section)
specifier|public
name|void
name|replace
parameter_list|(
name|ContributorAgreement
name|section
parameter_list|)
block|{
name|section
operator|.
name|setAutoVerify
argument_list|(
name|resolve
argument_list|(
name|section
operator|.
name|getAutoVerify
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|section
operator|.
name|getAccepted
argument_list|()
control|)
block|{
name|rule
operator|.
name|setGroup
argument_list|(
name|resolve
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|contributorAgreements
operator|.
name|put
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyConfigs ()
specifier|public
name|Collection
argument_list|<
name|NotifyConfig
argument_list|>
name|getNotifyConfigs
parameter_list|()
block|{
return|return
name|notifySections
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|putNotifyConfig (String name, NotifyConfig nc)
specifier|public
name|void
name|putNotifyConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|NotifyConfig
name|nc
parameter_list|)
block|{
name|notifySections
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|nc
argument_list|)
expr_stmt|;
block|}
DECL|method|getLabelSections ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|getLabelSections
parameter_list|()
block|{
return|return
name|labelSections
return|;
block|}
DECL|method|getCommentLinkSections ()
specifier|public
name|Collection
argument_list|<
name|CommentLinkInfoImpl
argument_list|>
name|getCommentLinkSections
parameter_list|()
block|{
return|return
name|commentLinkSections
return|;
block|}
DECL|method|getMimeTypes ()
specifier|public
name|ConfiguredMimeTypes
name|getMimeTypes
parameter_list|()
block|{
return|return
name|mimeTypes
return|;
block|}
DECL|method|resolve (AccountGroup group)
specifier|public
name|GroupReference
name|resolve
parameter_list|(
name|AccountGroup
name|group
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|GroupReference
operator|.
name|forGroup
argument_list|(
name|group
argument_list|)
argument_list|)
return|;
block|}
DECL|method|resolve (GroupReference group)
specifier|public
name|GroupReference
name|resolve
parameter_list|(
name|GroupReference
name|group
parameter_list|)
block|{
name|GroupReference
name|groupRef
init|=
name|groupList
operator|.
name|resolve
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupRef
operator|!=
literal|null
operator|&&
name|groupRef
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|groupsByName
operator|.
name|containsKey
argument_list|(
name|groupRef
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|groupsByName
operator|.
name|put
argument_list|(
name|groupRef
operator|.
name|getName
argument_list|()
argument_list|,
name|groupRef
argument_list|)
expr_stmt|;
block|}
return|return
name|groupRef
return|;
block|}
comment|/** @return the group reference, if the group is used by at least one rule. */
DECL|method|getGroup (AccountGroup.UUID uuid)
specifier|public
name|GroupReference
name|getGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|groupList
operator|.
name|byUUID
argument_list|(
name|uuid
argument_list|)
return|;
block|}
comment|/**    * @return the group reference corresponding to the specified group name if the group is used by    *     at least one rule or plugin value.    */
DECL|method|getGroup (String groupName)
specifier|public
name|GroupReference
name|getGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
return|return
name|groupsByName
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
return|;
block|}
comment|/** @return set of all groups used by this configuration. */
DECL|method|getAllGroupUUIDs ()
specifier|public
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|getAllGroupUUIDs
parameter_list|()
block|{
return|return
name|groupList
operator|.
name|uuids
argument_list|()
return|;
block|}
comment|/**    * @return the project's rules.pl ObjectId, if present in the branch. Null if it doesn't exist.    */
DECL|method|getRulesId ()
specifier|public
name|ObjectId
name|getRulesId
parameter_list|()
block|{
return|return
name|rulesId
return|;
block|}
comment|/**    * @return the maxObjectSizeLimit for this project, if set. Zero if this project doesn't define    *     own maxObjectSizeLimit.    */
DECL|method|getMaxObjectSizeLimit ()
specifier|public
name|long
name|getMaxObjectSizeLimit
parameter_list|()
block|{
return|return
name|maxObjectSizeLimit
return|;
block|}
comment|/** @return the checkReceivedObjects for this project, default is true. */
DECL|method|getCheckReceivedObjects ()
specifier|public
name|boolean
name|getCheckReceivedObjects
parameter_list|()
block|{
return|return
name|checkReceivedObjects
return|;
block|}
comment|/**    * Check all GroupReferences use current group name, repairing stale ones.    *    * @param groupBackend cache to use when looking up group information by UUID.    * @return true if one or more group names was stale.    */
DECL|method|updateGroupNames (GroupBackend groupBackend)
specifier|public
name|boolean
name|updateGroupNames
parameter_list|(
name|GroupBackend
name|groupBackend
parameter_list|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|GroupReference
name|ref
range|:
name|groupList
operator|.
name|references
argument_list|()
control|)
block|{
name|GroupDescription
operator|.
name|Basic
name|g
init|=
name|groupBackend
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|ref
operator|.
name|setName
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirty
return|;
block|}
comment|/**    * Get the validation errors, if any were discovered during load.    *    * @return list of errors; empty list if there are no errors.    */
DECL|method|getValidationErrors ()
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getValidationErrors
parameter_list|()
block|{
if|if
condition|(
name|validationErrors
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|validationErrors
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRefName ()
specifier|protected
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|RefNames
operator|.
name|REFS_CONFIG
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|readGroupList
argument_list|()
expr_stmt|;
name|groupsByName
operator|=
name|mapGroupReferences
argument_list|()
expr_stmt|;
name|rulesId
operator|=
name|getObjectId
argument_list|(
literal|"rules.pl"
argument_list|)
expr_stmt|;
name|Config
name|rc
init|=
name|readConfig
argument_list|(
name|PROJECT_CONFIG
argument_list|)
decl_stmt|;
name|project
operator|=
operator|new
name|Project
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
name|Project
name|p
init|=
name|project
decl_stmt|;
name|p
operator|.
name|setDescription
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|)
block|{
name|p
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|getStringList
argument_list|(
name|ACCESS
argument_list|,
literal|null
argument_list|,
name|KEY_INHERIT_FROM
argument_list|)
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// The config must not contain more than one parent to inherit from
comment|// as there is no guarantee which of the parents would be used then.
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"Cannot inherit from multiple projects"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setParentName
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|ACCESS
argument_list|,
literal|null
argument_list|,
name|KEY_INHERIT_FROM
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BooleanProjectConfig
name|config
range|:
name|BooleanProjectConfig
operator|.
name|values
argument_list|()
control|)
block|{
name|p
operator|.
name|setBooleanConfig
argument_list|(
name|config
argument_list|,
name|getEnum
argument_list|(
name|rc
argument_list|,
name|config
operator|.
name|getSection
argument_list|()
argument_list|,
name|config
operator|.
name|getSubSection
argument_list|()
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|InheritableBoolean
operator|.
name|INHERIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setMaxObjectSizeLimit
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|RECEIVE
argument_list|,
literal|null
argument_list|,
name|KEY_MAX_OBJECT_SIZE_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSubmitType
argument_list|(
name|getEnum
argument_list|(
name|rc
argument_list|,
name|SUBMIT
argument_list|,
literal|null
argument_list|,
name|KEY_ACTION
argument_list|,
name|DEFAULT_SUBMIT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setState
argument_list|(
name|getEnum
argument_list|(
name|rc
argument_list|,
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_STATE
argument_list|,
name|DEFAULT_STATE_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDefaultDashboard
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|DASHBOARD
argument_list|,
literal|null
argument_list|,
name|KEY_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setLocalDefaultDashboard
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|DASHBOARD
argument_list|,
literal|null
argument_list|,
name|KEY_LOCAL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|loadAccountsSection
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadContributorAgreements
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadAccessSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadBranchOrderSection
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadNotifySections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadLabelSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadCommentLinkSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadSubscribeSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|mimeTypes
operator|=
operator|new
name|ConfiguredMimeTypes
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|loadPluginSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadReceiveSection
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|loadExtensionPanelSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
DECL|method|loadAccountsSection (Config rc)
specifier|private
name|void
name|loadAccountsSection
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|accountsSection
operator|=
operator|new
name|AccountsSection
argument_list|()
expr_stmt|;
name|accountsSection
operator|.
name|setSameGroupVisibility
argument_list|(
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|ACCOUNTS
argument_list|,
literal|null
argument_list|,
name|KEY_SAME_GROUP_VISIBILITY
argument_list|,
name|groupsByName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadExtensionPanelSections (Config rc)
specifier|private
name|void
name|loadExtensionPanelSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lowerNames
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|extensionPanelSections
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|EXTENSION_PANELS
argument_list|)
control|)
block|{
name|String
name|lower
init|=
name|name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerNames
operator|.
name|containsKey
argument_list|(
name|lower
argument_list|)
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Extension Panels \"%s\" conflicts with \"%s\""
argument_list|,
name|name
argument_list|,
name|lowerNames
operator|.
name|get
argument_list|(
name|lower
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lowerNames
operator|.
name|put
argument_list|(
name|lower
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|extensionPanelSections
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rc
operator|.
name|getStringList
argument_list|(
name|EXTENSION_PANELS
argument_list|,
name|name
argument_list|,
name|KEY_PANEL
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadContributorAgreements (Config rc)
specifier|private
name|void
name|loadContributorAgreements
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|contributorAgreements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|CONTRIBUTOR_AGREEMENT
argument_list|)
control|)
block|{
name|ContributorAgreement
name|ca
init|=
name|getContributorAgreement
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setDescription
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|name
argument_list|,
name|KEY_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAgreementUrl
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|name
argument_list|,
name|KEY_AGREEMENT_URL
argument_list|)
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAccepted
argument_list|(
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|name
argument_list|,
name|KEY_ACCEPTED
argument_list|,
name|groupsByName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|rules
init|=
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|name
argument_list|,
name|KEY_AUTO_VERIFY
argument_list|,
name|groupsByName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ca
operator|.
name|setAutoVerify
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rules
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"Invalid rule in "
operator|+
name|CONTRIBUTOR_AGREEMENT
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"."
operator|+
name|KEY_AUTO_VERIFY
operator|+
literal|": at most one group may be set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAction
argument_list|()
operator|!=
name|Action
operator|.
name|ALLOW
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"Invalid rule in "
operator|+
name|CONTRIBUTOR_AGREEMENT
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"."
operator|+
name|KEY_AUTO_VERIFY
operator|+
literal|": the group must be allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ca
operator|.
name|setAutoVerify
argument_list|(
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Parses the [notify] sections out of the configuration file.    *    *<pre>    *   [notify "reviewers"]    *     email = group Reviewers    *     type = new_changes    *    *   [notify "dev-team"]    *     email = dev-team@example.com    *     filter = branch:master    *    *   [notify "qa"]    *     email = qa@example.com    *     filter = branch:\"^(maint|stable)-.*\"    *     type = submitted_changes    *</pre>    */
DECL|method|loadNotifySections (Config rc)
specifier|private
name|void
name|loadNotifySections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|notifySections
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|sectionName
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|NOTIFY
argument_list|)
control|)
block|{
name|NotifyConfig
name|n
init|=
operator|new
name|NotifyConfig
argument_list|()
decl_stmt|;
name|n
operator|.
name|setName
argument_list|(
name|sectionName
argument_list|)
expr_stmt|;
name|n
operator|.
name|setFilter
argument_list|(
name|rc
operator|.
name|getString
argument_list|(
name|NOTIFY
argument_list|,
name|sectionName
argument_list|,
name|KEY_FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|NotifyType
argument_list|>
name|types
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|NotifyType
operator|.
name|class
argument_list|)
decl_stmt|;
name|types
operator|.
name|addAll
argument_list|(
name|ConfigUtil
operator|.
name|getEnumList
argument_list|(
name|rc
argument_list|,
name|NOTIFY
argument_list|,
name|sectionName
argument_list|,
name|KEY_TYPE
argument_list|,
name|NotifyType
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|.
name|setTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|n
operator|.
name|setHeader
argument_list|(
name|rc
operator|.
name|getEnum
argument_list|(
name|NOTIFY
argument_list|,
name|sectionName
argument_list|,
name|KEY_HEADER
argument_list|,
name|NotifyConfig
operator|.
name|Header
operator|.
name|BCC
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dst
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|NOTIFY
argument_list|,
name|sectionName
argument_list|,
name|KEY_EMAIL
argument_list|)
control|)
block|{
name|String
name|groupName
init|=
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|GroupReference
name|ref
init|=
name|groupsByName
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
operator|new
name|GroupReference
argument_list|(
literal|null
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|groupsByName
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|n
operator|.
name|addEmail
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"group \""
operator|+
name|ref
operator|.
name|getName
argument_list|()
operator|+
literal|"\" not in "
operator|+
name|GroupList
operator|.
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dst
operator|.
name|startsWith
argument_list|(
literal|"user "
argument_list|)
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|dst
operator|+
literal|" not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|n
operator|.
name|addEmail
argument_list|(
name|Address
operator|.
name|parse
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"notify section \""
operator|+
name|sectionName
operator|+
literal|"\" has invalid email \""
operator|+
name|dst
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|notifySections
operator|.
name|put
argument_list|(
name|sectionName
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadAccessSections (Config rc)
specifier|private
name|void
name|loadAccessSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|accessSections
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|sectionsWithUnknownPermissions
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|refName
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|ACCESS
argument_list|)
control|)
block|{
if|if
condition|(
name|RefConfigSection
operator|.
name|isValid
argument_list|(
name|refName
argument_list|)
operator|&&
name|isValidRegex
argument_list|(
name|refName
argument_list|)
condition|)
block|{
name|AccessSection
name|as
init|=
name|getAccessSection
argument_list|(
name|refName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|KEY_GROUP_PERMISSIONS
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|n
range|:
name|Splitter
operator|.
name|on
argument_list|(
name|EXCLUSIVE_PERMISSIONS_SPLIT_PATTERN
argument_list|)
operator|.
name|split
argument_list|(
name|varName
argument_list|)
control|)
block|{
name|n
operator|=
name|convertLegacyPermission
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPermission
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|as
operator|.
name|getPermission
argument_list|(
name|n
argument_list|,
literal|true
argument_list|)
operator|.
name|setExclusiveGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|)
control|)
block|{
name|String
name|convertedName
init|=
name|convertLegacyPermission
argument_list|(
name|varName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPermission
argument_list|(
name|convertedName
argument_list|)
condition|)
block|{
name|Permission
name|perm
init|=
name|as
operator|.
name|getPermission
argument_list|(
name|convertedName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|varName
argument_list|,
name|groupsByName
argument_list|,
name|perm
argument_list|,
name|Permission
operator|.
name|hasRange
argument_list|(
name|convertedName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|migrateRefsFor
argument_list|(
name|as
argument_list|,
name|perm
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRefsForExclusively
argument_list|(
name|refName
argument_list|)
condition|)
block|{
comment|// Since the ref only applies on refs/for/* and no other
comment|// namespaces, we can remove the old permission.
name|remove
argument_list|(
name|as
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|sectionsWithUnknownPermissions
operator|.
name|add
argument_list|(
name|as
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|AccessSection
name|capability
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|CAPABILITY
argument_list|)
control|)
block|{
if|if
condition|(
name|capability
operator|==
literal|null
condition|)
block|{
name|capability
operator|=
operator|new
name|AccessSection
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
expr_stmt|;
name|accessSections
operator|.
name|put
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|,
name|capability
argument_list|)
expr_stmt|;
block|}
name|Permission
name|perm
init|=
name|capability
operator|.
name|getPermission
argument_list|(
name|varName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|CAPABILITY
argument_list|,
literal|null
argument_list|,
name|varName
argument_list|,
name|groupsByName
argument_list|,
name|perm
argument_list|,
name|GlobalCapability
operator|.
name|hasRange
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isRefsForExclusively (String refName)
specifier|private
name|boolean
name|isRefsForExclusively
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
return|return
name|refName
operator|.
name|startsWith
argument_list|(
literal|"refs/for/"
argument_list|)
return|;
block|}
DECL|method|isRefsFor (String refName)
specifier|private
name|boolean
name|isRefsFor
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
return|return
name|refName
operator|.
name|startsWith
argument_list|(
literal|"refs/for/"
argument_list|)
operator|||
name|refName
operator|.
name|equals
argument_list|(
literal|"refs/*"
argument_list|)
return|;
block|}
DECL|method|unRefsFor (String refName)
specifier|private
name|String
name|unRefsFor
parameter_list|(
name|String
name|refName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRefsFor
argument_list|(
name|refName
argument_list|)
condition|)
block|{
return|return
name|refName
return|;
block|}
if|if
condition|(
name|refName
operator|.
name|equals
argument_list|(
literal|"refs/*"
argument_list|)
operator|||
name|refName
operator|.
name|equals
argument_list|(
literal|"refs/for/*"
argument_list|)
condition|)
block|{
return|return
literal|"refs/*"
return|;
block|}
return|return
name|refName
operator|.
name|substring
argument_list|(
literal|"refs/for/"
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|migrateRefsFor (AccessSection as, Permission perm)
specifier|private
name|boolean
name|migrateRefsFor
parameter_list|(
name|AccessSection
name|as
parameter_list|,
name|Permission
name|perm
parameter_list|)
block|{
name|String
name|refName
init|=
name|as
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRefsFor
argument_list|(
name|refName
argument_list|)
operator|&&
name|perm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Permission
operator|.
name|PUSH
argument_list|)
condition|)
block|{
name|AccessSection
name|migratedAs
init|=
name|getAccessSection
argument_list|(
name|unRefsFor
argument_list|(
name|refName
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Permission
name|convertedPerm
init|=
name|migratedAs
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|CREATE_REVIEW
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|convertedPerm
operator|.
name|setExclusiveGroup
argument_list|(
name|perm
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
expr_stmt|;
name|convertedPerm
operator|.
name|addAll
argument_list|(
name|perm
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isRefsForExclusively
argument_list|(
name|refName
argument_list|)
operator|&&
name|perm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|)
condition|)
block|{
comment|// We only migrate "Submit" if is exclusively added to refs/for/.
comment|// We do this because when the new "Submit on Push" force
comment|// option is added, it is somewhat likely that people will start specify
comment|// Submit on refs/* (something which previously had to be avoided if the
comment|// user did not want to enable "Submit on push").
comment|// Also, before this change, the documentation mentioned
comment|// explicitly that "refs/for/*" will enable "Submit on push".
name|AccessSection
name|migratedAs
init|=
name|getAccessSection
argument_list|(
name|unRefsFor
argument_list|(
name|refName
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Permission
name|migratedPerm
init|=
name|migratedAs
operator|.
name|getPermission
argument_list|(
name|Permission
operator|.
name|SUBMIT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|migratedPerm
operator|.
name|setExclusiveGroup
argument_list|(
name|perm
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|perm
operator|.
name|getRules
argument_list|()
control|)
block|{
name|PermissionRule
name|migratedRule
init|=
name|migratedPerm
operator|.
name|getRule
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|migratedRule
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isValidRegex (String refPattern)
specifier|private
name|boolean
name|isValidRegex
parameter_list|(
name|String
name|refPattern
parameter_list|)
block|{
try|try
block|{
name|RefPattern
operator|.
name|validateRegExp
argument_list|(
name|refPattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidNameException
name|e
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"Invalid ref name: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|loadBranchOrderSection (Config rc)
specifier|private
name|void
name|loadBranchOrderSection
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|.
name|getSections
argument_list|()
operator|.
name|contains
argument_list|(
name|BRANCH_ORDER
argument_list|)
condition|)
block|{
name|branchOrderSection
operator|=
operator|new
name|BranchOrderSection
argument_list|(
name|rc
operator|.
name|getStringList
argument_list|(
name|BRANCH_ORDER
argument_list|,
literal|null
argument_list|,
name|BRANCH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadPermissionRules ( Config rc, String section, String subsection, String varName, Map<String, GroupReference> groupsByName, boolean useRange)
specifier|private
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|loadPermissionRules
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|varName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|groupsByName
parameter_list|,
name|boolean
name|useRange
parameter_list|)
block|{
name|Permission
name|perm
init|=
operator|new
name|Permission
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|loadPermissionRules
argument_list|(
name|rc
argument_list|,
name|section
argument_list|,
name|subsection
argument_list|,
name|varName
argument_list|,
name|groupsByName
argument_list|,
name|perm
argument_list|,
name|useRange
argument_list|)
expr_stmt|;
return|return
name|perm
operator|.
name|getRules
argument_list|()
return|;
block|}
DECL|method|loadPermissionRules ( Config rc, String section, String subsection, String varName, Map<String, GroupReference> groupsByName, Permission perm, boolean useRange)
specifier|private
name|void
name|loadPermissionRules
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|varName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|groupsByName
parameter_list|,
name|Permission
name|perm
parameter_list|,
name|boolean
name|useRange
parameter_list|)
block|{
for|for
control|(
name|String
name|ruleString
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|varName
argument_list|)
control|)
block|{
name|PermissionRule
name|rule
decl_stmt|;
try|try
block|{
name|rule
operator|=
name|PermissionRule
operator|.
name|fromString
argument_list|(
name|ruleString
argument_list|,
name|useRange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|notRule
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"Invalid rule in "
operator|+
name|section
operator|+
operator|(
name|subsection
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|subsection
else|:
literal|""
operator|)
operator|+
literal|"."
operator|+
name|varName
operator|+
literal|": "
operator|+
name|notRule
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|GroupReference
name|ref
init|=
name|groupsByName
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
comment|// The group wasn't mentioned in the groups table, so there is
comment|// no valid UUID for it. Pool the reference anyway so at least
comment|// all rules in the same file share the same GroupReference.
comment|//
name|ref
operator|=
name|rule
operator|.
name|getGroup
argument_list|()
expr_stmt|;
name|groupsByName
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"group \""
operator|+
name|ref
operator|.
name|getName
argument_list|()
operator|+
literal|"\" not in "
operator|+
name|GroupList
operator|.
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rule
operator|.
name|setGroup
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|perm
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseLabelValue (String src)
specifier|private
specifier|static
name|LabelValue
name|parseLabelValue
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
name|CharMatcher
operator|.
name|whitespace
argument_list|()
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"empty value"
argument_list|)
throw|;
block|}
name|String
name|valueText
init|=
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
else|:
literal|""
decl_stmt|;
return|return
operator|new
name|LabelValue
argument_list|(
name|Shorts
operator|.
name|checkedCast
argument_list|(
name|PermissionRule
operator|.
name|parseInt
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|valueText
argument_list|)
return|;
block|}
DECL|method|loadLabelSections (Config rc)
specifier|private
name|void
name|loadLabelSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lowerNames
init|=
name|Maps
operator|.
name|newHashMapWithExpectedSize
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|labelSections
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|LABEL
argument_list|)
control|)
block|{
name|String
name|lower
init|=
name|name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerNames
operator|.
name|containsKey
argument_list|(
name|lower
argument_list|)
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Label \"%s\" conflicts with \"%s\""
argument_list|,
name|name
argument_list|,
name|lowerNames
operator|.
name|get
argument_list|(
name|lower
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lowerNames
operator|.
name|put
argument_list|(
name|lower
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LabelValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_VALUE
argument_list|)
control|)
block|{
try|try
block|{
name|values
operator|.
name|add
argument_list|(
name|parseLabelValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|notValue
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid %s \"%s\" for label \"%s\": %s"
argument_list|,
name|KEY_VALUE
argument_list|,
name|value
argument_list|,
name|name
argument_list|,
name|notValue
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LabelType
name|label
decl_stmt|;
try|try
block|{
name|label
operator|=
operator|new
name|LabelType
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|badName
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid label \"%s\""
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|functionName
init|=
name|rc
operator|.
name|getString
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_FUNCTION
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|LabelFunction
argument_list|>
name|function
init|=
name|functionName
operator|!=
literal|null
condition|?
name|LabelFunction
operator|.
name|parse
argument_list|(
name|functionName
argument_list|)
else|:
name|Optional
operator|.
name|of
argument_list|(
name|LabelFunction
operator|.
name|MAX_WITH_BLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|function
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid %s for label \"%s\". Valid names are: %s"
argument_list|,
name|KEY_FUNCTION
argument_list|,
name|name
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|LabelFunction
operator|.
name|ALL
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|label
operator|.
name|setFunction
argument_list|(
name|function
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|short
name|dv
init|=
operator|(
name|short
operator|)
name|rc
operator|.
name|getInt
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_DEFAULT_VALUE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInRange
argument_list|(
name|dv
argument_list|,
name|values
argument_list|)
condition|)
block|{
name|label
operator|.
name|setDefaultValue
argument_list|(
name|dv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid %s \"%s\" for label \"%s\""
argument_list|,
name|KEY_DEFAULT_VALUE
argument_list|,
name|dv
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|label
operator|.
name|setAllowPostSubmit
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_ALLOW_POST_SUBMIT
argument_list|,
name|LabelType
operator|.
name|DEF_ALLOW_POST_SUBMIT
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCopyMinScore
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_MIN_SCORE
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_MIN_SCORE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCopyMaxScore
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_MAX_SCORE
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_MAX_SCORE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCopyAllScoresOnMergeFirstParentUpdate
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCopyAllScoresOnTrivialRebase
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCopyAllScoresIfNoCodeChange
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCopyAllScoresIfNoChange
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_IF_NO_CHANGE
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setCanOverride
argument_list|(
name|rc
operator|.
name|getBoolean
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_CAN_OVERRIDE
argument_list|,
name|LabelType
operator|.
name|DEF_CAN_OVERRIDE
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|.
name|setRefPatterns
argument_list|(
name|getStringListOrNull
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_BRANCH
argument_list|)
argument_list|)
expr_stmt|;
name|labelSections
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isInRange (short value, List<LabelValue> labelValues)
specifier|private
name|boolean
name|isInRange
parameter_list|(
name|short
name|value
parameter_list|,
name|List
argument_list|<
name|LabelValue
argument_list|>
name|labelValues
parameter_list|)
block|{
for|for
control|(
name|LabelValue
name|lv
range|:
name|labelValues
control|)
block|{
if|if
condition|(
name|lv
operator|.
name|getValue
argument_list|()
operator|==
name|value
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getStringListOrNull ( Config rc, String section, String subSection, String name)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getStringListOrNull
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subSection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|ac
init|=
name|rc
operator|.
name|getStringList
argument_list|(
name|section
argument_list|,
name|subSection
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|ac
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|ac
argument_list|)
return|;
block|}
DECL|method|loadCommentLinkSections (Config rc)
specifier|private
name|void
name|loadCommentLinkSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|subsections
init|=
name|rc
operator|.
name|getSubsections
argument_list|(
name|COMMENTLINK
argument_list|)
decl_stmt|;
name|commentLinkSections
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subsections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|subsections
control|)
block|{
try|try
block|{
name|commentLinkSections
operator|.
name|add
argument_list|(
name|buildCommentLink
argument_list|(
name|rc
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Invalid pattern \"%s\" in commentlink.%s.match: %s"
argument_list|,
name|rc
operator|.
name|getString
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_MATCH
argument_list|)
argument_list|,
name|name
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Error in pattern \"%s\" in commentlink.%s.match: %s"
argument_list|,
name|rc
operator|.
name|getString
argument_list|(
name|COMMENTLINK
argument_list|,
name|name
argument_list|,
name|KEY_MATCH
argument_list|)
argument_list|,
name|name
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadSubscribeSections (Config rc)
specifier|private
name|void
name|loadSubscribeSections
parameter_list|(
name|Config
name|rc
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|subsections
init|=
name|rc
operator|.
name|getSubsections
argument_list|(
name|SUBSCRIBE_SECTION
argument_list|)
decl_stmt|;
name|subscribeSections
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|projectName
range|:
name|subsections
control|)
block|{
name|Project
operator|.
name|NameKey
name|p
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
name|SubscribeSection
name|ss
init|=
operator|new
name|SubscribeSection
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|SUBSCRIBE_SECTION
argument_list|,
name|projectName
argument_list|,
name|SUBSCRIBE_MULTI_MATCH_REFS
argument_list|)
control|)
block|{
name|ss
operator|.
name|addMultiMatchRefSpec
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|SUBSCRIBE_SECTION
argument_list|,
name|projectName
argument_list|,
name|SUBSCRIBE_MATCH_REFS
argument_list|)
control|)
block|{
name|ss
operator|.
name|addMatchingRefSpec
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|subscribeSections
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|loadReceiveSection (Config rc)
specifier|private
name|void
name|loadReceiveSection
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|checkReceivedObjects
operator|=
name|rc
operator|.
name|getBoolean
argument_list|(
name|RECEIVE
argument_list|,
name|KEY_CHECK_RECEIVED_OBJECTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|maxObjectSizeLimit
operator|=
name|rc
operator|.
name|getLong
argument_list|(
name|RECEIVE
argument_list|,
literal|null
argument_list|,
name|KEY_MAX_OBJECT_SIZE_LIMIT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|loadPluginSections (Config rc)
specifier|private
name|void
name|loadPluginSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|pluginConfigs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|plugin
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|PLUGIN
argument_list|)
control|)
block|{
name|Config
name|pluginConfig
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|pluginConfigs
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|pluginConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|)
control|)
block|{
name|String
name|value
init|=
name|rc
operator|.
name|getString
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|groupName
init|=
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|GroupReference
name|ref
init|=
name|groupsByName
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
literal|"group \""
operator|+
name|groupName
operator|+
literal|"\" not in "
operator|+
name|GroupList
operator|.
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setString
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|pluginConfig
operator|.
name|setStringList
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rc
operator|.
name|getStringList
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPluginConfig (String pluginName)
specifier|public
name|PluginConfig
name|getPluginConfig
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|Config
name|pluginConfig
init|=
name|pluginConfigs
operator|.
name|get
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pluginConfig
operator|==
literal|null
condition|)
block|{
name|pluginConfig
operator|=
operator|new
name|Config
argument_list|()
expr_stmt|;
name|pluginConfigs
operator|.
name|put
argument_list|(
name|pluginName
argument_list|,
name|pluginConfig
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PluginConfig
argument_list|(
name|pluginName
argument_list|,
name|pluginConfig
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|readGroupList ()
specifier|private
name|void
name|readGroupList
parameter_list|()
throws|throws
name|IOException
block|{
name|groupList
operator|=
name|GroupList
operator|.
name|parse
argument_list|(
name|projectName
argument_list|,
name|readUTF8
argument_list|(
name|GroupList
operator|.
name|FILE_NAME
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|mapGroupReferences ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|mapGroupReferences
parameter_list|()
block|{
name|Collection
argument_list|<
name|GroupReference
argument_list|>
name|references
init|=
name|groupList
operator|.
name|references
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupReference
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|references
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|GroupReference
name|ref
range|:
name|references
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|onSave (CommitBuilder commit)
specifier|protected
name|boolean
name|onSave
parameter_list|(
name|CommitBuilder
name|commit
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|commit
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|commit
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|commit
operator|.
name|setMessage
argument_list|(
literal|"Updated project configuration\n"
argument_list|)
expr_stmt|;
block|}
name|Config
name|rc
init|=
name|readConfig
argument_list|(
name|PROJECT_CONFIG
argument_list|)
decl_stmt|;
name|Project
name|p
init|=
name|project
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_DESCRIPTION
argument_list|,
name|p
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_DESCRIPTION
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|rc
argument_list|,
name|ACCESS
argument_list|,
literal|null
argument_list|,
name|KEY_INHERIT_FROM
argument_list|,
name|p
operator|.
name|getParentName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BooleanProjectConfig
name|config
range|:
name|BooleanProjectConfig
operator|.
name|values
argument_list|()
control|)
block|{
name|set
argument_list|(
name|rc
argument_list|,
name|config
operator|.
name|getSection
argument_list|()
argument_list|,
name|config
operator|.
name|getSubSection
argument_list|()
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getBooleanConfig
argument_list|(
name|config
argument_list|)
argument_list|,
name|InheritableBoolean
operator|.
name|INHERIT
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|rc
argument_list|,
name|RECEIVE
argument_list|,
literal|null
argument_list|,
name|KEY_MAX_OBJECT_SIZE_LIMIT
argument_list|,
name|validMaxObjectSizeLimit
argument_list|(
name|p
operator|.
name|getMaxObjectSizeLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|SUBMIT
argument_list|,
literal|null
argument_list|,
name|KEY_ACTION
argument_list|,
name|p
operator|.
name|getConfiguredSubmitType
argument_list|()
argument_list|,
name|DEFAULT_SUBMIT_TYPE
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|PROJECT
argument_list|,
literal|null
argument_list|,
name|KEY_STATE
argument_list|,
name|p
operator|.
name|getState
argument_list|()
argument_list|,
name|DEFAULT_STATE_VALUE
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|DASHBOARD
argument_list|,
literal|null
argument_list|,
name|KEY_DEFAULT
argument_list|,
name|p
operator|.
name|getDefaultDashboard
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|DASHBOARD
argument_list|,
literal|null
argument_list|,
name|KEY_LOCAL_DEFAULT
argument_list|,
name|p
operator|.
name|getLocalDefaultDashboard
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|saveAccountsSection
argument_list|(
name|rc
argument_list|,
name|keepGroups
argument_list|)
expr_stmt|;
name|saveContributorAgreements
argument_list|(
name|rc
argument_list|,
name|keepGroups
argument_list|)
expr_stmt|;
name|saveAccessSections
argument_list|(
name|rc
argument_list|,
name|keepGroups
argument_list|)
expr_stmt|;
name|saveNotifySections
argument_list|(
name|rc
argument_list|,
name|keepGroups
argument_list|)
expr_stmt|;
name|savePluginSections
argument_list|(
name|rc
argument_list|,
name|keepGroups
argument_list|)
expr_stmt|;
name|groupList
operator|.
name|retainUUIDs
argument_list|(
name|keepGroups
argument_list|)
expr_stmt|;
name|saveLabelSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|saveCommentLinkSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|saveSubscribeSections
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|saveConfig
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|saveGroupList
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|validMaxObjectSizeLimit (String value)
specifier|public
specifier|static
name|String
name|validMaxObjectSizeLimit
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|fromText
argument_list|(
literal|"[s]\nn="
operator|+
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|s
init|=
name|cfg
operator|.
name|getLong
argument_list|(
literal|"s"
argument_list|,
literal|"n"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Negative value '%s' not allowed as %s"
argument_list|,
name|value
argument_list|,
name|KEY_MAX_OBJECT_SIZE_LIMIT
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|s
operator|==
literal|0
condition|)
block|{
comment|// return null for the default so that it is not persisted
return|return
literal|null
return|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Value '%s' not parseable as a Long"
argument_list|,
name|value
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|saveAccountsSection (Config rc, Set<AccountGroup.UUID> keepGroups)
specifier|private
name|void
name|saveAccountsSection
parameter_list|(
name|Config
name|rc
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
parameter_list|)
block|{
if|if
condition|(
name|accountsSection
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStringList
argument_list|(
name|ACCOUNTS
argument_list|,
literal|null
argument_list|,
name|KEY_SAME_GROUP_VISIBILITY
argument_list|,
name|ruleToStringList
argument_list|(
name|accountsSection
operator|.
name|getSameGroupVisibility
argument_list|()
argument_list|,
name|keepGroups
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveCommentLinkSections (Config rc)
specifier|private
name|void
name|saveCommentLinkSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
if|if
condition|(
name|commentLinkSections
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CommentLinkInfoImpl
name|cm
range|:
name|commentLinkSections
control|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|COMMENTLINK
argument_list|,
name|cm
operator|.
name|name
argument_list|,
name|KEY_MATCH
argument_list|,
name|cm
operator|.
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|cm
operator|.
name|html
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|COMMENTLINK
argument_list|,
name|cm
operator|.
name|name
argument_list|,
name|KEY_HTML
argument_list|,
name|cm
operator|.
name|html
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|cm
operator|.
name|link
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|COMMENTLINK
argument_list|,
name|cm
operator|.
name|name
argument_list|,
name|KEY_LINK
argument_list|,
name|cm
operator|.
name|link
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cm
operator|.
name|enabled
operator|!=
literal|null
operator|&&
operator|!
name|cm
operator|.
name|enabled
condition|)
block|{
name|rc
operator|.
name|setBoolean
argument_list|(
name|COMMENTLINK
argument_list|,
name|cm
operator|.
name|name
argument_list|,
name|KEY_ENABLED
argument_list|,
name|cm
operator|.
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|saveContributorAgreements (Config rc, Set<AccountGroup.UUID> keepGroups)
specifier|private
name|void
name|saveContributorAgreements
parameter_list|(
name|Config
name|rc
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
parameter_list|)
block|{
for|for
control|(
name|ContributorAgreement
name|ca
range|:
name|sort
argument_list|(
name|contributorAgreements
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|set
argument_list|(
name|rc
argument_list|,
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|ca
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_DESCRIPTION
argument_list|,
name|ca
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|ca
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_AGREEMENT_URL
argument_list|,
name|ca
operator|.
name|getAgreementUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getAutoVerify
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ca
operator|.
name|getAutoVerify
argument_list|()
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|ca
operator|.
name|getAutoVerify
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|autoVerify
init|=
operator|new
name|PermissionRule
argument_list|(
name|ca
operator|.
name|getAutoVerify
argument_list|()
argument_list|)
operator|.
name|asString
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|ca
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_AUTO_VERIFY
argument_list|,
name|autoVerify
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|ca
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_AUTO_VERIFY
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|CONTRIBUTOR_AGREEMENT
argument_list|,
name|ca
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_ACCEPTED
argument_list|,
name|ruleToStringList
argument_list|(
name|ca
operator|.
name|getAccepted
argument_list|()
argument_list|,
name|keepGroups
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveNotifySections (Config rc, Set<AccountGroup.UUID> keepGroups)
specifier|private
name|void
name|saveNotifySections
parameter_list|(
name|Config
name|rc
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
parameter_list|)
block|{
for|for
control|(
name|NotifyConfig
name|nc
range|:
name|sort
argument_list|(
name|notifySections
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|email
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupReference
name|gr
range|:
name|nc
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|gr
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|gr
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|email
operator|.
name|add
argument_list|(
operator|new
name|PermissionRule
argument_list|(
name|gr
argument_list|)
operator|.
name|asString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Address
name|addr
range|:
name|nc
operator|.
name|getAddresses
argument_list|()
control|)
block|{
name|addrs
operator|.
name|add
argument_list|(
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|addrs
argument_list|)
expr_stmt|;
name|email
operator|.
name|addAll
argument_list|(
name|addrs
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|rc
argument_list|,
name|NOTIFY
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_HEADER
argument_list|,
name|nc
operator|.
name|getHeader
argument_list|()
argument_list|,
name|NotifyConfig
operator|.
name|Header
operator|.
name|BCC
argument_list|)
expr_stmt|;
if|if
condition|(
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|NOTIFY
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_EMAIL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|setStringList
argument_list|(
name|NOTIFY
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_EMAIL
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nc
operator|.
name|getNotify
argument_list|()
operator|.
name|equals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NotifyType
operator|.
name|ALL
argument_list|)
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|NOTIFY
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|NotifyType
name|t
range|:
name|NotifyType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nc
operator|.
name|isNotify
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|NOTIFY
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_TYPE
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
name|set
argument_list|(
name|rc
argument_list|,
name|NOTIFY
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|,
name|KEY_FILTER
argument_list|,
name|nc
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ruleToStringList ( List<PermissionRule> list, Set<AccountGroup.UUID> keepGroups)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ruleToStringList
parameter_list|(
name|List
argument_list|<
name|PermissionRule
argument_list|>
name|list
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|sort
argument_list|(
name|list
argument_list|)
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|asString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rules
return|;
block|}
DECL|method|saveAccessSections (Config rc, Set<AccountGroup.UUID> keepGroups)
specifier|private
name|void
name|saveAccessSections
parameter_list|(
name|Config
name|rc
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
parameter_list|)
block|{
name|AccessSection
name|capability
init|=
name|accessSections
operator|.
name|get
argument_list|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|capability
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|have
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|sort
argument_list|(
name|capability
operator|.
name|getPermissions
argument_list|()
argument_list|)
control|)
block|{
name|have
operator|.
name|add
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|needRange
init|=
name|GlobalCapability
operator|.
name|hasRange
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|sort
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
control|)
block|{
name|GroupReference
name|group
init|=
name|resolve
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|asString
argument_list|(
name|needRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|CAPABILITY
argument_list|,
literal|null
argument_list|,
name|permission
operator|.
name|getName
argument_list|()
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|CAPABILITY
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|have
operator|.
name|contains
argument_list|(
name|varName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|CAPABILITY
argument_list|,
literal|null
argument_list|,
name|varName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|CAPABILITY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AccessSection
name|as
range|:
name|sort
argument_list|(
name|accessSections
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|String
name|refName
init|=
name|as
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|AccessSection
operator|.
name|GLOBAL_CAPABILITIES
operator|.
name|equals
argument_list|(
name|refName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|doNotInherit
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|perm
range|:
name|sort
argument_list|(
name|as
operator|.
name|getPermissions
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|perm
operator|.
name|getExclusiveGroup
argument_list|()
condition|)
block|{
if|if
condition|(
literal|0
operator|<
name|doNotInherit
operator|.
name|length
argument_list|()
condition|)
block|{
name|doNotInherit
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|doNotInherit
operator|.
name|append
argument_list|(
name|perm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|0
operator|<
name|doNotInherit
operator|.
name|length
argument_list|()
condition|)
block|{
name|rc
operator|.
name|setString
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|KEY_GROUP_PERMISSIONS
argument_list|,
name|doNotInherit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|unset
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|KEY_GROUP_PERMISSIONS
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|have
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|permission
range|:
name|sort
argument_list|(
name|as
operator|.
name|getPermissions
argument_list|()
argument_list|)
control|)
block|{
name|have
operator|.
name|add
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|needRange
init|=
name|Permission
operator|.
name|hasRange
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PermissionRule
name|rule
range|:
name|sort
argument_list|(
name|permission
operator|.
name|getRules
argument_list|()
argument_list|)
control|)
block|{
name|GroupReference
name|group
init|=
name|resolve
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|rule
operator|.
name|asString
argument_list|(
name|needRange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|permission
operator|.
name|getName
argument_list|()
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|varName
range|:
name|rc
operator|.
name|getNames
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|)
control|)
block|{
if|if
condition|(
name|isPermission
argument_list|(
name|convertLegacyPermission
argument_list|(
name|varName
argument_list|)
argument_list|)
operator|&&
operator|!
name|have
operator|.
name|contains
argument_list|(
name|varName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|ACCESS
argument_list|,
name|refName
argument_list|,
name|varName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|rc
operator|.
name|getSubsections
argument_list|(
name|ACCESS
argument_list|)
control|)
block|{
if|if
condition|(
name|RefConfigSection
operator|.
name|isValid
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|accessSections
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|ACCESS
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|saveLabelSections (Config rc)
specifier|private
name|void
name|saveLabelSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|existing
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rc
operator|.
name|getSubsections
argument_list|(
name|LABEL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|labelSections
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|existing
argument_list|)
condition|)
block|{
comment|// Order of sections changed, remove and rewrite them all.
for|for
control|(
name|String
name|name
range|:
name|existing
control|)
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|toUnset
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|existing
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LabelType
argument_list|>
name|e
range|:
name|labelSections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LabelType
name|label
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|toUnset
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setString
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_FUNCTION
argument_list|,
name|label
operator|.
name|getFunction
argument_list|()
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setInt
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_DEFAULT_VALUE
argument_list|,
name|label
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_ALLOW_POST_SUBMIT
argument_list|,
name|label
operator|.
name|allowPostSubmit
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_ALLOW_POST_SUBMIT
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_MIN_SCORE
argument_list|,
name|label
operator|.
name|isCopyMinScore
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_MIN_SCORE
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_MAX_SCORE
argument_list|,
name|label
operator|.
name|isCopyMaxScore
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_MAX_SCORE
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
argument_list|,
name|label
operator|.
name|isCopyAllScoresOnTrivialRebase
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_TRIVIAL_REBASE
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
argument_list|,
name|label
operator|.
name|isCopyAllScoresIfNoCodeChange
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CODE_CHANGE
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_IF_NO_CHANGE
argument_list|,
name|label
operator|.
name|isCopyAllScoresIfNoChange
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_IF_NO_CHANGE
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
argument_list|,
name|label
operator|.
name|isCopyAllScoresOnMergeFirstParentUpdate
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_COPY_ALL_SCORES_ON_MERGE_FIRST_PARENT_UPDATE
argument_list|)
expr_stmt|;
name|setBooleanConfigKey
argument_list|(
name|rc
argument_list|,
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_CAN_OVERRIDE
argument_list|,
name|label
operator|.
name|canOverride
argument_list|()
argument_list|,
name|LabelType
operator|.
name|DEF_CAN_OVERRIDE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|label
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LabelValue
name|value
range|:
name|label
operator|.
name|getValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
operator|.
name|format
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|,
name|KEY_VALUE
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|toUnset
control|)
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|LABEL
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setBooleanConfigKey ( Config rc, String section, String name, String key, boolean value, boolean defaultValue)
specifier|private
specifier|static
name|void
name|setBooleanConfigKey
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
name|defaultValue
condition|)
block|{
name|rc
operator|.
name|unset
argument_list|(
name|section
argument_list|,
name|name
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|setBoolean
argument_list|(
name|section
argument_list|,
name|name
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|savePluginSections (Config rc, Set<AccountGroup.UUID> keepGroups)
specifier|private
name|void
name|savePluginSections
parameter_list|(
name|Config
name|rc
parameter_list|,
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|keepGroups
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|existing
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rc
operator|.
name|getSubsections
argument_list|(
name|PLUGIN
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|existing
control|)
block|{
name|rc
operator|.
name|unsetSection
argument_list|(
name|PLUGIN
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|e
range|:
name|pluginConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|plugin
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Config
name|pluginConfig
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|pluginConfig
operator|.
name|getNames
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|)
control|)
block|{
name|String
name|value
init|=
name|pluginConfig
operator|.
name|getString
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|groupName
init|=
name|GroupReference
operator|.
name|extractGroupName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|GroupReference
name|ref
init|=
name|groupsByName
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|ref
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keepGroups
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|pluginConfig
operator|.
name|setString
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|,
literal|"group "
operator|+
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|pluginConfig
operator|.
name|getStringList
argument_list|(
name|PLUGIN
argument_list|,
name|plugin
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|saveGroupList ()
specifier|private
name|void
name|saveGroupList
parameter_list|()
throws|throws
name|IOException
block|{
name|saveUTF8
argument_list|(
name|GroupList
operator|.
name|FILE_NAME
argument_list|,
name|groupList
operator|.
name|asText
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|saveSubscribeSections (Config rc)
specifier|private
name|void
name|saveSubscribeSections
parameter_list|(
name|Config
name|rc
parameter_list|)
block|{
for|for
control|(
name|Project
operator|.
name|NameKey
name|p
range|:
name|subscribeSections
operator|.
name|keySet
argument_list|()
control|)
block|{
name|SubscribeSection
name|s
init|=
name|subscribeSections
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matchings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RefSpec
name|r
range|:
name|s
operator|.
name|getMatchingRefSpecs
argument_list|()
control|)
block|{
name|matchings
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|SUBSCRIBE_SECTION
argument_list|,
name|p
operator|.
name|get
argument_list|()
argument_list|,
name|SUBSCRIBE_MATCH_REFS
argument_list|,
name|matchings
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|multimatchs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RefSpec
name|r
range|:
name|s
operator|.
name|getMultiMatchRefSpecs
argument_list|()
control|)
block|{
name|multimatchs
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|setStringList
argument_list|(
name|SUBSCRIBE_SECTION
argument_list|,
name|p
operator|.
name|get
argument_list|()
argument_list|,
name|SUBSCRIBE_MULTI_MATCH_REFS
argument_list|,
name|multimatchs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEnum ( Config rc, String section, String subsection, String name, E defaultValue)
specifier|private
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|?
argument_list|>
parameter_list|>
name|E
name|getEnum
parameter_list|(
name|Config
name|rc
parameter_list|,
name|String
name|section
parameter_list|,
name|String
name|subsection
parameter_list|,
name|String
name|name
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
try|try
block|{
return|return
name|rc
operator|.
name|getEnum
argument_list|(
name|section
argument_list|,
name|subsection
argument_list|,
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
name|error
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PROJECT_CONFIG
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|error (ValidationError error)
specifier|public
name|void
name|error
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
name|validationErrors
operator|==
literal|null
condition|)
block|{
name|validationErrors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|validationErrors
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
DECL|method|sort (Collection<T> m)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|sort
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|m
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|T
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|hasLegacyPermissions ()
specifier|public
name|boolean
name|hasLegacyPermissions
parameter_list|()
block|{
return|return
name|hasLegacyPermissions
return|;
block|}
DECL|method|convertLegacyPermission (String permissionName)
specifier|private
name|String
name|convertLegacyPermission
parameter_list|(
name|String
name|permissionName
parameter_list|)
block|{
switch|switch
condition|(
name|permissionName
condition|)
block|{
case|case
name|LEGACY_PERMISSION_PUSH_TAG
case|:
name|hasLegacyPermissions
operator|=
literal|true
expr_stmt|;
return|return
name|Permission
operator|.
name|CREATE_TAG
return|;
case|case
name|LEGACY_PERMISSION_PUSH_SIGNED_TAG
case|:
name|hasLegacyPermissions
operator|=
literal|true
expr_stmt|;
return|return
name|Permission
operator|.
name|CREATE_SIGNED_TAG
return|;
default|default:
return|return
name|permissionName
return|;
block|}
block|}
block|}
end_class

end_unit

