begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.project
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|InvalidPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|fnmatch
operator|.
name|FileNameMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ConfiguredMimeTypes
specifier|public
class|class
name|ConfiguredMimeTypes
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfiguredMimeTypes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MIMETYPE
specifier|private
specifier|static
specifier|final
name|String
name|MIMETYPE
init|=
literal|"mimetype"
decl_stmt|;
DECL|field|KEY_PATH
specifier|private
specifier|static
specifier|final
name|String
name|KEY_PATH
init|=
literal|"path"
decl_stmt|;
DECL|field|matchers
specifier|private
specifier|final
name|List
argument_list|<
name|TypeMatcher
argument_list|>
name|matchers
decl_stmt|;
DECL|method|ConfiguredMimeTypes (String projectName, Config rc)
name|ConfiguredMimeTypes
parameter_list|(
name|String
name|projectName
parameter_list|,
name|Config
name|rc
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
name|rc
operator|.
name|getSubsections
argument_list|(
name|MIMETYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|matchers
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|matchers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|types
control|)
block|{
for|for
control|(
name|String
name|path
range|:
name|rc
operator|.
name|getStringList
argument_list|(
name|MIMETYPE
argument_list|,
name|typeName
argument_list|,
name|KEY_PATH
argument_list|)
control|)
block|{
try|try
block|{
name|add
argument_list|(
name|typeName
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
decl||
name|InvalidPatternException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring invalid %s.%s.%s = %s in project %s: %s"
argument_list|,
name|MIMETYPE
argument_list|,
name|typeName
argument_list|,
name|KEY_PATH
argument_list|,
name|path
argument_list|,
name|projectName
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|add (String typeName, String path)
specifier|private
name|void
name|add
parameter_list|(
name|String
name|typeName
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|PatternSyntaxException
throws|,
name|InvalidPatternException
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"^"
argument_list|)
condition|)
block|{
name|matchers
operator|.
name|add
argument_list|(
operator|new
name|ReType
argument_list|(
name|typeName
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matchers
operator|.
name|add
argument_list|(
operator|new
name|FnType
argument_list|(
name|typeName
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMimeType (String path)
specifier|public
name|String
name|getMimeType
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|TypeMatcher
name|m
range|:
name|matchers
control|)
block|{
if|if
condition|(
name|m
operator|.
name|matches
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|m
operator|.
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|TypeMatcher
specifier|private
specifier|abstract
specifier|static
class|class
name|TypeMatcher
block|{
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|TypeMatcher (String type)
name|TypeMatcher
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|matches (String path)
specifier|abstract
name|boolean
name|matches
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
block|}
DECL|class|FnType
specifier|private
specifier|static
class|class
name|FnType
extends|extends
name|TypeMatcher
block|{
DECL|field|matcher
specifier|private
specifier|final
name|FileNameMatcher
name|matcher
decl_stmt|;
DECL|method|FnType (String type, String pattern)
name|FnType
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|InvalidPatternException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
operator|new
name|FileNameMatcher
argument_list|(
name|pattern
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (String input)
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|FileNameMatcher
name|m
init|=
operator|new
name|FileNameMatcher
argument_list|(
name|matcher
argument_list|)
decl_stmt|;
name|m
operator|.
name|append
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|isMatch
argument_list|()
return|;
block|}
block|}
DECL|class|ReType
specifier|private
specifier|static
class|class
name|ReType
extends|extends
name|TypeMatcher
block|{
DECL|field|re
specifier|private
specifier|final
name|Pattern
name|re
decl_stmt|;
DECL|method|ReType (String type, String pattern)
name|ReType
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|PatternSyntaxException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|re
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (String input)
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|re
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

