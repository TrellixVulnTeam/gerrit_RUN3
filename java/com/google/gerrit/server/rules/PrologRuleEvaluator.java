begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.rules
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rules
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
operator|.
name|createRuleError
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
operator|.
name|defaultRuleError
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|SubmitRuleEvaluator
operator|.
name|defaultTypeError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Accounts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Emails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RuleEvalException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|AssistedInject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|CompileException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|ReductionLimitException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|IntegerTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|ListTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Prolog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|PrologMachineCopy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|StructureTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|SymbolTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|VariableTerm
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Evaluates a submit-like Prolog rule found in the rules.pl file of the current project and filters  * the results through rules found in the parent projects, all the way up to All-Projects.  */
end_comment

begin_class
DECL|class|PrologRuleEvaluator
specifier|public
class|class
name|PrologRuleEvaluator
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
comment|/**    * List of characters to allow in the label name, when an invalid name is used. Dash is allowed as    * it can't be the first character: we use a prefix.    */
DECL|field|VALID_LABEL_MATCHER
specifier|private
specifier|static
specifier|final
name|CharMatcher
name|VALID_LABEL_MATCHER
init|=
name|CharMatcher
operator|.
name|is
argument_list|(
literal|'-'
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|CharMatcher
operator|.
name|inRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
argument_list|)
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
comment|/** Returns a new {@link PrologRuleEvaluator} with the specified options */
DECL|method|create (ChangeData cd, PrologOptions options)
name|PrologRuleEvaluator
name|create
parameter_list|(
name|ChangeData
name|cd
parameter_list|,
name|PrologOptions
name|options
parameter_list|)
function_decl|;
block|}
comment|/**    * Exception thrown when the label term of a submit record unexpectedly didn't contain a user    * term.    */
DECL|class|UserTermExpected
specifier|private
specifier|static
class|class
name|UserTermExpected
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|UserTermExpected (SubmitRecord.Label label)
name|UserTermExpected
parameter_list|(
name|SubmitRecord
operator|.
name|Label
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A label with the status %s must contain a user."
argument_list|,
name|label
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|accountCache
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|accounts
specifier|private
specifier|final
name|Accounts
name|accounts
decl_stmt|;
DECL|field|emails
specifier|private
specifier|final
name|Emails
name|emails
decl_stmt|;
DECL|field|rulesCache
specifier|private
specifier|final
name|RulesCache
name|rulesCache
decl_stmt|;
DECL|field|envFactory
specifier|private
specifier|final
name|PrologEnvironment
operator|.
name|Factory
name|envFactory
decl_stmt|;
DECL|field|cd
specifier|private
specifier|final
name|ChangeData
name|cd
decl_stmt|;
DECL|field|projectState
specifier|private
specifier|final
name|ProjectState
name|projectState
decl_stmt|;
DECL|field|opts
specifier|private
specifier|final
name|PrologOptions
name|opts
decl_stmt|;
DECL|field|submitRule
specifier|private
name|Term
name|submitRule
decl_stmt|;
annotation|@
name|AssistedInject
DECL|method|PrologRuleEvaluator ( AccountCache accountCache, Accounts accounts, Emails emails, RulesCache rulesCache, PrologEnvironment.Factory envFactory, ProjectCache projectCache, @Assisted ChangeData cd, @Assisted PrologOptions options)
specifier|private
name|PrologRuleEvaluator
parameter_list|(
name|AccountCache
name|accountCache
parameter_list|,
name|Accounts
name|accounts
parameter_list|,
name|Emails
name|emails
parameter_list|,
name|RulesCache
name|rulesCache
parameter_list|,
name|PrologEnvironment
operator|.
name|Factory
name|envFactory
parameter_list|,
name|ProjectCache
name|projectCache
parameter_list|,
annotation|@
name|Assisted
name|ChangeData
name|cd
parameter_list|,
annotation|@
name|Assisted
name|PrologOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|accounts
operator|=
name|accounts
expr_stmt|;
name|this
operator|.
name|emails
operator|=
name|emails
expr_stmt|;
name|this
operator|.
name|rulesCache
operator|=
name|rulesCache
expr_stmt|;
name|this
operator|.
name|envFactory
operator|=
name|envFactory
expr_stmt|;
name|this
operator|.
name|cd
operator|=
name|cd
expr_stmt|;
name|this
operator|.
name|opts
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|projectState
operator|=
name|projectCache
operator|.
name|get
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toListTerm (List<Term> terms)
specifier|private
specifier|static
name|Term
name|toListTerm
parameter_list|(
name|List
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|Term
name|list
init|=
name|Prolog
operator|.
name|Nil
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|terms
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|list
operator|=
operator|new
name|ListTerm
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|isUser (Term who)
specifier|private
specifier|static
name|boolean
name|isUser
parameter_list|(
name|Term
name|who
parameter_list|)
block|{
return|return
name|who
operator|instanceof
name|StructureTerm
operator|&&
name|who
operator|.
name|arity
argument_list|()
operator|==
literal|1
operator|&&
name|who
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
operator|&&
name|who
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|IntegerTerm
return|;
block|}
DECL|method|getSubmitRule ()
specifier|private
name|Term
name|getSubmitRule
parameter_list|()
block|{
return|return
name|submitRule
return|;
block|}
comment|/**    * Evaluate the submit rules.    *    * @return {@link SubmitRecord} returned from the evaluated rules. Can include errors.    */
DECL|method|evaluate ()
specifier|public
name|SubmitRecord
name|evaluate
parameter_list|()
block|{
name|Change
name|change
decl_stmt|;
try|try
block|{
name|change
operator|=
name|cd
operator|.
name|change
argument_list|()
expr_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"No change found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|StorageException
decl||
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
name|ruleError
argument_list|(
literal|"Error looking up change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Term
argument_list|>
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|evaluateImpl
argument_list|(
literal|"locate_submit_rule"
argument_list|,
literal|"can_submit"
argument_list|,
literal|"locate_submit_filter"
argument_list|,
literal|"filter_submit_results"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuleEvalException
name|e
parameter_list|)
block|{
return|return
name|ruleError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This should never occur. A well written submit rule will always produce
comment|// at least one result informing the caller of the labels that are
comment|// required for this change to be submittable. Each label will indicate
comment|// whether or not that is actually possible given the permissions.
return|return
name|ruleError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Submit rule '%s' for change %s of %s has no solution."
argument_list|,
name|getSubmitRuleName
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|projectState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|resultsToSubmitRecord
argument_list|(
name|getSubmitRule
argument_list|()
argument_list|,
name|results
argument_list|)
return|;
block|}
DECL|method|getSubmitRuleName ()
specifier|private
name|String
name|getSubmitRuleName
parameter_list|()
block|{
return|return
name|submitRule
operator|==
literal|null
condition|?
literal|"<unknown>"
else|:
name|submitRule
operator|.
name|name
argument_list|()
return|;
block|}
comment|/**    * Convert the results from Prolog Cafe's format to Gerrit's common format.    *    *<p>can_submit/1 terminates when an ok(P) record is found. Therefore walk the results backwards,    * using only that ok(P) record if it exists. This skips partial results that occur early in the    * output. Later after the loop the out collection is reversed to restore it to the original    * ordering.    */
DECL|method|resultsToSubmitRecord (Term submitRule, List<Term> results)
specifier|public
name|SubmitRecord
name|resultsToSubmitRecord
parameter_list|(
name|Term
name|submitRule
parameter_list|,
name|List
argument_list|<
name|Term
argument_list|>
name|results
parameter_list|)
block|{
name|checkState
argument_list|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"the list of Prolog terms must not be empty"
argument_list|)
expr_stmt|;
name|SubmitRecord
name|resultSubmitRecord
init|=
operator|new
name|SubmitRecord
argument_list|()
decl_stmt|;
name|resultSubmitRecord
operator|.
name|labels
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|resultIdx
init|=
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
literal|0
operator|<=
name|resultIdx
condition|;
name|resultIdx
operator|--
control|)
block|{
name|Term
name|submitRecord
init|=
name|results
operator|.
name|get
argument_list|(
name|resultIdx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|submitRecord
operator|instanceof
name|StructureTerm
operator|)
operator|||
literal|1
operator|!=
name|submitRecord
operator|.
name|arity
argument_list|()
condition|)
block|{
return|return
name|invalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
literal|"ok"
operator|.
name|equals
argument_list|(
name|submitRecord
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
operator|!
literal|"not_ready"
operator|.
name|equals
argument_list|(
name|submitRecord
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|invalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
comment|// This transformation is required to adapt Prolog's behavior to the way Gerrit handles
comment|// SubmitRecords, as defined in the SubmitRecord#allRecordsOK method.
comment|// When several rules are defined in Prolog, they are all matched to a SubmitRecord. We want
comment|// the change to be submittable when at least one result is OK.
if|if
condition|(
literal|"ok"
operator|.
name|equals
argument_list|(
name|submitRecord
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|resultSubmitRecord
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"not_ready"
operator|.
name|equals
argument_list|(
name|submitRecord
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
name|resultSubmitRecord
operator|.
name|status
operator|==
literal|null
condition|)
block|{
name|resultSubmitRecord
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Status
operator|.
name|NOT_READY
expr_stmt|;
block|}
comment|// Unpack the one argument. This should also be a structure with one
comment|// argument per label that needs to be reported on to the caller.
comment|//
name|submitRecord
operator|=
name|submitRecord
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|submitRecord
operator|instanceof
name|StructureTerm
operator|)
condition|)
block|{
return|return
name|invalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
for|for
control|(
name|Term
name|state
range|:
operator|(
operator|(
name|StructureTerm
operator|)
name|submitRecord
operator|)
operator|.
name|args
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|state
operator|instanceof
name|StructureTerm
operator|)
operator|||
literal|2
operator|!=
name|state
operator|.
name|arity
argument_list|()
operator|||
operator|!
literal|"label"
operator|.
name|equals
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|invalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
name|SubmitRecord
operator|.
name|Label
name|lbl
init|=
operator|new
name|SubmitRecord
operator|.
name|Label
argument_list|()
decl_stmt|;
name|resultSubmitRecord
operator|.
name|labels
operator|.
name|add
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
name|lbl
operator|.
name|label
operator|=
name|checkLabelName
argument_list|(
name|state
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Term
name|status
init|=
name|state
operator|.
name|arg
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|"ok"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|OK
expr_stmt|;
name|appliedBy
argument_list|(
name|lbl
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"reject"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|REJECT
expr_stmt|;
name|appliedBy
argument_list|(
name|lbl
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"need"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|NEED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"may"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|MAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"impossible"
operator|.
name|equals
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|lbl
operator|.
name|status
operator|=
name|SubmitRecord
operator|.
name|Label
operator|.
name|Status
operator|.
name|IMPOSSIBLE
expr_stmt|;
block|}
else|else
block|{
return|return
name|invalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UserTermExpected
name|e
parameter_list|)
block|{
return|return
name|invalidResult
argument_list|(
name|submitRule
argument_list|,
name|submitRecord
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|resultSubmitRecord
operator|.
name|status
operator|==
name|SubmitRecord
operator|.
name|Status
operator|.
name|OK
condition|)
block|{
break|break;
block|}
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|resultSubmitRecord
operator|.
name|labels
argument_list|)
expr_stmt|;
return|return
name|resultSubmitRecord
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|checkLabelName (String name)
specifier|static
name|String
name|checkLabelName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|LabelType
operator|.
name|checkName
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|newName
init|=
literal|"Invalid-Prolog-Rules-Label-Name-"
operator|+
name|sanitizeLabelName
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|LabelType
operator|.
name|checkName
argument_list|(
name|newName
operator|.
name|replace
argument_list|(
literal|"--"
argument_list|,
literal|"-"
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|sanitizeLabelName (String name)
specifier|private
specifier|static
name|String
name|sanitizeLabelName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|VALID_LABEL_MATCHER
operator|.
name|retainFrom
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|invalidResult (Term rule, Term record, String reason)
specifier|private
name|SubmitRecord
name|invalidResult
parameter_list|(
name|Term
name|rule
parameter_list|,
name|Term
name|record
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|ruleError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Submit rule %s for change %s of %s output invalid result: %s%s"
argument_list|,
name|rule
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|cd
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|record
argument_list|,
operator|(
name|reason
operator|==
literal|null
condition|?
literal|""
else|:
literal|". Reason: "
operator|+
name|reason
operator|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|invalidResult (Term rule, Term record)
specifier|private
name|SubmitRecord
name|invalidResult
parameter_list|(
name|Term
name|rule
parameter_list|,
name|Term
name|record
parameter_list|)
block|{
return|return
name|invalidResult
argument_list|(
name|rule
argument_list|,
name|record
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|ruleError (String err)
specifier|private
name|SubmitRecord
name|ruleError
parameter_list|(
name|String
name|err
parameter_list|)
block|{
return|return
name|ruleError
argument_list|(
name|err
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|ruleError (String err, Exception e)
specifier|private
name|SubmitRecord
name|ruleError
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|.
name|logErrors
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
name|defaultRuleError
argument_list|()
return|;
block|}
return|return
name|createRuleError
argument_list|(
name|err
argument_list|)
return|;
block|}
comment|/**    * Evaluate the submit type rules to get the submit type.    *    * @return record from the evaluated rules.    */
DECL|method|getSubmitType ()
specifier|public
name|SubmitTypeRecord
name|getSubmitType
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|projectState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchProjectException
argument_list|(
name|cd
operator|.
name|project
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchProjectException
name|e
parameter_list|)
block|{
return|return
name|typeError
argument_list|(
literal|"Error looking up change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Term
argument_list|>
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|evaluateImpl
argument_list|(
literal|"locate_submit_type"
argument_list|,
literal|"get_submit_type"
argument_list|,
literal|"locate_submit_type_filter"
argument_list|,
literal|"filter_submit_type_results"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuleEvalException
name|e
parameter_list|)
block|{
return|return
name|typeError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Should never occur for a well written rule
return|return
name|typeError
argument_list|(
literal|"Submit rule '"
operator|+
name|getSubmitRuleName
argument_list|()
operator|+
literal|"' for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|projectState
operator|.
name|getName
argument_list|()
operator|+
literal|" has no solution."
argument_list|)
return|;
block|}
name|Term
name|typeTerm
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|typeTerm
operator|instanceof
name|SymbolTerm
operator|)
condition|)
block|{
return|return
name|typeError
argument_list|(
literal|"Submit rule '"
operator|+
name|getSubmitRuleName
argument_list|()
operator|+
literal|"' for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|projectState
operator|.
name|getName
argument_list|()
operator|+
literal|" did not return a symbol."
argument_list|)
return|;
block|}
name|String
name|typeName
init|=
name|typeTerm
operator|.
name|name
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|SubmitTypeRecord
operator|.
name|OK
argument_list|(
name|SubmitType
operator|.
name|valueOf
argument_list|(
name|typeName
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|typeError
argument_list|(
literal|"Submit type rule "
operator|+
name|getSubmitRule
argument_list|()
operator|+
literal|" for change "
operator|+
name|cd
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|projectState
operator|.
name|getName
argument_list|()
operator|+
literal|" output invalid result: "
operator|+
name|typeName
argument_list|)
return|;
block|}
block|}
DECL|method|typeError (String err)
specifier|private
name|SubmitTypeRecord
name|typeError
parameter_list|(
name|String
name|err
parameter_list|)
block|{
return|return
name|typeError
argument_list|(
name|err
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|typeError (String err, Exception e)
specifier|private
name|SubmitTypeRecord
name|typeError
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|.
name|logErrors
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return
name|defaultTypeError
argument_list|()
return|;
block|}
return|return
name|SubmitTypeRecord
operator|.
name|error
argument_list|(
name|err
argument_list|)
return|;
block|}
DECL|method|evaluateImpl ( String userRuleLocatorName, String userRuleWrapperName, String filterRuleLocatorName, String filterRuleWrapperName)
specifier|private
name|List
argument_list|<
name|Term
argument_list|>
name|evaluateImpl
parameter_list|(
name|String
name|userRuleLocatorName
parameter_list|,
name|String
name|userRuleWrapperName
parameter_list|,
name|String
name|filterRuleLocatorName
parameter_list|,
name|String
name|filterRuleWrapperName
parameter_list|)
throws|throws
name|RuleEvalException
block|{
name|PrologEnvironment
name|env
init|=
name|getPrologEnvironment
argument_list|()
decl_stmt|;
try|try
block|{
name|Term
name|sr
init|=
name|env
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
name|userRuleLocatorName
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Term
index|[]
name|template
range|:
name|env
operator|.
name|all
argument_list|(
literal|"gerrit"
argument_list|,
name|userRuleWrapperName
argument_list|,
name|sr
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|template
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReductionLimitException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuleEvalException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s on change %d of %s"
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|projectState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuleEvalException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception calling %s on change %d of %s"
argument_list|,
name|sr
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|projectState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|Term
name|resultsTerm
init|=
name|toListTerm
argument_list|(
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|opts
operator|.
name|skipFilters
argument_list|()
condition|)
block|{
name|resultsTerm
operator|=
name|runSubmitFilters
argument_list|(
name|resultsTerm
argument_list|,
name|env
argument_list|,
name|filterRuleLocatorName
argument_list|,
name|filterRuleWrapperName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Term
argument_list|>
name|r
decl_stmt|;
if|if
condition|(
name|resultsTerm
operator|instanceof
name|ListTerm
condition|)
block|{
name|r
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Term
name|t
init|=
name|resultsTerm
init|;
name|t
operator|instanceof
name|ListTerm
condition|;
control|)
block|{
name|ListTerm
name|l
init|=
operator|(
name|ListTerm
operator|)
name|t
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
name|l
operator|.
name|car
argument_list|()
operator|.
name|dereference
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|l
operator|.
name|cdr
argument_list|()
operator|.
name|dereference
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|r
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|submitRule
operator|=
name|sr
expr_stmt|;
return|return
name|r
return|;
block|}
finally|finally
block|{
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPrologEnvironment ()
specifier|private
name|PrologEnvironment
name|getPrologEnvironment
parameter_list|()
throws|throws
name|RuleEvalException
block|{
name|PrologEnvironment
name|env
decl_stmt|;
try|try
block|{
name|PrologMachineCopy
name|pmc
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|rule
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|pmc
operator|=
name|rulesCache
operator|.
name|loadMachine
argument_list|(
literal|"stdin"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|opts
operator|.
name|rule
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pmc
operator|=
name|rulesCache
operator|.
name|loadMachine
argument_list|(
name|projectState
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|projectState
operator|.
name|getConfig
argument_list|()
operator|.
name|getRulesId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|env
operator|=
name|envFactory
operator|.
name|create
argument_list|(
name|pmc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompileException
name|err
parameter_list|)
block|{
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|rule
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|msg
operator|=
name|err
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Cannot load rules.pl for %s: %s"
argument_list|,
name|projectState
operator|.
name|getName
argument_list|()
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RuleEvalException
argument_list|(
name|msg
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|ACCOUNTS
argument_list|,
name|accounts
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|ACCOUNT_CACHE
argument_list|,
name|accountCache
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|EMAILS
argument_list|,
name|emails
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|CHANGE_DATA
argument_list|,
name|cd
argument_list|)
expr_stmt|;
name|env
operator|.
name|set
argument_list|(
name|StoredValues
operator|.
name|PROJECT_STATE
argument_list|,
name|projectState
argument_list|)
expr_stmt|;
return|return
name|env
return|;
block|}
DECL|method|runSubmitFilters ( Term results, PrologEnvironment env, String filterRuleLocatorName, String filterRuleWrapperName)
specifier|private
name|Term
name|runSubmitFilters
parameter_list|(
name|Term
name|results
parameter_list|,
name|PrologEnvironment
name|env
parameter_list|,
name|String
name|filterRuleLocatorName
parameter_list|,
name|String
name|filterRuleWrapperName
parameter_list|)
throws|throws
name|RuleEvalException
block|{
name|PrologEnvironment
name|childEnv
init|=
name|env
decl_stmt|;
name|ChangeData
name|cd
init|=
name|env
operator|.
name|get
argument_list|(
name|StoredValues
operator|.
name|CHANGE_DATA
argument_list|)
decl_stmt|;
name|ProjectState
name|projectState
init|=
name|env
operator|.
name|get
argument_list|(
name|StoredValues
operator|.
name|PROJECT_STATE
argument_list|)
decl_stmt|;
for|for
control|(
name|ProjectState
name|parentState
range|:
name|projectState
operator|.
name|parents
argument_list|()
control|)
block|{
name|PrologEnvironment
name|parentEnv
decl_stmt|;
try|try
block|{
name|parentEnv
operator|=
name|envFactory
operator|.
name|create
argument_list|(
name|rulesCache
operator|.
name|loadMachine
argument_list|(
name|parentState
operator|.
name|getNameKey
argument_list|()
argument_list|,
name|parentState
operator|.
name|getConfig
argument_list|()
operator|.
name|getRulesId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompileException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuleEvalException
argument_list|(
literal|"Cannot consult rules.pl for "
operator|+
name|parentState
operator|.
name|getName
argument_list|()
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|parentEnv
operator|.
name|copyStoredValues
argument_list|(
name|childEnv
argument_list|)
expr_stmt|;
name|Term
name|filterRule
init|=
name|parentEnv
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
name|filterRuleLocatorName
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Term
index|[]
name|template
init|=
name|parentEnv
operator|.
name|once
argument_list|(
literal|"gerrit"
argument_list|,
name|filterRuleWrapperName
argument_list|,
name|filterRule
argument_list|,
name|results
argument_list|,
operator|new
name|VariableTerm
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|=
name|template
index|[
literal|2
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReductionLimitException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuleEvalException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s on change %d of %s"
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|parentState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuleEvalException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception calling %s on change %d of %s"
argument_list|,
name|filterRule
argument_list|,
name|cd
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|parentState
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|childEnv
operator|=
name|parentEnv
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|appliedBy (SubmitRecord.Label label, Term status)
specifier|private
name|void
name|appliedBy
parameter_list|(
name|SubmitRecord
operator|.
name|Label
name|label
parameter_list|,
name|Term
name|status
parameter_list|)
throws|throws
name|UserTermExpected
block|{
if|if
condition|(
name|status
operator|instanceof
name|StructureTerm
operator|&&
name|status
operator|.
name|arity
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Term
name|who
init|=
name|status
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUser
argument_list|(
name|who
argument_list|)
condition|)
block|{
name|label
operator|.
name|appliedBy
operator|=
name|Account
operator|.
name|id
argument_list|(
operator|(
operator|(
name|IntegerTerm
operator|)
name|who
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UserTermExpected
argument_list|(
name|label
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

