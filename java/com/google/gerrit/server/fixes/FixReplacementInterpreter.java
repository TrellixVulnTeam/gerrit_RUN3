begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.fixes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|fixes
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|groupingBy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|FixReplacement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileContentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|ChangeFileContentModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|edit
operator|.
name|tree
operator|.
name|TreeModification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** An interpreter for {@code FixReplacement}s. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|FixReplacementInterpreter
specifier|public
class|class
name|FixReplacementInterpreter
block|{
DECL|field|ASC_RANGE_FIX_REPLACEMENT_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|FixReplacement
argument_list|>
name|ASC_RANGE_FIX_REPLACEMENT_COMPARATOR
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
name|fixReplacement
lambda|->
name|fixReplacement
operator|.
name|range
argument_list|)
decl_stmt|;
DECL|field|fileContentUtil
specifier|private
specifier|final
name|FileContentUtil
name|fileContentUtil
decl_stmt|;
annotation|@
name|Inject
DECL|method|FixReplacementInterpreter (FileContentUtil fileContentUtil)
specifier|public
name|FixReplacementInterpreter
parameter_list|(
name|FileContentUtil
name|fileContentUtil
parameter_list|)
block|{
name|this
operator|.
name|fileContentUtil
operator|=
name|fileContentUtil
expr_stmt|;
block|}
comment|/**    * Transforms the given {@code FixReplacement}s into {@code TreeModification}s.    *    * @param repository the affected Git repository    * @param projectState the affected project    * @param patchSetCommitId the patch set which should be modified    * @param fixReplacements the replacements which should be applied    * @return a list of {@code TreeModification}s representing the given replacements    * @throws ResourceNotFoundException if a file to which one of the replacements refers doesn't    *     exist    * @throws ResourceConflictException if the replacements can't be transformed into {@code    *     TreeModification}s    */
DECL|method|toTreeModifications ( Repository repository, ProjectState projectState, ObjectId patchSetCommitId, List<FixReplacement> fixReplacements)
specifier|public
name|List
argument_list|<
name|TreeModification
argument_list|>
name|toTreeModifications
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|ObjectId
name|patchSetCommitId
parameter_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|ResourceNotFoundException
throws|,
name|IOException
throws|,
name|ResourceConflictException
block|{
name|requireNonNull
argument_list|(
name|fixReplacements
argument_list|,
literal|"Fix replacements must not be null"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
argument_list|>
name|fixReplacementsPerFilePath
init|=
name|fixReplacements
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|groupingBy
argument_list|(
name|fixReplacement
lambda|->
name|fixReplacement
operator|.
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TreeModification
argument_list|>
name|treeModifications
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
argument_list|>
name|entry
range|:
name|fixReplacementsPerFilePath
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TreeModification
name|treeModification
init|=
name|toTreeModification
argument_list|(
name|repository
argument_list|,
name|projectState
argument_list|,
name|patchSetCommitId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|treeModifications
operator|.
name|add
argument_list|(
name|treeModification
argument_list|)
expr_stmt|;
block|}
return|return
name|treeModifications
return|;
block|}
DECL|method|toTreeModification ( Repository repository, ProjectState projectState, ObjectId patchSetCommitId, String filePath, List<FixReplacement> fixReplacements)
specifier|private
name|TreeModification
name|toTreeModification
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|ObjectId
name|patchSetCommitId
parameter_list|,
name|String
name|filePath
parameter_list|,
name|List
argument_list|<
name|FixReplacement
argument_list|>
name|fixReplacements
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|ResourceNotFoundException
throws|,
name|IOException
throws|,
name|ResourceConflictException
block|{
name|String
name|fileContent
init|=
name|getFileContent
argument_list|(
name|repository
argument_list|,
name|projectState
argument_list|,
name|patchSetCommitId
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|String
name|newFileContent
init|=
name|FixCalculator
operator|.
name|getNewFileContent
argument_list|(
name|fileContent
argument_list|,
name|fixReplacements
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChangeFileContentModification
argument_list|(
name|filePath
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|newFileContent
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFileContent ( Repository repository, ProjectState projectState, ObjectId patchSetCommitId, String filePath)
specifier|private
name|String
name|getFileContent
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ProjectState
name|projectState
parameter_list|,
name|ObjectId
name|patchSetCommitId
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|BadRequestException
throws|,
name|IOException
block|{
try|try
init|(
name|BinaryResult
name|fileContent
init|=
name|fileContentUtil
operator|.
name|getContent
argument_list|(
name|repository
argument_list|,
name|projectState
argument_list|,
name|patchSetCommitId
argument_list|,
name|filePath
argument_list|)
init|)
block|{
return|return
name|fileContent
operator|.
name|asString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

