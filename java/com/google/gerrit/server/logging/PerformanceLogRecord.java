begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.logging
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * The record of an operation for which the execution time was measured.  *  *<p>Meta data is stored in separate key/value fields to avoid expensive instantiations of Map  * objects.  */
end_comment

begin_class
annotation|@
name|AutoValue
DECL|class|PerformanceLogRecord
specifier|public
specifier|abstract
class|class
name|PerformanceLogRecord
block|{
comment|/**    * Creates a performance log record without meta data.    *    * @param operation the name of operation the is was performed    * @param durationMs the execution time in milliseconds    * @return the performance log record    */
DECL|method|create (String operation, long durationMs)
specifier|public
specifier|static
name|PerformanceLogRecord
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PerformanceLogRecord
argument_list|(
name|operation
argument_list|,
name|durationMs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a performance log record with meta data.    *    * @param operation the name of operation the is was performed    * @param durationMs the execution time in milliseconds    * @param key meta data key    * @param value meta data value    * @return the performance log record    */
DECL|method|create ( String operation, long durationMs, String key, @Nullable Object value)
specifier|public
specifier|static
name|PerformanceLogRecord
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|,
name|String
name|key
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PerformanceLogRecord
argument_list|(
name|operation
argument_list|,
name|durationMs
argument_list|,
name|requireNonNull
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a performance log record with meta data.    *    * @param operation the name of operation the is was performed    * @param durationMs the execution time in milliseconds    * @param key1 first meta data key    * @param value1 first meta data value    * @param key2 second meta data key    * @param value2 second meta data value    * @return the performance log record    */
DECL|method|create ( String operation, long durationMs, String key1, @Nullable Object value1, String key2, @Nullable Object value2)
specifier|public
specifier|static
name|PerformanceLogRecord
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|,
name|String
name|key1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value1
parameter_list|,
name|String
name|key2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value2
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PerformanceLogRecord
argument_list|(
name|operation
argument_list|,
name|durationMs
argument_list|,
name|requireNonNull
argument_list|(
name|key1
argument_list|)
argument_list|,
name|value1
argument_list|,
name|requireNonNull
argument_list|(
name|key2
argument_list|)
argument_list|,
name|value2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a performance log record with meta data.    *    * @param operation the name of operation the is was performed    * @param durationMs the execution time in milliseconds    * @param key1 first meta data key    * @param value1 first meta data value    * @param key2 second meta data key    * @param value2 second meta data value    * @param key3 third meta data key    * @param value3 third meta data value    * @return the performance log record    */
DECL|method|create ( String operation, long durationMs, String key1, @Nullable Object value1, String key2, @Nullable Object value2, String key3, @Nullable Object value3)
specifier|public
specifier|static
name|PerformanceLogRecord
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|,
name|String
name|key1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value1
parameter_list|,
name|String
name|key2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value2
parameter_list|,
name|String
name|key3
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value3
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PerformanceLogRecord
argument_list|(
name|operation
argument_list|,
name|durationMs
argument_list|,
name|requireNonNull
argument_list|(
name|key1
argument_list|)
argument_list|,
name|value1
argument_list|,
name|requireNonNull
argument_list|(
name|key2
argument_list|)
argument_list|,
name|value2
argument_list|,
name|requireNonNull
argument_list|(
name|key3
argument_list|)
argument_list|,
name|value3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates a performance log record with meta data.    *    * @param operation the name of operation the is was performed    * @param durationMs the execution time in milliseconds    * @param key1 first meta data key    * @param value1 first meta data value    * @param key2 second meta data key    * @param value2 second meta data value    * @param key3 third meta data key    * @param value3 third meta data value    * @param key4 forth meta data key    * @param value4 forth meta data value    * @return the performance log record    */
DECL|method|create ( String operation, long durationMs, String key1, @Nullable Object value1, String key2, @Nullable Object value2, String key3, @Nullable Object value3, String key4, @Nullable Object value4)
specifier|public
specifier|static
name|PerformanceLogRecord
name|create
parameter_list|(
name|String
name|operation
parameter_list|,
name|long
name|durationMs
parameter_list|,
name|String
name|key1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value1
parameter_list|,
name|String
name|key2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value2
parameter_list|,
name|String
name|key3
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value3
parameter_list|,
name|String
name|key4
parameter_list|,
annotation|@
name|Nullable
name|Object
name|value4
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PerformanceLogRecord
argument_list|(
name|operation
argument_list|,
name|durationMs
argument_list|,
name|requireNonNull
argument_list|(
name|key1
argument_list|)
argument_list|,
name|value1
argument_list|,
name|requireNonNull
argument_list|(
name|key2
argument_list|)
argument_list|,
name|value2
argument_list|,
name|requireNonNull
argument_list|(
name|key3
argument_list|)
argument_list|,
name|value3
argument_list|,
name|requireNonNull
argument_list|(
name|key4
argument_list|)
argument_list|,
name|value4
argument_list|)
return|;
block|}
DECL|method|operation ()
specifier|public
specifier|abstract
name|String
name|operation
parameter_list|()
function_decl|;
DECL|method|durationMs ()
specifier|public
specifier|abstract
name|long
name|durationMs
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|key1 ()
specifier|public
specifier|abstract
name|String
name|key1
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|value1 ()
specifier|public
specifier|abstract
name|Object
name|value1
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|key2 ()
specifier|public
specifier|abstract
name|String
name|key2
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|value2 ()
specifier|public
specifier|abstract
name|Object
name|value2
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|key3 ()
specifier|public
specifier|abstract
name|String
name|key3
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|value3 ()
specifier|public
specifier|abstract
name|Object
name|value3
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|key4 ()
specifier|public
specifier|abstract
name|String
name|key4
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|value4 ()
specifier|public
specifier|abstract
name|Object
name|value4
parameter_list|()
function_decl|;
DECL|method|writeTo (PerformanceLogger performanceLogger)
name|void
name|writeTo
parameter_list|(
name|PerformanceLogger
name|performanceLogger
parameter_list|)
block|{
if|if
condition|(
name|key4
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|requireNonNull
argument_list|(
name|key1
argument_list|()
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|key2
argument_list|()
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|key3
argument_list|()
argument_list|)
expr_stmt|;
name|performanceLogger
operator|.
name|log
argument_list|(
name|operation
argument_list|()
argument_list|,
name|durationMs
argument_list|()
argument_list|,
name|key1
argument_list|()
argument_list|,
name|value1
argument_list|()
argument_list|,
name|key2
argument_list|()
argument_list|,
name|value2
argument_list|()
argument_list|,
name|key3
argument_list|()
argument_list|,
name|value3
argument_list|()
argument_list|,
name|key4
argument_list|()
argument_list|,
name|value4
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key3
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|requireNonNull
argument_list|(
name|key1
argument_list|()
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|key2
argument_list|()
argument_list|)
expr_stmt|;
name|performanceLogger
operator|.
name|log
argument_list|(
name|operation
argument_list|()
argument_list|,
name|durationMs
argument_list|()
argument_list|,
name|key1
argument_list|()
argument_list|,
name|value1
argument_list|()
argument_list|,
name|key2
argument_list|()
argument_list|,
name|value2
argument_list|()
argument_list|,
name|key3
argument_list|()
argument_list|,
name|value3
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|requireNonNull
argument_list|(
name|key1
argument_list|()
argument_list|)
expr_stmt|;
name|performanceLogger
operator|.
name|log
argument_list|(
name|operation
argument_list|()
argument_list|,
name|durationMs
argument_list|()
argument_list|,
name|key1
argument_list|()
argument_list|,
name|value1
argument_list|()
argument_list|,
name|key2
argument_list|()
argument_list|,
name|value2
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|performanceLogger
operator|.
name|log
argument_list|(
name|operation
argument_list|()
argument_list|,
name|durationMs
argument_list|()
argument_list|,
name|key1
argument_list|()
argument_list|,
name|value1
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|performanceLogger
operator|.
name|log
argument_list|(
name|operation
argument_list|()
argument_list|,
name|durationMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

