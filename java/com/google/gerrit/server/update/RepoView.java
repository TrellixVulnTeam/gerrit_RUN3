begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.update
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_comment
comment|/**  * Restricted view of a {@link Repository} for use by {@link BatchUpdateOp} implementations.  *  *<p>This class serves two purposes in the context of {@link BatchUpdate}. First, the subset of  * normal Repository functionality is purely read-only, which prevents implementors from modifying  * the repository outside of {@link BatchUpdateOp#updateRepo}. Write operations can only be  * performed by calling methods on {@link RepoContext}.  *  *<p>Second, the read methods take into account any pending operations on the repository that  * implementations have staged using the write methods on {@link RepoContext}. Callers do not have  * to worry about whether operations have been performed yet.  */
end_comment

begin_class
DECL|class|RepoView
specifier|public
class|class
name|RepoView
block|{
DECL|field|repo
specifier|private
specifier|final
name|Repository
name|repo
decl_stmt|;
DECL|field|rw
specifier|private
specifier|final
name|RevWalk
name|rw
decl_stmt|;
DECL|field|inserter
specifier|private
specifier|final
name|ObjectInserter
name|inserter
decl_stmt|;
DECL|field|inserterWrapper
specifier|private
specifier|final
name|ObjectInserter
name|inserterWrapper
decl_stmt|;
DECL|field|commands
specifier|private
specifier|final
name|ChainedReceiveCommands
name|commands
decl_stmt|;
DECL|field|closeRepo
specifier|private
specifier|final
name|boolean
name|closeRepo
decl_stmt|;
DECL|method|RepoView (GitRepositoryManager repoManager, Project.NameKey project)
name|RepoView
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|IOException
block|{
name|repo
operator|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|inserter
operator|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
expr_stmt|;
name|inserterWrapper
operator|=
operator|new
name|NonFlushingInserter
argument_list|(
name|inserter
argument_list|)
expr_stmt|;
name|rw
operator|=
operator|new
name|RevWalk
argument_list|(
name|inserter
operator|.
name|newReader
argument_list|()
argument_list|)
expr_stmt|;
name|commands
operator|=
operator|new
name|ChainedReceiveCommands
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|closeRepo
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|RepoView (Repository repo, RevWalk rw, ObjectInserter inserter)
name|RepoView
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|rw
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|rw
operator|.
name|getObjectReader
argument_list|()
operator|.
name|getCreatedFromInserter
argument_list|()
operator|==
name|inserter
argument_list|,
literal|"expected RevWalk %s to be created by ObjectInserter %s"
argument_list|,
name|rw
argument_list|,
name|inserter
argument_list|)
expr_stmt|;
name|this
operator|.
name|repo
operator|=
name|requireNonNull
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|this
operator|.
name|rw
operator|=
name|requireNonNull
argument_list|(
name|rw
argument_list|)
expr_stmt|;
name|this
operator|.
name|inserter
operator|=
name|requireNonNull
argument_list|(
name|inserter
argument_list|)
expr_stmt|;
name|inserterWrapper
operator|=
operator|new
name|NonFlushingInserter
argument_list|(
name|inserter
argument_list|)
expr_stmt|;
name|commands
operator|=
operator|new
name|ChainedReceiveCommands
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|closeRepo
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Get this repo's configuration.    *    *<p>This is the storage-level config you would get with {@link Repository#getConfig()}, not, for    * example, the Gerrit-level project config.    *    * @return a defensive copy of the config; modifications have no effect on the underlying config.    */
DECL|method|getConfig ()
specifier|public
name|Config
name|getConfig
parameter_list|()
block|{
return|return
operator|new
name|Config
argument_list|(
name|repo
operator|.
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get an open revwalk on the repo.    *    *<p>Guaranteed to be able to read back any objects inserted in the repository via {@link    * RepoContext#getInserter()}, even if objects have not been flushed to the underlying repo. In    * particular this includes any object returned by {@link #getRef(String)}, even taking into    * account not-yet-executed commands.    *    * @return revwalk.    */
DECL|method|getRevWalk ()
specifier|public
name|RevWalk
name|getRevWalk
parameter_list|()
block|{
return|return
name|rw
return|;
block|}
comment|/**    * Read a single ref from the repo.    *    *<p>Takes into account any ref update commands added during the course of the update using    * {@link RepoContext#addRefUpdate}, even if they have not yet been executed on the underlying    * repo.    *    *<p>The results of individual ref lookups are cached: calling this method multiple times with    * the same ref name will return the same result (unless a command was added in the meantime). The    * repo is not reread.    *    * @param name exact ref name.    * @return the value of the ref, if present.    * @throws IOException if an error occurred.    */
DECL|method|getRef (String name)
specifier|public
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|getRef
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Look up refs by prefix.    *    *<p>Takes into account any ref update commands added during the course of the update using    * {@link RepoContext#addRefUpdate}, even if they have not yet been executed on the underlying    * repo.    *    *<p>For any ref that has previously been accessed with {@link #getRef(String)}, the value in the    * result map will be that same cached value. Any refs that have<em>not</em> been previously    * accessed are re-scanned from the repo on each call.    *    * @param prefix ref prefix; must end in '/' or else be empty.    * @return a map of ref suffixes to SHA-1s. The refs are all under {@code prefix} and have the    *     prefix stripped.    * @throws IOException if an error occurred.    */
DECL|method|getRefs (String prefix)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|getRefs
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|result
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|prefix
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toMap
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Ref
operator|::
name|getObjectId
argument_list|)
argument_list|)
decl_stmt|;
comment|// First, overwrite any cached reads from the underlying RepoRefCache. If any of these differ,
comment|// it's because a ref was updated after the RepoRefCache read it. It feels a little odd to
comment|// prefer the *old* value in this case, but it would be weirder to be inconsistent with getRef.
comment|//
comment|// Mostly this doesn't matter. If the caller was intending to write to the ref, they lost a
comment|// race, and they will get a lock failure. If they just want to read, well, the JGit interface
comment|// doesn't currently guarantee that any snapshot of multiple refs is consistent, so they were
comment|// probably out of luck anyway.
name|commands
operator|.
name|getRepoRefCache
argument_list|()
operator|.
name|getCachedRefs
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|updateRefIfPrefixMatches
argument_list|(
name|result
argument_list|,
name|prefix
argument_list|,
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second, overwrite with any pending commands.
name|commands
operator|.
name|getCommands
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|updateRefIfPrefixMatches
argument_list|(
name|result
argument_list|,
name|prefix
argument_list|,
name|c
operator|.
name|getRefName
argument_list|()
argument_list|,
name|toOptional
argument_list|(
name|c
operator|.
name|getNewId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|toOptional (ObjectId id)
specifier|private
specifier|static
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|toOptional
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
return|return
name|id
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
condition|?
name|Optional
operator|.
name|empty
argument_list|()
else|:
name|Optional
operator|.
name|of
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|updateRefIfPrefixMatches ( Map<String, ObjectId> map, String prefix, String fullRefName, Optional<ObjectId> maybeId)
specifier|private
specifier|static
name|void
name|updateRefIfPrefixMatches
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|map
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|fullRefName
parameter_list|,
name|Optional
argument_list|<
name|ObjectId
argument_list|>
name|maybeId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fullRefName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|suffix
init|=
name|fullRefName
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|suffix
argument_list|,
name|maybeId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|remove
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Not AutoCloseable so callers can't improperly close it. Plus it's never managed with a try
comment|// block anyway.
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closeRepo
condition|)
block|{
name|inserter
operator|.
name|close
argument_list|()
expr_stmt|;
name|rw
operator|.
name|close
argument_list|()
expr_stmt|;
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRepository ()
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repo
return|;
block|}
DECL|method|getInserter ()
name|ObjectInserter
name|getInserter
parameter_list|()
block|{
return|return
name|inserter
return|;
block|}
DECL|method|getInserterWrapper ()
name|ObjectInserter
name|getInserterWrapper
parameter_list|()
block|{
return|return
name|inserterWrapper
return|;
block|}
DECL|method|getCommands ()
name|ChainedReceiveCommands
name|getCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
DECL|class|NonFlushingInserter
specifier|private
specifier|static
class|class
name|NonFlushingInserter
extends|extends
name|ObjectInserter
operator|.
name|Filter
block|{
DECL|field|delegate
specifier|private
specifier|final
name|ObjectInserter
name|delegate
decl_stmt|;
DECL|method|NonFlushingInserter (ObjectInserter delegate)
specifier|private
name|NonFlushingInserter
parameter_list|(
name|ObjectInserter
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|ObjectInserter
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Do nothing; the delegate is closed separately.
block|}
block|}
block|}
end_class

end_unit

