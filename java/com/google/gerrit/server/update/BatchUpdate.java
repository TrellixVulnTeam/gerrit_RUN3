begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.update
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
operator|.
name|toImmutableMultiset
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|LazyArgs
operator|.
name|lazy
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|FactoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|NotifyResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|extensions
operator|.
name|events
operator|.
name|GitReferenceUpdated
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|validators
operator|.
name|OnSubmitValidators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|NoteDbUpdateManager
operator|.
name|TooManyUpdatesException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|InvalidChangeOperationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchChangeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchProjectException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|NoSuchRefException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|BatchRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|ReceiveCommand
import|;
end_import

begin_comment
comment|/**  * Helper for a set of change updates that should be applied to the NoteDb database.  *  *<p>An update operation can be divided into three phases:  *  *<ol>  *<li>Git reference updates  *<li>Review metadata updates  *<li>Post-update steps  *<li>  *</ol>  *  * A single conceptual operation, such as a REST API call or a merge operation, may make multiple  * changes at each step, which all need to be serialized relative to each other. Moreover, for  * consistency, the git ref updates must be visible to the review metadata updates, since for  * example the metadata might refer to newly-created patch set refs. In NoteDb, this is accomplished  * by combining these two phases into a single {@link BatchRefUpdate}.  *  *<p>Similarly, all post-update steps, such as sending email, must run only after all storage  * mutations have completed.  */
end_comment

begin_class
DECL|class|BatchUpdate
specifier|public
class|class
name|BatchUpdate
implements|implements
name|AutoCloseable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|FactoryModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|factory
argument_list|(
name|BatchUpdate
operator|.
name|Factory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// TODO(dborowitz): Make this package-private to force all callers to use RetryHelper.
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Project.NameKey project, CurrentUser user, Timestamp when)
name|BatchUpdate
name|create
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|CurrentUser
name|user
parameter_list|,
name|Timestamp
name|when
parameter_list|)
function_decl|;
block|}
DECL|method|execute ( Collection<BatchUpdate> updates, BatchUpdateListener listener, boolean dryrun)
specifier|public
specifier|static
name|void
name|execute
parameter_list|(
name|Collection
argument_list|<
name|BatchUpdate
argument_list|>
name|updates
parameter_list|,
name|BatchUpdateListener
name|listener
parameter_list|,
name|boolean
name|dryrun
parameter_list|)
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
name|requireNonNull
argument_list|(
name|listener
argument_list|)
expr_stmt|;
if|if
condition|(
name|updates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkDifferentProject
argument_list|(
name|updates
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|indexFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChangesHandle
argument_list|>
name|handles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|updates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|BatchUpdate
name|u
range|:
name|updates
control|)
block|{
name|u
operator|.
name|executeUpdateRepo
argument_list|()
expr_stmt|;
block|}
name|listener
operator|.
name|afterUpdateRepos
argument_list|()
expr_stmt|;
for|for
control|(
name|BatchUpdate
name|u
range|:
name|updates
control|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|u
operator|.
name|executeChangeOps
argument_list|(
name|dryrun
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChangesHandle
name|h
range|:
name|handles
control|)
block|{
name|h
operator|.
name|execute
argument_list|()
expr_stmt|;
name|indexFutures
operator|.
name|addAll
argument_list|(
name|h
operator|.
name|startIndexFutures
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|afterUpdateRefs
argument_list|()
expr_stmt|;
name|listener
operator|.
name|afterUpdateChanges
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|ChangesHandle
name|h
range|:
name|handles
control|)
block|{
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|ListenableFuture
argument_list|<
name|?
argument_list|>
operator|)
name|Futures
operator|.
name|allAsList
argument_list|(
name|indexFutures
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Fire ref update events only after all mutations are finished, since callers may assume a
comment|// patch set ref being created means the change was created, or a branch advancing meaning
comment|// some changes were closed.
name|updates
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|u
lambda|->
name|u
operator|.
name|batchRefUpdate
operator|!=
literal|null
argument_list|)
operator|.
name|forEach
argument_list|(
name|u
lambda|->
name|u
operator|.
name|gitRefUpdated
operator|.
name|fire
argument_list|(
name|u
operator|.
name|project
argument_list|,
name|u
operator|.
name|batchRefUpdate
argument_list|,
name|u
operator|.
name|getAccount
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
block|{
for|for
control|(
name|BatchUpdate
name|u
range|:
name|updates
control|)
block|{
name|u
operator|.
name|executePostOps
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|wrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkDifferentProject (Collection<BatchUpdate> updates)
specifier|private
specifier|static
name|void
name|checkDifferentProject
parameter_list|(
name|Collection
argument_list|<
name|BatchUpdate
argument_list|>
name|updates
parameter_list|)
block|{
name|Multiset
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projectCounts
init|=
name|updates
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|u
lambda|->
name|u
operator|.
name|project
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableMultiset
argument_list|()
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|projectCounts
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|updates
operator|.
name|size
argument_list|()
argument_list|,
literal|"updates must all be for different projects, got: %s"
argument_list|,
name|projectCounts
argument_list|)
expr_stmt|;
block|}
DECL|method|wrapAndThrowException (Exception e)
specifier|private
specifier|static
name|void
name|wrapAndThrowException
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
comment|// Convert common non-REST exception types with user-visible messages to corresponding REST
comment|// exception types.
if|if
condition|(
name|e
operator|instanceof
name|InvalidChangeOperationException
operator|||
name|e
operator|instanceof
name|TooManyUpdatesException
condition|)
block|{
throw|throw
operator|new
name|ResourceConflictException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchChangeException
operator|||
name|e
operator|instanceof
name|NoSuchRefException
operator|||
name|e
operator|instanceof
name|NoSuchProjectException
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// Propagate REST API exceptions thrown by operations; they commonly throw exceptions like
comment|// ResourceConflictException to indicate an atomic update failure.
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|UpdateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|RestApiException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Otherwise, wrap in a generic UpdateException, which does not include a user-visible message.
throw|throw
operator|new
name|UpdateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
DECL|class|ContextImpl
class|class
name|ContextImpl
implements|implements
name|Context
block|{
annotation|@
name|Override
DECL|method|getRepoView ()
specifier|public
name|RepoView
name|getRepoView
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|BatchUpdate
operator|.
name|this
operator|.
name|getRepoView
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRevWalk ()
specifier|public
name|RevWalk
name|getRevWalk
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRepoView
argument_list|()
operator|.
name|getRevWalk
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getProject ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
annotation|@
name|Override
DECL|method|getWhen ()
specifier|public
name|Timestamp
name|getWhen
parameter_list|()
block|{
return|return
name|when
return|;
block|}
annotation|@
name|Override
DECL|method|getTimeZone ()
specifier|public
name|TimeZone
name|getTimeZone
parameter_list|()
block|{
return|return
name|tz
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getNotify (Change.Id changeId)
specifier|public
name|NotifyResolver
operator|.
name|Result
name|getNotify
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
name|NotifyHandling
name|notifyHandling
init|=
name|perChangeNotifyHandling
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
return|return
name|notifyHandling
operator|!=
literal|null
condition|?
name|notify
operator|.
name|withHandling
argument_list|(
name|notifyHandling
argument_list|)
else|:
name|notify
return|;
block|}
block|}
DECL|class|RepoContextImpl
specifier|private
class|class
name|RepoContextImpl
extends|extends
name|ContextImpl
implements|implements
name|RepoContext
block|{
annotation|@
name|Override
DECL|method|getInserter ()
specifier|public
name|ObjectInserter
name|getInserter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRepoView
argument_list|()
operator|.
name|getInserterWrapper
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addRefUpdate (ReceiveCommand cmd)
specifier|public
name|void
name|addRefUpdate
parameter_list|(
name|ReceiveCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|getRepoView
argument_list|()
operator|.
name|getCommands
argument_list|()
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ChangeContextImpl
specifier|private
class|class
name|ChangeContextImpl
extends|extends
name|ContextImpl
implements|implements
name|ChangeContext
block|{
DECL|field|notes
specifier|private
specifier|final
name|ChangeNotes
name|notes
decl_stmt|;
DECL|field|updates
specifier|private
specifier|final
name|Map
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|,
name|ChangeUpdate
argument_list|>
name|updates
decl_stmt|;
DECL|field|deleted
specifier|private
name|boolean
name|deleted
decl_stmt|;
DECL|method|ChangeContextImpl (ChangeNotes notes)
name|ChangeContextImpl
parameter_list|(
name|ChangeNotes
name|notes
parameter_list|)
block|{
name|this
operator|.
name|notes
operator|=
name|requireNonNull
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|updates
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|comparing
argument_list|(
name|PatchSet
operator|.
name|Id
operator|::
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpdate (PatchSet.Id psId)
specifier|public
name|ChangeUpdate
name|getUpdate
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|ChangeUpdate
name|u
init|=
name|updates
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|u
operator|=
name|changeUpdateFactory
operator|.
name|create
argument_list|(
name|notes
argument_list|,
name|user
argument_list|,
name|when
argument_list|)
expr_stmt|;
if|if
condition|(
name|newChanges
operator|.
name|containsKey
argument_list|(
name|notes
operator|.
name|getChangeId
argument_list|()
argument_list|)
condition|)
block|{
name|u
operator|.
name|setAllowWriteToNewRef
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|setPatchSetId
argument_list|(
name|psId
argument_list|)
expr_stmt|;
name|updates
operator|.
name|put
argument_list|(
name|psId
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
return|return
name|u
return|;
block|}
annotation|@
name|Override
DECL|method|getNotes ()
specifier|public
name|ChangeNotes
name|getNotes
parameter_list|()
block|{
return|return
name|notes
return|;
block|}
annotation|@
name|Override
DECL|method|deleteChange ()
specifier|public
name|void
name|deleteChange
parameter_list|()
block|{
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Per-change result status from {@link #executeChangeOps}. */
DECL|enum|ChangeResult
specifier|private
enum|enum
name|ChangeResult
block|{
DECL|enumConstant|SKIPPED
name|SKIPPED
block|,
DECL|enumConstant|UPSERTED
name|UPSERTED
block|,
DECL|enumConstant|DELETED
name|DELETED
block|;   }
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|changeNotesFactory
specifier|private
specifier|final
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
decl_stmt|;
DECL|field|changeUpdateFactory
specifier|private
specifier|final
name|ChangeUpdate
operator|.
name|Factory
name|changeUpdateFactory
decl_stmt|;
DECL|field|updateManagerFactory
specifier|private
specifier|final
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|gitRefUpdated
specifier|private
specifier|final
name|GitReferenceUpdated
name|gitRefUpdated
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|CurrentUser
name|user
decl_stmt|;
DECL|field|when
specifier|private
specifier|final
name|Timestamp
name|when
decl_stmt|;
DECL|field|tz
specifier|private
specifier|final
name|TimeZone
name|tz
decl_stmt|;
DECL|field|ops
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|BatchUpdateOp
argument_list|>
name|ops
init|=
name|MultimapBuilder
operator|.
name|linkedHashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|newChanges
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Change
argument_list|>
name|newChanges
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|repoOnlyOps
specifier|private
specifier|final
name|List
argument_list|<
name|RepoOnlyOp
argument_list|>
name|repoOnlyOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|perChangeNotifyHandling
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|NotifyHandling
argument_list|>
name|perChangeNotifyHandling
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|repoView
specifier|private
name|RepoView
name|repoView
decl_stmt|;
DECL|field|batchRefUpdate
specifier|private
name|BatchRefUpdate
name|batchRefUpdate
decl_stmt|;
DECL|field|onSubmitValidators
specifier|private
name|OnSubmitValidators
name|onSubmitValidators
decl_stmt|;
DECL|field|pushCert
specifier|private
name|PushCertificate
name|pushCert
decl_stmt|;
DECL|field|refLogMessage
specifier|private
name|String
name|refLogMessage
decl_stmt|;
DECL|field|notify
specifier|private
name|NotifyResolver
operator|.
name|Result
name|notify
init|=
name|NotifyResolver
operator|.
name|Result
operator|.
name|all
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|BatchUpdate ( GitRepositoryManager repoManager, @GerritPersonIdent PersonIdent serverIdent, ChangeNotes.Factory changeNotesFactory, ChangeUpdate.Factory changeUpdateFactory, NoteDbUpdateManager.Factory updateManagerFactory, ChangeIndexer indexer, GitReferenceUpdated gitRefUpdated, @Assisted Project.NameKey project, @Assisted CurrentUser user, @Assisted Timestamp when)
name|BatchUpdate
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
annotation|@
name|GerritPersonIdent
name|PersonIdent
name|serverIdent
parameter_list|,
name|ChangeNotes
operator|.
name|Factory
name|changeNotesFactory
parameter_list|,
name|ChangeUpdate
operator|.
name|Factory
name|changeUpdateFactory
parameter_list|,
name|NoteDbUpdateManager
operator|.
name|Factory
name|updateManagerFactory
parameter_list|,
name|ChangeIndexer
name|indexer
parameter_list|,
name|GitReferenceUpdated
name|gitRefUpdated
parameter_list|,
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
annotation|@
name|Assisted
name|CurrentUser
name|user
parameter_list|,
annotation|@
name|Assisted
name|Timestamp
name|when
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|changeNotesFactory
operator|=
name|changeNotesFactory
expr_stmt|;
name|this
operator|.
name|changeUpdateFactory
operator|=
name|changeUpdateFactory
expr_stmt|;
name|this
operator|.
name|updateManagerFactory
operator|=
name|updateManagerFactory
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|gitRefUpdated
operator|=
name|gitRefUpdated
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|when
operator|=
name|when
expr_stmt|;
name|tz
operator|=
name|serverIdent
operator|.
name|getTimeZone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|repoView
operator|!=
literal|null
condition|)
block|{
name|repoView
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|execute (BatchUpdateListener listener)
specifier|public
name|void
name|execute
parameter_list|(
name|BatchUpdateListener
name|listener
parameter_list|)
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
name|execute
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|this
argument_list|)
argument_list|,
name|listener
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
name|execute
argument_list|(
name|BatchUpdateListener
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
DECL|method|setRepository (Repository repo, RevWalk revWalk, ObjectInserter inserter)
specifier|public
name|BatchUpdate
name|setRepository
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|RevWalk
name|revWalk
parameter_list|,
name|ObjectInserter
name|inserter
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|repoView
operator|==
literal|null
argument_list|,
literal|"repo already set"
argument_list|)
expr_stmt|;
name|repoView
operator|=
operator|new
name|RepoView
argument_list|(
name|repo
argument_list|,
name|revWalk
argument_list|,
name|inserter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPushCertificate (@ullable PushCertificate pushCert)
specifier|public
name|BatchUpdate
name|setPushCertificate
parameter_list|(
annotation|@
name|Nullable
name|PushCertificate
name|pushCert
parameter_list|)
block|{
name|this
operator|.
name|pushCert
operator|=
name|pushCert
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRefLogMessage (@ullable String refLogMessage)
specifier|public
name|BatchUpdate
name|setRefLogMessage
parameter_list|(
annotation|@
name|Nullable
name|String
name|refLogMessage
parameter_list|)
block|{
name|this
operator|.
name|refLogMessage
operator|=
name|refLogMessage
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set the default notification settings for all changes in the batch.    *    * @param notify notification settings.    * @return this.    */
DECL|method|setNotify (NotifyResolver.Result notify)
specifier|public
name|BatchUpdate
name|setNotify
parameter_list|(
name|NotifyResolver
operator|.
name|Result
name|notify
parameter_list|)
block|{
name|this
operator|.
name|notify
operator|=
name|requireNonNull
argument_list|(
name|notify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Override the {@link NotifyHandling} on a per-change basis.    *    *<p>Only the handling enum can be overridden; all changes share the same value for {@link    * com.google.gerrit.server.change.NotifyResolver.Result#accounts()}.    *    * @param changeId change ID.    * @param notifyHandling notify handling.    * @return this.    */
DECL|method|setNotifyHandling (Change.Id changeId, NotifyHandling notifyHandling)
specifier|public
name|BatchUpdate
name|setNotifyHandling
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|NotifyHandling
name|notifyHandling
parameter_list|)
block|{
name|this
operator|.
name|perChangeNotifyHandling
operator|.
name|put
argument_list|(
name|changeId
argument_list|,
name|requireNonNull
argument_list|(
name|notifyHandling
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a validation step for intended ref operations, which will be performed at the end of {@link    * RepoOnlyOp#updateRepo(RepoContext)} step.    */
DECL|method|setOnSubmitValidators (OnSubmitValidators onSubmitValidators)
specifier|public
name|BatchUpdate
name|setOnSubmitValidators
parameter_list|(
name|OnSubmitValidators
name|onSubmitValidators
parameter_list|)
block|{
name|this
operator|.
name|onSubmitValidators
operator|=
name|onSubmitValidators
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|initRepository ()
specifier|private
name|void
name|initRepository
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|repoView
operator|==
literal|null
condition|)
block|{
name|repoView
operator|=
operator|new
name|RepoView
argument_list|(
name|repoManager
argument_list|,
name|project
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRepoView ()
specifier|private
name|RepoView
name|getRepoView
parameter_list|()
throws|throws
name|IOException
block|{
name|initRepository
argument_list|()
expr_stmt|;
return|return
name|repoView
return|;
block|}
DECL|method|getAccount ()
specifier|private
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|getAccount
parameter_list|()
block|{
return|return
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|state
argument_list|()
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|getRefUpdates ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ReceiveCommand
argument_list|>
name|getRefUpdates
parameter_list|()
block|{
return|return
name|repoView
operator|!=
literal|null
condition|?
name|repoView
operator|.
name|getCommands
argument_list|()
operator|.
name|getCommands
argument_list|()
else|:
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
DECL|method|addOp (Change.Id id, BatchUpdateOp op)
specifier|public
name|BatchUpdate
name|addOp
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|BatchUpdateOp
name|op
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|op
operator|instanceof
name|InsertChangeOp
operator|)
argument_list|,
literal|"use insertChange"
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|ops
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addRepoOnlyOp (RepoOnlyOp op)
specifier|public
name|BatchUpdate
name|addRepoOnlyOp
parameter_list|(
name|RepoOnlyOp
name|op
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|op
operator|instanceof
name|BatchUpdateOp
operator|)
argument_list|,
literal|"use addOp()"
argument_list|)
expr_stmt|;
name|repoOnlyOps
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|insertChange (InsertChangeOp op)
specifier|public
name|BatchUpdate
name|insertChange
parameter_list|(
name|InsertChangeOp
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|Context
name|ctx
init|=
operator|new
name|ContextImpl
argument_list|()
decl_stmt|;
name|Change
name|c
init|=
name|op
operator|.
name|createChange
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
operator|!
name|newChanges
operator|.
name|containsKey
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|"only one op allowed to create change %s"
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|newChanges
operator|.
name|put
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|ops
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|op
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|executeUpdateRepo ()
specifier|private
name|void
name|executeUpdateRepo
parameter_list|()
throws|throws
name|UpdateException
throws|,
name|RestApiException
block|{
try|try
block|{
name|logDebug
argument_list|(
literal|"Executing updateRepo on %d ops"
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RepoContextImpl
name|ctx
init|=
operator|new
name|RepoContextImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchUpdateOp
name|op
range|:
name|ops
operator|.
name|values
argument_list|()
control|)
block|{
name|op
operator|.
name|updateRepo
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|logDebug
argument_list|(
literal|"Executing updateRepo on %d RepoOnlyOps"
argument_list|,
name|repoOnlyOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RepoOnlyOp
name|op
range|:
name|repoOnlyOps
control|)
block|{
name|op
operator|.
name|updateRepo
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onSubmitValidators
operator|!=
literal|null
operator|&&
operator|!
name|getRefUpdates
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Validation of refs has to take place here and not at the beginning of executeRefUpdates.
comment|// Otherwise, failing validation in a second BatchUpdate object will happen *after* the
comment|// first update's executeRefUpdates has finished, hence after first repo's refs have been
comment|// updated, which is too late.
name|onSubmitValidators
operator|.
name|validate
argument_list|(
name|project
argument_list|,
name|ctx
operator|.
name|getRevWalk
argument_list|()
operator|.
name|getObjectReader
argument_list|()
argument_list|,
name|repoView
operator|.
name|getCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfInstanceOf
argument_list|(
name|e
argument_list|,
name|RestApiException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UpdateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|ChangesHandle
specifier|private
class|class
name|ChangesHandle
implements|implements
name|AutoCloseable
block|{
DECL|field|manager
specifier|private
specifier|final
name|NoteDbUpdateManager
name|manager
decl_stmt|;
DECL|field|dryrun
specifier|private
specifier|final
name|boolean
name|dryrun
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeResult
argument_list|>
name|results
decl_stmt|;
DECL|method|ChangesHandle (NoteDbUpdateManager manager, boolean dryrun)
name|ChangesHandle
parameter_list|(
name|NoteDbUpdateManager
name|manager
parameter_list|,
name|boolean
name|dryrun
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|dryrun
operator|=
name|dryrun
expr_stmt|;
name|results
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setResult (Change.Id id, ChangeResult result)
name|void
name|setResult
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|ChangeResult
name|result
parameter_list|)
block|{
name|ChangeResult
name|old
init|=
name|results
operator|.
name|putIfAbsent
argument_list|(
name|id
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|old
operator|==
literal|null
argument_list|,
literal|"result for change %s already set: %s"
argument_list|,
name|id
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
DECL|method|execute ()
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|BatchUpdate
operator|.
name|this
operator|.
name|batchRefUpdate
operator|=
name|manager
operator|.
name|execute
argument_list|(
name|dryrun
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|startIndexFutures ()
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|startIndexFutures
parameter_list|()
block|{
if|if
condition|(
name|dryrun
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|logDebug
argument_list|(
literal|"Reindexing %d changes"
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|indexFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ChangeResult
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|UPSERTED
case|:
name|indexFutures
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|indexAsync
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|indexFutures
operator|.
name|add
argument_list|(
name|indexer
operator|.
name|deleteAsync
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SKIPPED
case|:
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected result: "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|indexFutures
return|;
block|}
block|}
DECL|method|executeChangeOps (boolean dryrun)
specifier|private
name|ChangesHandle
name|executeChangeOps
parameter_list|(
name|boolean
name|dryrun
parameter_list|)
throws|throws
name|Exception
block|{
name|logDebug
argument_list|(
literal|"Executing change ops"
argument_list|)
expr_stmt|;
name|initRepository
argument_list|()
expr_stmt|;
name|Repository
name|repo
init|=
name|repoView
operator|.
name|getRepository
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|performsAtomicTransactions
argument_list|()
argument_list|,
literal|"cannot use NoteDb with a repository that does not support atomic batch ref updates: %s"
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|ChangesHandle
name|handle
init|=
operator|new
name|ChangesHandle
argument_list|(
name|updateManagerFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
operator|.
name|setChangeRepo
argument_list|(
name|repo
argument_list|,
name|repoView
operator|.
name|getRevWalk
argument_list|()
argument_list|,
name|repoView
operator|.
name|getInserter
argument_list|()
argument_list|,
name|repoView
operator|.
name|getCommands
argument_list|()
argument_list|)
argument_list|,
name|dryrun
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|handle
operator|.
name|manager
operator|.
name|setRefLogIdent
argument_list|(
name|user
operator|.
name|asIdentifiedUser
argument_list|()
operator|.
name|newRefLogIdent
argument_list|(
name|when
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handle
operator|.
name|manager
operator|.
name|setRefLogMessage
argument_list|(
name|refLogMessage
argument_list|)
expr_stmt|;
name|handle
operator|.
name|manager
operator|.
name|setPushCertificate
argument_list|(
name|pushCert
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|Collection
argument_list|<
name|BatchUpdateOp
argument_list|>
argument_list|>
name|e
range|:
name|ops
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Change
operator|.
name|Id
name|id
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ChangeContextImpl
name|ctx
init|=
name|newChangeContext
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
name|logDebug
argument_list|(
literal|"Applying %d ops for change %s: %s"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|id
argument_list|,
name|lazy
argument_list|(
parameter_list|()
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|op
lambda|->
name|op
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchUpdateOp
name|op
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|dirty
operator||=
name|op
operator|.
name|updateChange
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
name|logDebug
argument_list|(
literal|"No ops reported dirty, short-circuiting"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|setResult
argument_list|(
name|id
argument_list|,
name|ChangeResult
operator|.
name|SKIPPED
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|ChangeUpdate
name|u
range|:
name|ctx
operator|.
name|updates
operator|.
name|values
argument_list|()
control|)
block|{
name|handle
operator|.
name|manager
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|deleted
condition|)
block|{
name|logDebug
argument_list|(
literal|"Change %s was deleted"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|handle
operator|.
name|manager
operator|.
name|deleteChange
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|handle
operator|.
name|setResult
argument_list|(
name|id
argument_list|,
name|ChangeResult
operator|.
name|DELETED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handle
operator|.
name|setResult
argument_list|(
name|id
argument_list|,
name|ChangeResult
operator|.
name|UPSERTED
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|handle
return|;
block|}
DECL|method|newChangeContext (Change.Id id)
specifier|private
name|ChangeContextImpl
name|newChangeContext
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|)
block|{
name|logDebug
argument_list|(
literal|"Opening change %s for update"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Change
name|c
init|=
name|newChanges
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|boolean
name|isNew
init|=
name|c
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isNew
condition|)
block|{
comment|// Pass a synthetic change into ChangeNotes.Factory, which will take care of checking for
comment|// existence and populating columns from the parsed notes state.
comment|// TODO(dborowitz): This dance made more sense when using Reviewdb; consider a nicer way.
name|c
operator|=
name|ChangeNotes
operator|.
name|Factory
operator|.
name|newChange
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logDebug
argument_list|(
literal|"Change %s is new"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|ChangeNotes
name|notes
init|=
name|changeNotesFactory
operator|.
name|createForBatchUpdate
argument_list|(
name|c
argument_list|,
operator|!
name|isNew
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChangeContextImpl
argument_list|(
name|notes
argument_list|)
return|;
block|}
DECL|method|executePostOps ()
specifier|private
name|void
name|executePostOps
parameter_list|()
throws|throws
name|Exception
block|{
name|ContextImpl
name|ctx
init|=
operator|new
name|ContextImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchUpdateOp
name|op
range|:
name|ops
operator|.
name|values
argument_list|()
control|)
block|{
name|op
operator|.
name|postUpdate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RepoOnlyOp
name|op
range|:
name|repoOnlyOps
control|)
block|{
name|op
operator|.
name|postUpdate
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logDebug (String msg)
specifier|private
specifier|static
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
comment|// Only log if there is a requestId assigned, since those are the
comment|// expensive/complicated requests like MergeOp. Doing it every time would be
comment|// noisy.
if|if
condition|(
name|RequestId
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logDebug (String msg, @Nullable Object arg)
specifier|private
specifier|static
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg
parameter_list|)
block|{
comment|// Only log if there is a requestId assigned, since those are the
comment|// expensive/complicated requests like MergeOp. Doing it every time would be
comment|// noisy.
if|if
condition|(
name|RequestId
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logDebug ( String msg, @Nullable Object arg1, @Nullable Object arg2, @Nullable Object arg3)
specifier|private
specifier|static
name|void
name|logDebug
parameter_list|(
name|String
name|msg
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg1
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg2
parameter_list|,
annotation|@
name|Nullable
name|Object
name|arg3
parameter_list|)
block|{
comment|// Only log if there is a requestId assigned, since those are the
comment|// expensive/complicated requests like MergeOp. Doing it every time would be
comment|// noisy.
if|if
condition|(
name|RequestId
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
name|msg
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

