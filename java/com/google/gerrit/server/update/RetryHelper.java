begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.update
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|Attempt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|Retryer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|StopStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|WaitStrategies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|WaitStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|UsedAt
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Counter3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
operator|.
name|MetricMaker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ExceptionHook
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|account
operator|.
name|InternalAccountQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryableAction
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryableAction
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryableChangeAction
operator|.
name|ChangeAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryableIndexQueryAction
operator|.
name|IndexQueryAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|RetryHelper
specifier|public
class|class
name|RetryHelper
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
comment|/**    * Options for retrying a single operation.    *    *<p>This class is similar in function to upstream's {@link RetryerBuilder}, but it exists as its    * own class in Gerrit for several reasons:    *    *<ul>    *<li>Gerrit needs to support defaults for some of the options, such as a default timeout.    *       {@code RetryerBuilder} doesn't support calling the same setter multiple times, so doing    *       this with {@code RetryerBuilder} directly would not be easy.    *<li>Gerrit explicitly does not want callers to have full control over all possible options,    *       so this class exposes a curated subset.    *</ul>    */
annotation|@
name|AutoValue
DECL|class|Options
specifier|public
specifier|abstract
specifier|static
class|class
name|Options
block|{
annotation|@
name|Nullable
DECL|method|listener ()
specifier|abstract
name|RetryListener
name|listener
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|timeout ()
specifier|abstract
name|Duration
name|timeout
parameter_list|()
function_decl|;
DECL|method|actionName ()
specifier|abstract
name|Optional
argument_list|<
name|String
argument_list|>
name|actionName
parameter_list|()
function_decl|;
DECL|method|retryWithTrace ()
specifier|abstract
name|Optional
argument_list|<
name|Predicate
argument_list|<
name|Throwable
argument_list|>
argument_list|>
name|retryWithTrace
parameter_list|()
function_decl|;
DECL|method|onAutoTrace ()
specifier|abstract
name|Optional
argument_list|<
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|onAutoTrace
parameter_list|()
function_decl|;
annotation|@
name|AutoValue
operator|.
name|Builder
DECL|class|Builder
specifier|public
specifier|abstract
specifier|static
class|class
name|Builder
block|{
DECL|method|listener (RetryListener listener)
specifier|public
specifier|abstract
name|Builder
name|listener
parameter_list|(
name|RetryListener
name|listener
parameter_list|)
function_decl|;
DECL|method|timeout (Duration timeout)
specifier|public
specifier|abstract
name|Builder
name|timeout
parameter_list|(
name|Duration
name|timeout
parameter_list|)
function_decl|;
DECL|method|actionName (String caller)
specifier|public
specifier|abstract
name|Builder
name|actionName
parameter_list|(
name|String
name|caller
parameter_list|)
function_decl|;
DECL|method|retryWithTrace (Predicate<Throwable> exceptionPredicate)
specifier|public
specifier|abstract
name|Builder
name|retryWithTrace
parameter_list|(
name|Predicate
argument_list|<
name|Throwable
argument_list|>
name|exceptionPredicate
parameter_list|)
function_decl|;
DECL|method|onAutoTrace (Consumer<String> traceIdConsumer)
specifier|public
specifier|abstract
name|Builder
name|onAutoTrace
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|traceIdConsumer
parameter_list|)
function_decl|;
DECL|method|build ()
specifier|public
specifier|abstract
name|Options
name|build
parameter_list|()
function_decl|;
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Singleton
DECL|class|Metrics
specifier|public
specifier|static
class|class
name|Metrics
block|{
DECL|field|attemptCounts
specifier|final
name|Counter3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|attemptCounts
decl_stmt|;
DECL|field|timeoutCount
specifier|final
name|Counter3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|timeoutCount
decl_stmt|;
DECL|field|autoRetryCount
specifier|final
name|Counter3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|autoRetryCount
decl_stmt|;
DECL|field|failuresOnAutoRetryCount
specifier|final
name|Counter3
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|failuresOnAutoRetryCount
decl_stmt|;
annotation|@
name|Inject
DECL|method|Metrics (MetricMaker metricMaker)
name|Metrics
parameter_list|(
name|MetricMaker
name|metricMaker
parameter_list|)
block|{
name|Field
argument_list|<
name|String
argument_list|>
name|actionTypeField
init|=
name|Field
operator|.
name|ofString
argument_list|(
literal|"action_type"
argument_list|,
name|Metadata
operator|.
name|Builder
operator|::
name|actionType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Field
argument_list|<
name|String
argument_list|>
name|operationNameField
init|=
name|Field
operator|.
name|ofString
argument_list|(
literal|"operation_name"
argument_list|,
name|Metadata
operator|.
name|Builder
operator|::
name|operationName
argument_list|)
operator|.
name|description
argument_list|(
literal|"The name of the operation that was retried."
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Field
argument_list|<
name|String
argument_list|>
name|lastAttemptCauseField
init|=
name|Field
operator|.
name|ofString
argument_list|(
literal|"cause"
argument_list|,
name|Metadata
operator|.
name|Builder
operator|::
name|cause
argument_list|)
operator|.
name|description
argument_list|(
literal|"The cause for the last attempt."
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Field
argument_list|<
name|String
argument_list|>
name|causeField
init|=
name|Field
operator|.
name|ofString
argument_list|(
literal|"cause"
argument_list|,
name|Metadata
operator|.
name|Builder
operator|::
name|cause
argument_list|)
operator|.
name|description
argument_list|(
literal|"The cause for the retry."
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|attemptCounts
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"action/retry_attempt_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Number of retry attempts made by RetryHelper to execute an action"
operator|+
literal|" (0 == single attempt, no retry)"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"attempts"
argument_list|)
argument_list|,
name|actionTypeField
argument_list|,
name|operationNameField
argument_list|,
name|lastAttemptCauseField
argument_list|)
expr_stmt|;
name|timeoutCount
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"action/retry_timeout_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Number of action executions of RetryHelper that ultimately timed out"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"timeouts"
argument_list|)
argument_list|,
name|actionTypeField
argument_list|,
name|operationNameField
argument_list|,
name|lastAttemptCauseField
argument_list|)
expr_stmt|;
name|autoRetryCount
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"action/auto_retry_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Number of automatic retries with tracing"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"retries"
argument_list|)
argument_list|,
name|actionTypeField
argument_list|,
name|operationNameField
argument_list|,
name|causeField
argument_list|)
expr_stmt|;
name|failuresOnAutoRetryCount
operator|=
name|metricMaker
operator|.
name|newCounter
argument_list|(
literal|"action/failures_on_auto_retry_count"
argument_list|,
operator|new
name|Description
argument_list|(
literal|"Number of failures on auto retry"
argument_list|)
operator|.
name|setCumulative
argument_list|()
operator|.
name|setUnit
argument_list|(
literal|"failures"
argument_list|)
argument_list|,
name|actionTypeField
argument_list|,
name|operationNameField
argument_list|,
name|causeField
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|options ()
specifier|public
specifier|static
name|Options
operator|.
name|Builder
name|options
parameter_list|()
block|{
return|return
operator|new
name|AutoValue_RetryHelper_Options
operator|.
name|Builder
argument_list|()
return|;
block|}
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|Metrics
name|metrics
decl_stmt|;
DECL|field|updateFactory
specifier|private
specifier|final
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
decl_stmt|;
DECL|field|internalAccountQuery
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|internalAccountQuery
decl_stmt|;
DECL|field|internalChangeQuery
specifier|private
specifier|final
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|internalChangeQuery
decl_stmt|;
DECL|field|exceptionHooks
specifier|private
specifier|final
name|PluginSetContext
argument_list|<
name|ExceptionHook
argument_list|>
name|exceptionHooks
decl_stmt|;
DECL|field|defaultTimeout
specifier|private
specifier|final
name|Duration
name|defaultTimeout
decl_stmt|;
DECL|field|defaultTimeouts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Duration
argument_list|>
name|defaultTimeouts
decl_stmt|;
DECL|field|waitStrategy
specifier|private
specifier|final
name|WaitStrategy
name|waitStrategy
decl_stmt|;
DECL|field|overwriteDefaultRetryerStrategySetup
annotation|@
name|Nullable
specifier|private
specifier|final
name|Consumer
argument_list|<
name|RetryerBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|overwriteDefaultRetryerStrategySetup
decl_stmt|;
DECL|field|retryWithTraceOnFailure
specifier|private
specifier|final
name|boolean
name|retryWithTraceOnFailure
decl_stmt|;
annotation|@
name|Inject
DECL|method|RetryHelper ( @erritServerConfig Config cfg, Metrics metrics, PluginSetContext<ExceptionHook> exceptionHooks, BatchUpdate.Factory updateFactory, Provider<InternalAccountQuery> internalAccountQuery, Provider<InternalChangeQuery> internalChangeQuery)
name|RetryHelper
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|Metrics
name|metrics
parameter_list|,
name|PluginSetContext
argument_list|<
name|ExceptionHook
argument_list|>
name|exceptionHooks
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|internalAccountQuery
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|internalChangeQuery
parameter_list|)
block|{
name|this
argument_list|(
name|cfg
argument_list|,
name|metrics
argument_list|,
name|updateFactory
argument_list|,
name|internalAccountQuery
argument_list|,
name|internalChangeQuery
argument_list|,
name|exceptionHooks
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|RetryHelper ( @erritServerConfig Config cfg, Metrics metrics, BatchUpdate.Factory updateFactory, Provider<InternalAccountQuery> internalAccountQuery, Provider<InternalChangeQuery> internalChangeQuery, PluginSetContext<ExceptionHook> exceptionHooks, @Nullable Consumer<RetryerBuilder<?>> overwriteDefaultRetryerStrategySetup)
specifier|public
name|RetryHelper
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|Metrics
name|metrics
parameter_list|,
name|BatchUpdate
operator|.
name|Factory
name|updateFactory
parameter_list|,
name|Provider
argument_list|<
name|InternalAccountQuery
argument_list|>
name|internalAccountQuery
parameter_list|,
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|internalChangeQuery
parameter_list|,
name|PluginSetContext
argument_list|<
name|ExceptionHook
argument_list|>
name|exceptionHooks
parameter_list|,
annotation|@
name|Nullable
name|Consumer
argument_list|<
name|RetryerBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|overwriteDefaultRetryerStrategySetup
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|updateFactory
operator|=
name|updateFactory
expr_stmt|;
name|this
operator|.
name|internalAccountQuery
operator|=
name|internalAccountQuery
expr_stmt|;
name|this
operator|.
name|internalChangeQuery
operator|=
name|internalChangeQuery
expr_stmt|;
name|this
operator|.
name|exceptionHooks
operator|=
name|exceptionHooks
expr_stmt|;
name|this
operator|.
name|defaultTimeout
operator|=
name|Duration
operator|.
name|ofMillis
argument_list|(
name|cfg
operator|.
name|getTimeUnit
argument_list|(
literal|"retry"
argument_list|,
literal|null
argument_list|,
literal|"timeout"
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|20
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultTimeouts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|ActionType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|at
lambda|->
name|defaultTimeouts
operator|.
name|put
argument_list|(
name|at
operator|.
name|name
argument_list|()
argument_list|,
name|Duration
operator|.
name|ofMillis
argument_list|(
name|cfg
operator|.
name|getTimeUnit
argument_list|(
literal|"retry"
argument_list|,
name|at
operator|.
name|name
argument_list|()
argument_list|,
literal|"timeout"
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|defaultTimeout
operator|.
name|getSeconds
argument_list|()
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitStrategy
operator|=
name|WaitStrategies
operator|.
name|join
argument_list|(
name|WaitStrategies
operator|.
name|exponentialWait
argument_list|(
name|cfg
operator|.
name|getTimeUnit
argument_list|(
literal|"retry"
argument_list|,
literal|null
argument_list|,
literal|"maxWait"
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|,
name|WaitStrategies
operator|.
name|randomWait
argument_list|(
literal|50
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|overwriteDefaultRetryerStrategySetup
operator|=
name|overwriteDefaultRetryerStrategySetup
expr_stmt|;
name|this
operator|.
name|retryWithTraceOnFailure
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"retry"
argument_list|,
literal|"retryWithTraceOnFailure"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an action that is executed with retrying when called.    *    *<p>This method allows to use a custom action type. If the action type is one of {@link    * ActionType} the usage of {@link #action(ActionType, String, Action)} is preferred.    *    *<p>The action type is used as metric bucket and decides which default timeout is used.    *    * @param actionType the type of the action, used as metric bucket    * @param actionName the name of the action, used as metric bucket    * @param action the action that should be executed    * @return the retryable action, callers need to call {@link RetryableAction#call()} to execute    *     the action    */
annotation|@
name|UsedAt
argument_list|(
name|UsedAt
operator|.
name|Project
operator|.
name|GOOGLE
argument_list|)
DECL|method|action (String actionType, String actionName, Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|(
name|String
name|actionType
parameter_list|,
name|String
name|actionName
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
operator|new
name|RetryableAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|actionType
argument_list|,
name|actionName
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Creates an action that is executed with retrying when called.    *    * @param actionType the type of the action, used as metric bucket    * @param actionName the name of the action, used as metric bucket    * @param action the action that should be executed    * @return the retryable action, callers need to call {@link RetryableAction#call()} to execute    *     the action    */
DECL|method|action (ActionType actionType, String actionName, Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|(
name|ActionType
name|actionType
parameter_list|,
name|String
name|actionName
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
operator|new
name|RetryableAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|actionType
argument_list|,
name|actionName
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Creates an action for updating an account that is executed with retrying when called.    *    * @param actionName the name of the action, used as metric bucket    * @param action the action that should be executed    * @return the retryable action, callers need to call {@link RetryableAction#call()} to execute    *     the action    */
DECL|method|accountUpdate (String actionName, Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableAction
argument_list|<
name|T
argument_list|>
name|accountUpdate
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
operator|new
name|RetryableAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|ActionType
operator|.
name|ACCOUNT_UPDATE
argument_list|,
name|actionName
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Creates an action for updating a change that is executed with retrying when called.    *    * @param actionName the name of the action, used as metric bucket    * @param action the action that should be executed    * @return the retryable action, callers need to call {@link RetryableAction#call()} to execute    *     the action    */
DECL|method|changeUpdate (String actionName, Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableAction
argument_list|<
name|T
argument_list|>
name|changeUpdate
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
operator|new
name|RetryableAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|ActionType
operator|.
name|CHANGE_UPDATE
argument_list|,
name|actionName
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Creates an action for updating a change that is executed with retrying when called.    *    *<p>The change action gets a {@link BatchUpdate.Factory} provided that can be used to update the    * change.    *    * @param actionName the name of the action, used as metric bucket    * @param changeAction the action that should be executed    * @return the retryable action, callers need to call {@link RetryableChangeAction#call()} to    *     execute the action    */
DECL|method|changeUpdate ( String actionName, ChangeAction<T> changeAction)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableChangeAction
argument_list|<
name|T
argument_list|>
name|changeUpdate
parameter_list|(
name|String
name|actionName
parameter_list|,
name|ChangeAction
argument_list|<
name|T
argument_list|>
name|changeAction
parameter_list|)
block|{
return|return
operator|new
name|RetryableChangeAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|updateFactory
argument_list|,
name|actionName
argument_list|,
name|changeAction
argument_list|)
return|;
block|}
comment|/**    * Creates an action for updating a group that is executed with retrying when called.    *    * @param actionName the name of the action, used as metric bucket    * @param action the action that should be executed    * @return the retryable action, callers need to call {@link RetryableAction#call()} to execute    *     the action    */
DECL|method|groupUpdate (String actionName, Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableAction
argument_list|<
name|T
argument_list|>
name|groupUpdate
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
operator|new
name|RetryableAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|ActionType
operator|.
name|GROUP_UPDATE
argument_list|,
name|actionName
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Creates an action for updating of plugin-specific data that is executed with retrying when    * called.    *    * @param actionName the name of the action, used as metric bucket    * @param action the action that should be executed    * @return the retryable action, callers need to call {@link RetryableAction#call()} to execute    *     the action    */
DECL|method|pluginUpdate (String actionName, Action<T> action)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableAction
argument_list|<
name|T
argument_list|>
name|pluginUpdate
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
operator|new
name|RetryableAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|ActionType
operator|.
name|PLUGIN_UPDATE
argument_list|,
name|actionName
argument_list|,
name|action
argument_list|)
return|;
block|}
comment|/**    * Creates an action for querying the account index that is executed with retrying when called.    *    *<p>The index query action gets a {@link InternalAccountQuery} provided that can be used to    * query the account index.    *    * @param actionName the name of the action, used as metric bucket    * @param indexQueryAction the action that should be executed    * @return the retryable action, callers need to call {@link RetryableIndexQueryAction#call()} to    *     execute the action    */
DECL|method|accountIndexQuery ( String actionName, IndexQueryAction<T, InternalAccountQuery> indexQueryAction)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableIndexQueryAction
argument_list|<
name|InternalAccountQuery
argument_list|,
name|T
argument_list|>
name|accountIndexQuery
parameter_list|(
name|String
name|actionName
parameter_list|,
name|IndexQueryAction
argument_list|<
name|T
argument_list|,
name|InternalAccountQuery
argument_list|>
name|indexQueryAction
parameter_list|)
block|{
return|return
operator|new
name|RetryableIndexQueryAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|internalAccountQuery
operator|.
name|get
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|indexQueryAction
argument_list|)
return|;
block|}
comment|/**    * Creates an action for querying the change index that is executed with retrying when called.    *    *<p>The index query action gets a {@link InternalChangeQuery} provided that can be used to query    * the change index.    *    * @param actionName the name of the action, used as metric bucket    * @param indexQueryAction the action that should be executed    * @return the retryable action, callers need to call {@link RetryableIndexQueryAction#call()} to    *     execute the action    */
DECL|method|changeIndexQuery ( String actionName, IndexQueryAction<T, InternalChangeQuery> indexQueryAction)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|RetryableIndexQueryAction
argument_list|<
name|InternalChangeQuery
argument_list|,
name|T
argument_list|>
name|changeIndexQuery
parameter_list|(
name|String
name|actionName
parameter_list|,
name|IndexQueryAction
argument_list|<
name|T
argument_list|,
name|InternalChangeQuery
argument_list|>
name|indexQueryAction
parameter_list|)
block|{
return|return
operator|new
name|RetryableIndexQueryAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|internalChangeQuery
operator|.
name|get
argument_list|()
argument_list|,
name|actionName
argument_list|,
name|indexQueryAction
argument_list|)
return|;
block|}
comment|/**    * Returns the default timeout for an action type.    *    *<p>The default timeout for an action type is defined by the 'retry.<action-type>.timeout'    * parameter in gerrit.config. If this parameter is not set the value from the 'retry.timeout'    * parameter is used (if this is also not set we fall back to to a hard-coded timeout of 20s).    *    *<p>Callers can overwrite the default timeout by setting another timeout in the {@link Options},    * see {@link Options#timeout()}.    *    * @param actionType the action type for which the default timeout should be retrieved    * @return the default timeout for the given action type    */
DECL|method|getDefaultTimeout (String actionType)
name|Duration
name|getDefaultTimeout
parameter_list|(
name|String
name|actionType
parameter_list|)
block|{
name|Duration
name|timeout
init|=
name|defaultTimeouts
operator|.
name|get
argument_list|(
name|actionType
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
return|return
name|timeout
return|;
block|}
return|return
name|readDefaultTimeoutFromConfig
argument_list|(
name|actionType
argument_list|)
return|;
block|}
comment|/**    * Thread-safe method to read and cache a default timeout from gerrit.config.    *    *<p>After reading the default timeout from gerrit.config it is cached in the {@link    * #defaultTimeouts} map, so that it's read only once.    *    * @param actionType the action type for which the default timeout should be retrieved    * @return the default timeout for the given action type    */
DECL|method|readDefaultTimeoutFromConfig (String actionType)
specifier|private
specifier|synchronized
name|Duration
name|readDefaultTimeoutFromConfig
parameter_list|(
name|String
name|actionType
parameter_list|)
block|{
name|Duration
name|timeout
init|=
name|defaultTimeouts
operator|.
name|get
argument_list|(
name|actionType
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
comment|// some other thread has read the default timeout from the config in the meantime
return|return
name|timeout
return|;
block|}
name|timeout
operator|=
name|Duration
operator|.
name|ofMillis
argument_list|(
name|cfg
operator|.
name|getTimeUnit
argument_list|(
literal|"retry"
argument_list|,
name|actionType
argument_list|,
literal|"timeout"
argument_list|,
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|defaultTimeout
operator|.
name|getSeconds
argument_list|()
argument_list|)
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|defaultTimeouts
operator|.
name|put
argument_list|(
name|actionType
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|timeout
return|;
block|}
comment|/**    * Executes an action and records the number of attempts and the timeout as metrics.    *    * @param actionType the type of the action    * @param action the action which should be executed and retried on failure    * @param opts options for retrying the action on failure    * @param exceptionPredicate predicate to control on which exception the action should be retried    * @return the result of executing the action    * @throws Throwable any error or exception that made the action fail, callers are expected to    *     catch and inspect this Throwable to decide carefully whether it should be re-thrown    */
DECL|method|execute ( String actionType, Action<T> action, Options opts, Predicate<Throwable> exceptionPredicate)
parameter_list|<
name|T
parameter_list|>
name|T
name|execute
parameter_list|(
name|String
name|actionType
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|,
name|Options
name|opts
parameter_list|,
name|Predicate
argument_list|<
name|Throwable
argument_list|>
name|exceptionPredicate
parameter_list|)
throws|throws
name|Throwable
block|{
name|MetricListener
name|listener
init|=
operator|new
name|MetricListener
argument_list|()
decl_stmt|;
try|try
init|(
name|TraceContext
name|traceContext
init|=
name|TraceContext
operator|.
name|open
argument_list|()
init|)
block|{
name|RetryerBuilder
argument_list|<
name|T
argument_list|>
name|retryerBuilder
init|=
name|createRetryerBuilder
argument_list|(
name|actionType
argument_list|,
name|opts
argument_list|,
name|t
lambda|->
block|{
comment|// exceptionPredicate checks for temporary errors for which the operation should be
comment|// retried (e.g. LockFailure). The retry has good chances to succeed.
if|if
condition|(
name|exceptionPredicate
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|actionName
init|=
name|opts
operator|.
name|actionName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"N/A"
argument_list|)
decl_stmt|;
comment|// Exception hooks may identify additional exceptions for retry.
if|if
condition|(
name|exceptionHooks
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|h
lambda|->
name|h
operator|.
name|shouldRetry
argument_list|(
name|actionType
argument_list|,
name|actionName
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
block|{
return|return
literal|true
return|;
block|}
comment|// A non-recoverable failure occurred. Check if we should retry to capture a trace
comment|// of the failure. If a trace was already done there is no need to retry.
if|if
condition|(
name|retryWithTraceOnFailure
operator|&&
name|opts
operator|.
name|retryWithTrace
argument_list|()
operator|.
name|isPresent
argument_list|()
operator|&&
name|opts
operator|.
name|retryWithTrace
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
block|{
comment|// Exception hooks may identify exceptions for which retrying with trace should be
comment|// skipped.
if|if
condition|(
name|exceptionHooks
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|h
lambda|->
name|h
operator|.
name|skipRetryWithTrace
argument_list|(
name|actionType
argument_list|,
name|actionName
argument_list|,
name|t
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|cause
init|=
name|formatCause
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|traceContext
operator|.
name|isTracing
argument_list|()
condition|)
block|{
name|String
name|traceId
init|=
literal|"retry-on-failure-"
operator|+
operator|new
name|RequestId
argument_list|()
decl_stmt|;
name|traceContext
operator|.
name|addTag
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|TRACE_ID
argument_list|,
name|traceId
argument_list|)
operator|.
name|forceLogging
argument_list|()
expr_stmt|;
name|opts
operator|.
name|onAutoTrace
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|traceId
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|withCause
argument_list|(
name|t
argument_list|)
operator|.
name|log
argument_list|(
literal|"AutoRetry: %s failed, retry with tracing enabled"
argument_list|,
name|actionName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|autoRetryCount
operator|.
name|increment
argument_list|(
name|actionType
argument_list|,
name|actionName
argument_list|,
name|cause
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// A non-recoverable failure occurred. We retried the operation with tracing
comment|// enabled and it failed again. Log the failure so that admin can see if it
comment|// differs from the failure that triggered the retry.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|withCause
argument_list|(
name|t
argument_list|)
operator|.
name|log
argument_list|(
literal|"AutoRetry: auto-retry of %s has failed"
argument_list|,
name|actionName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|failuresOnAutoRetryCount
operator|.
name|increment
argument_list|(
name|actionType
argument_list|,
name|actionName
argument_list|,
name|cause
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
block|)
function|;
name|retryerBuilder
operator|.
name|withRetryListener
parameter_list|(
name|listener
parameter_list|)
constructor_decl|;
return|return
name|executeWithTimeoutCount
argument_list|(
name|actionType
argument_list|,
name|action
argument_list|,
name|opts
argument_list|,
name|retryerBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
end_class

begin_finally
finally|finally
block|{
if|if
condition|(
name|listener
operator|.
name|getAttemptCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"%s was attempted %d times"
argument_list|,
name|actionType
argument_list|,
name|listener
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|attemptCounts
operator|.
name|incrementBy
argument_list|(
name|actionType
argument_list|,
name|opts
operator|.
name|actionName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"N/A"
argument_list|)
argument_list|,
name|listener
operator|.
name|getCause
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|formatCause
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"_unknown"
argument_list|)
argument_list|,
name|listener
operator|.
name|getAttemptCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_finally

begin_function
unit|}    public
DECL|method|formatCause (Throwable t)
name|String
name|formatCause
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
while|while
condition|(
operator|(
name|t
operator|instanceof
name|UpdateException
operator|||
name|t
operator|instanceof
name|StorageException
operator|||
name|t
operator|instanceof
name|ExecutionException
operator|)
operator|&&
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|Optional
argument_list|<
name|String
argument_list|>
name|formattedCause
init|=
name|getFormattedCauseFromHooks
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|formattedCause
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|formattedCause
operator|.
name|get
argument_list|()
return|;
block|}
return|return
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getFormattedCauseFromHooks (Throwable t)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getFormattedCauseFromHooks
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|exceptionHooks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|h
lambda|->
name|h
operator|.
name|formatCause
argument_list|(
name|t
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Executes an action and records the timeout as metric.    *    * @param actionType the type of the action    * @param action the action which should be executed and retried on failure    * @param opts options for retrying the action on failure    * @param retryer the retryer    * @return the result of executing the action    * @throws Throwable any error or exception that made the action fail, callers are expected to    *     catch and inspect this Throwable to decide carefully whether it should be re-thrown    */
end_comment

begin_function
DECL|method|executeWithTimeoutCount ( String actionType, Action<T> action, Options opts, Retryer<T> retryer)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|executeWithTimeoutCount
parameter_list|(
name|String
name|actionType
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|,
name|Options
name|opts
parameter_list|,
name|Retryer
argument_list|<
name|T
argument_list|>
name|retryer
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|retryer
operator|.
name|call
argument_list|(
name|action
operator|::
name|call
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|RetryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RetryException
condition|)
block|{
name|metrics
operator|.
name|timeoutCount
operator|.
name|increment
argument_list|(
name|actionType
argument_list|,
name|opts
operator|.
name|actionName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"N/A"
argument_list|)
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|formatCause
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
else|:
literal|"_unknown"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
end_function

begin_function
DECL|method|createRetryerBuilder ( String actionType, Options opts, Predicate<Throwable> exceptionPredicate)
specifier|private
parameter_list|<
name|O
parameter_list|>
name|RetryerBuilder
argument_list|<
name|O
argument_list|>
name|createRetryerBuilder
parameter_list|(
name|String
name|actionType
parameter_list|,
name|Options
name|opts
parameter_list|,
name|Predicate
argument_list|<
name|Throwable
argument_list|>
name|exceptionPredicate
parameter_list|)
block|{
name|RetryerBuilder
argument_list|<
name|O
argument_list|>
name|retryerBuilder
init|=
name|RetryerBuilder
operator|.
expr|<
name|O
operator|>
name|newBuilder
argument_list|()
operator|.
name|retryIfException
argument_list|(
name|exceptionPredicate
operator|::
name|test
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|listener
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|retryerBuilder
operator|.
name|withRetryListener
argument_list|(
name|opts
operator|.
name|listener
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overwriteDefaultRetryerStrategySetup
operator|!=
literal|null
condition|)
block|{
name|overwriteDefaultRetryerStrategySetup
operator|.
name|accept
argument_list|(
name|retryerBuilder
argument_list|)
expr_stmt|;
return|return
name|retryerBuilder
return|;
block|}
return|return
name|retryerBuilder
operator|.
name|withStopStrategy
argument_list|(
name|StopStrategies
operator|.
name|stopAfterDelay
argument_list|(
name|firstNonNull
argument_list|(
name|opts
operator|.
name|timeout
argument_list|()
argument_list|,
name|getDefaultTimeout
argument_list|(
name|actionType
argument_list|)
argument_list|)
operator|.
name|toMillis
argument_list|()
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
operator|.
name|withWaitStrategy
argument_list|(
name|waitStrategy
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|MetricListener
specifier|private
specifier|static
class|class
name|MetricListener
implements|implements
name|RetryListener
block|{
DECL|field|attemptCount
specifier|private
name|long
name|attemptCount
decl_stmt|;
DECL|field|cause
specifier|private
name|Optional
argument_list|<
name|Throwable
argument_list|>
name|cause
decl_stmt|;
DECL|method|MetricListener ()
name|MetricListener
parameter_list|()
block|{
name|attemptCount
operator|=
literal|1
expr_stmt|;
name|cause
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRetry (Attempt<V> attempt)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|onRetry
parameter_list|(
name|Attempt
argument_list|<
name|V
argument_list|>
name|attempt
parameter_list|)
block|{
name|attemptCount
operator|=
name|attempt
operator|.
name|getAttemptNumber
argument_list|()
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|attempt
operator|.
name|getExceptionCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAttemptCount ()
name|long
name|getAttemptCount
parameter_list|()
block|{
return|return
name|attemptCount
return|;
block|}
DECL|method|getCause ()
name|Optional
argument_list|<
name|Throwable
argument_list|>
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
block|}
end_class

unit|}
end_unit

