begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.update
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|RetryListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|exceptions
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|query
operator|.
name|InternalQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * An action to query an index that is executed with retrying.  *  *<p>Instances of this class are created via {@link RetryHelper#accountIndexQuery(String,  * IndexQueryAction)} and {@link RetryHelper#changeIndexQuery(String, IndexQueryAction)}.  *  *<p>In contrast to normal {@link RetryableAction.Action}s that are called via {@link  * RetryableAction} {@link IndexQueryAction}s get a {@link InternalQuery} provided.  *  *<p>In addition when an index query action is called any exception that is not an unchecked  * exception gets wrapped into an {@link StorageException}.  */
end_comment

begin_class
DECL|class|RetryableIndexQueryAction
specifier|public
class|class
name|RetryableIndexQueryAction
parameter_list|<
name|Q
extends|extends
name|InternalQuery
parameter_list|<
name|?
parameter_list|,
name|Q
parameter_list|>
parameter_list|,
name|T
parameter_list|>
extends|extends
name|RetryableAction
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|FunctionalInterface
DECL|interface|IndexQueryAction
specifier|public
interface|interface
name|IndexQueryAction
parameter_list|<
name|T
parameter_list|,
name|Q
parameter_list|>
block|{
DECL|method|call (Q internalQuery)
name|T
name|call
parameter_list|(
name|Q
name|internalQuery
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|method|RetryableIndexQueryAction ( RetryHelper retryHelper, Provider<Q> internalQuery, String actionName, IndexQueryAction<T, Q> indexQuery)
name|RetryableIndexQueryAction
parameter_list|(
name|RetryHelper
name|retryHelper
parameter_list|,
name|Provider
argument_list|<
name|Q
argument_list|>
name|internalQuery
parameter_list|,
name|String
name|actionName
parameter_list|,
name|IndexQueryAction
argument_list|<
name|T
argument_list|,
name|Q
argument_list|>
name|indexQuery
parameter_list|)
block|{
name|super
argument_list|(
name|retryHelper
argument_list|,
name|ActionType
operator|.
name|INDEX_QUERY
argument_list|,
name|actionName
argument_list|,
parameter_list|()
lambda|->
name|indexQuery
operator|.
name|call
argument_list|(
name|internalQuery
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|retryOn (Predicate<Throwable> exceptionPredicate)
specifier|public
name|RetryableIndexQueryAction
argument_list|<
name|Q
argument_list|,
name|T
argument_list|>
name|retryOn
parameter_list|(
name|Predicate
argument_list|<
name|Throwable
argument_list|>
name|exceptionPredicate
parameter_list|)
block|{
name|super
operator|.
name|retryOn
argument_list|(
name|exceptionPredicate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|retryWithTrace (Predicate<Throwable> exceptionPredicate)
specifier|public
name|RetryableIndexQueryAction
argument_list|<
name|Q
argument_list|,
name|T
argument_list|>
name|retryWithTrace
parameter_list|(
name|Predicate
argument_list|<
name|Throwable
argument_list|>
name|exceptionPredicate
parameter_list|)
block|{
name|super
operator|.
name|retryWithTrace
argument_list|(
name|exceptionPredicate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|onAutoTrace (Consumer<String> traceIdConsumer)
specifier|public
name|RetryableIndexQueryAction
argument_list|<
name|Q
argument_list|,
name|T
argument_list|>
name|onAutoTrace
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|traceIdConsumer
parameter_list|)
block|{
name|super
operator|.
name|onAutoTrace
argument_list|(
name|traceIdConsumer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|listener (RetryListener retryListener)
specifier|public
name|RetryableIndexQueryAction
argument_list|<
name|Q
argument_list|,
name|T
argument_list|>
name|listener
parameter_list|(
name|RetryListener
name|retryListener
parameter_list|)
block|{
name|super
operator|.
name|listener
argument_list|(
name|retryListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|defaultTimeoutMultiplier (int multiplier)
specifier|public
name|RetryableIndexQueryAction
argument_list|<
name|Q
argument_list|,
name|T
argument_list|>
name|defaultTimeoutMultiplier
parameter_list|(
name|int
name|multiplier
parameter_list|)
block|{
name|super
operator|.
name|defaultTimeoutMultiplier
argument_list|(
name|multiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|T
name|call
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwables
operator|.
name|throwIfUnchecked
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

