begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_comment
comment|/**  * Request listener that sets additional logging tags and enables tracing automatically if the  * request matches any tracing configuration in gerrit.config (see description of  * 'tracing.<trace-id>' subsection in config-gerrit.txt).  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|TraceRequestListener
specifier|public
class|class
name|TraceRequestListener
implements|implements
name|RequestListener
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
DECL|field|traceConfigs
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|TraceConfig
argument_list|>
name|traceConfigs
decl_stmt|;
annotation|@
name|Inject
DECL|method|TraceRequestListener (@erritServerConfig Config cfg)
name|TraceRequestListener
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
name|this
operator|.
name|traceConfigs
operator|=
name|parseTraceConfigs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRequest (RequestInfo requestInfo)
specifier|public
name|void
name|onRequest
parameter_list|(
name|RequestInfo
name|requestInfo
parameter_list|)
block|{
name|requestInfo
operator|.
name|project
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|p
lambda|->
name|requestInfo
operator|.
name|traceContext
argument_list|()
operator|.
name|addTag
argument_list|(
literal|"project"
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|traceConfigs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|traceConfig
lambda|->
name|traceConfig
operator|.
name|matches
argument_list|(
name|requestInfo
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|traceConfig
lambda|->
name|requestInfo
operator|.
name|traceContext
argument_list|()
operator|.
name|forceLogging
argument_list|()
operator|.
name|addTag
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|TRACE_ID
argument_list|,
name|traceConfig
operator|.
name|traceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parseTraceConfigs ()
specifier|private
name|ImmutableList
argument_list|<
name|TraceConfig
argument_list|>
name|parseTraceConfigs
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|TraceConfig
argument_list|>
name|traceConfigs
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|traceId
range|:
name|cfg
operator|.
name|getSubsections
argument_list|(
literal|"tracing"
argument_list|)
control|)
block|{
try|try
block|{
name|TraceConfig
operator|.
name|Builder
name|traceConfig
init|=
name|TraceConfig
operator|.
name|builder
argument_list|()
decl_stmt|;
name|traceConfig
operator|.
name|traceId
argument_list|(
name|traceId
argument_list|)
expr_stmt|;
name|traceConfig
operator|.
name|requestTypes
argument_list|(
name|parseRequestTypes
argument_list|(
name|traceId
argument_list|)
argument_list|)
expr_stmt|;
name|traceConfig
operator|.
name|requestUriPatterns
argument_list|(
name|parseRequestUriPatterns
argument_list|(
name|traceId
argument_list|)
argument_list|)
expr_stmt|;
name|traceConfig
operator|.
name|accountIds
argument_list|(
name|parseAccounts
argument_list|(
name|traceId
argument_list|)
argument_list|)
expr_stmt|;
name|traceConfig
operator|.
name|projectPatterns
argument_list|(
name|parseProjectPatterns
argument_list|(
name|traceId
argument_list|)
argument_list|)
expr_stmt|;
name|traceConfigs
operator|.
name|add
argument_list|(
name|traceConfig
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigInvalidException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Ignoring invalid tracing configuration:\n %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|traceConfigs
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|parseRequestTypes (String traceId)
specifier|private
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|parseRequestTypes
parameter_list|(
name|String
name|traceId
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"tracing"
argument_list|,
name|traceId
argument_list|,
literal|"requestType"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseRequestUriPatterns (String traceId)
specifier|private
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|parseRequestUriPatterns
parameter_list|(
name|String
name|traceId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parsePatterns
argument_list|(
name|traceId
argument_list|,
literal|"requestUriPattern"
argument_list|)
return|;
block|}
DECL|method|parseAccounts (String traceId)
specifier|private
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|parseAccounts
parameter_list|(
name|String
name|traceId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|String
index|[]
name|accounts
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"tracing"
argument_list|,
name|traceId
argument_list|,
literal|"account"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|account
range|:
name|accounts
control|)
block|{
name|Optional
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountId
init|=
name|Account
operator|.
name|Id
operator|.
name|tryParse
argument_list|(
name|account
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accountId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid tracing config ('tracing.%s.account = %s'): invalid account ID"
argument_list|,
name|traceId
argument_list|,
name|account
argument_list|)
argument_list|)
throw|;
block|}
name|accountIds
operator|.
name|add
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|accountIds
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|parseProjectPatterns (String traceId)
specifier|private
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|parseProjectPatterns
parameter_list|(
name|String
name|traceId
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
return|return
name|parsePatterns
argument_list|(
name|traceId
argument_list|,
literal|"projectPattern"
argument_list|)
return|;
block|}
DECL|method|parsePatterns (String traceId, String name)
specifier|private
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|parsePatterns
parameter_list|(
name|String
name|traceId
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ConfigInvalidException
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Pattern
argument_list|>
name|patterns
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|String
index|[]
name|patternRegExs
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"tracing"
argument_list|,
name|traceId
argument_list|,
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|patternRegEx
range|:
name|patternRegExs
control|)
block|{
try|try
block|{
name|patterns
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patternRegEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigInvalidException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid tracing config ('tracing.%s.%s = %s'): %s"
argument_list|,
name|traceId
argument_list|,
name|name
argument_list|,
name|patternRegEx
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|patterns
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|AutoValue
DECL|class|TraceConfig
specifier|abstract
specifier|static
class|class
name|TraceConfig
block|{
comment|/** ID for the trace */
DECL|method|traceId ()
specifier|abstract
name|String
name|traceId
parameter_list|()
function_decl|;
comment|/** request types that should be traced */
DECL|method|requestTypes ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|requestTypes
parameter_list|()
function_decl|;
comment|/** pattern matching request URIs */
DECL|method|requestUriPatterns ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|requestUriPatterns
parameter_list|()
function_decl|;
comment|/** accounts IDs matching calling user */
DECL|method|accountIds ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|()
function_decl|;
comment|/** pattern matching projects names */
DECL|method|projectPatterns ()
specifier|abstract
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|projectPatterns
parameter_list|()
function_decl|;
DECL|method|builder ()
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|AutoValue_TraceRequestListener_TraceConfig
operator|.
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Whether this trace config matches a given request.      *      * @param requestInfo request info      * @return whether this trace config matches      */
DECL|method|matches (RequestInfo requestInfo)
name|boolean
name|matches
parameter_list|(
name|RequestInfo
name|requestInfo
parameter_list|)
block|{
comment|// If in the trace config request types are set and none of them matches, then the request is
comment|// not matched.
if|if
condition|(
operator|!
name|requestTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|requestTypes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|type
lambda|->
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
name|requestInfo
operator|.
name|requestType
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If in the trace config request URI patterns are set and none of them matches, then the
comment|// request is not matched.
if|if
condition|(
operator|!
name|requestUriPatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|requestInfo
operator|.
name|requestUri
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// The request has no request URI, hence it cannot match a request URI pattern.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|requestUriPatterns
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|matcher
argument_list|(
name|requestInfo
operator|.
name|requestUri
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If in the trace config accounts are set and none of them matches, then the request is not
comment|// matched.
if|if
condition|(
operator|!
name|accountIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|accountIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|id
lambda|->
name|id
operator|.
name|equals
argument_list|(
name|requestInfo
operator|.
name|callingUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// The calling user is not logged in, hence it cannot match an account.
return|return
literal|false
return|;
block|}
block|}
comment|// If in the trace config project patterns are set and none of them matches, then the request
comment|// is not matched.
if|if
condition|(
operator|!
name|projectPatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|requestInfo
operator|.
name|project
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// The request is not for a project, hence it cannot match a project pattern.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|projectPatterns
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|matcher
argument_list|(
name|requestInfo
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// For any match criteria (request type, request URI pattern, account, project pattern) that
comment|// was specified in the trace config, at least one of the configured value matched the
comment|// request.
return|return
literal|true
return|;
block|}
annotation|@
name|AutoValue
operator|.
name|Builder
DECL|class|Builder
specifier|abstract
specifier|static
class|class
name|Builder
block|{
DECL|method|traceId (String traceId)
specifier|abstract
name|Builder
name|traceId
parameter_list|(
name|String
name|traceId
parameter_list|)
function_decl|;
DECL|method|requestTypes (ImmutableSet<String> requestTypes)
specifier|abstract
name|Builder
name|requestTypes
parameter_list|(
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|requestTypes
parameter_list|)
function_decl|;
DECL|method|requestUriPatterns (ImmutableSet<Pattern> requestUriPatterns)
specifier|abstract
name|Builder
name|requestUriPatterns
parameter_list|(
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|requestUriPatterns
parameter_list|)
function_decl|;
DECL|method|accountIds (ImmutableSet<Account.Id> accountIds)
specifier|abstract
name|Builder
name|accountIds
parameter_list|(
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|)
function_decl|;
DECL|method|projectPatterns (ImmutableSet<Pattern> projectPatterns)
specifier|abstract
name|Builder
name|projectPatterns
parameter_list|(
name|ImmutableSet
argument_list|<
name|Pattern
argument_list|>
name|projectPatterns
parameter_list|)
function_decl|;
DECL|method|build ()
specifier|abstract
name|TraceConfig
name|build
parameter_list|()
function_decl|;
block|}
block|}
block|}
end_class

end_unit

