begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.mail.send
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|FilenameComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|EmailException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|NotifyHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RobotComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CommentsUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ProjectWatches
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|MailUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|receive
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListNotAvailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListObjectTooLargeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|LabelVote
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|james
operator|.
name|mime4j
operator|.
name|dom
operator|.
name|field
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/** Send comments, after the author of them hit used Publish Comments in the UI. */
end_comment

begin_class
DECL|class|CommentSender
specifier|public
class|class
name|CommentSender
extends|extends
name|ReplyToChangeSender
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create (Project.NameKey project, Change.Id id)
name|CommentSender
name|create
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|)
function_decl|;
block|}
DECL|class|FileCommentGroup
specifier|private
class|class
name|FileCommentGroup
block|{
DECL|field|filename
specifier|public
name|String
name|filename
decl_stmt|;
DECL|field|patchSetId
specifier|public
name|int
name|patchSetId
decl_stmt|;
DECL|field|fileData
specifier|public
name|PatchFile
name|fileData
decl_stmt|;
DECL|field|comments
specifier|public
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** @return a web link to the given patch set and file. */
DECL|method|getLink ()
specifier|public
name|String
name|getLink
parameter_list|()
block|{
name|String
name|url
init|=
name|getGerritUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|url
argument_list|)
operator|.
name|append
argument_list|(
literal|"#/c/"
argument_list|)
operator|.
name|append
argument_list|(
name|change
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|patchSetId
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|KeyUtil
operator|.
name|encode
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @return A title for the group, i.e. "Commit Message", "Merge List", or "File [[filename]]".      */
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|filename
argument_list|)
condition|)
block|{
return|return
literal|"Commit Message"
return|;
block|}
elseif|else
if|if
condition|(
name|Patch
operator|.
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|filename
argument_list|)
condition|)
block|{
return|return
literal|"Merge List"
return|;
block|}
else|else
block|{
return|return
literal|"File "
operator|+
name|filename
return|;
block|}
block|}
block|}
DECL|field|inlineComments
specifier|private
name|List
argument_list|<
name|Comment
argument_list|>
name|inlineComments
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|patchSetComment
specifier|private
name|String
name|patchSetComment
decl_stmt|;
DECL|field|labels
specifier|private
name|List
argument_list|<
name|LabelVote
argument_list|>
name|labels
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|commentsUtil
specifier|private
specifier|final
name|CommentsUtil
name|commentsUtil
decl_stmt|;
DECL|field|incomingEmailEnabled
specifier|private
specifier|final
name|boolean
name|incomingEmailEnabled
decl_stmt|;
DECL|field|replyToAddress
specifier|private
specifier|final
name|String
name|replyToAddress
decl_stmt|;
annotation|@
name|Inject
DECL|method|CommentSender ( EmailArguments ea, CommentsUtil commentsUtil, @GerritServerConfig Config cfg, @Assisted Project.NameKey project, @Assisted Change.Id id)
specifier|public
name|CommentSender
parameter_list|(
name|EmailArguments
name|ea
parameter_list|,
name|CommentsUtil
name|commentsUtil
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
annotation|@
name|Assisted
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
annotation|@
name|Assisted
name|Change
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
name|super
argument_list|(
name|ea
argument_list|,
literal|"comment"
argument_list|,
name|newChangeData
argument_list|(
name|ea
argument_list|,
name|project
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|commentsUtil
operator|=
name|commentsUtil
expr_stmt|;
name|this
operator|.
name|incomingEmailEnabled
operator|=
name|cfg
operator|.
name|getEnum
argument_list|(
literal|"receiveemail"
argument_list|,
literal|null
argument_list|,
literal|"protocol"
argument_list|,
name|Protocol
operator|.
name|NONE
argument_list|)
operator|.
name|ordinal
argument_list|()
operator|>
name|Protocol
operator|.
name|NONE
operator|.
name|ordinal
argument_list|()
expr_stmt|;
name|this
operator|.
name|replyToAddress
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"sendemail"
argument_list|,
literal|null
argument_list|,
literal|"replyToAddress"
argument_list|)
expr_stmt|;
block|}
DECL|method|setComments (List<Comment> comments)
specifier|public
name|void
name|setComments
parameter_list|(
name|List
argument_list|<
name|Comment
argument_list|>
name|comments
parameter_list|)
throws|throws
name|OrmException
block|{
name|inlineComments
operator|=
name|comments
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|comments
control|)
block|{
if|if
condition|(
operator|!
name|Patch
operator|.
name|isMagic
argument_list|(
name|c
operator|.
name|key
operator|.
name|filename
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|c
operator|.
name|key
operator|.
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
name|changeData
operator|.
name|setCurrentFilePaths
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|paths
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setPatchSetComment (String comment)
specifier|public
name|void
name|setPatchSetComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|patchSetComment
operator|=
name|comment
expr_stmt|;
block|}
DECL|method|setLabels (List<LabelVote> labels)
specifier|public
name|void
name|setLabels
parameter_list|(
name|List
argument_list|<
name|LabelVote
argument_list|>
name|labels
parameter_list|)
block|{
name|this
operator|.
name|labels
operator|=
name|labels
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|EmailException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|notify
operator|.
name|compareTo
argument_list|(
name|NotifyHandling
operator|.
name|OWNER_REVIEWERS
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|ccAllApprovals
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|notify
operator|.
name|compareTo
argument_list|(
name|NotifyHandling
operator|.
name|ALL
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|bccStarredBy
argument_list|()
expr_stmt|;
name|includeWatchers
argument_list|(
name|NotifyType
operator|.
name|ALL_COMMENTS
argument_list|,
operator|!
name|change
operator|.
name|isWorkInProgress
argument_list|()
operator|&&
operator|!
name|change
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|removeUsersThatIgnoredTheChange
argument_list|()
expr_stmt|;
comment|// Add header that enables identifying comments on parsed email.
comment|// Grouping is currently done by timestamp.
name|setHeader
argument_list|(
name|MailHeader
operator|.
name|COMMENT_DATE
operator|.
name|fieldName
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|incomingEmailEnabled
condition|)
block|{
if|if
condition|(
name|replyToAddress
operator|==
literal|null
condition|)
block|{
comment|// Remove Reply-To and use outbound SMTP (default) instead.
name|removeHeader
argument_list|(
name|FieldName
operator|.
name|REPLY_TO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHeader
argument_list|(
name|FieldName
operator|.
name|REPLY_TO
argument_list|,
name|replyToAddress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|formatChange ()
specifier|public
name|void
name|formatChange
parameter_list|()
throws|throws
name|EmailException
block|{
name|appendText
argument_list|(
name|textTemplate
argument_list|(
literal|"Comment"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useHtml
argument_list|()
condition|)
block|{
name|appendHtml
argument_list|(
name|soyHtmlTemplate
argument_list|(
literal|"CommentHtml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|formatFooter ()
specifier|public
name|void
name|formatFooter
parameter_list|()
throws|throws
name|EmailException
block|{
name|appendText
argument_list|(
name|textTemplate
argument_list|(
literal|"CommentFooter"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useHtml
argument_list|()
condition|)
block|{
name|appendHtml
argument_list|(
name|soyHtmlTemplate
argument_list|(
literal|"CommentFooterHtml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return a list of FileCommentGroup objects representing the inline comments grouped by the    *     file.    */
DECL|method|getGroupedInlineComments (Repository repo)
specifier|private
name|List
argument_list|<
name|CommentSender
operator|.
name|FileCommentGroup
argument_list|>
name|getGroupedInlineComments
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
name|List
argument_list|<
name|CommentSender
operator|.
name|FileCommentGroup
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Get the patch list:
name|PatchList
name|patchList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repo
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|patchList
operator|=
name|getPatchList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListObjectTooLargeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Failed to get patch list: %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatchListNotAvailableException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to get patch list"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Loop over the comments and collect them into groups based on the file
comment|// location of the comment.
name|FileCommentGroup
name|currentGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Comment
name|c
range|:
name|inlineComments
control|)
block|{
comment|// If it's a new group:
if|if
condition|(
name|currentGroup
operator|==
literal|null
operator|||
operator|!
name|c
operator|.
name|key
operator|.
name|filename
operator|.
name|equals
argument_list|(
name|currentGroup
operator|.
name|filename
argument_list|)
operator|||
name|c
operator|.
name|key
operator|.
name|patchSetId
operator|!=
name|currentGroup
operator|.
name|patchSetId
condition|)
block|{
name|currentGroup
operator|=
operator|new
name|FileCommentGroup
argument_list|()
expr_stmt|;
name|currentGroup
operator|.
name|filename
operator|=
name|c
operator|.
name|key
operator|.
name|filename
expr_stmt|;
name|currentGroup
operator|.
name|patchSetId
operator|=
name|c
operator|.
name|key
operator|.
name|patchSetId
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|currentGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|patchList
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|currentGroup
operator|.
name|fileData
operator|=
operator|new
name|PatchFile
argument_list|(
name|repo
argument_list|,
name|patchList
argument_list|,
name|c
operator|.
name|key
operator|.
name|filename
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Cannot load %s from %s in %s"
argument_list|,
name|c
operator|.
name|key
operator|.
name|filename
argument_list|,
name|patchList
operator|.
name|getNewId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|projectState
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|currentGroup
operator|.
name|fileData
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentGroup
operator|.
name|fileData
operator|!=
literal|null
condition|)
block|{
name|currentGroup
operator|.
name|comments
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|groups
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|g
lambda|->
name|g
operator|.
name|filename
argument_list|,
name|FilenameComparator
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groups
return|;
block|}
comment|/** Get the set of accounts whose comments have been replied to in this email. */
DECL|method|getReplyAccounts ()
specifier|private
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|getReplyAccounts
parameter_list|()
block|{
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|replyAccounts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Track visited parent UUIDs to avoid cycles.
name|HashSet
argument_list|<
name|String
argument_list|>
name|visitedUuids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|comment
range|:
name|inlineComments
control|)
block|{
name|visitedUuids
operator|.
name|add
argument_list|(
name|comment
operator|.
name|key
operator|.
name|uuid
argument_list|)
expr_stmt|;
comment|// Traverse the parent relation to the top of the comment thread.
name|Comment
name|current
init|=
name|comment
decl_stmt|;
while|while
condition|(
name|current
operator|.
name|parentUuid
operator|!=
literal|null
operator|&&
operator|!
name|visitedUuids
operator|.
name|contains
argument_list|(
name|current
operator|.
name|parentUuid
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|Comment
argument_list|>
name|optParent
init|=
name|getParent
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|optParent
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// There is a parent UUID, but it cannot be loaded, break from the comment thread.
break|break;
block|}
name|Comment
name|parent
init|=
name|optParent
operator|.
name|get
argument_list|()
decl_stmt|;
name|replyAccounts
operator|.
name|add
argument_list|(
name|parent
operator|.
name|author
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|visitedUuids
operator|.
name|add
argument_list|(
name|current
operator|.
name|parentUuid
argument_list|)
expr_stmt|;
name|current
operator|=
name|parent
expr_stmt|;
block|}
block|}
return|return
name|replyAccounts
return|;
block|}
DECL|method|getCommentLinePrefix (Comment comment)
specifier|private
name|String
name|getCommentLinePrefix
parameter_list|(
name|Comment
name|comment
parameter_list|)
block|{
name|int
name|lineNbr
init|=
name|comment
operator|.
name|range
operator|==
literal|null
condition|?
name|comment
operator|.
name|lineNbr
else|:
name|comment
operator|.
name|range
operator|.
name|startLine
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"PS"
argument_list|)
operator|.
name|append
argument_list|(
name|comment
operator|.
name|key
operator|.
name|patchSetId
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineNbr
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Line "
argument_list|)
operator|.
name|append
argument_list|(
name|lineNbr
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return the lines of file content in fileData that are encompassed by range on the given side.    */
DECL|method|getLinesByRange (Comment.Range range, PatchFile fileData, short side)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getLinesByRange
parameter_list|(
name|Comment
operator|.
name|Range
name|range
parameter_list|,
name|PatchFile
name|fileData
parameter_list|,
name|short
name|side
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
name|range
operator|.
name|startLine
init|;
name|n
operator|<=
name|range
operator|.
name|endLine
condition|;
name|n
operator|++
control|)
block|{
name|String
name|s
init|=
name|getLine
argument_list|(
name|fileData
argument_list|,
name|side
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
name|range
operator|.
name|startLine
operator|&&
name|n
operator|==
name|range
operator|.
name|endLine
operator|&&
name|range
operator|.
name|startChar
operator|<
name|range
operator|.
name|endChar
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|startChar
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|endChar
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|range
operator|.
name|startLine
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|startChar
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
name|range
operator|.
name|endLine
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|endChar
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
comment|/**    * Get the parent comment of a given comment.    *    * @param child the comment with a potential parent comment.    * @return an optional comment that will be present if the given comment has a parent, and is    *     empty if it does not.    */
DECL|method|getParent (Comment child)
specifier|private
name|Optional
argument_list|<
name|Comment
argument_list|>
name|getParent
parameter_list|(
name|Comment
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|parentUuid
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|Comment
operator|.
name|Key
name|key
init|=
operator|new
name|Comment
operator|.
name|Key
argument_list|(
name|child
operator|.
name|parentUuid
argument_list|,
name|child
operator|.
name|key
operator|.
name|filename
argument_list|,
name|child
operator|.
name|key
operator|.
name|patchSetId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|commentsUtil
operator|.
name|getPublished
argument_list|(
name|args
operator|.
name|db
operator|.
name|get
argument_list|()
argument_list|,
name|changeData
operator|.
name|notes
argument_list|()
argument_list|,
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Could not find the parent of this comment: %s"
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
comment|/**    * Retrieve the file lines referred to by a comment.    *    * @param comment The comment that refers to some file contents. The comment may be a line comment    *     or a ranged comment.    * @param fileData The file on which the comment appears.    * @return file contents referred to by the comment. If the comment is a line comment, the result    *     will be a list of one string. Otherwise it will be a list of one or more strings.    */
DECL|method|getLinesOfComment (Comment comment, PatchFile fileData)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getLinesOfComment
parameter_list|(
name|Comment
name|comment
parameter_list|,
name|PatchFile
name|fileData
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|comment
operator|.
name|lineNbr
operator|==
literal|0
condition|)
block|{
comment|// file level comment has no line
return|return
name|lines
return|;
block|}
if|if
condition|(
name|comment
operator|.
name|range
operator|==
literal|null
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|getLine
argument_list|(
name|fileData
argument_list|,
name|comment
operator|.
name|side
argument_list|,
name|comment
operator|.
name|lineNbr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|addAll
argument_list|(
name|getLinesByRange
argument_list|(
name|comment
operator|.
name|range
argument_list|,
name|fileData
argument_list|,
name|comment
operator|.
name|side
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
comment|/**    * @return a shortened version of the given comment's message. Will be shortened to 100 characters    *     or the first line, or following the last period within the first 100 characters, whichever    *     is shorter. If the message is shortened, an ellipsis is appended.    */
DECL|method|getShortenedCommentMessage (String message)
specifier|protected
specifier|static
name|String
name|getShortenedCommentMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|int
name|threshold
init|=
literal|100
decl_stmt|;
name|String
name|fullMessage
init|=
name|message
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
name|fullMessage
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|length
argument_list|()
operator|>
name|threshold
condition|)
block|{
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
block|}
name|int
name|lf
init|=
name|msg
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
name|int
name|period
init|=
name|msg
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lf
operator|>
literal|0
condition|)
block|{
comment|// Truncate if a line feed appears within the threshold.
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|period
operator|>
literal|0
condition|)
block|{
comment|// Otherwise truncate if there is a period within the threshold.
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|period
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Append an ellipsis if the message has been truncated.
if|if
condition|(
operator|!
name|msg
operator|.
name|equals
argument_list|(
name|fullMessage
argument_list|)
condition|)
block|{
name|msg
operator|+=
literal|" [â¦]"
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
DECL|method|getShortenedCommentMessage (Comment comment)
specifier|protected
specifier|static
name|String
name|getShortenedCommentMessage
parameter_list|(
name|Comment
name|comment
parameter_list|)
block|{
return|return
name|getShortenedCommentMessage
argument_list|(
name|comment
operator|.
name|message
argument_list|)
return|;
block|}
comment|/**    * @return grouped inline comment data mapped to data structures that are suitable for passing    *     into Soy.    */
DECL|method|getCommentGroupsTemplateData (Repository repo)
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getCommentGroupsTemplateData
parameter_list|(
name|Repository
name|repo
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|commentGroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CommentSender
operator|.
name|FileCommentGroup
name|group
range|:
name|getGroupedInlineComments
argument_list|(
name|repo
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|groupData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|groupData
operator|.
name|put
argument_list|(
literal|"link"
argument_list|,
name|group
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
name|groupData
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|group
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|groupData
operator|.
name|put
argument_list|(
literal|"patchSetId"
argument_list|,
name|group
operator|.
name|patchSetId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|commentsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Comment
name|comment
range|:
name|group
operator|.
name|comments
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|commentData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"lines"
argument_list|,
name|getLinesOfComment
argument_list|(
name|comment
argument_list|,
name|group
operator|.
name|fileData
argument_list|)
argument_list|)
expr_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|comment
operator|.
name|message
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|blocks
init|=
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|comment
operator|.
name|message
argument_list|)
decl_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"messageBlocks"
argument_list|,
name|commentBlocksToSoyData
argument_list|(
name|blocks
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the prefix.
name|String
name|prefix
init|=
name|getCommentLinePrefix
argument_list|(
name|comment
argument_list|)
decl_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"linePrefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"linePrefixEmpty"
argument_list|,
name|Strings
operator|.
name|padStart
argument_list|(
literal|": "
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
argument_list|,
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set line numbers.
name|int
name|startLine
decl_stmt|;
if|if
condition|(
name|comment
operator|.
name|range
operator|==
literal|null
condition|)
block|{
name|startLine
operator|=
name|comment
operator|.
name|lineNbr
expr_stmt|;
block|}
else|else
block|{
name|startLine
operator|=
name|comment
operator|.
name|range
operator|.
name|startLine
expr_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"endLine"
argument_list|,
name|comment
operator|.
name|range
operator|.
name|endLine
argument_list|)
expr_stmt|;
block|}
name|commentData
operator|.
name|put
argument_list|(
literal|"startLine"
argument_list|,
name|startLine
argument_list|)
expr_stmt|;
comment|// Set the comment link.
if|if
condition|(
name|comment
operator|.
name|lineNbr
operator|==
literal|0
condition|)
block|{
name|commentData
operator|.
name|put
argument_list|(
literal|"link"
argument_list|,
name|group
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comment
operator|.
name|side
operator|==
literal|0
condition|)
block|{
name|commentData
operator|.
name|put
argument_list|(
literal|"link"
argument_list|,
name|group
operator|.
name|getLink
argument_list|()
operator|+
literal|"@a"
operator|+
name|startLine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commentData
operator|.
name|put
argument_list|(
literal|"link"
argument_list|,
name|group
operator|.
name|getLink
argument_list|()
operator|+
literal|'@'
operator|+
name|startLine
argument_list|)
expr_stmt|;
block|}
comment|// Set robot comment data.
if|if
condition|(
name|comment
operator|instanceof
name|RobotComment
condition|)
block|{
name|RobotComment
name|robotComment
init|=
operator|(
name|RobotComment
operator|)
name|comment
decl_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"isRobotComment"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"robotId"
argument_list|,
name|robotComment
operator|.
name|robotId
argument_list|)
expr_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"robotRunId"
argument_list|,
name|robotComment
operator|.
name|robotRunId
argument_list|)
expr_stmt|;
name|commentData
operator|.
name|put
argument_list|(
literal|"robotUrl"
argument_list|,
name|robotComment
operator|.
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commentData
operator|.
name|put
argument_list|(
literal|"isRobotComment"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// If the comment has a quote, don't bother loading the parent message.
if|if
condition|(
operator|!
name|hasQuote
argument_list|(
name|blocks
argument_list|)
condition|)
block|{
comment|// Set parent comment info.
name|Optional
argument_list|<
name|Comment
argument_list|>
name|parent
init|=
name|getParent
argument_list|(
name|comment
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|commentData
operator|.
name|put
argument_list|(
literal|"parentMessage"
argument_list|,
name|getShortenedCommentMessage
argument_list|(
name|parent
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|commentsList
operator|.
name|add
argument_list|(
name|commentData
argument_list|)
expr_stmt|;
block|}
name|groupData
operator|.
name|put
argument_list|(
literal|"comments"
argument_list|,
name|commentsList
argument_list|)
expr_stmt|;
name|commentGroups
operator|.
name|add
argument_list|(
name|groupData
argument_list|)
expr_stmt|;
block|}
return|return
name|commentGroups
return|;
block|}
DECL|method|commentBlocksToSoyData (List<CommentFormatter.Block> blocks)
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|commentBlocksToSoyData
parameter_list|(
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|blocks
parameter_list|)
block|{
return|return
name|blocks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|b
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|b
operator|.
name|type
condition|)
block|{
case|case
name|PARAGRAPH
case|:
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"paragraph"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
name|b
operator|.
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRE_FORMATTED
case|:
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"pre"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
name|b
operator|.
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTE
case|:
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"quote"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quotedBlocks"
argument_list|,
name|commentBlocksToSoyData
argument_list|(
name|b
operator|.
name|quotedBlocks
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"items"
argument_list|,
name|b
operator|.
name|items
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|map
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|hasQuote (List<CommentFormatter.Block> blocks)
specifier|private
name|boolean
name|hasQuote
parameter_list|(
name|List
argument_list|<
name|CommentFormatter
operator|.
name|Block
argument_list|>
name|blocks
parameter_list|)
block|{
for|for
control|(
name|CommentFormatter
operator|.
name|Block
name|block
range|:
name|blocks
control|)
block|{
if|if
condition|(
name|block
operator|.
name|type
operator|==
name|CommentFormatter
operator|.
name|BlockType
operator|.
name|QUOTE
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getRepository ()
specifier|private
name|Repository
name|getRepository
parameter_list|()
block|{
try|try
block|{
return|return
name|args
operator|.
name|server
operator|.
name|openRepository
argument_list|(
name|projectState
operator|.
name|getNameKey
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupSoyContext ()
specifier|protected
name|void
name|setupSoyContext
parameter_list|()
block|{
name|super
operator|.
name|setupSoyContext
argument_list|()
expr_stmt|;
name|boolean
name|hasComments
init|=
literal|false
decl_stmt|;
try|try
init|(
name|Repository
name|repo
init|=
name|getRepository
argument_list|()
init|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|files
init|=
name|getCommentGroupsTemplateData
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"commentFiles"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|hasComments
operator|=
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
name|soyContext
operator|.
name|put
argument_list|(
literal|"patchSetCommentBlocks"
argument_list|,
name|commentBlocksToSoyData
argument_list|(
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|patchSetComment
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"labels"
argument_list|,
name|getLabelVoteSoyData
argument_list|(
name|labels
argument_list|)
argument_list|)
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"commentCount"
argument_list|,
name|inlineComments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"commentTimestamp"
argument_list|,
name|getCommentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|soyContext
operator|.
name|put
argument_list|(
literal|"coverLetterBlocks"
argument_list|,
name|commentBlocksToSoyData
argument_list|(
name|CommentFormatter
operator|.
name|parse
argument_list|(
name|getCoverLetter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|footers
operator|.
name|add
argument_list|(
name|MailHeader
operator|.
name|COMMENT_DATE
operator|.
name|withDelimiter
argument_list|()
operator|+
name|getCommentTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|footers
operator|.
name|add
argument_list|(
name|MailHeader
operator|.
name|HAS_COMMENTS
operator|.
name|withDelimiter
argument_list|()
operator|+
operator|(
name|hasComments
condition|?
literal|"Yes"
else|:
literal|"No"
operator|)
argument_list|)
expr_stmt|;
name|footers
operator|.
name|add
argument_list|(
name|MailHeader
operator|.
name|HAS_LABELS
operator|.
name|withDelimiter
argument_list|()
operator|+
operator|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"No"
else|:
literal|"Yes"
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Account
operator|.
name|Id
name|account
range|:
name|getReplyAccounts
argument_list|()
control|)
block|{
name|footers
operator|.
name|add
argument_list|(
name|MailHeader
operator|.
name|COMMENT_IN_REPLY_TO
operator|.
name|withDelimiter
argument_list|()
operator|+
name|getNameEmailFor
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLine (PatchFile fileInfo, short side, int lineNbr)
specifier|private
name|String
name|getLine
parameter_list|(
name|PatchFile
name|fileInfo
parameter_list|,
name|short
name|side
parameter_list|,
name|int
name|lineNbr
parameter_list|)
block|{
try|try
block|{
return|return
name|fileInfo
operator|.
name|getLine
argument_list|(
name|side
argument_list|,
name|lineNbr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
comment|// Default to the empty string if the file cannot be safely read.
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to read file on side %d"
argument_list|,
name|side
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|err
parameter_list|)
block|{
comment|// Default to the empty string if the given line number does not appear
comment|// in the file.
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Failed to get line number of file on side %d"
argument_list|,
name|side
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|err
parameter_list|)
block|{
comment|// Default to the empty string if the side cannot be found.
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Side %d of file didn't exist"
argument_list|,
name|side
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
DECL|method|getLabelVoteSoyData (List<LabelVote> votes)
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getLabelVoteSoyData
parameter_list|(
name|List
argument_list|<
name|LabelVote
argument_list|>
name|votes
parameter_list|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LabelVote
name|vote
range|:
name|votes
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"label"
argument_list|,
name|vote
operator|.
name|label
argument_list|()
argument_list|)
expr_stmt|;
comment|// Soy needs the short to be cast as an int for it to get converted to the
comment|// correct tamplate type.
name|data
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
operator|(
name|int
operator|)
name|vote
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getCommentTimestamp ()
specifier|private
name|String
name|getCommentTimestamp
parameter_list|()
block|{
comment|// Grouping is currently done by timestamp.
return|return
name|MailUtil
operator|.
name|rfcDateformatter
operator|.
name|format
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|timestamp
operator|.
name|toInstant
argument_list|()
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|supportsHtml ()
specifier|protected
name|boolean
name|supportsHtml
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

