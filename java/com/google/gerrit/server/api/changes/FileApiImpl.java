begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.api.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|api
operator|.
name|changes
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|api
operator|.
name|ApiUtil
operator|.
name|asRestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|FileApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|BlameInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|GetBlame
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|GetContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|GetDiff
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|Reviewed
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|FileApiImpl
class|class
name|FileApiImpl
implements|implements
name|FileApi
block|{
DECL|interface|Factory
interface|interface
name|Factory
block|{
DECL|method|create (FileResource r)
name|FileApiImpl
name|create
parameter_list|(
name|FileResource
name|r
parameter_list|)
function_decl|;
block|}
DECL|field|getContent
specifier|private
specifier|final
name|GetContent
name|getContent
decl_stmt|;
DECL|field|getBlame
specifier|private
specifier|final
name|Provider
argument_list|<
name|GetBlame
argument_list|>
name|getBlame
decl_stmt|;
DECL|field|getDiff
specifier|private
specifier|final
name|GetDiff
name|getDiff
decl_stmt|;
DECL|field|putReviewed
specifier|private
specifier|final
name|Reviewed
operator|.
name|PutReviewed
name|putReviewed
decl_stmt|;
DECL|field|deleteReviewed
specifier|private
specifier|final
name|Reviewed
operator|.
name|DeleteReviewed
name|deleteReviewed
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|FileResource
name|file
decl_stmt|;
annotation|@
name|Inject
DECL|method|FileApiImpl ( GetContent getContent, Provider<GetBlame> getBlame, GetDiff getDiff, Reviewed.PutReviewed putReviewed, Reviewed.DeleteReviewed deleteReviewed, @Assisted FileResource file)
name|FileApiImpl
parameter_list|(
name|GetContent
name|getContent
parameter_list|,
name|Provider
argument_list|<
name|GetBlame
argument_list|>
name|getBlame
parameter_list|,
name|GetDiff
name|getDiff
parameter_list|,
name|Reviewed
operator|.
name|PutReviewed
name|putReviewed
parameter_list|,
name|Reviewed
operator|.
name|DeleteReviewed
name|deleteReviewed
parameter_list|,
annotation|@
name|Assisted
name|FileResource
name|file
parameter_list|)
block|{
name|this
operator|.
name|getContent
operator|=
name|getContent
expr_stmt|;
name|this
operator|.
name|getBlame
operator|=
name|getBlame
expr_stmt|;
name|this
operator|.
name|getDiff
operator|=
name|getDiff
expr_stmt|;
name|this
operator|.
name|putReviewed
operator|=
name|putReviewed
expr_stmt|;
name|this
operator|.
name|deleteReviewed
operator|=
name|deleteReviewed
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|content ()
specifier|public
name|BinaryResult
name|content
parameter_list|()
throws|throws
name|RestApiException
block|{
try|try
block|{
return|return
name|getContent
operator|.
name|apply
argument_list|(
name|file
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
literal|"Cannot retrieve file content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|diff ()
specifier|public
name|DiffInfo
name|diff
parameter_list|()
throws|throws
name|RestApiException
block|{
try|try
block|{
return|return
name|getDiff
operator|.
name|apply
argument_list|(
name|file
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
literal|"Cannot retrieve diff"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|diff (String base)
specifier|public
name|DiffInfo
name|diff
parameter_list|(
name|String
name|base
parameter_list|)
throws|throws
name|RestApiException
block|{
try|try
block|{
return|return
name|getDiff
operator|.
name|setBase
argument_list|(
name|base
argument_list|)
operator|.
name|apply
argument_list|(
name|file
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
literal|"Cannot retrieve diff"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|diff (int parent)
specifier|public
name|DiffInfo
name|diff
parameter_list|(
name|int
name|parent
parameter_list|)
throws|throws
name|RestApiException
block|{
try|try
block|{
return|return
name|getDiff
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
operator|.
name|apply
argument_list|(
name|file
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
literal|"Cannot retrieve diff"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|diffRequest ()
specifier|public
name|DiffRequest
name|diffRequest
parameter_list|()
block|{
return|return
operator|new
name|DiffRequest
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiffInfo
name|get
parameter_list|()
throws|throws
name|RestApiException
block|{
return|return
name|FileApiImpl
operator|.
name|this
operator|.
name|get
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|setReviewed (boolean reviewed)
specifier|public
name|void
name|setReviewed
parameter_list|(
name|boolean
name|reviewed
parameter_list|)
throws|throws
name|RestApiException
block|{
try|try
block|{
if|if
condition|(
name|reviewed
condition|)
block|{
name|putReviewed
operator|.
name|apply
argument_list|(
name|file
argument_list|,
operator|new
name|Input
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deleteReviewed
operator|.
name|apply
argument_list|(
name|file
argument_list|,
operator|new
name|Input
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot set %sreviewed"
argument_list|,
name|reviewed
condition|?
literal|""
else|:
literal|"un"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|get (DiffRequest r)
specifier|private
name|DiffInfo
name|get
parameter_list|(
name|DiffRequest
name|r
parameter_list|)
throws|throws
name|RestApiException
block|{
if|if
condition|(
name|r
operator|.
name|getBase
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getDiff
operator|.
name|setBase
argument_list|(
name|r
operator|.
name|getBase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getDiff
operator|.
name|setContext
argument_list|(
name|r
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getIntraline
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getDiff
operator|.
name|setIntraline
argument_list|(
name|r
operator|.
name|getIntraline
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getWhitespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getDiff
operator|.
name|setWhitespace
argument_list|(
name|r
operator|.
name|getWhitespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|getParent
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|getDiff
operator|::
name|setParent
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getDiff
operator|.
name|apply
argument_list|(
name|file
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
literal|"Cannot retrieve diff"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|blameRequest ()
specifier|public
name|BlameRequest
name|blameRequest
parameter_list|()
throws|throws
name|RestApiException
block|{
return|return
operator|new
name|BlameRequest
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BlameInfo
argument_list|>
name|get
parameter_list|()
throws|throws
name|RestApiException
block|{
try|try
block|{
return|return
name|getBlame
operator|.
name|get
argument_list|()
operator|.
name|setBase
argument_list|(
name|isForBase
argument_list|()
argument_list|)
operator|.
name|apply
argument_list|(
name|file
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|asRestApiException
argument_list|(
literal|"Cannot retrieve blame"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

