begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
DECL|class|ConfigAnnotationParser
class|class
name|ConfigAnnotationParser
block|{
DECL|field|splitter
specifier|private
specifier|static
name|Splitter
name|splitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|trimResults
argument_list|()
decl_stmt|;
DECL|method|parse (Config base, GerritConfigs annotation)
specifier|static
name|Config
name|parse
parameter_list|(
name|Config
name|base
parameter_list|,
name|GerritConfigs
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|(
name|base
argument_list|)
decl_stmt|;
for|for
control|(
name|GerritConfig
name|c
range|:
name|annotation
operator|.
name|value
argument_list|()
control|)
block|{
name|parseAnnotation
argument_list|(
name|cfg
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
DECL|method|parse (Config base, GerritConfig annotation)
specifier|static
name|Config
name|parse
parameter_list|(
name|Config
name|base
parameter_list|,
name|GerritConfig
name|annotation
parameter_list|)
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|parseAnnotation
argument_list|(
name|cfg
argument_list|,
name|annotation
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|class|GlobalPluginConfigToGerritConfig
specifier|static
class|class
name|GlobalPluginConfigToGerritConfig
implements|implements
name|GerritConfig
block|{
DECL|field|delegate
specifier|private
specifier|final
name|GlobalPluginConfig
name|delegate
decl_stmt|;
DECL|method|GlobalPluginConfigToGerritConfig (GlobalPluginConfig delegate)
name|GlobalPluginConfigToGerritConfig
parameter_list|(
name|GlobalPluginConfig
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|annotationType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|annotationType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|String
index|[]
name|values
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|values
argument_list|()
return|;
block|}
block|}
DECL|method|parse (GlobalPluginConfig annotation)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|parse
parameter_list|(
name|GlobalPluginConfig
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|parseAnnotation
argument_list|(
name|cfg
argument_list|,
operator|new
name|GlobalPluginConfigToGerritConfig
argument_list|(
name|annotation
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|annotation
operator|.
name|pluginName
argument_list|()
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|parse (GlobalPluginConfigs annotation)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|parse
parameter_list|(
name|GlobalPluginConfigs
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|==
literal|null
operator|||
name|annotation
operator|.
name|value
argument_list|()
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GlobalPluginConfig
name|c
range|:
name|annotation
operator|.
name|value
argument_list|()
control|)
block|{
name|String
name|pluginName
init|=
name|c
operator|.
name|pluginName
argument_list|()
decl_stmt|;
name|Config
name|config
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|containsKey
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
name|config
operator|=
name|result
operator|.
name|get
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|Config
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|pluginName
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|parseAnnotation
argument_list|(
name|config
argument_list|,
operator|new
name|GlobalPluginConfigToGerritConfig
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|parseAnnotation (Config cfg, GerritConfig c)
specifier|private
specifier|static
name|void
name|parseAnnotation
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|GerritConfig
name|c
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|l
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|splitter
operator|.
name|split
argument_list|(
name|c
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|c
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|values
init|=
name|c
operator|.
name|values
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setStringList
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|c
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|c
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|setStringList
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|c
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"GerritConfig.name must be of the format section.subsection.name or section.name"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

