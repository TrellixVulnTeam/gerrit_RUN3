begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance.testsuite.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|US_ASCII
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|SshEnabled
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|VersionedAuthorizedKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshKeyCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|TestSshKeys
specifier|public
class|class
name|TestSshKeys
block|{
DECL|field|sshKeyPairs
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|KeyPair
argument_list|>
name|sshKeyPairs
decl_stmt|;
DECL|field|authorizedKeys
specifier|private
specifier|final
name|VersionedAuthorizedKeys
operator|.
name|Accessor
name|authorizedKeys
decl_stmt|;
DECL|field|sshKeyCache
specifier|private
specifier|final
name|SshKeyCache
name|sshKeyCache
decl_stmt|;
DECL|field|sshEnabled
specifier|private
specifier|final
name|boolean
name|sshEnabled
decl_stmt|;
annotation|@
name|Inject
DECL|method|TestSshKeys ( VersionedAuthorizedKeys.Accessor authorizedKeys, SshKeyCache sshKeyCache, @SshEnabled boolean sshEnabled)
name|TestSshKeys
parameter_list|(
name|VersionedAuthorizedKeys
operator|.
name|Accessor
name|authorizedKeys
parameter_list|,
name|SshKeyCache
name|sshKeyCache
parameter_list|,
annotation|@
name|SshEnabled
name|boolean
name|sshEnabled
parameter_list|)
block|{
name|this
operator|.
name|authorizedKeys
operator|=
name|authorizedKeys
expr_stmt|;
name|this
operator|.
name|sshKeyCache
operator|=
name|sshKeyCache
expr_stmt|;
name|this
operator|.
name|sshEnabled
operator|=
name|sshEnabled
expr_stmt|;
name|this
operator|.
name|sshKeyPairs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// TODO(ekempin): Remove this method when com.google.gerrit.acceptance.TestAccount is gone
DECL|method|getKeyPair (com.google.gerrit.acceptance.TestAccount account)
specifier|public
name|KeyPair
name|getKeyPair
parameter_list|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
name|checkState
argument_list|(
name|sshEnabled
argument_list|,
literal|"Requested SSH key pair, but SSH is disabled"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|account
operator|.
name|username
operator|!=
literal|null
argument_list|,
literal|"Requested SSH key pair for account %s, but username is not set"
argument_list|,
name|account
operator|.
name|id
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|account
operator|.
name|username
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|sshKeyPairs
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPair
operator|==
literal|null
condition|)
block|{
name|keyPair
operator|=
name|createKeyPair
argument_list|(
name|account
operator|.
name|id
argument_list|,
name|username
argument_list|,
name|account
operator|.
name|email
argument_list|)
expr_stmt|;
name|sshKeyPairs
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|keyPair
argument_list|)
expr_stmt|;
block|}
return|return
name|keyPair
return|;
block|}
DECL|method|getKeyPair (TestAccount account)
specifier|public
name|KeyPair
name|getKeyPair
parameter_list|(
name|TestAccount
name|account
parameter_list|)
throws|throws
name|Exception
block|{
name|checkState
argument_list|(
name|sshEnabled
argument_list|,
literal|"Requested SSH key pair, but SSH is disabled"
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|account
operator|.
name|username
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|,
literal|"Requested SSH key pair for account %s, but username is not set"
argument_list|,
name|account
operator|.
name|accountId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|account
operator|.
name|username
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|KeyPair
name|keyPair
init|=
name|sshKeyPairs
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPair
operator|==
literal|null
condition|)
block|{
name|keyPair
operator|=
name|createKeyPair
argument_list|(
name|account
operator|.
name|accountId
argument_list|()
argument_list|,
name|username
argument_list|,
name|account
operator|.
name|preferredEmail
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sshKeyPairs
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|keyPair
argument_list|)
expr_stmt|;
block|}
return|return
name|keyPair
return|;
block|}
DECL|method|createKeyPair (Account.Id accountId, String username, @Nullable String email)
specifier|private
name|KeyPair
name|createKeyPair
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|,
name|String
name|username
parameter_list|,
annotation|@
name|Nullable
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyPair
name|keyPair
init|=
name|genSshKey
argument_list|()
decl_stmt|;
name|authorizedKeys
operator|.
name|addKey
argument_list|(
name|accountId
argument_list|,
name|publicKey
argument_list|(
name|keyPair
argument_list|,
name|email
argument_list|)
argument_list|)
expr_stmt|;
name|sshKeyCache
operator|.
name|evict
argument_list|(
name|username
argument_list|)
expr_stmt|;
return|return
name|keyPair
return|;
block|}
DECL|method|genSshKey ()
specifier|public
specifier|static
name|KeyPair
name|genSshKey
parameter_list|()
throws|throws
name|JSchException
block|{
name|JSch
name|jsch
init|=
operator|new
name|JSch
argument_list|()
decl_stmt|;
return|return
name|KeyPair
operator|.
name|genKeyPair
argument_list|(
name|jsch
argument_list|,
name|KeyPair
operator|.
name|ECDSA
argument_list|,
literal|256
argument_list|)
return|;
block|}
DECL|method|publicKey (KeyPair sshKey, @Nullable String comment)
specifier|public
specifier|static
name|String
name|publicKey
parameter_list|(
name|KeyPair
name|sshKey
parameter_list|,
annotation|@
name|Nullable
name|String
name|comment
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|sshKey
operator|.
name|writePublicKey
argument_list|(
name|out
argument_list|,
name|comment
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|(
name|US_ASCII
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|privateKey (KeyPair keyPair)
specifier|public
specifier|static
name|byte
index|[]
name|privateKey
parameter_list|(
name|KeyPair
name|keyPair
parameter_list|)
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|keyPair
operator|.
name|writePrivateKey
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

