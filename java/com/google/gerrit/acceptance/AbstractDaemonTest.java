begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|OptionalSubject
operator|.
name|optionals
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertWithMessage
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assert_
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth8
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|TruthJUnit
operator|.
name|assume
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmittedTogetherOption
operator|.
name|NON_VISIBLE_CHANGES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|COMMIT_MSG
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|MERGE_LIST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
operator|.
name|REGISTERED_USERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|category
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
operator|.
name|value
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|HEAD
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|rholder
operator|.
name|retry
operator|.
name|BlockStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Jimfs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Chars
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|AcceptanceTestRequestScope
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|TestSshKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|ProjectOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|project
operator|.
name|TestProjectUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|request
operator|.
name|RequestScopeOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccessSection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDescription
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PermissionRule
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RevisionApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|SubmittedTogetherInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|BranchInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ProjectInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ProjectWatchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|DiffInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|project
operator|.
name|ProjectIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|project
operator|.
name|ProjectIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|mail
operator|.
name|EmailHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BooleanProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|BranchNameKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritPersonIdent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PatchSetUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|PluginUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Accounts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|BatchAbandon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeFinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|FileContentUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|RevisionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllProjectsName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|CanonicalWebUrl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|PluginConfigFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|meta
operator|.
name|MetaDataUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|InternalGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|SystemGroupBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|change
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|AbstractChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNoteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginGuiceEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|TestServerPlugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|testing
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|InternalChangeQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|Revisions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|ConfigSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|SshMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|api
operator|.
name|Git
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|RepositoryNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|internal
operator|.
name|storage
operator|.
name|dfs
operator|.
name|InMemoryRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|FetchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|TransportBundleStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|transport
operator|.
name|URIish
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ConfigSuite
operator|.
name|class
argument_list|)
DECL|class|AbstractDaemonTest
specifier|public
specifier|abstract
class|class
name|AbstractDaemonTest
block|{
DECL|field|commonServer
specifier|private
specifier|static
name|GerritServer
name|commonServer
decl_stmt|;
DECL|field|firstTest
specifier|private
specifier|static
name|Description
name|firstTest
decl_stmt|;
DECL|field|temporaryFolder
annotation|@
name|ClassRule
specifier|public
specifier|static
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|baseConfig
annotation|@
name|ConfigSuite
operator|.
name|Parameter
specifier|public
name|Config
name|baseConfig
decl_stmt|;
DECL|field|configName
annotation|@
name|ConfigSuite
operator|.
name|Name
specifier|private
name|String
name|configName
decl_stmt|;
annotation|@
name|Rule
DECL|field|testRunner
specifier|public
name|TestRule
name|testRunner
init|=
operator|new
name|TestRule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|firstTest
operator|==
literal|null
condition|)
block|{
name|firstTest
operator|=
name|description
expr_stmt|;
block|}
name|beforeTest
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|ProjectResetter
operator|.
name|Config
name|input
init|=
name|requireNonNull
argument_list|(
name|resetProjects
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|ProjectResetter
name|resetter
init|=
name|projectResetter
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|(
name|input
argument_list|)
init|)
block|{
name|AbstractDaemonTest
operator|.
name|this
operator|.
name|resetter
operator|=
name|resetter
expr_stmt|;
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|AbstractDaemonTest
operator|.
name|this
operator|.
name|resetter
operator|=
literal|null
expr_stmt|;
name|afterTest
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
DECL|field|canonicalWebUrl
annotation|@
name|Inject
annotation|@
name|CanonicalWebUrl
specifier|protected
name|Provider
argument_list|<
name|String
argument_list|>
name|canonicalWebUrl
decl_stmt|;
DECL|field|serverIdent
annotation|@
name|Inject
annotation|@
name|GerritPersonIdent
specifier|protected
name|Provider
argument_list|<
name|PersonIdent
argument_list|>
name|serverIdent
decl_stmt|;
DECL|field|cfg
annotation|@
name|Inject
annotation|@
name|GerritServerConfig
specifier|protected
name|Config
name|cfg
decl_stmt|;
DECL|field|atrScope
annotation|@
name|Inject
specifier|protected
name|AcceptanceTestRequestScope
name|atrScope
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Inject
specifier|protected
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|accountCreator
annotation|@
name|Inject
specifier|protected
name|AccountCreator
name|accountCreator
decl_stmt|;
DECL|field|accounts
annotation|@
name|Inject
specifier|protected
name|Accounts
name|accounts
decl_stmt|;
DECL|field|allProjects
annotation|@
name|Inject
specifier|protected
name|AllProjectsName
name|allProjects
decl_stmt|;
DECL|field|allUsers
annotation|@
name|Inject
specifier|protected
name|AllUsersName
name|allUsers
decl_stmt|;
DECL|field|batchUpdateFactory
annotation|@
name|Inject
specifier|protected
name|BatchUpdate
operator|.
name|Factory
name|batchUpdateFactory
decl_stmt|;
DECL|field|changeDataFactory
annotation|@
name|Inject
specifier|protected
name|ChangeData
operator|.
name|Factory
name|changeDataFactory
decl_stmt|;
DECL|field|changeFinder
annotation|@
name|Inject
specifier|protected
name|ChangeFinder
name|changeFinder
decl_stmt|;
DECL|field|indexer
annotation|@
name|Inject
specifier|protected
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|changeNoteUtil
annotation|@
name|Inject
specifier|protected
name|ChangeNoteUtil
name|changeNoteUtil
decl_stmt|;
DECL|field|changeResourceFactory
annotation|@
name|Inject
specifier|protected
name|ChangeResource
operator|.
name|Factory
name|changeResourceFactory
decl_stmt|;
DECL|field|sender
annotation|@
name|Inject
specifier|protected
name|FakeEmailSender
name|sender
decl_stmt|;
DECL|field|gApi
annotation|@
name|Inject
specifier|protected
name|GerritApi
name|gApi
decl_stmt|;
DECL|field|repoManager
annotation|@
name|Inject
specifier|protected
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|groupBackend
annotation|@
name|Inject
specifier|protected
name|GroupBackend
name|groupBackend
decl_stmt|;
DECL|field|groupCache
annotation|@
name|Inject
specifier|protected
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|identifiedUserFactory
annotation|@
name|Inject
specifier|protected
name|IdentifiedUser
operator|.
name|GenericFactory
name|identifiedUserFactory
decl_stmt|;
DECL|field|metaDataUpdateFactory
annotation|@
name|Inject
specifier|protected
name|MetaDataUpdate
operator|.
name|Server
name|metaDataUpdateFactory
decl_stmt|;
DECL|field|psUtil
annotation|@
name|Inject
specifier|protected
name|PatchSetUtil
name|psUtil
decl_stmt|;
DECL|field|projectCache
annotation|@
name|Inject
specifier|protected
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|projectConfigFactory
annotation|@
name|Inject
specifier|protected
name|ProjectConfig
operator|.
name|Factory
name|projectConfigFactory
decl_stmt|;
DECL|field|projectResetter
annotation|@
name|Inject
specifier|protected
name|ProjectResetter
operator|.
name|Builder
operator|.
name|Factory
name|projectResetter
decl_stmt|;
DECL|field|queryProvider
annotation|@
name|Inject
specifier|protected
name|Provider
argument_list|<
name|InternalChangeQuery
argument_list|>
name|queryProvider
decl_stmt|;
DECL|field|pushFactory
annotation|@
name|Inject
specifier|protected
name|PushOneCommit
operator|.
name|Factory
name|pushFactory
decl_stmt|;
DECL|field|pluginConfig
annotation|@
name|Inject
specifier|protected
name|PluginConfigFactory
name|pluginConfig
decl_stmt|;
DECL|field|revisions
annotation|@
name|Inject
specifier|protected
name|Revisions
name|revisions
decl_stmt|;
DECL|field|systemGroupBackend
annotation|@
name|Inject
specifier|protected
name|SystemGroupBackend
name|systemGroupBackend
decl_stmt|;
DECL|field|notesFactory
annotation|@
name|Inject
specifier|protected
name|ChangeNotes
operator|.
name|Factory
name|notesFactory
decl_stmt|;
DECL|field|batchAbandon
annotation|@
name|Inject
specifier|protected
name|BatchAbandon
name|batchAbandon
decl_stmt|;
DECL|field|sshKeys
annotation|@
name|Inject
specifier|protected
name|TestSshKeys
name|sshKeys
decl_stmt|;
DECL|field|eventRecorder
specifier|protected
name|EventRecorder
name|eventRecorder
decl_stmt|;
DECL|field|server
specifier|protected
name|GerritServer
name|server
decl_stmt|;
DECL|field|project
specifier|protected
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|adminRestSession
specifier|protected
name|RestSession
name|adminRestSession
decl_stmt|;
DECL|field|userRestSession
specifier|protected
name|RestSession
name|userRestSession
decl_stmt|;
DECL|field|anonymousRestSession
specifier|protected
name|RestSession
name|anonymousRestSession
decl_stmt|;
DECL|field|adminSshSession
specifier|protected
name|SshSession
name|adminSshSession
decl_stmt|;
DECL|field|userSshSession
specifier|protected
name|SshSession
name|userSshSession
decl_stmt|;
DECL|field|admin
specifier|protected
name|TestAccount
name|admin
decl_stmt|;
DECL|field|user
specifier|protected
name|TestAccount
name|user
decl_stmt|;
DECL|field|testRepo
specifier|protected
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|testRepo
decl_stmt|;
DECL|field|resourcePrefix
specifier|protected
name|String
name|resourcePrefix
decl_stmt|;
DECL|field|description
specifier|protected
name|Description
name|description
decl_stmt|;
DECL|field|testRequiresSsh
specifier|protected
name|boolean
name|testRequiresSsh
decl_stmt|;
DECL|field|noSleepBlockStrategy
specifier|protected
name|BlockStrategy
name|noSleepBlockStrategy
init|=
name|t
lambda|->
block|{}
decl_stmt|;
comment|// Don't sleep in tests.
comment|// TODO(dborowitz): Push down into callers that need it.
DECL|field|projectOperations
annotation|@
name|Inject
specifier|protected
name|ProjectOperations
name|projectOperations
decl_stmt|;
DECL|field|changeNotesArgs
annotation|@
name|Inject
specifier|private
name|AbstractChangeNotes
operator|.
name|Args
name|changeNotesArgs
decl_stmt|;
DECL|field|accountIndexes
annotation|@
name|Inject
specifier|private
name|AccountIndexCollection
name|accountIndexes
decl_stmt|;
DECL|field|accountIndexer
annotation|@
name|Inject
specifier|private
name|AccountIndexer
name|accountIndexer
decl_stmt|;
DECL|field|changeIndexes
annotation|@
name|Inject
specifier|private
name|ChangeIndexCollection
name|changeIndexes
decl_stmt|;
DECL|field|eventRecorderFactory
annotation|@
name|Inject
specifier|private
name|EventRecorder
operator|.
name|Factory
name|eventRecorderFactory
decl_stmt|;
DECL|field|inProcessProtocol
annotation|@
name|Inject
specifier|private
name|InProcessProtocol
name|inProcessProtocol
decl_stmt|;
DECL|field|pluginGuiceEnvironment
annotation|@
name|Inject
specifier|private
name|PluginGuiceEnvironment
name|pluginGuiceEnvironment
decl_stmt|;
DECL|field|pluginUserFactory
annotation|@
name|Inject
specifier|private
name|PluginUser
operator|.
name|Factory
name|pluginUserFactory
decl_stmt|;
DECL|field|projectIndexes
annotation|@
name|Inject
specifier|private
name|ProjectIndexCollection
name|projectIndexes
decl_stmt|;
DECL|field|requestScopeOperations
annotation|@
name|Inject
specifier|private
name|RequestScopeOperations
name|requestScopeOperations
decl_stmt|;
DECL|field|sitePaths
annotation|@
name|Inject
specifier|private
name|SitePaths
name|sitePaths
decl_stmt|;
DECL|field|resetter
specifier|private
name|ProjectResetter
name|resetter
decl_stmt|;
DECL|field|toClose
specifier|private
name|List
argument_list|<
name|Repository
argument_list|>
name|toClose
decl_stmt|;
annotation|@
name|Before
DECL|method|clearSender ()
specifier|public
name|void
name|clearSender
parameter_list|()
block|{
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|startEventRecorder ()
specifier|public
name|void
name|startEventRecorder
parameter_list|()
block|{
name|eventRecorder
operator|=
name|eventRecorderFactory
operator|.
name|create
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|assumeSshIfRequired ()
specifier|public
name|void
name|assumeSshIfRequired
parameter_list|()
block|{
if|if
condition|(
name|testRequiresSsh
condition|)
block|{
comment|// If the test uses ssh, we use assume() to make sure ssh is enabled on
comment|// the test suite. JUnit will skip tests annotated with @UseSsh if we
comment|// disable them using the command line flag.
name|assume
argument_list|()
operator|.
name|that
argument_list|(
name|SshMode
operator|.
name|useSsh
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|closeEventRecorder ()
specifier|public
name|void
name|closeEventRecorder
parameter_list|()
block|{
name|eventRecorder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stopCommonServer ()
specifier|public
specifier|static
name|void
name|stopCommonServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|commonServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|commonServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Error stopping common server in "
operator|+
operator|(
name|firstTest
operator|!=
literal|null
condition|?
name|firstTest
operator|.
name|getTestClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"unknown test class"
operator|)
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commonServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/** Controls which project and branches should be reset after each test case. */
DECL|method|resetProjects ()
specifier|protected
name|ProjectResetter
operator|.
name|Config
name|resetProjects
parameter_list|()
block|{
return|return
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
comment|// Don't reset all refs so that refs/sequences/changes is not touched and change IDs are
comment|// not reused.
operator|.
name|reset
argument_list|(
name|allProjects
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
comment|// Don't reset refs/sequences/accounts so that account IDs are not reused.
operator|.
name|reset
argument_list|(
name|allUsers
argument_list|,
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|,
name|RefNames
operator|.
name|REFS_USERS
operator|+
literal|"*"
argument_list|,
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPNAMES
argument_list|,
name|RefNames
operator|.
name|REFS_GROUPS
operator|+
literal|"*"
argument_list|,
name|RefNames
operator|.
name|REFS_STARRED_CHANGES
operator|+
literal|"*"
argument_list|,
name|RefNames
operator|.
name|REFS_DRAFT_COMMENTS
operator|+
literal|"*"
argument_list|)
return|;
block|}
DECL|method|restartAsSlave ()
specifier|protected
name|void
name|restartAsSlave
parameter_list|()
throws|throws
name|Exception
block|{
name|closeSsh
argument_list|()
expr_stmt|;
name|server
operator|=
name|GerritServer
operator|.
name|restartAsSlave
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|server
operator|.
name|getTestInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|resetter
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|getTestInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|resetter
argument_list|)
expr_stmt|;
block|}
name|initSsh
argument_list|()
expr_stmt|;
block|}
DECL|method|evictAndReindexAccount (Account.Id accountId)
specifier|protected
name|void
name|evictAndReindexAccount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
DECL|method|submitWholeTopicEnabledConfig ()
specifier|protected
specifier|static
name|Config
name|submitWholeTopicEnabledConfig
parameter_list|()
block|{
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|isSubmitWholeTopicEnabled ()
specifier|protected
name|boolean
name|isSubmitWholeTopicEnabled
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"change"
argument_list|,
literal|null
argument_list|,
literal|"submitWholeTopic"
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|isContributorAgreementsEnabled ()
specifier|protected
name|boolean
name|isContributorAgreementsEnabled
parameter_list|()
block|{
return|return
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"contributorAgreements"
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|beforeTest (Description description)
specifier|protected
name|void
name|beforeTest
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|GerritServer
operator|.
name|Description
name|classDesc
init|=
name|GerritServer
operator|.
name|Description
operator|.
name|forTestClass
argument_list|(
name|description
argument_list|,
name|configName
argument_list|)
decl_stmt|;
name|GerritServer
operator|.
name|Description
name|methodDesc
init|=
name|GerritServer
operator|.
name|Description
operator|.
name|forTestMethod
argument_list|(
name|description
argument_list|,
name|configName
argument_list|)
decl_stmt|;
name|testRequiresSsh
operator|=
name|classDesc
operator|.
name|useSshAnnotation
argument_list|()
operator|||
name|methodDesc
operator|.
name|useSshAnnotation
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|testRequiresSsh
condition|)
block|{
name|baseConfig
operator|.
name|setString
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"listenAddress"
argument_list|,
literal|"off"
argument_list|)
expr_stmt|;
block|}
name|baseConfig
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"batchThreads"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|baseConfig
operator|.
name|setInt
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"changeUpdateThreads"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Module
name|module
init|=
name|createModule
argument_list|()
decl_stmt|;
if|if
condition|(
name|classDesc
operator|.
name|equals
argument_list|(
name|methodDesc
argument_list|)
operator|&&
operator|!
name|classDesc
operator|.
name|sandboxed
argument_list|()
operator|&&
operator|!
name|methodDesc
operator|.
name|sandboxed
argument_list|()
condition|)
block|{
if|if
condition|(
name|commonServer
operator|==
literal|null
condition|)
block|{
name|commonServer
operator|=
name|GerritServer
operator|.
name|initAndStart
argument_list|(
name|temporaryFolder
argument_list|,
name|classDesc
argument_list|,
name|baseConfig
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
name|server
operator|=
name|commonServer
expr_stmt|;
block|}
else|else
block|{
name|server
operator|=
name|GerritServer
operator|.
name|initAndStart
argument_list|(
name|temporaryFolder
argument_list|,
name|methodDesc
argument_list|,
name|baseConfig
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|getTestInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Transport
operator|.
name|register
argument_list|(
name|inProcessProtocol
argument_list|)
expr_stmt|;
name|toClose
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|=
name|accountCreator
operator|.
name|admin
argument_list|()
expr_stmt|;
name|user
operator|=
name|accountCreator
operator|.
name|user
argument_list|()
expr_stmt|;
comment|// Evict and reindex accounts in case tests modify them.
name|evictAndReindexAccount
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|evictAndReindexAccount
argument_list|(
name|user
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|adminRestSession
operator|=
operator|new
name|RestSession
argument_list|(
name|server
argument_list|,
name|admin
argument_list|)
expr_stmt|;
name|userRestSession
operator|=
operator|new
name|RestSession
argument_list|(
name|server
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|anonymousRestSession
operator|=
operator|new
name|RestSession
argument_list|(
name|server
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|initSsh
argument_list|()
expr_stmt|;
name|resourcePrefix
operator|=
name|UNSAFE_PROJECT_NAME
operator|.
name|matcher
argument_list|(
name|description
operator|.
name|getClassName
argument_list|()
operator|+
literal|"_"
operator|+
name|description
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Context
name|ctx
init|=
name|newRequestContext
argument_list|(
name|admin
argument_list|)
decl_stmt|;
name|atrScope
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|ProjectInput
name|in
init|=
name|projectInput
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|project
operator|=
name|Project
operator|.
name|nameKey
argument_list|(
name|in
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|classDesc
operator|.
name|skipProjectClone
argument_list|()
condition|)
block|{
name|testRepo
operator|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|getCloneAsAccount
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Override to bind an additional Guice module */
DECL|method|createModule ()
specifier|public
name|Module
name|createModule
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|initSsh ()
specifier|protected
name|void
name|initSsh
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRequiresSsh
operator|&&
name|SshMode
operator|.
name|useSsh
argument_list|()
operator|&&
operator|(
name|adminSshSession
operator|==
literal|null
operator|||
name|userSshSession
operator|==
literal|null
operator|)
condition|)
block|{
comment|// Create Ssh sessions
name|KeyPair
name|adminKeyPair
init|=
name|sshKeys
operator|.
name|getKeyPair
argument_list|(
name|admin
argument_list|)
decl_stmt|;
name|GitUtil
operator|.
name|initSsh
argument_list|(
name|adminKeyPair
argument_list|)
expr_stmt|;
name|Context
name|ctx
init|=
name|newRequestContext
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|atrScope
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|userSshSession
operator|=
name|ctx
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|userSshSession
operator|.
name|open
argument_list|()
expr_stmt|;
name|ctx
operator|=
name|newRequestContext
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|atrScope
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|adminSshSession
operator|=
name|ctx
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|adminSshSession
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCloneAsAccount (Description description)
specifier|private
name|TestAccount
name|getCloneAsAccount
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|TestProjectInput
name|ann
init|=
name|description
operator|.
name|getAnnotation
argument_list|(
name|TestProjectInput
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|accountCreator
operator|.
name|get
argument_list|(
name|ann
operator|!=
literal|null
condition|?
name|ann
operator|.
name|cloneAs
argument_list|()
else|:
literal|"admin"
argument_list|)
return|;
block|}
comment|/** Generate default project properties based on test description */
DECL|method|projectInput (Description description)
specifier|private
name|ProjectInput
name|projectInput
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|TestProjectInput
name|ann
init|=
name|description
operator|.
name|getAnnotation
argument_list|(
name|TestProjectInput
operator|.
name|class
argument_list|)
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
literal|"project"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|parent
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|ann
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|description
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|ann
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|createEmptyCommit
operator|=
name|ann
operator|.
name|createEmptyCommit
argument_list|()
expr_stmt|;
name|in
operator|.
name|submitType
operator|=
name|ann
operator|.
name|submitType
argument_list|()
expr_stmt|;
name|in
operator|.
name|useContentMerge
operator|=
name|ann
operator|.
name|useContributorAgreements
argument_list|()
expr_stmt|;
name|in
operator|.
name|useSignedOffBy
operator|=
name|ann
operator|.
name|useSignedOffBy
argument_list|()
expr_stmt|;
name|in
operator|.
name|useContentMerge
operator|=
name|ann
operator|.
name|useContentMerge
argument_list|()
expr_stmt|;
name|in
operator|.
name|rejectEmptyCommit
operator|=
name|ann
operator|.
name|rejectEmptyCommit
argument_list|()
expr_stmt|;
name|in
operator|.
name|enableSignedPush
operator|=
name|ann
operator|.
name|enableSignedPush
argument_list|()
expr_stmt|;
name|in
operator|.
name|requireSignedPush
operator|=
name|ann
operator|.
name|requireSignedPush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Defaults should match TestProjectConfig, omitting nullable values.
name|in
operator|.
name|createEmptyCommit
operator|=
literal|true
expr_stmt|;
block|}
name|updateProjectInput
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
comment|/**    * Modify a project input before creating the initial test project.    *    * @param in input; may be modified in place.    */
DECL|method|updateProjectInput (ProjectInput in)
specifier|protected
name|void
name|updateProjectInput
parameter_list|(
name|ProjectInput
name|in
parameter_list|)
block|{
comment|// Default implementation does nothing.
block|}
DECL|field|UNSAFE_PROJECT_NAME
specifier|private
specifier|static
specifier|final
name|Pattern
name|UNSAFE_PROJECT_NAME
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^a-zA-Z0-9._/-]+"
argument_list|)
decl_stmt|;
DECL|method|git ()
specifier|protected
name|Git
name|git
parameter_list|()
block|{
return|return
name|testRepo
operator|.
name|git
argument_list|()
return|;
block|}
DECL|method|repo ()
specifier|protected
name|InMemoryRepository
name|repo
parameter_list|()
block|{
return|return
name|testRepo
operator|.
name|getRepository
argument_list|()
return|;
block|}
comment|/**    * Return a resource name scoped to this test method.    *    *<p>Test methods in a single class by default share a running server. For any resource name you    * require to be unique to a test method, wrap it in a call to this method.    *    * @param name resource name (group, project, topic, etc.)    * @return name prefixed by a string unique to this test method.    */
DECL|method|name (String name)
specifier|protected
name|String
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|resourcePrefix
operator|+
name|name
return|;
block|}
DECL|method|createProjectOverAPI ( String nameSuffix, Project.NameKey parent, boolean createEmptyCommit, SubmitType submitType)
specifier|protected
name|Project
operator|.
name|NameKey
name|createProjectOverAPI
parameter_list|(
name|String
name|nameSuffix
parameter_list|,
name|Project
operator|.
name|NameKey
name|parent
parameter_list|,
name|boolean
name|createEmptyCommit
parameter_list|,
name|SubmitType
name|submitType
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ProjectInput
name|in
init|=
operator|new
name|ProjectInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|name
operator|=
name|name
argument_list|(
name|nameSuffix
argument_list|)
expr_stmt|;
name|in
operator|.
name|parent
operator|=
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|get
argument_list|()
else|:
literal|null
expr_stmt|;
name|in
operator|.
name|submitType
operator|=
name|submitType
expr_stmt|;
name|in
operator|.
name|createEmptyCommit
operator|=
name|createEmptyCommit
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|create
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|Project
operator|.
name|nameKey
argument_list|(
name|in
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|cloneProject (Project.NameKey p)
specifier|protected
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|cloneProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|cloneProject
argument_list|(
name|p
argument_list|,
name|admin
argument_list|)
return|;
block|}
DECL|method|cloneProject ( Project.NameKey p, TestAccount testAccount)
specifier|protected
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|cloneProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|TestAccount
name|testAccount
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|GitUtil
operator|.
name|cloneProject
argument_list|(
name|p
argument_list|,
name|registerRepoConnection
argument_list|(
name|p
argument_list|,
name|testAccount
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Register a repository connection over the test protocol.    *    * @return a URI string that can be used to connect to this repository for both fetch and push.    */
DECL|method|registerRepoConnection (Project.NameKey p, TestAccount testAccount)
specifier|protected
name|String
name|registerRepoConnection
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|TestAccount
name|testAccount
parameter_list|)
throws|throws
name|Exception
block|{
name|InProcessProtocol
operator|.
name|Context
name|ctx
init|=
operator|new
name|InProcessProtocol
operator|.
name|Context
argument_list|(
name|identifiedUserFactory
argument_list|,
name|testAccount
operator|.
name|id
argument_list|()
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|toClose
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
return|return
name|inProcessProtocol
operator|.
name|register
argument_list|(
name|ctx
argument_list|,
name|repo
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|afterTest ()
specifier|protected
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
operator|.
name|unregister
argument_list|(
name|inProcessProtocol
argument_list|)
expr_stmt|;
for|for
control|(
name|Repository
name|repo
range|:
name|toClose
control|)
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closeSsh
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
name|commonServer
condition|)
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|closeSsh ()
specifier|protected
name|void
name|closeSsh
parameter_list|()
block|{
if|if
condition|(
name|adminSshSession
operator|!=
literal|null
condition|)
block|{
name|adminSshSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|adminSshSession
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|userSshSession
operator|!=
literal|null
condition|)
block|{
name|userSshSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|userSshSession
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|commitBuilder ()
specifier|protected
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|commitBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|testRepo
operator|.
name|branch
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|commit
argument_list|()
operator|.
name|insertChangeId
argument_list|()
return|;
block|}
DECL|method|amendBuilder ()
specifier|protected
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|amendBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|head
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
literal|"HEAD"
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|CommitBuilder
name|b
init|=
name|testRepo
operator|.
name|amendRef
argument_list|(
literal|"HEAD"
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|id
init|=
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testRepo
argument_list|,
name|head
argument_list|)
decl_stmt|;
comment|// TestRepository behaves like "git commit --amend -m foo", which does not
comment|// preserve an existing Change-Id. Tests probably want this.
if|if
condition|(
name|id
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|b
operator|.
name|insertChangeId
argument_list|(
name|id
operator|.
name|get
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|insertChangeId
argument_list|()
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
DECL|method|createChange ()
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createChange
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
DECL|method|createChange (String ref)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createMergeCommitChange (String ref)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createMergeCommitChange
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMergeCommitChange
argument_list|(
name|ref
argument_list|,
literal|"foo"
argument_list|)
return|;
block|}
DECL|method|createMergeCommitChange (String ref, String file)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createMergeCommitChange
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectId
name|initial
init|=
name|repo
argument_list|()
operator|.
name|exactRef
argument_list|(
name|HEAD
argument_list|)
operator|.
name|getLeaf
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|PushOneCommit
operator|.
name|Result
name|p1
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"parent 1"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|file
argument_list|,
literal|"foo-1"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
comment|// reset HEAD in order to create a sibling of the first change
name|testRepo
operator|.
name|reset
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|p2
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"parent 2"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|file
argument_list|,
literal|"foo-2"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|PushOneCommit
name|m
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
literal|"merge"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|file
argument_list|,
literal|"foo-1"
argument_list|,
literal|"bar"
argument_list|,
literal|"bar-2"
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|.
name|setParents
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|p1
operator|.
name|getCommit
argument_list|()
argument_list|,
name|p2
operator|.
name|getCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|m
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createCommitAndPush ( TestRepository<InMemoryRepository> repo, String ref, String commitMsg, String fileName, String content)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createCommitAndPush
parameter_list|(
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|commitMsg
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
operator|.
name|Result
name|result
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
name|commitMsg
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
operator|.
name|to
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createChangeWithTopic ( TestRepository<InMemoryRepository> repo, String topic, String commitMsg, String fileName, String content)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChangeWithTopic
parameter_list|(
name|TestRepository
argument_list|<
name|InMemoryRepository
argument_list|>
name|repo
parameter_list|,
name|String
name|topic
parameter_list|,
name|String
name|commitMsg
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|topic
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
return|return
name|createCommitAndPush
argument_list|(
name|repo
argument_list|,
literal|"refs/for/master%topic="
operator|+
name|name
argument_list|(
name|topic
argument_list|)
argument_list|,
name|commitMsg
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
return|;
block|}
DECL|method|createChange (String subject, String fileName, String content)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
DECL|method|createChange ( TestRepository<?> repo, String branch, String subject, String fileName, String content, String topic)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|createChange
parameter_list|(
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
literal|"refs/for/"
operator|+
name|branch
operator|+
literal|"%topic="
operator|+
name|name
argument_list|(
name|topic
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createBranch (BranchNameKey branch)
specifier|protected
name|BranchApi
name|createBranch
parameter_list|(
name|BranchNameKey
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|branch
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|branch
operator|.
name|branch
argument_list|()
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|BranchInput
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createBranchWithRevision (BranchNameKey branch, String revision)
specifier|protected
name|BranchApi
name|createBranchWithRevision
parameter_list|(
name|BranchNameKey
name|branch
parameter_list|,
name|String
name|revision
parameter_list|)
throws|throws
name|Exception
block|{
name|BranchInput
name|in
init|=
operator|new
name|BranchInput
argument_list|()
decl_stmt|;
name|in
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
return|return
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|branch
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|branch
argument_list|(
name|branch
operator|.
name|branch
argument_list|()
argument_list|)
operator|.
name|create
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Character
argument_list|>
name|RANDOM
init|=
name|Chars
operator|.
name|asList
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|'c'
argument_list|,
literal|'d'
argument_list|,
literal|'e'
argument_list|,
literal|'f'
argument_list|,
literal|'g'
argument_list|,
literal|'h'
argument_list|)
decl_stmt|;
DECL|method|amendChange (String changeId)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|amendChange
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|amendChange
argument_list|(
name|changeId
argument_list|,
literal|"refs/for/master"
argument_list|,
name|admin
argument_list|,
name|testRepo
argument_list|)
return|;
block|}
DECL|method|amendChange ( String changeId, String ref, TestAccount testAccount, TestRepository<?> repo)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|amendChange
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|ref
parameter_list|,
name|TestAccount
name|testAccount
parameter_list|,
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|)
throws|throws
name|Exception
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|RANDOM
argument_list|)
expr_stmt|;
return|return
name|amendChange
argument_list|(
name|changeId
argument_list|,
name|ref
argument_list|,
name|testAccount
argument_list|,
name|repo
argument_list|,
name|PushOneCommit
operator|.
name|SUBJECT
argument_list|,
name|PushOneCommit
operator|.
name|FILE_NAME
argument_list|,
operator|new
name|String
argument_list|(
name|Chars
operator|.
name|toArray
argument_list|(
name|RANDOM
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|amendChange ( String changeId, String subject, String fileName, String content)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|amendChange
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|amendChange
argument_list|(
name|changeId
argument_list|,
literal|"refs/for/master"
argument_list|,
name|admin
argument_list|,
name|testRepo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
return|;
block|}
DECL|method|amendChange ( String changeId, String ref, TestAccount testAccount, TestRepository<?> repo, String subject, String fileName, String content)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|amendChange
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|ref
parameter_list|,
name|TestAccount
name|testAccount
parameter_list|,
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|testAccount
operator|.
name|newIdent
argument_list|()
argument_list|,
name|repo
argument_list|,
name|subject
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|,
name|changeId
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
return|;
block|}
DECL|method|merge (PushOneCommit.Result r)
specifier|protected
name|void
name|merge
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
name|revision
argument_list|(
name|r
argument_list|)
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
DECL|method|info (String id)
specifier|protected
name|ChangeInfo
name|info
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|info
argument_list|()
return|;
block|}
DECL|method|getEdit (String id)
specifier|protected
name|Optional
argument_list|<
name|EditInfo
argument_list|>
name|getEdit
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|edit
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|get (String id, ListChangesOption... options)
specifier|protected
name|ChangeInfo
name|get
parameter_list|(
name|String
name|id
parameter_list|,
name|ListChangesOption
modifier|...
name|options
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|options
argument_list|)
return|;
block|}
DECL|method|query (String q)
specifier|protected
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|query
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|RestApiException
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|query
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|newRequestContext (TestAccount account)
specifier|private
name|Context
name|newRequestContext
parameter_list|(
name|TestAccount
name|account
parameter_list|)
block|{
name|requestScopeOperations
operator|.
name|setApiUser
argument_list|(
name|account
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|atrScope
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getAccount (Account.Id accountId)
specifier|protected
name|Account
name|getAccount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
return|return
name|getAccountState
argument_list|(
name|accountId
argument_list|)
operator|.
name|getAccount
argument_list|()
return|;
block|}
DECL|method|getAccountState (Account.Id accountId)
specifier|protected
name|AccountState
name|getAccountState
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|Optional
argument_list|<
name|AccountState
argument_list|>
name|accountState
init|=
name|accountCache
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
literal|"account %s"
argument_list|,
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|about
argument_list|(
name|optionals
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|accountState
argument_list|)
operator|.
name|isPresent
argument_list|()
expr_stmt|;
return|return
name|accountState
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|disableNoteDb ()
specifier|protected
name|AutoCloseable
name|disableNoteDb
parameter_list|()
block|{
name|changeNotesArgs
operator|.
name|failOnLoadForTest
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Context
name|oldContext
init|=
name|atrScope
operator|.
name|disableNoteDb
argument_list|()
decl_stmt|;
return|return
parameter_list|()
lambda|->
block|{
name|changeNotesArgs
operator|.
name|failOnLoadForTest
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|atrScope
operator|.
name|set
argument_list|(
name|oldContext
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|disableChangeIndexWrites ()
specifier|protected
name|void
name|disableChangeIndexWrites
parameter_list|()
block|{
for|for
control|(
name|ChangeIndex
name|i
range|:
name|changeIndexes
operator|.
name|getWriteIndexes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|instanceof
name|ReadOnlyChangeIndex
operator|)
condition|)
block|{
name|changeIndexes
operator|.
name|addWriteIndex
argument_list|(
operator|new
name|ReadOnlyChangeIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|enableChangeIndexWrites ()
specifier|protected
name|void
name|enableChangeIndexWrites
parameter_list|()
block|{
for|for
control|(
name|ChangeIndex
name|i
range|:
name|changeIndexes
operator|.
name|getWriteIndexes
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|ReadOnlyChangeIndex
condition|)
block|{
name|changeIndexes
operator|.
name|addWriteIndex
argument_list|(
operator|(
operator|(
name|ReadOnlyChangeIndex
operator|)
name|i
operator|)
operator|.
name|unwrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|disableChangeIndex ()
specifier|protected
name|AutoCloseable
name|disableChangeIndex
parameter_list|()
block|{
name|disableChangeIndexWrites
argument_list|()
expr_stmt|;
name|ChangeIndex
name|maybeDisabledSearchIndex
init|=
name|changeIndexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|maybeDisabledSearchIndex
operator|instanceof
name|DisabledChangeIndex
operator|)
condition|)
block|{
name|changeIndexes
operator|.
name|setSearchIndex
argument_list|(
operator|new
name|DisabledChangeIndex
argument_list|(
name|maybeDisabledSearchIndex
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
parameter_list|()
lambda|->
block|{
name|enableChangeIndexWrites
argument_list|()
expr_stmt|;
name|ChangeIndex
name|maybeEnabledSearchIndex
init|=
name|changeIndexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|maybeEnabledSearchIndex
operator|instanceof
name|DisabledChangeIndex
condition|)
block|{
name|changeIndexes
operator|.
name|setSearchIndex
argument_list|(
operator|(
operator|(
name|DisabledChangeIndex
operator|)
name|maybeEnabledSearchIndex
operator|)
operator|.
name|unwrap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|disableAccountIndex ()
specifier|protected
name|AutoCloseable
name|disableAccountIndex
parameter_list|()
block|{
name|AccountIndex
name|maybeDisabledSearchIndex
init|=
name|accountIndexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|maybeDisabledSearchIndex
operator|instanceof
name|DisabledAccountIndex
operator|)
condition|)
block|{
name|accountIndexes
operator|.
name|setSearchIndex
argument_list|(
operator|new
name|DisabledAccountIndex
argument_list|(
name|maybeDisabledSearchIndex
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
parameter_list|()
lambda|->
block|{
name|AccountIndex
name|maybeEnabledSearchIndex
init|=
name|accountIndexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|maybeEnabledSearchIndex
operator|instanceof
name|DisabledAccountIndex
condition|)
block|{
name|accountIndexes
operator|.
name|setSearchIndex
argument_list|(
operator|(
operator|(
name|DisabledAccountIndex
operator|)
name|maybeEnabledSearchIndex
operator|)
operator|.
name|unwrap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|disableProjectIndex ()
specifier|protected
name|AutoCloseable
name|disableProjectIndex
parameter_list|()
block|{
name|disableProjectIndexWrites
argument_list|()
expr_stmt|;
name|ProjectIndex
name|maybeDisabledSearchIndex
init|=
name|projectIndexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|maybeDisabledSearchIndex
operator|instanceof
name|DisabledProjectIndex
operator|)
condition|)
block|{
name|projectIndexes
operator|.
name|setSearchIndex
argument_list|(
operator|new
name|DisabledProjectIndex
argument_list|(
name|maybeDisabledSearchIndex
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
parameter_list|()
lambda|->
block|{
name|enableProjectIndexWrites
argument_list|()
expr_stmt|;
name|ProjectIndex
name|maybeEnabledSearchIndex
init|=
name|projectIndexes
operator|.
name|getSearchIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|maybeEnabledSearchIndex
operator|instanceof
name|DisabledProjectIndex
condition|)
block|{
name|projectIndexes
operator|.
name|setSearchIndex
argument_list|(
operator|(
operator|(
name|DisabledProjectIndex
operator|)
name|maybeEnabledSearchIndex
operator|)
operator|.
name|unwrap
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|disableProjectIndexWrites ()
specifier|protected
name|void
name|disableProjectIndexWrites
parameter_list|()
block|{
for|for
control|(
name|ProjectIndex
name|i
range|:
name|projectIndexes
operator|.
name|getWriteIndexes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|instanceof
name|DisabledProjectIndex
operator|)
condition|)
block|{
name|projectIndexes
operator|.
name|addWriteIndex
argument_list|(
operator|new
name|DisabledProjectIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|enableProjectIndexWrites ()
specifier|protected
name|void
name|enableProjectIndexWrites
parameter_list|()
block|{
for|for
control|(
name|ProjectIndex
name|i
range|:
name|projectIndexes
operator|.
name|getWriteIndexes
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|DisabledProjectIndex
condition|)
block|{
name|projectIndexes
operator|.
name|addWriteIndex
argument_list|(
operator|(
operator|(
name|DisabledProjectIndex
operator|)
name|i
operator|)
operator|.
name|unwrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|newGson ()
specifier|protected
specifier|static
name|Gson
name|newGson
parameter_list|()
block|{
return|return
name|OutputFormat
operator|.
name|JSON_COMPACT
operator|.
name|newGson
argument_list|()
return|;
block|}
DECL|method|revision (PushOneCommit.Result r)
specifier|protected
name|RevisionApi
name|revision
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|current
argument_list|()
return|;
block|}
DECL|method|allow (String ref, String permission, AccountGroup.UUID id)
specifier|protected
name|void
name|allow
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|allow
argument_list|(
name|project
argument_list|,
name|ref
argument_list|,
name|permission
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|allow (Project.NameKey p, String ref, String permission, AccountGroup.UUID id)
specifier|protected
name|void
name|allow
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|TestProjectUpdate
operator|.
name|allow
argument_list|(
name|permission
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|allowGlobalCapabilities ( AccountGroup.UUID id, int min, int max, String... capabilityNames)
specifier|protected
name|void
name|allowGlobalCapabilities
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|String
modifier|...
name|capabilityNames
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allProjects
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|capabilityName
range|:
name|capabilityNames
control|)
block|{
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|capabilityName
argument_list|,
name|id
argument_list|,
operator|new
name|PermissionRange
argument_list|(
name|capabilityName
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|allowGlobalCapabilities (AccountGroup.UUID id, String... capabilityNames)
specifier|protected
name|void
name|allowGlobalCapabilities
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|,
name|String
modifier|...
name|capabilityNames
parameter_list|)
throws|throws
name|Exception
block|{
name|allowGlobalCapabilities
argument_list|(
name|id
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|capabilityNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|allowGlobalCapabilities (AccountGroup.UUID id, Iterable<String> capabilityNames)
specifier|protected
name|void
name|allowGlobalCapabilities
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|capabilityNames
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allProjects
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|capabilityName
range|:
name|capabilityNames
control|)
block|{
name|Util
operator|.
name|allow
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|capabilityName
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeGlobalCapabilities (AccountGroup.UUID id, String... capabilityNames)
specifier|protected
name|void
name|removeGlobalCapabilities
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|,
name|String
modifier|...
name|capabilityNames
parameter_list|)
throws|throws
name|Exception
block|{
name|removeGlobalCapabilities
argument_list|(
name|id
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|capabilityNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeGlobalCapabilities (AccountGroup.UUID id, Iterable<String> capabilityNames)
specifier|protected
name|void
name|removeGlobalCapabilities
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|capabilityNames
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|allProjects
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|capabilityName
range|:
name|capabilityNames
control|)
block|{
name|Util
operator|.
name|remove
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|capabilityName
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setUseSignedOffBy (InheritableBoolean value)
specifier|protected
name|void
name|setUseSignedOffBy
parameter_list|(
name|InheritableBoolean
name|value
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|ProjectConfig
name|config
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|setBooleanConfig
argument_list|(
name|BooleanProjectConfig
operator|.
name|USE_SIGNED_OFF_BY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|config
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRequireChangeId (InheritableBoolean value)
specifier|protected
name|void
name|setRequireChangeId
parameter_list|(
name|InheritableBoolean
name|value
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|ProjectConfig
name|config
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|config
operator|.
name|getProject
argument_list|()
operator|.
name|setBooleanConfig
argument_list|(
name|BooleanProjectConfig
operator|.
name|REQUIRE_CHANGE_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|config
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deny (String ref, String permission, AccountGroup.UUID id)
specifier|protected
name|void
name|deny
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|deny
argument_list|(
name|project
argument_list|,
name|ref
argument_list|,
name|permission
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|deny (Project.NameKey p, String ref, String permission, AccountGroup.UUID id)
specifier|protected
name|void
name|deny
parameter_list|(
name|Project
operator|.
name|NameKey
name|p
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|p
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|TestProjectUpdate
operator|.
name|deny
argument_list|(
name|permission
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|block (String ref, String permission, AccountGroup.UUID id)
specifier|protected
name|void
name|block
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|block
argument_list|(
name|project
argument_list|,
name|ref
argument_list|,
name|permission
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|block (Project.NameKey project, String ref, String permission, AccountGroup.UUID id)
specifier|protected
name|void
name|block
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|TestProjectUpdate
operator|.
name|block
argument_list|(
name|permission
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|blockLabel ( String label, int min, int max, AccountGroup.UUID id, String ref, Project.NameKey project)
specifier|protected
name|void
name|blockLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|id
parameter_list|,
name|String
name|ref
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|Util
operator|.
name|block
argument_list|(
name|u
operator|.
name|getConfig
argument_list|()
argument_list|,
name|Permission
operator|.
name|LABEL
operator|+
name|label
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|id
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|grant (Project.NameKey project, String ref, String permission)
specifier|protected
name|void
name|grant
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|TestProjectUpdate
operator|.
name|allow
argument_list|(
name|permission
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|grant (Project.NameKey project, String ref, String permission, boolean force)
specifier|protected
name|void
name|grant
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|TestProjectUpdate
operator|.
name|allow
argument_list|(
name|permission
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|adminGroupUuid
argument_list|()
argument_list|)
operator|.
name|force
argument_list|(
name|force
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|grant ( Project.NameKey project, String ref, String permission, boolean force, AccountGroup.UUID groupUUID)
specifier|protected
name|void
name|grant
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|,
name|boolean
name|force
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUUID
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|forUpdate
argument_list|()
operator|.
name|add
argument_list|(
name|TestProjectUpdate
operator|.
name|allow
argument_list|(
name|permission
argument_list|)
operator|.
name|ref
argument_list|(
name|ref
argument_list|)
operator|.
name|group
argument_list|(
name|groupUUID
argument_list|)
operator|.
name|force
argument_list|(
name|force
argument_list|)
argument_list|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|grantLabel ( String label, int min, int max, Project.NameKey project, String ref, boolean force, AccountGroup.UUID groupUUID, boolean exclusive)
specifier|protected
name|void
name|grantLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|boolean
name|force
parameter_list|,
name|AccountGroup
operator|.
name|UUID
name|groupUUID
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|RepositoryNotFoundException
throws|,
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|String
name|permission
init|=
name|Permission
operator|.
name|LABEL
operator|+
name|label
decl_stmt|;
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|md
operator|.
name|setMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Grant %s on %s"
argument_list|,
name|permission
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|AccessSection
name|s
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Permission
name|p
init|=
name|s
operator|.
name|getPermission
argument_list|(
name|permission
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|p
operator|.
name|setExclusiveGroup
argument_list|(
name|exclusive
argument_list|)
expr_stmt|;
name|PermissionRule
name|rule
init|=
name|Util
operator|.
name|newRule
argument_list|(
name|config
argument_list|,
name|groupUUID
argument_list|)
decl_stmt|;
name|rule
operator|.
name|setForce
argument_list|(
name|force
argument_list|)
expr_stmt|;
name|rule
operator|.
name|setMin
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|rule
operator|.
name|setMax
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|config
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removePermission (Project.NameKey project, String ref, String permission)
specifier|protected
name|void
name|removePermission
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|permission
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
try|try
init|(
name|MetaDataUpdate
name|md
init|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|project
argument_list|)
init|)
block|{
name|md
operator|.
name|setMessage
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Remove %s on %s"
argument_list|,
name|permission
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectConfig
name|config
init|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|AccessSection
name|s
init|=
name|config
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Permission
name|p
init|=
name|s
operator|.
name|getPermission
argument_list|(
name|permission
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|p
operator|.
name|clearRules
argument_list|()
expr_stmt|;
name|config
operator|.
name|commit
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|config
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|blockRead (String ref)
specifier|protected
name|void
name|blockRead
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|block
argument_list|(
name|ref
argument_list|,
name|Permission
operator|.
name|READ
argument_list|,
name|REGISTERED_USERS
argument_list|)
expr_stmt|;
block|}
DECL|method|pushTo (String ref)
specifier|protected
name|PushOneCommit
operator|.
name|Result
name|pushTo
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|newIdent
argument_list|()
argument_list|,
name|testRepo
argument_list|)
decl_stmt|;
return|return
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
return|;
block|}
DECL|method|approve (String id)
specifier|protected
name|void
name|approve
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|approve
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|recommend (String id)
specifier|protected
name|void
name|recommend
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|ReviewInput
operator|.
name|recommend
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubmittedTogether (String chId, String... expected)
specifier|protected
name|void
name|assertSubmittedTogether
parameter_list|(
name|String
name|chId
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|actual
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|chId
argument_list|)
operator|.
name|submittedTogether
argument_list|()
decl_stmt|;
name|SubmittedTogetherInfo
name|info
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|chId
argument_list|)
operator|.
name|submittedTogether
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NON_VISIBLE_CHANGES
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|nonVisibleChanges
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|actual
argument_list|,
name|i1
lambda|->
name|i1
operator|.
name|changeId
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|info
operator|.
name|changes
argument_list|,
name|i
lambda|->
name|i
operator|.
name|changeId
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|expected
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|getPatchSet (PatchSet.Id psId)
specifier|protected
name|PatchSet
name|getPatchSet
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
return|return
name|changeDataFactory
operator|.
name|create
argument_list|(
name|project
argument_list|,
name|psId
operator|.
name|changeId
argument_list|()
argument_list|)
operator|.
name|patchSet
argument_list|(
name|psId
argument_list|)
return|;
block|}
DECL|method|user (TestAccount testAccount)
specifier|protected
name|IdentifiedUser
name|user
parameter_list|(
name|TestAccount
name|testAccount
parameter_list|)
block|{
return|return
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|testAccount
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseCurrentRevisionResource (String changeId)
specifier|protected
name|RevisionResource
name|parseCurrentRevisionResource
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|ChangeResource
name|cr
init|=
name|parseChangeResource
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|int
name|psId
init|=
name|cr
operator|.
name|getChange
argument_list|()
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|revisions
operator|.
name|parse
argument_list|(
name|cr
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|psId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseRevisionResource (String changeId, int n)
specifier|protected
name|RevisionResource
name|parseRevisionResource
parameter_list|(
name|String
name|changeId
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|revisions
operator|.
name|parse
argument_list|(
name|parseChangeResource
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|IdString
operator|.
name|fromDecoded
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|n
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseRevisionResource (PushOneCommit.Result r)
specifier|protected
name|RevisionResource
name|parseRevisionResource
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|r
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
return|return
name|parseRevisionResource
argument_list|(
name|psId
operator|.
name|changeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|psId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseChangeResource (String changeId)
specifier|protected
name|ChangeResource
name|parseChangeResource
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ChangeNotes
argument_list|>
name|notes
init|=
name|changeFinder
operator|.
name|find
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notes
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|changeResourceFactory
operator|.
name|create
argument_list|(
name|notes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|atrScope
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getHead (Repository repo, String name)
specifier|protected
name|RevCommit
name|getHead
parameter_list|(
name|Repository
name|repo
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Ref
name|r
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// TODO(hanwen): push this down.
DECL|method|getRemoteHead (Project.NameKey project, String branch)
specifier|protected
name|RevCommit
name|getRemoteHead
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|branch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|projectOperations
operator|.
name|project
argument_list|(
name|project
argument_list|)
operator|.
name|getHead
argument_list|(
name|branch
argument_list|)
return|;
block|}
DECL|method|getRemoteHead ()
specifier|protected
name|RevCommit
name|getRemoteHead
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getRemoteHead
argument_list|(
name|project
argument_list|,
literal|"master"
argument_list|)
return|;
block|}
DECL|method|assertMailReplyTo (Message message, String email)
specifier|protected
name|void
name|assertMailReplyTo
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|email
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|message
operator|.
name|headers
argument_list|()
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"Reply-To"
argument_list|)
expr_stmt|;
name|EmailHeader
operator|.
name|String
name|replyTo
init|=
operator|(
name|EmailHeader
operator|.
name|String
operator|)
name|message
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"Reply-To"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|replyTo
operator|.
name|getString
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
DECL|method|fetchFromSubmitPreview (String changeId)
specifier|protected
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|fetchFromSubmitPreview
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|BinaryResult
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|current
argument_list|()
operator|.
name|submitPreview
argument_list|()
init|)
block|{
return|return
name|fetchFromBundles
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
comment|/**    * Fetches each bundle into a newly cloned repository, then it applies the bundle, and returns the    * resulting tree id.    *    *<p>Omits NoteDb meta refs.    */
DECL|method|fetchFromBundles (BinaryResult bundles)
specifier|protected
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|fetchFromBundles
parameter_list|(
name|BinaryResult
name|bundles
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|bundles
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"application/x-zip"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|()
decl_stmt|;
name|Path
name|previewPath
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"preview.zip"
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|previewPath
argument_list|)
init|)
block|{
name|bundles
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|FileSystem
name|zipFs
init|=
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|previewPath
argument_list|,
literal|null
argument_list|)
init|;
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|dirStream
operator|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|zipFs
operator|.
name|getRootDirectories
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|dirStream
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|bundleName
init|=
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|bundleName
operator|.
name|length
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|bundleName
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".git"
argument_list|)
expr_stmt|;
name|String
name|repoName
init|=
name|bundleName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|4
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|proj
init|=
name|Project
operator|.
name|nameKey
argument_list|(
name|repoName
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
name|localRepo
init|=
name|cloneProject
argument_list|(
name|proj
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|bundleStream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|p
argument_list|)
init|;
name|TransportBundleStream
name|tbs
operator|=
operator|new
name|TransportBundleStream
argument_list|(
name|localRepo
operator|.
name|getRepository
argument_list|()
argument_list|,
operator|new
name|URIish
argument_list|(
name|bundleName
argument_list|)
argument_list|,
name|bundleStream
argument_list|)
init|)
block|{
name|FetchResult
name|fr
init|=
name|tbs
operator|.
name|fetch
argument_list|(
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|RefSpec
argument_list|(
literal|"refs/*:refs/preview/*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Ref
name|r
range|:
name|fr
operator|.
name|getAdvertisedRefs
argument_list|()
control|)
block|{
name|String
name|refName
init|=
name|r
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|RefNames
operator|.
name|isNoteDbMetaRef
argument_list|(
name|refName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|RevCommit
name|c
init|=
name|localRepo
operator|.
name|getRevWalk
argument_list|()
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|BranchNameKey
operator|.
name|create
argument_list|(
name|proj
argument_list|,
name|refName
argument_list|)
argument_list|,
name|c
operator|.
name|getTree
argument_list|()
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertThat
argument_list|(
name|ret
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/** Assert that the given branches have the given tree ids. */
DECL|method|assertTrees (Project.NameKey proj, Map<BranchNameKey, ObjectId> trees)
specifier|protected
name|void
name|assertTrees
parameter_list|(
name|Project
operator|.
name|NameKey
name|proj
parameter_list|,
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|ObjectId
argument_list|>
name|trees
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRepository
argument_list|<
name|?
argument_list|>
name|localRepo
init|=
name|cloneProject
argument_list|(
name|proj
argument_list|)
decl_stmt|;
name|GitUtil
operator|.
name|fetch
argument_list|(
name|localRepo
argument_list|,
literal|"refs/*:refs/*"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|BranchNameKey
argument_list|,
name|RevTree
argument_list|>
name|refValues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BranchNameKey
name|b
range|:
name|trees
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|b
operator|.
name|project
argument_list|()
operator|.
name|equals
argument_list|(
name|proj
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Ref
name|r
init|=
name|localRepo
operator|.
name|getRepository
argument_list|()
operator|.
name|exactRef
argument_list|(
name|b
operator|.
name|branch
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|r
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|RevWalk
name|rw
init|=
name|localRepo
operator|.
name|getRevWalk
argument_list|()
decl_stmt|;
name|RevCommit
name|c
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|refValues
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|c
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trees
operator|.
name|get
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|refValues
operator|.
name|get
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|refValues
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsAnyIn
argument_list|(
name|trees
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDiffForNewFile ( DiffInfo diff, RevCommit commit, String path, String expectedContentSideB)
specifier|protected
name|void
name|assertDiffForNewFile
parameter_list|(
name|DiffInfo
name|diff
parameter_list|,
name|RevCommit
name|commit
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|expectedContentSideB
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedLines
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|expectedContentSideB
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|binary
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|changeType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|ChangeType
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|diffHeader
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|intralineStatus
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|webLinks
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaA
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|commitId
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|commit
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedContentType
init|=
literal|"text/plain"
decl_stmt|;
if|if
condition|(
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|expectedContentType
operator|=
name|FileContentUtil
operator|.
name|TEXT_X_GERRIT_COMMIT_MESSAGE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|expectedContentType
operator|=
name|FileContentUtil
operator|.
name|TEXT_X_GERRIT_MERGE_LIST
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|contentType
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedContentType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|lines
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedLines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|name
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|metaB
operator|.
name|webLinks
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|content
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DiffInfo
operator|.
name|ContentEntry
name|contentEntry
init|=
name|diff
operator|.
name|content
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|b
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|expectedLines
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|a
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|ab
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|common
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|editA
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|editB
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|contentEntry
operator|.
name|skip
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertPermitted (ChangeInfo info, String label, Integer... expected)
specifier|protected
name|void
name|assertPermitted
parameter_list|(
name|ChangeInfo
name|info
parameter_list|,
name|String
name|label
parameter_list|,
name|Integer
modifier|...
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|permittedLabels
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|info
operator|.
name|permittedLabels
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|strs
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|strs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertPermissions ( Project.NameKey project, GroupReference groupReference, String ref, boolean exclusive, String... permissionNames)
specifier|protected
name|void
name|assertPermissions
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|GroupReference
name|groupReference
parameter_list|,
name|String
name|ref
parameter_list|,
name|boolean
name|exclusive
parameter_list|,
name|String
modifier|...
name|permissionNames
parameter_list|)
throws|throws
name|IOException
block|{
name|ProjectConfig
name|cfg
init|=
name|projectCache
operator|.
name|checkedGet
argument_list|(
name|project
argument_list|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|AccessSection
name|accessSection
init|=
name|cfg
operator|.
name|getAccessSection
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|accessSection
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|permissionName
range|:
name|permissionNames
control|)
block|{
name|Permission
name|permission
init|=
name|accessSection
operator|.
name|getPermission
argument_list|(
name|permissionName
argument_list|)
decl_stmt|;
name|assertPermission
argument_list|(
name|permission
argument_list|,
name|permissionName
argument_list|,
name|exclusive
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertPermissionRule
argument_list|(
name|permission
operator|.
name|getRule
argument_list|(
name|groupReference
argument_list|)
argument_list|,
name|groupReference
argument_list|,
name|Action
operator|.
name|ALLOW
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertPermission ( Permission permission, String expectedName, boolean expectedExclusive, @Nullable String expectedLabelName)
specifier|protected
name|void
name|assertPermission
parameter_list|(
name|Permission
name|permission
parameter_list|,
name|String
name|expectedName
parameter_list|,
name|boolean
name|expectedExclusive
parameter_list|,
annotation|@
name|Nullable
name|String
name|expectedLabelName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|permission
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getExclusiveGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedExclusive
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|permission
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedLabelName
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPermissionRule ( PermissionRule rule, GroupReference expectedGroupReference, Action expectedAction, boolean expectedForce, int expectedMin, int expectedMax)
specifier|protected
name|void
name|assertPermissionRule
parameter_list|(
name|PermissionRule
name|rule
parameter_list|,
name|GroupReference
name|expectedGroupReference
parameter_list|,
name|Action
name|expectedAction
parameter_list|,
name|boolean
name|expectedForce
parameter_list|,
name|int
name|expectedMin
parameter_list|,
name|int
name|expectedMax
parameter_list|)
block|{
name|assertThat
argument_list|(
name|rule
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedGroupReference
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rule
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedAction
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rule
operator|.
name|getForce
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedForce
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rule
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rule
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedMax
argument_list|)
expr_stmt|;
block|}
DECL|method|group (AccountGroup.UUID groupUuid)
specifier|protected
name|InternalGroup
name|group
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
name|InternalGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|groupUuid
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|groupUuid
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|that
argument_list|(
name|group
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|group
return|;
block|}
DECL|method|groupRef (AccountGroup.UUID groupUuid)
specifier|protected
name|GroupReference
name|groupRef
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|)
block|{
name|GroupDescription
operator|.
name|Basic
name|groupDescription
init|=
name|groupBackend
operator|.
name|get
argument_list|(
name|groupUuid
argument_list|)
decl_stmt|;
return|return
operator|new
name|GroupReference
argument_list|(
name|groupDescription
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|groupDescription
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|group (String groupName)
specifier|protected
name|InternalGroup
name|group
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|InternalGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|AccountGroup
operator|.
name|nameKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|groupName
argument_list|)
operator|.
name|that
argument_list|(
name|group
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
return|return
name|group
return|;
block|}
DECL|method|groupRef (String groupName)
specifier|protected
name|GroupReference
name|groupRef
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|InternalGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|AccountGroup
operator|.
name|nameKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|group
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
return|return
operator|new
name|GroupReference
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|groupUuid (String groupName)
specifier|protected
name|AccountGroup
operator|.
name|UUID
name|groupUuid
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
return|return
name|group
argument_list|(
name|groupName
argument_list|)
operator|.
name|getGroupUUID
argument_list|()
return|;
block|}
DECL|method|adminGroup ()
specifier|protected
name|InternalGroup
name|adminGroup
parameter_list|()
block|{
return|return
name|group
argument_list|(
literal|"Administrators"
argument_list|)
return|;
block|}
DECL|method|adminGroupRef ()
specifier|protected
name|GroupReference
name|adminGroupRef
parameter_list|()
block|{
return|return
name|groupRef
argument_list|(
literal|"Administrators"
argument_list|)
return|;
block|}
DECL|method|adminGroupUuid ()
specifier|protected
name|AccountGroup
operator|.
name|UUID
name|adminGroupUuid
parameter_list|()
block|{
return|return
name|groupUuid
argument_list|(
literal|"Administrators"
argument_list|)
return|;
block|}
DECL|method|assertGroupDoesNotExist (String groupName)
specifier|protected
name|void
name|assertGroupDoesNotExist
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|InternalGroup
name|group
init|=
name|groupCache
operator|.
name|get
argument_list|(
name|AccountGroup
operator|.
name|nameKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertWithMessage
argument_list|(
name|groupName
argument_list|)
operator|.
name|that
argument_list|(
name|group
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotifyTo (TestAccount expected)
specifier|protected
name|void
name|assertNotifyTo
parameter_list|(
name|TestAccount
name|expected
parameter_list|)
block|{
name|assertNotifyTo
argument_list|(
name|expected
operator|.
name|email
argument_list|()
argument_list|,
name|expected
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotifyTo (String expectedEmail, String expectedFullname)
specifier|protected
name|void
name|assertNotifyTo
parameter_list|(
name|String
name|expectedEmail
parameter_list|,
name|String
name|expectedFullname
parameter_list|)
block|{
name|Address
name|expectedAddress
init|=
operator|new
name|Address
argument_list|(
name|expectedFullname
argument_list|,
name|expectedEmail
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"To"
argument_list|)
operator|)
operator|.
name|getAddressList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"Cc"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotifyCc (TestAccount expected)
specifier|protected
name|void
name|assertNotifyCc
parameter_list|(
name|TestAccount
name|expected
parameter_list|)
block|{
name|assertNotifyCc
argument_list|(
name|expected
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotifyCc (String expectedEmail, String expectedFullname)
specifier|protected
name|void
name|assertNotifyCc
parameter_list|(
name|String
name|expectedEmail
parameter_list|,
name|String
name|expectedFullname
parameter_list|)
block|{
name|Address
name|expectedAddress
init|=
operator|new
name|Address
argument_list|(
name|expectedFullname
argument_list|,
name|expectedEmail
argument_list|)
decl_stmt|;
name|assertNotifyCc
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotifyCc (Address expectedAddress)
specifier|protected
name|void
name|assertNotifyCc
parameter_list|(
name|Address
name|expectedAddress
parameter_list|)
block|{
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"To"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EmailHeader
operator|.
name|AddressList
operator|)
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"Cc"
argument_list|)
operator|)
operator|.
name|getAddressList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expectedAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotifyBcc (TestAccount expected)
specifier|protected
name|void
name|assertNotifyBcc
parameter_list|(
name|TestAccount
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|expected
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"To"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"Cc"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotifyBcc (String expectedEmail, String expectedFullName)
specifier|protected
name|void
name|assertNotifyBcc
parameter_list|(
name|String
name|expectedEmail
parameter_list|,
name|String
name|expectedFullName
parameter_list|)
block|{
name|assertThat
argument_list|(
name|sender
operator|.
name|getMessages
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|sender
operator|.
name|getMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|rcpt
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|Address
argument_list|(
name|expectedFullName
argument_list|,
name|expectedEmail
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"To"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|m
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"Cc"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
DECL|interface|ProjectWatchInfoConfiguration
specifier|protected
interface|interface
name|ProjectWatchInfoConfiguration
block|{
DECL|method|configure (ProjectWatchInfo pwi)
name|void
name|configure
parameter_list|(
name|ProjectWatchInfo
name|pwi
parameter_list|)
function_decl|;
block|}
DECL|method|watch (String project, ProjectWatchInfoConfiguration config)
specifier|protected
name|void
name|watch
parameter_list|(
name|String
name|project
parameter_list|,
name|ProjectWatchInfoConfiguration
name|config
parameter_list|)
throws|throws
name|RestApiException
block|{
name|ProjectWatchInfo
name|pwi
init|=
operator|new
name|ProjectWatchInfo
argument_list|()
decl_stmt|;
name|pwi
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|config
operator|.
name|configure
argument_list|(
name|pwi
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setWatchedProjects
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|pwi
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|watch (PushOneCommit.Result r, ProjectWatchInfoConfiguration config)
specifier|protected
name|void
name|watch
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|,
name|ProjectWatchInfoConfiguration
name|config
parameter_list|)
throws|throws
name|RestApiException
block|{
name|watch
argument_list|(
name|r
operator|.
name|getChange
argument_list|()
operator|.
name|project
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|watch (String project, String filter)
specifier|protected
name|void
name|watch
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|RestApiException
block|{
name|watch
argument_list|(
name|project
argument_list|,
name|pwi
lambda|->
block|{
name|pwi
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|pwi
operator|.
name|notifyAbandonedChanges
operator|=
literal|true
expr_stmt|;
name|pwi
operator|.
name|notifyNewChanges
operator|=
literal|true
expr_stmt|;
name|pwi
operator|.
name|notifyAllComments
operator|=
literal|true
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|watch (String project)
specifier|protected
name|void
name|watch
parameter_list|(
name|String
name|project
parameter_list|)
throws|throws
name|RestApiException
block|{
name|watch
argument_list|(
name|project
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertContent (PushOneCommit.Result pushResult, String path, String expectedContent)
specifier|protected
name|void
name|assertContent
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|pushResult
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|expectedContent
parameter_list|)
throws|throws
name|Exception
block|{
name|BinaryResult
name|bin
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|pushResult
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
name|pushResult
operator|.
name|getCommit
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|file
argument_list|(
name|path
argument_list|)
operator|.
name|content
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bin
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|String
name|res
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedContent
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewCommitWithoutChangeId (String branch, String file, String content)
specifier|protected
name|RevCommit
name|createNewCommitWithoutChangeId
parameter_list|(
name|String
name|branch
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|walk
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|RevCommit
name|tip
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|tip
operator|=
name|walk
operator|.
name|parseCommit
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestRepository
argument_list|<
name|?
argument_list|>
name|testSrcRepo
init|=
operator|new
name|TestRepository
argument_list|<>
argument_list|(
name|repo
argument_list|)
decl_stmt|;
name|TestRepository
argument_list|<
name|?
argument_list|>
operator|.
name|BranchBuilder
name|builder
init|=
name|testSrcRepo
operator|.
name|branch
argument_list|(
name|branch
argument_list|)
decl_stmt|;
name|RevCommit
name|revCommit
init|=
name|tip
operator|==
literal|null
condition|?
name|builder
operator|.
name|commit
argument_list|()
operator|.
name|message
argument_list|(
literal|"commit 1"
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|,
name|content
argument_list|)
operator|.
name|create
argument_list|()
else|:
name|builder
operator|.
name|commit
argument_list|()
operator|.
name|parent
argument_list|(
name|tip
argument_list|)
operator|.
name|message
argument_list|(
literal|"commit 1"
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|,
name|content
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|GitUtil
operator|.
name|getChangeId
argument_list|(
name|testSrcRepo
argument_list|,
name|revCommit
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
return|return
name|revCommit
return|;
block|}
block|}
DECL|method|parseCurrentRevision (RevWalk rw, String changeId)
specifier|protected
name|RevCommit
name|parseCurrentRevision
parameter_list|(
name|RevWalk
name|rw
parameter_list|,
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|get
argument_list|(
name|changeId
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|)
operator|.
name|currentRevision
argument_list|)
argument_list|)
return|;
block|}
DECL|method|configLabel (String label, LabelFunction func)
specifier|protected
name|void
name|configLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|LabelFunction
name|func
parameter_list|)
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
name|label
argument_list|,
name|func
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|configLabel (String label, LabelFunction func, List<String> refPatterns)
specifier|protected
name|void
name|configLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|LabelFunction
name|func
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|refPatterns
parameter_list|)
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
name|project
argument_list|,
name|label
argument_list|,
name|func
argument_list|,
name|refPatterns
argument_list|,
name|value
argument_list|(
literal|1
argument_list|,
literal|"Passes"
argument_list|)
argument_list|,
name|value
argument_list|(
literal|0
argument_list|,
literal|"No score"
argument_list|)
argument_list|,
name|value
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|configLabel ( Project.NameKey project, String label, LabelFunction func, LabelValue... value)
specifier|protected
name|void
name|configLabel
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|label
parameter_list|,
name|LabelFunction
name|func
parameter_list|,
name|LabelValue
modifier|...
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|configLabel
argument_list|(
name|project
argument_list|,
name|label
argument_list|,
name|func
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|configLabel ( Project.NameKey project, String label, LabelFunction func, List<String> refPatterns, LabelValue... value)
specifier|private
name|void
name|configLabel
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|label
parameter_list|,
name|LabelFunction
name|func
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|refPatterns
parameter_list|,
name|LabelValue
modifier|...
name|value
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|LabelType
name|labelType
init|=
name|category
argument_list|(
name|label
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|labelType
operator|.
name|setFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|labelType
operator|.
name|setRefPatterns
argument_list|(
name|refPatterns
argument_list|)
expr_stmt|;
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelSections
argument_list|()
operator|.
name|put
argument_list|(
name|labelType
operator|.
name|getName
argument_list|()
argument_list|,
name|labelType
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|fail (@ullable String format, Object... args)
specifier|protected
name|void
name|fail
parameter_list|(
annotation|@
name|Nullable
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|assert_
argument_list|()
operator|.
name|fail
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|enableCreateNewChangeForAllNotInTarget ()
specifier|protected
name|void
name|enableCreateNewChangeForAllNotInTarget
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ProjectConfigUpdate
name|u
init|=
name|updateProject
argument_list|(
name|project
argument_list|)
init|)
block|{
name|u
operator|.
name|getConfig
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|setBooleanConfig
argument_list|(
name|BooleanProjectConfig
operator|.
name|CREATE_NEW_CHANGE_FOR_ALL_NOT_IN_TARGET
argument_list|,
name|InheritableBoolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|u
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateProject (Project.NameKey projectName)
specifier|protected
name|ProjectConfigUpdate
name|updateProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ProjectConfigUpdate
argument_list|(
name|projectName
argument_list|)
return|;
block|}
DECL|class|ProjectConfigUpdate
specifier|protected
class|class
name|ProjectConfigUpdate
implements|implements
name|AutoCloseable
block|{
DECL|field|projectConfig
specifier|private
specifier|final
name|ProjectConfig
name|projectConfig
decl_stmt|;
DECL|field|metaDataUpdate
specifier|private
name|MetaDataUpdate
name|metaDataUpdate
decl_stmt|;
DECL|method|ProjectConfigUpdate (Project.NameKey projectName)
specifier|private
name|ProjectConfigUpdate
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|)
throws|throws
name|Exception
block|{
name|metaDataUpdate
operator|=
name|metaDataUpdateFactory
operator|.
name|create
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
name|projectConfig
operator|=
name|projectConfigFactory
operator|.
name|read
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfig ()
specifier|public
name|ProjectConfig
name|getConfig
parameter_list|()
block|{
return|return
name|projectConfig
return|;
block|}
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|Exception
block|{
name|metaDataUpdate
operator|.
name|setAuthor
argument_list|(
name|identifiedUserFactory
operator|.
name|create
argument_list|(
name|admin
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|projectConfig
operator|.
name|commit
argument_list|(
name|metaDataUpdate
argument_list|)
expr_stmt|;
name|metaDataUpdate
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaDataUpdate
operator|=
literal|null
expr_stmt|;
name|projectCache
operator|.
name|evict
argument_list|(
name|projectConfig
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|metaDataUpdate
operator|!=
literal|null
condition|)
block|{
name|metaDataUpdate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getChangeMetaCommitsInReverseOrder (Change.Id changeId)
specifier|protected
name|List
argument_list|<
name|RevCommit
argument_list|>
name|getChangeMetaCommitsInReverseOrder
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
init|;
name|RevWalk
name|revWalk
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
init|)
block|{
name|revWalk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|TOPO
argument_list|)
expr_stmt|;
name|revWalk
operator|.
name|sort
argument_list|(
name|RevSort
operator|.
name|REVERSE
argument_list|)
expr_stmt|;
name|Ref
name|metaRef
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|RefNames
operator|.
name|changeMetaRef
argument_list|(
name|changeId
argument_list|)
argument_list|)
decl_stmt|;
name|revWalk
operator|.
name|markStart
argument_list|(
name|revWalk
operator|.
name|parseCommit
argument_list|(
name|metaRef
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|revWalk
argument_list|)
return|;
block|}
block|}
DECL|method|getChangeSortedComments (int changeNum)
specifier|protected
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|getChangeSortedComments
parameter_list|(
name|int
name|changeNum
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|commentsMap
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeNum
argument_list|)
operator|.
name|comments
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|e
range|:
name|commentsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|CommentInfo
name|c
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|c
operator|.
name|path
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
comment|// Set the comment's path field.
name|comments
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|comments
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|c
lambda|->
name|c
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|comments
return|;
block|}
DECL|method|installPlugin (String pluginName, Class<? extends Module> sysModuleClass)
specifier|protected
name|AutoCloseable
name|installPlugin
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|sysModuleClass
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|installPlugin
argument_list|(
name|pluginName
argument_list|,
name|sysModuleClass
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|installPlugin ( String pluginName, @Nullable Class<? extends Module> sysModuleClass, @Nullable Class<? extends Module> httpModuleClass, @Nullable Class<? extends Module> sshModuleClass)
specifier|protected
name|AutoCloseable
name|installPlugin
parameter_list|(
name|String
name|pluginName
parameter_list|,
annotation|@
name|Nullable
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|sysModuleClass
parameter_list|,
annotation|@
name|Nullable
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|httpModuleClass
parameter_list|,
annotation|@
name|Nullable
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|sshModuleClass
parameter_list|)
throws|throws
name|Exception
block|{
name|checkStatic
argument_list|(
name|sysModuleClass
argument_list|)
expr_stmt|;
name|checkStatic
argument_list|(
name|httpModuleClass
argument_list|)
expr_stmt|;
name|checkStatic
argument_list|(
name|sshModuleClass
argument_list|)
expr_stmt|;
name|TestServerPlugin
name|plugin
init|=
operator|new
name|TestServerPlugin
argument_list|(
name|pluginName
argument_list|,
literal|"http://example.com/"
operator|+
name|pluginName
argument_list|,
name|pluginUserFactory
operator|.
name|create
argument_list|(
name|pluginName
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|sysModuleClass
operator|!=
literal|null
condition|?
name|sysModuleClass
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|httpModuleClass
operator|!=
literal|null
condition|?
name|httpModuleClass
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|sshModuleClass
operator|!=
literal|null
condition|?
name|sshModuleClass
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|sitePaths
operator|.
name|data_dir
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|start
argument_list|(
name|pluginGuiceEnvironment
argument_list|)
expr_stmt|;
name|pluginGuiceEnvironment
operator|.
name|onStartPlugin
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
return|return
parameter_list|()
lambda|->
block|{
name|plugin
operator|.
name|stop
argument_list|(
name|pluginGuiceEnvironment
argument_list|)
expr_stmt|;
name|pluginGuiceEnvironment
operator|.
name|onStopPlugin
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|checkStatic (@ullable Class<? extends Module> moduleClass)
specifier|private
specifier|static
name|void
name|checkStatic
parameter_list|(
annotation|@
name|Nullable
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleClass
parameter_list|)
block|{
if|if
condition|(
name|moduleClass
operator|!=
literal|null
condition|)
block|{
name|checkArgument
argument_list|(
operator|(
name|moduleClass
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
argument_list|,
literal|"module must be static: %s"
argument_list|,
name|moduleClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

