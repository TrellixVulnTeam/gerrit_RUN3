begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
operator|.
name|REFS_USERS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MultimapBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|RefState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupIncludeCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AllUsersName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|RefPatternMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Saves the states of given projects and resets the project states on close.  *  *<p>Saving the project states is done by saving the states of all refs in the project. On close  * those refs are reset to the saved states. Refs that were newly created are deleted.  *  *<p>By providing ref patterns per project it can be controlled which refs should be reset on  * close.  *  *<p>If resetting touches {@code refs/meta/config} branches the corresponding projects are evicted  * from the project cache.  *  *<p>If resetting touches user branches or the {@code refs/meta/external-ids} branch the  * corresponding accounts are evicted from the account cache and also if needed from the cache in  * {@link AccountCreator}.  *  *<p>At the moment this class has the following limitations:  *  *<ul>  *<li>Resetting group branches doesn't evict the corresponding groups from the group cache.  *<li>Changes are not reindexed if change meta refs are reset.  *<li>Changes are not reindexed if starred-changes refs in All-Users are reset.  *<li>If accounts are deleted changes may still refer to these accounts (e.g. as reviewers).  *</ul>  *  * Primarily this class is intended to reset the states of the All-Projects and All-Users projects  * after each test. These projects rarely contain changes and it's currently not a problem if these  * changes get stale. For creating changes each test gets a brand new project. Since this project is  * not used outside of the test method that creates it, it doesn't need to be reset.  */
end_comment

begin_class
DECL|class|ProjectResetter
specifier|public
class|class
name|ProjectResetter
implements|implements
name|AutoCloseable
block|{
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|builder ()
name|Builder
name|builder
parameter_list|()
function_decl|;
block|}
DECL|field|repoManager
specifier|private
specifier|final
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
specifier|private
specifier|final
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|accountCreator
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountCreator
name|accountCreator
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|accountIndexer
annotation|@
name|Nullable
specifier|private
specifier|final
name|AccountIndexer
name|accountIndexer
decl_stmt|;
DECL|field|groupCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|groupIncludeCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|groupIndexer
annotation|@
name|Nullable
specifier|private
specifier|final
name|GroupIndexer
name|groupIndexer
decl_stmt|;
DECL|field|projectCache
annotation|@
name|Nullable
specifier|private
specifier|final
name|ProjectCache
name|projectCache
decl_stmt|;
annotation|@
name|Inject
DECL|method|Builder ( GitRepositoryManager repoManager, AllUsersName allUsersName, @Nullable AccountCreator accountCreator, @Nullable AccountCache accountCache, @Nullable AccountIndexer accountIndexer, @Nullable GroupCache groupCache, @Nullable GroupIncludeCache groupIncludeCache, @Nullable GroupIndexer groupIndexer, @Nullable ProjectCache projectCache)
specifier|public
name|Builder
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
annotation|@
name|Nullable
name|AccountCreator
name|accountCreator
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|Nullable
name|AccountIndexer
name|accountIndexer
parameter_list|,
annotation|@
name|Nullable
name|GroupCache
name|groupCache
parameter_list|,
annotation|@
name|Nullable
name|GroupIncludeCache
name|groupIncludeCache
parameter_list|,
annotation|@
name|Nullable
name|GroupIndexer
name|groupIndexer
parameter_list|,
annotation|@
name|Nullable
name|ProjectCache
name|projectCache
parameter_list|)
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|accountCreator
operator|=
name|accountCreator
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|accountIndexer
operator|=
name|accountIndexer
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|groupIncludeCache
operator|=
name|groupIncludeCache
expr_stmt|;
name|this
operator|.
name|groupIndexer
operator|=
name|groupIndexer
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
block|}
DECL|method|build (ProjectResetter.Config input)
specifier|public
name|ProjectResetter
name|build
parameter_list|(
name|ProjectResetter
operator|.
name|Config
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ProjectResetter
argument_list|(
name|repoManager
argument_list|,
name|allUsersName
argument_list|,
name|accountCreator
argument_list|,
name|accountCache
argument_list|,
name|accountIndexer
argument_list|,
name|groupCache
argument_list|,
name|groupIncludeCache
argument_list|,
name|groupIndexer
argument_list|,
name|projectCache
argument_list|,
name|input
operator|.
name|refsByProject
argument_list|)
return|;
block|}
block|}
DECL|class|Config
specifier|public
specifier|static
class|class
name|Config
block|{
DECL|field|refsByProject
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|refsByProject
decl_stmt|;
DECL|method|Config ()
specifier|public
name|Config
parameter_list|()
block|{
name|this
operator|.
name|refsByProject
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|reset (Project.NameKey project, String... refPatterns)
specifier|public
name|Config
name|reset
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
modifier|...
name|refPatterns
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|refPatternList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|refPatterns
argument_list|)
decl_stmt|;
if|if
condition|(
name|refPatternList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|refPatternList
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|RefNames
operator|.
name|REFS
operator|+
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|refsByProject
operator|.
name|putAll
argument_list|(
name|project
argument_list|,
name|refPatternList
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|field|repoManager
annotation|@
name|Inject
specifier|private
name|GitRepositoryManager
name|repoManager
decl_stmt|;
DECL|field|allUsersName
annotation|@
name|Inject
specifier|private
name|AllUsersName
name|allUsersName
decl_stmt|;
DECL|field|accountCreator
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|AccountCreator
name|accountCreator
decl_stmt|;
DECL|field|accountCache
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|AccountCache
name|accountCache
decl_stmt|;
DECL|field|groupCache
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|GroupCache
name|groupCache
decl_stmt|;
DECL|field|groupIncludeCache
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|GroupIncludeCache
name|groupIncludeCache
decl_stmt|;
DECL|field|groupIndexer
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|GroupIndexer
name|groupIndexer
decl_stmt|;
DECL|field|accountIndexer
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|AccountIndexer
name|accountIndexer
decl_stmt|;
DECL|field|projectCache
annotation|@
name|Inject
annotation|@
name|Nullable
specifier|private
name|ProjectCache
name|projectCache
decl_stmt|;
DECL|field|refsPatternByProject
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|refsPatternByProject
decl_stmt|;
comment|// State to which to reset to.
DECL|field|savedRefStatesByProject
specifier|private
specifier|final
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefState
argument_list|>
name|savedRefStatesByProject
decl_stmt|;
comment|// Results of the resetting
DECL|field|keptRefsByProject
specifier|private
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|keptRefsByProject
decl_stmt|;
DECL|field|restoredRefsByProject
specifier|private
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|restoredRefsByProject
decl_stmt|;
DECL|field|deletedRefsByProject
specifier|private
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|deletedRefsByProject
decl_stmt|;
DECL|method|ProjectResetter ( GitRepositoryManager repoManager, AllUsersName allUsersName, @Nullable AccountCreator accountCreator, @Nullable AccountCache accountCache, @Nullable AccountIndexer accountIndexer, @Nullable GroupCache groupCache, @Nullable GroupIncludeCache groupIncludeCache, @Nullable GroupIndexer groupIndexer, @Nullable ProjectCache projectCache, Multimap<Project.NameKey, String> refPatternByProject)
specifier|private
name|ProjectResetter
parameter_list|(
name|GitRepositoryManager
name|repoManager
parameter_list|,
name|AllUsersName
name|allUsersName
parameter_list|,
annotation|@
name|Nullable
name|AccountCreator
name|accountCreator
parameter_list|,
annotation|@
name|Nullable
name|AccountCache
name|accountCache
parameter_list|,
annotation|@
name|Nullable
name|AccountIndexer
name|accountIndexer
parameter_list|,
annotation|@
name|Nullable
name|GroupCache
name|groupCache
parameter_list|,
annotation|@
name|Nullable
name|GroupIncludeCache
name|groupIncludeCache
parameter_list|,
annotation|@
name|Nullable
name|GroupIndexer
name|groupIndexer
parameter_list|,
annotation|@
name|Nullable
name|ProjectCache
name|projectCache
parameter_list|,
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|refPatternByProject
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|repoManager
operator|=
name|repoManager
expr_stmt|;
name|this
operator|.
name|allUsersName
operator|=
name|allUsersName
expr_stmt|;
name|this
operator|.
name|accountCreator
operator|=
name|accountCreator
expr_stmt|;
name|this
operator|.
name|accountCache
operator|=
name|accountCache
expr_stmt|;
name|this
operator|.
name|accountIndexer
operator|=
name|accountIndexer
expr_stmt|;
name|this
operator|.
name|groupCache
operator|=
name|groupCache
expr_stmt|;
name|this
operator|.
name|groupIndexer
operator|=
name|groupIndexer
expr_stmt|;
name|this
operator|.
name|groupIncludeCache
operator|=
name|groupIncludeCache
expr_stmt|;
name|this
operator|.
name|projectCache
operator|=
name|projectCache
expr_stmt|;
name|this
operator|.
name|refsPatternByProject
operator|=
name|refPatternByProject
expr_stmt|;
name|this
operator|.
name|savedRefStatesByProject
operator|=
name|readRefStates
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|keptRefsByProject
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|restoredRefsByProject
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|deletedRefsByProject
operator|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|restoreRefs
argument_list|()
expr_stmt|;
name|deleteNewlyCreatedRefs
argument_list|()
expr_stmt|;
name|evictCachesAndReindex
argument_list|()
expr_stmt|;
block|}
comment|/** Read the states of all matching refs. */
DECL|method|readRefStates ()
specifier|private
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefState
argument_list|>
name|readRefStates
parameter_list|()
throws|throws
name|IOException
block|{
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|RefState
argument_list|>
name|refStatesByProject
init|=
name|MultimapBuilder
operator|.
name|hashKeys
argument_list|()
operator|.
name|arrayListValues
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|refsPatternByProject
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
init|)
block|{
name|Collection
argument_list|<
name|Ref
argument_list|>
name|refs
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|refPattern
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|RefPatternMatcher
name|matcher
init|=
name|RefPatternMatcher
operator|.
name|getMatcher
argument_list|(
name|refPattern
argument_list|)
decl_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|refStatesByProject
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|RefState
operator|.
name|create
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|refStatesByProject
return|;
block|}
DECL|method|restoreRefs ()
specifier|private
name|void
name|restoreRefs
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Collection
argument_list|<
name|RefState
argument_list|>
argument_list|>
name|e
range|:
name|savedRefStatesByProject
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|RefState
name|refState
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|refState
operator|.
name|match
argument_list|(
name|repo
argument_list|)
condition|)
block|{
name|keptRefsByProject
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|refState
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Ref
name|ref
init|=
name|repo
operator|.
name|exactRef
argument_list|(
name|refState
operator|.
name|ref
argument_list|()
argument_list|)
decl_stmt|;
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|refState
operator|.
name|ref
argument_list|()
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ref
operator|!=
literal|null
condition|?
name|ref
operator|.
name|getObjectId
argument_list|()
else|:
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|refState
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|updateRef
operator|.
name|update
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|result
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
operator|||
name|result
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|NEW
argument_list|,
literal|"resetting branch %s in %s failed"
argument_list|,
name|refState
operator|.
name|ref
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|restoredRefsByProject
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|refState
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|deleteNewlyCreatedRefs ()
specifier|private
name|void
name|deleteNewlyCreatedRefs
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|refsPatternByProject
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
init|)
block|{
name|Collection
argument_list|<
name|Ref
argument_list|>
name|nonRestoredRefs
init|=
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|keptRefsByProject
operator|.
name|containsEntry
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|restoredRefsByProject
operator|.
name|containsEntry
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|refPattern
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|RefPatternMatcher
name|matcher
init|=
name|RefPatternMatcher
operator|.
name|getMatcher
argument_list|(
name|refPattern
argument_list|)
decl_stmt|;
for|for
control|(
name|Ref
name|ref
range|:
name|nonRestoredRefs
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|&&
operator|!
name|deletedRefsByProject
operator|.
name|containsEntry
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RefUpdate
name|updateRef
init|=
name|repo
operator|.
name|updateRef
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|updateRef
operator|.
name|setExpectedOldObjectId
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setNewObjectId
argument_list|(
name|ObjectId
operator|.
name|zeroId
argument_list|()
argument_list|)
expr_stmt|;
name|updateRef
operator|.
name|setForceUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RefUpdate
operator|.
name|Result
name|result
init|=
name|updateRef
operator|.
name|delete
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|result
operator|==
name|RefUpdate
operator|.
name|Result
operator|.
name|FORCED
argument_list|,
literal|"deleting branch %s in %s failed"
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|deletedRefsByProject
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|evictCachesAndReindex ()
specifier|private
name|void
name|evictCachesAndReindex
parameter_list|()
throws|throws
name|IOException
block|{
name|evictAndReindexProjects
argument_list|()
expr_stmt|;
name|evictAndReindexAccounts
argument_list|()
expr_stmt|;
name|evictAndReindexGroups
argument_list|()
expr_stmt|;
comment|// TODO(ekempin): Reindex changes if starred-changes refs in All-Users were modified.
block|}
comment|/** Evict projects for which the config was changed. */
DECL|method|evictAndReindexProjects ()
specifier|private
name|void
name|evictAndReindexProjects
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|projectCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Project
operator|.
name|NameKey
name|project
range|:
name|Sets
operator|.
name|union
argument_list|(
name|projectsWithConfigChanges
argument_list|(
name|restoredRefsByProject
argument_list|)
argument_list|,
name|projectsWithConfigChanges
argument_list|(
name|deletedRefsByProject
argument_list|)
argument_list|)
control|)
block|{
name|projectCache
operator|.
name|evict
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|projectsWithConfigChanges ( Multimap<Project.NameKey, String> projects)
specifier|private
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projectsWithConfigChanges
parameter_list|(
name|Multimap
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|,
name|String
argument_list|>
name|projects
parameter_list|)
block|{
return|return
name|projects
operator|.
name|entries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|REFS_CONFIG
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
comment|/** Evict accounts that were modified. */
DECL|method|evictAndReindexAccounts ()
specifier|private
name|void
name|evictAndReindexAccounts
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|deletedAccounts
init|=
name|accountIds
argument_list|(
name|deletedRefsByProject
operator|.
name|get
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountCreator
operator|!=
literal|null
condition|)
block|{
name|accountCreator
operator|.
name|evict
argument_list|(
name|deletedAccounts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accountCache
operator|!=
literal|null
operator|||
name|accountIndexer
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|modifiedAccounts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|accountIds
argument_list|(
name|restoredRefsByProject
operator|.
name|get
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|restoredRefsByProject
operator|.
name|get
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|contains
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
operator|||
name|deletedRefsByProject
operator|.
name|get
argument_list|(
name|allUsersName
argument_list|)
operator|.
name|contains
argument_list|(
name|RefNames
operator|.
name|REFS_EXTERNAL_IDS
argument_list|)
condition|)
block|{
comment|// The external IDs have been modified but we don't know which accounts were affected.
comment|// Make sure all accounts are evicted and reindexed.
try|try
init|(
name|Repository
name|repo
init|=
name|repoManager
operator|.
name|openRepository
argument_list|(
name|allUsersName
argument_list|)
init|)
block|{
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|accountIds
argument_list|(
name|repo
argument_list|)
control|)
block|{
name|evictAndReindexAccount
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove deleted accounts from the cache and index.
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|deletedAccounts
control|)
block|{
name|evictAndReindexAccount
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Evict and reindex all modified and deleted accounts.
for|for
control|(
name|Account
operator|.
name|Id
name|id
range|:
name|Sets
operator|.
name|union
argument_list|(
name|modifiedAccounts
argument_list|,
name|deletedAccounts
argument_list|)
control|)
block|{
name|evictAndReindexAccount
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Evict groups that were modified. */
DECL|method|evictAndReindexGroups ()
specifier|private
name|void
name|evictAndReindexGroups
parameter_list|()
block|{
if|if
condition|(
name|groupCache
operator|!=
literal|null
operator|||
name|groupIndexer
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|modifiedGroups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|groupUUIDs
argument_list|(
name|restoredRefsByProject
operator|.
name|get
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|deletedGroups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|groupUUIDs
argument_list|(
name|deletedRefsByProject
operator|.
name|get
argument_list|(
name|allUsersName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Evict and reindex all modified and deleted groups.
for|for
control|(
name|AccountGroup
operator|.
name|UUID
name|uuid
range|:
name|Sets
operator|.
name|union
argument_list|(
name|modifiedGroups
argument_list|,
name|deletedGroups
argument_list|)
control|)
block|{
name|evictAndReindexGroup
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|evictAndReindexAccount (Account.Id accountId)
specifier|private
name|void
name|evictAndReindexAccount
parameter_list|(
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
if|if
condition|(
name|accountCache
operator|!=
literal|null
condition|)
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupIncludeCache
operator|!=
literal|null
condition|)
block|{
name|groupIncludeCache
operator|.
name|evictGroupsWithMember
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accountIndexer
operator|!=
literal|null
condition|)
block|{
name|accountIndexer
operator|.
name|index
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|evictAndReindexGroup (AccountGroup.UUID uuid)
specifier|private
name|void
name|evictAndReindexGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
if|if
condition|(
name|groupCache
operator|!=
literal|null
condition|)
block|{
name|groupCache
operator|.
name|evict
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupIncludeCache
operator|!=
literal|null
condition|)
block|{
name|groupIncludeCache
operator|.
name|evictParentGroupsOf
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupIndexer
operator|!=
literal|null
condition|)
block|{
name|groupIndexer
operator|.
name|index
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|accountIds (Repository repo)
specifier|private
specifier|static
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|(
name|Repository
name|repo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|accountIds
argument_list|(
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefsByPrefix
argument_list|(
name|REFS_USERS
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Ref
operator|::
name|getName
argument_list|)
argument_list|)
return|;
block|}
DECL|method|accountIds (Stream<String> refs)
specifier|private
specifier|static
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|accountIds
parameter_list|(
name|Stream
argument_list|<
name|String
argument_list|>
name|refs
parameter_list|)
block|{
return|return
name|refs
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|startsWith
argument_list|(
name|REFS_USERS
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Account
operator|.
name|Id
operator|::
name|fromRef
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|groupUUIDs (Collection<String> refs)
specifier|private
name|Set
argument_list|<
name|AccountGroup
operator|.
name|UUID
argument_list|>
name|groupUUIDs
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|refs
parameter_list|)
block|{
return|return
name|refs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|RefNames
operator|::
name|isRefsGroups
argument_list|)
operator|.
name|map
argument_list|(
name|AccountGroup
operator|.
name|UUID
operator|::
name|fromRef
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

