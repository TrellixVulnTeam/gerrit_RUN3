begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertAbout
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
operator|.
name|BCC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
operator|.
name|CC
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
operator|.
name|TO
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|FailureMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|ReviewResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|projects
operator|.
name|ConfigInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
operator|.
name|EmailStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|InheritableBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ReviewerState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|ProjectWatches
operator|.
name|NotifyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|EmailHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|send
operator|.
name|EmailHeader
operator|.
name|AddressList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|junit
operator|.
name|TestRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|AbstractNotificationTest
specifier|public
specifier|abstract
class|class
name|AbstractNotificationTest
extends|extends
name|AbstractDaemonTest
block|{
annotation|@
name|Before
DECL|method|enableReviewerByEmail ()
specifier|public
name|void
name|enableReviewerByEmail
parameter_list|()
throws|throws
name|Exception
block|{
name|setApiUser
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|ConfigInput
name|conf
init|=
operator|new
name|ConfigInput
argument_list|()
decl_stmt|;
name|conf
operator|.
name|enableReviewerByEmail
operator|=
name|InheritableBoolean
operator|.
name|TRUE
expr_stmt|;
name|gApi
operator|.
name|projects
argument_list|()
operator|.
name|name
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|config
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resetProjects ()
specifier|protected
name|ProjectResetter
operator|.
name|Config
name|resetProjects
parameter_list|()
block|{
comment|// Don't reset anything so that stagedUsers can be cached across all tests.
comment|// Without this caching these tests become much too slow.
return|return
operator|new
name|ProjectResetter
operator|.
name|Config
argument_list|()
return|;
block|}
DECL|method|assertThat (FakeEmailSender sender)
specifier|protected
specifier|static
name|FakeEmailSenderSubject
name|assertThat
parameter_list|(
name|FakeEmailSender
name|sender
parameter_list|)
block|{
return|return
name|assertAbout
argument_list|(
name|FakeEmailSenderSubject
operator|::
operator|new
argument_list|)
operator|.
name|that
argument_list|(
name|sender
argument_list|)
return|;
block|}
DECL|method|setEmailStrategy (TestAccount account, EmailStrategy strategy)
specifier|protected
name|void
name|setEmailStrategy
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|EmailStrategy
name|strategy
parameter_list|)
throws|throws
name|Exception
block|{
name|setEmailStrategy
argument_list|(
name|account
argument_list|,
name|strategy
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setEmailStrategy (TestAccount account, EmailStrategy strategy, boolean record)
specifier|protected
name|void
name|setEmailStrategy
parameter_list|(
name|TestAccount
name|account
parameter_list|,
name|EmailStrategy
name|strategy
parameter_list|,
name|boolean
name|record
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|record
condition|)
block|{
name|accountsModifyingEmailStrategy
operator|.
name|add
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
name|setApiUser
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|GeneralPreferencesInfo
name|prefs
init|=
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|emailStrategy
operator|=
name|strategy
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeEmailSenderSubject
specifier|protected
specifier|static
class|class
name|FakeEmailSenderSubject
extends|extends
name|Subject
argument_list|<
name|FakeEmailSenderSubject
argument_list|,
name|FakeEmailSender
argument_list|>
block|{
DECL|field|message
specifier|private
name|Message
name|message
decl_stmt|;
DECL|field|users
specifier|private
name|StagedUsers
name|users
decl_stmt|;
DECL|field|recipients
specifier|private
name|Map
argument_list|<
name|RecipientType
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|recipients
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|accountedFor
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|accountedFor
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FakeEmailSenderSubject (FailureMetadata failureMetadata, FakeEmailSender target)
name|FakeEmailSenderSubject
parameter_list|(
name|FailureMetadata
name|failureMetadata
parameter_list|,
name|FakeEmailSender
name|target
parameter_list|)
block|{
name|super
argument_list|(
name|failureMetadata
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
DECL|method|notSent ()
specifier|public
name|FakeEmailSenderSubject
name|notSent
parameter_list|()
block|{
if|if
condition|(
name|actual
argument_list|()
operator|.
name|peekMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"a message wasn't sent"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|sent (String messageType, StagedUsers users)
specifier|public
name|FakeEmailSenderSubject
name|sent
parameter_list|(
name|String
name|messageType
parameter_list|,
name|StagedUsers
name|users
parameter_list|)
block|{
name|message
operator|=
name|actual
argument_list|()
operator|.
name|nextMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"a message was sent"
argument_list|)
expr_stmt|;
block|}
name|recipients
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|recipients
operator|.
name|put
argument_list|(
name|TO
argument_list|,
name|parseAddresses
argument_list|(
name|message
argument_list|,
literal|"To"
argument_list|)
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|put
argument_list|(
name|CC
argument_list|,
name|parseAddresses
argument_list|(
name|message
argument_list|,
literal|"Cc"
argument_list|)
argument_list|)
expr_stmt|;
name|recipients
operator|.
name|put
argument_list|(
name|BCC
argument_list|,
name|message
operator|.
name|rcpt
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Address
operator|::
name|getEmail
argument_list|)
operator|.
name|filter
argument_list|(
name|e
lambda|->
operator|!
name|recipients
operator|.
name|get
argument_list|(
name|TO
argument_list|)
operator|.
name|contains
argument_list|(
name|e
argument_list|)
operator|&&
operator|!
name|recipients
operator|.
name|get
argument_list|(
name|CC
argument_list|)
operator|.
name|contains
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|users
operator|=
name|users
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|headers
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"X-Gerrit-MessageType"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"a message was sent with X-Gerrit-MessageType header"
argument_list|)
expr_stmt|;
block|}
name|EmailHeader
name|header
init|=
name|message
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
literal|"X-Gerrit-MessageType"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|equals
argument_list|(
operator|new
name|EmailHeader
operator|.
name|String
argument_list|(
name|messageType
argument_list|)
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"message of type "
operator|+
name|messageType
operator|+
literal|" was sent; X-Gerrit-MessageType is "
operator|+
name|header
argument_list|)
expr_stmt|;
block|}
comment|// Return a named subject that displays a human-readable table of
comment|// recipients.
return|return
name|named
argument_list|(
name|recipientMapToString
argument_list|(
name|recipients
argument_list|,
name|e
lambda|->
name|users
operator|.
name|emailToName
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recipientMapToString ( Map<RecipientType, List<String>> recipients, Function<String, String> emailToName)
specifier|private
specifier|static
name|String
name|recipientMapToString
parameter_list|(
name|Map
argument_list|<
name|RecipientType
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|recipients
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emailToName
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|RecipientType
name|type
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
name|TO
argument_list|,
name|CC
argument_list|,
name|BCC
argument_list|)
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|delim
init|=
literal|" "
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|recipients
operator|.
name|get
argument_list|(
name|type
argument_list|)
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|emailToName
operator|.
name|apply
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|", "
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseAddresses (Message msg, String headerName)
name|List
argument_list|<
name|String
argument_list|>
name|parseAddresses
parameter_list|(
name|Message
name|msg
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
name|EmailHeader
name|header
init|=
name|msg
operator|.
name|headers
argument_list|()
operator|.
name|get
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|Truth
operator|.
name|assertThat
argument_list|(
name|header
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|AddressList
operator|.
name|class
argument_list|)
expr_stmt|;
name|AddressList
name|addrList
init|=
operator|(
name|AddressList
operator|)
name|header
decl_stmt|;
return|return
name|addrList
operator|.
name|getAddressList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Address
operator|::
name|getEmail
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|to (String... emails)
specifier|public
name|FakeEmailSenderSubject
name|to
parameter_list|(
name|String
modifier|...
name|emails
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|users
operator|.
name|supportReviewersByEmail
condition|?
name|TO
else|:
literal|null
argument_list|,
name|emails
argument_list|)
return|;
block|}
DECL|method|cc (String... emails)
specifier|public
name|FakeEmailSenderSubject
name|cc
parameter_list|(
name|String
modifier|...
name|emails
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|users
operator|.
name|supportReviewersByEmail
condition|?
name|CC
else|:
literal|null
argument_list|,
name|emails
argument_list|)
return|;
block|}
DECL|method|bcc (String... emails)
specifier|public
name|FakeEmailSenderSubject
name|bcc
parameter_list|(
name|String
modifier|...
name|emails
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|users
operator|.
name|supportReviewersByEmail
condition|?
name|BCC
else|:
literal|null
argument_list|,
name|emails
argument_list|)
return|;
block|}
DECL|method|rcpt (@ullable RecipientType type, String[] emails)
specifier|private
name|FakeEmailSenderSubject
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|String
index|[]
name|emails
parameter_list|)
block|{
for|for
control|(
name|String
name|email
range|:
name|emails
control|)
block|{
name|rcpt
argument_list|(
name|type
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|rcpt (@ullable RecipientType type, String email)
specifier|private
name|void
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|String
name|email
parameter_list|)
block|{
name|rcpt
argument_list|(
name|TO
argument_list|,
name|email
argument_list|,
name|TO
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|rcpt
argument_list|(
name|CC
argument_list|,
name|email
argument_list|,
name|CC
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|rcpt
argument_list|(
name|BCC
argument_list|,
name|email
argument_list|,
name|BCC
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|rcpt (@ullable RecipientType type, String email, boolean expected)
specifier|private
name|void
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|String
name|email
parameter_list|,
name|boolean
name|expected
parameter_list|)
block|{
if|if
condition|(
name|recipients
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|contains
argument_list|(
name|email
argument_list|)
operator|!=
name|expected
condition|)
block|{
name|fail
argument_list|(
name|expected
condition|?
literal|"notifies"
else|:
literal|"doesn't notify"
argument_list|,
literal|"]\n"
operator|+
name|type
operator|+
literal|": "
operator|+
name|users
operator|.
name|emailToName
argument_list|(
name|email
argument_list|)
operator|+
literal|"\n]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expected
condition|)
block|{
name|accountedFor
operator|.
name|add
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|noOneElse ()
specifier|public
name|FakeEmailSenderSubject
name|noOneElse
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NotifyType
argument_list|,
name|TestAccount
argument_list|>
name|watchEntry
range|:
name|users
operator|.
name|watchers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|accountedFor
operator|.
name|contains
argument_list|(
name|watchEntry
operator|.
name|getValue
argument_list|()
operator|.
name|email
argument_list|)
condition|)
block|{
name|notTo
argument_list|(
name|watchEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|RecipientType
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|unaccountedFor
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RecipientType
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|recipients
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|unaccountedFor
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|address
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|accountedFor
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|unaccountedFor
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|fail
argument_list|(
literal|"was fully tested, missing assertions for: "
operator|+
name|recipientMapToString
argument_list|(
name|unaccountedFor
argument_list|,
name|e
lambda|->
name|users
operator|.
name|emailToName
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|notTo (String... emails)
specifier|public
name|FakeEmailSenderSubject
name|notTo
parameter_list|(
name|String
modifier|...
name|emails
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
literal|null
argument_list|,
name|emails
argument_list|)
return|;
block|}
DECL|method|to (TestAccount... accounts)
specifier|public
name|FakeEmailSenderSubject
name|to
parameter_list|(
name|TestAccount
modifier|...
name|accounts
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|TO
argument_list|,
name|accounts
argument_list|)
return|;
block|}
DECL|method|cc (TestAccount... accounts)
specifier|public
name|FakeEmailSenderSubject
name|cc
parameter_list|(
name|TestAccount
modifier|...
name|accounts
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|CC
argument_list|,
name|accounts
argument_list|)
return|;
block|}
DECL|method|bcc (TestAccount... accounts)
specifier|public
name|FakeEmailSenderSubject
name|bcc
parameter_list|(
name|TestAccount
modifier|...
name|accounts
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|BCC
argument_list|,
name|accounts
argument_list|)
return|;
block|}
DECL|method|notTo (TestAccount... accounts)
specifier|public
name|FakeEmailSenderSubject
name|notTo
parameter_list|(
name|TestAccount
modifier|...
name|accounts
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
literal|null
argument_list|,
name|accounts
argument_list|)
return|;
block|}
DECL|method|rcpt (@ullable RecipientType type, TestAccount[] accounts)
specifier|private
name|FakeEmailSenderSubject
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|TestAccount
index|[]
name|accounts
parameter_list|)
block|{
for|for
control|(
name|TestAccount
name|account
range|:
name|accounts
control|)
block|{
name|rcpt
argument_list|(
name|type
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|rcpt (@ullable RecipientType type, TestAccount account)
specifier|private
name|void
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|TestAccount
name|account
parameter_list|)
block|{
name|rcpt
argument_list|(
name|type
argument_list|,
name|account
operator|.
name|email
argument_list|)
expr_stmt|;
block|}
DECL|method|to (NotifyType... watches)
specifier|public
name|FakeEmailSenderSubject
name|to
parameter_list|(
name|NotifyType
modifier|...
name|watches
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|TO
argument_list|,
name|watches
argument_list|)
return|;
block|}
DECL|method|cc (NotifyType... watches)
specifier|public
name|FakeEmailSenderSubject
name|cc
parameter_list|(
name|NotifyType
modifier|...
name|watches
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|CC
argument_list|,
name|watches
argument_list|)
return|;
block|}
DECL|method|bcc (NotifyType... watches)
specifier|public
name|FakeEmailSenderSubject
name|bcc
parameter_list|(
name|NotifyType
modifier|...
name|watches
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
name|BCC
argument_list|,
name|watches
argument_list|)
return|;
block|}
DECL|method|notTo (NotifyType... watches)
specifier|public
name|FakeEmailSenderSubject
name|notTo
parameter_list|(
name|NotifyType
modifier|...
name|watches
parameter_list|)
block|{
return|return
name|rcpt
argument_list|(
literal|null
argument_list|,
name|watches
argument_list|)
return|;
block|}
DECL|method|rcpt (@ullable RecipientType type, NotifyType[] watches)
specifier|private
name|FakeEmailSenderSubject
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|NotifyType
index|[]
name|watches
parameter_list|)
block|{
for|for
control|(
name|NotifyType
name|watch
range|:
name|watches
control|)
block|{
name|rcpt
argument_list|(
name|type
argument_list|,
name|watch
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|rcpt (@ullable RecipientType type, NotifyType watch)
specifier|private
name|void
name|rcpt
parameter_list|(
annotation|@
name|Nullable
name|RecipientType
name|type
parameter_list|,
name|NotifyType
name|watch
parameter_list|)
block|{
if|if
condition|(
operator|!
name|users
operator|.
name|watchers
operator|.
name|containsKey
argument_list|(
name|watch
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"configured to watch"
argument_list|,
name|watch
argument_list|)
expr_stmt|;
block|}
name|rcpt
argument_list|(
name|type
argument_list|,
name|users
operator|.
name|watchers
operator|.
name|get
argument_list|(
name|watch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|stagedUsers
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StagedUsers
argument_list|>
name|stagedUsers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TestAccount doesn't implement hashCode/equals, so this set is according
comment|// to object identity. That's fine for our purposes.
DECL|field|accountsModifyingEmailStrategy
specifier|private
name|Set
argument_list|<
name|TestAccount
argument_list|>
name|accountsModifyingEmailStrategy
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|resetEmailStrategies ()
specifier|public
name|void
name|resetEmailStrategies
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|TestAccount
name|account
range|:
name|accountsModifyingEmailStrategy
control|)
block|{
name|setEmailStrategy
argument_list|(
name|account
argument_list|,
name|EmailStrategy
operator|.
name|ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|accountsModifyingEmailStrategy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|class|StagedUsers
specifier|protected
class|class
name|StagedUsers
block|{
DECL|field|owner
specifier|public
specifier|final
name|TestAccount
name|owner
decl_stmt|;
DECL|field|author
specifier|public
specifier|final
name|TestAccount
name|author
decl_stmt|;
DECL|field|uploader
specifier|public
specifier|final
name|TestAccount
name|uploader
decl_stmt|;
DECL|field|reviewer
specifier|public
specifier|final
name|TestAccount
name|reviewer
decl_stmt|;
DECL|field|ccer
specifier|public
specifier|final
name|TestAccount
name|ccer
decl_stmt|;
DECL|field|starrer
specifier|public
specifier|final
name|TestAccount
name|starrer
decl_stmt|;
DECL|field|assignee
specifier|public
specifier|final
name|TestAccount
name|assignee
decl_stmt|;
DECL|field|watchingProjectOwner
specifier|public
specifier|final
name|TestAccount
name|watchingProjectOwner
decl_stmt|;
DECL|field|reviewerByEmail
specifier|public
specifier|final
name|String
name|reviewerByEmail
init|=
literal|"reviewerByEmail@example.com"
decl_stmt|;
DECL|field|ccerByEmail
specifier|public
specifier|final
name|String
name|ccerByEmail
init|=
literal|"ccByEmail@example.com"
decl_stmt|;
DECL|field|watchers
specifier|private
specifier|final
name|Map
argument_list|<
name|NotifyType
argument_list|,
name|TestAccount
argument_list|>
name|watchers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|accountsByEmail
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TestAccount
argument_list|>
name|accountsByEmail
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|supportReviewersByEmail
name|boolean
name|supportReviewersByEmail
decl_stmt|;
DECL|method|usersCacheKey ()
specifier|private
name|String
name|usersCacheKey
parameter_list|()
block|{
return|return
name|description
operator|.
name|getClassName
argument_list|()
return|;
block|}
DECL|method|evictAndCopy (TestAccount account)
specifier|private
name|TestAccount
name|evictAndCopy
parameter_list|(
name|TestAccount
name|account
parameter_list|)
throws|throws
name|IOException
block|{
name|accountCache
operator|.
name|evict
argument_list|(
name|account
operator|.
name|id
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
DECL|method|StagedUsers ()
specifier|public
name|StagedUsers
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|stagedUsers
init|)
block|{
if|if
condition|(
name|stagedUsers
operator|.
name|containsKey
argument_list|(
name|usersCacheKey
argument_list|()
argument_list|)
condition|)
block|{
name|StagedUsers
name|existing
init|=
name|stagedUsers
operator|.
name|get
argument_list|(
name|usersCacheKey
argument_list|()
argument_list|)
decl_stmt|;
name|owner
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|owner
argument_list|)
expr_stmt|;
name|author
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|author
argument_list|)
expr_stmt|;
name|uploader
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|uploader
argument_list|)
expr_stmt|;
name|reviewer
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|reviewer
argument_list|)
expr_stmt|;
name|ccer
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|ccer
argument_list|)
expr_stmt|;
name|starrer
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|starrer
argument_list|)
expr_stmt|;
name|assignee
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|assignee
argument_list|)
expr_stmt|;
name|watchingProjectOwner
operator|=
name|evictAndCopy
argument_list|(
name|existing
operator|.
name|watchingProjectOwner
argument_list|)
expr_stmt|;
name|watchers
operator|.
name|putAll
argument_list|(
name|existing
operator|.
name|watchers
argument_list|)
expr_stmt|;
return|return;
block|}
name|owner
operator|=
name|testAccount
argument_list|(
literal|"owner"
argument_list|)
expr_stmt|;
name|reviewer
operator|=
name|testAccount
argument_list|(
literal|"reviewer"
argument_list|)
expr_stmt|;
name|author
operator|=
name|testAccount
argument_list|(
literal|"author"
argument_list|)
expr_stmt|;
name|uploader
operator|=
name|testAccount
argument_list|(
literal|"uploader"
argument_list|)
expr_stmt|;
name|ccer
operator|=
name|testAccount
argument_list|(
literal|"ccer"
argument_list|)
expr_stmt|;
name|starrer
operator|=
name|testAccount
argument_list|(
literal|"starrer"
argument_list|)
expr_stmt|;
name|assignee
operator|=
name|testAccount
argument_list|(
literal|"assignee"
argument_list|)
expr_stmt|;
name|watchingProjectOwner
operator|=
name|testAccount
argument_list|(
literal|"watchingProjectOwner"
argument_list|,
literal|"Administrators"
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|watchingProjectOwner
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|,
name|pwi
lambda|->
name|pwi
operator|.
name|notifyNewChanges
operator|=
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|NotifyType
name|watch
range|:
name|NotifyType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|watch
operator|==
name|NotifyType
operator|.
name|ALL
condition|)
block|{
continue|continue;
block|}
name|TestAccount
name|watcher
init|=
name|testAccount
argument_list|(
name|watch
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|setApiUser
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|watch
argument_list|(
name|allProjects
operator|.
name|get
argument_list|()
argument_list|,
name|pwi
lambda|->
block|{
name|pwi
operator|.
name|notifyAllComments
operator|=
name|watch
operator|.
name|equals
argument_list|(
name|NotifyType
operator|.
name|ALL_COMMENTS
argument_list|)
expr_stmt|;
name|pwi
operator|.
name|notifyAbandonedChanges
operator|=
name|watch
operator|.
name|equals
argument_list|(
name|NotifyType
operator|.
name|ABANDONED_CHANGES
argument_list|)
expr_stmt|;
name|pwi
operator|.
name|notifyNewChanges
operator|=
name|watch
operator|.
name|equals
argument_list|(
name|NotifyType
operator|.
name|NEW_CHANGES
argument_list|)
expr_stmt|;
name|pwi
operator|.
name|notifyNewPatchSets
operator|=
name|watch
operator|.
name|equals
argument_list|(
name|NotifyType
operator|.
name|NEW_PATCHSETS
argument_list|)
expr_stmt|;
name|pwi
operator|.
name|notifySubmittedChanges
operator|=
name|watch
operator|.
name|equals
argument_list|(
name|NotifyType
operator|.
name|SUBMITTED_CHANGES
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|watchers
operator|.
name|put
argument_list|(
name|watch
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
name|stagedUsers
operator|.
name|put
argument_list|(
name|usersCacheKey
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|email (String username)
specifier|private
name|String
name|email
parameter_list|(
name|String
name|username
parameter_list|)
block|{
comment|// Email validator rejects usernames longer than 64 bytes.
if|if
condition|(
name|username
operator|.
name|length
argument_list|()
operator|>
literal|64
condition|)
block|{
name|username
operator|=
name|username
operator|.
name|substring
argument_list|(
name|username
operator|.
name|length
argument_list|()
operator|-
literal|64
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|username
operator|=
name|username
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|username
operator|+
literal|"@example.com"
return|;
block|}
DECL|method|testAccount (String name)
specifier|public
name|TestAccount
name|testAccount
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|username
init|=
name|name
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TestAccount
name|account
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|username
argument_list|,
name|email
argument_list|(
name|username
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|accountsByEmail
operator|.
name|put
argument_list|(
name|account
operator|.
name|email
argument_list|,
name|account
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
DECL|method|testAccount (String name, String groupName)
specifier|public
name|TestAccount
name|testAccount
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|username
init|=
name|name
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TestAccount
name|account
init|=
name|accountCreator
operator|.
name|create
argument_list|(
name|username
argument_list|,
name|email
argument_list|(
name|username
argument_list|)
argument_list|,
name|name
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|accountsByEmail
operator|.
name|put
argument_list|(
name|account
operator|.
name|email
argument_list|,
name|account
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
DECL|method|emailToName (String email)
name|String
name|emailToName
parameter_list|(
name|String
name|email
parameter_list|)
block|{
if|if
condition|(
name|accountsByEmail
operator|.
name|containsKey
argument_list|(
name|email
argument_list|)
condition|)
block|{
return|return
name|accountsByEmail
operator|.
name|get
argument_list|(
name|email
argument_list|)
operator|.
name|fullName
return|;
block|}
return|return
name|email
return|;
block|}
DECL|method|addReviewers (PushOneCommit.Result r)
specifier|protected
name|void
name|addReviewers
parameter_list|(
name|PushOneCommit
operator|.
name|Result
name|r
parameter_list|)
throws|throws
name|Exception
block|{
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|reviewer
argument_list|(
name|reviewer
operator|.
name|email
argument_list|)
operator|.
name|reviewer
argument_list|(
name|reviewerByEmail
argument_list|)
operator|.
name|reviewer
argument_list|(
name|ccer
operator|.
name|email
argument_list|,
name|ReviewerState
operator|.
name|CC
argument_list|,
literal|false
argument_list|)
operator|.
name|reviewer
argument_list|(
name|ccerByEmail
argument_list|,
name|ReviewerState
operator|.
name|CC
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReviewResult
name|result
init|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|supportReviewersByEmail
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|reviewers
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|v
lambda|->
name|v
operator|.
name|error
operator|!=
literal|null
argument_list|)
condition|)
block|{
name|supportReviewersByEmail
operator|=
literal|false
block|;
name|in
operator|=
name|ReviewInput
operator|.
name|noScore
argument_list|()
operator|.
name|reviewer
argument_list|(
name|reviewer
operator|.
name|email
argument_list|)
operator|.
name|reviewer
argument_list|(
name|ccer
operator|.
name|email
argument_list|,
name|ReviewerState
operator|.
name|CC
argument_list|,
literal|false
argument_list|)
empty_stmt|;
name|result
operator|=
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|r
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|revision
argument_list|(
literal|"current"
argument_list|)
operator|.
name|review
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|Truth
operator|.
name|assertThat
argument_list|(
name|result
operator|.
name|reviewers
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|v
lambda|->
name|v
operator|.
name|error
operator|==
literal|null
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_interface
DECL|interface|PushOptionGenerator
specifier|protected
interface|interface
name|PushOptionGenerator
block|{
DECL|method|pushOptions (StagedUsers users)
name|List
argument_list|<
name|String
argument_list|>
name|pushOptions
parameter_list|(
name|StagedUsers
name|users
parameter_list|)
function_decl|;
block|}
end_interface

begin_class
DECL|class|StagedPreChange
specifier|protected
class|class
name|StagedPreChange
extends|extends
name|StagedUsers
block|{
DECL|field|repo
specifier|public
specifier|final
name|TestRepository
argument_list|<
name|?
argument_list|>
name|repo
decl_stmt|;
DECL|field|result
specifier|protected
specifier|final
name|PushOneCommit
operator|.
name|Result
name|result
decl_stmt|;
DECL|field|changeId
specifier|public
specifier|final
name|String
name|changeId
decl_stmt|;
DECL|method|StagedPreChange (String ref)
name|StagedPreChange
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|ref
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|StagedPreChange (String ref, @Nullable PushOptionGenerator pushOptionGenerator)
name|StagedPreChange
parameter_list|(
name|String
name|ref
parameter_list|,
annotation|@
name|Nullable
name|PushOptionGenerator
name|pushOptionGenerator
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pushOptions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pushOptionGenerator
operator|!=
literal|null
condition|)
block|{
name|pushOptions
operator|=
name|pushOptionGenerator
operator|.
name|pushOptions
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pushOptions
operator|!=
literal|null
condition|)
block|{
name|ref
operator|=
name|ref
operator|+
literal|'%'
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|pushOptions
argument_list|)
expr_stmt|;
block|}
name|setApiUser
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|repo
operator|=
name|cloneProject
argument_list|(
name|project
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|PushOneCommit
name|push
init|=
name|pushFactory
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|owner
operator|.
name|getIdent
argument_list|()
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|result
operator|=
name|push
operator|.
name|to
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertOkStatus
argument_list|()
expr_stmt|;
name|changeId
operator|=
name|result
operator|.
name|getChangeId
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|stagePreChange (String ref)
specifier|protected
name|StagedPreChange
name|stagePreChange
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|StagedPreChange
argument_list|(
name|ref
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|stagePreChange ( String ref, @Nullable PushOptionGenerator pushOptionGenerator)
specifier|protected
name|StagedPreChange
name|stagePreChange
parameter_list|(
name|String
name|ref
parameter_list|,
annotation|@
name|Nullable
name|PushOptionGenerator
name|pushOptionGenerator
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|StagedPreChange
argument_list|(
name|ref
argument_list|,
name|pushOptionGenerator
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|StagedChange
specifier|protected
class|class
name|StagedChange
extends|extends
name|StagedPreChange
block|{
DECL|method|StagedChange (String ref)
name|StagedChange
parameter_list|(
name|String
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|starrer
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|accounts
argument_list|()
operator|.
name|self
argument_list|()
operator|.
name|starChange
argument_list|(
name|result
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|setApiUser
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|addReviewers
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|stageReviewableChange ()
specifier|protected
name|StagedChange
name|stageReviewableChange
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|StagedChange
argument_list|(
literal|"refs/for/master"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|stageWipChange ()
specifier|protected
name|StagedChange
name|stageWipChange
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|StagedChange
argument_list|(
literal|"refs/for/master%wip"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|stageReviewableWipChange ()
specifier|protected
name|StagedChange
name|stageReviewableWipChange
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|sc
operator|.
name|changeId
argument_list|)
operator|.
name|setWorkInProgress
argument_list|()
expr_stmt|;
return|return
name|sc
return|;
block|}
end_function

begin_function
DECL|method|stageAbandonedReviewableChange ()
specifier|protected
name|StagedChange
name|stageAbandonedReviewableChange
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableChange
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|sc
operator|.
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|sc
return|;
block|}
end_function

begin_function
DECL|method|stageAbandonedReviewableWipChange ()
specifier|protected
name|StagedChange
name|stageAbandonedReviewableWipChange
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageReviewableWipChange
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|sc
operator|.
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|sc
return|;
block|}
end_function

begin_function
DECL|method|stageAbandonedWipChange ()
specifier|protected
name|StagedChange
name|stageAbandonedWipChange
parameter_list|()
throws|throws
name|Exception
block|{
name|StagedChange
name|sc
init|=
name|stageWipChange
argument_list|()
decl_stmt|;
name|setApiUser
argument_list|(
name|sc
operator|.
name|owner
argument_list|)
expr_stmt|;
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|sc
operator|.
name|changeId
argument_list|)
operator|.
name|abandon
argument_list|()
expr_stmt|;
name|sender
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|sc
return|;
block|}
end_function

unit|}
end_unit

