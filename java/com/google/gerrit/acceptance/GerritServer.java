begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|AccountOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|account
operator|.
name|AccountOperationsImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|group
operator|.
name|GroupOperations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
operator|.
name|testsuite
operator|.
name|group
operator|.
name|GroupOperationsImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|config
operator|.
name|FactoryModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|LuceneIndexModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|Init
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritRuntime
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|receive
operator|.
name|AsyncReceiveCommits
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|NoSshModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ManualRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|OneOffRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|SocketUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|SystemLog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeEmailSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|FakeGroupAuditService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|InMemoryRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|NoteDbChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|NoteDbMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|SshMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
operator|.
name|TempFileUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|ConsoleAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_class
DECL|class|GerritServer
specifier|public
class|class
name|GerritServer
implements|implements
name|AutoCloseable
block|{
DECL|class|StartupException
specifier|public
specifier|static
class|class
name|StartupException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|StartupException (String msg, Throwable cause)
name|StartupException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|Description
specifier|public
specifier|abstract
specifier|static
class|class
name|Description
block|{
DECL|method|forTestClass ( org.junit.runner.Description testDesc, String configName)
specifier|public
specifier|static
name|Description
name|forTestClass
parameter_list|(
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|testDesc
parameter_list|,
name|String
name|configName
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_GerritServer_Description
argument_list|(
name|testDesc
argument_list|,
name|configName
argument_list|,
operator|!
name|has
argument_list|(
name|UseLocalDisk
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
operator|&&
operator|!
name|forceLocalDisk
argument_list|()
argument_list|,
operator|!
name|has
argument_list|(
name|NoHttpd
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
argument_list|,
name|has
argument_list|(
name|Sandboxed
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
argument_list|,
name|has
argument_list|(
name|UseSsh
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
comment|// @GerritConfig is only valid on methods.
literal|null
argument_list|,
comment|// @GerritConfigs is only valid on methods.
literal|null
argument_list|,
comment|// @GlobalPluginConfig is only valid on methods.
literal|null
argument_list|)
return|;
comment|// @GlobalPluginConfigs is only valid on methods.
block|}
DECL|method|forTestMethod ( org.junit.runner.Description testDesc, String configName)
specifier|public
specifier|static
name|Description
name|forTestMethod
parameter_list|(
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|testDesc
parameter_list|,
name|String
name|configName
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_GerritServer_Description
argument_list|(
name|testDesc
argument_list|,
name|configName
argument_list|,
operator|(
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|UseLocalDisk
operator|.
name|class
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|has
argument_list|(
name|UseLocalDisk
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|forceLocalDisk
argument_list|()
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|NoHttpd
operator|.
name|class
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|has
argument_list|(
name|NoHttpd
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|Sandboxed
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|has
argument_list|(
name|Sandboxed
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|UseSsh
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|has
argument_list|(
name|UseSsh
operator|.
name|class
argument_list|,
name|testDesc
operator|.
name|getTestClass
argument_list|()
argument_list|)
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|GerritConfig
operator|.
name|class
argument_list|)
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|GerritConfigs
operator|.
name|class
argument_list|)
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|GlobalPluginConfig
operator|.
name|class
argument_list|)
argument_list|,
name|testDesc
operator|.
name|getAnnotation
argument_list|(
name|GlobalPluginConfigs
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|has (Class<? extends Annotation> annotation, Class<?> clazz)
specifier|private
specifier|static
name|boolean
name|has
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotation
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
for|for
control|(
init|;
name|clazz
operator|!=
literal|null
condition|;
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|annotation
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|testDescription ()
specifier|abstract
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|testDescription
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|configName ()
specifier|abstract
name|String
name|configName
parameter_list|()
function_decl|;
DECL|method|memory ()
specifier|abstract
name|boolean
name|memory
parameter_list|()
function_decl|;
DECL|method|httpd ()
specifier|abstract
name|boolean
name|httpd
parameter_list|()
function_decl|;
DECL|method|sandboxed ()
specifier|abstract
name|boolean
name|sandboxed
parameter_list|()
function_decl|;
DECL|method|useSshAnnotation ()
specifier|abstract
name|boolean
name|useSshAnnotation
parameter_list|()
function_decl|;
DECL|method|useSsh ()
name|boolean
name|useSsh
parameter_list|()
block|{
return|return
name|useSshAnnotation
argument_list|()
operator|&&
name|SshMode
operator|.
name|useSsh
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|config ()
specifier|abstract
name|GerritConfig
name|config
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|configs ()
specifier|abstract
name|GerritConfigs
name|configs
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|pluginConfig ()
specifier|abstract
name|GlobalPluginConfig
name|pluginConfig
parameter_list|()
function_decl|;
annotation|@
name|Nullable
DECL|method|pluginConfigs ()
specifier|abstract
name|GlobalPluginConfigs
name|pluginConfigs
parameter_list|()
function_decl|;
DECL|method|checkValidAnnotations ()
specifier|private
name|void
name|checkValidAnnotations
parameter_list|()
block|{
if|if
condition|(
name|configs
argument_list|()
operator|!=
literal|null
operator|&&
name|config
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Use either @GerritConfigs or @GerritConfig not both"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pluginConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|pluginConfig
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Use either @GlobalPluginConfig or @GlobalPluginConfigs not both"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|pluginConfigs
argument_list|()
operator|!=
literal|null
operator|||
name|pluginConfig
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|memory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must use @UseLocalDisk with @GlobalPluginConfig(s)"
argument_list|)
throw|;
block|}
block|}
DECL|method|buildConfig (Config baseConfig)
specifier|private
name|Config
name|buildConfig
parameter_list|(
name|Config
name|baseConfig
parameter_list|)
block|{
if|if
condition|(
name|configs
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ConfigAnnotationParser
operator|.
name|parse
argument_list|(
name|baseConfig
argument_list|,
name|configs
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|config
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ConfigAnnotationParser
operator|.
name|parse
argument_list|(
name|baseConfig
argument_list|,
name|config
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|baseConfig
return|;
block|}
block|}
DECL|method|buildPluginConfigs ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|buildPluginConfigs
parameter_list|()
block|{
if|if
condition|(
name|pluginConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ConfigAnnotationParser
operator|.
name|parse
argument_list|(
name|pluginConfigs
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pluginConfig
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ConfigAnnotationParser
operator|.
name|parse
argument_list|(
name|pluginConfig
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
block|}
DECL|field|LOG_LEVELS
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Level
argument_list|>
name|LOG_LEVELS
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Level
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"com.google.gerrit"
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
comment|// Silence non-critical messages from MINA SSHD.
decl|.
name|put
argument_list|(
literal|"org.apache.mina"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.apache.sshd.common"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.apache.sshd.server"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.apache.sshd.common.keyprovider.FileKeyPairProvider"
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
decl|.
name|put
argument_list|(
literal|"com.google.gerrit.sshd.GerritServerSession"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
comment|// Silence non-critical messages from mime-util.
decl|.
name|put
argument_list|(
literal|"eu.medsea.mimeutil"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
comment|// Silence non-critical messages from openid4java.
decl|.
name|put
argument_list|(
literal|"org.apache.xml"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.openid4java"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.openid4java.consumer.ConsumerManager"
argument_list|,
name|Level
operator|.
name|FATAL
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.openid4java.discovery.Discovery"
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.openid4java.server.RealmVerifier"
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.openid4java.message.AuthSuccess"
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
comment|// Silence non-critical messages from c3p0 (if used).
decl|.
name|put
argument_list|(
literal|"com.mchange.v2.c3p0"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"com.mchange.v2.resourcepool"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"com.mchange.v2.sql"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
comment|// Silence non-critical messages from apache.http.
decl|.
name|put
argument_list|(
literal|"org.apache.http"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
comment|// Silence non-critical messages from Jetty.
decl|.
name|put
argument_list|(
literal|"org.eclipse.jetty"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
comment|// Silence non-critical messages from JGit.
decl|.
name|put
argument_list|(
literal|"org.eclipse.jgit.transport.PacketLineIn"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|put
argument_list|(
literal|"org.eclipse.jgit.transport.PacketLineOut"
argument_list|,
name|Level
operator|.
name|WARN
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
DECL|method|forceLocalDisk ()
specifier|private
specifier|static
name|boolean
name|forceLocalDisk
parameter_list|()
block|{
name|String
name|value
init|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"GERRIT_FORCE_LOCAL_DISK"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"gerrit.forceLocalDisk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
condition|)
block|{
case|case
literal|"1"
case|:
case|case
literal|"yes"
case|:
case|case
literal|"true"
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Initializes on-disk site but does not start server.    *    * @param desc server description    * @param baseConfig default config values; merged with config from {@code desc} and then written    *     into {@code site/etc/gerrit.config}.    * @param site temp directory where site will live.    * @throws Exception    */
DECL|method|init (Description desc, Config baseConfig, Path site)
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|Description
name|desc
parameter_list|,
name|Config
name|baseConfig
parameter_list|,
name|Path
name|site
parameter_list|)
throws|throws
name|Exception
block|{
name|checkArgument
argument_list|(
operator|!
name|desc
operator|.
name|memory
argument_list|()
argument_list|,
literal|"can't initialize site path for in-memory test: %s"
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|Config
name|cfg
init|=
name|desc
operator|.
name|buildConfig
argument_list|(
name|baseConfig
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|pluginConfigs
init|=
name|desc
operator|.
name|buildPluginConfigs
argument_list|()
decl_stmt|;
name|MergeableFileBasedConfig
name|gerritConfig
init|=
operator|new
name|MergeableFileBasedConfig
argument_list|(
name|site
operator|.
name|resolve
argument_list|(
literal|"etc"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"gerrit.config"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|DETECTED
argument_list|)
decl_stmt|;
name|gerritConfig
operator|.
name|load
argument_list|()
expr_stmt|;
name|gerritConfig
operator|.
name|merge
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|mergeTestConfig
argument_list|(
name|gerritConfig
argument_list|)
expr_stmt|;
name|gerritConfig
operator|.
name|save
argument_list|()
expr_stmt|;
name|Init
name|init
init|=
operator|new
name|Init
argument_list|()
decl_stmt|;
name|int
name|rc
init|=
name|init
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-d"
block|,
name|site
operator|.
name|toString
argument_list|()
block|,
literal|"--batch"
block|,
literal|"--no-auto-start"
block|,
literal|"--skip-plugins"
block|,             }
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't initialize site"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|pluginName
range|:
name|pluginConfigs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|MergeableFileBasedConfig
name|pluginCfg
init|=
operator|new
name|MergeableFileBasedConfig
argument_list|(
name|site
operator|.
name|resolve
argument_list|(
literal|"etc"
argument_list|)
operator|.
name|resolve
argument_list|(
name|pluginName
operator|+
literal|".config"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|DETECTED
argument_list|)
decl_stmt|;
name|pluginCfg
operator|.
name|load
argument_list|()
expr_stmt|;
name|pluginCfg
operator|.
name|merge
argument_list|(
name|pluginConfigs
operator|.
name|get
argument_list|(
name|pluginName
argument_list|)
argument_list|)
expr_stmt|;
name|pluginCfg
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Initializes new Gerrit site and returns started server.    *    *<p>A new temporary directory for the site will be created with {@link TempFileUtil}, even in    * the server is otherwise configured in-memory. Closing the server stops the daemon but does not    * delete the temporary directory. Callers may either get the directory with {@link    * #getSitePath()} and delete it manually, or call {@link TempFileUtil#cleanup()}.    *    * @param desc server description.    * @param baseConfig default config values; merged with config from {@code desc}.    * @param testSysModule additional Guice module to use.    * @return started server.    * @throws Exception    */
DECL|method|initAndStart ( Description desc, Config baseConfig, @Nullable Module testSysModule)
specifier|public
specifier|static
name|GerritServer
name|initAndStart
parameter_list|(
name|Description
name|desc
parameter_list|,
name|Config
name|baseConfig
parameter_list|,
annotation|@
name|Nullable
name|Module
name|testSysModule
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|site
init|=
name|TempFileUtil
operator|.
name|createTempDirectory
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|memory
argument_list|()
condition|)
block|{
name|init
argument_list|(
name|desc
argument_list|,
name|baseConfig
argument_list|,
name|site
argument_list|)
expr_stmt|;
block|}
return|return
name|start
argument_list|(
name|desc
argument_list|,
name|baseConfig
argument_list|,
name|site
argument_list|,
name|testSysModule
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|TempFileUtil
operator|.
name|recursivelyDelete
argument_list|(
name|site
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Starts Gerrit server from existing on-disk site.    *    * @param desc server description.    * @param baseConfig default config values; merged with config from {@code desc}.    * @param site existing temporary directory for site. Required, but may be empty, for in-memory    *     servers. For on-disk servers, assumes that {@link #init} was previously called to    *     initialize this directory. Can be retrieved from the returned instance via {@link    *     #getSitePath()}.    * @param testSysModule optional additional module to add to the system injector.    * @param inMemoryRepoManager {@link InMemoryRepositoryManager} that should be used if the site is    *     started in memory    * @param inMemoryDatabaseInstance {@link com.google.gerrit.testing.InMemoryDatabase.Instance}    *     that should be used if the site is started in memory    * @param additionalArgs additional command-line arguments for the daemon program; only allowed if    *     the test is not in-memory.    * @return started server.    * @throws Exception    */
DECL|method|start ( Description desc, Config baseConfig, Path site, @Nullable Module testSysModule, @Nullable InMemoryRepositoryManager inMemoryRepoManager, @Nullable InMemoryDatabase.Instance inMemoryDatabaseInstance, String... additionalArgs)
specifier|public
specifier|static
name|GerritServer
name|start
parameter_list|(
name|Description
name|desc
parameter_list|,
name|Config
name|baseConfig
parameter_list|,
name|Path
name|site
parameter_list|,
annotation|@
name|Nullable
name|Module
name|testSysModule
parameter_list|,
annotation|@
name|Nullable
name|InMemoryRepositoryManager
name|inMemoryRepoManager
parameter_list|,
annotation|@
name|Nullable
name|InMemoryDatabase
operator|.
name|Instance
name|inMemoryDatabaseInstance
parameter_list|,
name|String
modifier|...
name|additionalArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|checkArgument
argument_list|(
name|site
operator|!=
literal|null
argument_list|,
literal|"site is required (even for in-memory server"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|checkValidAnnotations
argument_list|()
expr_stmt|;
name|configureLogging
argument_list|()
expr_stmt|;
name|CyclicBarrier
name|serverStarted
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Daemon
name|daemon
init|=
operator|new
name|Daemon
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|serverStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|site
argument_list|)
decl_stmt|;
name|daemon
operator|.
name|setEmailModuleForTesting
argument_list|(
operator|new
name|FakeEmailSender
operator|.
name|Module
argument_list|()
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setAuditEventModuleForTesting
argument_list|(
operator|new
name|FakeGroupAuditService
operator|.
name|Module
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|testSysModule
operator|!=
literal|null
condition|)
block|{
name|daemon
operator|.
name|addAdditionalSysModuleForTesting
argument_list|(
name|testSysModule
argument_list|)
expr_stmt|;
block|}
name|daemon
operator|.
name|setEnableSshd
argument_list|(
name|desc
operator|.
name|useSsh
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|memory
argument_list|()
condition|)
block|{
name|checkArgument
argument_list|(
name|additionalArgs
operator|.
name|length
operator|==
literal|0
argument_list|,
literal|"cannot pass args to in-memory server"
argument_list|)
expr_stmt|;
return|return
name|startInMemory
argument_list|(
name|desc
argument_list|,
name|site
argument_list|,
name|baseConfig
argument_list|,
name|daemon
argument_list|,
name|inMemoryRepoManager
argument_list|,
name|inMemoryDatabaseInstance
argument_list|)
return|;
block|}
return|return
name|startOnDisk
argument_list|(
name|desc
argument_list|,
name|site
argument_list|,
name|daemon
argument_list|,
name|serverStarted
argument_list|,
name|additionalArgs
argument_list|)
return|;
block|}
DECL|method|startInMemory ( Description desc, Path site, Config baseConfig, Daemon daemon, @Nullable InMemoryRepositoryManager inMemoryRepoManager, @Nullable InMemoryDatabase.Instance inMemoryDatabaseInstance)
specifier|private
specifier|static
name|GerritServer
name|startInMemory
parameter_list|(
name|Description
name|desc
parameter_list|,
name|Path
name|site
parameter_list|,
name|Config
name|baseConfig
parameter_list|,
name|Daemon
name|daemon
parameter_list|,
annotation|@
name|Nullable
name|InMemoryRepositoryManager
name|inMemoryRepoManager
parameter_list|,
annotation|@
name|Nullable
name|InMemoryDatabase
operator|.
name|Instance
name|inMemoryDatabaseInstance
parameter_list|)
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
name|desc
operator|.
name|buildConfig
argument_list|(
name|baseConfig
argument_list|)
decl_stmt|;
name|daemon
operator|.
name|setSlave
argument_list|(
name|isSlave
argument_list|(
name|baseConfig
argument_list|)
operator|||
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"container"
argument_list|,
literal|"slave"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mergeTestConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
comment|// Set the log4j configuration to an invalid one to prevent system logs
comment|// from getting configured and creating log files.
name|System
operator|.
name|setProperty
argument_list|(
name|SystemLog
operator|.
name|LOG4J_CONFIGURATION
argument_list|,
literal|"invalidConfiguration"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"requestLog"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"requestLog"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"index"
argument_list|,
literal|"lucene"
argument_list|,
literal|"testInmemory"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"onlineUpgrade"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"gitweb"
argument_list|,
literal|null
argument_list|,
literal|"cgi"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setEnableHttpd
argument_list|(
name|desc
operator|.
name|httpd
argument_list|()
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setLuceneModule
argument_list|(
name|LuceneIndexModule
operator|.
name|singleVersionAllLatest
argument_list|(
literal|0
argument_list|,
name|isSlave
argument_list|(
name|baseConfig
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setDatabaseForTesting
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Module
operator|>
name|of
argument_list|(
operator|new
name|InMemoryTestingDatabaseModule
argument_list|(
name|cfg
argument_list|,
name|site
argument_list|,
name|inMemoryRepoManager
argument_list|,
name|inMemoryDatabaseInstance
argument_list|)
argument_list|,
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|GerritRuntime
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|GerritRuntime
operator|.
name|DAEMON
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|addAdditionalSysModuleForTesting
argument_list|(
operator|new
name|ReindexProjectsAtStartup
operator|.
name|Module
argument_list|()
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|GerritServer
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
name|createTestInjector
argument_list|(
name|daemon
argument_list|)
argument_list|,
name|daemon
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|isSlave (Config baseConfig)
specifier|private
specifier|static
name|boolean
name|isSlave
parameter_list|(
name|Config
name|baseConfig
parameter_list|)
block|{
return|return
name|baseConfig
operator|.
name|getBoolean
argument_list|(
literal|"container"
argument_list|,
literal|"slave"
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|startOnDisk ( Description desc, Path site, Daemon daemon, CyclicBarrier serverStarted, String[] additionalArgs)
specifier|private
specifier|static
name|GerritServer
name|startOnDisk
parameter_list|(
name|Description
name|desc
parameter_list|,
name|Path
name|site
parameter_list|,
name|Daemon
name|daemon
parameter_list|,
name|CyclicBarrier
name|serverStarted
parameter_list|,
name|String
index|[]
name|additionalArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|requireNonNull
argument_list|(
name|site
argument_list|)
expr_stmt|;
name|ExecutorService
name|daemonService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"-d"
argument_list|,
name|site
operator|.
name|toString
argument_list|()
argument_list|,
literal|"--headless"
argument_list|,
literal|"--console-log"
argument_list|,
literal|"--show-stack-trace"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|additionalArgs
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Future
argument_list|<
name|?
argument_list|>
name|possiblyIgnoredError
init|=
name|daemonService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|int
name|rc
init|=
name|daemon
operator|.
name|main
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to start Gerrit daemon"
argument_list|)
expr_stmt|;
name|serverStarted
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|serverStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|daemon
operator|.
name|stop
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StartupException
argument_list|(
literal|"Failed to start Gerrit daemon; see log"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gerrit Server Started"
argument_list|)
expr_stmt|;
return|return
operator|new
name|GerritServer
argument_list|(
name|desc
argument_list|,
name|site
argument_list|,
name|createTestInjector
argument_list|(
name|daemon
argument_list|)
argument_list|,
name|daemon
argument_list|,
name|daemonService
argument_list|)
return|;
block|}
DECL|method|configureLogging ()
specifier|private
specifier|static
name|void
name|configureLogging
parameter_list|()
block|{
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|PatternLayout
name|layout
init|=
operator|new
name|PatternLayout
argument_list|()
decl_stmt|;
name|layout
operator|.
name|setConversionPattern
argument_list|(
literal|"%-5p %c %x: %m%n"
argument_list|)
expr_stmt|;
name|ConsoleAppender
name|dst
init|=
operator|new
name|ConsoleAppender
argument_list|()
decl_stmt|;
name|dst
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setTarget
argument_list|(
literal|"System.err"
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setThreshold
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|dst
operator|.
name|activateOptions
argument_list|()
expr_stmt|;
name|Logger
name|root
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|root
operator|.
name|removeAllAppenders
argument_list|()
expr_stmt|;
name|root
operator|.
name|addAppender
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|LOG_LEVELS
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|getLogger
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeTestConfig (Config cfg)
specifier|private
specifier|static
name|void
name|mergeTestConfig
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|String
name|forceEphemeralPort
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:0"
argument_list|,
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|url
init|=
literal|"http://"
operator|+
name|forceEphemeralPort
operator|+
literal|"/"
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalWebUrl"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"listenUrl"
argument_list|,
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"listenAddress"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"listenAddress"
argument_list|,
name|forceEphemeralPort
argument_list|)
expr_stmt|;
block|}
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"testUseInsecureRandom"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|unset
argument_list|(
literal|"cache"
argument_list|,
literal|null
argument_list|,
literal|"directory"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"basePath"
argument_list|,
literal|"git"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"sendemail"
argument_list|,
literal|null
argument_list|,
literal|"enable"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"sendemail"
argument_list|,
literal|null
argument_list|,
literal|"threadPoolSize"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"cache"
argument_list|,
literal|"projects"
argument_list|,
literal|"checkFrequency"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"plugins"
argument_list|,
literal|null
argument_list|,
literal|"checkFrequency"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"threads"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"commandStartThreads"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"receive"
argument_list|,
literal|null
argument_list|,
literal|"threadPoolSize"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"threads"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"reindexAfterRefUpdate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NoteDbMode
operator|.
name|newNotesMigrationFromEnv
argument_list|()
operator|.
name|setConfigValues
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
DECL|method|createTestInjector (Daemon daemon)
specifier|private
specifier|static
name|Injector
name|createTestInjector
parameter_list|(
name|Daemon
name|daemon
parameter_list|)
throws|throws
name|Exception
block|{
name|Injector
name|sysInjector
init|=
name|get
argument_list|(
name|daemon
argument_list|,
literal|"sysInjector"
argument_list|)
decl_stmt|;
name|Module
name|module
init|=
operator|new
name|FactoryModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bindConstant
argument_list|()
operator|.
name|annotatedWith
argument_list|(
name|SshEnabled
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|daemon
operator|.
name|getEnableSshd
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AccountCreator
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AccountOperations
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|AccountOperationsImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GroupOperations
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|GroupOperationsImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
argument_list|(
name|PushOneCommit
operator|.
name|Factory
operator|.
name|class
argument_list|)
expr_stmt|;
name|install
argument_list|(
name|InProcessProtocol
operator|.
name|module
argument_list|()
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|NoSshModule
argument_list|()
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|AsyncReceiveCommits
operator|.
name|Module
argument_list|()
argument_list|)
expr_stmt|;
name|factory
argument_list|(
name|ProjectResetter
operator|.
name|Builder
operator|.
name|Factory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|sysInjector
operator|.
name|createChildInjector
argument_list|(
name|module
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (Object obj, String field)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Field
name|f
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|f
operator|.
name|get
argument_list|(
name|obj
argument_list|)
return|;
block|}
DECL|method|getLocalHost ()
specifier|private
specifier|static
name|InetAddress
name|getLocalHost
parameter_list|()
block|{
return|return
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
return|;
block|}
DECL|field|desc
specifier|private
specifier|final
name|Description
name|desc
decl_stmt|;
DECL|field|sitePath
specifier|private
specifier|final
name|Path
name|sitePath
decl_stmt|;
DECL|field|daemon
specifier|private
name|Daemon
name|daemon
decl_stmt|;
DECL|field|daemonService
specifier|private
name|ExecutorService
name|daemonService
decl_stmt|;
DECL|field|testInjector
specifier|private
name|Injector
name|testInjector
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
DECL|field|sshdAddress
specifier|private
name|InetSocketAddress
name|sshdAddress
decl_stmt|;
DECL|field|httpAddress
specifier|private
name|InetSocketAddress
name|httpAddress
decl_stmt|;
DECL|method|GerritServer ( Description desc, @Nullable Path sitePath, Injector testInjector, Daemon daemon, @Nullable ExecutorService daemonService)
specifier|private
name|GerritServer
parameter_list|(
name|Description
name|desc
parameter_list|,
annotation|@
name|Nullable
name|Path
name|sitePath
parameter_list|,
name|Injector
name|testInjector
parameter_list|,
name|Daemon
name|daemon
parameter_list|,
annotation|@
name|Nullable
name|ExecutorService
name|daemonService
parameter_list|)
block|{
name|this
operator|.
name|desc
operator|=
name|requireNonNull
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|this
operator|.
name|sitePath
operator|=
name|sitePath
expr_stmt|;
name|this
operator|.
name|testInjector
operator|=
name|requireNonNull
argument_list|(
name|testInjector
argument_list|)
expr_stmt|;
name|this
operator|.
name|daemon
operator|=
name|requireNonNull
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|this
operator|.
name|daemonService
operator|=
name|daemonService
expr_stmt|;
name|Config
name|cfg
init|=
name|testInjector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Config
operator|.
name|class
argument_list|,
name|GerritServerConfig
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|url
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalWebUrl"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"listenAddress"
argument_list|)
decl_stmt|;
comment|// We do not use InitSshd.isOff to avoid coupling GerritServer to the SSH code.
if|if
condition|(
operator|!
literal|"off"
operator|.
name|equalsIgnoreCase
argument_list|(
name|addr
argument_list|)
condition|)
block|{
name|sshdAddress
operator|=
name|SocketUtil
operator|.
name|resolve
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"listenAddress"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|httpAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getUrl ()
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
DECL|method|getSshdAddress ()
name|InetSocketAddress
name|getSshdAddress
parameter_list|()
block|{
return|return
name|sshdAddress
return|;
block|}
DECL|method|getHttpAddress ()
name|InetSocketAddress
name|getHttpAddress
parameter_list|()
block|{
return|return
name|httpAddress
return|;
block|}
DECL|method|getTestInjector ()
specifier|public
name|Injector
name|getTestInjector
parameter_list|()
block|{
return|return
name|testInjector
return|;
block|}
DECL|method|getDescription ()
name|Description
name|getDescription
parameter_list|()
block|{
return|return
name|desc
return|;
block|}
DECL|method|restartAsSlave (GerritServer server)
specifier|public
specifier|static
name|GerritServer
name|restartAsSlave
parameter_list|(
name|GerritServer
name|server
parameter_list|)
throws|throws
name|Exception
block|{
name|checkState
argument_list|(
name|server
operator|.
name|desc
operator|.
name|sandboxed
argument_list|()
argument_list|,
literal|"restarting as slave requires @Sandboxed"
argument_list|)
expr_stmt|;
name|Path
name|site
init|=
name|server
operator|.
name|testInjector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Path
operator|.
name|class
argument_list|,
name|SitePath
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Config
name|cfg
init|=
name|server
operator|.
name|testInjector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Config
operator|.
name|class
argument_list|,
name|GerritServerConfig
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setBoolean
argument_list|(
literal|"container"
argument_list|,
literal|null
argument_list|,
literal|"slave"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InMemoryRepositoryManager
name|inMemoryRepoManager
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasBinding
argument_list|(
name|server
operator|.
name|testInjector
argument_list|,
name|InMemoryRepositoryManager
operator|.
name|class
argument_list|)
condition|)
block|{
name|inMemoryRepoManager
operator|=
name|server
operator|.
name|testInjector
operator|.
name|getInstance
argument_list|(
name|InMemoryRepositoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|Instance
name|dbInstance
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasBinding
argument_list|(
name|server
operator|.
name|testInjector
argument_list|,
name|InMemoryDatabase
operator|.
name|class
argument_list|)
condition|)
block|{
name|InMemoryDatabase
name|inMemoryDatabase
init|=
name|server
operator|.
name|testInjector
operator|.
name|getInstance
argument_list|(
name|InMemoryDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
name|dbInstance
operator|=
name|inMemoryDatabase
operator|.
name|getDbInstance
argument_list|()
expr_stmt|;
name|dbInstance
operator|.
name|setKeepOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|server
operator|.
name|daemon
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|start
argument_list|(
name|server
operator|.
name|desc
argument_list|,
name|cfg
argument_list|,
name|site
argument_list|,
literal|null
argument_list|,
name|inMemoryRepoManager
argument_list|,
name|dbInstance
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|dbInstance
operator|!=
literal|null
condition|)
block|{
name|dbInstance
operator|.
name|setKeepOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|hasBinding (Injector injector, Class<?> clazz)
specifier|private
specifier|static
name|boolean
name|hasBinding
parameter_list|(
name|Injector
name|injector
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|injector
operator|.
name|getExistingBinding
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|checkNoteDbState
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|daemon
operator|.
name|getLifecycleManager
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|daemonService
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gerrit Server Shutdown"
argument_list|)
expr_stmt|;
name|daemonService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|daemonService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|RepositoryCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSitePath ()
specifier|public
name|Path
name|getSitePath
parameter_list|()
block|{
return|return
name|sitePath
return|;
block|}
DECL|method|checkNoteDbState ()
specifier|private
name|void
name|checkNoteDbState
parameter_list|()
throws|throws
name|Exception
block|{
name|NoteDbMode
name|mode
init|=
name|NoteDbMode
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|NoteDbMode
operator|.
name|CHECK
operator|&&
name|mode
operator|!=
name|NoteDbMode
operator|.
name|PRIMARY
condition|)
block|{
return|return;
block|}
name|NoteDbChecker
name|checker
init|=
name|testInjector
operator|.
name|getInstance
argument_list|(
name|NoteDbChecker
operator|.
name|class
argument_list|)
decl_stmt|;
name|OneOffRequestContext
name|oneOffRequestContext
init|=
name|testInjector
operator|.
name|getInstance
argument_list|(
name|OneOffRequestContext
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|ManualRequestContext
name|ctx
init|=
name|oneOffRequestContext
operator|.
name|open
argument_list|()
init|)
block|{
if|if
condition|(
name|mode
operator|==
name|NoteDbMode
operator|.
name|CHECK
condition|)
block|{
name|checker
operator|.
name|rebuildAndCheckAllChanges
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|NoteDbMode
operator|.
name|PRIMARY
condition|)
block|{
name|checker
operator|.
name|assertNoReviewDbChanges
argument_list|(
name|desc
operator|.
name|testDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|addValue
argument_list|(
name|desc
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

