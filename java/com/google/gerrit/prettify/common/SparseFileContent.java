begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.prettify.common
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * A class to store subset of a file's lines in a memory efficient way. Internally, it stores lines  * as a list of ranges. Each range represents continuous set of lines and has information about line  * numbers in original file (zero-based).  *  *<p>{@link SparseFileContent.Accessor} must be used to work with the stored content.  */
end_comment

begin_class
annotation|@
name|AutoValue
DECL|class|SparseFileContent
specifier|public
specifier|abstract
class|class
name|SparseFileContent
block|{
DECL|method|getRanges ()
specifier|abstract
name|ImmutableList
argument_list|<
name|Range
argument_list|>
name|getRanges
parameter_list|()
function_decl|;
DECL|method|getSize ()
specifier|public
specifier|abstract
name|int
name|getSize
parameter_list|()
function_decl|;
DECL|method|create (ImmutableList<Range> ranges, int size)
specifier|public
specifier|static
name|SparseFileContent
name|create
parameter_list|(
name|ImmutableList
argument_list|<
name|Range
argument_list|>
name|ranges
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_SparseFileContent
argument_list|(
name|ranges
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRangesCount ()
specifier|public
name|int
name|getRangesCount
parameter_list|()
block|{
return|return
name|getRanges
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|createAccessor ()
specifier|public
name|Accessor
name|createAccessor
parameter_list|()
block|{
return|return
operator|new
name|Accessor
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Provide a methods to work with the content of a {@link SparseFileContent}.    *    *<p>The class hides internal representation of a {@link SparseFileContent} and provides    * convenient way for accessing a content.    */
DECL|class|Accessor
specifier|public
specifier|static
class|class
name|Accessor
block|{
DECL|field|content
specifier|private
specifier|final
name|SparseFileContent
name|content
decl_stmt|;
DECL|field|currentRangeIdx
specifier|private
name|int
name|currentRangeIdx
decl_stmt|;
DECL|method|Accessor (SparseFileContent content)
specifier|private
name|Accessor
parameter_list|(
name|SparseFileContent
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
DECL|method|get (int idx)
specifier|public
name|String
name|get
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
specifier|final
name|String
name|line
init|=
name|getLine
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|idx
argument_list|)
throw|;
block|}
return|return
name|line
return|;
block|}
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|content
operator|.
name|getSize
argument_list|()
return|;
block|}
DECL|method|contains (int idx)
specifier|public
name|boolean
name|contains
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|getLine
argument_list|(
name|idx
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|first ()
specifier|public
name|int
name|first
parameter_list|()
block|{
return|return
name|content
operator|.
name|getRanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|getSize
argument_list|()
else|:
name|content
operator|.
name|getRanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBase
argument_list|()
return|;
block|}
DECL|method|next (int idx)
specifier|public
name|int
name|next
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
comment|// Most requests are sequential in nature, fetching the next
comment|// line from the current range, or the immediate next range.
comment|//
name|ImmutableList
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|content
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|int
name|high
init|=
name|ranges
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentRangeIdx
operator|<
name|high
condition|)
block|{
name|Range
name|cur
init|=
name|ranges
operator|.
name|get
argument_list|(
name|currentRangeIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|contains
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
condition|)
block|{
return|return
name|idx
operator|+
literal|1
return|;
block|}
if|if
condition|(
operator|++
name|currentRangeIdx
operator|<
name|high
condition|)
block|{
comment|// Its not plus one, its the base of the next range.
comment|//
return|return
name|ranges
operator|.
name|get
argument_list|(
name|currentRangeIdx
argument_list|)
operator|.
name|getBase
argument_list|()
return|;
block|}
block|}
comment|// Binary search for the current value, since we know its a sorted list.
comment|//
name|int
name|low
init|=
literal|0
decl_stmt|;
do|do
block|{
specifier|final
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
decl_stmt|;
specifier|final
name|Range
name|cur
init|=
name|ranges
operator|.
name|get
argument_list|(
name|mid
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
block|{
if|if
condition|(
name|cur
operator|.
name|contains
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
condition|)
block|{
comment|// Trivial plus one case above failed due to wrong currentRangeIdx.
comment|// Reset the cache so we don't miss in the future.
comment|//
name|currentRangeIdx
operator|=
name|mid
expr_stmt|;
return|return
name|idx
operator|+
literal|1
return|;
block|}
if|if
condition|(
name|mid
operator|+
literal|1
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Its the base of the next range.
name|currentRangeIdx
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
return|return
name|ranges
operator|.
name|get
argument_list|(
name|currentRangeIdx
argument_list|)
operator|.
name|getBase
argument_list|()
return|;
block|}
comment|// No more lines in the file.
comment|//
return|return
name|getSize
argument_list|()
return|;
block|}
if|if
condition|(
name|idx
operator|<
name|cur
operator|.
name|getBase
argument_list|()
condition|)
block|{
name|high
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
do|while
condition|(
name|low
operator|<
name|high
condition|)
do|;
return|return
name|getSize
argument_list|()
return|;
block|}
DECL|method|getLine (int idx)
specifier|private
name|String
name|getLine
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
comment|// Most requests are sequential in nature, fetching the next
comment|// line from the current range, or the next range.
comment|//
name|ImmutableList
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|content
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|int
name|high
init|=
name|ranges
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentRangeIdx
operator|<
name|high
condition|)
block|{
name|Range
name|cur
init|=
name|ranges
operator|.
name|get
argument_list|(
name|currentRangeIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
block|{
return|return
name|cur
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
if|if
condition|(
operator|++
name|currentRangeIdx
operator|<
name|high
condition|)
block|{
specifier|final
name|Range
name|next
init|=
name|ranges
operator|.
name|get
argument_list|(
name|currentRangeIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
block|{
return|return
name|next
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
block|}
block|}
comment|// Binary search for the range, since we know its a sorted list.
comment|//
if|if
condition|(
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|low
init|=
literal|0
decl_stmt|;
do|do
block|{
specifier|final
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
decl_stmt|;
specifier|final
name|Range
name|cur
init|=
name|ranges
operator|.
name|get
argument_list|(
name|mid
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|currentRangeIdx
operator|=
name|mid
expr_stmt|;
return|return
name|cur
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
if|if
condition|(
name|idx
operator|<
name|cur
operator|.
name|getBase
argument_list|()
condition|)
block|{
name|high
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
do|while
condition|(
name|low
operator|<
name|high
condition|)
do|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"SparseFileContent[\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Range
name|r
range|:
name|getRanges
argument_list|()
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|AutoValue
DECL|class|Range
specifier|abstract
specifier|static
class|class
name|Range
block|{
DECL|method|create (int base, ImmutableList<String> lines)
specifier|static
name|Range
name|create
parameter_list|(
name|int
name|base
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_SparseFileContent_Range
argument_list|(
name|base
argument_list|,
name|lines
argument_list|)
return|;
block|}
DECL|method|getBase ()
specifier|abstract
name|int
name|getBase
parameter_list|()
function_decl|;
DECL|method|getLines ()
specifier|abstract
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|()
function_decl|;
DECL|method|get (int i)
specifier|private
name|String
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getLines
argument_list|()
operator|.
name|get
argument_list|(
name|i
operator|-
name|getBase
argument_list|()
argument_list|)
return|;
block|}
DECL|method|end ()
specifier|private
name|int
name|end
parameter_list|()
block|{
return|return
name|getBase
argument_list|()
operator|+
name|getLines
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|contains (int i)
specifier|private
name|boolean
name|contains
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getBase
argument_list|()
operator|<=
name|i
operator|&&
name|i
operator|<
name|end
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
comment|// Usage of [ and ) is intentional to denote inclusive/exclusive range
return|return
literal|"Range["
operator|+
name|getBase
argument_list|()
operator|+
literal|","
operator|+
name|end
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

