begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.extensions.conditions
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|conditions
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/** Delayed evaluation of a boolean condition. */
end_comment

begin_class
DECL|class|BooleanCondition
specifier|public
specifier|abstract
class|class
name|BooleanCondition
block|{
DECL|field|TRUE
specifier|public
specifier|static
specifier|final
name|BooleanCondition
name|TRUE
init|=
operator|new
name|Value
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|FALSE
specifier|public
specifier|static
specifier|final
name|BooleanCondition
name|FALSE
init|=
operator|new
name|Value
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|valueOf (boolean a)
specifier|public
specifier|static
name|BooleanCondition
name|valueOf
parameter_list|(
name|boolean
name|a
parameter_list|)
block|{
return|return
name|a
condition|?
name|TRUE
else|:
name|FALSE
return|;
block|}
DECL|method|and (BooleanCondition a, BooleanCondition b)
specifier|public
specifier|static
name|BooleanCondition
name|and
parameter_list|(
name|BooleanCondition
name|a
parameter_list|,
name|BooleanCondition
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|FALSE
operator|||
name|b
operator|==
name|FALSE
condition|?
name|FALSE
else|:
operator|new
name|And
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|and (boolean a, BooleanCondition b)
specifier|public
specifier|static
name|BooleanCondition
name|and
parameter_list|(
name|boolean
name|a
parameter_list|,
name|BooleanCondition
name|b
parameter_list|)
block|{
return|return
name|and
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|or (BooleanCondition a, BooleanCondition b)
specifier|public
specifier|static
name|BooleanCondition
name|or
parameter_list|(
name|BooleanCondition
name|a
parameter_list|,
name|BooleanCondition
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|TRUE
operator|||
name|b
operator|==
name|TRUE
condition|?
name|TRUE
else|:
operator|new
name|Or
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|or (boolean a, BooleanCondition b)
specifier|public
specifier|static
name|BooleanCondition
name|or
parameter_list|(
name|boolean
name|a
parameter_list|,
name|BooleanCondition
name|b
parameter_list|)
block|{
return|return
name|or
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|not (BooleanCondition bc)
specifier|public
specifier|static
name|BooleanCondition
name|not
parameter_list|(
name|BooleanCondition
name|bc
parameter_list|)
block|{
return|return
name|bc
operator|==
name|TRUE
condition|?
name|FALSE
else|:
name|bc
operator|==
name|FALSE
condition|?
name|TRUE
else|:
operator|new
name|Not
argument_list|(
name|bc
argument_list|)
return|;
block|}
DECL|method|BooleanCondition ()
name|BooleanCondition
parameter_list|()
block|{}
comment|/** @return evaluate the condition and return its value. */
DECL|method|value ()
specifier|public
specifier|abstract
name|boolean
name|value
parameter_list|()
function_decl|;
comment|/**    * Recursively collect all children of type {@code type}.    *    * @param type implementation type of the conditions to collect and return.    * @return non-null, unmodifiable iteration of children of type {@code type}.    */
DECL|method|children (Class<T> type)
specifier|public
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|children
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
function_decl|;
comment|/**    * Reduce evaluation tree by cutting off branches that evaluate trivially and replacing them with    * a leave note corresponding to the value the branch evaluated to.    *    *<p><code>    * Example 1 (T=True, F=False, C=non-trivial check):    *      OR    *     /  \    =>    T    *    C   T    * Example 2 (cuts off a not-trivial check):    *      AND    *     /  \    =>    F    *    C   F    * Example 3:    *      AND    *     /  \    =>    F    *    T   F    *</code>    *    *<p>There is no guarantee that the resulting tree is minimal. The only guarantee made is that    * branches that evaluate trivially will be cut off and replaced by primitive values.    */
DECL|method|reduce ()
specifier|public
specifier|abstract
name|BooleanCondition
name|reduce
parameter_list|()
function_decl|;
comment|/**    * Check if the condition evaluates to either {@code true} or {@code false} without providing    * additional information to the evaluation tree, e.g. through checks to a remote service such as    * {@code PermissionBackend}.    *    *<p>In this case, the tree can be reduced to skip all non-trivial checks resulting in a    * performance gain.    */
DECL|method|evaluatesTrivially ()
specifier|protected
specifier|abstract
name|boolean
name|evaluatesTrivially
parameter_list|()
function_decl|;
DECL|class|And
specifier|private
specifier|static
specifier|final
class|class
name|And
extends|extends
name|BooleanCondition
block|{
DECL|field|a
specifier|private
specifier|final
name|BooleanCondition
name|a
decl_stmt|;
DECL|field|b
specifier|private
specifier|final
name|BooleanCondition
name|b
decl_stmt|;
DECL|method|And (BooleanCondition a, BooleanCondition b)
name|And
parameter_list|(
name|BooleanCondition
name|a
parameter_list|,
name|BooleanCondition
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
if|if
condition|(
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|a
argument_list|,
literal|false
argument_list|)
operator|||
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|b
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|a
operator|.
name|value
argument_list|()
operator|&&
name|b
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|children (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|children
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|a
operator|.
name|children
argument_list|(
name|type
argument_list|)
argument_list|,
name|b
operator|.
name|children
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reduce ()
specifier|public
name|BooleanCondition
name|reduce
parameter_list|()
block|{
if|if
condition|(
name|evaluatesTrivially
argument_list|()
condition|)
block|{
return|return
name|Value
operator|.
name|valueOf
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|And
argument_list|(
name|a
operator|.
name|reduce
argument_list|()
argument_list|,
name|b
operator|.
name|reduce
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|a
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|b
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|And
condition|)
block|{
name|And
name|o
init|=
operator|(
name|And
operator|)
name|other
decl_stmt|;
return|return
name|a
operator|.
name|equals
argument_list|(
name|o
operator|.
name|a
argument_list|)
operator|&&
name|b
operator|.
name|equals
argument_list|(
name|o
operator|.
name|b
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|maybeTrim
argument_list|(
name|a
argument_list|,
name|getClass
argument_list|()
argument_list|)
operator|+
literal|"&& "
operator|+
name|maybeTrim
argument_list|(
name|a
argument_list|,
name|getClass
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|evaluatesTrivially ()
specifier|protected
name|boolean
name|evaluatesTrivially
parameter_list|()
block|{
return|return
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|a
argument_list|,
literal|false
argument_list|)
operator|||
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|b
argument_list|,
literal|false
argument_list|)
operator|||
operator|(
name|a
operator|.
name|evaluatesTrivially
argument_list|()
operator|&&
name|b
operator|.
name|evaluatesTrivially
argument_list|()
operator|)
return|;
block|}
block|}
DECL|class|Or
specifier|private
specifier|static
specifier|final
class|class
name|Or
extends|extends
name|BooleanCondition
block|{
DECL|field|a
specifier|private
specifier|final
name|BooleanCondition
name|a
decl_stmt|;
DECL|field|b
specifier|private
specifier|final
name|BooleanCondition
name|b
decl_stmt|;
DECL|method|Or (BooleanCondition a, BooleanCondition b)
name|Or
parameter_list|(
name|BooleanCondition
name|a
parameter_list|,
name|BooleanCondition
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
if|if
condition|(
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|a
argument_list|,
literal|true
argument_list|)
operator|||
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|b
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|a
operator|.
name|value
argument_list|()
operator|||
name|b
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|children (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|children
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|a
operator|.
name|children
argument_list|(
name|type
argument_list|)
argument_list|,
name|b
operator|.
name|children
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reduce ()
specifier|public
name|BooleanCondition
name|reduce
parameter_list|()
block|{
if|if
condition|(
name|evaluatesTrivially
argument_list|()
condition|)
block|{
return|return
name|Value
operator|.
name|valueOf
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|Or
argument_list|(
name|a
operator|.
name|reduce
argument_list|()
argument_list|,
name|b
operator|.
name|reduce
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|a
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|b
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|Or
condition|)
block|{
name|Or
name|o
init|=
operator|(
name|Or
operator|)
name|other
decl_stmt|;
return|return
name|a
operator|.
name|equals
argument_list|(
name|o
operator|.
name|a
argument_list|)
operator|&&
name|b
operator|.
name|equals
argument_list|(
name|o
operator|.
name|b
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|maybeTrim
argument_list|(
name|a
argument_list|,
name|getClass
argument_list|()
argument_list|)
operator|+
literal|" || "
operator|+
name|maybeTrim
argument_list|(
name|a
argument_list|,
name|getClass
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|evaluatesTrivially ()
specifier|protected
name|boolean
name|evaluatesTrivially
parameter_list|()
block|{
return|return
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|a
argument_list|,
literal|true
argument_list|)
operator|||
name|evaluatesTriviallyToExpectedValue
argument_list|(
name|b
argument_list|,
literal|true
argument_list|)
operator|||
operator|(
name|a
operator|.
name|evaluatesTrivially
argument_list|()
operator|&&
name|b
operator|.
name|evaluatesTrivially
argument_list|()
operator|)
return|;
block|}
block|}
DECL|class|Not
specifier|private
specifier|static
specifier|final
class|class
name|Not
extends|extends
name|BooleanCondition
block|{
DECL|field|cond
specifier|private
specifier|final
name|BooleanCondition
name|cond
decl_stmt|;
DECL|method|Not (BooleanCondition bc)
name|Not
parameter_list|(
name|BooleanCondition
name|bc
parameter_list|)
block|{
name|cond
operator|=
name|bc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
return|return
operator|!
name|cond
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|children (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|children
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|cond
operator|.
name|children
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reduce ()
specifier|public
name|BooleanCondition
name|reduce
parameter_list|()
block|{
if|if
condition|(
name|evaluatesTrivially
argument_list|()
condition|)
block|{
return|return
name|Value
operator|.
name|valueOf
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|cond
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|Not
condition|?
name|cond
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Not
operator|)
name|other
operator|)
operator|.
name|cond
argument_list|)
else|:
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"!"
operator|+
name|cond
return|;
block|}
annotation|@
name|Override
DECL|method|evaluatesTrivially ()
specifier|protected
name|boolean
name|evaluatesTrivially
parameter_list|()
block|{
return|return
name|cond
operator|.
name|evaluatesTrivially
argument_list|()
return|;
block|}
block|}
DECL|class|Value
specifier|private
specifier|static
specifier|final
class|class
name|Value
extends|extends
name|BooleanCondition
block|{
DECL|field|value
specifier|private
specifier|final
name|boolean
name|value
decl_stmt|;
DECL|method|Value (boolean v)
name|Value
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|value
operator|=
name|v
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value ()
specifier|public
name|boolean
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|children (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|children
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reduce ()
specifier|public
name|BooleanCondition
name|reduce
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|Value
condition|?
name|value
operator|==
operator|(
operator|(
name|Value
operator|)
name|other
operator|)
operator|.
name|value
else|:
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|evaluatesTrivially ()
specifier|protected
name|boolean
name|evaluatesTrivially
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Helper for use in toString methods. Remove leading '(' and trailing ')' if the type is the same    * as the parent.    */
DECL|method|maybeTrim (BooleanCondition cond, Class<? extends BooleanCondition> type)
specifier|static
name|String
name|maybeTrim
parameter_list|(
name|BooleanCondition
name|cond
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BooleanCondition
argument_list|>
name|type
parameter_list|)
block|{
name|String
name|s
init|=
name|cond
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|cond
operator|.
name|getClass
argument_list|()
operator|==
name|type
operator|&&
name|s
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'('
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|')'
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|evaluatesTriviallyToExpectedValue ( BooleanCondition cond, boolean expectedValue)
specifier|private
specifier|static
name|boolean
name|evaluatesTriviallyToExpectedValue
parameter_list|(
name|BooleanCondition
name|cond
parameter_list|,
name|boolean
name|expectedValue
parameter_list|)
block|{
return|return
name|cond
operator|.
name|evaluatesTrivially
argument_list|()
operator|&&
operator|(
name|cond
operator|.
name|value
argument_list|()
operator|==
name|expectedValue
operator|)
return|;
block|}
block|}
end_class

end_unit

