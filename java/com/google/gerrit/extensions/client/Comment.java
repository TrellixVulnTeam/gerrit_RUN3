begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.extensions.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|Comment
specifier|public
specifier|abstract
class|class
name|Comment
block|{
comment|/**    * Patch set number containing this commit.    *    *<p>Only set in contexts where comments may come from multiple patch sets.    */
DECL|field|patchSet
specifier|public
name|Integer
name|patchSet
decl_stmt|;
DECL|field|id
specifier|public
name|String
name|id
decl_stmt|;
DECL|field|path
specifier|public
name|String
name|path
decl_stmt|;
DECL|field|side
specifier|public
name|Side
name|side
decl_stmt|;
DECL|field|parent
specifier|public
name|Integer
name|parent
decl_stmt|;
DECL|field|line
specifier|public
name|Integer
name|line
decl_stmt|;
comment|// value 0 or null indicates a file comment, normal lines start at 1
DECL|field|range
specifier|public
name|Range
name|range
decl_stmt|;
DECL|field|inReplyTo
specifier|public
name|String
name|inReplyTo
decl_stmt|;
DECL|field|updated
specifier|public
name|Timestamp
name|updated
decl_stmt|;
DECL|field|message
specifier|public
name|String
name|message
decl_stmt|;
DECL|field|unresolved
specifier|public
name|Boolean
name|unresolved
decl_stmt|;
DECL|class|Range
specifier|public
specifier|static
class|class
name|Range
implements|implements
name|Comparable
argument_list|<
name|Range
argument_list|>
block|{
DECL|field|RANGE_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Range
argument_list|>
name|RANGE_COMPARATOR
init|=
name|Comparator
operator|.
expr|<
name|Range
operator|>
name|comparingInt
argument_list|(
name|range
lambda|->
name|range
operator|.
name|startLine
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|range
lambda|->
name|range
operator|.
name|startCharacter
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|range
lambda|->
name|range
operator|.
name|endLine
argument_list|)
operator|.
name|thenComparingInt
argument_list|(
name|range
lambda|->
name|range
operator|.
name|endCharacter
argument_list|)
decl_stmt|;
comment|// Start position is inclusive; end position is exclusive.
DECL|field|startLine
specifier|public
name|int
name|startLine
decl_stmt|;
comment|// 1-based
DECL|field|startCharacter
specifier|public
name|int
name|startCharacter
decl_stmt|;
comment|// 0-based
DECL|field|endLine
specifier|public
name|int
name|endLine
decl_stmt|;
comment|// 1-based
DECL|field|endCharacter
specifier|public
name|int
name|endCharacter
decl_stmt|;
comment|// 0-based
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|startLine
operator|>
literal|0
operator|&&
name|startCharacter
operator|>=
literal|0
operator|&&
name|endLine
operator|>
literal|0
operator|&&
name|endCharacter
operator|>=
literal|0
operator|&&
name|startLine
operator|<=
name|endLine
operator|&&
operator|(
name|startLine
operator|!=
name|endLine
operator|||
name|startCharacter
operator|<=
name|endCharacter
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Range
condition|)
block|{
name|Range
name|r
init|=
operator|(
name|Range
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|startLine
argument_list|,
name|r
operator|.
name|startLine
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|startCharacter
argument_list|,
name|r
operator|.
name|startCharacter
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|endLine
argument_list|,
name|r
operator|.
name|endLine
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|endCharacter
argument_list|,
name|r
operator|.
name|endCharacter
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|startLine
argument_list|,
name|startCharacter
argument_list|,
name|endLine
argument_list|,
name|endCharacter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Range{"
operator|+
literal|"startLine="
operator|+
name|startLine
operator|+
literal|", startCharacter="
operator|+
name|startCharacter
operator|+
literal|", endLine="
operator|+
name|endLine
operator|+
literal|", endCharacter="
operator|+
name|endCharacter
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Range otherRange)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Range
name|otherRange
parameter_list|)
block|{
return|return
name|RANGE_COMPARATOR
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|otherRange
argument_list|)
return|;
block|}
block|}
DECL|method|side ()
specifier|public
name|short
name|side
parameter_list|()
block|{
if|if
condition|(
name|side
operator|==
name|Side
operator|.
name|PARENT
condition|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|parent
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
name|parent
operator|.
name|shortValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|getClass
argument_list|()
operator|==
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|Comment
name|c
init|=
operator|(
name|Comment
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|patchSet
argument_list|,
name|c
operator|.
name|patchSet
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|c
operator|.
name|id
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|path
argument_list|,
name|c
operator|.
name|path
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|side
argument_list|,
name|c
operator|.
name|side
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|parent
argument_list|,
name|c
operator|.
name|parent
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|line
argument_list|,
name|c
operator|.
name|line
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|range
argument_list|,
name|c
operator|.
name|range
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|inReplyTo
argument_list|,
name|c
operator|.
name|inReplyTo
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|updated
argument_list|,
name|c
operator|.
name|updated
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|message
argument_list|,
name|c
operator|.
name|message
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|unresolved
argument_list|,
name|c
operator|.
name|unresolved
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|patchSet
argument_list|,
name|id
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
name|parent
argument_list|,
name|line
argument_list|,
name|range
argument_list|,
name|inReplyTo
argument_list|,
name|updated
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
end_class

end_unit

