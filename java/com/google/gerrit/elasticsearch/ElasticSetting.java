begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.elasticsearch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ElasticSetting
class|class
name|ElasticSetting
block|{
comment|/** The custom char mappings of "." to " " and "_" to " " in the form of UTF-8 */
DECL|field|CUSTOM_CHAR_MAPPING
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|CUSTOM_CHAR_MAPPING
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"\\u002E"
argument_list|,
literal|"\\u0020"
argument_list|,
literal|"\\u005F"
argument_list|,
literal|"\\u0020"
argument_list|)
decl_stmt|;
DECL|method|createSetting (ElasticConfiguration config, ElasticQueryAdapter adapter)
specifier|static
name|SettingProperties
name|createSetting
parameter_list|(
name|ElasticConfiguration
name|config
parameter_list|,
name|ElasticQueryAdapter
name|adapter
parameter_list|)
block|{
return|return
operator|new
name|ElasticSetting
operator|.
name|Builder
argument_list|()
operator|.
name|addCharFilter
argument_list|()
operator|.
name|addAnalyzer
argument_list|()
operator|.
name|build
argument_list|(
name|config
argument_list|,
name|adapter
argument_list|)
return|;
block|}
DECL|class|Builder
specifier|static
class|class
name|Builder
block|{
DECL|field|fields
specifier|private
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldProperties
argument_list|>
name|fields
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|build (ElasticConfiguration config, ElasticQueryAdapter adapter)
name|SettingProperties
name|build
parameter_list|(
name|ElasticConfiguration
name|config
parameter_list|,
name|ElasticQueryAdapter
name|adapter
parameter_list|)
block|{
name|SettingProperties
name|properties
init|=
operator|new
name|SettingProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|analysis
operator|=
name|fields
operator|.
name|build
argument_list|()
expr_stmt|;
name|properties
operator|.
name|numberOfShards
operator|=
name|config
operator|.
name|getNumberOfShards
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|properties
operator|.
name|numberOfReplicas
operator|=
name|config
operator|.
name|numberOfReplicas
expr_stmt|;
return|return
name|properties
return|;
block|}
DECL|method|addCharFilter ()
name|Builder
name|addCharFilter
parameter_list|()
block|{
name|FieldProperties
name|charMapping
init|=
operator|new
name|FieldProperties
argument_list|(
literal|"mapping"
argument_list|)
decl_stmt|;
name|charMapping
operator|.
name|mappings
operator|=
name|getCustomCharMappings
argument_list|(
name|CUSTOM_CHAR_MAPPING
argument_list|)
expr_stmt|;
name|FieldProperties
name|charFilter
init|=
operator|new
name|FieldProperties
argument_list|()
decl_stmt|;
name|charFilter
operator|.
name|customMapping
operator|=
name|charMapping
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"char_filter"
argument_list|,
name|charFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addAnalyzer ()
name|Builder
name|addAnalyzer
parameter_list|()
block|{
name|FieldProperties
name|customAnalyzer
init|=
operator|new
name|FieldProperties
argument_list|(
literal|"custom"
argument_list|)
decl_stmt|;
name|customAnalyzer
operator|.
name|tokenizer
operator|=
literal|"standard"
expr_stmt|;
name|customAnalyzer
operator|.
name|charFilter
operator|=
operator|new
name|String
index|[]
block|{
literal|"custom_mapping"
block|}
expr_stmt|;
name|customAnalyzer
operator|.
name|filter
operator|=
operator|new
name|String
index|[]
block|{
literal|"lowercase"
block|}
expr_stmt|;
name|FieldProperties
name|analyzer
init|=
operator|new
name|FieldProperties
argument_list|()
decl_stmt|;
name|analyzer
operator|.
name|customWithCharFilter
operator|=
name|customAnalyzer
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCustomCharMappings (ImmutableMap<String, String> map)
specifier|private
specifier|static
name|String
index|[]
name|getCustomCharMappings
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|mappingIndex
init|=
literal|0
decl_stmt|;
name|int
name|numOfMappings
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|mapping
init|=
operator|new
name|String
index|[
name|numOfMappings
index|]
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapping
index|[
name|mappingIndex
operator|++
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"=>"
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
block|}
DECL|class|SettingProperties
specifier|static
class|class
name|SettingProperties
block|{
DECL|field|analysis
name|Map
argument_list|<
name|String
argument_list|,
name|FieldProperties
argument_list|>
name|analysis
decl_stmt|;
DECL|field|numberOfShards
name|Integer
name|numberOfShards
decl_stmt|;
DECL|field|numberOfReplicas
name|Integer
name|numberOfReplicas
decl_stmt|;
block|}
DECL|class|FieldProperties
specifier|static
class|class
name|FieldProperties
block|{
DECL|field|tokenizer
name|String
name|tokenizer
decl_stmt|;
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|charFilter
name|String
index|[]
name|charFilter
decl_stmt|;
DECL|field|filter
name|String
index|[]
name|filter
decl_stmt|;
DECL|field|mappings
name|String
index|[]
name|mappings
decl_stmt|;
DECL|field|customMapping
name|FieldProperties
name|customMapping
decl_stmt|;
DECL|field|customWithCharFilter
name|FieldProperties
name|customWithCharFilter
decl_stmt|;
DECL|method|FieldProperties ()
name|FieldProperties
parameter_list|()
block|{}
DECL|method|FieldProperties (String type)
name|FieldProperties
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

