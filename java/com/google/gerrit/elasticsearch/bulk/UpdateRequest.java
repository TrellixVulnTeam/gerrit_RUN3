begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.elasticsearch.bulk
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|bulk
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
operator|.
name|builders
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|UpdateRequest
specifier|public
class|class
name|UpdateRequest
parameter_list|<
name|V
parameter_list|>
extends|extends
name|BulkRequest
block|{
DECL|field|schema
specifier|private
specifier|final
name|Schema
argument_list|<
name|V
argument_list|>
name|schema
decl_stmt|;
DECL|field|v
specifier|private
specifier|final
name|V
name|v
decl_stmt|;
DECL|method|UpdateRequest (Schema<V> schema, V v)
specifier|public
name|UpdateRequest
parameter_list|(
name|Schema
argument_list|<
name|V
argument_list|>
name|schema
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRequest ()
specifier|protected
name|String
name|getRequest
parameter_list|()
block|{
try|try
init|(
name|XContentBuilder
name|closeable
init|=
operator|new
name|XContentBuilder
argument_list|()
init|)
block|{
name|XContentBuilder
name|builder
init|=
name|closeable
operator|.
name|startObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Values
argument_list|<
name|V
argument_list|>
name|values
range|:
name|schema
operator|.
name|buildFields
argument_list|(
name|v
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|values
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|getField
argument_list|()
operator|.
name|isRepeatable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|Streams
operator|.
name|stream
argument_list|(
name|values
operator|.
name|getValues
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|shouldAddElement
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|element
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|values
operator|.
name|getValues
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldAddElement
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
operator|+
name|System
operator|.
name|lineSeparator
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|shouldAddElement (Object element)
specifier|private
name|boolean
name|shouldAddElement
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
operator|!
operator|(
name|element
operator|instanceof
name|String
operator|)
operator|||
operator|!
operator|(
operator|(
name|String
operator|)
name|element
operator|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

