begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.common.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FilenameComparator
specifier|public
class|class
name|FilenameComparator
implements|implements
name|Comparator
argument_list|<
name|String
argument_list|>
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|FilenameComparator
name|INSTANCE
init|=
operator|new
name|FilenameComparator
argument_list|()
decl_stmt|;
DECL|field|cppHeaderSuffixes
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|cppHeaderSuffixes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|".h"
argument_list|,
literal|".hxx"
argument_list|,
literal|".hpp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|FilenameComparator ()
specifier|private
name|FilenameComparator
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|compare (String path1, String path2)
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path1
argument_list|)
operator|&&
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path1
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|Patch
operator|.
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|path1
argument_list|)
operator|&&
name|Patch
operator|.
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|Patch
operator|.
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|path1
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|Patch
operator|.
name|MERGE_LIST
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
name|int
name|s1
init|=
name|path1
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|int
name|s2
init|=
name|path2
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|>
literal|0
operator|&&
name|s2
operator|>
literal|0
operator|&&
name|path1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s1
argument_list|)
operator|.
name|equals
argument_list|(
name|path2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s2
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|suffixA
init|=
name|path1
operator|.
name|substring
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|String
name|suffixB
init|=
name|path2
operator|.
name|substring
argument_list|(
name|s2
argument_list|)
decl_stmt|;
comment|// C++ and C: give priority to header files (.h/.hpp/...)
if|if
condition|(
name|cppHeaderSuffixes
operator|.
name|contains
argument_list|(
name|suffixA
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|cppHeaderSuffixes
operator|.
name|contains
argument_list|(
name|suffixB
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
name|path1
operator|.
name|compareTo
argument_list|(
name|path2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

