begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.entities.converter
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|proto
operator|.
name|Entities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_enum
annotation|@
name|Immutable
DECL|enum|ChangeMessageProtoConverter
specifier|public
enum|enum
name|ChangeMessageProtoConverter
implements|implements
name|ProtoConverter
argument_list|<
name|Entities
operator|.
name|ChangeMessage
argument_list|,
name|ChangeMessage
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
specifier|private
specifier|final
name|ProtoConverter
argument_list|<
name|Entities
operator|.
name|ChangeMessage_Key
argument_list|,
name|ChangeMessage
operator|.
name|Key
argument_list|>
DECL|field|changeMessageKeyConverter
name|changeMessageKeyConverter
init|=
name|ChangeMessageKeyProtoConverter
operator|.
name|INSTANCE
decl_stmt|;
DECL|field|accountIdConverter
specifier|private
specifier|final
name|ProtoConverter
argument_list|<
name|Entities
operator|.
name|Account_Id
argument_list|,
name|Account
operator|.
name|Id
argument_list|>
name|accountIdConverter
init|=
name|AccountIdProtoConverter
operator|.
name|INSTANCE
decl_stmt|;
DECL|field|patchSetIdConverter
specifier|private
specifier|final
name|ProtoConverter
argument_list|<
name|Entities
operator|.
name|PatchSet_Id
argument_list|,
name|PatchSet
operator|.
name|Id
argument_list|>
name|patchSetIdConverter
init|=
name|PatchSetIdProtoConverter
operator|.
name|INSTANCE
decl_stmt|;
annotation|@
name|Override
DECL|method|toProto (ChangeMessage changeMessage)
specifier|public
name|Entities
operator|.
name|ChangeMessage
name|toProto
parameter_list|(
name|ChangeMessage
name|changeMessage
parameter_list|)
block|{
name|Entities
operator|.
name|ChangeMessage
operator|.
name|Builder
name|builder
init|=
name|Entities
operator|.
name|ChangeMessage
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|changeMessageKeyConverter
operator|.
name|toProto
argument_list|(
name|changeMessage
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Account
operator|.
name|Id
name|author
init|=
name|changeMessage
operator|.
name|getAuthor
argument_list|()
decl_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAuthorId
argument_list|(
name|accountIdConverter
operator|.
name|toProto
argument_list|(
name|author
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|writtenOn
init|=
name|changeMessage
operator|.
name|getWrittenOn
argument_list|()
decl_stmt|;
if|if
condition|(
name|writtenOn
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setWrittenOn
argument_list|(
name|writtenOn
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|changeMessage
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|changeMessage
operator|.
name|getPatchSetId
argument_list|()
decl_stmt|;
if|if
condition|(
name|patchSetId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPatchset
argument_list|(
name|patchSetIdConverter
operator|.
name|toProto
argument_list|(
name|patchSetId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|tag
init|=
name|changeMessage
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|Account
operator|.
name|Id
name|realAuthor
init|=
name|changeMessage
operator|.
name|getRealAuthor
argument_list|()
decl_stmt|;
comment|// ChangeMessage#getRealAuthor automatically delegates to ChangeMessage#getAuthor if the real
comment|// author is not set. However, the previous protobuf representation kept 'realAuthor' empty if
comment|// it wasn't set. To ensure binary compatibility, simulate the previous behavior.
if|if
condition|(
name|realAuthor
operator|!=
literal|null
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|realAuthor
argument_list|,
name|author
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setRealAuthor
argument_list|(
name|accountIdConverter
operator|.
name|toProto
argument_list|(
name|realAuthor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fromProto (Entities.ChangeMessage proto)
specifier|public
name|ChangeMessage
name|fromProto
parameter_list|(
name|Entities
operator|.
name|ChangeMessage
name|proto
parameter_list|)
block|{
name|ChangeMessage
operator|.
name|Key
name|key
init|=
name|proto
operator|.
name|hasKey
argument_list|()
condition|?
name|changeMessageKeyConverter
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getKey
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|Account
operator|.
name|Id
name|author
init|=
name|proto
operator|.
name|hasAuthorId
argument_list|()
condition|?
name|accountIdConverter
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getAuthorId
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|Timestamp
name|writtenOn
init|=
name|proto
operator|.
name|hasWrittenOn
argument_list|()
condition|?
operator|new
name|Timestamp
argument_list|(
name|proto
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|patchSetId
init|=
name|proto
operator|.
name|hasPatchset
argument_list|()
condition|?
name|patchSetIdConverter
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getPatchset
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|ChangeMessage
name|changeMessage
init|=
operator|new
name|ChangeMessage
argument_list|(
name|key
argument_list|,
name|author
argument_list|,
name|writtenOn
argument_list|,
name|patchSetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|changeMessage
operator|.
name|setMessage
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTag
argument_list|()
condition|)
block|{
name|changeMessage
operator|.
name|setTag
argument_list|(
name|proto
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasRealAuthor
argument_list|()
condition|)
block|{
name|changeMessage
operator|.
name|setRealAuthor
argument_list|(
name|accountIdConverter
operator|.
name|fromProto
argument_list|(
name|proto
operator|.
name|getRealAuthor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|changeMessage
return|;
block|}
annotation|@
name|Override
DECL|method|getParser ()
specifier|public
name|Parser
argument_list|<
name|Entities
operator|.
name|ChangeMessage
argument_list|>
name|getParser
parameter_list|()
block|{
return|return
name|Entities
operator|.
name|ChangeMessage
operator|.
name|parser
argument_list|()
return|;
block|}
block|}
end_enum

end_unit

