begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.testing
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|GerritApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|api
operator|.
name|changes
operator|.
name|DraftInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Comment
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|common
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/** Test helper for dealing with comments/drafts. */
end_comment

begin_class
DECL|class|TestCommentHelper
specifier|public
class|class
name|TestCommentHelper
block|{
DECL|field|gApi
specifier|private
specifier|final
name|GerritApi
name|gApi
decl_stmt|;
annotation|@
name|Inject
DECL|method|TestCommentHelper (GerritApi gerritApi)
specifier|public
name|TestCommentHelper
parameter_list|(
name|GerritApi
name|gerritApi
parameter_list|)
block|{
name|gApi
operator|=
name|gerritApi
expr_stmt|;
block|}
DECL|method|newDraft (String message)
specifier|public
name|DraftInput
name|newDraft
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
name|populate
argument_list|(
operator|new
name|DraftInput
argument_list|()
argument_list|,
literal|"file"
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|newDraft (String path, Side side, int line, String message)
specifier|public
name|DraftInput
name|newDraft
parameter_list|(
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|DraftInput
name|d
init|=
operator|new
name|DraftInput
argument_list|()
decl_stmt|;
return|return
name|populate
argument_list|(
name|d
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
name|line
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|addDraft (String changeId, String revId, DraftInput in)
specifier|public
name|void
name|addDraft
parameter_list|(
name|String
name|changeId
parameter_list|,
name|String
name|revId
parameter_list|,
name|DraftInput
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|revision
argument_list|(
name|revId
argument_list|)
operator|.
name|createDraft
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|getPublishedComments (String changeId)
specifier|public
name|Collection
argument_list|<
name|CommentInfo
argument_list|>
name|getPublishedComments
parameter_list|(
name|String
name|changeId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|gApi
operator|.
name|changes
argument_list|()
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
operator|.
name|comments
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|populate (C c, String path, String message)
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comment
parameter_list|>
name|C
name|populate
parameter_list|(
name|C
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|populate
argument_list|(
name|c
argument_list|,
name|path
argument_list|,
name|createLineRange
argument_list|()
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|populate (C c, String path, Range range, String message)
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comment
parameter_list|>
name|C
name|populate
parameter_list|(
name|C
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|Range
name|range
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|int
name|line
init|=
name|range
operator|.
name|startLine
decl_stmt|;
name|c
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|c
operator|.
name|side
operator|=
name|Side
operator|.
name|REVISION
expr_stmt|;
name|c
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|c
operator|.
name|line
operator|=
name|line
operator|!=
literal|0
condition|?
name|line
else|:
literal|null
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|c
operator|.
name|unresolved
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|0
condition|)
name|c
operator|.
name|range
operator|=
name|range
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|populate ( C c, String path, Side side, Range range, String message)
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comment
parameter_list|>
name|C
name|populate
parameter_list|(
name|C
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|Range
name|range
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|int
name|line
init|=
name|range
operator|.
name|startLine
decl_stmt|;
name|c
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|c
operator|.
name|side
operator|=
name|side
expr_stmt|;
name|c
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|c
operator|.
name|line
operator|=
name|line
operator|!=
literal|0
condition|?
name|line
else|:
literal|null
expr_stmt|;
name|c
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|c
operator|.
name|unresolved
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|0
condition|)
name|c
operator|.
name|range
operator|=
name|range
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|populate ( C c, String path, Side side, int line, String message)
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comment
parameter_list|>
name|C
name|populate
parameter_list|(
name|C
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|message
parameter_list|)
block|{
return|return
name|populate
argument_list|(
name|c
argument_list|,
name|path
argument_list|,
name|side
argument_list|,
name|createLineRange
argument_list|(
name|line
argument_list|)
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|createLineRange ()
specifier|private
specifier|static
name|Range
name|createLineRange
parameter_list|()
block|{
name|Range
name|range
init|=
operator|new
name|Range
argument_list|()
decl_stmt|;
name|range
operator|.
name|startLine
operator|=
literal|0
expr_stmt|;
name|range
operator|.
name|startCharacter
operator|=
literal|1
expr_stmt|;
name|range
operator|.
name|endLine
operator|=
literal|0
expr_stmt|;
name|range
operator|.
name|endCharacter
operator|=
literal|5
expr_stmt|;
return|return
name|range
return|;
block|}
DECL|method|createLineRange (int line)
specifier|private
specifier|static
name|Range
name|createLineRange
parameter_list|(
name|int
name|line
parameter_list|)
block|{
name|Range
name|range
init|=
operator|new
name|Range
argument_list|()
decl_stmt|;
name|range
operator|.
name|startLine
operator|=
name|line
expr_stmt|;
name|range
operator|.
name|startCharacter
operator|=
literal|1
expr_stmt|;
name|range
operator|.
name|endLine
operator|=
name|line
expr_stmt|;
name|range
operator|.
name|endCharacter
operator|=
literal|5
expr_stmt|;
return|return
name|range
return|;
block|}
block|}
end_class

end_unit

