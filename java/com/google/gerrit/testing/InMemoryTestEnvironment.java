begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.testing
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|ThreadLocalRequestContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|MethodRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * An in-memory test environment for integration tests.  *  *<p>This test environment emulates the internals of a Gerrit server without starting a Gerrit  * site. ReviewDb as well as NoteDb are represented by in-memory representations.  *  *<p>Each test is executed with a fresh and clean test environment. Hence, modifications applied in  * one test don't carry over to subsequent ones.  */
end_comment

begin_class
DECL|class|InMemoryTestEnvironment
specifier|public
specifier|final
class|class
name|InMemoryTestEnvironment
implements|implements
name|MethodRule
block|{
DECL|field|configProvider
specifier|private
specifier|final
name|Provider
argument_list|<
name|Config
argument_list|>
name|configProvider
decl_stmt|;
DECL|field|accountManager
annotation|@
name|Inject
specifier|private
name|AccountManager
name|accountManager
decl_stmt|;
DECL|field|userFactory
annotation|@
name|Inject
specifier|private
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
DECL|field|schemaCreator
annotation|@
name|Inject
specifier|private
name|SchemaCreator
name|schemaCreator
decl_stmt|;
DECL|field|requestContext
annotation|@
name|Inject
specifier|private
name|ThreadLocalRequestContext
name|requestContext
decl_stmt|;
comment|// Only for use in setting up/tearing down injector.
DECL|field|inMemoryDatabase
annotation|@
name|Inject
specifier|private
name|InMemoryDatabase
name|inMemoryDatabase
decl_stmt|;
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
DECL|field|lifecycle
specifier|private
name|LifecycleManager
name|lifecycle
decl_stmt|;
comment|/** Create a test environment using an empty base config. */
DECL|method|InMemoryTestEnvironment ()
specifier|public
name|InMemoryTestEnvironment
parameter_list|()
block|{
name|this
argument_list|(
name|Config
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a test environment using the specified base config.    *    *<p>The config is passed as a provider so it can be lazily initialized after this rule is    * instantiated, for example using {@link ConfigSuite}.    *    * @param configProvider possibly-lazy provider for the base config.    */
DECL|method|InMemoryTestEnvironment (Provider<Config> configProvider)
specifier|public
name|InMemoryTestEnvironment
parameter_list|(
name|Provider
argument_list|<
name|Config
argument_list|>
name|configProvider
parameter_list|)
block|{
name|this
operator|.
name|configProvider
operator|=
name|configProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (Statement base, FrameworkMethod method, Object target)
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|FrameworkMethod
name|method
parameter_list|,
name|Object
name|target
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|setUp
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|setApiUser (Account.Id id)
specifier|public
name|void
name|setApiUser
parameter_list|(
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
name|IdentifiedUser
name|user
init|=
name|userFactory
operator|.
name|create
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|requestContext
operator|.
name|setContext
argument_list|(
operator|new
name|RequestContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
name|getReviewDbProvider
parameter_list|()
block|{
return|return
name|Providers
operator|.
name|of
argument_list|(
name|db
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp (Object target)
specifier|private
name|void
name|setUp
parameter_list|(
name|Object
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|Config
name|cfg
init|=
name|configProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|InMemoryModule
operator|.
name|setDefaults
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|InMemoryModule
argument_list|(
name|cfg
argument_list|,
name|NoteDbMode
operator|.
name|newNotesMigrationFromEnv
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lifecycle
operator|=
operator|new
name|LifecycleManager
argument_list|()
expr_stmt|;
name|lifecycle
operator|.
name|add
argument_list|(
name|injector
argument_list|)
expr_stmt|;
name|lifecycle
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
init|(
name|ReviewDb
name|underlyingDb
init|=
name|inMemoryDatabase
operator|.
name|getDatabase
argument_list|()
operator|.
name|open
argument_list|()
init|)
block|{
name|schemaCreator
operator|.
name|create
argument_list|(
name|underlyingDb
argument_list|)
expr_stmt|;
block|}
name|db
operator|=
name|schemaFactory
operator|.
name|open
argument_list|()
expr_stmt|;
name|setApiUser
argument_list|(
name|accountManager
operator|.
name|authenticate
argument_list|(
name|AuthRequest
operator|.
name|forUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Inject target members after setting API user, so it can @Inject a ReviewDb if it wants.
name|injector
operator|.
name|injectMembers
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|private
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|lifecycle
operator|!=
literal|null
condition|)
block|{
name|lifecycle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|requestContext
operator|!=
literal|null
condition|)
block|{
name|requestContext
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InMemoryDatabase
operator|.
name|drop
argument_list|(
name|inMemoryDatabase
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

