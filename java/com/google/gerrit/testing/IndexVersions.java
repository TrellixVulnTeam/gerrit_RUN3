begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.testing
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|SchemaDefinitions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
DECL|class|IndexVersions
specifier|public
class|class
name|IndexVersions
block|{
DECL|field|ALL
specifier|static
specifier|final
name|String
name|ALL
init|=
literal|"all"
decl_stmt|;
DECL|field|CURRENT
specifier|static
specifier|final
name|String
name|CURRENT
init|=
literal|"current"
decl_stmt|;
DECL|field|PREVIOUS
specifier|static
specifier|final
name|String
name|PREVIOUS
init|=
literal|"previous"
decl_stmt|;
comment|/**    * Returns the index versions from {@link IndexVersions#get(SchemaDefinitions)} without the latest    * schema version.    *    * @param schemaDef the schema definition    * @return the index versions from {@link IndexVersions#get(SchemaDefinitions)} without the latest    *     schema version    */
DECL|method|getWithoutLatest (SchemaDefinitions<V> schemaDef)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|getWithoutLatest
parameter_list|(
name|SchemaDefinitions
argument_list|<
name|V
argument_list|>
name|schemaDef
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|schemaVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|get
argument_list|(
name|schemaDef
argument_list|)
argument_list|)
decl_stmt|;
name|schemaVersions
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|schemaDef
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|schemaVersions
argument_list|)
return|;
block|}
comment|/**    * Returns the schema versions against which the query tests should be executed.    *    *<p>The schema versions are read from the '<schema-name>_INDEX_VERSIONS' env var if it is set,    * e.g. 'ACCOUNTS_INDEX_VERSIONS', 'CHANGES_INDEX_VERSIONS', 'GROUPS_INDEX_VERSIONS'.    *    *<p>If schema versions were not specified by an env var, they are read from the    * 'gerrit.index.<schema-name>.versions' system property, e.g. 'gerrit.index.accounts.version',    * 'gerrit.index.changes.version', 'gerrit.index.groups.version'.    *    *<p>As value a comma-separated list of schema versions is expected. {@code current} can be used    * for the latest schema version and {@code previous} is resolved to the second last schema    * version. Alternatively the value can also be {@code all} for all schema versions.    *    *<p>If schema versions were neither specified by an env var nor by a system property, the    * current and the second last schema versions are returned. If there is no other schema version    * than the current schema version, only the current schema version is returned.    *    * @param schemaDef the schema definition    * @return the schema versions against which the query tests should be executed    * @throws IllegalArgumentException if the value of the env var or system property is invalid or    *     if any of the specified schema versions doesn't exist    */
DECL|method|get (SchemaDefinitions<V> schemaDef)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|SchemaDefinitions
argument_list|<
name|V
argument_list|>
name|schemaDef
parameter_list|)
block|{
name|String
name|envVar
init|=
name|schemaDef
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"_INDEX_VERSIONS"
decl_stmt|;
name|String
name|value
init|=
name|System
operator|.
name|getenv
argument_list|(
name|envVar
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|get
argument_list|(
name|schemaDef
argument_list|,
literal|"env variable "
operator|+
name|envVar
argument_list|,
name|value
argument_list|)
return|;
block|}
name|String
name|systemProperty
init|=
literal|"gerrit.index."
operator|+
name|schemaDef
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|".versions"
decl_stmt|;
name|value
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|systemProperty
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|schemaDef
argument_list|,
literal|"system property "
operator|+
name|systemProperty
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|get (SchemaDefinitions<V> schemaDef, String name, String value)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|(
name|SchemaDefinitions
argument_list|<
name|V
argument_list|>
name|schemaDef
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Schema
argument_list|<
name|V
argument_list|>
argument_list|>
name|schemas
init|=
name|schemaDef
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|ALL
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|schemas
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|versions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|value
argument_list|)
control|)
block|{
if|if
condition|(
name|CURRENT
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|schemaDef
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PREVIOUS
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|checkArgument
argument_list|(
name|schemaDef
operator|.
name|getPrevious
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"previous version does not exist"
argument_list|)
expr_stmt|;
name|versions
operator|.
name|add
argument_list|(
name|schemaDef
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|version
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|version
operator|!=
literal|null
argument_list|,
literal|"Invalid value for %s: %s"
argument_list|,
name|name
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|schemas
operator|.
name|containsKey
argument_list|(
name|version
argument_list|)
argument_list|,
literal|"Index version %s that was specified by %s not found."
operator|+
literal|" Possible versions are: %s"
argument_list|,
name|version
argument_list|,
name|name
argument_list|,
name|schemas
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|versions
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|versions
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|schemaVersions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaDef
operator|.
name|getPrevious
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaVersions
operator|.
name|add
argument_list|(
name|schemaDef
operator|.
name|getPrevious
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|schemaVersions
operator|.
name|add
argument_list|(
name|schemaDef
operator|.
name|getLatest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|schemaVersions
argument_list|)
return|;
block|}
DECL|method|asConfigMap ( SchemaDefinitions<V> schemaDef, List<Integer> schemaVersions, String testSuiteNamePrefix, Config baseConfig)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|Config
argument_list|>
name|asConfigMap
parameter_list|(
name|SchemaDefinitions
argument_list|<
name|V
argument_list|>
name|schemaDef
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|schemaVersions
parameter_list|,
name|String
name|testSuiteNamePrefix
parameter_list|,
name|Config
name|baseConfig
parameter_list|)
block|{
return|return
name|schemaVersions
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|toMap
argument_list|(
name|i
lambda|->
name|testSuiteNamePrefix
operator|+
name|i
argument_list|,
name|i
lambda|->
block|{
name|Config
name|cfg
operator|=
name|baseConfig
argument_list|;
name|cfg
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
literal|"lucene"
argument_list|,
name|schemaDef
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"TestVersion"
argument_list|,
name|i
argument_list|)
argument_list|;                   return
name|cfg
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

unit|} }
end_unit

