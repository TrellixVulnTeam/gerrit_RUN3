begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.restapi
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|project
operator|.
name|ProjectResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|RequestUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_comment
comment|/**  * Enforces quota on specific REST API endpoints.  *  *<p>Examples:  *  *<ul>  *<li>GET /a/accounts/self/detail => /restapi/accounts/detail:GET  *<li>GET /changes/123/revisions/current/detail => /restapi/changes/revisions/detail:GET  *<li>PUT /changes/10/reviewed => /changes/reviewed:PUT  *</ul>  *  *<p>Adds context (change, project, account) to the quota check if the call is for an existing  * entity that was successfully parsed. This quota check is generally enforced after the resource  * was parsed, but before the view is executed. If a quota enforcer desires to throttle earlier,  * they should consider quota groups in the {@code /http/*} space.  */
end_comment

begin_class
DECL|class|RestApiQuotaEnforcer
specifier|public
class|class
name|RestApiQuotaEnforcer
block|{
DECL|field|quotaBackend
specifier|private
specifier|final
name|QuotaBackend
name|quotaBackend
decl_stmt|;
annotation|@
name|Inject
DECL|method|RestApiQuotaEnforcer (QuotaBackend quotaBackend)
name|RestApiQuotaEnforcer
parameter_list|(
name|QuotaBackend
name|quotaBackend
parameter_list|)
block|{
name|this
operator|.
name|quotaBackend
operator|=
name|quotaBackend
expr_stmt|;
block|}
comment|/** Enforce quota on a request not tied to any {@code RestResource}. */
DECL|method|enforce (HttpServletRequest req)
name|void
name|enforce
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|QuotaException
block|{
name|String
name|pathForQuotaReporting
init|=
name|RequestUtil
operator|.
name|getRestPathWithoutIds
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|quotaBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|requestToken
argument_list|(
name|quotaGroup
argument_list|(
name|pathForQuotaReporting
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
block|}
comment|/** Enforce quota on a request for a given resource. */
DECL|method|enforce (RestResource rsrc, HttpServletRequest req)
name|void
name|enforce
parameter_list|(
name|RestResource
name|rsrc
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|QuotaException
block|{
name|String
name|pathForQuotaReporting
init|=
name|RequestUtil
operator|.
name|getRestPathWithoutIds
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// Enrich the quota request we are operating on an interesting collection
name|QuotaBackend
operator|.
name|WithResource
name|report
init|=
name|quotaBackend
operator|.
name|currentUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsrc
operator|instanceof
name|ChangeResource
condition|)
block|{
name|ChangeResource
name|changeResource
init|=
operator|(
name|ChangeResource
operator|)
name|rsrc
decl_stmt|;
name|report
operator|=
name|quotaBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|change
argument_list|(
name|changeResource
operator|.
name|getId
argument_list|()
argument_list|,
name|changeResource
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsrc
operator|instanceof
name|AccountResource
condition|)
block|{
name|AccountResource
name|accountResource
init|=
operator|(
name|AccountResource
operator|)
name|rsrc
decl_stmt|;
name|report
operator|=
name|quotaBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|account
argument_list|(
name|accountResource
operator|.
name|getUser
argument_list|()
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsrc
operator|instanceof
name|ProjectResource
condition|)
block|{
name|ProjectResource
name|projectResource
init|=
operator|(
name|ProjectResource
operator|)
name|rsrc
decl_stmt|;
name|report
operator|=
name|quotaBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|project
argument_list|(
name|projectResource
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|requestToken
argument_list|(
name|quotaGroup
argument_list|(
name|pathForQuotaReporting
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
operator|.
name|throwOnError
argument_list|()
expr_stmt|;
block|}
DECL|method|quotaGroup (String path, String method)
specifier|private
specifier|static
name|String
name|quotaGroup
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|method
parameter_list|)
block|{
return|return
literal|"/restapi"
operator|+
name|path
operator|+
literal|":"
operator|+
name|method
return|;
block|}
block|}
end_class

end_unit

