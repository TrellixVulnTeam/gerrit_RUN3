begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_comment
comment|// WARNING: NoteDbUpdateManager cares about the package name RestApiServlet lives in.
end_comment

begin_package
DECL|package|com.google.gerrit.httpd.restapi
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|toImmutableList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|LazyArgs
operator|.
name|lazy
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_ALLOW_CREDENTIALS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_ALLOW_HEADERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_ALLOW_METHODS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_ALLOW_ORIGIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_MAX_AGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_REQUEST_HEADERS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ACCESS_CONTROL_REQUEST_METHOD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|AUTHORIZATION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|ORIGIN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
operator|.
name|VARY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|CEILING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|ISO_8859_1
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_CONFLICT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NOT_IMPLEMENTED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_OK
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_PRECONDITION_FAILED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_SERVICE_UNAVAILABLE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CountingOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|RawInputUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|PluginName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|AuthException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|BinaryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|CacheControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|DefaultInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ETagView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|IdString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|MethodNotAllowedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|NeedsParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|PreconditionFailedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RawInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestApiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionCreateView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionDeleteMissingView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestCollectionView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestModifyView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestReadView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|RestView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|TopLevelResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|restapi
operator|.
name|UnprocessableEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|LockFailureException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|WebSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|httpd
operator|.
name|restapi
operator|.
name|ParameterParser
operator|.
name|QueryParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AccessPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|AnonymousUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ExceptionHook
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|OptionUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|RequestInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|RequestListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|audit
operator|.
name|ExtendedHttpAuditEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|PerThreadCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|change
operator|.
name|ChangeFinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|group
operator|.
name|GroupAuditService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|PerformanceLogContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|PerformanceLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|RequestId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|logging
operator|.
name|TraceContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|notedb
operator|.
name|ChangeNotes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|GlobalPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackend
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|permissions
operator|.
name|PermissionBackendException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugincontext
operator|.
name|PluginSetContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|quota
operator|.
name|QuotaException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|change
operator|.
name|ChangesCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|restapi
operator|.
name|project
operator|.
name|ProjectsCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|RetryHelper
operator|.
name|ActionType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|update
operator|.
name|UpdateException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|util
operator|.
name|time
operator|.
name|TimeUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|CacheHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|http
operator|.
name|RequestUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|ExclusionStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|FieldAttributes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|FieldNamingPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|MalformedJsonException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|http
operator|.
name|server
operator|.
name|ServletUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|TemporaryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|TemporaryBuffer
operator|.
name|Heap
import|;
end_import

begin_class
DECL|class|RestApiServlet
specifier|public
class|class
name|RestApiServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
comment|/** MIME type used for a JSON response body. */
DECL|field|JSON_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|JSON_TYPE
init|=
literal|"application/json"
decl_stmt|;
DECL|field|FORM_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|FORM_TYPE
init|=
literal|"application/x-www-form-urlencoded"
decl_stmt|;
DECL|field|X_GERRIT_TRACE
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|String
name|X_GERRIT_TRACE
init|=
literal|"X-Gerrit-Trace"
decl_stmt|;
DECL|field|X_REQUESTED_WITH
specifier|private
specifier|static
specifier|final
name|String
name|X_REQUESTED_WITH
init|=
literal|"X-Requested-With"
decl_stmt|;
DECL|field|X_GERRIT_AUTH
specifier|private
specifier|static
specifier|final
name|String
name|X_GERRIT_AUTH
init|=
literal|"X-Gerrit-Auth"
decl_stmt|;
DECL|field|ALLOWED_CORS_METHODS
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ALLOWED_CORS_METHODS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"GET"
argument_list|,
literal|"HEAD"
argument_list|,
literal|"POST"
argument_list|,
literal|"PUT"
argument_list|,
literal|"DELETE"
argument_list|)
decl_stmt|;
DECL|field|ALLOWED_CORS_REQUEST_HEADERS
specifier|private
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|ALLOWED_CORS_REQUEST_HEADERS
init|=
name|Stream
operator|.
name|of
argument_list|(
name|AUTHORIZATION
argument_list|,
name|CONTENT_TYPE
argument_list|,
name|X_GERRIT_AUTH
argument_list|,
name|X_REQUESTED_WITH
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|ImmutableSet
operator|.
name|toImmutableSet
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|XD_AUTHORIZATION
specifier|public
specifier|static
specifier|final
name|String
name|XD_AUTHORIZATION
init|=
literal|"access_token"
decl_stmt|;
DECL|field|XD_CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|XD_CONTENT_TYPE
init|=
literal|"$ct"
decl_stmt|;
DECL|field|XD_METHOD
specifier|public
specifier|static
specifier|final
name|String
name|XD_METHOD
init|=
literal|"$m"
decl_stmt|;
DECL|field|SC_UNPROCESSABLE_ENTITY
specifier|public
specifier|static
specifier|final
name|int
name|SC_UNPROCESSABLE_ENTITY
init|=
literal|422
decl_stmt|;
DECL|field|SC_TOO_MANY_REQUESTS
specifier|public
specifier|static
specifier|final
name|int
name|SC_TOO_MANY_REQUESTS
init|=
literal|429
decl_stmt|;
DECL|field|HEAP_EST_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|HEAP_EST_SIZE
init|=
literal|10
operator|*
literal|8
operator|*
literal|1024
decl_stmt|;
comment|// Presize 10 blocks.
DECL|field|PLAIN_TEXT
specifier|private
specifier|static
specifier|final
name|String
name|PLAIN_TEXT
init|=
literal|"text/plain"
decl_stmt|;
DECL|field|TYPE_SPLIT_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TYPE_SPLIT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[ ,;][ ,;]*"
argument_list|)
decl_stmt|;
comment|/**    * Garbage prefix inserted before JSON output to prevent XSSI.    *    *<p>This prefix is ")]}'\n" and is designed to prevent a web browser from executing the response    * body if the resource URI were to be referenced using a&lt;script src="...&gt; HTML tag from    * another web site. Clients using the HTTP interface will need to always strip the first line of    * response data to remove this magic header.    */
DECL|field|JSON_MAGIC
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|JSON_MAGIC
decl_stmt|;
static|static
block|{
name|JSON_MAGIC
operator|=
literal|")]}'\n"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
expr_stmt|;
block|}
DECL|class|Globals
specifier|public
specifier|static
class|class
name|Globals
block|{
DECL|field|currentUser
specifier|final
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
decl_stmt|;
DECL|field|webSession
specifier|final
name|DynamicItem
argument_list|<
name|WebSession
argument_list|>
name|webSession
decl_stmt|;
DECL|field|paramParser
specifier|final
name|Provider
argument_list|<
name|ParameterParser
argument_list|>
name|paramParser
decl_stmt|;
DECL|field|requestListeners
specifier|final
name|PluginSetContext
argument_list|<
name|RequestListener
argument_list|>
name|requestListeners
decl_stmt|;
DECL|field|permissionBackend
specifier|final
name|PermissionBackend
name|permissionBackend
decl_stmt|;
DECL|field|auditService
specifier|final
name|GroupAuditService
name|auditService
decl_stmt|;
DECL|field|metrics
specifier|final
name|RestApiMetrics
name|metrics
decl_stmt|;
DECL|field|allowOrigin
specifier|final
name|Pattern
name|allowOrigin
decl_stmt|;
DECL|field|quotaChecker
specifier|final
name|RestApiQuotaEnforcer
name|quotaChecker
decl_stmt|;
DECL|field|config
specifier|final
name|Config
name|config
decl_stmt|;
DECL|field|performanceLoggers
specifier|final
name|DynamicSet
argument_list|<
name|PerformanceLogger
argument_list|>
name|performanceLoggers
decl_stmt|;
DECL|field|changeFinder
specifier|final
name|ChangeFinder
name|changeFinder
decl_stmt|;
DECL|field|retryHelper
specifier|final
name|RetryHelper
name|retryHelper
decl_stmt|;
DECL|field|exceptionHooks
specifier|final
name|PluginSetContext
argument_list|<
name|ExceptionHook
argument_list|>
name|exceptionHooks
decl_stmt|;
annotation|@
name|Inject
DECL|method|Globals ( Provider<CurrentUser> currentUser, DynamicItem<WebSession> webSession, Provider<ParameterParser> paramParser, PluginSetContext<RequestListener> requestListeners, PermissionBackend permissionBackend, GroupAuditService auditService, RestApiMetrics metrics, RestApiQuotaEnforcer quotaChecker, @GerritServerConfig Config config, DynamicSet<PerformanceLogger> performanceLoggers, ChangeFinder changeFinder, RetryHelper retryHelper, PluginSetContext<ExceptionHook> exceptionHooks)
name|Globals
parameter_list|(
name|Provider
argument_list|<
name|CurrentUser
argument_list|>
name|currentUser
parameter_list|,
name|DynamicItem
argument_list|<
name|WebSession
argument_list|>
name|webSession
parameter_list|,
name|Provider
argument_list|<
name|ParameterParser
argument_list|>
name|paramParser
parameter_list|,
name|PluginSetContext
argument_list|<
name|RequestListener
argument_list|>
name|requestListeners
parameter_list|,
name|PermissionBackend
name|permissionBackend
parameter_list|,
name|GroupAuditService
name|auditService
parameter_list|,
name|RestApiMetrics
name|metrics
parameter_list|,
name|RestApiQuotaEnforcer
name|quotaChecker
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|config
parameter_list|,
name|DynamicSet
argument_list|<
name|PerformanceLogger
argument_list|>
name|performanceLoggers
parameter_list|,
name|ChangeFinder
name|changeFinder
parameter_list|,
name|RetryHelper
name|retryHelper
parameter_list|,
name|PluginSetContext
argument_list|<
name|ExceptionHook
argument_list|>
name|exceptionHooks
parameter_list|)
block|{
name|this
operator|.
name|currentUser
operator|=
name|currentUser
expr_stmt|;
name|this
operator|.
name|webSession
operator|=
name|webSession
expr_stmt|;
name|this
operator|.
name|paramParser
operator|=
name|paramParser
expr_stmt|;
name|this
operator|.
name|requestListeners
operator|=
name|requestListeners
expr_stmt|;
name|this
operator|.
name|permissionBackend
operator|=
name|permissionBackend
expr_stmt|;
name|this
operator|.
name|auditService
operator|=
name|auditService
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|quotaChecker
operator|=
name|quotaChecker
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|performanceLoggers
operator|=
name|performanceLoggers
expr_stmt|;
name|this
operator|.
name|changeFinder
operator|=
name|changeFinder
expr_stmt|;
name|this
operator|.
name|retryHelper
operator|=
name|retryHelper
expr_stmt|;
name|this
operator|.
name|exceptionHooks
operator|=
name|exceptionHooks
expr_stmt|;
name|allowOrigin
operator|=
name|makeAllowOrigin
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|makeAllowOrigin (Config cfg)
specifier|private
specifier|static
name|Pattern
name|makeAllowOrigin
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|String
index|[]
name|allow
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"site"
argument_list|,
literal|null
argument_list|,
literal|"allowOriginRegex"
argument_list|)
decl_stmt|;
if|if
condition|(
name|allow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|'|'
argument_list|)
operator|.
name|join
argument_list|(
name|allow
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|field|globals
specifier|private
specifier|final
name|Globals
name|globals
decl_stmt|;
DECL|field|members
specifier|private
specifier|final
name|Provider
argument_list|<
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
argument_list|>
name|members
decl_stmt|;
DECL|method|RestApiServlet ( Globals globals, RestCollection<? extends RestResource, ? extends RestResource> members)
specifier|public
name|RestApiServlet
parameter_list|(
name|Globals
name|globals
parameter_list|,
name|RestCollection
argument_list|<
name|?
extends|extends
name|RestResource
argument_list|,
name|?
extends|extends
name|RestResource
argument_list|>
name|members
parameter_list|)
block|{
name|this
argument_list|(
name|globals
argument_list|,
name|Providers
operator|.
name|of
argument_list|(
name|members
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|RestApiServlet ( Globals globals, Provider<? extends RestCollection<? extends RestResource, ? extends RestResource>> members)
specifier|public
name|RestApiServlet
parameter_list|(
name|Globals
name|globals
parameter_list|,
name|Provider
argument_list|<
name|?
extends|extends
name|RestCollection
argument_list|<
name|?
extends|extends
name|RestResource
argument_list|,
name|?
extends|extends
name|RestResource
argument_list|>
argument_list|>
name|members
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Provider
argument_list|<
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
argument_list|>
name|n
init|=
operator|(
name|Provider
argument_list|<
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
argument_list|>
operator|)
name|requireNonNull
argument_list|(
operator|(
name|Object
operator|)
name|members
argument_list|)
decl_stmt|;
name|this
operator|.
name|globals
operator|=
name|globals
expr_stmt|;
name|this
operator|.
name|members
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|service (HttpServletRequest req, HttpServletResponse res)
specifier|protected
specifier|final
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|long
name|startNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|auditStartTs
init|=
name|TimeUtil
operator|.
name|nowMs
argument_list|()
decl_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|SC_OK
decl_stmt|;
name|long
name|responseBytes
init|=
operator|-
literal|1
decl_stmt|;
name|Optional
argument_list|<
name|Exception
argument_list|>
name|cause
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
name|Response
argument_list|<
name|?
argument_list|>
name|response
init|=
literal|null
decl_stmt|;
name|QueryParams
name|qp
init|=
literal|null
decl_stmt|;
name|Object
name|inputRequestBody
init|=
literal|null
decl_stmt|;
name|RestResource
name|rsrc
init|=
name|TopLevelResource
operator|.
name|INSTANCE
decl_stmt|;
name|ViewData
name|viewData
init|=
literal|null
decl_stmt|;
try|try
init|(
name|TraceContext
name|traceContext
init|=
name|enableTracing
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
init|)
block|{
name|List
argument_list|<
name|IdString
argument_list|>
name|path
init|=
name|splitPath
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|RequestInfo
name|requestInfo
init|=
name|createRequestInfo
argument_list|(
name|traceContext
argument_list|,
name|requestUri
argument_list|(
name|req
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|globals
operator|.
name|requestListeners
operator|.
name|runEach
argument_list|(
name|l
lambda|->
name|l
operator|.
name|onRequest
argument_list|(
name|requestInfo
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|PerThreadCache
name|ignored
init|=
name|PerThreadCache
operator|.
name|create
argument_list|()
init|)
block|{
comment|// It's important that the PerformanceLogContext is closed before the response is sent to
comment|// the client. Only this way it is ensured that the invocation of the PerformanceLogger
comment|// plugins happens before the client sees the response. This is needed for being able to
comment|// test performance logging from an acceptance test (see
comment|// TraceIT#performanceLoggingForRestCall()).
try|try
init|(
name|PerformanceLogContext
name|performanceLogContext
init|=
operator|new
name|PerformanceLogContext
argument_list|(
name|globals
operator|.
name|config
argument_list|,
name|globals
operator|.
name|performanceLoggers
argument_list|)
init|)
block|{
name|traceRequestData
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCorsPreflight
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|doCorsPreflight
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|qp
operator|=
name|ParameterParser
operator|.
name|getQueryParams
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|checkCors
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|qp
operator|.
name|hasXdOverride
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qp
operator|.
name|hasXdOverride
argument_list|()
condition|)
block|{
name|req
operator|=
name|applyXdOverrides
argument_list|(
name|req
argument_list|,
name|qp
argument_list|)
expr_stmt|;
block|}
name|checkUserSession
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|rc
init|=
name|members
operator|.
name|get
argument_list|()
decl_stmt|;
name|globals
operator|.
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|checkAny
argument_list|(
name|GlobalPermission
operator|.
name|fromAnnotation
argument_list|(
name|rc
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|globals
operator|.
name|quotaChecker
operator|.
name|enforce
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|instanceof
name|NeedsParams
condition|)
block|{
operator|(
operator|(
name|NeedsParams
operator|)
name|rc
operator|)
operator|.
name|setParams
argument_list|(
name|qp
operator|.
name|params
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRead
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|rc
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPost
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|restCollectionView
init|=
name|rc
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"POST_ON_COLLECTION./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|restCollectionView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|restCollectionView
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|methodNotAllowed
argument_list|(
name|req
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// DELETE on root collections is not supported
throw|throw
name|methodNotAllowed
argument_list|(
name|req
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|IdString
name|id
init|=
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|rsrc
operator|=
name|parseResourceWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
operator|.
name|pluginName
argument_list|,
name|rc
argument_list|,
name|rsrc
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|globals
operator|.
name|quotaChecker
operator|.
name|enforce
argument_list|(
name|rsrc
argument_list|,
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkPreconditions
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|globals
operator|.
name|quotaChecker
operator|.
name|enforce
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPost
argument_list|(
name|req
argument_list|)
operator|||
name|isPut
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|createView
init|=
name|rc
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"CREATE./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|createView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|createView
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|isDelete
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|deleteView
init|=
name|rc
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"DELETE_MISSING./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|deleteView
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|viewData
operator|.
name|view
operator|==
literal|null
condition|)
block|{
name|viewData
operator|=
name|view
argument_list|(
name|rc
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|checkRequiresCapability
argument_list|(
name|viewData
argument_list|)
expr_stmt|;
while|while
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestCollection
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|c
init|=
operator|(
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isRead
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|c
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPost
argument_list|(
name|req
argument_list|)
condition|)
block|{
comment|// TODO: Here and on other collection methods: There is a bug that binds child views
comment|// with pluginName="gerrit" instead of the real plugin name. This has never worked
comment|// correctly and should be fixed where the binding gets created (DynamicMapProvider)
comment|// and here.
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|restCollectionView
init|=
name|c
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"POST_ON_COLLECTION./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|restCollectionView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|restCollectionView
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|methodNotAllowed
argument_list|(
name|req
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|isDelete
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|restCollectionView
init|=
name|c
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"DELETE_ON_COLLECTION./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|restCollectionView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
name|restCollectionView
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|methodNotAllowed
argument_list|(
name|req
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|methodNotAllowed
argument_list|(
name|req
argument_list|)
throw|;
block|}
break|break;
block|}
name|IdString
name|id
init|=
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|rsrc
operator|=
name|parseResourceWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
operator|.
name|pluginName
argument_list|,
name|c
argument_list|,
name|rsrc
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|checkPreconditions
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|isPost
argument_list|(
name|req
argument_list|)
operator|||
name|isPut
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|createView
init|=
name|c
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"CREATE./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|createView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
name|viewData
operator|.
name|pluginName
argument_list|,
name|createView
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|isDelete
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|deleteView
init|=
name|c
operator|.
name|views
argument_list|()
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"DELETE_MISSING./"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteView
operator|!=
literal|null
condition|)
block|{
name|viewData
operator|=
operator|new
name|ViewData
argument_list|(
name|viewData
operator|.
name|pluginName
argument_list|,
name|deleteView
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|viewData
operator|.
name|view
operator|==
literal|null
condition|)
block|{
name|viewData
operator|=
name|view
argument_list|(
name|c
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|checkRequiresCapability
argument_list|(
name|viewData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notModified
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|,
name|viewData
operator|.
name|view
argument_list|)
condition|)
block|{
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"REST call succeeded: %d"
argument_list|,
name|SC_NOT_MODIFIED
argument_list|)
expr_stmt|;
name|res
operator|.
name|sendError
argument_list|(
name|SC_NOT_MODIFIED
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|globals
operator|.
name|paramParser
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|viewData
operator|.
name|view
argument_list|,
name|qp
operator|.
name|params
argument_list|()
argument_list|,
name|req
argument_list|,
name|res
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestReadView
argument_list|<
name|?
argument_list|>
operator|&&
name|isRead
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|response
operator|=
name|invokeRestReadViewWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
argument_list|,
operator|(
name|RestReadView
argument_list|<
name|RestResource
argument_list|>
operator|)
name|viewData
operator|.
name|view
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestModifyView
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
name|Type
name|type
init|=
name|inputType
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|inputRequestBody
operator|=
name|parseRequest
argument_list|(
name|req
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|response
operator|=
name|invokeRestModifyViewWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
argument_list|,
name|m
argument_list|,
name|rsrc
argument_list|,
name|inputRequestBody
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputRequestBody
operator|instanceof
name|RawInput
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|req
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|ServletUtils
operator|.
name|consumeRequestBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestCollectionCreateView
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestCollectionCreateView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|RestCollectionCreateView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
name|Type
name|type
init|=
name|inputType
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|inputRequestBody
operator|=
name|parseRequest
argument_list|(
name|req
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|response
operator|=
name|invokeRestCollectionCreateViewWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
argument_list|,
name|m
argument_list|,
name|rsrc
argument_list|,
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inputRequestBody
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputRequestBody
operator|instanceof
name|RawInput
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|req
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|ServletUtils
operator|.
name|consumeRequestBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestCollectionDeleteMissingView
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestCollectionDeleteMissingView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|RestCollectionDeleteMissingView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
name|Type
name|type
init|=
name|inputType
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|inputRequestBody
operator|=
name|parseRequest
argument_list|(
name|req
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|response
operator|=
name|invokeRestCollectionDeleteMissingViewWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
argument_list|,
name|m
argument_list|,
name|rsrc
argument_list|,
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|inputRequestBody
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputRequestBody
operator|instanceof
name|RawInput
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|req
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|ServletUtils
operator|.
name|consumeRequestBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|viewData
operator|.
name|view
operator|instanceof
name|RestCollectionModifyView
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|RestCollectionModifyView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|RestCollectionModifyView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
operator|)
name|viewData
operator|.
name|view
decl_stmt|;
name|Type
name|type
init|=
name|inputType
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|inputRequestBody
operator|=
name|parseRequest
argument_list|(
name|req
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|response
operator|=
name|invokeRestCollectionModifyViewWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|viewData
argument_list|,
name|m
argument_list|,
name|rsrc
argument_list|,
name|inputRequestBody
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputRequestBody
operator|instanceof
name|RawInput
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|req
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|ServletUtils
operator|.
name|consumeRequestBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_else
else|else
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|()
throw|;
block|}
end_else

begin_if
if|if
condition|(
name|response
operator|instanceof
name|Response
operator|.
name|Redirect
condition|)
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|String
name|location
init|=
operator|(
operator|(
name|Response
operator|.
name|Redirect
operator|)
name|response
operator|)
operator|.
name|location
argument_list|()
decl_stmt|;
name|res
operator|.
name|sendRedirect
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"REST call redirected to: %s"
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|response
operator|instanceof
name|Response
operator|.
name|Accepted
condition|)
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|setStatus
argument_list|(
name|response
operator|.
name|statusCode
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|,
operator|(
operator|(
name|Response
operator|.
name|Accepted
operator|)
name|response
operator|)
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"REST call succeeded: %d"
argument_list|,
name|response
operator|.
name|statusCode
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
end_if

begin_expr_stmt
name|status
operator|=
name|response
operator|.
name|statusCode
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|configureCaching
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|rsrc
argument_list|,
name|viewData
operator|.
name|view
argument_list|,
name|response
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|res
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"REST call succeeded: %d"
argument_list|,
name|status
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}          if
operator|(
name|response
operator|!=
name|Response
operator|.
name|none
argument_list|()
operator|)
block|{
name|Object
name|value
operator|=
name|Response
operator|.
name|unwrap
argument_list|(
name|response
argument_list|)
block|;
if|if
condition|(
name|value
operator|instanceof
name|BinaryResult
condition|)
block|{
name|responseBytes
operator|=
name|replyBinaryResult
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
operator|(
name|BinaryResult
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|responseBytes
operator|=
name|replyJson
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|false
argument_list|,
name|qp
operator|.
name|config
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_else

begin_catch
unit|}       }
catch|catch
parameter_list|(
name|MalformedJsonException
decl||
name|JsonParseException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_BAD_REQUEST
argument_list|,
literal|"Invalid "
operator|+
name|JSON_TYPE
operator|+
literal|" in request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|BadRequestException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_BAD_REQUEST
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Bad Request"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_FORBIDDEN
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Forbidden"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|AmbiguousViewException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_NOT_FOUND
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Ambiguous"
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_NOT_FOUND
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Not Found"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|MethodNotAllowedException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_METHOD_NOT_ALLOWED
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Method Not Allowed"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|ResourceConflictException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_CONFLICT
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Conflict"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|PreconditionFailedException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_PRECONDITION_FAILED
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Precondition Failed"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|UnprocessableEntityException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_UNPROCESSABLE_ENTITY
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Unprocessable Entity"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|NotImplementedException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error in %s %s"
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|uriForLogging
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_NOT_IMPLEMENTED
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Not Implemented"
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|UpdateException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|LockFailureException
condition|)
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|t
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error in %s %s"
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|uriForLogging
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_SERVICE_UNAVAILABLE
argument_list|,
literal|"Lock failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|SC_INTERNAL_SERVER_ERROR
expr_stmt|;
name|responseBytes
operator|=
name|handleException
argument_list|(
name|traceContext
argument_list|,
name|e
argument_list|,
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|QuotaException
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|responseBytes
operator|=
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|status
operator|=
name|SC_TOO_MANY_REQUESTS
argument_list|,
name|messageOr
argument_list|(
name|e
argument_list|,
literal|"Quota limit reached"
argument_list|)
argument_list|,
name|e
operator|.
name|caching
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cause
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|status
operator|=
name|SC_INTERNAL_SERVER_ERROR
expr_stmt|;
name|responseBytes
operator|=
name|handleException
argument_list|(
name|traceContext
argument_list|,
name|e
argument_list|,
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_catch

begin_finally
finally|finally
block|{
name|String
name|metric
init|=
name|getViewName
argument_list|(
name|viewData
argument_list|)
decl_stmt|;
name|String
name|formattedCause
init|=
name|cause
operator|.
name|map
argument_list|(
name|globals
operator|.
name|retryHelper
operator|::
name|formatCause
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"_none"
argument_list|)
decl_stmt|;
name|globals
operator|.
name|metrics
operator|.
name|count
operator|.
name|increment
argument_list|(
name|metric
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|>=
name|SC_BAD_REQUEST
condition|)
block|{
name|globals
operator|.
name|metrics
operator|.
name|errorCount
operator|.
name|increment
argument_list|(
name|metric
argument_list|,
name|status
argument_list|,
name|formattedCause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|responseBytes
operator|!=
operator|-
literal|1
condition|)
block|{
name|globals
operator|.
name|metrics
operator|.
name|responseBytes
operator|.
name|record
argument_list|(
name|metric
argument_list|,
name|responseBytes
argument_list|)
expr_stmt|;
block|}
name|globals
operator|.
name|metrics
operator|.
name|serverLatency
operator|.
name|record
argument_list|(
name|metric
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
name|globals
operator|.
name|auditService
operator|.
name|dispatch
argument_list|(
operator|new
name|ExtendedHttpAuditEvent
argument_list|(
name|globals
operator|.
name|webSession
operator|.
name|get
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
argument_list|,
name|req
argument_list|,
name|auditStartTs
argument_list|,
name|qp
operator|!=
literal|null
condition|?
name|qp
operator|.
name|params
argument_list|()
else|:
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|inputRequestBody
argument_list|,
name|status
argument_list|,
name|response
argument_list|,
name|rsrc
argument_list|,
name|viewData
operator|==
literal|null
condition|?
literal|null
else|:
name|viewData
operator|.
name|view
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_finally

begin_function
unit|}   }
DECL|method|parseResourceWithRetry ( HttpServletRequest req, TraceContext traceContext, @Nullable String pluginName, RestCollection<RestResource, RestResource> restCollection, RestResource parentResource, IdString id)
specifier|private
name|RestResource
name|parseResourceWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
annotation|@
name|Nullable
name|String
name|pluginName
parameter_list|,
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|restCollection
parameter_list|,
name|RestResource
name|parentResource
parameter_list|,
name|IdString
name|id
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invokeRestEndpointWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|globals
operator|.
name|metrics
operator|.
name|view
argument_list|(
name|restCollection
operator|.
name|getClass
argument_list|()
argument_list|,
name|pluginName
argument_list|)
operator|+
literal|"#parse"
argument_list|,
name|ActionType
operator|.
name|REST_READ_REQUEST
argument_list|,
parameter_list|()
lambda|->
name|restCollection
operator|.
name|parse
argument_list|(
name|parentResource
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|invokeRestReadViewWithRetry ( HttpServletRequest req, TraceContext traceContext, ViewData viewData, RestReadView<RestResource> view, RestResource rsrc)
specifier|private
name|Response
argument_list|<
name|?
argument_list|>
name|invokeRestReadViewWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
name|ViewData
name|viewData
parameter_list|,
name|RestReadView
argument_list|<
name|RestResource
argument_list|>
name|view
parameter_list|,
name|RestResource
name|rsrc
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invokeRestEndpointWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|getViewName
argument_list|(
name|viewData
argument_list|)
argument_list|,
name|ActionType
operator|.
name|REST_READ_REQUEST
argument_list|,
parameter_list|()
lambda|->
name|view
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|invokeRestModifyViewWithRetry ( HttpServletRequest req, TraceContext traceContext, ViewData viewData, RestModifyView<RestResource, Object> view, RestResource rsrc, Object inputRequestBody)
specifier|private
name|Response
argument_list|<
name|?
argument_list|>
name|invokeRestModifyViewWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
name|ViewData
name|viewData
parameter_list|,
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
name|view
parameter_list|,
name|RestResource
name|rsrc
parameter_list|,
name|Object
name|inputRequestBody
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invokeRestEndpointWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|getViewName
argument_list|(
name|viewData
argument_list|)
argument_list|,
name|ActionType
operator|.
name|REST_WRITE_REQUEST
argument_list|,
parameter_list|()
lambda|->
name|view
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|,
name|inputRequestBody
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|invokeRestCollectionCreateViewWithRetry ( HttpServletRequest req, TraceContext traceContext, ViewData viewData, RestCollectionCreateView<RestResource, RestResource, Object> view, RestResource rsrc, IdString path, Object inputRequestBody)
specifier|private
name|Response
argument_list|<
name|?
argument_list|>
name|invokeRestCollectionCreateViewWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
name|ViewData
name|viewData
parameter_list|,
name|RestCollectionCreateView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|view
parameter_list|,
name|RestResource
name|rsrc
parameter_list|,
name|IdString
name|path
parameter_list|,
name|Object
name|inputRequestBody
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invokeRestEndpointWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|getViewName
argument_list|(
name|viewData
argument_list|)
argument_list|,
name|ActionType
operator|.
name|REST_WRITE_REQUEST
argument_list|,
parameter_list|()
lambda|->
name|view
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|,
name|path
argument_list|,
name|inputRequestBody
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|invokeRestCollectionDeleteMissingViewWithRetry ( HttpServletRequest req, TraceContext traceContext, ViewData viewData, RestCollectionDeleteMissingView<RestResource, RestResource, Object> view, RestResource rsrc, IdString path, Object inputRequestBody)
specifier|private
name|Response
argument_list|<
name|?
argument_list|>
name|invokeRestCollectionDeleteMissingViewWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
name|ViewData
name|viewData
parameter_list|,
name|RestCollectionDeleteMissingView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|view
parameter_list|,
name|RestResource
name|rsrc
parameter_list|,
name|IdString
name|path
parameter_list|,
name|Object
name|inputRequestBody
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invokeRestEndpointWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|getViewName
argument_list|(
name|viewData
argument_list|)
argument_list|,
name|ActionType
operator|.
name|REST_WRITE_REQUEST
argument_list|,
parameter_list|()
lambda|->
name|view
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|,
name|path
argument_list|,
name|inputRequestBody
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|invokeRestCollectionModifyViewWithRetry ( HttpServletRequest req, TraceContext traceContext, ViewData viewData, RestCollectionModifyView<RestResource, RestResource, Object> view, RestResource rsrc, Object inputRequestBody)
specifier|private
name|Response
argument_list|<
name|?
argument_list|>
name|invokeRestCollectionModifyViewWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
name|ViewData
name|viewData
parameter_list|,
name|RestCollectionModifyView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|view
parameter_list|,
name|RestResource
name|rsrc
parameter_list|,
name|Object
name|inputRequestBody
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invokeRestEndpointWithRetry
argument_list|(
name|req
argument_list|,
name|traceContext
argument_list|,
name|getViewName
argument_list|(
name|viewData
argument_list|)
argument_list|,
name|ActionType
operator|.
name|REST_WRITE_REQUEST
argument_list|,
parameter_list|()
lambda|->
name|view
operator|.
name|apply
argument_list|(
name|rsrc
argument_list|,
name|inputRequestBody
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|invokeRestEndpointWithRetry ( HttpServletRequest req, TraceContext traceContext, String caller, ActionType actionType, Action<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeRestEndpointWithRetry
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|TraceContext
name|traceContext
parameter_list|,
name|String
name|caller
parameter_list|,
name|ActionType
name|actionType
parameter_list|,
name|Action
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicReference
argument_list|<
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|traceId
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|RetryHelper
operator|.
name|Options
operator|.
name|Builder
name|retryOptionsBuilder
init|=
name|RetryHelper
operator|.
name|options
argument_list|()
operator|.
name|caller
argument_list|(
name|caller
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|traceContext
operator|.
name|isTracing
argument_list|()
condition|)
block|{
comment|// enable automatic retry with tracing in case of non-recoverable failure
name|retryOptionsBuilder
operator|=
name|retryOptionsBuilder
operator|.
name|retryWithTrace
argument_list|(
name|t
lambda|->
operator|!
operator|(
name|t
operator|instanceof
name|RestApiException
operator|)
argument_list|)
operator|.
name|onAutoTrace
argument_list|(
name|autoTraceId
lambda|->
block|{
name|traceId
operator|.
name|set
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|autoTraceId
argument_list|)
argument_list|)
argument_list|;
comment|// Include details of the request into the trace.
name|traceRequestData
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|)
function|;
end_function

begin_block
unit|}     try
block|{
comment|// ExceptionHookImpl controls on which exceptions we retry.
comment|// The passed in exceptionPredicate allows to define additional exceptions on which retry
comment|// should happen, but here we have none (hence pass in "t -> false" as exceptionPredicate).
return|return
name|globals
operator|.
name|retryHelper
operator|.
name|execute
argument_list|(
name|actionType
argument_list|,
name|action
argument_list|,
name|retryOptionsBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|t
lambda|->
literal|false
argument_list|)
return|;
block|}
end_block

begin_finally
finally|finally
block|{
comment|// If auto-tracing got triggered due to a non-recoverable failure, also trace the rest of
comment|// this request. This means logging is forced for all further log statements and the logs are
comment|// associated with the same trace ID.
name|traceId
operator|.
name|get
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|tid
lambda|->
name|traceContext
operator|.
name|addTag
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|TRACE_ID
argument_list|,
name|tid
argument_list|)
operator|.
name|forceLogging
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_finally

begin_function
unit|}    private
DECL|method|getViewName (ViewData viewData)
name|String
name|getViewName
parameter_list|(
name|ViewData
name|viewData
parameter_list|)
block|{
return|return
name|viewData
operator|!=
literal|null
operator|&&
name|viewData
operator|.
name|view
operator|!=
literal|null
condition|?
name|globals
operator|.
name|metrics
operator|.
name|view
argument_list|(
name|viewData
argument_list|)
else|:
literal|"_unknown"
return|;
block|}
end_function

begin_function
DECL|method|applyXdOverrides (HttpServletRequest req, QueryParams qp)
specifier|private
specifier|static
name|HttpServletRequest
name|applyXdOverrides
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|QueryParams
name|qp
parameter_list|)
throws|throws
name|BadRequestException
block|{
if|if
condition|(
operator|!
name|isPost
argument_list|(
name|req
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"POST required"
argument_list|)
throw|;
block|}
name|String
name|method
init|=
name|qp
operator|.
name|xdMethod
argument_list|()
decl_stmt|;
name|String
name|contentType
init|=
name|qp
operator|.
name|xdContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
operator|||
name|method
operator|.
name|equals
argument_list|(
literal|"PUT"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isType
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid "
operator|+
name|CONTENT_TYPE
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|XD_CONTENT_TYPE
operator|+
literal|" required"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|req
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
DECL|method|checkCors (HttpServletRequest req, HttpServletResponse res, boolean isXd)
specifier|private
name|void
name|checkCors
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|boolean
name|isXd
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|String
name|origin
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|ORIGIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|isXd
condition|)
block|{
comment|// Cross-domain, non-preflighted requests must come from an approved origin.
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|origin
argument_list|)
operator|||
operator|!
name|isOriginAllowed
argument_list|(
name|origin
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"origin not allowed"
argument_list|)
throw|;
block|}
name|res
operator|.
name|addHeader
argument_list|(
name|VARY
argument_list|,
name|ORIGIN
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_CREDENTIALS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|origin
argument_list|)
condition|)
block|{
comment|// All other requests must be processed, but conditionally set CORS headers.
if|if
condition|(
name|globals
operator|.
name|allowOrigin
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|addHeader
argument_list|(
name|VARY
argument_list|,
name|ORIGIN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOriginAllowed
argument_list|(
name|origin
argument_list|)
condition|)
block|{
name|setCorsHeaders
argument_list|(
name|res
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|isCorsPreflight (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|isCorsPreflight
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
literal|"OPTIONS"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|req
operator|.
name|getHeader
argument_list|(
name|ORIGIN
argument_list|)
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|req
operator|.
name|getHeader
argument_list|(
name|ACCESS_CONTROL_REQUEST_METHOD
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|doCorsPreflight (HttpServletRequest req, HttpServletResponse res)
specifier|private
name|void
name|doCorsPreflight
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|BadRequestException
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|setHeaderList
argument_list|(
name|res
argument_list|,
name|VARY
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|ORIGIN
argument_list|,
name|ACCESS_CONTROL_REQUEST_METHOD
argument_list|,
name|ACCESS_CONTROL_REQUEST_HEADERS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|origin
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|ORIGIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|origin
argument_list|)
operator|||
operator|!
name|isOriginAllowed
argument_list|(
name|origin
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"CORS not allowed"
argument_list|)
throw|;
block|}
name|String
name|method
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|ACCESS_CONTROL_REQUEST_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ALLOWED_CORS_METHODS
operator|.
name|contains
argument_list|(
name|method
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|method
operator|+
literal|" not allowed in CORS"
argument_list|)
throw|;
block|}
name|String
name|headers
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|ACCESS_CONTROL_REQUEST_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|reqHdr
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|headers
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|ALLOWED_CORS_REQUEST_HEADERS
operator|.
name|contains
argument_list|(
name|reqHdr
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|reqHdr
operator|+
literal|" not allowed in CORS"
argument_list|)
throw|;
block|}
block|}
block|}
name|res
operator|.
name|setStatus
argument_list|(
name|SC_OK
argument_list|)
expr_stmt|;
name|setCorsHeaders
argument_list|(
name|res
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
name|PLAIN_TEXT
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setCorsHeaders (HttpServletResponse res, String origin)
specifier|private
specifier|static
name|void
name|setCorsHeaders
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|origin
parameter_list|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_CREDENTIALS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_MAX_AGE
argument_list|,
literal|"600"
argument_list|)
expr_stmt|;
name|setHeaderList
argument_list|(
name|res
argument_list|,
name|ACCESS_CONTROL_ALLOW_METHODS
argument_list|,
name|Iterables
operator|.
name|concat
argument_list|(
name|ALLOWED_CORS_METHODS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"OPTIONS"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setHeaderList
argument_list|(
name|res
argument_list|,
name|ACCESS_CONTROL_ALLOW_HEADERS
argument_list|,
name|ALLOWED_CORS_REQUEST_HEADERS
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setHeaderList (HttpServletResponse res, String name, Iterable<String> values)
specifier|private
specifier|static
name|void
name|setHeaderList
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isOriginAllowed (String origin)
specifier|private
name|boolean
name|isOriginAllowed
parameter_list|(
name|String
name|origin
parameter_list|)
block|{
return|return
name|globals
operator|.
name|allowOrigin
operator|!=
literal|null
operator|&&
name|globals
operator|.
name|allowOrigin
operator|.
name|matcher
argument_list|(
name|origin
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|messageOr (Throwable t, String defaultMessage)
specifier|private
specifier|static
name|String
name|messageOr
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|defaultMessage
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|t
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
name|defaultMessage
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|notModified ( HttpServletRequest req, RestResource rsrc, RestView<RestResource> view)
specifier|private
specifier|static
name|boolean
name|notModified
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|RestResource
name|rsrc
parameter_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRead
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|view
operator|instanceof
name|ETagView
condition|)
block|{
name|String
name|have
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|have
operator|!=
literal|null
condition|)
block|{
return|return
name|have
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ETagView
operator|)
name|view
operator|)
operator|.
name|getETag
argument_list|(
name|rsrc
argument_list|)
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasETag
condition|)
block|{
name|String
name|have
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|have
operator|!=
literal|null
condition|)
block|{
return|return
name|have
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RestResource
operator|.
name|HasETag
operator|)
name|rsrc
operator|)
operator|.
name|getETag
argument_list|()
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasLastModified
condition|)
block|{
name|Timestamp
name|m
init|=
operator|(
operator|(
name|RestResource
operator|.
name|HasLastModified
operator|)
name|rsrc
operator|)
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|long
name|d
init|=
name|req
operator|.
name|getDateHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_MODIFIED_SINCE
argument_list|)
decl_stmt|;
comment|// HTTP times are in seconds, database may have millisecond precision.
return|return
name|d
operator|/
literal|1000L
operator|==
name|m
operator|.
name|getTime
argument_list|()
operator|/
literal|1000L
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|configureCaching ( HttpServletRequest req, HttpServletResponse res, R rsrc, RestView<R> view, CacheControl c)
specifier|private
specifier|static
parameter_list|<
name|R
extends|extends
name|RestResource
parameter_list|>
name|void
name|configureCaching
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|R
name|rsrc
parameter_list|,
name|RestView
argument_list|<
name|R
argument_list|>
name|view
parameter_list|,
name|CacheControl
name|c
parameter_list|)
block|{
if|if
condition|(
name|isRead
argument_list|(
name|req
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|c
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
default|default:
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVATE
case|:
name|addResourceStateHeaders
argument_list|(
name|res
argument_list|,
name|rsrc
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|CacheHeaders
operator|.
name|setCacheablePrivate
argument_list|(
name|res
argument_list|,
name|c
operator|.
name|getAge
argument_list|()
argument_list|,
name|c
operator|.
name|getUnit
argument_list|()
argument_list|,
name|c
operator|.
name|isMustRevalidate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUBLIC
case|:
name|addResourceStateHeaders
argument_list|(
name|res
argument_list|,
name|rsrc
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|CacheHeaders
operator|.
name|setCacheable
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|c
operator|.
name|getAge
argument_list|()
argument_list|,
name|c
operator|.
name|getUnit
argument_list|()
argument_list|,
name|c
operator|.
name|isMustRevalidate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|CacheHeaders
operator|.
name|setNotCacheable
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|addResourceStateHeaders ( HttpServletResponse res, R rsrc, RestView<R> view)
specifier|private
specifier|static
parameter_list|<
name|R
extends|extends
name|RestResource
parameter_list|>
name|void
name|addResourceStateHeaders
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|R
name|rsrc
parameter_list|,
name|RestView
argument_list|<
name|R
argument_list|>
name|view
parameter_list|)
block|{
if|if
condition|(
name|view
operator|instanceof
name|ETagView
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|ETAG
argument_list|,
operator|(
operator|(
name|ETagView
argument_list|<
name|R
argument_list|>
operator|)
name|view
operator|)
operator|.
name|getETag
argument_list|(
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasETag
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|ETAG
argument_list|,
operator|(
operator|(
name|RestResource
operator|.
name|HasETag
operator|)
name|rsrc
operator|)
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rsrc
operator|instanceof
name|RestResource
operator|.
name|HasLastModified
condition|)
block|{
name|res
operator|.
name|setDateHeader
argument_list|(
name|HttpHeaders
operator|.
name|LAST_MODIFIED
argument_list|,
operator|(
operator|(
name|RestResource
operator|.
name|HasLastModified
operator|)
name|rsrc
operator|)
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|checkPreconditions (HttpServletRequest req)
specifier|private
name|void
name|checkPreconditions
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|PreconditionFailedException
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|IF_NONE_MATCH
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PreconditionFailedException
argument_list|(
literal|"Resource already exists"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|inputType (RestModifyView<RestResource, Object> m)
specifier|private
specifier|static
name|Type
name|inputType
parameter_list|(
name|RestModifyView
argument_list|<
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
comment|// MyModifyView implements RestModifyView<SomeResource, MyInput>
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|typeLiteral
init|=
name|TypeLiteral
operator|.
name|get
argument_list|(
name|m
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// RestModifyView<SomeResource, MyInput>
comment|// This is smart enough to resolve even when there are intervening subclasses, even if they have
comment|// reordered type arguments.
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|supertypeLiteral
init|=
name|typeLiteral
operator|.
name|getSupertype
argument_list|(
name|RestModifyView
operator|.
name|class
argument_list|)
decl_stmt|;
name|Type
name|supertype
init|=
name|supertypeLiteral
operator|.
name|getType
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|supertype
operator|instanceof
name|ParameterizedType
argument_list|,
literal|"supertype of %s is not parameterized: %s"
argument_list|,
name|typeLiteral
argument_list|,
name|supertypeLiteral
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ParameterizedType
operator|)
name|supertype
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|1
index|]
return|;
block|}
end_function

begin_function
DECL|method|inputType (RestCollectionView<RestResource, RestResource, Object> m)
specifier|private
specifier|static
name|Type
name|inputType
parameter_list|(
name|RestCollectionView
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
comment|// MyCollectionView implements RestCollectionView<SomeResource, SomeResource, MyInput>
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|typeLiteral
init|=
name|TypeLiteral
operator|.
name|get
argument_list|(
name|m
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// RestCollectionView<SomeResource, SomeResource, MyInput>
comment|// This is smart enough to resolve even when there are intervening subclasses, even if they have
comment|// reordered type arguments.
name|TypeLiteral
argument_list|<
name|?
argument_list|>
name|supertypeLiteral
init|=
name|typeLiteral
operator|.
name|getSupertype
argument_list|(
name|RestCollectionView
operator|.
name|class
argument_list|)
decl_stmt|;
name|Type
name|supertype
init|=
name|supertypeLiteral
operator|.
name|getType
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|supertype
operator|instanceof
name|ParameterizedType
argument_list|,
literal|"supertype of %s is not parameterized: %s"
argument_list|,
name|typeLiteral
argument_list|,
name|supertypeLiteral
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ParameterizedType
operator|)
name|supertype
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|2
index|]
return|;
block|}
end_function

begin_function
DECL|method|parseRequest (HttpServletRequest req, Type type)
specifier|private
name|Object
name|parseRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|BadRequestException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|InvocationTargetException
throws|,
name|MethodNotAllowedException
block|{
comment|// HTTP/1.1 requires consuming the request body before writing non-error response (less than
comment|// 400). Consume the request body for all but raw input request types here.
if|if
condition|(
name|isType
argument_list|(
name|JSON_TYPE
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|BufferedReader
name|br
init|=
name|req
operator|.
name|getReader
argument_list|()
init|;           JsonReader json = new JsonReader(br)
block|)
block|{
try|try
block|{
name|json
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JsonToken
name|first
decl_stmt|;
try|try
block|{
name|first
operator|=
name|json
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Expected JSON object"
argument_list|)
throw|;
block|}
if|if
condition|(
name|first
operator|==
name|JsonToken
operator|.
name|STRING
condition|)
block|{
return|return
name|parseString
argument_list|(
name|json
operator|.
name|nextString
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|json
argument_list|,
name|type
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// Reader.close won't consume the rest of the input. Explicitly consume the request body.
name|br
operator|.
name|skip
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_decl_stmt
name|String
name|method
init|=
name|req
operator|.
name|getMethod
argument_list|()
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|(
literal|"PUT"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
literal|"POST"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|)
operator|&&
name|acceptsRawInput
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|parseRawInput
argument_list|(
name|req
argument_list|,
name|type
argument_list|)
return|;
block|}
end_if

begin_if
if|if
condition|(
name|isDelete
argument_list|(
name|req
argument_list|)
operator|&&
name|hasNoBody
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
end_if

begin_if
if|if
condition|(
name|hasNoBody
argument_list|(
name|req
argument_list|)
condition|)
block|{
return|return
name|createInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
end_if

begin_if
if|if
condition|(
name|isType
argument_list|(
name|PLAIN_TEXT
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|BufferedReader
name|br
init|=
name|req
operator|.
name|getReader
argument_list|()
init|)
block|{
name|char
index|[]
name|tmp
init|=
operator|new
name|char
index|[
literal|256
index|]
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
literal|0
operator|<
operator|(
name|n
operator|=
name|br
operator|.
name|read
argument_list|(
name|tmp
argument_list|)
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|parseString
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
end_if

begin_if
if|if
condition|(
name|isPost
argument_list|(
name|req
argument_list|)
operator|&&
name|isType
argument_list|(
name|FORM_TYPE
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|OutputFormat
operator|.
name|JSON
operator|.
name|newGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|ParameterParser
operator|.
name|formToJson
argument_list|(
name|req
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
end_if

begin_throw
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Expected Content-Type: "
operator|+
name|JSON_TYPE
argument_list|)
throw|;
end_throw

begin_function
unit|}    private
DECL|method|hasNoBody (HttpServletRequest req)
specifier|static
name|boolean
name|hasNoBody
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|int
name|len
init|=
name|req
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|req
operator|.
name|getContentType
argument_list|()
decl_stmt|;
return|return
operator|(
name|len
operator|<=
literal|0
operator|&&
name|type
operator|==
literal|null
operator|)
operator|||
operator|(
name|len
operator|==
literal|0
operator|&&
name|isType
argument_list|(
name|FORM_TYPE
argument_list|,
name|type
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|acceptsRawInput (Type type)
specifier|private
specifier|static
name|boolean
name|acceptsRawInput
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
for|for
control|(
name|Field
name|f
range|:
operator|(
operator|(
name|Class
operator|)
name|type
operator|)
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|==
name|RawInput
operator|.
name|class
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|parseRawInput (HttpServletRequest req, Type type)
specifier|private
name|Object
name|parseRawInput
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|MethodNotAllowedException
block|{
name|Object
name|obj
init|=
name|createInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|==
name|RawInput
operator|.
name|class
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|RawInputUtil
operator|.
name|create
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
throw|throw
operator|new
name|MethodNotAllowedException
argument_list|()
throw|;
block|}
end_function

begin_function
DECL|method|parseString (String value, Type type)
specifier|private
name|Object
name|parseString
parameter_list|(
name|String
name|value
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|type
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|value
return|;
block|}
name|Object
name|obj
init|=
name|createInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|obj
return|;
block|}
name|Field
index|[]
name|fields
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getAnnotation
argument_list|(
name|DefaultInput
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|&&
name|f
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Expected JSON object"
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createInstance (Type type)
specifier|private
specifier|static
name|Object
name|createInstance
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|Object
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|Object
argument_list|>
operator|)
name|type
decl_stmt|;
name|Constructor
argument_list|<
name|Object
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|Type
name|rawType
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|rawType
operator|instanceof
name|Class
operator|&&
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
argument_list|<
name|Object
argument_list|>
operator|)
name|rawType
argument_list|)
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
if|if
condition|(
name|rawType
operator|instanceof
name|Class
operator|&&
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
argument_list|<
name|Object
argument_list|>
operator|)
name|rawType
argument_list|)
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|InstantiationException
argument_list|(
literal|"Cannot make "
operator|+
name|type
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|/**    * Sets a JSON reply on the given HTTP servlet response.    *    * @param req the HTTP servlet request    * @param res the HTTP servlet response on which the reply should be set    * @param allowTracing whether it is allowed to log the reply if tracing is enabled, must not be    *     set to {@code true} if the reply may contain sensitive data    * @param config config parameters for the JSON formatting    * @param result the object that should be formatted as JSON    * @return the length of the response    * @throws IOException    */
end_comment

begin_function
DECL|method|replyJson ( @ullable HttpServletRequest req, HttpServletResponse res, boolean allowTracing, ListMultimap<String, String> config, Object result)
specifier|public
specifier|static
name|long
name|replyJson
parameter_list|(
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|boolean
name|allowTracing
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|Object
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
name|HEAP_EST_SIZE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|JSON_MAGIC
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|buf
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|Gson
name|gson
init|=
name|newGson
argument_list|(
name|config
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|JsonElement
condition|)
block|{
name|gson
operator|.
name|toJson
argument_list|(
operator|(
name|JsonElement
operator|)
name|result
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gson
operator|.
name|toJson
argument_list|(
name|result
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|allowTracing
condition|)
block|{
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"JSON response body:\n%s"
argument_list|,
name|lazy
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|ByteArrayOutputStream
name|debugOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|buf
operator|.
name|writeTo
argument_list|(
name|debugOut
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|debugOut
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"<JSON formatting failed>"
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|replyBinaryResult
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
operator|.
name|setContentType
argument_list|(
name|JSON_TYPE
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|newGson ( ListMultimap<String, String> config, @Nullable HttpServletRequest req)
specifier|private
specifier|static
name|Gson
name|newGson
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|GsonBuilder
name|gb
init|=
name|OutputFormat
operator|.
name|JSON_COMPACT
operator|.
name|newGsonBuilder
argument_list|()
decl_stmt|;
name|enablePrettyPrint
argument_list|(
name|gb
argument_list|,
name|config
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|enablePartialGetFields
argument_list|(
name|gb
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|gb
operator|.
name|create
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|enablePrettyPrint ( GsonBuilder gb, ListMultimap<String, String> config, @Nullable HttpServletRequest req)
specifier|private
specifier|static
name|void
name|enablePrettyPrint
parameter_list|(
name|GsonBuilder
name|gb
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|pp
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|config
operator|.
name|get
argument_list|(
literal|"pp"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|pp
operator|==
literal|null
condition|)
block|{
name|pp
operator|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|config
operator|.
name|get
argument_list|(
literal|"prettyPrint"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|pp
operator|==
literal|null
operator|&&
name|req
operator|!=
literal|null
condition|)
block|{
name|pp
operator|=
name|acceptsJson
argument_list|(
name|req
argument_list|)
condition|?
literal|"0"
else|:
literal|"1"
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|pp
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|pp
argument_list|)
condition|)
block|{
name|gb
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|enablePartialGetFields (GsonBuilder gb, ListMultimap<String, String> config)
specifier|private
specifier|static
name|void
name|enablePartialGetFields
parameter_list|(
name|GsonBuilder
name|gb
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|want
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|config
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
control|)
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|want
argument_list|,
name|OptionUtil
operator|.
name|splitOptionValue
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|want
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|gb
operator|.
name|addSerializationExclusionStrategy
argument_list|(
operator|new
name|ExclusionStrategy
argument_list|()
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|names
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|shouldSkipField
parameter_list|(
name|FieldAttributes
name|field
parameter_list|)
block|{
name|String
name|name
init|=
name|names
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// Names are supplied by Gson in terms of Java source.
comment|// Translate and cache the JSON lower_case_style used.
try|try
block|{
name|name
operator|=
name|FieldNamingPolicy
operator|.
name|LOWER_CASE_WITH_UNDERSCORES
operator|.
name|translateName
argument_list|(
comment|//
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
decl||
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
operator|!
name|want
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldSkipClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
DECL|method|replyBinaryResult ( @ullable HttpServletRequest req, HttpServletResponse res, BinaryResult bin)
specifier|static
name|long
name|replyBinaryResult
parameter_list|(
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|BinaryResult
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BinaryResult
name|appResult
init|=
name|bin
decl_stmt|;
try|try
block|{
if|if
condition|(
name|bin
operator|.
name|getAttachmentName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|bin
operator|.
name|getAttachmentName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bin
operator|.
name|isBase64
argument_list|()
condition|)
block|{
if|if
condition|(
name|req
operator|!=
literal|null
operator|&&
name|JSON_TYPE
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
argument_list|)
condition|)
block|{
name|bin
operator|=
name|stackJsonString
argument_list|(
name|res
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bin
operator|=
name|stackBase64
argument_list|(
name|res
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bin
operator|.
name|canGzip
argument_list|()
operator|&&
name|acceptsGzip
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|bin
operator|=
name|stackGzip
argument_list|(
name|res
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setContentType
argument_list|(
name|bin
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|bin
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|len
operator|&&
name|len
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|res
operator|.
name|setContentLength
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|0
operator|<=
name|len
condition|)
block|{
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|==
literal|null
operator|||
operator|!
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|CountingOutputStream
name|dst
init|=
operator|new
name|CountingOutputStream
argument_list|(
name|res
operator|.
name|getOutputStream
argument_list|()
argument_list|)
init|)
block|{
name|bin
operator|.
name|writeTo
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return
name|dst
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
finally|finally
block|{
name|appResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|stackJsonString (HttpServletResponse res, BinaryResult src)
specifier|private
specifier|static
name|BinaryResult
name|stackJsonString
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|BinaryResult
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
name|HEAP_EST_SIZE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|buf
operator|.
name|write
argument_list|(
name|JSON_MAGIC
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|buf
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
init|;
name|JsonWriter
name|json
operator|=
operator|new
name|JsonWriter
argument_list|(
name|w
argument_list|)
init|)
block|{
name|json
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|json
operator|.
name|setHtmlSafe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|json
operator|.
name|value
argument_list|(
name|src
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-FYI-Content-Encoding"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-FYI-Content-Type"
argument_list|,
name|src
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
operator|.
name|setContentType
argument_list|(
name|JSON_TYPE
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|stackBase64 (HttpServletResponse res, BinaryResult src)
specifier|private
specifier|static
name|BinaryResult
name|stackBase64
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|BinaryResult
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryResult
name|b64
decl_stmt|;
name|long
name|len
init|=
name|src
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|len
operator|&&
name|len
operator|<=
operator|(
literal|7
operator|<<
literal|20
operator|)
condition|)
block|{
name|b64
operator|=
name|base64
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b64
operator|=
operator|new
name|BinaryResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OutputStreamWriter
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FilterOutputStream
argument_list|(
name|out
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Do not close out, but only w and e.
block|}
block|}
argument_list|,
name|ISO_8859_1
argument_list|)
init|;                   OutputStream e = BaseEncoding.base64()
operator|.
name|encodingStream
argument_list|(
name|w
argument_list|)
block|)
block|{
name|src
operator|.
name|writeTo
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
block|}
end_function

begin_expr_stmt
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-FYI-Content-Encoding"
argument_list|,
literal|"base64"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|res
operator|.
name|setHeader
argument_list|(
literal|"X-FYI-Content-Type"
argument_list|,
name|src
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|b64
operator|.
name|setContentType
argument_list|(
name|PLAIN_TEXT
argument_list|)
operator|.
name|setCharacterEncoding
argument_list|(
name|ISO_8859_1
argument_list|)
return|;
end_return

begin_function
unit|}    private
DECL|method|stackGzip (HttpServletResponse res, BinaryResult src)
specifier|static
name|BinaryResult
name|stackGzip
parameter_list|(
name|HttpServletResponse
name|res
parameter_list|,
name|BinaryResult
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryResult
name|gz
decl_stmt|;
name|long
name|len
init|=
name|src
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|256
condition|)
block|{
return|return
name|src
return|;
comment|// Do not compress very small payloads.
block|}
if|if
condition|(
name|len
operator|<=
operator|(
literal|10
operator|<<
literal|20
operator|)
condition|)
block|{
name|gz
operator|=
name|compress
argument_list|(
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<=
name|gz
operator|.
name|getContentLength
argument_list|()
condition|)
block|{
return|return
name|src
return|;
block|}
block|}
else|else
block|{
name|gz
operator|=
operator|new
name|BinaryResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|GZIPOutputStream
name|gz
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|src
operator|.
name|writeTo
argument_list|(
name|gz
argument_list|)
expr_stmt|;
name|gz
operator|.
name|finish
argument_list|()
expr_stmt|;
name|gz
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|res
operator|.
name|setHeader
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
return|return
name|gz
operator|.
name|setContentType
argument_list|(
name|src
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|view ( RestCollection<RestResource, RestResource> rc, String method, List<IdString> path)
specifier|private
name|ViewData
name|view
parameter_list|(
name|RestCollection
argument_list|<
name|RestResource
argument_list|,
name|RestResource
argument_list|>
name|rc
parameter_list|,
name|String
name|method
parameter_list|,
name|List
argument_list|<
name|IdString
argument_list|>
name|path
parameter_list|)
throws|throws
name|AmbiguousViewException
throws|,
name|RestApiException
block|{
name|DynamicMap
argument_list|<
name|RestView
argument_list|<
name|RestResource
argument_list|>
argument_list|>
name|views
init|=
name|rc
operator|.
name|views
argument_list|()
decl_stmt|;
specifier|final
name|IdString
name|projection
init|=
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|IdString
operator|.
name|fromUrl
argument_list|(
literal|"/"
argument_list|)
else|:
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If there are path components still remaining after this projection
comment|// is chosen, look for the projection based upon GET as the method as
comment|// the client thinks it is a nested collection.
name|method
operator|=
literal|"GET"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|method
operator|=
literal|"GET"
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|splitProjection
argument_list|(
name|projection
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|String
name|viewname
init|=
name|p
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|viewname
argument_list|)
condition|)
block|{
name|viewname
operator|=
literal|"/"
expr_stmt|;
block|}
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
init|=
name|views
operator|.
name|get
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|method
operator|+
literal|"."
operator|+
name|viewname
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ViewData
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|view
argument_list|)
return|;
block|}
name|view
operator|=
name|views
operator|.
name|get
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"GET."
operator|+
name|viewname
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ViewData
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|view
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|projection
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|method
operator|+
literal|"."
operator|+
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|core
init|=
name|views
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ViewData
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
name|core
argument_list|)
return|;
block|}
comment|// Check if we want to delegate to a child collection. Child collections are bound with
comment|// GET.name so we have to check for this since we haven't found any other views.
name|core
operator|=
name|views
operator|.
name|get
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
literal|"GET."
operator|+
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ViewData
argument_list|(
name|PluginName
operator|.
name|GERRIT
argument_list|,
name|core
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
argument_list|>
name|r
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|plugin
range|:
name|views
operator|.
name|plugins
argument_list|()
control|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|action
init|=
name|views
operator|.
name|get
argument_list|(
name|plugin
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Check if we want to delegate to a child collection. Child collections are bound with
comment|// GET.name so we have to check for this since we haven't found any other views.
for|for
control|(
name|String
name|plugin
range|:
name|views
operator|.
name|plugins
argument_list|()
control|)
block|{
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|action
init|=
name|views
operator|.
name|get
argument_list|(
name|plugin
argument_list|,
literal|"GET."
operator|+
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|put
argument_list|(
name|plugin
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
argument_list|>
name|entry
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|r
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ViewData
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
name|projection
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|AmbiguousViewException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Projection %s is ambiguous: %s"
argument_list|,
name|name
argument_list|,
name|r
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|in
lambda|->
name|in
operator|+
literal|"~"
operator|+
name|projection
argument_list|)
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
end_function

begin_function
DECL|method|splitPath (HttpServletRequest req)
specifier|private
specifier|static
name|List
argument_list|<
name|IdString
argument_list|>
name|splitPath
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|path
init|=
name|RequestUtil
operator|.
name|getEncodedPathInfo
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|IdString
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|'/'
argument_list|)
operator|.
name|split
argument_list|(
name|path
argument_list|)
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|IdString
operator|.
name|fromUrl
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|out
operator|.
name|get
argument_list|(
name|out
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|remove
argument_list|(
name|out
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
end_function

begin_function
DECL|method|splitProjection (IdString projection)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitProjection
parameter_list|(
name|IdString
name|projection
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|p
argument_list|,
name|Splitter
operator|.
name|on
argument_list|(
literal|'~'
argument_list|)
operator|.
name|limit
argument_list|(
literal|2
argument_list|)
operator|.
name|split
argument_list|(
name|projection
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_function
DECL|method|checkUserSession (HttpServletRequest req)
specifier|private
name|void
name|checkUserSession
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
throws|throws
name|AuthException
block|{
name|CurrentUser
name|user
init|=
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRead
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|user
operator|.
name|setAccessPath
argument_list|(
name|AccessPath
operator|.
name|REST_API
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|user
operator|instanceof
name|AnonymousUser
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Authentication required"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|globals
operator|.
name|webSession
operator|.
name|get
argument_list|()
operator|.
name|isAccessPathOk
argument_list|(
name|AccessPath
operator|.
name|REST_API
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthException
argument_list|(
literal|"Invalid authentication method. In order to authenticate, "
operator|+
literal|"prefix the REST endpoint URL with /a/ (e.g. http://example.com/a/projects/)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|user
operator|.
name|isIdentifiedUser
argument_list|()
condition|)
block|{
name|user
operator|.
name|setLastLoginExternalIdKey
argument_list|(
name|globals
operator|.
name|webSession
operator|.
name|get
argument_list|()
operator|.
name|getLastLoginExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getParameterNames (HttpServletRequest req)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameterNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|req
operator|.
name|getParameterMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|parameterNames
argument_list|)
expr_stmt|;
return|return
name|parameterNames
return|;
block|}
end_function

begin_function
DECL|method|enableTracing (HttpServletRequest req, HttpServletResponse res)
specifier|private
name|TraceContext
name|enableTracing
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
block|{
comment|// There are 2 ways to enable tracing for REST calls:
comment|// 1. by using the 'trace' or 'trace=<trace-id>' request parameter
comment|// 2. by setting the 'X-Gerrit-Trace:' or 'X-Gerrit-Trace:<trace-id>' header
name|String
name|traceValueFromHeader
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|X_GERRIT_TRACE
argument_list|)
decl_stmt|;
name|String
name|traceValueFromRequestParam
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|ParameterParser
operator|.
name|TRACE_PARAMETER
argument_list|)
decl_stmt|;
name|boolean
name|doTrace
init|=
name|traceValueFromHeader
operator|!=
literal|null
operator|||
name|traceValueFromRequestParam
operator|!=
literal|null
decl_stmt|;
comment|// Check whether no trace ID, one trace ID or 2 different trace IDs have been specified.
name|String
name|traceId1
decl_stmt|;
name|String
name|traceId2
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|traceValueFromHeader
argument_list|)
condition|)
block|{
name|traceId1
operator|=
name|traceValueFromHeader
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|traceValueFromRequestParam
argument_list|)
operator|&&
operator|!
name|traceValueFromHeader
operator|.
name|equals
argument_list|(
name|traceValueFromRequestParam
argument_list|)
condition|)
block|{
name|traceId2
operator|=
name|traceValueFromRequestParam
expr_stmt|;
block|}
else|else
block|{
name|traceId2
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|traceId1
operator|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|traceValueFromRequestParam
argument_list|)
expr_stmt|;
name|traceId2
operator|=
literal|null
expr_stmt|;
block|}
comment|// Use the first trace ID to start tracing. If this trace ID is null, a trace ID will be
comment|// generated.
name|TraceContext
name|traceContext
init|=
name|TraceContext
operator|.
name|newTrace
argument_list|(
name|doTrace
argument_list|,
name|traceId1
argument_list|,
parameter_list|(
name|tagName
parameter_list|,
name|traceId
parameter_list|)
lambda|->
name|res
operator|.
name|setHeader
argument_list|(
name|X_GERRIT_TRACE
argument_list|,
name|traceId
argument_list|)
argument_list|)
decl_stmt|;
comment|// If a second trace ID was specified, add a tag for it as well.
if|if
condition|(
name|traceId2
operator|!=
literal|null
condition|)
block|{
name|traceContext
operator|.
name|addTag
argument_list|(
name|RequestId
operator|.
name|Type
operator|.
name|TRACE_ID
argument_list|,
name|traceId2
argument_list|)
expr_stmt|;
name|res
operator|.
name|addHeader
argument_list|(
name|X_GERRIT_TRACE
argument_list|,
name|traceId2
argument_list|)
expr_stmt|;
block|}
return|return
name|traceContext
return|;
block|}
end_function

begin_function
DECL|method|createRequestInfo ( TraceContext traceContext, String requestUri, List<IdString> path)
specifier|private
name|RequestInfo
name|createRequestInfo
parameter_list|(
name|TraceContext
name|traceContext
parameter_list|,
name|String
name|requestUri
parameter_list|,
name|List
argument_list|<
name|IdString
argument_list|>
name|path
parameter_list|)
block|{
name|RequestInfo
operator|.
name|Builder
name|requestInfo
init|=
name|RequestInfo
operator|.
name|builder
argument_list|(
name|RequestInfo
operator|.
name|RequestType
operator|.
name|REST
argument_list|,
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
argument_list|,
name|traceContext
argument_list|)
operator|.
name|requestUri
argument_list|(
name|requestUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
name|requestInfo
operator|.
name|build
argument_list|()
return|;
block|}
name|RestCollection
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rootCollection
init|=
name|members
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|resourceId
init|=
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootCollection
operator|instanceof
name|ProjectsCollection
condition|)
block|{
name|requestInfo
operator|.
name|project
argument_list|(
name|Project
operator|.
name|nameKey
argument_list|(
name|resourceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rootCollection
operator|instanceof
name|ChangesCollection
condition|)
block|{
name|ChangeNotes
name|changeNotes
init|=
name|globals
operator|.
name|changeFinder
operator|.
name|findOne
argument_list|(
name|resourceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeNotes
operator|!=
literal|null
condition|)
block|{
name|requestInfo
operator|.
name|project
argument_list|(
name|changeNotes
operator|.
name|getProjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|requestInfo
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|traceRequestData (HttpServletRequest req)
specifier|private
name|void
name|traceRequestData
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"Received REST request: %s %s (parameters: %s)"
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|req
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|getParameterNames
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"Calling user: %s"
argument_list|,
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|getLoggableName
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"Groups: %s"
argument_list|,
name|globals
operator|.
name|currentUser
operator|.
name|get
argument_list|()
operator|.
name|getEffectiveGroups
argument_list|()
operator|.
name|getKnownGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isDelete (HttpServletRequest req)
specifier|private
name|boolean
name|isDelete
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
literal|"DELETE"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|isPost (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|isPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|isPut (HttpServletRequest req)
specifier|private
name|boolean
name|isPut
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|isRead (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|isRead
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
literal|"GET"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|methodNotAllowed (HttpServletRequest req)
specifier|private
specifier|static
name|MethodNotAllowedException
name|methodNotAllowed
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|MethodNotAllowedException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Not implemented: %s %s"
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|requestUri
argument_list|(
name|req
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|requestUri (HttpServletRequest req)
specifier|private
specifier|static
name|String
name|requestUri
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"/a/"
argument_list|)
condition|)
block|{
return|return
name|uri
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
return|;
block|}
return|return
name|uri
return|;
block|}
end_function

begin_function
DECL|method|checkRequiresCapability (ViewData d)
specifier|private
name|void
name|checkRequiresCapability
parameter_list|(
name|ViewData
name|d
parameter_list|)
throws|throws
name|AuthException
throws|,
name|PermissionBackendException
block|{
try|try
block|{
name|globals
operator|.
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|check
argument_list|(
name|GlobalPermission
operator|.
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthException
name|e
parameter_list|)
block|{
comment|// Skiping
name|globals
operator|.
name|permissionBackend
operator|.
name|currentUser
argument_list|()
operator|.
name|checkAny
argument_list|(
name|GlobalPermission
operator|.
name|fromAnnotation
argument_list|(
name|d
operator|.
name|pluginName
argument_list|,
name|d
operator|.
name|view
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|handleException ( TraceContext traceContext, Throwable err, HttpServletRequest req, HttpServletResponse res)
specifier|private
name|long
name|handleException
parameter_list|(
name|TraceContext
name|traceContext
parameter_list|,
name|Throwable
name|err
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|atSevere
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"Error in %s %s"
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|uriForLogging
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|res
operator|.
name|reset
argument_list|()
expr_stmt|;
name|traceContext
operator|.
name|getTraceId
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|traceId
lambda|->
name|res
operator|.
name|addHeader
argument_list|(
name|X_GERRIT_TRACE
argument_list|,
name|traceId
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|userMessages
init|=
name|globals
operator|.
name|exceptionHooks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|h
lambda|->
name|h
operator|.
name|getUserMessage
argument_list|(
name|err
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|toImmutableList
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Integer
argument_list|>
name|statusCode
init|=
name|globals
operator|.
name|exceptionHooks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|h
lambda|->
name|h
operator|.
name|getStatusCode
argument_list|(
name|err
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusCode
operator|.
name|isPresent
argument_list|()
operator|&&
name|statusCode
operator|.
name|get
argument_list|()
operator|<
literal|400
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|userMessages
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|userMessages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userMessages
operator|.
name|forEach
argument_list|(
name|m
lambda|->
name|msg
operator|.
name|append
argument_list|(
literal|"\n* "
argument_list|)
operator|.
name|append
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|setStatus
argument_list|(
name|statusCode
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"REST call finished: %d"
argument_list|,
name|statusCode
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|replyText
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|true
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Internal server error"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|userMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|userMessages
operator|.
name|forEach
argument_list|(
name|m
lambda|->
name|msg
operator|.
name|append
argument_list|(
literal|"\n* "
argument_list|)
operator|.
name|append
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|statusCode
operator|.
name|orElse
argument_list|(
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|err
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
DECL|method|uriForLogging (HttpServletRequest req)
specifier|private
specifier|static
name|String
name|uriForLogging
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|uri
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
condition|)
block|{
name|uri
operator|+=
literal|"?"
operator|+
name|LogRedactUtil
operator|.
name|redactQueryString
argument_list|(
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
end_function

begin_function
DECL|method|replyError ( HttpServletRequest req, HttpServletResponse res, int statusCode, String msg, @Nullable Throwable err)
specifier|public
specifier|static
name|long
name|replyError
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|msg
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|err
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replyError
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|statusCode
argument_list|,
name|msg
argument_list|,
name|CacheControl
operator|.
name|NONE
argument_list|,
name|err
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|replyError ( HttpServletRequest req, HttpServletResponse res, int statusCode, String msg, CacheControl c, @Nullable Throwable err)
specifier|public
specifier|static
name|long
name|replyError
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|msg
parameter_list|,
name|CacheControl
name|c
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|err
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|RequestUtil
operator|.
name|setErrorTraceAttribute
argument_list|(
name|req
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
name|configureCaching
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|statusCode
operator|>=
literal|400
argument_list|,
literal|"non-error status: %s"
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|res
operator|.
name|setStatus
argument_list|(
name|statusCode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|withCause
argument_list|(
name|err
argument_list|)
operator|.
name|log
argument_list|(
literal|"REST call failed: %d"
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
return|return
name|replyText
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|true
argument_list|,
name|msg
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Sets a text reply on the given HTTP servlet response.    *    * @param req the HTTP servlet request    * @param res the HTTP servlet response on which the reply should be set    * @param allowTracing whether it is allowed to log the reply if tracing is enabled, must not be    *     set to {@code true} if the reply may contain sensitive data    * @param text the text reply    * @return the length of the response    * @throws IOException    */
end_comment

begin_function
DECL|method|replyText ( @ullable HttpServletRequest req, HttpServletResponse res, boolean allowTracing, String text)
specifier|static
name|long
name|replyText
parameter_list|(
annotation|@
name|Nullable
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|boolean
name|allowTracing
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|req
operator|==
literal|null
operator|||
name|isRead
argument_list|(
name|req
argument_list|)
operator|)
operator|&&
name|isMaybeHTML
argument_list|(
name|text
argument_list|)
condition|)
block|{
return|return
name|replyJson
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|allowTracing
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"pp"
argument_list|,
literal|"0"
argument_list|)
argument_list|,
operator|new
name|JsonPrimitive
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|text
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|text
operator|+=
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|allowTracing
condition|)
block|{
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"Text response body:\n%s"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|replyBinaryResult
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|BinaryResult
operator|.
name|create
argument_list|(
name|text
argument_list|)
operator|.
name|setContentType
argument_list|(
name|PLAIN_TEXT
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|isMaybeHTML (String text)
specifier|private
specifier|static
name|boolean
name|isMaybeHTML
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|CharMatcher
operator|.
name|anyOf
argument_list|(
literal|"<&"
argument_list|)
operator|.
name|matchesAnyOf
argument_list|(
name|text
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|acceptsJson (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|acceptsJson
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
name|req
operator|!=
literal|null
operator|&&
name|isType
argument_list|(
name|JSON_TYPE
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|acceptsGzip (HttpServletRequest req)
specifier|private
specifier|static
name|boolean
name|acceptsGzip
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
name|String
name|accepts
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_ENCODING
argument_list|)
decl_stmt|;
return|return
name|accepts
operator|!=
literal|null
operator|&&
name|accepts
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|isType (String expect, String given)
specifier|private
specifier|static
name|boolean
name|isType
parameter_list|(
name|String
name|expect
parameter_list|,
name|String
name|given
parameter_list|)
block|{
if|if
condition|(
name|given
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|expect
operator|.
name|equals
argument_list|(
name|given
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|given
operator|.
name|startsWith
argument_list|(
name|expect
operator|+
literal|","
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|p
range|:
name|Splitter
operator|.
name|on
argument_list|(
name|TYPE_SPLIT_PATTERN
argument_list|)
operator|.
name|split
argument_list|(
name|given
argument_list|)
control|)
block|{
if|if
condition|(
name|expect
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|base64MaxSize (long n)
specifier|private
specifier|static
name|int
name|base64MaxSize
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
literal|4
operator|*
name|IntMath
operator|.
name|divide
argument_list|(
operator|(
name|int
operator|)
name|n
argument_list|,
literal|3
argument_list|,
name|CEILING
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|base64 (BinaryResult bin)
specifier|private
specifier|static
name|BinaryResult
name|base64
parameter_list|(
name|BinaryResult
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxSize
init|=
name|base64MaxSize
argument_list|(
name|bin
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|estSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|base64MaxSize
argument_list|(
name|HEAP_EST_SIZE
argument_list|)
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
name|estSize
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|encoded
init|=
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|encodingStream
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|buf
argument_list|,
name|ISO_8859_1
argument_list|)
argument_list|)
init|)
block|{
name|bin
operator|.
name|writeTo
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
block|}
return|return
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|compress (BinaryResult bin)
specifier|private
specifier|static
name|BinaryResult
name|compress
parameter_list|(
name|BinaryResult
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
name|TemporaryBuffer
operator|.
name|Heap
name|buf
init|=
name|heap
argument_list|(
name|HEAP_EST_SIZE
argument_list|,
literal|20
operator|<<
literal|20
argument_list|)
decl_stmt|;
try|try
init|(
name|GZIPOutputStream
name|gz
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|buf
argument_list|)
init|)
block|{
name|bin
operator|.
name|writeTo
argument_list|(
name|gz
argument_list|)
expr_stmt|;
block|}
return|return
name|asBinaryResult
argument_list|(
name|buf
argument_list|)
operator|.
name|setContentType
argument_list|(
name|bin
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
DECL|method|asBinaryResult (TemporaryBuffer.Heap buf)
specifier|private
specifier|static
name|BinaryResult
name|asBinaryResult
parameter_list|(
name|TemporaryBuffer
operator|.
name|Heap
name|buf
parameter_list|)
block|{
return|return
operator|new
name|BinaryResult
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|buf
operator|.
name|writeTo
argument_list|(
name|os
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|setContentLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|heap (int est, int max)
specifier|private
specifier|static
name|Heap
name|heap
parameter_list|(
name|int
name|est
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
operator|new
name|TemporaryBuffer
operator|.
name|Heap
argument_list|(
name|est
argument_list|,
name|max
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|AmbiguousViewException
specifier|private
specifier|static
class|class
name|AmbiguousViewException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|AmbiguousViewException (String message)
name|AmbiguousViewException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|ViewData
specifier|static
class|class
name|ViewData
block|{
DECL|field|pluginName
name|String
name|pluginName
decl_stmt|;
DECL|field|view
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
decl_stmt|;
DECL|method|ViewData (String pluginName, RestView<RestResource> view)
name|ViewData
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|RestView
argument_list|<
name|RestResource
argument_list|>
name|view
parameter_list|)
block|{
name|this
operator|.
name|pluginName
operator|=
name|pluginName
expr_stmt|;
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

