begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.json
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|TypeAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|TypeAdapterFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|internal
operator|.
name|bind
operator|.
name|TypeAdapters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|stream
operator|.
name|JsonWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A {@code TypeAdapterFactory} for enums.  *  *<p>This factory introduces a wrapper around Gson's own default enum handler to add the following  * special behavior: log when input which doesn't match any existing enum value is encountered.  */
end_comment

begin_class
DECL|class|EnumTypeAdapterFactory
specifier|public
class|class
name|EnumTypeAdapterFactory
implements|implements
name|TypeAdapterFactory
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|create (Gson gson, TypeToken<T> typeToken)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|TypeAdapter
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|Gson
name|gson
parameter_list|,
name|TypeToken
argument_list|<
name|T
argument_list|>
name|typeToken
parameter_list|)
block|{
name|TypeAdapter
argument_list|<
name|T
argument_list|>
name|defaultEnumAdapter
init|=
name|TypeAdapters
operator|.
name|ENUM_FACTORY
operator|.
name|create
argument_list|(
name|gson
argument_list|,
name|typeToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultEnumAdapter
operator|==
literal|null
condition|)
block|{
comment|// Not an enum. -> Enum type adapter doesn't apply.
return|return
literal|null
return|;
block|}
return|return
operator|(
name|TypeAdapter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|EnumTypeAdapter
argument_list|(
name|defaultEnumAdapter
argument_list|,
name|typeToken
argument_list|)
return|;
block|}
DECL|class|EnumTypeAdapter
specifier|private
specifier|static
class|class
name|EnumTypeAdapter
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
parameter_list|>
extends|extends
name|TypeAdapter
argument_list|<
name|T
argument_list|>
block|{
DECL|field|defaultEnumAdapter
specifier|private
specifier|final
name|TypeAdapter
argument_list|<
name|T
argument_list|>
name|defaultEnumAdapter
decl_stmt|;
DECL|field|typeToken
specifier|private
specifier|final
name|TypeToken
argument_list|<
name|T
argument_list|>
name|typeToken
decl_stmt|;
DECL|method|EnumTypeAdapter (TypeAdapter<T> defaultEnumAdapter, TypeToken<T> typeToken)
specifier|public
name|EnumTypeAdapter
parameter_list|(
name|TypeAdapter
argument_list|<
name|T
argument_list|>
name|defaultEnumAdapter
parameter_list|,
name|TypeToken
argument_list|<
name|T
argument_list|>
name|typeToken
parameter_list|)
block|{
name|this
operator|.
name|defaultEnumAdapter
operator|=
name|defaultEnumAdapter
expr_stmt|;
name|this
operator|.
name|typeToken
operator|=
name|typeToken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (JsonReader in)
specifier|public
name|T
name|read
parameter_list|(
name|JsonReader
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Still handle null values. -> Check them first.
if|if
condition|(
name|in
operator|.
name|peek
argument_list|()
operator|==
name|JsonToken
operator|.
name|NULL
condition|)
block|{
name|in
operator|.
name|nextNull
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|T
name|enumValue
init|=
name|defaultEnumAdapter
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|enumValue
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|atWarning
argument_list|()
operator|.
name|log
argument_list|(
literal|"Expected an existing value for enum %s."
argument_list|,
name|typeToken
argument_list|)
expr_stmt|;
block|}
return|return
name|enumValue
return|;
block|}
annotation|@
name|Override
DECL|method|write (JsonWriter out, T value)
specifier|public
name|void
name|write
parameter_list|(
name|JsonWriter
name|out
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|defaultEnumAdapter
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

