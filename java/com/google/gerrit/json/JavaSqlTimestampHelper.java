begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.json
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/** Utility to parse Timestamp from a string. */
end_comment

begin_class
DECL|class|JavaSqlTimestampHelper
specifier|public
class|class
name|JavaSqlTimestampHelper
block|{
comment|/**    * Parse a string into a timestamp.    *    *<p>Note that {@link Timestamp}s have no timezone, so the result is relative to the UTC epoch.    *    *<p>Supports the format {@code yyyy-MM-dd[ HH:mm:ss[.SSS][ Z]]} where {@code Z} is a 4-digit    * offset with sign, e.g. {@code -0500}.    *    * @param s input string.    * @return resulting timestamp.    */
DECL|method|parseTimestamp (String s)
specifier|public
specifier|static
name|Timestamp
name|parseTimestamp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|String
index|[]
name|components
init|=
name|s
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|.
name|length
argument_list|<
literal|1
operator|||
name|components
operator|.
name|length
argument_list|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected date and optional time: "
operator|+
name|s
argument_list|)
throw|;
block|}
name|String
name|date
init|=
name|components
index|[
literal|0
index|]
decl_stmt|;
name|String
name|time
init|=
name|components
operator|.
name|length
operator|>=
literal|2
condition|?
name|components
index|[
literal|1
index|]
else|:
literal|null
decl_stmt|;
name|int
name|off
init|=
name|components
operator|.
name|length
operator|==
literal|3
condition|?
name|parseTimeZone
argument_list|(
name|components
index|[
literal|2
index|]
argument_list|)
else|:
literal|0
decl_stmt|;
name|String
index|[]
name|dSplit
init|=
name|date
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dSplit
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid date format: "
operator|+
name|date
argument_list|)
throw|;
block|}
name|int
name|yy
decl_stmt|,
name|mm
decl_stmt|,
name|dd
decl_stmt|;
try|try
block|{
name|yy
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dSplit
index|[
literal|0
index|]
argument_list|)
operator|-
literal|1900
expr_stmt|;
name|mm
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dSplit
index|[
literal|1
index|]
argument_list|)
operator|-
literal|1
expr_stmt|;
name|dd
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dSplit
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid date format: "
operator|+
name|date
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|int
name|hh
decl_stmt|,
name|mi
decl_stmt|,
name|ss
decl_stmt|,
name|ns
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|int
name|p
init|=
name|time
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|t
decl_stmt|;
name|double
name|f
decl_stmt|;
try|try
block|{
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|t
operator|=
name|time
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|f
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
literal|"0."
operator|+
name|time
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|time
expr_stmt|;
name|f
operator|=
literal|0
expr_stmt|;
block|}
name|String
index|[]
name|tSplit
init|=
name|t
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tSplit
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time format: "
operator|+
name|time
argument_list|)
throw|;
block|}
name|hh
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tSplit
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mi
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tSplit
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ss
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tSplit
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ns
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|f
operator|*
literal|1e9
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time format: "
operator|+
name|time
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|hh
operator|=
literal|0
expr_stmt|;
name|mi
operator|=
literal|0
expr_stmt|;
name|ss
operator|=
literal|0
expr_stmt|;
name|ns
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|Timestamp
name|result
init|=
operator|new
name|Timestamp
argument_list|(
name|Date
operator|.
name|UTC
argument_list|(
name|yy
argument_list|,
name|mm
argument_list|,
name|dd
argument_list|,
name|hh
argument_list|,
name|mi
argument_list|,
name|ss
argument_list|)
operator|-
name|off
argument_list|)
decl_stmt|;
name|result
operator|.
name|setNanos
argument_list|(
name|ns
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|parseTimeZone (String s)
specifier|private
specifier|static
name|int
name|parseTimeZone
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
literal|5
operator|||
operator|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'-'
operator|&&
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'+'
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time zone: "
operator|+
name|s
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|<
literal|'0'
operator|||
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|>
literal|'9'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid time zone: "
operator|+
name|s
argument_list|)
throw|;
block|}
block|}
name|int
name|off
init|=
operator|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
literal|60
operator|*
literal|1000
operator|*
operator|(
operator|(
literal|60
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|)
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|)
decl_stmt|;
return|return
name|off
return|;
block|}
DECL|method|JavaSqlTimestampHelper ()
specifier|private
name|JavaSqlTimestampHelper
parameter_list|()
block|{}
block|}
end_class

end_unit

