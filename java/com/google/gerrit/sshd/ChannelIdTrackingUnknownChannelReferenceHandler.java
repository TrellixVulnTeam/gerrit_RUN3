begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * This file is based on sshd-contrib Apache SSHD Mina project. Original commit:  * https://github.com/apache/mina-sshd/commit/11b33dee37b5b9c71a40a8a98a42007e3687131e  */
end_comment

begin_package
DECL|package|com.google.gerrit.sshd
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|sshd
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|flogger
operator|.
name|FluentLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|AttributeRepository
operator|.
name|AttributeKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|SshConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|channel
operator|.
name|ChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|channel
operator|.
name|exception
operator|.
name|SshChannelNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|session
operator|.
name|ConnectionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|session
operator|.
name|helpers
operator|.
name|DefaultUnknownChannelReferenceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|buffer
operator|.
name|Buffer
import|;
end_import

begin_comment
comment|/**  * Makes sure that the referenced&quot;unknown&quot; channel identifier is one that was assigned in  * the past.<B>Note:</B> it relies on the fact that the default {@code ConnectionService}  * implementation assigns channels identifiers in ascending order.  *  * @author<a href="mailto:dev@mina.apache.org">Apache MINA SSHD Project</a>  */
end_comment

begin_class
DECL|class|ChannelIdTrackingUnknownChannelReferenceHandler
specifier|public
class|class
name|ChannelIdTrackingUnknownChannelReferenceHandler
extends|extends
name|DefaultUnknownChannelReferenceHandler
implements|implements
name|ChannelListener
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|FluentLogger
name|logger
init|=
name|FluentLogger
operator|.
name|forEnclosingClass
argument_list|()
decl_stmt|;
DECL|field|LAST_CHANNEL_ID_KEY
specifier|public
specifier|static
specifier|final
name|AttributeKey
argument_list|<
name|Integer
argument_list|>
name|LAST_CHANNEL_ID_KEY
init|=
operator|new
name|AttributeKey
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|TRACKER
specifier|public
specifier|static
specifier|final
name|ChannelIdTrackingUnknownChannelReferenceHandler
name|TRACKER
init|=
operator|new
name|ChannelIdTrackingUnknownChannelReferenceHandler
argument_list|()
decl_stmt|;
DECL|method|ChannelIdTrackingUnknownChannelReferenceHandler ()
specifier|public
name|ChannelIdTrackingUnknownChannelReferenceHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelInitialized (Channel channel)
specifier|public
name|void
name|channelInitialized
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
name|int
name|channelId
init|=
name|channel
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|channel
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Integer
name|lastTracked
init|=
name|session
operator|.
name|setAttribute
argument_list|(
name|LAST_CHANNEL_ID_KEY
argument_list|,
name|channelId
argument_list|)
decl_stmt|;
name|logger
operator|.
name|atFine
argument_list|()
operator|.
name|log
argument_list|(
literal|"channelInitialized(%s) updated last tracked channel ID %s => %s"
argument_list|,
name|channel
argument_list|,
name|lastTracked
argument_list|,
name|channelId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleUnknownChannelCommand ( ConnectionService service, byte cmd, int channelId, Buffer buffer)
specifier|public
name|Channel
name|handleUnknownChannelCommand
parameter_list|(
name|ConnectionService
name|service
parameter_list|,
name|byte
name|cmd
parameter_list|,
name|int
name|channelId
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|Session
name|session
init|=
name|service
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Integer
name|lastTracked
init|=
name|session
operator|.
name|getAttribute
argument_list|(
name|LAST_CHANNEL_ID_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lastTracked
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|channelId
operator|<=
name|lastTracked
operator|.
name|intValue
argument_list|()
operator|)
condition|)
block|{
comment|// Use TRACE level in order to avoid messages flooding
name|logger
operator|.
name|atFinest
argument_list|()
operator|.
name|log
argument_list|(
literal|"handleUnknownChannelCommand(%s) apply default handling for %s on channel=%s (lastTracked=%s)"
argument_list|,
name|session
argument_list|,
name|SshConstants
operator|.
name|getCommandMessageName
argument_list|(
name|cmd
argument_list|)
argument_list|,
name|channelId
argument_list|,
name|lastTracked
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|handleUnknownChannelCommand
argument_list|(
name|service
argument_list|,
name|cmd
argument_list|,
name|channelId
argument_list|,
name|buffer
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SshChannelNotFoundException
argument_list|(
name|channelId
argument_list|,
literal|"Received "
operator|+
name|SshConstants
operator|.
name|getCommandMessageName
argument_list|(
name|cmd
argument_list|)
operator|+
literal|" on unassigned channel "
operator|+
name|channelId
operator|+
literal|" (last assigned="
operator|+
name|lastTracked
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

