begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2019 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.reviewdb.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|KeyUtil
specifier|public
class|class
name|KeyUtil
block|{
DECL|field|hexc
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|hexc
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|}
decl_stmt|;
DECL|field|safe
specifier|private
specifier|static
specifier|final
name|char
name|safe
index|[]
decl_stmt|;
DECL|field|hexb
specifier|private
specifier|static
specifier|final
name|byte
name|hexb
index|[]
decl_stmt|;
static|static
block|{
name|safe
operator|=
operator|new
name|char
index|[
literal|256
index|]
expr_stmt|;
name|safe
index|[
literal|'-'
index|]
operator|=
literal|'-'
expr_stmt|;
name|safe
index|[
literal|'_'
index|]
operator|=
literal|'_'
expr_stmt|;
name|safe
index|[
literal|'.'
index|]
operator|=
literal|'.'
expr_stmt|;
name|safe
index|[
literal|'!'
index|]
operator|=
literal|'!'
expr_stmt|;
name|safe
index|[
literal|'~'
index|]
operator|=
literal|'~'
expr_stmt|;
name|safe
index|[
literal|'*'
index|]
operator|=
literal|'*'
expr_stmt|;
name|safe
index|[
literal|'\''
index|]
operator|=
literal|'\''
expr_stmt|;
name|safe
index|[
literal|'('
index|]
operator|=
literal|'('
expr_stmt|;
name|safe
index|[
literal|')'
index|]
operator|=
literal|')'
expr_stmt|;
name|safe
index|[
literal|'/'
index|]
operator|=
literal|'/'
expr_stmt|;
name|safe
index|[
literal|' '
index|]
operator|=
literal|'+'
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'0'
init|;
name|c
operator|<=
literal|'9'
condition|;
name|c
operator|++
control|)
name|safe
index|[
name|c
index|]
operator|=
name|c
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'A'
init|;
name|c
operator|<=
literal|'Z'
condition|;
name|c
operator|++
control|)
name|safe
index|[
name|c
index|]
operator|=
name|c
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'a'
init|;
name|c
operator|<=
literal|'z'
condition|;
name|c
operator|++
control|)
name|safe
index|[
name|c
index|]
operator|=
name|c
expr_stmt|;
name|hexb
operator|=
operator|new
name|byte
index|[
literal|'f'
operator|+
literal|1
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|hexb
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|i
init|=
literal|'0'
init|;
name|i
operator|<=
literal|'9'
condition|;
name|i
operator|++
control|)
name|hexb
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|-
literal|'0'
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|i
init|=
literal|'A'
init|;
name|i
operator|<=
literal|'F'
condition|;
name|i
operator|++
control|)
name|hexb
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|-
literal|'A'
operator|)
operator|+
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|i
init|=
literal|'a'
init|;
name|i
operator|<=
literal|'f'
condition|;
name|i
operator|++
control|)
name|hexb
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|-
literal|'a'
operator|)
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|encode (final String e)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|String
name|e
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|b
decl_stmt|;
try|try
block|{
name|b
operator|=
name|e
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No UTF-8 support"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|c
init|=
name|b
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|char
name|s
init|=
name|safe
index|[
name|c
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|0
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|hexc
index|[
name|c
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|hexc
index|[
name|c
operator|&
literal|15
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|decode (final String e)
specifier|public
specifier|static
name|String
name|decode
parameter_list|(
specifier|final
name|String
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|e
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
return|;
block|}
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|e
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|int
name|bPtr
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
specifier|final
name|char
name|c
init|=
name|e
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
operator|&&
name|i
operator|+
literal|2
operator|<
name|e
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|int
name|v
init|=
operator|(
name|hexb
index|[
name|e
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
index|]
operator|<<
literal|4
operator|)
operator||
name|hexb
index|[
name|e
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|v
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|3
argument_list|)
argument_list|)
throw|;
block|}
name|b
index|[
name|bPtr
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|v
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'+'
condition|)
block|{
name|b
index|[
name|bPtr
operator|++
index|]
operator|=
literal|' '
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|b
index|[
name|bPtr
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|c
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad encoding: "
operator|+
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|bPtr
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No UTF-8 support"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

