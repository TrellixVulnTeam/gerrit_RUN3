begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.reviewdb.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|ObjectIds
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AnyObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/** A single revision of a {@link Change}. */
end_comment

begin_class
DECL|class|PatchSet
specifier|public
specifier|final
class|class
name|PatchSet
block|{
comment|/** Is the reference name a change reference? */
DECL|method|isChangeRef (String name)
specifier|public
specifier|static
name|boolean
name|isChangeRef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Id
operator|.
name|fromRef
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Is the reference name a change reference?    *    * @deprecated use isChangeRef instead.    */
annotation|@
name|Deprecated
DECL|method|isRef (String name)
specifier|public
specifier|static
name|boolean
name|isRef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|isChangeRef
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|joinGroups (List<String> groups)
specifier|public
specifier|static
name|String
name|joinGroups
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"groups may not be null"
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|groups
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|splitGroups (String joinedGroups)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitGroups
parameter_list|(
name|String
name|joinedGroups
parameter_list|)
block|{
if|if
condition|(
name|joinedGroups
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"groups may not be null"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|idx
init|=
name|joinedGroups
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|joinedGroups
operator|.
name|substring
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|groups
operator|.
name|add
argument_list|(
name|joinedGroups
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
DECL|method|id (Change.Id changeId, int id)
specifier|public
specifier|static
name|Id
name|id
parameter_list|(
name|Change
operator|.
name|Id
name|changeId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|AutoValue_PatchSet_Id
argument_list|(
name|changeId
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|AutoValue
DECL|class|Id
specifier|public
specifier|abstract
specifier|static
class|class
name|Id
block|{
comment|/** Parse a PatchSet.Id out of a string representation. */
DECL|method|parse (String str)
specifier|public
specifier|static
name|Id
name|parse
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|splitToList
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|checkIdFormat
argument_list|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|Integer
name|changeId
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|checkIdFormat
argument_list|(
name|changeId
operator|!=
literal|null
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|Integer
name|id
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|checkIdFormat
argument_list|(
name|id
operator|!=
literal|null
argument_list|,
name|str
argument_list|)
expr_stmt|;
return|return
name|PatchSet
operator|.
name|id
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|checkIdFormat (boolean test, String input)
specifier|private
specifier|static
name|void
name|checkIdFormat
parameter_list|(
name|boolean
name|test
parameter_list|,
name|String
name|input
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|test
argument_list|,
literal|"invalid patch set ID: %s"
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
comment|/** Parse a PatchSet.Id from a {@link PatchSet#getRefName()} result. */
DECL|method|fromRef (String ref)
specifier|public
specifier|static
name|Id
name|fromRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|int
name|cs
init|=
name|Change
operator|.
name|Id
operator|.
name|startIndex
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|ce
init|=
name|Change
operator|.
name|Id
operator|.
name|nextNonDigit
argument_list|(
name|ref
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|int
name|patchSetId
init|=
name|fromRef
argument_list|(
name|ref
argument_list|,
name|ce
argument_list|)
decl_stmt|;
if|if
condition|(
name|patchSetId
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|changeId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|cs
argument_list|,
name|ce
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|PatchSet
operator|.
name|id
argument_list|(
name|Change
operator|.
name|id
argument_list|(
name|changeId
argument_list|)
argument_list|,
name|patchSetId
argument_list|)
return|;
block|}
DECL|method|fromRef (String ref, int changeIdEnd)
specifier|static
name|int
name|fromRef
parameter_list|(
name|String
name|ref
parameter_list|,
name|int
name|changeIdEnd
parameter_list|)
block|{
comment|// Patch set ID.
name|int
name|ps
init|=
name|changeIdEnd
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|ps
operator|>=
name|ref
operator|.
name|length
argument_list|()
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|ps
argument_list|)
operator|==
literal|'0'
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|ps
init|;
name|i
operator|<
name|ref
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|<
literal|'0'
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|>
literal|'9'
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|ps
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toId (int number)
specifier|public
specifier|static
name|String
name|toId
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
name|number
operator|==
literal|0
condition|?
literal|"edit"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|toId
argument_list|(
name|id
argument_list|()
argument_list|)
return|;
block|}
DECL|method|changeId ()
specifier|public
specifier|abstract
name|Change
operator|.
name|Id
name|changeId
parameter_list|()
function_decl|;
DECL|method|id ()
specifier|abstract
name|int
name|id
parameter_list|()
function_decl|;
DECL|method|get ()
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|id
argument_list|()
return|;
block|}
DECL|method|toRefName ()
specifier|public
name|String
name|toRefName
parameter_list|()
block|{
return|return
name|changeId
argument_list|()
operator|.
name|refPrefixBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|id
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|changeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|','
operator|+
name|id
argument_list|()
return|;
block|}
block|}
DECL|field|id
specifier|protected
name|Id
name|id
decl_stmt|;
DECL|field|commitId
annotation|@
name|Nullable
specifier|protected
name|ObjectId
name|commitId
decl_stmt|;
DECL|field|uploader
specifier|protected
name|Account
operator|.
name|Id
name|uploader
decl_stmt|;
comment|/** When this patch set was first introduced onto the change. */
DECL|field|createdOn
specifier|protected
name|Timestamp
name|createdOn
decl_stmt|;
comment|/**    * Opaque group identifier, usually assigned during creation.    *    *<p>This field is actually a comma-separated list of values, as in rare cases involving merge    * commits a patch set may belong to multiple groups.    *    *<p>Changes on the same branch having patch sets with intersecting groups are considered    * related, as in the "Related Changes" tab.    */
DECL|field|groups
annotation|@
name|Nullable
specifier|protected
name|String
name|groups
decl_stmt|;
comment|// DELETED id = 7 (pushCertficate)
comment|/** Certificate sent with a push that created this patch set. */
DECL|field|pushCertificate
annotation|@
name|Nullable
specifier|protected
name|String
name|pushCertificate
decl_stmt|;
comment|/**    * Optional user-supplied description for this patch set.    *    *<p>When this field is null, the description was never set on the patch set. When this field is    * an empty string, the description was set and later cleared.    */
DECL|field|description
annotation|@
name|Nullable
specifier|protected
name|String
name|description
decl_stmt|;
DECL|method|PatchSet ()
specifier|protected
name|PatchSet
parameter_list|()
block|{}
DECL|method|PatchSet (PatchSet.Id k)
specifier|public
name|PatchSet
parameter_list|(
name|PatchSet
operator|.
name|Id
name|k
parameter_list|)
block|{
name|id
operator|=
name|k
expr_stmt|;
block|}
DECL|method|PatchSet (PatchSet src)
specifier|public
name|PatchSet
parameter_list|(
name|PatchSet
name|src
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|src
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|commitId
operator|=
name|src
operator|.
name|commitId
expr_stmt|;
name|this
operator|.
name|uploader
operator|=
name|src
operator|.
name|uploader
expr_stmt|;
name|this
operator|.
name|createdOn
operator|=
name|src
operator|.
name|createdOn
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|src
operator|.
name|groups
expr_stmt|;
name|this
operator|.
name|pushCertificate
operator|=
name|src
operator|.
name|pushCertificate
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|src
operator|.
name|description
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|PatchSet
operator|.
name|Id
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getPatchSetId ()
specifier|public
name|int
name|getPatchSetId
parameter_list|()
block|{
return|return
name|id
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Get the ID of the commit associated with this patch set.    *    *<p>The commit associated with a patch set is also known as the<strong>revision</strong>.    *    * @return the commit ID.    */
DECL|method|getCommitId ()
specifier|public
name|ObjectId
name|getCommitId
parameter_list|()
block|{
return|return
name|commitId
return|;
block|}
DECL|method|setCommitId (@ullable AnyObjectId commitId)
specifier|public
name|void
name|setCommitId
parameter_list|(
annotation|@
name|Nullable
name|AnyObjectId
name|commitId
parameter_list|)
block|{
name|this
operator|.
name|commitId
operator|=
name|ObjectIds
operator|.
name|copyOrNull
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
block|}
DECL|method|getUploader ()
specifier|public
name|Account
operator|.
name|Id
name|getUploader
parameter_list|()
block|{
return|return
name|uploader
return|;
block|}
DECL|method|setUploader (Account.Id who)
specifier|public
name|void
name|setUploader
parameter_list|(
name|Account
operator|.
name|Id
name|who
parameter_list|)
block|{
name|uploader
operator|=
name|who
expr_stmt|;
block|}
DECL|method|getCreatedOn ()
specifier|public
name|Timestamp
name|getCreatedOn
parameter_list|()
block|{
return|return
name|createdOn
return|;
block|}
DECL|method|setCreatedOn (Timestamp ts)
specifier|public
name|void
name|setCreatedOn
parameter_list|(
name|Timestamp
name|ts
parameter_list|)
block|{
name|createdOn
operator|=
name|ts
expr_stmt|;
block|}
DECL|method|getGroups ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|splitGroups
argument_list|(
name|groups
argument_list|)
return|;
block|}
DECL|method|setGroups (List<String> groups)
specifier|public
name|void
name|setGroups
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
name|groups
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|groups
operator|=
name|joinGroups
argument_list|(
name|groups
argument_list|)
expr_stmt|;
block|}
DECL|method|getRefName ()
specifier|public
name|String
name|getRefName
parameter_list|()
block|{
return|return
name|id
operator|.
name|toRefName
argument_list|()
return|;
block|}
DECL|method|getPushCertificate ()
specifier|public
name|String
name|getPushCertificate
parameter_list|()
block|{
return|return
name|pushCertificate
return|;
block|}
DECL|method|setPushCertificate (String cert)
specifier|public
name|void
name|setPushCertificate
parameter_list|(
name|String
name|cert
parameter_list|)
block|{
name|pushCertificate
operator|=
name|cert
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|PatchSet
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PatchSet
name|p
init|=
operator|(
name|PatchSet
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|p
operator|.
name|id
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|commitId
argument_list|,
name|p
operator|.
name|commitId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|uploader
argument_list|,
name|p
operator|.
name|uploader
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|createdOn
argument_list|,
name|p
operator|.
name|createdOn
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|groups
argument_list|,
name|p
operator|.
name|groups
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|pushCertificate
argument_list|,
name|p
operator|.
name|pushCertificate
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|description
argument_list|,
name|p
operator|.
name|description
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|id
argument_list|,
name|commitId
argument_list|,
name|uploader
argument_list|,
name|createdOn
argument_list|,
name|groups
argument_list|,
name|pushCertificate
argument_list|,
name|description
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[PatchSet "
operator|+
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

