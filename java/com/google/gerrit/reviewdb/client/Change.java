begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.reviewdb.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
operator|.
name|REFS_CHANGES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ChangeStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|IntKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|StringKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A change proposed to be merged into a {@link Branch}.  *  *<p>The data graph rooted below a Change can be quite complex:  *  *<pre>  *   {@link Change}  *     |  *     +- {@link ChangeMessage}:&quot;cover letter&quot; or general comment.  *     |  *     +- {@link PatchSet}: a single variant of this change.  *          |  *          +- {@link PatchSetApproval}: a +/- vote on the change's current state.  *          |  *          +- {@link PatchLineComment}: comment about a specific line  *</pre>  *  *<p>  *  *<h5>PatchSets</h5>  *  *<p>Every change has at least one PatchSet. A change starts out with one PatchSet, the initial  * proposal put forth by the change owner. This {@link Account} is usually also listed as the author  * and committer in the PatchSetInfo.  *  *<p>Each PatchSet contains zero or more Patch records, detailing the file paths impacted by the  * change (otherwise known as, the file paths the author added/deleted/modified). Sometimes a merge  * commit can contain zero patches, if the merge has no conflicts, or has no impact other than to  * cut off a line of development.  *  *<p>Each PatchLineComment is a draft or a published comment about a single line of the associated  * file. These are the inline comment entities created by users as they perform a review.  *  *<p>When additional PatchSets appear under a change, these PatchSets reference<i>replacement</i>  * commits; alternative commits that could be made to the project instead of the original commit  * referenced by the first PatchSet.  *  *<p>A change has at most one current PatchSet. The current PatchSet is updated when a new  * replacement PatchSet is uploaded. When a change is submitted, the current patch set is what is  * merged into the destination branch.  *  *<p>  *  *<h5>ChangeMessage</h5>  *  *<p>The ChangeMessage entity is a general free-form comment about the whole change, rather than  * PatchLineComment's file and line specific context. The ChangeMessage appears at the start of any  * email generated by Gerrit, and is shown on the change overview page, rather than in a  * file-specific context. Users often use this entity to describe general remarks about the overall  * concept proposed by the change.  *  *<p>  *  *<h5>PatchSetApproval</h5>  *  *<p>PatchSetApproval entities exist to fill in the<i>cells</i> of the approvals table in the web  * UI. That is, a single PatchSetApproval record's key is the tuple {@code  * (PatchSet,Account,ApprovalCategory)}. Each PatchSetApproval carries with it a small score value,  * typically within the range -2..+2.  *  *<p>If an Account has created only PatchSetApprovals with a score value of 0, the Change shows in  * their dashboard, and they are said to be CC'd (carbon copied) on the Change, but are not a direct  * reviewer. This often happens when an account was specified at upload time with the {@code --cc}  * command line flag, or have published comments, but left the approval scores at 0 ("No Score").  *  *<p>If an Account has one or more PatchSetApprovals with a score != 0, the Change shows in their  * dashboard, and they are said to be an active reviewer. Such individuals are highlighted when  * notice of a replacement patch set is sent, or when notice of the change submission occurs.  */
end_comment

begin_class
DECL|class|Change
specifier|public
specifier|final
class|class
name|Change
block|{
DECL|class|Id
specifier|public
specifier|static
class|class
name|Id
extends|extends
name|IntKey
argument_list|<
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|id
specifier|public
name|int
name|id
decl_stmt|;
DECL|method|Id ()
specifier|protected
name|Id
parameter_list|()
block|{}
DECL|method|Id (int id)
specifier|public
name|Id
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|set (int newValue)
specifier|protected
name|void
name|set
parameter_list|(
name|int
name|newValue
parameter_list|)
block|{
name|id
operator|=
name|newValue
expr_stmt|;
block|}
DECL|method|toRefPrefix ()
specifier|public
name|String
name|toRefPrefix
parameter_list|()
block|{
return|return
name|refPrefixBuilder
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|refPrefixBuilder ()
name|StringBuilder
name|refPrefixBuilder
parameter_list|()
block|{
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
operator|.
name|append
argument_list|(
name|REFS_CHANGES
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|id
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|m
operator|<
literal|10
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|.
name|append
argument_list|(
name|m
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
return|;
block|}
comment|/** Parse a Change.Id out of a string representation. */
DECL|method|parse (String str)
specifier|public
specifier|static
name|Id
name|parse
parameter_list|(
name|String
name|str
parameter_list|)
block|{
specifier|final
name|Id
name|r
init|=
operator|new
name|Id
argument_list|()
decl_stmt|;
name|r
operator|.
name|fromString
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|fromRef (String ref)
specifier|public
specifier|static
name|Id
name|fromRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
if|if
condition|(
name|RefNames
operator|.
name|isRefsEdit
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
name|fromEditRefPart
argument_list|(
name|ref
argument_list|)
return|;
block|}
name|int
name|cs
init|=
name|startIndex
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|ce
init|=
name|nextNonDigit
argument_list|(
name|ref
argument_list|,
name|cs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|substring
argument_list|(
name|ce
argument_list|)
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|META_SUFFIX
argument_list|)
operator|||
name|ref
operator|.
name|substring
argument_list|(
name|ce
argument_list|)
operator|.
name|equals
argument_list|(
name|RefNames
operator|.
name|ROBOT_COMMENTS_SUFFIX
argument_list|)
operator|||
name|PatchSet
operator|.
name|Id
operator|.
name|fromRef
argument_list|(
name|ref
argument_list|,
name|ce
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|cs
argument_list|,
name|ce
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|fromAllUsersRef (String ref)
specifier|public
specifier|static
name|Id
name|fromAllUsersRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS_STARRED_CHANGES
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|RefNames
operator|.
name|REFS_STARRED_CHANGES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|.
name|startsWith
argument_list|(
name|RefNames
operator|.
name|REFS_DRAFT_COMMENTS
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|RefNames
operator|.
name|REFS_DRAFT_COMMENTS
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
name|int
name|cs
init|=
name|startIndex
argument_list|(
name|ref
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|ce
init|=
name|nextNonDigit
argument_list|(
name|ref
argument_list|,
name|cs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ce
operator|<
name|ref
operator|.
name|length
argument_list|()
operator|&&
name|ref
operator|.
name|charAt
argument_list|(
name|ce
argument_list|)
operator|==
literal|'/'
operator|&&
name|isNumeric
argument_list|(
name|ref
argument_list|,
name|ce
operator|+
literal|1
argument_list|)
condition|)
block|{
return|return
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|ref
operator|.
name|substring
argument_list|(
name|cs
argument_list|,
name|ce
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|isNumeric (String s, int off)
specifier|private
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|off
operator|>=
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|fromEditRefPart (String ref)
specifier|public
specifier|static
name|Id
name|fromEditRefPart
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|int
name|startChangeId
init|=
name|ref
operator|.
name|indexOf
argument_list|(
name|RefNames
operator|.
name|EDIT_PREFIX
argument_list|)
operator|+
name|RefNames
operator|.
name|EDIT_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endChangeId
init|=
name|nextNonDigit
argument_list|(
name|ref
argument_list|,
name|startChangeId
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|ref
operator|.
name|substring
argument_list|(
name|startChangeId
argument_list|,
name|endChangeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|fromRefPart (String ref)
specifier|public
specifier|static
name|Id
name|fromRefPart
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|Integer
name|id
init|=
name|RefNames
operator|.
name|parseShardedRefPart
argument_list|(
name|ref
argument_list|)
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|id
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|startIndex (String ref)
specifier|static
name|int
name|startIndex
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
name|startIndex
argument_list|(
name|ref
argument_list|,
name|REFS_CHANGES
argument_list|)
return|;
block|}
DECL|method|startIndex (String ref, String expectedPrefix)
specifier|static
name|int
name|startIndex
parameter_list|(
name|String
name|ref
parameter_list|,
name|String
name|expectedPrefix
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|expectedPrefix
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Last 2 digits.
name|int
name|ls
init|=
name|expectedPrefix
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|le
init|=
name|nextNonDigit
argument_list|(
name|ref
argument_list|,
name|ls
argument_list|)
decl_stmt|;
if|if
condition|(
name|le
operator|-
name|ls
operator|!=
literal|2
operator|||
name|le
operator|>=
name|ref
operator|.
name|length
argument_list|()
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|le
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Change ID.
name|int
name|cs
init|=
name|le
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|cs
operator|>=
name|ref
operator|.
name|length
argument_list|()
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|cs
argument_list|)
operator|==
literal|'0'
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|ce
init|=
name|nextNonDigit
argument_list|(
name|ref
argument_list|,
name|cs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ce
operator|>=
name|ref
operator|.
name|length
argument_list|()
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|ce
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
switch|switch
condition|(
name|ce
operator|-
name|cs
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|-
literal|1
return|;
case|case
literal|1
case|:
if|if
condition|(
name|ref
operator|.
name|charAt
argument_list|(
name|ls
argument_list|)
operator|!=
literal|'0'
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|ls
operator|+
literal|1
argument_list|)
operator|!=
name|ref
operator|.
name|charAt
argument_list|(
name|cs
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
break|break;
default|default:
if|if
condition|(
name|ref
operator|.
name|charAt
argument_list|(
name|ls
argument_list|)
operator|!=
name|ref
operator|.
name|charAt
argument_list|(
name|ce
operator|-
literal|2
argument_list|)
operator|||
name|ref
operator|.
name|charAt
argument_list|(
name|ls
operator|+
literal|1
argument_list|)
operator|!=
name|ref
operator|.
name|charAt
argument_list|(
name|ce
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
break|break;
block|}
return|return
name|cs
return|;
block|}
DECL|method|nextNonDigit (String s, int i)
specifier|static
name|int
name|nextNonDigit
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{
while|while
condition|(
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|>=
literal|'0'
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
block|}
comment|/**    * Globally unique identification of this change. This generally takes the form of a string    * "Ixxxxxx...", and is stored in the Change-Id footer of a commit.    */
DECL|class|Key
specifier|public
specifier|static
class|class
name|Key
extends|extends
name|StringKey
argument_list|<
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|id
specifier|protected
name|String
name|id
decl_stmt|;
DECL|method|Key ()
specifier|protected
name|Key
parameter_list|()
block|{}
DECL|method|Key (String id)
specifier|public
name|Key
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|String
name|get
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|set (String newValue)
specifier|protected
name|void
name|set
parameter_list|(
name|String
name|newValue
parameter_list|)
block|{
name|id
operator|=
name|newValue
expr_stmt|;
block|}
comment|/** Construct a key that is after all keys prefixed by this key. */
DECL|method|max ()
specifier|public
name|Key
name|max
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|revEnd
init|=
operator|new
name|StringBuilder
argument_list|(
name|get
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|revEnd
operator|.
name|append
argument_list|(
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|revEnd
operator|.
name|append
argument_list|(
literal|'\u9fa5'
argument_list|)
expr_stmt|;
return|return
operator|new
name|Key
argument_list|(
name|revEnd
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** Obtain a shorter version of this key string, using a leading prefix. */
DECL|method|abbreviate ()
specifier|public
name|String
name|abbreviate
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|get
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|,
literal|9
argument_list|)
argument_list|)
return|;
block|}
comment|/** Parse a Change.Key out of a string representation. */
DECL|method|parse (String str)
specifier|public
specifier|static
name|Key
name|parse
parameter_list|(
name|String
name|str
parameter_list|)
block|{
specifier|final
name|Key
name|r
init|=
operator|new
name|Key
argument_list|()
decl_stmt|;
name|r
operator|.
name|fromString
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
comment|/** Minimum database status constant for an open change. */
DECL|field|MIN_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|MIN_OPEN
init|=
literal|'a'
decl_stmt|;
comment|/** Database constant for {@link Status#NEW}. */
DECL|field|STATUS_NEW
specifier|public
specifier|static
specifier|final
name|char
name|STATUS_NEW
init|=
literal|'n'
decl_stmt|;
comment|/** Maximum database status constant for an open change. */
DECL|field|MAX_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|MAX_OPEN
init|=
literal|'z'
decl_stmt|;
comment|/** Database constant for {@link Status#MERGED}. */
DECL|field|STATUS_MERGED
specifier|public
specifier|static
specifier|final
name|char
name|STATUS_MERGED
init|=
literal|'M'
decl_stmt|;
comment|/** ID number of the first patch set in a change. */
DECL|field|INITIAL_PATCH_SET_ID
specifier|public
specifier|static
specifier|final
name|int
name|INITIAL_PATCH_SET_ID
init|=
literal|1
decl_stmt|;
comment|/** Change-Id pattern. */
DECL|field|CHANGE_ID_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|CHANGE_ID_PATTERN
init|=
literal|"^[iI][0-9a-f]{4,}.*$"
decl_stmt|;
comment|/**    * Current state within the basic workflow of the change.    *    *<p>Within the database, lower case codes ('a'..'z') indicate a change that is still open, and    * that can be modified/refined further, while upper case codes ('A'..'Z') indicate a change that    * is closed and cannot be further modified.    */
DECL|enum|Status
specifier|public
enum|enum
name|Status
block|{
comment|/**      * Change is open and pending review, or review is in progress.      *      *<p>This is the default state assigned to a change when it is first created in the database. A      * change stays in the NEW state throughout its review cycle, until the change is submitted or      * abandoned.      *      *<p>Changes in the NEW state can be moved to:      *      *<ul>      *<li>{@link #MERGED} - when the Submit Patch Set action is used;      *<li>{@link #ABANDONED} - when the Abandon action is used.      *</ul>      */
DECL|enumConstant|NEW
name|NEW
parameter_list|(
name|STATUS_NEW
parameter_list|,
name|ChangeStatus
operator|.
name|NEW
parameter_list|)
operator|,
comment|/**      * Change is closed, and submitted to its destination branch.      *      *<p>Once a change has been merged, it cannot be further modified by adding a replacement patch      */
DECL|enumConstant|MERGED
constructor|MERGED(STATUS_MERGED
operator|,
constructor|ChangeStatus.MERGED
block|)
enum|,
comment|/**      * Change is closed, but was not submitted to its destination branch.      *      *<p>Once a change has been abandoned, it cannot be further modified by adding a replacement      * patch set, and it cannot be merged. Draft comments however may be published, permitting      * reviewers to send constructive feedback.      */
DECL|enumConstant|ABANDONED
name|ABANDONED
argument_list|(
literal|'A'
argument_list|,
name|ChangeStatus
operator|.
name|ABANDONED
argument_list|)
enum|;
static|static
block|{
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|Status
operator|.
name|values
argument_list|()
operator|.
name|length
operator|!=
name|ChangeStatus
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|Status
name|s
range|:
name|Status
operator|.
name|values
argument_list|()
control|)
block|{
name|ok
operator|&=
name|s
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|changeStatus
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Mismatched status mapping: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|Status
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|" != "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|ChangeStatus
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|field|code
specifier|private
specifier|final
name|char
name|code
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|boolean
name|closed
decl_stmt|;
DECL|field|changeStatus
specifier|private
specifier|final
name|ChangeStatus
name|changeStatus
decl_stmt|;
DECL|method|Status (char c, ChangeStatus cs)
name|Status
parameter_list|(
name|char
name|c
parameter_list|,
name|ChangeStatus
name|cs
parameter_list|)
block|{
name|code
operator|=
name|c
expr_stmt|;
name|closed
operator|=
operator|!
operator|(
name|MIN_OPEN
operator|<=
name|c
operator|&&
name|c
operator|<=
name|MAX_OPEN
operator|)
expr_stmt|;
name|changeStatus
operator|=
name|cs
expr_stmt|;
block|}
DECL|method|getCode ()
specifier|public
name|char
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
DECL|method|isOpen ()
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
operator|!
name|closed
return|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
DECL|method|asChangeStatus ()
specifier|public
name|ChangeStatus
name|asChangeStatus
parameter_list|()
block|{
return|return
name|changeStatus
return|;
block|}
DECL|method|forCode (char c)
specifier|public
specifier|static
name|Status
name|forCode
parameter_list|(
name|char
name|c
parameter_list|)
block|{
for|for
control|(
name|Status
name|s
range|:
name|Status
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|code
operator|==
name|c
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
comment|// TODO(davido): Remove in 3.0, after all sites upgraded to version,
comment|// where DRAFT status was removed. This code path is still needed,
comment|// when changes are deserialized from the secondary index, during
comment|// the online migration to the new schema version wasn't completed.
if|if
condition|(
name|c
operator|==
literal|'d'
condition|)
block|{
return|return
name|Status
operator|.
name|NEW
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|forChangeStatus (ChangeStatus cs)
specifier|public
specifier|static
name|Status
name|forChangeStatus
parameter_list|(
name|ChangeStatus
name|cs
parameter_list|)
block|{
for|for
control|(
name|Status
name|s
range|:
name|Status
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|changeStatus
operator|==
name|cs
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

begin_comment
comment|/** Locally assigned unique identifier of the change */
end_comment

begin_decl_stmt
DECL|field|changeId
specifier|protected
name|Id
name|changeId
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Globally assigned unique identifier of the change */
end_comment

begin_decl_stmt
DECL|field|changeKey
specifier|protected
name|Key
name|changeKey
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** optimistic locking */
end_comment

begin_decl_stmt
DECL|field|rowVersion
specifier|protected
name|int
name|rowVersion
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** When this change was first introduced into the database. */
end_comment

begin_decl_stmt
DECL|field|createdOn
specifier|protected
name|Timestamp
name|createdOn
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * When was a meaningful modification last made to this record's data    *    *<p>Note, this update timestamp includes its children.    */
end_comment

begin_decl_stmt
DECL|field|lastUpdatedOn
specifier|protected
name|Timestamp
name|lastUpdatedOn
decl_stmt|;
end_decl_stmt

begin_comment
comment|// DELETED: id = 6 (sortkey)
end_comment

begin_decl_stmt
DECL|field|owner
specifier|protected
name|Account
operator|.
name|Id
name|owner
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** The branch (and project) this change merges into. */
end_comment

begin_decl_stmt
DECL|field|dest
specifier|protected
name|Branch
operator|.
name|NameKey
name|dest
decl_stmt|;
end_decl_stmt

begin_comment
comment|// DELETED: id = 9 (open)
end_comment

begin_comment
comment|/** Current state code; see {@link Status}. */
end_comment

begin_decl_stmt
DECL|field|status
specifier|protected
name|char
name|status
decl_stmt|;
end_decl_stmt

begin_comment
comment|// DELETED: id = 11 (nbrPatchSets)
end_comment

begin_comment
comment|/** The current patch set. */
end_comment

begin_decl_stmt
DECL|field|currentPatchSetId
specifier|protected
name|int
name|currentPatchSetId
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Subject from the current patch set. */
end_comment

begin_decl_stmt
DECL|field|subject
specifier|protected
name|String
name|subject
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Topic name assigned by the user, if any. */
end_comment

begin_decl_stmt
DECL|field|topic
annotation|@
name|Nullable
specifier|protected
name|String
name|topic
decl_stmt|;
end_decl_stmt

begin_comment
comment|// DELETED: id = 15 (lastSha1MergeTested)
end_comment

begin_comment
comment|// DELETED: id = 16 (mergeable)
end_comment

begin_comment
comment|/**    * First line of first patch set's commit message.    *    *<p>Unlike {@link #subject}, this string does not change if future patch sets change the first    * line.    */
end_comment

begin_decl_stmt
DECL|field|originalSubject
annotation|@
name|Nullable
specifier|protected
name|String
name|originalSubject
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Unique id for the changes submitted together assigned during merging. Only set if the status is    * MERGED.    */
end_comment

begin_decl_stmt
DECL|field|submissionId
annotation|@
name|Nullable
specifier|protected
name|String
name|submissionId
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Allows assigning a change to a user. */
end_comment

begin_decl_stmt
DECL|field|assignee
annotation|@
name|Nullable
specifier|protected
name|Account
operator|.
name|Id
name|assignee
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Whether the change is private. */
end_comment

begin_decl_stmt
DECL|field|isPrivate
specifier|protected
name|boolean
name|isPrivate
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Whether the change is work in progress. */
end_comment

begin_decl_stmt
DECL|field|workInProgress
specifier|protected
name|boolean
name|workInProgress
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Whether the change has started review. */
end_comment

begin_decl_stmt
DECL|field|reviewStarted
specifier|protected
name|boolean
name|reviewStarted
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** References a change that this change reverts. */
end_comment

begin_decl_stmt
DECL|field|revertOf
annotation|@
name|Nullable
specifier|protected
name|Id
name|revertOf
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|Change ()
specifier|protected
name|Change
parameter_list|()
block|{}
end_constructor

begin_constructor
DECL|method|Change ( Change.Key newKey, Change.Id newId, Account.Id ownedBy, Branch.NameKey forBranch, Timestamp ts)
specifier|public
name|Change
parameter_list|(
name|Change
operator|.
name|Key
name|newKey
parameter_list|,
name|Change
operator|.
name|Id
name|newId
parameter_list|,
name|Account
operator|.
name|Id
name|ownedBy
parameter_list|,
name|Branch
operator|.
name|NameKey
name|forBranch
parameter_list|,
name|Timestamp
name|ts
parameter_list|)
block|{
name|changeKey
operator|=
name|newKey
expr_stmt|;
name|changeId
operator|=
name|newId
expr_stmt|;
name|createdOn
operator|=
name|ts
expr_stmt|;
name|lastUpdatedOn
operator|=
name|createdOn
expr_stmt|;
name|owner
operator|=
name|ownedBy
expr_stmt|;
name|dest
operator|=
name|forBranch
expr_stmt|;
name|setStatus
argument_list|(
name|Status
operator|.
name|NEW
argument_list|)
expr_stmt|;
block|}
end_constructor

begin_constructor
DECL|method|Change (Change other)
specifier|public
name|Change
parameter_list|(
name|Change
name|other
parameter_list|)
block|{
name|assignee
operator|=
name|other
operator|.
name|assignee
expr_stmt|;
name|changeId
operator|=
name|other
operator|.
name|changeId
expr_stmt|;
name|changeKey
operator|=
name|other
operator|.
name|changeKey
expr_stmt|;
name|rowVersion
operator|=
name|other
operator|.
name|rowVersion
expr_stmt|;
name|createdOn
operator|=
name|other
operator|.
name|createdOn
expr_stmt|;
name|lastUpdatedOn
operator|=
name|other
operator|.
name|lastUpdatedOn
expr_stmt|;
name|owner
operator|=
name|other
operator|.
name|owner
expr_stmt|;
name|dest
operator|=
name|other
operator|.
name|dest
expr_stmt|;
name|status
operator|=
name|other
operator|.
name|status
expr_stmt|;
name|currentPatchSetId
operator|=
name|other
operator|.
name|currentPatchSetId
expr_stmt|;
name|subject
operator|=
name|other
operator|.
name|subject
expr_stmt|;
name|originalSubject
operator|=
name|other
operator|.
name|originalSubject
expr_stmt|;
name|submissionId
operator|=
name|other
operator|.
name|submissionId
expr_stmt|;
name|topic
operator|=
name|other
operator|.
name|topic
expr_stmt|;
name|isPrivate
operator|=
name|other
operator|.
name|isPrivate
expr_stmt|;
name|workInProgress
operator|=
name|other
operator|.
name|workInProgress
expr_stmt|;
name|reviewStarted
operator|=
name|other
operator|.
name|reviewStarted
expr_stmt|;
name|revertOf
operator|=
name|other
operator|.
name|revertOf
expr_stmt|;
block|}
end_constructor

begin_comment
comment|/** Legacy 32 bit integer identity for a change. */
end_comment

begin_function
DECL|method|getId ()
specifier|public
name|Change
operator|.
name|Id
name|getId
parameter_list|()
block|{
return|return
name|changeId
return|;
block|}
end_function

begin_comment
comment|/** Legacy 32 bit integer identity for a change. */
end_comment

begin_function
DECL|method|getChangeId ()
specifier|public
name|int
name|getChangeId
parameter_list|()
block|{
return|return
name|changeId
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/** The Change-Id tag out of the initial commit, or a natural key. */
end_comment

begin_function
DECL|method|getKey ()
specifier|public
name|Change
operator|.
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|changeKey
return|;
block|}
end_function

begin_function
DECL|method|setKey (Change.Key k)
specifier|public
name|void
name|setKey
parameter_list|(
name|Change
operator|.
name|Key
name|k
parameter_list|)
block|{
name|changeKey
operator|=
name|k
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getAssignee ()
specifier|public
name|Account
operator|.
name|Id
name|getAssignee
parameter_list|()
block|{
return|return
name|assignee
return|;
block|}
end_function

begin_function
DECL|method|setAssignee (Account.Id a)
specifier|public
name|void
name|setAssignee
parameter_list|(
name|Account
operator|.
name|Id
name|a
parameter_list|)
block|{
name|assignee
operator|=
name|a
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getCreatedOn ()
specifier|public
name|Timestamp
name|getCreatedOn
parameter_list|()
block|{
return|return
name|createdOn
return|;
block|}
end_function

begin_function
DECL|method|setCreatedOn (Timestamp ts)
specifier|public
name|void
name|setCreatedOn
parameter_list|(
name|Timestamp
name|ts
parameter_list|)
block|{
name|createdOn
operator|=
name|ts
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getLastUpdatedOn ()
specifier|public
name|Timestamp
name|getLastUpdatedOn
parameter_list|()
block|{
return|return
name|lastUpdatedOn
return|;
block|}
end_function

begin_function
DECL|method|setLastUpdatedOn (Timestamp now)
specifier|public
name|void
name|setLastUpdatedOn
parameter_list|(
name|Timestamp
name|now
parameter_list|)
block|{
name|lastUpdatedOn
operator|=
name|now
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getRowVersion ()
specifier|public
name|int
name|getRowVersion
parameter_list|()
block|{
return|return
name|rowVersion
return|;
block|}
end_function

begin_function
DECL|method|getOwner ()
specifier|public
name|Account
operator|.
name|Id
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
end_function

begin_function
DECL|method|setOwner (Account.Id owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Account
operator|.
name|Id
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getDest ()
specifier|public
name|Branch
operator|.
name|NameKey
name|getDest
parameter_list|()
block|{
return|return
name|dest
return|;
block|}
end_function

begin_function
DECL|method|setDest (Branch.NameKey dest)
specifier|public
name|void
name|setDest
parameter_list|(
name|Branch
operator|.
name|NameKey
name|dest
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getProject ()
specifier|public
name|Project
operator|.
name|NameKey
name|getProject
parameter_list|()
block|{
return|return
name|dest
operator|.
name|getParentKey
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getSubject ()
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|subject
return|;
block|}
end_function

begin_function
DECL|method|getOriginalSubject ()
specifier|public
name|String
name|getOriginalSubject
parameter_list|()
block|{
return|return
name|originalSubject
operator|!=
literal|null
condition|?
name|originalSubject
else|:
name|subject
return|;
block|}
end_function

begin_function
DECL|method|getOriginalSubjectOrNull ()
specifier|public
name|String
name|getOriginalSubjectOrNull
parameter_list|()
block|{
return|return
name|originalSubject
return|;
block|}
end_function

begin_comment
comment|/** Get the id of the most current {@link PatchSet} in this change. */
end_comment

begin_function
DECL|method|currentPatchSetId ()
specifier|public
name|PatchSet
operator|.
name|Id
name|currentPatchSetId
parameter_list|()
block|{
if|if
condition|(
name|currentPatchSetId
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|currentPatchSetId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|setCurrentPatchSet (PatchSetInfo ps)
specifier|public
name|void
name|setCurrentPatchSet
parameter_list|(
name|PatchSetInfo
name|ps
parameter_list|)
block|{
if|if
condition|(
name|originalSubject
operator|==
literal|null
operator|&&
name|subject
operator|!=
literal|null
condition|)
block|{
comment|// Change was created before schema upgrade. Use the last subject
comment|// associated with this change, as the most recent discussion will
comment|// be under that thread in an email client such as GMail.
name|originalSubject
operator|=
name|subject
expr_stmt|;
block|}
name|currentPatchSetId
operator|=
name|ps
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|subject
operator|=
name|ps
operator|.
name|getSubject
argument_list|()
expr_stmt|;
if|if
condition|(
name|originalSubject
operator|==
literal|null
condition|)
block|{
comment|// Newly created changes remember the first commit's subject.
name|originalSubject
operator|=
name|subject
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setCurrentPatchSet (PatchSet.Id psId, String subject, String originalSubject)
specifier|public
name|void
name|setCurrentPatchSet
parameter_list|(
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|originalSubject
parameter_list|)
block|{
if|if
condition|(
operator|!
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|changeId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"patch set ID "
operator|+
name|psId
operator|+
literal|" is not for change "
operator|+
name|changeId
argument_list|)
throw|;
block|}
name|currentPatchSetId
operator|=
name|psId
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|originalSubject
operator|=
name|originalSubject
expr_stmt|;
block|}
end_function

begin_function
DECL|method|clearCurrentPatchSet ()
specifier|public
name|void
name|clearCurrentPatchSet
parameter_list|()
block|{
name|currentPatchSetId
operator|=
literal|0
expr_stmt|;
name|subject
operator|=
literal|null
expr_stmt|;
name|originalSubject
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getSubmissionId ()
specifier|public
name|String
name|getSubmissionId
parameter_list|()
block|{
return|return
name|submissionId
return|;
block|}
end_function

begin_function
DECL|method|setSubmissionId (String id)
specifier|public
name|void
name|setSubmissionId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|submissionId
operator|=
name|id
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getStatus ()
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|Status
operator|.
name|forCode
argument_list|(
name|status
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|setStatus (Status newStatus)
specifier|public
name|void
name|setStatus
parameter_list|(
name|Status
name|newStatus
parameter_list|)
block|{
name|status
operator|=
name|newStatus
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getTopic ()
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
end_function

begin_function
DECL|method|setTopic (String topic)
specifier|public
name|void
name|setTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isPrivate ()
specifier|public
name|boolean
name|isPrivate
parameter_list|()
block|{
return|return
name|isPrivate
return|;
block|}
end_function

begin_function
DECL|method|setPrivate (boolean isPrivate)
specifier|public
name|void
name|setPrivate
parameter_list|(
name|boolean
name|isPrivate
parameter_list|)
block|{
name|this
operator|.
name|isPrivate
operator|=
name|isPrivate
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isWorkInProgress ()
specifier|public
name|boolean
name|isWorkInProgress
parameter_list|()
block|{
return|return
name|workInProgress
return|;
block|}
end_function

begin_function
DECL|method|setWorkInProgress (boolean workInProgress)
specifier|public
name|void
name|setWorkInProgress
parameter_list|(
name|boolean
name|workInProgress
parameter_list|)
block|{
name|this
operator|.
name|workInProgress
operator|=
name|workInProgress
expr_stmt|;
block|}
end_function

begin_function
DECL|method|hasReviewStarted ()
specifier|public
name|boolean
name|hasReviewStarted
parameter_list|()
block|{
return|return
name|reviewStarted
return|;
block|}
end_function

begin_function
DECL|method|setReviewStarted (boolean reviewStarted)
specifier|public
name|void
name|setReviewStarted
parameter_list|(
name|boolean
name|reviewStarted
parameter_list|)
block|{
name|this
operator|.
name|reviewStarted
operator|=
name|reviewStarted
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setRevertOf (Id revertOf)
specifier|public
name|void
name|setRevertOf
parameter_list|(
name|Id
name|revertOf
parameter_list|)
block|{
name|this
operator|.
name|revertOf
operator|=
name|revertOf
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getRevertOf ()
specifier|public
name|Id
name|getRevertOf
parameter_list|()
block|{
return|return
name|this
operator|.
name|revertOf
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
name|changeId
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|changeKey
argument_list|)
operator|.
name|append
argument_list|(
literal|"), "
argument_list|)
operator|.
name|append
argument_list|(
literal|"dest="
argument_list|)
operator|.
name|append
argument_list|(
name|dest
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"status="
argument_list|)
operator|.
name|append
argument_list|(
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

