begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.metrics
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Describes a bucketing field used by a metric.  *  * @param<T> type of field  */
end_comment

begin_class
DECL|class|Field
specifier|public
class|class
name|Field
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * Break down metrics by boolean true/false.    *    * @param name field name    * @return boolean field    */
DECL|method|ofBoolean (String name)
specifier|public
specifier|static
name|Field
argument_list|<
name|Boolean
argument_list|>
name|ofBoolean
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ofBoolean
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by boolean true/false.    *    * @param name field name    * @param description field description    * @return boolean field    */
DECL|method|ofBoolean (String name, String description)
specifier|public
specifier|static
name|Field
argument_list|<
name|Boolean
argument_list|>
name|ofBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
operator|new
name|Field
argument_list|<>
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by cases of an enum.    *    * @param enumType type of enum    * @param name field name    * @return enum field    */
DECL|method|ofEnum (Class<E> enumType, String name)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|Field
argument_list|<
name|E
argument_list|>
name|ofEnum
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|enumType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|ofEnum
argument_list|(
name|enumType
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by cases of an enum.    *    * @param enumType type of enum    * @param name field name    * @param description field description    * @return enum field    */
DECL|method|ofEnum ( Class<E> enumType, String name, String description)
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|Field
argument_list|<
name|E
argument_list|>
name|ofEnum
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|enumType
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
operator|new
name|Field
argument_list|<>
argument_list|(
name|name
argument_list|,
name|enumType
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by string.    *    *<p>Each unique string will allocate a new submetric.<b>Do not use user content as a field    * value</b> as field values are never reclaimed.    *    * @param name field name    * @return string field    */
DECL|method|ofString (String name)
specifier|public
specifier|static
name|Field
argument_list|<
name|String
argument_list|>
name|ofString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ofString
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by string.    *    *<p>Each unique string will allocate a new submetric.<b>Do not use user content as a field    * value</b> as field values are never reclaimed.    *    * @param name field name    * @param description field description    * @return string field    */
DECL|method|ofString (String name, String description)
specifier|public
specifier|static
name|Field
argument_list|<
name|String
argument_list|>
name|ofString
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
operator|new
name|Field
argument_list|<>
argument_list|(
name|name
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by integer.    *    *<p>Each unique integer will allocate a new submetric.<b>Do not use user content as a field    * value</b> as field values are never reclaimed.    *    * @param name field name    * @return integer field    */
DECL|method|ofInteger (String name)
specifier|public
specifier|static
name|Field
argument_list|<
name|Integer
argument_list|>
name|ofInteger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ofInteger
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Break down metrics by integer.    *    *<p>Each unique integer will allocate a new submetric.<b>Do not use user content as a field    * value</b> as field values are never reclaimed.    *    * @param name field name    * @param description field description    * @return integer field    */
DECL|method|ofInteger (String name, String description)
specifier|public
specifier|static
name|Field
argument_list|<
name|Integer
argument_list|>
name|ofInteger
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
operator|new
name|Field
argument_list|<>
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|description
argument_list|)
return|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|keyType
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|keyType
decl_stmt|;
DECL|field|formatter
specifier|private
specifier|final
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|formatter
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|method|Field (String name, Class<T> keyType, String description)
specifier|private
name|Field
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|keyType
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|name
operator|.
name|matches
argument_list|(
literal|"^[a-z_]+$"
argument_list|)
argument_list|,
literal|"name must match [a-z_]"
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|initFormatter
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/** @return name of this field within the metric. */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** @return type of value used within the field. */
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
comment|/** @return description text for the field explaining its range of values. */
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|formatter ()
specifier|public
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|formatter
parameter_list|()
block|{
return|return
name|formatter
return|;
block|}
DECL|method|initFormatter (Class<T> keyType)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Function
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|initFormatter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|keyType
parameter_list|)
block|{
if|if
condition|(
name|keyType
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|s
lambda|->
operator|(
name|String
operator|)
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|keyType
operator|==
name|Integer
operator|.
name|class
operator|||
name|keyType
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
return|return
name|Object
operator|::
name|toString
return|;
block|}
elseif|else
if|if
condition|(
name|Enum
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|keyType
argument_list|)
condition|)
block|{
return|return
name|in
lambda|->
operator|(
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|in
operator|)
operator|.
name|name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unsupported type "
operator|+
name|keyType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

