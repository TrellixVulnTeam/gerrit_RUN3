begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.init.index
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|index
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|SchemaDefinitions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|AccountCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|SingleVersionModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|SingleVersionModule
operator|.
name|SingleVersionListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountIndexDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AccountSchemaDefinitions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|account
operator|.
name|AllAccountsIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|AllGroupsIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupIndexDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|group
operator|.
name|GroupSchemaDefinitions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provides
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|IndexModuleOnInit
specifier|public
class|class
name|IndexModuleOnInit
extends|extends
name|AbstractModule
block|{
DECL|field|INDEX_MANAGER
specifier|static
specifier|final
name|String
name|INDEX_MANAGER
init|=
literal|"IndexModuleOnInit/IndexManager"
decl_stmt|;
DECL|field|ALL_SCHEMA_DEFS
specifier|private
specifier|static
specifier|final
name|ImmutableCollection
argument_list|<
name|SchemaDefinitions
argument_list|<
name|?
argument_list|>
argument_list|>
name|ALL_SCHEMA_DEFS
init|=
name|ImmutableList
operator|.
expr|<
name|SchemaDefinitions
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|(
name|AccountSchemaDefinitions
operator|.
name|INSTANCE
argument_list|,
name|GroupSchemaDefinitions
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
comment|// The AccountIndex implementations (LuceneAccountIndex and
comment|// ElasticAccountIndex) need AccountCache only for reading from the index.
comment|// On init we only want to write to the index, hence we don't need the
comment|// account cache.
name|bind
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// AccountIndexDefinition wants to have AllAccountsIndexer but it is only
comment|// used by the Reindex program and the OnlineReindexer which are both not
comment|// used during init, hence we don't need AllAccountsIndexer.
name|bind
argument_list|(
name|AllAccountsIndexer
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AccountIndexCollection
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// The GroupIndex implementations (LuceneGroupIndex and ElasticGroupIndex)
comment|// need GroupCache only for reading from the index. On init we only want to
comment|// write to the index, hence we don't need the group cache.
name|bind
argument_list|(
name|GroupCache
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// GroupIndexDefinition wants to have AllGroupsIndexer but it is only used
comment|// by the Reindex program and the OnlineReindexer which are both not used
comment|// during init, hence we don't need AllGroupsIndexer.
name|bind
argument_list|(
name|AllGroupsIndexer
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bind
argument_list|(
operator|new
name|TypeLiteral
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|Names
operator|.
name|named
argument_list|(
name|SingleVersionModule
operator|.
name|SINGLE_VERSIONS
argument_list|)
argument_list|)
operator|.
name|toInstance
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|LifecycleListener
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|Names
operator|.
name|named
argument_list|(
name|INDEX_MANAGER
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|SingleVersionListener
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Provides
DECL|method|getIndexDefinitions ( AccountIndexDefinition accounts, GroupIndexDefinition groups)
name|Collection
argument_list|<
name|IndexDefinition
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getIndexDefinitions
parameter_list|(
name|AccountIndexDefinition
name|accounts
parameter_list|,
name|GroupIndexDefinition
name|groups
parameter_list|)
block|{
name|Collection
argument_list|<
name|IndexDefinition
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|result
init|=
name|ImmutableList
operator|.
expr|<
name|IndexDefinition
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|>
name|of
argument_list|(
name|accounts
argument_list|,
name|groups
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|ALL_SCHEMA_DEFS
argument_list|)
operator|.
name|transform
argument_list|(
name|SchemaDefinitions
operator|::
name|getName
argument_list|)
operator|.
name|toSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|result
argument_list|)
operator|.
name|transform
argument_list|(
name|IndexDefinition
operator|::
name|getName
argument_list|)
operator|.
name|toSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"need index definitions for all schemas: "
operator|+
name|expected
operator|+
literal|" != "
operator|+
name|actual
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

