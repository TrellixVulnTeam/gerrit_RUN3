begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2018 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.init
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|api
operator|.
name|InitStep
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|api
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|InitLogging
specifier|public
class|class
name|InitLogging
implements|implements
name|InitStep
block|{
DECL|field|CONTAINER
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER
init|=
literal|"container"
decl_stmt|;
DECL|field|JAVA_OPTIONS
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_OPTIONS
init|=
literal|"javaOptions"
decl_stmt|;
DECL|field|FLOGGER_BACKEND_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|FLOGGER_BACKEND_PROPERTY
init|=
literal|"flogger.backend_factory"
decl_stmt|;
DECL|field|FLOGGER_LOGGING_CONTEXT
specifier|private
specifier|static
specifier|final
name|String
name|FLOGGER_LOGGING_CONTEXT
init|=
literal|"flogger.logging_context"
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|Section
name|container
decl_stmt|;
annotation|@
name|Inject
DECL|method|InitLogging (Section.Factory sections)
specifier|public
name|InitLogging
parameter_list|(
name|Section
operator|.
name|Factory
name|sections
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|sections
operator|.
name|get
argument_list|(
name|CONTAINER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|javaOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|container
operator|.
name|getList
argument_list|(
name|JAVA_OPTIONS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|javaOptions
argument_list|,
name|FLOGGER_BACKEND_PROPERTY
argument_list|)
condition|)
block|{
name|javaOptions
operator|.
name|add
argument_list|(
name|getJavaOption
argument_list|(
name|FLOGGER_BACKEND_PROPERTY
argument_list|,
literal|"com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|javaOptions
argument_list|,
name|FLOGGER_LOGGING_CONTEXT
argument_list|)
condition|)
block|{
name|javaOptions
operator|.
name|add
argument_list|(
name|getJavaOption
argument_list|(
name|FLOGGER_LOGGING_CONTEXT
argument_list|,
literal|"com.google.gerrit.server.logging.LoggingContext#getInstance"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setList
argument_list|(
name|JAVA_OPTIONS
argument_list|,
name|javaOptions
argument_list|)
expr_stmt|;
block|}
DECL|method|isSet (List<String> javaOptions, String javaOptionName)
specifier|private
specifier|static
name|boolean
name|isSet
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|javaOptions
parameter_list|,
name|String
name|javaOptionName
parameter_list|)
block|{
return|return
name|javaOptions
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|o
lambda|->
name|o
operator|.
name|startsWith
argument_list|(
literal|"-D"
operator|+
name|javaOptionName
operator|+
literal|"="
argument_list|)
operator|||
name|o
operator|.
name|startsWith
argument_list|(
literal|"\"-D"
operator|+
name|javaOptionName
operator|+
literal|"="
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getJavaOption (String javaOptionName, String value)
specifier|private
specifier|static
name|String
name|getJavaOption
parameter_list|(
name|String
name|javaOptionName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"-D%s=%s"
argument_list|,
name|javaOptionName
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

