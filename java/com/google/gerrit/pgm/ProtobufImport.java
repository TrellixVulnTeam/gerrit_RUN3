begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|DataSourceProvider
operator|.
name|Context
operator|.
name|SINGLE_USER
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auto
operator|.
name|value
operator|.
name|AutoValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|RuntimeShutdown
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|SiteProgram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|CodecFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|protobuf
operator|.
name|ProtobufCodec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|RelationModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|schema
operator|.
name|java
operator|.
name|JavaSchemaModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|Access
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmDuplicateKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_comment
comment|/**  * Import data from a protocol buffer dump into the database.  *  *<p>Takes as input a file containing protocol buffers concatenated together with varint length  * encoding, as in {@link Parser#parseDelimitedFrom(InputStream)}. Each message contains a single  * field with a tag corresponding to the relation ID in the {@link  * com.google.gwtorm.server.Relation} annotation.  *  *<p><strong>Warning</strong>: This method blindly upserts data into the database. It should only  * be used to restore a protobuf-formatted backup into a new, empty site.  */
end_comment

begin_class
DECL|class|ProtobufImport
specifier|public
class|class
name|ProtobufImport
extends|extends
name|SiteProgram
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--file"
argument_list|,
name|aliases
operator|=
block|{
literal|"-f"
block|}
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|metaVar
operator|=
literal|"FILE"
argument_list|,
name|usage
operator|=
literal|"File to import from"
argument_list|)
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|LifecycleManager
name|manager
init|=
operator|new
name|LifecycleManager
argument_list|()
decl_stmt|;
DECL|field|relations
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Relation
argument_list|>
name|relations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|schemaFactory
annotation|@
name|Inject
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schemaFactory
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|mustHaveValidSite
argument_list|()
expr_stmt|;
name|Injector
name|dbInjector
init|=
name|createDbInjector
argument_list|(
name|SINGLE_USER
argument_list|)
decl_stmt|;
name|manager
operator|.
name|add
argument_list|(
name|dbInjector
argument_list|)
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
name|RuntimeShutdown
operator|.
name|add
argument_list|(
name|manager
operator|::
name|stop
argument_list|)
expr_stmt|;
name|dbInjector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ProgressMonitor
name|progress
init|=
operator|new
name|TextProgressMonitor
argument_list|()
decl_stmt|;
name|progress
operator|.
name|beginTask
argument_list|(
literal|"Importing entities"
argument_list|,
name|ProgressMonitor
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
try|try
init|(
name|ReviewDb
name|db
init|=
name|schemaFactory
operator|.
name|open
argument_list|()
init|)
block|{
for|for
control|(
name|RelationModel
name|model
range|:
operator|new
name|JavaSchemaModel
argument_list|(
name|ReviewDb
operator|.
name|class
argument_list|)
operator|.
name|getRelations
argument_list|()
control|)
block|{
name|relations
operator|.
name|put
argument_list|(
name|model
operator|.
name|getRelationID
argument_list|()
argument_list|,
name|Relation
operator|.
name|create
argument_list|(
name|model
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Parser
argument_list|<
name|UnknownFieldSet
argument_list|>
name|parser
init|=
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
operator|.
name|getParserForType
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|UnknownFieldSet
name|msg
decl_stmt|;
while|while
condition|(
operator|(
name|msg
operator|=
name|parser
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|UnknownFieldSet
operator|.
name|Field
argument_list|>
name|e
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|msg
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Relation
name|rel
init|=
name|checkNotNull
argument_list|(
name|relations
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
literal|"unknown relation ID %s in message: %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ByteString
argument_list|>
name|values
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getLengthDelimitedList
argument_list|()
decl_stmt|;
name|checkState
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"expected one string field in message: %s"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|upsert
argument_list|(
name|rel
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|progress
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|progress
operator|.
name|endTask
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|upsert (Relation rel, ByteString s)
specifier|private
specifier|static
name|void
name|upsert
parameter_list|(
name|Relation
name|rel
parameter_list|,
name|ByteString
name|s
parameter_list|)
throws|throws
name|OrmException
block|{
name|Collection
name|ents
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|rel
operator|.
name|codec
argument_list|()
operator|.
name|decode
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Not all relations support update; fall back manually.
name|rel
operator|.
name|access
argument_list|()
operator|.
name|insert
argument_list|(
name|ents
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmDuplicateKeyException
name|e
parameter_list|)
block|{
name|rel
operator|.
name|access
argument_list|()
operator|.
name|delete
argument_list|(
name|ents
argument_list|)
expr_stmt|;
name|rel
operator|.
name|access
argument_list|()
operator|.
name|insert
argument_list|(
name|ents
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AutoValue
DECL|class|Relation
specifier|abstract
specifier|static
class|class
name|Relation
block|{
DECL|method|create (RelationModel model, ReviewDb db)
specifier|private
specifier|static
name|Relation
name|create
parameter_list|(
name|RelationModel
name|model
parameter_list|,
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|ClassNotFoundException
block|{
name|Method
name|m
init|=
name|db
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|model
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|model
operator|.
name|getEntityTypeClassName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AutoValue_ProtobufImport_Relation
argument_list|(
operator|(
name|Access
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|db
argument_list|)
argument_list|,
name|CodecFactory
operator|.
name|encoder
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
DECL|method|access ()
specifier|abstract
name|Access
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|access
parameter_list|()
function_decl|;
DECL|method|codec ()
specifier|abstract
name|ProtobufCodec
argument_list|<
name|?
argument_list|>
name|codec
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

