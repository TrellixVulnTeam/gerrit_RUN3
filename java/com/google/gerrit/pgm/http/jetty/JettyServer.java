begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.http.jetty
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|http
operator|.
name|jetty
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|AuthType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|http
operator|.
name|jetty
operator|.
name|HttpLog
operator|.
name|HttpLogFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ThreadSettingsConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|jmx
operator|.
name|MBeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ForwardedRequestCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SecureRequestCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SslConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|RequestLogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|StatisticsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|DefaultServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|BlockingArrayQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|JettyServer
specifier|public
class|class
name|JettyServer
block|{
DECL|class|Lifecycle
specifier|static
class|class
name|Lifecycle
implements|implements
name|LifecycleListener
block|{
DECL|field|server
specifier|private
specifier|final
name|JettyServer
name|server
decl_stmt|;
DECL|field|cfg
specifier|private
specifier|final
name|Config
name|cfg
decl_stmt|;
annotation|@
name|Inject
DECL|method|Lifecycle (JettyServer server, @GerritServerConfig Config cfg)
name|Lifecycle
parameter_list|(
name|JettyServer
name|server
parameter_list|,
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|cfg
operator|=
name|cfg
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|String
name|origUrl
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"listenUrl"
argument_list|)
decl_stmt|;
name|boolean
name|rewrite
init|=
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|origUrl
argument_list|)
operator|&&
name|origUrl
operator|.
name|endsWith
argument_list|(
literal|":0/"
argument_list|)
decl_stmt|;
name|server
operator|.
name|httpd
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|rewrite
condition|)
block|{
name|Connector
name|con
init|=
name|server
operator|.
name|httpd
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|con
operator|instanceof
name|ServerConnector
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|ServerConnector
name|serverCon
init|=
operator|(
name|ServerConnector
operator|)
name|con
decl_stmt|;
name|String
name|host
init|=
name|serverCon
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|serverCon
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|String
operator|.
name|format
argument_list|(
literal|"http://%s:%d"
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalWebUrl"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"listenUrl"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot start HTTP daemon"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|httpd
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|httpd
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot stop HTTP daemon"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|site
specifier|private
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|httpd
specifier|private
specifier|final
name|Server
name|httpd
decl_stmt|;
DECL|field|reverseProxy
specifier|private
name|boolean
name|reverseProxy
decl_stmt|;
annotation|@
name|Inject
DECL|method|JettyServer ( @erritServerConfig Config cfg, ThreadSettingsConfig threadSettingsConfig, SitePaths site, JettyEnv env, HttpLogFactory httpLogFactory)
name|JettyServer
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|ThreadSettingsConfig
name|threadSettingsConfig
parameter_list|,
name|SitePaths
name|site
parameter_list|,
name|JettyEnv
name|env
parameter_list|,
name|HttpLogFactory
name|httpLogFactory
parameter_list|)
block|{
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|httpd
operator|=
operator|new
name|Server
argument_list|(
name|threadPool
argument_list|(
name|cfg
argument_list|,
name|threadSettingsConfig
argument_list|)
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setConnectors
argument_list|(
name|listen
argument_list|(
name|httpd
argument_list|,
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|Handler
name|app
init|=
name|makeContext
argument_list|(
name|env
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"httpd"
argument_list|,
literal|"requestLog"
argument_list|,
operator|!
name|reverseProxy
argument_list|)
condition|)
block|{
name|RequestLogHandler
name|handler
init|=
operator|new
name|RequestLogHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setRequestLog
argument_list|(
name|httpLogFactory
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setHandler
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
name|handler
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"httpd"
argument_list|,
literal|"registerMBeans"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|MBeanContainer
name|mbean
init|=
operator|new
name|MBeanContainer
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
decl_stmt|;
name|httpd
operator|.
name|addEventListener
argument_list|(
name|mbean
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|addBean
argument_list|(
name|Log
operator|.
name|getRootLogger
argument_list|()
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|addBean
argument_list|(
name|mbean
argument_list|)
expr_stmt|;
block|}
name|long
name|gracefulStopTimeout
init|=
name|cfg
operator|.
name|getTimeUnit
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"gracefulStopTimeout"
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|gracefulStopTimeout
operator|>
literal|0
condition|)
block|{
name|StatisticsHandler
name|statsHandler
init|=
operator|new
name|StatisticsHandler
argument_list|()
decl_stmt|;
name|statsHandler
operator|.
name|setHandler
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
name|statsHandler
expr_stmt|;
name|httpd
operator|.
name|setStopTimeout
argument_list|(
name|gracefulStopTimeout
argument_list|)
expr_stmt|;
block|}
name|httpd
operator|.
name|setHandler
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setStopAtShutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|listen (Server server, Config cfg)
specifier|private
name|Connector
index|[]
name|listen
parameter_list|(
name|Server
name|server
parameter_list|,
name|Config
name|cfg
parameter_list|)
block|{
comment|// OpenID and certain web-based single-sign-on products can cause
comment|// some very long headers, especially in the Referer header. We
comment|// need to use a larger default header size to ensure we have
comment|// the space required.
comment|//
specifier|final
name|int
name|requestHeaderSize
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|"requestheadersize"
argument_list|,
literal|16386
argument_list|)
decl_stmt|;
specifier|final
name|URI
index|[]
name|listenUrls
init|=
name|listenURLs
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|reuseAddress
init|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"httpd"
argument_list|,
literal|"reuseaddress"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|acceptors
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|"acceptorThreads"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|AuthType
name|authType
init|=
name|cfg
operator|.
name|getEnum
argument_list|(
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|,
name|AuthType
operator|.
name|OPENID
argument_list|)
decl_stmt|;
name|reverseProxy
operator|=
name|isReverseProxied
argument_list|(
name|listenUrls
argument_list|)
expr_stmt|;
specifier|final
name|Connector
index|[]
name|connectors
init|=
operator|new
name|Connector
index|[
name|listenUrls
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|listenUrls
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|URI
name|u
init|=
name|listenUrls
index|[
name|idx
index|]
decl_stmt|;
specifier|final
name|int
name|defaultPort
decl_stmt|;
specifier|final
name|ServerConnector
name|c
decl_stmt|;
name|HttpConfiguration
name|config
init|=
name|defaultConfig
argument_list|(
name|requestHeaderSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|AuthType
operator|.
name|CLIENT_SSL_CERT_LDAP
operator|.
name|equals
argument_list|(
name|authType
argument_list|)
operator|&&
operator|!
literal|"https"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Protocol '"
operator|+
name|u
operator|.
name|getScheme
argument_list|()
operator|+
literal|"' "
operator|+
literal|" not supported in httpd.listenurl '"
operator|+
name|u
operator|+
literal|"' when auth.type = '"
operator|+
name|AuthType
operator|.
name|CLIENT_SSL_CERT_LDAP
operator|.
name|name
argument_list|()
operator|+
literal|"'; only 'https' is supported"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|defaultPort
operator|=
literal|80
expr_stmt|;
name|c
operator|=
name|newServerConnector
argument_list|(
name|server
argument_list|,
name|acceptors
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|SslContextFactory
operator|.
name|Server
name|ssl
init|=
operator|new
name|SslContextFactory
operator|.
name|Server
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|keystore
init|=
name|getFile
argument_list|(
name|cfg
argument_list|,
literal|"sslkeystore"
argument_list|,
literal|"etc/keystore"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"sslkeypassword"
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|"gerrit"
expr_stmt|;
block|}
name|ssl
operator|.
name|setKeyStorePath
argument_list|(
name|keystore
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setTrustStorePath
argument_list|(
name|keystore
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setKeyStorePassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setTrustStorePassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|AuthType
operator|.
name|CLIENT_SSL_CERT_LDAP
operator|.
name|equals
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|ssl
operator|.
name|setNeedClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|crl
init|=
name|getFile
argument_list|(
name|cfg
argument_list|,
literal|"sslCrl"
argument_list|,
literal|"etc/crl.pem"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|crl
argument_list|)
condition|)
block|{
name|ssl
operator|.
name|setCrlPath
argument_list|(
name|crl
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setValidatePeerCerts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|defaultPort
operator|=
literal|443
expr_stmt|;
name|config
operator|.
name|addCustomizer
argument_list|(
operator|new
name|SecureRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|acceptors
argument_list|,
operator|new
name|SslConnectionFactory
argument_list|(
name|ssl
argument_list|,
literal|"http/1.1"
argument_list|)
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"proxy-http"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|defaultPort
operator|=
literal|8080
expr_stmt|;
name|config
operator|.
name|addCustomizer
argument_list|(
operator|new
name|ForwardedRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|newServerConnector
argument_list|(
name|server
argument_list|,
name|acceptors
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"proxy-https"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|defaultPort
operator|=
literal|8080
expr_stmt|;
name|config
operator|.
name|addCustomizer
argument_list|(
operator|new
name|ForwardedRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|addCustomizer
argument_list|(
parameter_list|(
name|connector
parameter_list|,
name|channelConfig
parameter_list|,
name|request
parameter_list|)
lambda|->
block|{
name|request
operator|.
name|setScheme
argument_list|(
name|HttpScheme
operator|.
name|HTTPS
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSecure
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|c
operator|=
name|newServerConnector
argument_list|(
name|server
argument_list|,
name|acceptors
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Protocol '"
operator|+
name|u
operator|.
name|getScheme
argument_list|()
operator|+
literal|"' "
operator|+
literal|" not supported in httpd.listenurl '"
operator|+
name|u
operator|+
literal|"';"
operator|+
literal|" only 'http', 'https', 'proxy-http, 'proxy-https'"
operator|+
literal|" are supported"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|u
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
comment|//
operator|||
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"*:"
argument_list|)
operator|)
condition|)
block|{
comment|// Bind to all local addresses. Port wasn't parsed right by URI
comment|// due to the illegal host of "*" so replace with a legal name
comment|// and parse the URI.
comment|//
specifier|final
name|URI
name|r
init|=
operator|new
name|URI
argument_list|(
name|u
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'A'
argument_list|)
argument_list|)
operator|.
name|parseServerAuthority
argument_list|()
decl_stmt|;
name|c
operator|.
name|setHost
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPort
argument_list|(
literal|0
operator|<
name|r
operator|.
name|getPort
argument_list|()
condition|?
name|r
operator|.
name|getPort
argument_list|()
else|:
name|defaultPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|URI
name|r
init|=
name|u
operator|.
name|parseServerAuthority
argument_list|()
decl_stmt|;
name|c
operator|.
name|setHost
argument_list|(
name|r
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPort
argument_list|(
literal|0
operator|<=
name|r
operator|.
name|getPort
argument_list|()
condition|?
name|r
operator|.
name|getPort
argument_list|()
else|:
name|defaultPort
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid httpd.listenurl "
operator|+
name|u
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|c
operator|.
name|setInheritChannel
argument_list|(
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"httpd"
argument_list|,
literal|"inheritChannel"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setReuseAddress
argument_list|(
name|reuseAddress
argument_list|)
expr_stmt|;
name|c
operator|.
name|setIdleTimeout
argument_list|(
name|cfg
operator|.
name|getTimeUnit
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"idleTimeout"
argument_list|,
literal|30000L
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|connectors
index|[
name|idx
index|]
operator|=
name|c
expr_stmt|;
block|}
return|return
name|connectors
return|;
block|}
DECL|method|newServerConnector ( Server server, int acceptors, HttpConfiguration config)
specifier|private
specifier|static
name|ServerConnector
name|newServerConnector
parameter_list|(
name|Server
name|server
parameter_list|,
name|int
name|acceptors
parameter_list|,
name|HttpConfiguration
name|config
parameter_list|)
block|{
return|return
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|acceptors
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|config
argument_list|)
argument_list|)
return|;
block|}
DECL|method|defaultConfig (int requestHeaderSize)
specifier|private
name|HttpConfiguration
name|defaultConfig
parameter_list|(
name|int
name|requestHeaderSize
parameter_list|)
block|{
name|HttpConfiguration
name|config
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setRequestHeaderSize
argument_list|(
name|requestHeaderSize
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSendServerVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSendDateHeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|isReverseProxied (URI[] listenUrls)
specifier|static
name|boolean
name|isReverseProxied
parameter_list|(
name|URI
index|[]
name|listenUrls
parameter_list|)
block|{
for|for
control|(
name|URI
name|u
range|:
name|listenUrls
control|)
block|{
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|||
literal|"https"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|listenURLs (Config cfg)
specifier|static
name|URI
index|[]
name|listenURLs
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
name|String
index|[]
name|urls
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"listenurl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|urls
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|urls
operator|=
operator|new
name|String
index|[]
block|{
literal|"http://*:8080/"
block|}
expr_stmt|;
block|}
specifier|final
name|URI
index|[]
name|r
init|=
operator|new
name|URI
index|[
name|urls
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
init|=
name|urls
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|r
index|[
name|i
index|]
operator|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid httpd.listenurl "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|getFile (Config cfg, String name, String def)
specifier|private
name|Path
name|getFile
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
name|path
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|path
operator|=
name|def
expr_stmt|;
block|}
return|return
name|site
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|threadPool (Config cfg, ThreadSettingsConfig threadSettingsConfig)
specifier|private
name|ThreadPool
name|threadPool
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|ThreadSettingsConfig
name|threadSettingsConfig
parameter_list|)
block|{
name|int
name|maxThreads
init|=
name|threadSettingsConfig
operator|.
name|getHttpdMaxThreads
argument_list|()
decl_stmt|;
name|int
name|minThreads
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"minthreads"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|maxQueued
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"maxqueued"
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|int
name|idleTimeout
init|=
operator|(
name|int
operator|)
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|int
name|maxCapacity
init|=
name|maxQueued
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|Math
operator|.
name|max
argument_list|(
name|minThreads
argument_list|,
name|maxQueued
argument_list|)
decl_stmt|;
name|QueuedThreadPool
name|pool
init|=
operator|new
name|QueuedThreadPool
argument_list|(
name|maxThreads
argument_list|,
name|minThreads
argument_list|,
name|idleTimeout
argument_list|,
operator|new
name|BlockingArrayQueue
argument_list|<>
argument_list|(
name|minThreads
argument_list|,
comment|// capacity,
name|minThreads
argument_list|,
comment|// growBy,
name|maxCapacity
comment|// maxCapacity
argument_list|)
argument_list|)
decl_stmt|;
name|pool
operator|.
name|setName
argument_list|(
literal|"HTTP"
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
DECL|method|makeContext (JettyEnv env, Config cfg)
specifier|private
name|Handler
name|makeContext
parameter_list|(
name|JettyEnv
name|env
parameter_list|,
name|Config
name|cfg
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|u
range|:
name|listenURLs
argument_list|(
name|cfg
argument_list|)
control|)
block|{
name|String
name|p
init|=
name|u
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|=
literal|"/"
expr_stmt|;
block|}
while|while
condition|(
literal|1
operator|<
name|p
operator|.
name|length
argument_list|()
operator|&&
name|p
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ContextHandler
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|all
operator|.
name|add
argument_list|(
name|makeContext
argument_list|(
name|path
argument_list|,
name|env
argument_list|,
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// If we only have one context path in our web space, return it
comment|// without any wrapping so Jetty has less work to do per-request.
comment|//
return|return
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// We have more than one path served out of this container so
comment|// combine them in a handler which supports dispatching to the
comment|// individual contexts.
comment|//
specifier|final
name|ContextHandlerCollection
name|r
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|r
operator|.
name|setHandlers
argument_list|(
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|Handler
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|makeContext (final String contextPath, JettyEnv env, Config cfg)
specifier|private
name|ContextHandler
name|makeContext
parameter_list|(
specifier|final
name|String
name|contextPath
parameter_list|,
name|JettyEnv
name|env
parameter_list|,
name|Config
name|cfg
parameter_list|)
block|{
specifier|final
name|ServletContextHandler
name|app
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
comment|// This enables the use of sessions in Jetty, feature available
comment|// for Gerrit plug-ins to enable user-level sessions.
comment|//
name|app
operator|.
name|setSessionHandler
argument_list|(
operator|new
name|SessionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|HiddenErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
comment|// This is the path we are accessed by clients within our domain.
comment|//
name|app
operator|.
name|setContextPath
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
comment|// HTTP front-end filters to be used as surrogate of Apache HTTP
comment|// reverse-proxy filtering.
comment|// It is meant to be used as simpler tiny deployment of custom-made
comment|// security enforcement (Security tokens, IP-based security filtering, others)
name|String
index|[]
name|filterClassNames
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"filterClass"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|filterClassName
range|:
name|filterClassNames
control|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|filterClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|filterClassName
argument_list|)
decl_stmt|;
name|Filter
name|filter
init|=
name|env
operator|.
name|webInjector
operator|.
name|getInstance
argument_list|(
name|filterClass
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initParamKeys
init|=
name|cfg
operator|.
name|getNames
argument_list|(
literal|"filterClass"
argument_list|,
name|filterClassName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initParamKeys
operator|.
name|forEach
argument_list|(
name|paramKey
lambda|->
block|{
name|String
name|paramValue
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"filterClass"
argument_list|,
name|filterClassName
argument_list|,
name|paramKey
argument_list|)
decl_stmt|;
name|initParams
operator|.
name|put
argument_list|(
name|paramKey
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|FilterHolder
name|filterHolder
init|=
operator|new
name|FilterHolder
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|initParams
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|filterHolder
operator|.
name|setInitParameters
argument_list|(
name|initParams
argument_list|)
expr_stmt|;
block|}
name|app
operator|.
name|addFilter
argument_list|(
name|filterHolder
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|,
name|DispatcherType
operator|.
name|ASYNC
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to instantiate front-end HTTP Filter "
operator|+
name|filterClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Perform the same binding as our web.xml would do, but instead
comment|// of using the listener to create the injector pass the one we
comment|// already have built.
comment|//
name|GuiceFilter
name|filter
init|=
name|env
operator|.
name|webInjector
operator|.
name|getInstance
argument_list|(
name|GuiceFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|app
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|,
name|DispatcherType
operator|.
name|ASYNC
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|addEventListener
argument_list|(
operator|new
name|GuiceServletContextListener
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|env
operator|.
name|webInjector
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Jetty requires at least one servlet be bound before it will
comment|// bother running the filter above. Since the filter has all
comment|// of our URLs except the static resources, the only servlet
comment|// we need to bind is the default static resource servlet from
comment|// the Jetty container.
comment|//
specifier|final
name|ServletHolder
name|ds
init|=
name|app
operator|.
name|addServlet
argument_list|(
name|DefaultServlet
operator|.
name|class
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"dirAllowed"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"redirectWelcome"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"useFileMappedBuffer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"gzip"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setWelcomeFiles
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
block|}
end_class

end_unit

