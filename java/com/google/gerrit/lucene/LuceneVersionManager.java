begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.lucene
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|IndexDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|GerritIndexStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|OnlineUpgradeListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|LuceneVersionManager
specifier|public
class|class
name|LuceneVersionManager
extends|extends
name|VersionManager
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LuceneVersionManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|Version
specifier|private
specifier|static
class|class
name|Version
parameter_list|<
name|V
parameter_list|>
extends|extends
name|VersionManager
operator|.
name|Version
argument_list|<
name|V
argument_list|>
block|{
DECL|field|exists
specifier|private
specifier|final
name|boolean
name|exists
decl_stmt|;
DECL|method|Version (Schema<V> schema, int version, boolean exists, boolean ready)
specifier|private
name|Version
parameter_list|(
name|Schema
argument_list|<
name|V
argument_list|>
name|schema
parameter_list|,
name|int
name|version
parameter_list|,
name|boolean
name|exists
parameter_list|,
name|boolean
name|ready
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|version
argument_list|,
name|ready
argument_list|)
expr_stmt|;
name|this
operator|.
name|exists
operator|=
name|exists
expr_stmt|;
block|}
block|}
DECL|method|getDir (SitePaths sitePaths, String name, Schema<?> schema)
specifier|static
name|Path
name|getDir
parameter_list|(
name|SitePaths
name|sitePaths
parameter_list|,
name|String
name|name
parameter_list|,
name|Schema
argument_list|<
name|?
argument_list|>
name|schema
parameter_list|)
block|{
return|return
name|sitePaths
operator|.
name|index_dir
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s_%04d"
argument_list|,
name|name
argument_list|,
name|schema
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Inject
DECL|method|LuceneVersionManager ( @erritServerConfig Config cfg, SitePaths sitePaths, DynamicSet<OnlineUpgradeListener> listeners, Collection<IndexDefinition<?, ?, ?>> defs)
name|LuceneVersionManager
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|SitePaths
name|sitePaths
parameter_list|,
name|DynamicSet
argument_list|<
name|OnlineUpgradeListener
argument_list|>
name|listeners
parameter_list|,
name|Collection
argument_list|<
name|IndexDefinition
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|defs
parameter_list|)
block|{
name|super
argument_list|(
name|sitePaths
argument_list|,
name|listeners
argument_list|,
name|defs
argument_list|,
name|VersionManager
operator|.
name|getOnlineUpgrade
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isDirty ( Collection<com.google.gerrit.server.index.VersionManager.Version<V>> inUse, com.google.gerrit.server.index.VersionManager.Version<V> v)
specifier|protected
parameter_list|<
name|V
parameter_list|>
name|boolean
name|isDirty
parameter_list|(
name|Collection
argument_list|<
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|VersionManager
operator|.
name|Version
argument_list|<
name|V
argument_list|>
argument_list|>
name|inUse
parameter_list|,
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|VersionManager
operator|.
name|Version
argument_list|<
name|V
argument_list|>
name|v
parameter_list|)
block|{
return|return
operator|!
name|inUse
operator|.
name|contains
argument_list|(
name|v
argument_list|)
operator|&&
operator|(
operator|(
name|Version
argument_list|<
name|V
argument_list|>
operator|)
name|v
operator|)
operator|.
name|exists
return|;
block|}
annotation|@
name|Override
DECL|method|scanVersions ( IndexDefinition<K, V, I> def, GerritIndexStatus cfg)
specifier|protected
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|I
extends|extends
name|Index
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
parameter_list|>
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|VersionManager
operator|.
name|Version
argument_list|<
name|V
argument_list|>
argument_list|>
name|scanVersions
parameter_list|(
name|IndexDefinition
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|I
argument_list|>
name|def
parameter_list|,
name|GerritIndexStatus
name|cfg
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|VersionManager
operator|.
name|Version
argument_list|<
name|V
argument_list|>
argument_list|>
name|versions
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Schema
argument_list|<
name|V
argument_list|>
name|schema
range|:
name|def
operator|.
name|getSchemas
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
comment|// This part is Lucene-specific.
name|Path
name|p
init|=
name|getDir
argument_list|(
name|sitePaths
argument_list|,
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|boolean
name|isDir
init|=
name|Files
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|p
argument_list|)
operator|&&
operator|!
name|isDir
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not a directory: %s"
argument_list|,
name|p
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|v
init|=
name|schema
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
name|v
argument_list|,
operator|new
name|Version
argument_list|<>
argument_list|(
name|schema
argument_list|,
name|v
argument_list|,
name|isDir
argument_list|,
name|cfg
operator|.
name|getReady
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
init|=
name|def
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|sitePaths
operator|.
name|index_dir
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|String
name|n
init|=
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|versionStr
init|=
name|n
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|v
init|=
name|Ints
operator|.
name|tryParse
argument_list|(
name|versionStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|versionStr
operator|.
name|length
argument_list|()
operator|!=
literal|4
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unrecognized version in index directory: {}"
argument_list|,
name|p
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|versions
operator|.
name|containsKey
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|versions
operator|.
name|put
argument_list|(
name|v
argument_list|,
operator|new
name|Version
argument_list|<
name|V
argument_list|>
argument_list|(
literal|null
argument_list|,
name|v
argument_list|,
literal|true
argument_list|,
name|cfg
operator|.
name|getReady
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error scanning index directory: "
operator|+
name|sitePaths
operator|.
name|index_dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|versions
return|;
block|}
block|}
end_class

end_unit

