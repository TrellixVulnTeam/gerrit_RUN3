begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|gerrit
package|package
name|gerrit
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|entities
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|Emails
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|rules
operator|.
name|PrologEnvironment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|PrologException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|SystemException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|IntegerTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Prolog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|StructureTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|SymbolTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|PersonIdent
import|;
end_import

begin_class
DECL|class|AbstractCommitUserIdentityPredicate
specifier|abstract
class|class
name|AbstractCommitUserIdentityPredicate
extends|extends
name|Predicate
operator|.
name|P3
block|{
DECL|field|user
specifier|private
specifier|static
specifier|final
name|SymbolTerm
name|user
init|=
name|SymbolTerm
operator|.
name|intern
argument_list|(
literal|"user"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|static
specifier|final
name|SymbolTerm
name|anonymous
init|=
name|SymbolTerm
operator|.
name|intern
argument_list|(
literal|"anonymous"
argument_list|)
decl_stmt|;
DECL|method|AbstractCommitUserIdentityPredicate (Term a1, Term a2, Term a3, Operation n)
name|AbstractCommitUserIdentityPredicate
parameter_list|(
name|Term
name|a1
parameter_list|,
name|Term
name|a2
parameter_list|,
name|Term
name|a3
parameter_list|,
name|Operation
name|n
parameter_list|)
block|{
name|arg1
operator|=
name|a1
expr_stmt|;
name|arg2
operator|=
name|a2
expr_stmt|;
name|arg3
operator|=
name|a3
expr_stmt|;
name|cont
operator|=
name|n
expr_stmt|;
block|}
DECL|method|exec (Prolog engine, PersonIdent userId)
specifier|protected
name|Operation
name|exec
parameter_list|(
name|Prolog
name|engine
parameter_list|,
name|PersonIdent
name|userId
parameter_list|)
throws|throws
name|PrologException
block|{
name|engine
operator|.
name|setB0
argument_list|()
expr_stmt|;
name|Term
name|a1
init|=
name|arg1
operator|.
name|dereference
argument_list|()
decl_stmt|;
name|Term
name|a2
init|=
name|arg2
operator|.
name|dereference
argument_list|()
decl_stmt|;
name|Term
name|a3
init|=
name|arg3
operator|.
name|dereference
argument_list|()
decl_stmt|;
name|Term
name|idTerm
decl_stmt|;
name|Term
name|nameTerm
init|=
name|Prolog
operator|.
name|Nil
decl_stmt|;
name|Term
name|emailTerm
init|=
name|Prolog
operator|.
name|Nil
decl_stmt|;
name|PrologEnvironment
name|env
init|=
operator|(
name|PrologEnvironment
operator|)
name|engine
operator|.
name|control
decl_stmt|;
name|Emails
name|emails
init|=
name|env
operator|.
name|getArgs
argument_list|()
operator|.
name|getEmails
argument_list|()
decl_stmt|;
name|Account
operator|.
name|Id
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ImmutableSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ids
init|=
name|emails
operator|.
name|getAccountForExternal
argument_list|(
name|userId
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|id
operator|=
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SystemException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|idTerm
operator|=
name|anonymous
expr_stmt|;
block|}
else|else
block|{
name|idTerm
operator|=
operator|new
name|IntegerTerm
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|userId
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|nameTerm
operator|=
name|SymbolTerm
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|String
name|email
init|=
name|userId
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|emailTerm
operator|=
name|SymbolTerm
operator|.
name|create
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|a1
operator|.
name|unify
argument_list|(
operator|new
name|StructureTerm
argument_list|(
name|user
argument_list|,
name|idTerm
argument_list|)
argument_list|,
name|engine
operator|.
name|trail
argument_list|)
condition|)
block|{
return|return
name|engine
operator|.
name|fail
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|a2
operator|.
name|unify
argument_list|(
name|nameTerm
argument_list|,
name|engine
operator|.
name|trail
argument_list|)
condition|)
block|{
return|return
name|engine
operator|.
name|fail
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|a3
operator|.
name|unify
argument_list|(
name|emailTerm
argument_list|,
name|engine
operator|.
name|trail
argument_list|)
condition|)
block|{
return|return
name|engine
operator|.
name|fail
argument_list|()
return|;
block|}
return|return
name|cont
return|;
block|}
block|}
end_class

end_unit

