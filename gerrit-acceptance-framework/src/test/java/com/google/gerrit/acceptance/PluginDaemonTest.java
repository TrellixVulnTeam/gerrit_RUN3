begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ProcessBuilder
operator|.
name|Redirect
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|PluginDaemonTest
specifier|public
specifier|abstract
class|class
name|PluginDaemonTest
extends|extends
name|AbstractDaemonTest
block|{
DECL|field|BUCKLC
specifier|private
specifier|static
specifier|final
name|String
name|BUCKLC
init|=
literal|"buck"
decl_stmt|;
DECL|field|BUCKOUT
specifier|private
specifier|static
specifier|final
name|String
name|BUCKOUT
init|=
literal|"buck-out"
decl_stmt|;
DECL|field|gen
specifier|private
name|Path
name|gen
decl_stmt|;
DECL|field|testSite
specifier|private
name|Path
name|testSite
decl_stmt|;
DECL|field|pluginRoot
specifier|private
name|Path
name|pluginRoot
decl_stmt|;
DECL|field|pluginsSitePath
specifier|private
name|Path
name|pluginsSitePath
decl_stmt|;
DECL|field|pluginSubPath
specifier|private
name|Path
name|pluginSubPath
decl_stmt|;
DECL|field|pluginSource
specifier|private
name|Path
name|pluginSource
decl_stmt|;
DECL|field|pluginName
specifier|private
name|String
name|pluginName
decl_stmt|;
DECL|field|standalone
specifier|private
name|boolean
name|standalone
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeTest (Description description)
specifier|protected
name|void
name|beforeTest
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|locatePaths
argument_list|()
expr_stmt|;
name|retrievePluginName
argument_list|()
expr_stmt|;
name|buildPluginJar
argument_list|()
expr_stmt|;
name|createTestSiteDirs
argument_list|()
expr_stmt|;
name|copyJarToTestSite
argument_list|()
expr_stmt|;
name|super
operator|.
name|beforeTest
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|setPluginConfigString (String name, String value)
specifier|protected
name|void
name|setPluginConfigString
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
name|SitePaths
name|sitePath
init|=
operator|new
name|SitePaths
argument_list|(
name|testSite
argument_list|)
decl_stmt|;
name|FileBasedConfig
name|cfg
init|=
name|getGerritConfigFile
argument_list|(
name|sitePath
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|setString
argument_list|(
literal|"plugin"
argument_list|,
name|pluginName
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
DECL|method|getGerritConfigFile (SitePaths sitePath)
specifier|private
name|FileBasedConfig
name|getGerritConfigFile
parameter_list|(
name|SitePaths
name|sitePath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileBasedConfig
name|cfg
init|=
operator|new
name|FileBasedConfig
argument_list|(
name|sitePath
operator|.
name|gerrit_config
operator|.
name|toFile
argument_list|()
argument_list|,
name|FS
operator|.
name|DETECTED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Path
name|etc_path
init|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|sitePath
operator|.
name|etc_dir
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|etc_path
operator|.
name|resolve
argument_list|(
literal|"gerrit.config"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
DECL|method|locatePaths ()
specifier|private
name|void
name|locatePaths
parameter_list|()
block|{
name|URL
name|pluginClassesUrl
init|=
name|getClass
argument_list|()
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|basePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|pluginClassesUrl
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|buckOutIdx
init|=
literal|0
decl_stmt|;
name|int
name|pluginsIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|subPath
range|:
name|basePath
control|)
block|{
if|if
condition|(
name|subPath
operator|.
name|endsWith
argument_list|(
literal|"plugins"
argument_list|)
condition|)
block|{
name|pluginsIdx
operator|=
name|idx
expr_stmt|;
block|}
if|if
condition|(
name|subPath
operator|.
name|endsWith
argument_list|(
name|BUCKOUT
argument_list|)
condition|)
block|{
name|buckOutIdx
operator|=
name|idx
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
name|standalone
operator|=
name|checkStandalone
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|pluginRoot
operator|=
name|basePath
operator|.
name|getRoot
argument_list|()
operator|.
name|resolve
argument_list|(
name|basePath
operator|.
name|subpath
argument_list|(
literal|0
argument_list|,
name|buckOutIdx
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
name|pluginRoot
operator|.
name|resolve
argument_list|(
name|BUCKOUT
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"gen"
argument_list|)
expr_stmt|;
if|if
condition|(
name|standalone
condition|)
block|{
name|pluginSource
operator|=
name|pluginRoot
expr_stmt|;
block|}
else|else
block|{
name|pluginSubPath
operator|=
name|basePath
operator|.
name|subpath
argument_list|(
name|pluginsIdx
argument_list|,
name|pluginsIdx
operator|+
literal|2
argument_list|)
expr_stmt|;
name|pluginSource
operator|=
name|pluginRoot
operator|.
name|resolve
argument_list|(
name|pluginSubPath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkStandalone (Path basePath)
specifier|private
name|boolean
name|checkStandalone
parameter_list|(
name|Path
name|basePath
parameter_list|)
block|{
name|String
name|pathCharStringOrNone
init|=
literal|"[a-zA-Z0-9._-]*?"
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pathCharStringOrNone
operator|+
literal|"gerrit"
operator|+
name|pathCharStringOrNone
argument_list|)
decl_stmt|;
name|Path
name|partialPath
init|=
name|basePath
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|basePath
operator|.
name|getNameCount
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
name|count
init|=
name|partialPath
operator|.
name|getNameCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|1
condition|)
block|{
name|String
name|gerritDirCandidate
init|=
name|partialPath
operator|.
name|subpath
argument_list|(
name|count
operator|-
literal|2
argument_list|,
name|count
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|gerritDirCandidate
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|partialPath
operator|.
name|endsWith
argument_list|(
name|gerritDirCandidate
operator|+
literal|"/"
operator|+
name|BUCKOUT
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|partialPath
operator|=
name|partialPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|retrievePluginName ()
specifier|private
name|void
name|retrievePluginName
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|buckFile
init|=
name|pluginSource
operator|.
name|resolve
argument_list|(
literal|"BUCK"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|buckFile
argument_list|)
decl_stmt|;
name|String
name|buckContent
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"gerrit_plugin\\(name='(.*?)'"
argument_list|)
operator|.
name|matcher
argument_list|(
name|buckContent
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|pluginName
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|pluginName
argument_list|)
condition|)
block|{
if|if
condition|(
name|standalone
condition|)
block|{
name|pluginName
operator|=
name|pluginRoot
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pluginName
operator|=
name|pluginSubPath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildPluginJar ()
specifier|private
name|void
name|buildPluginJar
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Properties
name|properties
init|=
name|loadBuckProperties
argument_list|()
decl_stmt|;
name|String
name|buck
init|=
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|BUCKLC
argument_list|)
argument_list|,
name|BUCKLC
argument_list|)
decl_stmt|;
name|String
name|target
decl_stmt|;
if|if
condition|(
name|standalone
condition|)
block|{
name|target
operator|=
literal|"//:"
operator|+
name|pluginName
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|pluginSubPath
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|ProcessBuilder
name|processBuilder
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|buck
argument_list|,
literal|"build"
argument_list|,
name|target
argument_list|)
operator|.
name|directory
argument_list|(
name|pluginRoot
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// otherwise plugin jar creation fails:
name|processBuilder
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
literal|"NO_BUCKD"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|Path
name|forceJar
init|=
name|pluginSource
operator|.
name|resolve
argument_list|(
literal|"src/main/java/ForceJarIfMissing.java"
argument_list|)
decl_stmt|;
comment|// if exists after cancelled test:
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|forceJar
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|forceJar
argument_list|)
expr_stmt|;
name|testSite
operator|=
name|tempSiteDir
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
expr_stmt|;
comment|// otherwise process often hangs:
name|Path
name|log
init|=
name|testSite
operator|.
name|resolve
argument_list|(
literal|"log"
argument_list|)
decl_stmt|;
name|processBuilder
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|processBuilder
operator|.
name|redirectOutput
argument_list|(
name|Redirect
operator|.
name|appendTo
argument_list|(
name|log
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|processBuilder
operator|.
name|start
argument_list|()
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|delete
argument_list|(
name|forceJar
argument_list|)
expr_stmt|;
comment|// otherwise jar not made next time if missing again:
name|processBuilder
operator|.
name|start
argument_list|()
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadBuckProperties ()
specifier|private
name|Properties
name|loadBuckProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Path
name|propertiesPath
init|=
name|gen
operator|.
name|resolve
argument_list|(
literal|"tools"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"buck.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|propertiesPath
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|propertiesPath
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
DECL|method|createTestSiteDirs ()
specifier|private
name|void
name|createTestSiteDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|SitePaths
name|sitePath
init|=
operator|new
name|SitePaths
argument_list|(
name|testSite
argument_list|)
decl_stmt|;
name|pluginsSitePath
operator|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|sitePath
operator|.
name|plugins_dir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|sitePath
operator|.
name|tmp_dir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|sitePath
operator|.
name|etc_dir
argument_list|)
expr_stmt|;
block|}
DECL|method|copyJarToTestSite ()
specifier|private
name|void
name|copyJarToTestSite
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|pluginOut
decl_stmt|;
if|if
condition|(
name|standalone
condition|)
block|{
name|pluginOut
operator|=
name|gen
expr_stmt|;
block|}
else|else
block|{
name|pluginOut
operator|=
name|gen
operator|.
name|resolve
argument_list|(
name|pluginSubPath
argument_list|)
expr_stmt|;
block|}
name|Path
name|jar
init|=
name|pluginOut
operator|.
name|resolve
argument_list|(
name|pluginName
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
name|Path
name|dest
init|=
name|pluginsSitePath
operator|.
name|resolve
argument_list|(
name|jar
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|jar
argument_list|,
name|dest
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

