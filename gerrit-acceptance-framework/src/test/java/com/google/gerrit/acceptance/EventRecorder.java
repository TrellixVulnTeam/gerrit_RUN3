begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.acceptance
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|acceptance
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
operator|.
name|R_HEADS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|UserScopedEventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|RegistrationHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|CurrentUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|IdentifiedUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|ChangeMergedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|RefEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|events
operator|.
name|RefUpdatedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|EventRecorder
specifier|public
class|class
name|EventRecorder
block|{
DECL|field|eventListenerRegistration
specifier|private
specifier|final
name|RegistrationHandle
name|eventListenerRegistration
decl_stmt|;
DECL|field|recordedEvents
specifier|private
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|RefEvent
argument_list|>
name|recordedEvents
decl_stmt|;
annotation|@
name|Singleton
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|field|eventListeners
specifier|private
specifier|final
name|DynamicSet
argument_list|<
name|UserScopedEventListener
argument_list|>
name|eventListeners
decl_stmt|;
DECL|field|userFactory
specifier|private
specifier|final
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Factory (DynamicSet<UserScopedEventListener> eventListeners, IdentifiedUser.GenericFactory userFactory)
name|Factory
parameter_list|(
name|DynamicSet
argument_list|<
name|UserScopedEventListener
argument_list|>
name|eventListeners
parameter_list|,
name|IdentifiedUser
operator|.
name|GenericFactory
name|userFactory
parameter_list|)
block|{
name|this
operator|.
name|eventListeners
operator|=
name|eventListeners
expr_stmt|;
name|this
operator|.
name|userFactory
operator|=
name|userFactory
expr_stmt|;
block|}
DECL|method|create (TestAccount user)
specifier|public
name|EventRecorder
name|create
parameter_list|(
name|TestAccount
name|user
parameter_list|)
block|{
return|return
operator|new
name|EventRecorder
argument_list|(
name|eventListeners
argument_list|,
name|userFactory
operator|.
name|create
argument_list|(
name|user
operator|.
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|EventRecorder (DynamicSet<UserScopedEventListener> eventListeners, final IdentifiedUser user)
specifier|public
name|EventRecorder
parameter_list|(
name|DynamicSet
argument_list|<
name|UserScopedEventListener
argument_list|>
name|eventListeners
parameter_list|,
specifier|final
name|IdentifiedUser
name|user
parameter_list|)
block|{
name|recordedEvents
operator|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|eventListenerRegistration
operator|=
name|eventListeners
operator|.
name|add
argument_list|(
operator|new
name|UserScopedEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RefEvent
condition|)
block|{
name|RefEvent
name|event
init|=
operator|(
name|RefEvent
operator|)
name|e
decl_stmt|;
name|String
name|key
init|=
name|key
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
operator|.
name|getProjectNameKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|event
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|recordedEvents
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CurrentUser
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|key (String type, String project, String ref)
specifier|private
specifier|static
name|String
name|key
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|project
parameter_list|,
name|String
name|ref
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s-%s"
argument_list|,
name|type
argument_list|,
name|project
argument_list|,
name|ref
argument_list|)
return|;
block|}
DECL|method|getOneRefUpdate (String project, String refName)
specifier|public
name|RefUpdatedEvent
name|getOneRefUpdate
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|refName
parameter_list|)
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|RefUpdatedEvent
operator|.
name|TYPE
argument_list|,
name|project
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|recordedEvents
argument_list|)
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RefEvent
argument_list|>
name|events
init|=
name|recordedEvents
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|events
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Event
name|e
init|=
name|events
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|RefUpdatedEvent
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|(
name|RefUpdatedEvent
operator|)
name|e
return|;
block|}
DECL|method|getRefUpdates (String project, String refName, int expectedSize)
specifier|public
name|ImmutableList
argument_list|<
name|RefEvent
argument_list|>
name|getRefUpdates
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|refName
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|RefUpdatedEvent
operator|.
name|TYPE
argument_list|,
name|project
argument_list|,
name|refName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|recordedEvents
argument_list|)
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RefEvent
argument_list|>
name|events
init|=
name|recordedEvents
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|events
argument_list|)
operator|.
name|hasSize
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|events
argument_list|)
return|;
block|}
DECL|method|getOneChangeMerged (String project, String branch, final String changeNumber)
specifier|public
name|ChangeMergedEvent
name|getOneChangeMerged
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|branch
parameter_list|,
specifier|final
name|String
name|changeNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|ChangeMergedEvent
operator|.
name|TYPE
argument_list|,
name|project
argument_list|,
name|branch
operator|.
name|startsWith
argument_list|(
name|R_HEADS
argument_list|)
condition|?
name|branch
else|:
name|R_HEADS
operator|+
name|branch
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|recordedEvents
argument_list|)
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RefEvent
argument_list|>
name|events
init|=
name|FluentIterable
operator|.
name|from
argument_list|(
name|recordedEvents
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|Predicate
argument_list|<
name|RefEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|RefEvent
name|input
parameter_list|)
block|{
name|assertThat
argument_list|(
name|input
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|ChangeMergedEvent
operator|.
name|class
argument_list|)
expr_stmt|;
name|ChangeMergedEvent
name|e
init|=
operator|(
name|ChangeMergedEvent
operator|)
name|input
decl_stmt|;
return|return
name|e
operator|.
name|change
operator|.
name|get
argument_list|()
operator|.
name|number
operator|.
name|equals
argument_list|(
name|changeNumber
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|events
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|ChangeMergedEvent
operator|)
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|eventListenerRegistration
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

