begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|ChangeQueryBuilder
operator|.
name|FIELD_CHANGE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|ChangeQueryBuilder
operator|.
name|FIELD_COMMIT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|ChangeQueryBuilder
operator|.
name|FIELD_OWNER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|ChangeQueryBuilder
operator|.
name|FIELD_REVIEWER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
operator|.
name|and
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|Predicate
operator|.
name|or
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|AbbreviatedObjectId
import|;
end_import

begin_class
DECL|class|ChangeQueryBuilderTest
specifier|public
class|class
name|ChangeQueryBuilderTest
extends|extends
name|TestCase
block|{
DECL|method|f (final String name, final String value)
specifier|private
specifier|static
name|OperatorPredicate
name|f
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|OperatorPredicate
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|owner (final String who)
specifier|private
specifier|static
name|Predicate
name|owner
parameter_list|(
specifier|final
name|String
name|who
parameter_list|)
block|{
return|return
name|f
argument_list|(
name|FIELD_OWNER
argument_list|,
name|who
argument_list|)
return|;
block|}
DECL|method|reviewer (final String who)
specifier|private
specifier|static
name|Predicate
name|reviewer
parameter_list|(
specifier|final
name|String
name|who
parameter_list|)
block|{
return|return
name|f
argument_list|(
name|FIELD_REVIEWER
argument_list|,
name|who
argument_list|)
return|;
block|}
DECL|method|commit (final String idstr)
specifier|private
specifier|static
name|Predicate
name|commit
parameter_list|(
specifier|final
name|String
name|idstr
parameter_list|)
block|{
specifier|final
name|AbbreviatedObjectId
name|id
init|=
name|AbbreviatedObjectId
operator|.
name|fromString
argument_list|(
name|idstr
argument_list|)
decl_stmt|;
return|return
operator|new
name|ObjectIdPredicate
argument_list|(
name|FIELD_COMMIT
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|p (final String str)
specifier|private
specifier|static
name|Predicate
name|p
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
throws|throws
name|QueryParseException
block|{
return|return
operator|new
name|ChangeQueryBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|str
argument_list|)
return|;
block|}
DECL|method|testEmptyQuery ()
specifier|public
name|void
name|testEmptyQuery
parameter_list|()
block|{
try|try
block|{
name|p
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"line 0:-1 no viable alternative at input '<EOF>'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailInvalidOperator ()
specifier|public
name|void
name|testFailInvalidOperator
parameter_list|()
block|{
specifier|final
name|String
name|op
init|=
literal|"thiswillneverbeaqueryoperatoritistoolongtotype"
decl_stmt|;
specifier|final
name|String
name|val
init|=
literal|"true"
decl_stmt|;
try|try
block|{
name|p
argument_list|(
name|op
operator|+
literal|":"
operator|+
name|val
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unsupported operator "
operator|+
name|op
operator|+
literal|":"
operator|+
name|val
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailNestedOperator ()
specifier|public
name|void
name|testFailNestedOperator
parameter_list|()
block|{
try|try
block|{
name|p
argument_list|(
literal|"commit:(foo:bar whiz:bang)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Nested operator not expected: foo"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// commit:
DECL|method|testDefaultSHA1 ()
specifier|public
name|void
name|testDefaultSHA1
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"6EA15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|commit
argument_list|(
literal|"6ea15b73668073fd9f70b2635efcb8cf8aabda22"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"6ea15b73668073fd9f70b2635efcb8cf8aabda22"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommitSHA1 ()
specifier|public
name|void
name|testCommitSHA1
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"commit:6ea15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"commit:6EA15"
argument_list|)
argument_list|)
expr_stmt|;
comment|// note: forces lowercase
name|assertEquals
argument_list|(
name|commit
argument_list|(
literal|"6ea15b73668073fd9f70b2635efcb8cf8aabda22"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"commit:6ea15b73668073fd9f70b2635efcb8cf8aabda22"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|p
argument_list|(
literal|"commit:yonothash"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Error in operator commit:yonothash"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// change:
DECL|method|testDefaultChangeID ()
specifier|public
name|void
name|testDefaultChangeID
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|f
argument_list|(
name|FIELD_CHANGE
argument_list|,
literal|"1234"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeID ()
specifier|public
name|void
name|testChangeID
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|f
argument_list|(
name|FIELD_CHANGE
argument_list|,
literal|"1234"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"change:1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// owner:
DECL|method|testOwnerBare ()
specifier|public
name|void
name|testOwnerBare
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"Bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:Bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:bob@example.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"Bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: Bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: bob@example.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\tbob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"Bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\tBob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\tbob@example.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOwnerQuoted ()
specifier|public
name|void
name|testOwnerQuoted
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\"bob\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\"bob@example.com\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"<bob@example.com>"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\"<bob@example.com>\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"A U Thor"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\"A U Thor\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: \"bob\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: \"bob@example.com\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"<bob@example.com>"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: \"<bob@example.com>\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"A U Thor"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner: \"A U Thor\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\t\"bob\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\t\"bob@example.com\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"<bob@example.com>"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\t\"<bob@example.com>\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|(
literal|"A U Thor"
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"owner:\t\"A U Thor\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOwner_NOT ()
specifier|public
name|void
name|testOwner_NOT
parameter_list|()
throws|throws
name|QueryParseException
block|{
name|assertEquals
argument_list|(
name|not
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"-owner:bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|not
argument_list|(
name|owner
argument_list|(
literal|"Bob"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"-owner:Bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|not
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"-owner:bob@example.com"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|not
argument_list|(
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"NOT owner:bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|not
argument_list|(
name|owner
argument_list|(
literal|"Bob"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"NOT owner:Bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|not
argument_list|(
name|owner
argument_list|(
literal|"bob@example.com"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|(
literal|"NOT owner:bob@example.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// AND
DECL|method|testAND_Styles2 ()
specifier|public
name|void
name|testAND_Styles2
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|and
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 owner:bob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 AND owner:bob"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAND_Styles3 ()
specifier|public
name|void
name|testAND_Styles3
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|and
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 owner:bob reviewer:alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 AND owner:bob reviewer:alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 owner:bob AND reviewer:alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 AND owner:bob AND reviewer:alice"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAND_ManyValuesOneOperator ()
specifier|public
name|void
name|testAND_ManyValuesOneOperator
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|and
argument_list|(
name|reviewer
argument_list|(
literal|"alice"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"charlie"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:(alice bob charlie)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:(alice AND bob charlie)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:(alice bob AND charlie)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:(alice AND bob AND charlie)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAND_FlattensOperators ()
specifier|public
name|void
name|testAND_FlattensOperators
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|and
argument_list|(
name|reviewer
argument_list|(
literal|"alice"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"charlie"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:alice reviewer:(bob charlie)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OR
DECL|method|testOR_2 ()
specifier|public
name|void
name|testOR_2
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|or
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 OR owner:bob"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOR_3 ()
specifier|public
name|void
name|testOR_3
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|or
argument_list|(
name|commit
argument_list|(
literal|"6ea15"
argument_list|)
argument_list|,
name|owner
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"6ea15 OR owner:bob OR reviewer:alice"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOR_ManyValuesOneOperator ()
specifier|public
name|void
name|testOR_ManyValuesOneOperator
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|or
argument_list|(
name|reviewer
argument_list|(
literal|"alice"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"charlie"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:(alice OR bob OR charlie)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOR_FlattensOperators ()
specifier|public
name|void
name|testOR_FlattensOperators
parameter_list|()
throws|throws
name|QueryParseException
block|{
specifier|final
name|Predicate
name|exp
init|=
name|or
argument_list|(
name|reviewer
argument_list|(
literal|"alice"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
name|reviewer
argument_list|(
literal|"charlie"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p
argument_list|(
literal|"reviewer:alice OR reviewer:(bob OR charlie)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

