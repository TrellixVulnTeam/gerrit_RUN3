begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009, Yann Simon<yann.simon.fr@gmail.com>  *  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * - Redistributions of source code must retain the above copyright notice, this  * list of conditions and the following disclaimer.  *  * - Redistributions in binary form must reproduce the above copyright notice,  * this list of conditions and the following disclaimer in the documentation  * and/or other materials provided with the distribution.  *  * - Neither the name of the Git Development Community nor the names of its  * contributors may be used to endorse or promote products derived from this  * software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
DECL|package|com.google.gerrit.testutil
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_class
DECL|class|MockSystemReader
class|class
name|MockSystemReader
extends|extends
name|SystemReader
block|{
DECL|field|values
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|userGitConfig
name|FileBasedConfig
name|userGitConfig
decl_stmt|;
DECL|method|MockSystemReader ()
name|MockSystemReader
parameter_list|()
block|{
name|init
argument_list|(
name|Constants
operator|.
name|OS_USER_NAME_KEY
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|Constants
operator|.
name|GIT_AUTHOR_NAME_KEY
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|Constants
operator|.
name|GIT_AUTHOR_EMAIL_KEY
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|Constants
operator|.
name|GIT_COMMITTER_NAME_KEY
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|Constants
operator|.
name|GIT_COMMITTER_EMAIL_KEY
argument_list|)
expr_stmt|;
name|userGitConfig
operator|=
operator|new
name|FileBasedConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|init (final String n)
specifier|private
name|void
name|init
parameter_list|(
specifier|final
name|String
name|n
parameter_list|)
block|{
name|values
operator|.
name|put
argument_list|(
name|n
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getenv (String variable)
specifier|public
name|String
name|getenv
parameter_list|(
name|String
name|variable
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|variable
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String key)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|openUserConfig ()
specifier|public
name|FileBasedConfig
name|openUserConfig
parameter_list|()
block|{
return|return
name|userGitConfig
return|;
block|}
annotation|@
name|Override
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
literal|"fake.host.example.com"
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentTime ()
specifier|public
name|long
name|getCurrentTime
parameter_list|()
block|{
return|return
literal|1250379778668L
return|;
comment|// Sat Aug 15 20:12:58 GMT-03:30 2009
block|}
annotation|@
name|Override
DECL|method|getTimezone (long when)
specifier|public
name|int
name|getTimezone
parameter_list|(
name|long
name|when
parameter_list|)
block|{
return|return
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT-03:30"
argument_list|)
operator|.
name|getOffset
argument_list|(
name|when
argument_list|)
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
return|;
block|}
block|}
end_class

end_unit

