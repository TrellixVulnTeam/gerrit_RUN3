begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|org.spearce.jgit.diff
package|package
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_class
DECL|class|EditDeserializer
specifier|public
class|class
name|EditDeserializer
implements|implements
name|JsonDeserializer
argument_list|<
name|Edit
argument_list|>
implements|,
name|JsonSerializer
argument_list|<
name|Edit
argument_list|>
block|{
DECL|method|deserialize (final JsonElement json, final Type typeOfT, final JsonDeserializationContext context)
specifier|public
name|Edit
name|deserialize
parameter_list|(
specifier|final
name|JsonElement
name|json
parameter_list|,
specifier|final
name|Type
name|typeOfT
parameter_list|,
specifier|final
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
if|if
condition|(
name|json
operator|.
name|isJsonNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|json
operator|.
name|isJsonArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
literal|"Expected array of 4for Edit type"
argument_list|)
throw|;
block|}
specifier|final
name|JsonArray
name|a
init|=
operator|(
name|JsonArray
operator|)
name|json
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
literal|"Expected array of 4 for Edit type"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Edit
argument_list|(
name|get
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
argument_list|,
name|get
argument_list|(
name|a
argument_list|,
literal|1
argument_list|)
argument_list|,
name|get
argument_list|(
name|a
argument_list|,
literal|2
argument_list|)
argument_list|,
name|get
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
DECL|method|get (final JsonArray a, final int idx)
specifier|private
specifier|static
name|int
name|get
parameter_list|(
specifier|final
name|JsonArray
name|a
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
throws|throws
name|JsonParseException
block|{
specifier|final
name|JsonElement
name|v
init|=
name|a
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isJsonPrimitive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
literal|"Expected array of 4 for Edit type"
argument_list|)
throw|;
block|}
specifier|final
name|JsonPrimitive
name|p
init|=
operator|(
name|JsonPrimitive
operator|)
name|v
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isNumber
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
literal|"Expected array of 4 for Edit type"
argument_list|)
throw|;
block|}
return|return
name|p
operator|.
name|getAsInt
argument_list|()
return|;
block|}
DECL|method|serialize (final Edit src, final Type typeOfSrc, final JsonSerializationContext context)
specifier|public
name|JsonElement
name|serialize
parameter_list|(
specifier|final
name|Edit
name|src
parameter_list|,
specifier|final
name|Type
name|typeOfSrc
parameter_list|,
specifier|final
name|JsonSerializationContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|JsonNull
argument_list|()
return|;
block|}
specifier|final
name|JsonArray
name|a
init|=
operator|new
name|JsonArray
argument_list|()
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|getBeginA
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|getEndA
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|getBeginB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|getEndB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
end_class

end_unit

