begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.user.client
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|user
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|PluginSafeDialogBoxImplAutoHide
class|class
name|PluginSafeDialogBoxImplAutoHide
extends|extends
name|PluginSafeDialogBoxImpl
block|{
DECL|field|hidden
specifier|private
name|boolean
name|hidden
decl_stmt|;
DECL|field|hiddenElements
specifier|private
name|ArrayList
argument_list|<
name|HiddenElement
argument_list|>
name|hiddenElements
init|=
operator|new
name|ArrayList
argument_list|<
name|HiddenElement
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|visible (final boolean dialogVisible)
name|void
name|visible
parameter_list|(
specifier|final
name|boolean
name|dialogVisible
parameter_list|)
block|{
if|if
condition|(
name|dialogVisible
condition|)
block|{
name|hideAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|showAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hideAll ()
specifier|private
name|void
name|hideAll
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hidden
condition|)
block|{
name|hideSet
argument_list|(
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"object"
argument_list|)
argument_list|)
expr_stmt|;
name|hideSet
argument_list|(
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"embed"
argument_list|)
argument_list|)
expr_stmt|;
name|hideSet
argument_list|(
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"applet"
argument_list|)
argument_list|)
expr_stmt|;
name|hidden
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|hideSet (final NodeList<Element> all)
specifier|private
name|void
name|hideSet
parameter_list|(
specifier|final
name|NodeList
argument_list|<
name|Element
argument_list|>
name|all
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|all
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|e
init|=
name|all
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|UIObject
operator|.
name|isVisible
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|hiddenElements
operator|.
name|add
argument_list|(
operator|new
name|HiddenElement
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|showAll ()
specifier|private
name|void
name|showAll
parameter_list|()
block|{
if|if
condition|(
name|hidden
condition|)
block|{
for|for
control|(
specifier|final
name|HiddenElement
name|e
range|:
name|hiddenElements
control|)
block|{
name|e
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
name|hiddenElements
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hidden
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|class|HiddenElement
specifier|private
specifier|static
class|class
name|HiddenElement
block|{
DECL|field|element
specifier|private
specifier|final
name|Element
name|element
decl_stmt|;
DECL|field|visibility
specifier|private
specifier|final
name|String
name|visibility
decl_stmt|;
DECL|method|HiddenElement (final Element element)
name|HiddenElement
parameter_list|(
specifier|final
name|Element
name|element
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|visibility
operator|=
name|getVisibility
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|setVisibility
argument_list|(
name|element
argument_list|,
literal|"hidden"
argument_list|)
expr_stmt|;
block|}
DECL|method|restore ()
name|void
name|restore
parameter_list|()
block|{
name|setVisibility
argument_list|(
name|element
argument_list|,
name|visibility
argument_list|)
expr_stmt|;
block|}
DECL|method|getVisibility (Element elem)
specifier|private
specifier|static
specifier|native
name|String
name|getVisibility
parameter_list|(
name|Element
name|elem
parameter_list|)
comment|/*-{ return elem.style.visibility; }-*/
function_decl|;
DECL|method|setVisibility (Element elem, String disp)
specifier|private
specifier|static
specifier|native
name|void
name|setVisibility
parameter_list|(
name|Element
name|elem
parameter_list|,
name|String
name|disp
parameter_list|)
comment|/*-{ elem.style.visibility = disp; }-*/
function_decl|;
block|}
block|}
end_class

end_unit

