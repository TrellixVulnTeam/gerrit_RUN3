begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.linker.server
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|linker
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/** A single permutation of the compiled GWT application. */
end_comment

begin_class
DECL|class|Permutation
specifier|public
class|class
name|Permutation
block|{
DECL|field|selector
specifier|private
specifier|final
name|PermutationSelector
name|selector
decl_stmt|;
DECL|field|cacheHTML
specifier|private
specifier|final
name|String
name|cacheHTML
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|String
index|[]
name|values
decl_stmt|;
DECL|method|Permutation (PermutationSelector sel, String cacheHTML, String[] values)
name|Permutation
parameter_list|(
name|PermutationSelector
name|sel
parameter_list|,
name|String
name|cacheHTML
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|sel
expr_stmt|;
name|this
operator|.
name|cacheHTML
operator|=
name|cacheHTML
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|matches (String[] r)
name|boolean
name|matches
parameter_list|(
name|String
index|[]
name|r
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|values
argument_list|,
name|r
argument_list|)
return|;
block|}
comment|/**    * Append GWT bootstrap for this permutation onto the end of the body.    *<p>    * The GWT bootstrap for this particular permutation is appended onto the end    * of the {@code body} element of the passed host page.    *<p>    * To keep the bootstrap code small and simple, not all GWT features are    * actually supported. The {@code gwt:property}, {@code gwt:onPropertyErrorFn}    * and {@code gwt:onLoadErrorFn} meta tags are ignored and not handled.    *<p>    * Load order may differ from the standard GWT {@code nocache.js}. The browser    * is asked to load the iframe immediately, rather than after the body has    * finished loading.    *    * @param dom host page HTML document.    */
DECL|method|inject (Document dom)
specifier|public
name|void
name|inject
parameter_list|(
name|Document
name|dom
parameter_list|)
block|{
name|String
name|moduleName
init|=
name|selector
operator|.
name|getModuleName
argument_list|()
decl_stmt|;
name|String
name|moduleFunc
init|=
name|moduleName
decl_stmt|;
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"function "
operator|+
name|moduleFunc
operator|+
literal|"(){"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"var s,l,t"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|",w=window"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|",d=document"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|",n='"
operator|+
name|moduleName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|",f=d.createElement('iframe')"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
comment|// Callback to execute the module once both s and l are true.
comment|//
name|s
operator|.
name|append
argument_list|(
literal|"function m(){"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"if(s&&l){"
argument_list|)
expr_stmt|;
comment|// Base path needs to be absolute. There isn't an easy way to do this
comment|// other than forcing an image to load and then pulling the URL back.
comment|//
name|s
operator|.
name|append
argument_list|(
literal|"var b,i=d.createElement('img');"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"i.src=n+'/clear.cache.gif';"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"b=i.src;"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"b=b.substring(0,b.lastIndexOf('/')+1);"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|moduleFunc
operator|+
literal|"=null;"
argument_list|)
expr_stmt|;
comment|// allow us to GC
name|s
operator|.
name|append
argument_list|(
literal|"f.contentWindow.gwtOnLoad(undefined,n,b);"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
comment|// Set s true when the module script has finished loading. The
comment|// exact name here is known to the IFrameLinker and is called by
comment|// the code in the iframe.
comment|//
name|s
operator|.
name|append
argument_list|(
name|moduleFunc
operator|+
literal|".onScriptLoad=function(){"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"s=1;m();"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"};"
argument_list|)
expr_stmt|;
comment|// Set l true when the browser has finished processing the iframe
comment|// tag, and everything else on the page.
comment|//
name|s
operator|.
name|append
argument_list|(
name|moduleFunc
operator|+
literal|".r=function(){"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"l=1;m();"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"};"
argument_list|)
expr_stmt|;
comment|// Prevents mixed mode security in IE6/7.
name|s
operator|.
name|append
argument_list|(
literal|"f.src=\"javascript:''\";"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"f.id=n;"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"f.style.cssText"
operator|+
literal|"='position:absolute;width:0;height:0;border:none';"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"f.tabIndex=-1;"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"d.body.appendChild(f);"
argument_list|)
expr_stmt|;
comment|// The src has to be set after the iframe is attached to the DOM to avoid
comment|// refresh quirks in Safari. We have to use the location.replace trick to
comment|// avoid FF2 refresh quirks.
comment|//
name|s
operator|.
name|append
argument_list|(
literal|"f.contentWindow.location.replace(n+'/"
operator|+
name|cacheHTML
operator|+
literal|"');"
argument_list|)
expr_stmt|;
comment|// defer attribute here is to workaround IE running immediately.
comment|//
name|s
operator|.
name|append
argument_list|(
literal|"d.write('<script defer=\"defer\">"
comment|//
operator|+
name|moduleFunc
operator|+
literal|".r()</'+'script>');"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|moduleFunc
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"\n//"
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|html
init|=
name|dom
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|Element
name|head
init|=
operator|(
name|Element
operator|)
name|html
operator|.
name|getElementsByTagName
argument_list|(
literal|"head"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|body
init|=
operator|(
name|Element
operator|)
name|html
operator|.
name|getElementsByTagName
argument_list|(
literal|"body"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|css
range|:
name|selector
operator|.
name|getCSS
argument_list|()
control|)
block|{
if|if
condition|(
name|isRelativeURL
argument_list|(
name|css
argument_list|)
condition|)
block|{
name|css
operator|=
name|moduleName
operator|+
literal|'/'
operator|+
name|css
expr_stmt|;
block|}
specifier|final
name|Element
name|link
init|=
name|dom
operator|.
name|createElement
argument_list|(
literal|"link"
argument_list|)
decl_stmt|;
name|link
operator|.
name|setAttribute
argument_list|(
literal|"rel"
argument_list|,
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|head
operator|.
name|appendChild
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Element
name|script
init|=
name|dom
operator|.
name|createElement
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
name|script
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"text/javascript"
argument_list|)
expr_stmt|;
name|script
operator|.
name|setAttribute
argument_list|(
literal|"language"
argument_list|,
literal|"javascript"
argument_list|)
expr_stmt|;
name|script
operator|.
name|appendChild
argument_list|(
name|dom
operator|.
name|createComment
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|body
operator|.
name|appendChild
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
DECL|method|isRelativeURL (String src)
specifier|private
specifier|static
name|boolean
name|isRelativeURL
parameter_list|(
name|String
name|src
parameter_list|)
block|{
if|if
condition|(
name|src
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
comment|// If it parses as a URL, assume it is not relative.
comment|//
operator|new
name|URL
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{     }
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

