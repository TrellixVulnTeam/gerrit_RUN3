begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.safehtml.client
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|PrettyFormatter
specifier|public
specifier|abstract
class|class
name|PrettyFormatter
block|{
DECL|field|STYLES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MultiLineStyle
argument_list|>
name|STYLES
decl_stmt|;
DECL|field|DEFAULT_STYLE
specifier|private
specifier|static
specifier|final
name|MultiLineStyle
name|DEFAULT_STYLE
init|=
operator|new
name|MultiLineStyle
argument_list|()
block|{}
decl_stmt|;
static|static
block|{
name|STYLES
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MultiLineStyle
argument_list|>
argument_list|()
expr_stmt|;
name|MultiLineStyle
name|c
init|=
operator|new
name|MultiLineStyle
operator|.
name|Simple
argument_list|(
literal|"/*"
argument_list|,
literal|"*/"
argument_list|)
decl_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"h"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"cc"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"cpp"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"cxx"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"cyc"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"m"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"cs"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"java"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"js"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"css"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|MultiLineStyle
name|xml
init|=
operator|new
name|MultiLineStyle
operator|.
name|Simple
argument_list|(
literal|"<!--"
argument_list|,
literal|"-->"
argument_list|)
decl_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"xml"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"html"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|STYLES
operator|.
name|put
argument_list|(
literal|"sgml"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommentStyle (final String lang)
specifier|private
specifier|static
name|MultiLineStyle
name|getCommentStyle
parameter_list|(
specifier|final
name|String
name|lang
parameter_list|)
block|{
name|MultiLineStyle
name|style
init|=
name|STYLES
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
return|return
name|style
operator|!=
literal|null
condition|?
name|style
else|:
name|DEFAULT_STYLE
return|;
block|}
DECL|method|newFormatter (String lang)
specifier|public
specifier|static
name|PrettyFormatter
name|newFormatter
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|Pretty
operator|.
name|loaded
condition|?
operator|new
name|Pretty
argument_list|(
name|lang
argument_list|)
else|:
operator|new
name|PassThrough
argument_list|()
return|;
block|}
DECL|field|showWhiteSpaceErrors
specifier|private
name|boolean
name|showWhiteSpaceErrors
decl_stmt|;
DECL|field|lineLength
specifier|private
name|int
name|lineLength
init|=
literal|100
decl_stmt|;
DECL|method|setShowWhiteSpaceErrors (final boolean show)
specifier|public
name|void
name|setShowWhiteSpaceErrors
parameter_list|(
specifier|final
name|boolean
name|show
parameter_list|)
block|{
name|showWhiteSpaceErrors
operator|=
name|show
expr_stmt|;
block|}
DECL|method|setLineLength (final int len)
specifier|public
name|void
name|setLineLength
parameter_list|(
specifier|final
name|int
name|len
parameter_list|)
block|{
name|lineLength
operator|=
name|len
expr_stmt|;
block|}
DECL|method|format (String line)
specifier|public
name|SafeHtml
name|format
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|SafeHtml
name|html
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|wrapLines
argument_list|(
name|line
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|showWhiteSpaceErrors
condition|)
block|{
name|html
operator|=
name|showTabAfterSpace
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|=
name|showTrailingWhitespace
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
name|html
operator|=
name|prettify
argument_list|(
name|html
argument_list|)
expr_stmt|;
return|return
name|html
return|;
block|}
DECL|method|update (String line)
specifier|public
name|void
name|update
parameter_list|(
name|String
name|line
parameter_list|)
block|{   }
DECL|method|wrapLines (final String src)
specifier|private
name|String
name|wrapLines
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
block|{
if|if
condition|(
name|lineLength
operator|<=
literal|0
condition|)
block|{
comment|// Caller didn't request for line wrapping; use it unmodified.
comment|//
return|return
name|src
return|;
block|}
if|if
condition|(
name|src
operator|.
name|length
argument_list|()
operator|<
name|lineLength
operator|&&
name|src
operator|.
name|indexOf
argument_list|(
literal|'\t'
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// We're too short and there are no horizontal tabs, line is fine
comment|// as-is so bypass the longer line wrapping code below.
return|return
name|src
return|;
block|}
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|lineLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|src
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cLen
init|=
name|c
operator|==
literal|'\t'
condition|?
literal|8
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|lineLen
operator|>=
name|lineLength
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|lineLen
operator|=
literal|0
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|lineLen
operator|+=
name|cLen
expr_stmt|;
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|showTabAfterSpace (SafeHtml src)
specifier|private
specifier|static
name|SafeHtml
name|showTabAfterSpace
parameter_list|(
name|SafeHtml
name|src
parameter_list|)
block|{
return|return
name|src
operator|.
name|replaceFirst
argument_list|(
literal|"^(  *\t)"
argument_list|,
literal|"<span class=\"gerrit-whitespaceerror\">$1</span>"
argument_list|)
return|;
block|}
DECL|method|showTrailingWhitespace (SafeHtml src)
specifier|private
specifier|static
name|SafeHtml
name|showTrailingWhitespace
parameter_list|(
name|SafeHtml
name|src
parameter_list|)
block|{
return|return
name|src
operator|.
name|replaceFirst
argument_list|(
literal|"([ \t][ \t]*)(\r?\n?)$"
argument_list|,
literal|"<span class=\"gerrit-whitespaceerror\">$1</span>$2"
argument_list|)
return|;
block|}
DECL|method|prettify (SafeHtml line)
specifier|protected
name|SafeHtml
name|prettify
parameter_list|(
name|SafeHtml
name|line
parameter_list|)
block|{
return|return
name|line
return|;
block|}
DECL|class|PassThrough
specifier|private
specifier|static
class|class
name|PassThrough
extends|extends
name|PrettyFormatter
block|{   }
DECL|class|Pretty
specifier|private
specifier|static
class|class
name|Pretty
extends|extends
name|PrettyFormatter
block|{
DECL|field|loaded
specifier|static
specifier|final
name|boolean
name|loaded
init|=
name|isLoaded
argument_list|()
decl_stmt|;
DECL|method|isLoaded ()
specifier|private
specifier|static
specifier|native
name|boolean
name|isLoaded
parameter_list|()
comment|/*-{ return $wnd['prettyPrintOne'] != null }-*/
function_decl|;
DECL|field|srcType
specifier|private
specifier|final
name|String
name|srcType
decl_stmt|;
DECL|field|commentStyle
specifier|private
specifier|final
name|MultiLineStyle
name|commentStyle
decl_stmt|;
DECL|field|currentStyle
specifier|private
name|MultiLineStyle
name|currentStyle
decl_stmt|;
DECL|method|Pretty (final String lang)
name|Pretty
parameter_list|(
specifier|final
name|String
name|lang
parameter_list|)
block|{
name|srcType
operator|=
name|lang
expr_stmt|;
name|commentStyle
operator|=
name|getCommentStyle
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prettify (final SafeHtml src)
specifier|protected
name|SafeHtml
name|prettify
parameter_list|(
specifier|final
name|SafeHtml
name|src
parameter_list|)
block|{
name|String
name|line
init|=
name|src
operator|.
name|asString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"&#39;"
argument_list|,
literal|"'"
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentStyle
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|isEnd
init|=
name|currentStyle
operator|.
name|isEnd
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|line
operator|=
name|currentStyle
operator|.
name|restart
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|prettifyNative
argument_list|(
name|line
argument_list|,
name|srcType
argument_list|)
expr_stmt|;
name|line
operator|=
name|currentStyle
operator|.
name|unrestart
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEnd
condition|)
block|{
name|currentStyle
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentStyle
operator|=
name|commentStyle
operator|.
name|isStart
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|prettifyNative
argument_list|(
name|line
argument_list|,
name|srcType
argument_list|)
expr_stmt|;
block|}
return|return
name|SafeHtml
operator|.
name|asis
argument_list|(
name|line
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|update (String line)
specifier|public
name|void
name|update
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|currentStyle
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentStyle
operator|.
name|isEnd
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|currentStyle
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentStyle
operator|=
name|commentStyle
operator|.
name|isStart
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prettifyNative (String srcText, String srcType)
specifier|private
specifier|static
specifier|native
name|String
name|prettifyNative
parameter_list|(
name|String
name|srcText
parameter_list|,
name|String
name|srcType
parameter_list|)
comment|/*-{ return $wnd.prettyPrintOne(srcText, srcType); }-*/
function_decl|;
block|}
block|}
end_class

end_unit

