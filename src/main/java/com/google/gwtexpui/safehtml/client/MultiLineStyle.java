begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gwtexpui.safehtml.client
package|package
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
package|;
end_package

begin_class
DECL|class|MultiLineStyle
specifier|public
specifier|abstract
class|class
name|MultiLineStyle
block|{
DECL|method|isStart (String line)
specifier|public
name|MultiLineStyle
name|isStart
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|isEnd (String line)
specifier|public
name|boolean
name|isEnd
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|restart (String line)
specifier|public
name|String
name|restart
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
return|;
block|}
DECL|method|unrestart (String line)
specifier|public
name|String
name|unrestart
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
return|;
block|}
DECL|class|Simple
specifier|static
class|class
name|Simple
extends|extends
name|MultiLineStyle
block|{
DECL|field|begin
specifier|private
specifier|final
name|String
name|begin
decl_stmt|;
DECL|field|end
specifier|private
specifier|final
name|String
name|end
decl_stmt|;
DECL|method|Simple (String b, String e)
name|Simple
parameter_list|(
name|String
name|b
parameter_list|,
name|String
name|e
parameter_list|)
block|{
name|begin
operator|=
name|b
expr_stmt|;
name|end
operator|=
name|e
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isStart (String line)
specifier|public
name|MultiLineStyle
name|isStart
parameter_list|(
name|String
name|line
parameter_list|)
block|{
specifier|final
name|int
name|lastBegin
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
name|begin
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastBegin
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|lastEnd
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
name|end
argument_list|)
decl_stmt|;
return|return
name|lastBegin
operator|>
name|lastEnd
condition|?
name|this
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isEnd (String line)
specifier|public
name|boolean
name|isEnd
parameter_list|(
name|String
name|line
parameter_list|)
block|{
specifier|final
name|int
name|firstEnd
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstEnd
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|lastBegin
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
name|begin
argument_list|)
decl_stmt|;
return|return
name|lastBegin
operator|<
name|firstEnd
return|;
block|}
annotation|@
name|Override
DECL|method|restart (String line)
specifier|public
name|String
name|restart
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|begin
operator|+
literal|"\n"
operator|+
name|line
return|;
block|}
annotation|@
name|Override
DECL|method|unrestart (String formattedHtml)
specifier|public
name|String
name|unrestart
parameter_list|(
name|String
name|formattedHtml
parameter_list|)
block|{
specifier|final
name|int
name|beginPos
init|=
name|formattedHtml
operator|.
name|indexOf
argument_list|(
name|begin
argument_list|)
decl_stmt|;
specifier|final
name|String
name|lineBegin
init|=
name|formattedHtml
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|beginPos
argument_list|)
decl_stmt|;
name|String
name|lineEnd
init|=
name|formattedHtml
operator|.
name|substring
argument_list|(
name|beginPos
operator|+
name|begin
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineEnd
operator|.
name|startsWith
argument_list|(
literal|"<br"
argument_list|)
condition|)
block|{
name|lineEnd
operator|=
name|lineEnd
operator|.
name|substring
argument_list|(
name|lineEnd
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|lineBegin
operator|+
name|lineEnd
return|;
block|}
block|}
block|}
end_class

end_unit

