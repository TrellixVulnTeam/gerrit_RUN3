begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|NoRemoteRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|NotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|errors
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|PushResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RefSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|RemoteRefUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|transport
operator|.
name|URIish
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A push to remote operation started by {@link PushQueue}.  *<p>  * Instance members are protected by the lock within PushQueue. Callers must  * take that lock to ensure they are working with a current view of the object.  */
end_comment

begin_class
DECL|class|PushOp
class|class
name|PushOp
implements|implements
name|Runnable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|PushQueue
operator|.
name|log
decl_stmt|;
DECL|field|delta
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|delta
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|projectName
specifier|private
specifier|final
name|String
name|projectName
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|RemoteConfig
name|config
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|URIish
name|uri
decl_stmt|;
DECL|method|PushOp (final String d, final RemoteConfig c, final URIish u)
name|PushOp
parameter_list|(
specifier|final
name|String
name|d
parameter_list|,
specifier|final
name|RemoteConfig
name|c
parameter_list|,
specifier|final
name|URIish
name|u
parameter_list|)
block|{
name|projectName
operator|=
name|d
expr_stmt|;
name|config
operator|=
name|c
expr_stmt|;
name|uri
operator|=
name|u
expr_stmt|;
block|}
DECL|method|getURI ()
name|URIish
name|getURI
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|addRef (final String ref)
name|void
name|addRef
parameter_list|(
specifier|final
name|String
name|ref
parameter_list|)
block|{
name|delta
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Lock the queue, and remove ourselves, so we can't be modified once
comment|// we start replication (instead a new instance, with the same URI, is
comment|// created and scheduled for a future point in time.)
comment|//
name|PushQueue
operator|.
name|notifyStarting
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pushImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected error during replication"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected error during replication"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"push "
operator|+
name|uri
return|;
block|}
DECL|method|pushImpl ()
specifier|private
name|void
name|pushImpl
parameter_list|()
block|{
specifier|final
name|Repository
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|GerritServer
operator|.
name|getInstance
argument_list|()
operator|.
name|getRepositoryCache
argument_list|()
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot open repository cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|XsrfException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot open repository cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate "
operator|+
name|projectName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Transport
name|tn
decl_stmt|;
try|try
block|{
name|tn
operator|=
name|Transport
operator|.
name|open
argument_list|(
name|db
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|tn
operator|.
name|applyConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotSupportedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate to "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|PushResult
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|tn
operator|.
name|push
argument_list|(
name|NullProgressMonitor
operator|.
name|INSTANCE
argument_list|,
name|computeUpdates
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoRemoteRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate to "
operator|+
name|uri
operator|+
literal|"; repository not found"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|NotSupportedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate to "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|TransportException
name|e
parameter_list|)
block|{
specifier|final
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|JSchException
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"UnknownHostKey:"
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate to "
operator|+
name|uri
operator|+
literal|": "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate to "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot replicate to "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
name|tn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e2
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected error while closing "
operator|+
name|uri
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|RemoteRefUpdate
name|u
range|:
name|res
operator|.
name|getRemoteUpdates
argument_list|()
control|)
block|{
switch|switch
condition|(
name|u
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|OK
case|:
case|case
name|UP_TO_DATE
case|:
case|case
name|NON_EXISTING
case|:
break|break;
case|case
name|NOT_ATTEMPTED
case|:
case|case
name|AWAITING_REPORT
case|:
case|case
name|REJECTED_NODELETE
case|:
case|case
name|REJECTED_NONFASTFORWARD
case|:
case|case
name|REJECTED_REMOTE_CHANGED
case|:
name|log
operator|.
name|error
argument_list|(
literal|"Failed replicate of "
operator|+
name|u
operator|.
name|getRemoteName
argument_list|()
operator|+
literal|" to "
operator|+
name|uri
operator|+
literal|": status "
operator|+
name|u
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|REJECTED_OTHER_REASON
case|:
name|log
operator|.
name|error
argument_list|(
literal|"Failed replicate of "
operator|+
name|u
operator|.
name|getRemoteName
argument_list|()
operator|+
literal|" to "
operator|+
name|uri
operator|+
literal|", reason: "
operator|+
name|u
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|computeUpdates (final Repository db)
specifier|private
name|List
argument_list|<
name|RemoteRefUpdate
argument_list|>
name|computeUpdates
parameter_list|(
specifier|final
name|Repository
name|db
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|RemoteRefUpdate
argument_list|>
name|cmds
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteRefUpdate
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|ref
range|:
name|delta
control|)
block|{
specifier|final
name|String
name|src
init|=
name|ref
decl_stmt|;
name|RefSpec
name|spec
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|RefSpec
name|s
range|:
name|config
operator|.
name|getPushRefSpecs
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|matchSource
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|spec
operator|=
name|s
operator|.
name|expandFromSource
argument_list|(
name|src
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// If the ref still exists locally, send it, else delete it.
comment|//
specifier|final
name|String
name|srcexp
init|=
name|db
operator|.
name|resolve
argument_list|(
name|src
argument_list|)
operator|!=
literal|null
condition|?
name|src
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|dst
init|=
name|spec
operator|.
name|getDestination
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|force
init|=
name|spec
operator|.
name|isForceUpdate
argument_list|()
decl_stmt|;
name|cmds
operator|.
name|add
argument_list|(
operator|new
name|RemoteRefUpdate
argument_list|(
name|db
argument_list|,
name|srcexp
argument_list|,
name|dst
argument_list|,
name|force
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cmds
return|;
block|}
block|}
end_class

end_unit

