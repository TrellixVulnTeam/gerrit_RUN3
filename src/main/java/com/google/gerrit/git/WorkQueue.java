begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.git
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RunnableScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/** Delayed execution of tasks using a background thread pool. */
end_comment

begin_class
DECL|class|WorkQueue
specifier|public
class|class
name|WorkQueue
block|{
DECL|field|pool
specifier|private
specifier|static
name|Executor
name|pool
decl_stmt|;
DECL|method|getPool (final boolean autoStart)
specifier|private
specifier|static
specifier|synchronized
name|Executor
name|getPool
parameter_list|(
specifier|final
name|boolean
name|autoStart
parameter_list|)
block|{
if|if
condition|(
name|autoStart
operator|&&
name|pool
operator|==
literal|null
condition|)
block|{
name|pool
operator|=
operator|new
name|Executor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setKeepAliveTime
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setMaximumPoolSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
return|return
name|pool
return|;
block|}
comment|/** Get all of the tasks currently scheduled in the work queue. */
DECL|method|getTasks ()
specifier|public
specifier|static
name|Task
argument_list|<
name|?
argument_list|>
index|[]
name|getTasks
parameter_list|()
block|{
specifier|final
name|Executor
name|p
init|=
name|getPool
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Task
argument_list|<
name|?
argument_list|>
index|[]
name|r
decl_stmt|;
name|r
operator|=
name|p
operator|!=
literal|null
condition|?
name|p
operator|.
name|toTaskArray
argument_list|()
else|:
operator|new
name|Task
index|[]
block|{}
expr_stmt|;
return|return
name|r
return|;
block|}
comment|/**    * Schedule a task to run at a later point in time.    *     * @param task the task to invoke the {@code run()} method of later, on a    *        background thread.    * @param delay amount to wait before calling the task. May be 0 to request    *        "as soon as possible".    * @param unit time unit that {@code delay} is measured in.    */
DECL|method|schedule (final Runnable task, final long delay, final TimeUnit unit)
specifier|public
specifier|static
name|void
name|schedule
parameter_list|(
specifier|final
name|Runnable
name|task
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|,
specifier|final
name|TimeUnit
name|unit
parameter_list|)
block|{
name|getPool
argument_list|(
literal|true
argument_list|)
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|delay
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
comment|/** Shutdown the work queue, aborting any pending tasks that haven't started. */
DECL|method|terminate ()
specifier|public
specifier|static
name|void
name|terminate
parameter_list|()
block|{
specifier|final
name|ScheduledThreadPoolExecutor
name|p
init|=
name|shutdown
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isTerminated
decl_stmt|;
do|do
block|{
try|try
block|{
name|isTerminated
operator|=
name|p
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|isTerminated
operator|=
literal|false
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|isTerminated
condition|)
do|;
block|}
block|}
DECL|method|shutdown ()
specifier|private
specifier|static
specifier|synchronized
name|ScheduledThreadPoolExecutor
name|shutdown
parameter_list|()
block|{
specifier|final
name|ScheduledThreadPoolExecutor
name|p
init|=
name|pool
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|pool
operator|=
literal|null
expr_stmt|;
return|return
name|p
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|Executor
specifier|private
specifier|static
class|class
name|Executor
extends|extends
name|ScheduledThreadPoolExecutor
block|{
DECL|field|active
specifier|private
specifier|final
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|active
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|Executor (final int corePoolSize)
name|Executor
parameter_list|(
specifier|final
name|int
name|corePoolSize
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decorateTask ( final Runnable runnable, final RunnableScheduledFuture<V> task)
specifier|protected
parameter_list|<
name|V
parameter_list|>
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|decorateTask
parameter_list|(
specifier|final
name|Runnable
name|runnable
parameter_list|,
specifier|final
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
return|return
operator|new
name|Task
argument_list|<
name|V
argument_list|>
argument_list|(
name|runnable
argument_list|,
name|super
operator|.
name|decorateTask
argument_list|(
name|runnable
argument_list|,
name|task
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decorateTask ( final Callable<V> callable, final RunnableScheduledFuture<V> task)
specifier|protected
parameter_list|<
name|V
parameter_list|>
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|decorateTask
parameter_list|(
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|,
specifier|final
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Callable not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|beforeExecute (Thread t, Runnable r)
specifier|protected
name|void
name|beforeExecute
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Runnable
name|r
parameter_list|)
block|{
name|super
operator|.
name|beforeExecute
argument_list|(
name|t
argument_list|,
name|r
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|active
init|)
block|{
name|active
operator|.
name|add
argument_list|(
operator|(
name|Task
argument_list|<
name|?
argument_list|>
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterExecute (Runnable r, Throwable t)
specifier|protected
name|void
name|afterExecute
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
operator|.
name|afterExecute
argument_list|(
name|r
argument_list|,
name|t
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|active
init|)
block|{
name|active
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toTaskArray ()
name|Task
argument_list|<
name|?
argument_list|>
index|[]
name|toTaskArray
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|active
init|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Runnable
name|task
range|:
name|getQueue
argument_list|()
control|)
block|{
comment|// iterator is thread safe
name|list
operator|.
name|add
argument_list|(
operator|(
name|Task
argument_list|<
name|?
argument_list|>
operator|)
name|task
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Task
argument_list|<
name|?
argument_list|>
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
comment|/** A wrapper around a scheduled Runnable, as maintained in the queue. */
DECL|class|Task
specifier|public
specifier|static
class|class
name|Task
parameter_list|<
name|V
parameter_list|>
implements|implements
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
block|{
comment|/**      * Summarized status of a single task.      *<p>      * Tasks have the following state flow:      *<ol>      *<li>{@link #SLEEPING}: if scheduled with a non-zero delay.</li>      *<li>{@link #READY}: waiting for an available worker thread.</li>      *<li>{@link #RUNNING}: actively executing on a worker thread.</li>      *<li>{@link #DONE}: finished executing, if not periodic.</li>      *</ol>      */
DECL|enum|State
specifier|public
specifier|static
enum|enum
name|State
block|{
comment|// Ordered like this so ordinal matches the order we would
comment|// prefer to see tasks sorted in: done before running,
comment|// running before ready, ready before sleeping.
comment|//
DECL|enumConstant|DONE
DECL|enumConstant|CANCELLED
DECL|enumConstant|RUNNING
DECL|enumConstant|READY
DECL|enumConstant|SLEEPING
DECL|enumConstant|OTHER
name|DONE
block|,
name|CANCELLED
block|,
name|RUNNING
block|,
name|READY
block|,
name|SLEEPING
block|,
name|OTHER
block|;     }
DECL|field|runnable
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
decl_stmt|;
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
decl_stmt|;
DECL|method|Task (Runnable runnable, RunnableScheduledFuture<V> task)
name|Task
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|RunnableScheduledFuture
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
comment|/** Get the Runnable this task executes. */
DECL|method|getRunnable ()
specifier|public
name|Runnable
name|getRunnable
parameter_list|()
block|{
return|return
name|runnable
return|;
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
if|if
condition|(
name|isDone
argument_list|()
operator|&&
operator|!
name|isPeriodic
argument_list|()
condition|)
block|{
return|return
name|State
operator|.
name|DONE
return|;
block|}
elseif|else
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
return|return
name|State
operator|.
name|RUNNING
return|;
block|}
elseif|else
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
return|return
name|State
operator|.
name|CANCELLED
return|;
block|}
specifier|final
name|long
name|delay
init|=
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|delay
operator|<=
literal|0
condition|)
block|{
return|return
name|State
operator|.
name|READY
return|;
block|}
elseif|else
if|if
condition|(
literal|0
operator|<
name|delay
condition|)
block|{
return|return
name|State
operator|.
name|SLEEPING
return|;
block|}
return|return
name|State
operator|.
name|OTHER
return|;
block|}
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|task
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
return|;
block|}
DECL|method|compareTo (Delayed o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
return|return
name|task
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
block|}
DECL|method|get ()
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|task
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
return|return
name|task
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
DECL|method|getDelay (TimeUnit unit)
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|task
operator|.
name|getDelay
argument_list|(
name|unit
argument_list|)
return|;
block|}
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|task
operator|.
name|isCancelled
argument_list|()
return|;
block|}
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|task
operator|.
name|isDone
argument_list|()
return|;
block|}
DECL|method|isPeriodic ()
specifier|public
name|boolean
name|isPeriodic
parameter_list|()
block|{
return|return
name|task
operator|.
name|isPeriodic
argument_list|()
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|runnable
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

