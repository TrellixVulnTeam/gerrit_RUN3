begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008, Shawn O. Pearce<spearce@spearce.org>  *  * (Taken from JGit org.spearce.jgit.pgm.opt.CmdLineParser.)  *  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * - Redistributions of source code must retain the above copyright notice, this  * list of conditions and the following disclaimer.  *  * - Redistributions in binary form must reproduce the above copyright notice,  * this list of conditions and the following disclaimer in the documentation  * and/or other materials provided with the distribution.  *  * - Neither the name of the Git Development Community nor the names of its  * contributors may be used to endorse or promote products derived from this  * software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|IllegalAnnotationError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Extended command line parser which handles --foo=value arguments.  *<p>  * The args4j package does not natively handle --foo=value and instead prefers  * to see --foo value on the command line. Many users are used to the GNU style  * --foo=value long option, so we convert from the GNU style format to the  * args4j style format prior to invoking args4j for parsing.  */
end_comment

begin_class
DECL|class|CmdLineParser
specifier|public
class|class
name|CmdLineParser
extends|extends
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineParser
block|{
comment|/**    * Creates a new command line owner that parses arguments/options and set them    * into the given object.    *    * @param bean instance of a class annotated by    *        {@link org.kohsuke.args4j.Option} and    *        {@link org.kohsuke.args4j.Argument}. this object will receive    *        values.    *    * @throws IllegalAnnotationError if the option bean class is using args4j    *         annotations incorrectly.    */
DECL|method|CmdLineParser (final Object bean)
specifier|public
name|CmdLineParser
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|)
throws|throws
name|IllegalAnnotationError
block|{
name|super
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseArgument (final String... args)
specifier|public
name|void
name|parseArgument
parameter_list|(
specifier|final
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|CmdLineException
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|argi
init|=
literal|0
init|;
name|argi
operator|<
name|args
operator|.
name|length
condition|;
name|argi
operator|++
control|)
block|{
specifier|final
name|String
name|str
init|=
name|args
index|[
name|argi
index|]
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
while|while
condition|(
name|argi
operator|<
name|args
operator|.
name|length
condition|)
name|tmp
operator|.
name|add
argument_list|(
name|args
index|[
name|argi
operator|++
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|eq
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|eq
operator|>
literal|0
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eq
argument_list|)
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|eq
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|tmp
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|parseArgument
argument_list|(
name|tmp
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tmp
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

