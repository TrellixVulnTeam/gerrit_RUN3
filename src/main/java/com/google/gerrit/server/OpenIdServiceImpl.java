begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|SignInDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|SignInDialog
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|openid
operator|.
name|DiscoveryResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|openid
operator|.
name|OpenIdService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|openid
operator|.
name|OpenIdUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountExternalIdAccess
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|ValidToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|consumer
operator|.
name|ConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|consumer
operator|.
name|ConsumerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|consumer
operator|.
name|VerificationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|discovery
operator|.
name|DiscoveryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|discovery
operator|.
name|DiscoveryInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|discovery
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|AuthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|MessageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|MessageExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|ParameterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|ax
operator|.
name|AxMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|ax
operator|.
name|FetchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|ax
operator|.
name|FetchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|sreg
operator|.
name|SRegMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|sreg
operator|.
name|SRegRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|message
operator|.
name|sreg
operator|.
name|SRegResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|OpenIdServiceImpl
class|class
name|OpenIdServiceImpl
implements|implements
name|OpenIdService
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenIdServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|P_MODE
specifier|private
specifier|static
specifier|final
name|String
name|P_MODE
init|=
literal|"gerrit.mode"
decl_stmt|;
DECL|field|P_TOKEN
specifier|private
specifier|static
specifier|final
name|String
name|P_TOKEN
init|=
literal|"gerrit.token"
decl_stmt|;
DECL|field|P_REMEMBER
specifier|private
specifier|static
specifier|final
name|String
name|P_REMEMBER
init|=
literal|"gerrit.remember"
decl_stmt|;
DECL|field|LASTID_AGE
specifier|private
specifier|static
specifier|final
name|int
name|LASTID_AGE
init|=
literal|365
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// seconds
DECL|field|OPENID_MODE
specifier|private
specifier|static
specifier|final
name|String
name|OPENID_MODE
init|=
literal|"openid.mode"
decl_stmt|;
DECL|field|OMODE_CANCEL
specifier|private
specifier|static
specifier|final
name|String
name|OMODE_CANCEL
init|=
literal|"cancel"
decl_stmt|;
DECL|field|SCHEMA_EMAIL
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_EMAIL
init|=
literal|"http://schema.openid.net/contact/email"
decl_stmt|;
DECL|field|SCHEMA_FIRSTNAME
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_FIRSTNAME
init|=
literal|"http://schema.openid.net/namePerson/first"
decl_stmt|;
DECL|field|SCHEMA_LASTNAME
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_LASTNAME
init|=
literal|"http://schema.openid.net/namePerson/last"
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
name|OpenIdServiceImpl
name|INSTANCE
decl_stmt|;
DECL|method|getInstance ()
specifier|static
specifier|synchronized
name|OpenIdServiceImpl
name|getInstance
parameter_list|()
throws|throws
name|ConsumerException
throws|,
name|OrmException
throws|,
name|XsrfException
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|OpenIdServiceImpl
argument_list|()
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
DECL|field|server
specifier|private
specifier|final
name|GerritServer
name|server
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|ConsumerManager
name|manager
decl_stmt|;
DECL|method|OpenIdServiceImpl ()
specifier|private
name|OpenIdServiceImpl
parameter_list|()
throws|throws
name|ConsumerException
throws|,
name|OrmException
throws|,
name|XsrfException
block|{
name|server
operator|=
name|GerritServer
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|manager
operator|=
operator|new
name|ConsumerManager
argument_list|()
expr_stmt|;
block|}
DECL|method|discover (final String openidIdentifier, final SignInDialog.Mode mode, final boolean remember, final String returnToken, final AsyncCallback<DiscoveryResult> callback)
specifier|public
name|void
name|discover
parameter_list|(
specifier|final
name|String
name|openidIdentifier
parameter_list|,
specifier|final
name|SignInDialog
operator|.
name|Mode
name|mode
parameter_list|,
specifier|final
name|boolean
name|remember
parameter_list|,
specifier|final
name|String
name|returnToken
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|DiscoveryResult
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|Common
operator|.
name|getGerritConfig
argument_list|()
operator|.
name|getLoginType
argument_list|()
operator|!=
name|SystemConfig
operator|.
name|LoginType
operator|.
name|OPENID
condition|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"OpenID not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|HttpServletRequest
name|httpReq
init|=
name|GerritJsonServlet
operator|.
name|getCurrentCall
argument_list|()
operator|.
name|getHttpServletRequest
argument_list|()
decl_stmt|;
specifier|final
name|State
name|state
decl_stmt|;
name|state
operator|=
name|init
argument_list|(
name|httpReq
argument_list|,
name|openidIdentifier
argument_list|,
name|mode
argument_list|,
name|remember
argument_list|,
name|returnToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|DiscoveryResult
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|AuthRequest
name|aReq
decl_stmt|;
try|try
block|{
name|aReq
operator|=
name|manager
operator|.
name|authenticate
argument_list|(
name|state
operator|.
name|discovered
argument_list|,
name|state
operator|.
name|retTo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|aReq
operator|.
name|setRealm
argument_list|(
name|state
operator|.
name|contextUrl
argument_list|)
expr_stmt|;
specifier|final
name|SRegRequest
name|sregReq
init|=
name|SRegRequest
operator|.
name|createFetchRequest
argument_list|()
decl_stmt|;
name|sregReq
operator|.
name|addAttribute
argument_list|(
literal|"fullname"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sregReq
operator|.
name|addAttribute
argument_list|(
literal|"email"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aReq
operator|.
name|addExtension
argument_list|(
name|sregReq
argument_list|)
expr_stmt|;
specifier|final
name|FetchRequest
name|fetch
init|=
name|FetchRequest
operator|.
name|createFetchRequest
argument_list|()
decl_stmt|;
name|fetch
operator|.
name|addAttribute
argument_list|(
literal|"FirstName"
argument_list|,
name|SCHEMA_FIRSTNAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fetch
operator|.
name|addAttribute
argument_list|(
literal|"LastName"
argument_list|,
name|SCHEMA_LASTNAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fetch
operator|.
name|addAttribute
argument_list|(
literal|"Email"
argument_list|,
name|SCHEMA_EMAIL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|aReq
operator|.
name|addExtension
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|DiscoveryResult
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ConsumerException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|DiscoveryResult
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|DiscoveryResult
argument_list|(
literal|true
argument_list|,
name|aReq
operator|.
name|getDestinationUrl
argument_list|(
literal|false
argument_list|)
argument_list|,
name|aReq
operator|.
name|getParameterMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Called by {@link OpenIdLoginServlet} doGet, doPost */
DECL|method|doAuth (final HttpServletRequest req, final HttpServletResponse rsp)
name|void
name|doAuth
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|false
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
operator|+
literal|" /login"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|n
range|:
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|req
operator|.
name|getParameterMap
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|String
name|v
range|:
name|req
operator|.
name|getParameterValues
argument_list|(
name|n
argument_list|)
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|n
operator|+
literal|"="
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|openidMode
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|OPENID_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|OMODE_CANCEL
operator|.
name|equals
argument_list|(
name|openidMode
argument_list|)
condition|)
block|{
name|cancel
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Process the authentication response.
comment|//
specifier|final
name|SignInDialog
operator|.
name|Mode
name|mode
init|=
name|signInMode
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|String
name|openidIdentifier
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"openid.identity"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|returnToken
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|P_TOKEN
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|remember
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getParameter
argument_list|(
name|P_REMEMBER
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|State
name|state
decl_stmt|;
name|state
operator|=
name|init
argument_list|(
name|req
argument_list|,
name|openidIdentifier
argument_list|,
name|mode
argument_list|,
name|remember
argument_list|,
name|returnToken
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnTo
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"openid.return_to"
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnTo
operator|!=
literal|null
operator|&&
name|returnTo
operator|.
name|contains
argument_list|(
literal|"openid.rpnonce="
argument_list|)
condition|)
block|{
comment|// Some providers (claimid.com) seem to embed these request
comment|// parameters into our return_to URL, and then give us them
comment|// in the return_to request parameter. But not all.
comment|//
name|state
operator|.
name|retTo
operator|.
name|put
argument_list|(
literal|"openid.rpnonce"
argument_list|,
name|req
operator|.
name|getParameter
argument_list|(
literal|"openid.rpnonce"
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|retTo
operator|.
name|put
argument_list|(
literal|"openid.rpsig"
argument_list|,
name|req
operator|.
name|getParameter
argument_list|(
literal|"openid.rpsig"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|VerificationResult
name|result
init|=
name|manager
operator|.
name|verify
argument_list|(
name|state
operator|.
name|retTo
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ParameterList
argument_list|(
name|req
operator|.
name|getParameterMap
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|discovered
argument_list|)
decl_stmt|;
specifier|final
name|Identifier
name|user
init|=
name|result
operator|.
name|getVerifiedId
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
comment|// Authentication failed.
comment|//
name|cancel
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Authentication was successful.
comment|//
specifier|final
name|Message
name|authRsp
init|=
name|result
operator|.
name|getAuthResponse
argument_list|()
decl_stmt|;
name|SRegResponse
name|sregRsp
init|=
literal|null
decl_stmt|;
name|FetchResponse
name|fetchRsp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authRsp
operator|.
name|hasExtension
argument_list|(
name|SRegMessage
operator|.
name|OPENID_NS_SREG
argument_list|)
condition|)
block|{
specifier|final
name|MessageExtension
name|ext
init|=
name|authRsp
operator|.
name|getExtension
argument_list|(
name|SRegMessage
operator|.
name|OPENID_NS_SREG
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|instanceof
name|SRegResponse
condition|)
block|{
name|sregRsp
operator|=
operator|(
name|SRegResponse
operator|)
name|ext
expr_stmt|;
block|}
block|}
if|if
condition|(
name|authRsp
operator|.
name|hasExtension
argument_list|(
name|AxMessage
operator|.
name|OPENID_NS_AX
argument_list|)
condition|)
block|{
specifier|final
name|MessageExtension
name|ext
init|=
name|authRsp
operator|.
name|getExtension
argument_list|(
name|AxMessage
operator|.
name|OPENID_NS_AX
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|instanceof
name|FetchResponse
condition|)
block|{
name|fetchRsp
operator|=
operator|(
name|FetchResponse
operator|)
name|ext
expr_stmt|;
block|}
block|}
name|String
name|fullname
init|=
literal|null
decl_stmt|;
name|String
name|email
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sregRsp
operator|!=
literal|null
condition|)
block|{
name|fullname
operator|=
name|sregRsp
operator|.
name|getAttributeValue
argument_list|(
literal|"fullname"
argument_list|)
expr_stmt|;
name|email
operator|=
name|sregRsp
operator|.
name|getAttributeValue
argument_list|(
literal|"email"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fetchRsp
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|firstName
init|=
name|fetchRsp
operator|.
name|getAttributeValue
argument_list|(
literal|"FirstName"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|lastName
init|=
name|fetchRsp
operator|.
name|getAttributeValue
argument_list|(
literal|"LastName"
argument_list|)
decl_stmt|;
name|fullname
operator|=
name|firstName
operator|+
literal|" "
operator|+
name|lastName
expr_stmt|;
name|email
operator|=
name|fetchRsp
operator|.
name|getAttributeValue
argument_list|(
literal|"Email"
argument_list|)
expr_stmt|;
block|}
name|initializeAccount
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|user
argument_list|,
name|fullname
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initializeAccount (final HttpServletRequest req, final HttpServletResponse rsp, final Identifier user, final String fullname, final String email)
specifier|private
name|void
name|initializeAccount
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|rsp
parameter_list|,
specifier|final
name|Identifier
name|user
parameter_list|,
specifier|final
name|String
name|fullname
parameter_list|,
specifier|final
name|String
name|email
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SignInDialog
operator|.
name|Mode
name|mode
init|=
name|signInMode
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Account
name|account
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|ReviewDb
name|d
init|=
name|Common
operator|.
name|getSchemaFactory
argument_list|()
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|SIGN_IN
case|:
name|account
operator|=
name|openAccount
argument_list|(
name|d
argument_list|,
name|user
argument_list|,
name|fullname
argument_list|,
name|email
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_IDENTIY
case|:
name|account
operator|=
name|linkAccount
argument_list|(
name|req
argument_list|,
name|d
argument_list|,
name|user
argument_list|,
name|email
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
finally|finally
block|{
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Account lookup failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|account
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|Cookie
name|c
init|=
operator|new
name|Cookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|c
operator|.
name|setPath
argument_list|(
name|req
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|SignInDialog
operator|.
name|Mode
operator|.
name|SIGN_IN
condition|)
block|{
name|c
operator|.
name|setMaxAge
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|addCookie
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|cancel
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|SignInDialog
operator|.
name|Mode
operator|.
name|SIGN_IN
condition|)
block|{
specifier|final
name|boolean
name|remember
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getParameter
argument_list|(
name|P_REMEMBER
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|AccountCookie
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|remember
argument_list|)
operator|.
name|set
argument_list|(
name|c
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|addCookie
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|Cookie
argument_list|(
name|OpenIdUtil
operator|.
name|LASTID_COOKIE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPath
argument_list|(
name|req
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|remember
condition|)
block|{
name|c
operator|.
name|setValue
argument_list|(
name|user
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMaxAge
argument_list|(
name|LASTID_AGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|setMaxAge
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|addCookie
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|callback
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openAccount (final ReviewDb db, final Identifier user, final String fullname, final String email)
specifier|private
name|Account
name|openAccount
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Identifier
name|user
parameter_list|,
specifier|final
name|String
name|fullname
parameter_list|,
specifier|final
name|String
name|email
parameter_list|)
throws|throws
name|OrmException
block|{
name|Account
name|account
decl_stmt|;
specifier|final
name|AccountExternalIdAccess
name|extAccess
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
decl_stmt|;
name|AccountExternalId
name|acctExt
init|=
name|lookup
argument_list|(
name|extAccess
argument_list|,
name|user
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acctExt
operator|==
literal|null
operator|&&
name|email
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isAllowGoogleAccountUpgrade
argument_list|()
operator|&&
name|isGoogleAccount
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|acctExt
operator|=
name|lookupGoogleAccount
argument_list|(
name|extAccess
argument_list|,
name|email
argument_list|)
expr_stmt|;
if|if
condition|(
name|acctExt
operator|!=
literal|null
condition|)
block|{
comment|// Legacy user from Gerrit 1? Attach the OpenID identity.
comment|//
specifier|final
name|AccountExternalId
name|openidExt
init|=
operator|new
name|AccountExternalId
argument_list|(
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|acctExt
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|user
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|extAccess
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|openidExt
argument_list|)
argument_list|)
expr_stmt|;
name|acctExt
operator|=
name|openidExt
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acctExt
operator|!=
literal|null
condition|)
block|{
comment|// Existing user; double check the email is current.
comment|//
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|equals
argument_list|(
name|acctExt
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
name|acctExt
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
name|acctExt
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|extAccess
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|acctExt
argument_list|)
argument_list|)
expr_stmt|;
name|account
operator|=
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|get
argument_list|(
name|acctExt
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|account
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
comment|// New user; create an account entity for them.
comment|//
specifier|final
name|Transaction
name|txn
init|=
name|db
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|account
operator|=
operator|new
name|Account
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextAccountId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|account
operator|.
name|setFullName
argument_list|(
name|fullname
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPreferredEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|acctExt
operator|=
operator|new
name|AccountExternalId
argument_list|(
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|acctExt
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|acctExt
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|account
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|extAccess
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|acctExt
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
name|account
return|;
block|}
DECL|method|linkAccount (final HttpServletRequest req, final ReviewDb db, final Identifier user, final String email)
specifier|private
name|Account
name|linkAccount
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Identifier
name|user
parameter_list|,
specifier|final
name|String
name|email
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Cookie
index|[]
name|cookies
init|=
name|req
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookies
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Account
operator|.
name|Id
name|me
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|Cookie
name|c
range|:
name|cookies
control|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|ValidToken
name|tok
init|=
name|server
operator|.
name|getAccountToken
argument_list|()
operator|.
name|checkToken
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|me
operator|=
name|AccountCookie
operator|.
name|parse
argument_list|(
name|tok
argument_list|)
operator|.
name|getAccountId
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|XsrfException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
if|if
condition|(
name|me
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Account
name|account
init|=
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|get
argument_list|(
name|me
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|AccountExternalId
operator|.
name|Key
name|idKey
init|=
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|AccountExternalId
name|id
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
name|idKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
operator|new
name|AccountExternalId
argument_list|(
name|idKey
argument_list|)
expr_stmt|;
name|id
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|id
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|invalidate
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
condition|)
block|{
name|id
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
name|id
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|account
return|;
block|}
DECL|method|signInMode (final HttpServletRequest req)
specifier|private
specifier|static
name|Mode
name|signInMode
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
try|try
block|{
return|return
name|SignInDialog
operator|.
name|Mode
operator|.
name|valueOf
argument_list|(
name|req
operator|.
name|getParameter
argument_list|(
name|P_MODE
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
name|SignInDialog
operator|.
name|Mode
operator|.
name|SIGN_IN
return|;
block|}
block|}
DECL|method|lookup ( final AccountExternalIdAccess extAccess, final String id)
specifier|private
specifier|static
name|AccountExternalId
name|lookup
parameter_list|(
specifier|final
name|AccountExternalIdAccess
name|extAccess
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|extRes
init|=
name|extAccess
operator|.
name|byExternal
argument_list|(
name|id
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|extRes
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|extRes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"More than one account matches: "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
DECL|method|isGoogleAccount (final Identifier user)
specifier|private
specifier|static
name|boolean
name|isGoogleAccount
parameter_list|(
specifier|final
name|Identifier
name|user
parameter_list|)
block|{
return|return
name|user
operator|.
name|getIdentifier
argument_list|()
operator|.
name|startsWith
argument_list|(
name|OpenIdUtil
operator|.
name|URL_GOOGLE
operator|+
literal|"?"
argument_list|)
return|;
block|}
DECL|method|lookupGoogleAccount ( final AccountExternalIdAccess extAccess, final String email)
specifier|private
specifier|static
name|AccountExternalId
name|lookupGoogleAccount
parameter_list|(
specifier|final
name|AccountExternalIdAccess
name|extAccess
parameter_list|,
specifier|final
name|String
name|email
parameter_list|)
throws|throws
name|OrmException
block|{
comment|// We may have multiple records which match the email address, but
comment|// all under the same account. This happens when the user does a
comment|// login through different server hostnames, as Google issues
comment|// unique OpenID tokens per server.
comment|//
comment|// Match to an existing account only if there is exactly one record
comment|// for this email using the generic Google identity.
comment|//
specifier|final
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|m
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountExternalId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AccountExternalId
name|e
range|:
name|extAccess
operator|.
name|byEmailAddress
argument_list|(
name|email
argument_list|)
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Google Account "
operator|+
name|email
argument_list|)
condition|)
block|{
name|m
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|m
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|callback (final HttpServletRequest req, final HttpServletResponse rsp)
specifier|private
specifier|static
name|void
name|callback
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|rdr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|rdr
operator|.
name|append
argument_list|(
name|GerritServer
operator|.
name|serverUrl
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|rdr
operator|.
name|append
argument_list|(
literal|"Gerrit"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|token
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|P_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|rdr
operator|.
name|append
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|rdr
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|sendRedirect
argument_list|(
name|rdr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cancel (final HttpServletRequest req, final HttpServletResponse rsp)
specifier|private
specifier|static
name|void
name|cancel
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|callback
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|init (final HttpServletRequest httpReq, final String openidIdentifier, final SignInDialog.Mode mode, final boolean remember, final String returnToken)
specifier|private
name|State
name|init
parameter_list|(
specifier|final
name|HttpServletRequest
name|httpReq
parameter_list|,
specifier|final
name|String
name|openidIdentifier
parameter_list|,
specifier|final
name|SignInDialog
operator|.
name|Mode
name|mode
parameter_list|,
specifier|final
name|boolean
name|remember
parameter_list|,
specifier|final
name|String
name|returnToken
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|servers
decl_stmt|;
try|try
block|{
name|servers
operator|=
name|manager
operator|.
name|discover
argument_list|(
name|openidIdentifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiscoveryException
name|de
parameter_list|)
block|{
name|servers
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|servers
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|contextUrl
init|=
name|GerritServer
operator|.
name|serverUrl
argument_list|(
name|httpReq
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryInformation
name|discovered
init|=
name|manager
operator|.
name|associate
argument_list|(
name|servers
argument_list|)
decl_stmt|;
specifier|final
name|UrlEncoded
name|retTo
init|=
operator|new
name|UrlEncoded
argument_list|(
name|contextUrl
operator|+
literal|"login"
argument_list|)
decl_stmt|;
name|retTo
operator|.
name|put
argument_list|(
name|P_MODE
argument_list|,
name|mode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnToken
operator|!=
literal|null
operator|&&
name|returnToken
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|retTo
operator|.
name|put
argument_list|(
name|P_TOKEN
argument_list|,
name|returnToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remember
condition|)
block|{
name|retTo
operator|.
name|put
argument_list|(
name|P_REMEMBER
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|State
argument_list|(
name|discovered
argument_list|,
name|retTo
argument_list|,
name|contextUrl
argument_list|)
return|;
block|}
DECL|class|State
specifier|private
specifier|static
class|class
name|State
block|{
DECL|field|discovered
specifier|final
name|DiscoveryInformation
name|discovered
decl_stmt|;
DECL|field|retTo
specifier|final
name|UrlEncoded
name|retTo
decl_stmt|;
DECL|field|contextUrl
specifier|final
name|String
name|contextUrl
decl_stmt|;
DECL|method|State (final DiscoveryInformation d, final UrlEncoded r, final String c)
name|State
parameter_list|(
specifier|final
name|DiscoveryInformation
name|d
parameter_list|,
specifier|final
name|UrlEncoded
name|r
parameter_list|,
specifier|final
name|String
name|c
parameter_list|)
block|{
name|discovered
operator|=
name|d
expr_stmt|;
name|retTo
operator|=
name|r
expr_stmt|;
name|contextUrl
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

