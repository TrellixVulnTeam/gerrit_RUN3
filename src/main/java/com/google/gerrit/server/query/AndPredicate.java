begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.query
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Requires all predicates to be true. */
end_comment

begin_class
DECL|class|AndPredicate
specifier|public
specifier|final
class|class
name|AndPredicate
extends|extends
name|Predicate
block|{
DECL|field|children
specifier|private
specifier|final
name|Predicate
index|[]
name|children
decl_stmt|;
DECL|method|AndPredicate (final Predicate... that)
specifier|public
name|AndPredicate
parameter_list|(
specifier|final
name|Predicate
modifier|...
name|that
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|that
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|AndPredicate (final Collection<Predicate> that)
specifier|public
name|AndPredicate
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Predicate
argument_list|>
name|that
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|Predicate
argument_list|>
name|tmp
init|=
operator|new
name|ArrayList
argument_list|<
name|Predicate
argument_list|>
argument_list|(
name|that
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Predicate
name|p
range|:
name|that
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|AndPredicate
condition|)
block|{
name|tmp
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tmp
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Need at least two predicates"
argument_list|)
throw|;
block|}
name|children
operator|=
operator|new
name|Predicate
index|[
name|tmp
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|tmp
operator|.
name|toArray
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getChildren ()
specifier|public
name|List
argument_list|<
name|Predicate
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildCount ()
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getChild (final int i)
specifier|public
name|Predicate
name|getChild
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
name|children
index|[
name|i
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|children
index|[
literal|0
index|]
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|children
index|[
literal|1
index|]
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
operator|instanceof
name|AndPredicate
operator|&&
name|getChildren
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AndPredicate
operator|)
name|other
operator|)
operator|.
name|getChildren
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

