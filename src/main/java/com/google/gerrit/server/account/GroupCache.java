begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|CacheEntryFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|SelfPopulatingCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Tracks group objects in memory for effecient access. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|GroupCache
specifier|public
class|class
name|GroupCache
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GroupCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|SelfPopulatingCache
name|self
decl_stmt|;
DECL|field|administrators
specifier|private
specifier|final
name|AccountGroup
operator|.
name|Id
name|administrators
decl_stmt|;
annotation|@
name|Inject
DECL|method|GroupCache (final SchemaFactory<ReviewDb> sf, final SystemConfig cfg, final CacheManager mgr)
name|GroupCache
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
specifier|final
name|SystemConfig
name|cfg
parameter_list|,
specifier|final
name|CacheManager
name|mgr
parameter_list|)
block|{
name|schema
operator|=
name|sf
expr_stmt|;
name|administrators
operator|=
name|cfg
operator|.
name|adminGroupId
expr_stmt|;
specifier|final
name|Cache
name|dc
init|=
name|mgr
operator|.
name|getCache
argument_list|(
literal|"groups"
argument_list|)
decl_stmt|;
name|self
operator|=
operator|new
name|SelfPopulatingCache
argument_list|(
name|dc
argument_list|,
operator|new
name|CacheEntryFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|createEntry
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|lookup
argument_list|(
operator|(
name|AccountGroup
operator|.
name|Id
operator|)
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceCacheWithDecoratedCache
argument_list|(
name|dc
argument_list|,
name|self
argument_list|)
expr_stmt|;
block|}
DECL|method|getAdministrators ()
specifier|public
specifier|final
name|AccountGroup
operator|.
name|Id
name|getAdministrators
parameter_list|()
block|{
return|return
name|administrators
return|;
block|}
DECL|method|lookup (final AccountGroup.Id groupId)
specifier|private
name|AccountGroup
name|lookup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AccountGroup
name|group
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
return|;
block|}
else|else
block|{
return|return
name|missingGroup
argument_list|(
name|groupId
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (final AccountGroup.Id groupId)
specifier|public
name|AccountGroup
name|get
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
block|{
if|if
condition|(
name|groupId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Element
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|self
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup group "
operator|+
name|groupId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|missingGroup
argument_list|(
name|groupId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CacheException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup effective groups for "
operator|+
name|groupId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|missingGroup
argument_list|(
name|groupId
argument_list|)
return|;
block|}
if|if
condition|(
name|m
operator|==
literal|null
operator|||
name|m
operator|.
name|getObjectValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|missingGroup
argument_list|(
name|groupId
argument_list|)
return|;
block|}
return|return
operator|(
name|AccountGroup
operator|)
name|m
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
DECL|method|missingGroup (final AccountGroup.Id groupId)
specifier|private
name|AccountGroup
name|missingGroup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
block|{
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|name
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
literal|"Deleted Group"
operator|+
name|groupId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
name|g
init|=
operator|new
name|AccountGroup
argument_list|(
name|name
argument_list|,
name|groupId
argument_list|)
decl_stmt|;
name|g
operator|.
name|setAutomaticMembership
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|g
operator|.
name|setOwnerGroupId
argument_list|(
name|administrators
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
DECL|method|evict (final AccountGroup.Id groupId)
specifier|public
name|void
name|evict
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
block|{
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
name|self
operator|.
name|remove
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|lookup (final String groupName)
specifier|public
name|AccountGroup
name|lookup
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AccountGroup
operator|.
name|NameKey
name|nameKey
init|=
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
name|group
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
name|nameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

