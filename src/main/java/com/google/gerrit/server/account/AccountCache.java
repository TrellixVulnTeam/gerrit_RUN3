begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|SelfPopulatingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|name
operator|.
name|Named
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Caches important (but small) account state to avoid database hits. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountCache
specifier|public
class|class
name|AccountCache
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_NAME
init|=
literal|"accounts"
decl_stmt|;
DECL|method|module ()
specifier|public
specifier|static
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|CacheModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeLiteral
argument_list|<
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|core
argument_list|(
name|type
argument_list|,
name|CACHE_NAME
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AccountCache
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|authConfig
specifier|private
specifier|final
name|AuthConfig
name|authConfig
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|SelfPopulatingCache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
name|self
decl_stmt|;
DECL|field|registered
specifier|private
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|registered
decl_stmt|;
DECL|field|anonymous
specifier|private
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|anonymous
decl_stmt|;
annotation|@
name|Inject
DECL|method|AccountCache (final SchemaFactory<ReviewDb> sf, final SystemConfig cfg, final AuthConfig ac, @Named(CACHE_NAME) final Cache<Account.Id, AccountState> rawCache)
name|AccountCache
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
specifier|final
name|SystemConfig
name|cfg
parameter_list|,
specifier|final
name|AuthConfig
name|ac
parameter_list|,
annotation|@
name|Named
argument_list|(
name|CACHE_NAME
argument_list|)
specifier|final
name|Cache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
name|rawCache
parameter_list|)
block|{
name|schema
operator|=
name|sf
expr_stmt|;
name|authConfig
operator|=
name|ac
expr_stmt|;
specifier|final
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
name|cfg
operator|.
name|anonymousGroupId
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|cfg
operator|.
name|registeredGroupId
argument_list|)
expr_stmt|;
name|registered
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|anonymous
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|cfg
operator|.
name|anonymousGroupId
argument_list|)
expr_stmt|;
name|self
operator|=
operator|new
name|SelfPopulatingCache
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|AccountState
argument_list|>
argument_list|(
name|rawCache
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AccountState
name|createEntry
parameter_list|(
name|Account
operator|.
name|Id
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|lookup
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AccountState
name|missing
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|key
parameter_list|)
block|{
return|return
name|missingAccount
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|lookup (final Account.Id who)
specifier|private
name|AccountState
name|lookup
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|who
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Account
name|account
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|who
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
comment|// Account no longer exists? They are anonymous.
comment|//
return|return
name|missingAccount
argument_list|(
name|who
argument_list|)
return|;
block|}
specifier|final
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|ids
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byAccount
argument_list|(
name|who
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|emails
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountExternalId
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|id
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|emails
operator|.
name|add
argument_list|(
name|id
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|actual
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccountGroupMember
name|g
range|:
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|byAccount
argument_list|(
name|who
argument_list|)
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|g
operator|.
name|getAccountGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actual
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actual
operator|=
name|registered
expr_stmt|;
block|}
else|else
block|{
name|actual
operator|.
name|addAll
argument_list|(
name|registered
argument_list|)
expr_stmt|;
name|actual
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|effective
decl_stmt|;
if|if
condition|(
name|authConfig
operator|.
name|isIdentityTrustable
argument_list|(
name|ids
argument_list|)
condition|)
block|{
name|effective
operator|=
name|actual
expr_stmt|;
block|}
else|else
block|{
name|effective
operator|=
name|registered
expr_stmt|;
block|}
return|return
operator|new
name|AccountState
argument_list|(
name|account
argument_list|,
name|actual
argument_list|,
name|effective
argument_list|,
name|emails
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|missingAccount (final Account.Id accountId)
specifier|private
name|AccountState
name|missingAccount
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
specifier|final
name|Account
name|account
init|=
operator|new
name|Account
argument_list|(
name|accountId
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|emails
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountState
argument_list|(
name|account
argument_list|,
name|anonymous
argument_list|,
name|anonymous
argument_list|,
name|emails
argument_list|)
return|;
block|}
DECL|method|get (final Account.Id accountId)
specifier|public
name|AccountState
name|get
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
return|return
name|self
operator|.
name|get
argument_list|(
name|accountId
argument_list|)
return|;
block|}
DECL|method|evict (final Account.Id accountId)
specifier|public
name|void
name|evict
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|accountId
parameter_list|)
block|{
name|self
operator|.
name|remove
argument_list|(
name|accountId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

