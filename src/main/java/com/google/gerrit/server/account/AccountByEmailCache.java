begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|CacheEntryFactory
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|constructs
operator|.
name|blocking
operator|.
name|SelfPopulatingCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Translates an email address to a set of matching accounts. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountByEmailCache
specifier|public
class|class
name|AccountByEmailCache
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccountByEmailCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|self
specifier|private
specifier|final
name|SelfPopulatingCache
name|self
decl_stmt|;
annotation|@
name|Inject
DECL|method|AccountByEmailCache (final SchemaFactory<ReviewDb> sf, final CacheManager mgr)
name|AccountByEmailCache
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|sf
parameter_list|,
specifier|final
name|CacheManager
name|mgr
parameter_list|)
block|{
name|schema
operator|=
name|sf
expr_stmt|;
specifier|final
name|Cache
name|dc
init|=
name|mgr
operator|.
name|getCache
argument_list|(
literal|"accounts_byemail"
argument_list|)
decl_stmt|;
name|self
operator|=
operator|new
name|SelfPopulatingCache
argument_list|(
name|dc
argument_list|,
operator|new
name|CacheEntryFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|createEntry
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|lookup
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceCacheWithDecoratedCache
argument_list|(
name|dc
argument_list|,
name|self
argument_list|)
expr_stmt|;
block|}
DECL|method|lookup (final String email)
specifier|private
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|lookup
parameter_list|(
specifier|final
name|String
name|email
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Account
name|a
range|:
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|byPreferredEmail
argument_list|(
name|email
argument_list|)
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AccountExternalId
name|a
range|:
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byEmailAddress
argument_list|(
name|email
argument_list|)
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pack
argument_list|(
name|r
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (final String email)
specifier|public
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|get
parameter_list|(
specifier|final
name|String
name|email
parameter_list|)
block|{
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|final
name|Element
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|self
operator|.
name|get
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup email "
operator|+
name|email
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CacheException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot lookup email "
operator|+
name|email
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
if|if
condition|(
name|m
operator|==
literal|null
operator|||
name|m
operator|.
name|getObjectValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
operator|(
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
operator|)
name|m
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
DECL|method|evict (final String email)
specifier|public
name|void
name|evict
parameter_list|(
specifier|final
name|String
name|email
parameter_list|)
block|{
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|self
operator|.
name|remove
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pack (final Set<Account.Id> c)
specifier|private
specifier|static
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|pack
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|c
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|one
argument_list|(
name|c
argument_list|)
return|;
default|default:
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|one (final Set<T> c)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|one
parameter_list|(
specifier|final
name|Set
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|c
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

