begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|openid
operator|.
name|OpenIdUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|AuthConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Tracks authentication related details for user accounts. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|AccountManager
specifier|public
class|class
name|AccountManager
block|{
DECL|field|schema
specifier|private
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|byIdCache
specifier|private
specifier|final
name|AccountCache
name|byIdCache
decl_stmt|;
DECL|field|byEmailCache
specifier|private
specifier|final
name|AccountByEmailCache
name|byEmailCache
decl_stmt|;
DECL|field|authConfig
specifier|private
specifier|final
name|AuthConfig
name|authConfig
decl_stmt|;
DECL|field|realm
specifier|private
specifier|final
name|Realm
name|realm
decl_stmt|;
annotation|@
name|Inject
DECL|method|AccountManager (final SchemaFactory<ReviewDb> schema, final AccountCache byIdCache, final AccountByEmailCache byEmailCache, final AuthConfig authConfig, final Realm accountMapper)
name|AccountManager
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
parameter_list|,
specifier|final
name|AccountCache
name|byIdCache
parameter_list|,
specifier|final
name|AccountByEmailCache
name|byEmailCache
parameter_list|,
specifier|final
name|AuthConfig
name|authConfig
parameter_list|,
specifier|final
name|Realm
name|accountMapper
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|byIdCache
operator|=
name|byIdCache
expr_stmt|;
name|this
operator|.
name|byEmailCache
operator|=
name|byEmailCache
expr_stmt|;
name|this
operator|.
name|authConfig
operator|=
name|authConfig
expr_stmt|;
name|this
operator|.
name|realm
operator|=
name|accountMapper
expr_stmt|;
block|}
comment|/**    * True if user identified by this external identity string has an account.    */
DECL|method|exists (final String externalId)
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|String
name|externalId
parameter_list|)
throws|throws
name|AccountException
block|{
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|externalId
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Cannot lookup account "
operator|+
name|externalId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Authenticate the user, potentially creating a new account if they are new.    *    * @param who identity of the user, with any details we received about them.    * @return the result of authenticating the user.    * @throws AccountException the account does not exist, and cannot be created,    *         or exists, but cannot be located.    */
DECL|method|authenticate (AuthRequest who)
specifier|public
name|AuthResult
name|authenticate
parameter_list|(
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|AccountException
block|{
name|who
operator|=
name|realm
operator|.
name|authenticate
argument_list|(
name|who
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AccountExternalId
name|id
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|who
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
comment|// New account, automatically create and return.
comment|//
return|return
name|create
argument_list|(
name|db
argument_list|,
name|who
argument_list|)
return|;
block|}
else|else
block|{
comment|// Account exists, return the identity to the caller.
comment|//
name|update
argument_list|(
name|db
argument_list|,
name|who
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuthResult
argument_list|(
name|id
operator|.
name|getAccountId
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Authentication error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|update (final ReviewDb db, final AuthRequest who, final AccountExternalId extId)
specifier|private
name|void
name|update
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|AuthRequest
name|who
parameter_list|,
specifier|final
name|AccountExternalId
name|extId
parameter_list|)
throws|throws
name|OrmException
throws|,
name|AccountException
block|{
specifier|final
name|Transaction
name|txn
init|=
name|db
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|extId
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|updateAccount
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Account has been deleted"
argument_list|)
throw|;
block|}
comment|// If the email address was modified by the authentication provider,
comment|// update our records to match the changed email.
comment|//
specifier|final
name|String
name|newEmail
init|=
name|who
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
specifier|final
name|String
name|oldEmail
init|=
name|extId
operator|.
name|getEmailAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|newEmail
operator|!=
literal|null
operator|&&
operator|!
name|newEmail
operator|.
name|equals
argument_list|(
name|oldEmail
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldEmail
operator|!=
literal|null
operator|&&
name|oldEmail
operator|.
name|equals
argument_list|(
name|account
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
condition|)
block|{
name|updateAccount
operator|=
literal|true
expr_stmt|;
name|account
operator|.
name|setPreferredEmail
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
block|}
name|extId
operator|.
name|setEmailAddress
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|realm
operator|.
name|allowsEdit
argument_list|(
name|Account
operator|.
name|FieldName
operator|.
name|FULL_NAME
argument_list|)
operator|&&
operator|!
name|eq
argument_list|(
name|account
operator|.
name|getFullName
argument_list|()
argument_list|,
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
condition|)
block|{
name|updateAccount
operator|=
literal|true
expr_stmt|;
name|account
operator|.
name|setFullName
argument_list|(
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|realm
operator|.
name|allowsEdit
argument_list|(
name|Account
operator|.
name|FieldName
operator|.
name|SSH_USER_NAME
argument_list|)
operator|&&
operator|!
name|eq
argument_list|(
name|account
operator|.
name|getSshUserName
argument_list|()
argument_list|,
name|who
operator|.
name|getSshUserName
argument_list|()
argument_list|)
condition|)
block|{
name|updateAccount
operator|=
literal|true
expr_stmt|;
name|account
operator|.
name|setSshUserName
argument_list|(
name|who
operator|.
name|getSshUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|extId
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateAccount
condition|)
block|{
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|account
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
block|}
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|newEmail
operator|!=
literal|null
operator|&&
operator|!
name|newEmail
operator|.
name|equals
argument_list|(
name|oldEmail
argument_list|)
condition|)
block|{
name|byEmailCache
operator|.
name|evict
argument_list|(
name|oldEmail
argument_list|)
expr_stmt|;
name|byEmailCache
operator|.
name|evict
argument_list|(
name|newEmail
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateAccount
condition|)
block|{
name|byIdCache
operator|.
name|evict
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|eq (final String a, final String b)
specifier|private
specifier|static
name|boolean
name|eq
parameter_list|(
specifier|final
name|String
name|a
parameter_list|,
specifier|final
name|String
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
operator|)
operator|||
operator|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
DECL|method|create (final ReviewDb db, final AuthRequest who)
specifier|private
name|AuthResult
name|create
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|OrmException
throws|,
name|AccountException
block|{
if|if
condition|(
name|authConfig
operator|.
name|isAllowGoogleAccountUpgrade
argument_list|()
operator|&&
name|who
operator|.
name|isScheme
argument_list|(
name|OpenIdUtil
operator|.
name|URL_GOOGLE
operator|+
literal|"?"
argument_list|)
operator|&&
name|who
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|openId
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountExternalId
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|v1
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountExternalId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AccountExternalId
name|extId
range|:
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|byEmailAddress
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|extId
operator|.
name|isScheme
argument_list|(
name|OpenIdUtil
operator|.
name|URL_GOOGLE
operator|+
literal|"?"
argument_list|)
condition|)
block|{
name|openId
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extId
operator|.
name|isScheme
argument_list|(
name|AccountExternalId
operator|.
name|LEGACY_GAE
argument_list|)
condition|)
block|{
name|v1
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|openId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The user has already registered with an OpenID from Google, but
comment|// Google may have changed the user's OpenID identity if this server
comment|// name has changed. Insert a new identity for the user.
comment|//
specifier|final
name|Account
operator|.
name|Id
name|accountId
init|=
name|openId
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
name|openId
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Validate all matching identities are actually the same user.
comment|//
for|for
control|(
specifier|final
name|AccountExternalId
name|extId
range|:
name|openId
control|)
block|{
if|if
condition|(
operator|!
name|accountId
operator|.
name|equals
argument_list|(
name|extId
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Multiple user accounts for "
operator|+
name|who
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|" using Google Accounts provider"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|AccountExternalId
name|newId
init|=
name|createId
argument_list|(
name|accountId
argument_list|,
name|who
argument_list|)
decl_stmt|;
name|newId
operator|.
name|setEmailAddress
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|newId
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
if|if
condition|(
name|openId
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|AccountExternalId
name|oldId
init|=
name|openId
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Transaction
name|txn
init|=
name|db
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|oldId
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newId
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AuthResult
argument_list|(
name|accountId
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Exactly one user was imported from Gerrit 1.x with this email
comment|// address. Upgrade their account by deleting the legacy import
comment|// identity and creating a new identity matching the token we have.
comment|//
specifier|final
name|AccountExternalId
name|oldId
init|=
name|v1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AccountExternalId
name|newId
init|=
name|createId
argument_list|(
name|oldId
operator|.
name|getAccountId
argument_list|()
argument_list|,
name|who
argument_list|)
decl_stmt|;
name|newId
operator|.
name|setEmailAddress
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|newId
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
specifier|final
name|Transaction
name|txn
init|=
name|db
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|oldId
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newId
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
operator|new
name|AuthResult
argument_list|(
name|newId
operator|.
name|getAccountId
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Multiple Gerrit 1.x accounts found"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Account
operator|.
name|Id
name|newId
init|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextAccountId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|account
init|=
operator|new
name|Account
argument_list|(
name|newId
argument_list|)
decl_stmt|;
specifier|final
name|AccountExternalId
name|extId
init|=
name|createId
argument_list|(
name|newId
argument_list|,
name|who
argument_list|)
decl_stmt|;
name|extId
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|extId
operator|.
name|setEmailAddress
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|account
operator|.
name|setFullName
argument_list|(
name|who
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPreferredEmail
argument_list|(
name|extId
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|who
operator|.
name|getSshUserName
argument_list|()
operator|!=
literal|null
operator|&&
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|bySshUserName
argument_list|(
name|who
operator|.
name|getSshUserName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// Only set if the name hasn't been used yet, but was given to us.
comment|//
name|account
operator|.
name|setSshUserName
argument_list|(
name|who
operator|.
name|getSshUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Transaction
name|txn
init|=
name|db
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|account
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|byEmailCache
operator|.
name|evict
argument_list|(
name|account
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
expr_stmt|;
name|realm
operator|.
name|onCreateAccount
argument_list|(
name|who
argument_list|,
name|account
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuthResult
argument_list|(
name|newId
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createId (final Account.Id newId, final AuthRequest who)
specifier|private
specifier|static
name|AccountExternalId
name|createId
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|newId
parameter_list|,
specifier|final
name|AuthRequest
name|who
parameter_list|)
block|{
specifier|final
name|String
name|ext
init|=
name|who
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
return|return
operator|new
name|AccountExternalId
argument_list|(
name|newId
argument_list|,
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|ext
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Link another authentication identity to an existing account.    *    * @param to account to link the identity onto.    * @param who the additional identity.    * @throws AccountException the identity belongs to a different account, or it    *         cannot be linked at this time.    */
DECL|method|link (final Account.Id to, final AuthRequest who)
specifier|public
name|void
name|link
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|to
parameter_list|,
specifier|final
name|AuthRequest
name|who
parameter_list|)
throws|throws
name|AccountException
block|{
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|AccountExternalId
name|extId
init|=
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|AccountExternalId
operator|.
name|Key
argument_list|(
name|who
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|extId
operator|.
name|getAccountId
argument_list|()
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Identity in use by another account"
argument_list|)
throw|;
block|}
name|update
argument_list|(
name|db
argument_list|,
name|who
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extId
operator|=
name|createId
argument_list|(
name|to
argument_list|,
name|who
argument_list|)
expr_stmt|;
name|extId
operator|.
name|setEmailAddress
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|extId
operator|.
name|setLastUsedOn
argument_list|()
expr_stmt|;
name|db
operator|.
name|accountExternalIds
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|extId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|who
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byEmailCache
operator|.
name|evict
argument_list|(
name|who
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|byIdCache
operator|.
name|evict
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccountException
argument_list|(
literal|"Cannot link identity"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

