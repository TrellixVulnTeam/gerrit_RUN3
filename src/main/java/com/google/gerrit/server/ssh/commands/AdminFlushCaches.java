begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|DiffCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|AdminCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/** Causes the caches to purge all entries and reload. */
end_comment

begin_class
annotation|@
name|AdminCommand
DECL|class|AdminFlushCaches
specifier|final
class|class
name|AdminFlushCaches
extends|extends
name|CacheCommand
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--cache"
argument_list|,
name|usage
operator|=
literal|"flush named cache"
argument_list|,
name|metaVar
operator|=
literal|"NAME"
argument_list|)
DECL|field|caches
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|caches
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--all"
argument_list|,
name|usage
operator|=
literal|"flush all caches"
argument_list|)
DECL|field|all
specifier|private
name|boolean
name|all
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--list"
argument_list|,
name|usage
operator|=
literal|"list available caches"
argument_list|)
DECL|field|list
specifier|private
name|boolean
name|list
decl_stmt|;
annotation|@
name|Inject
DECL|field|diffCache
specifier|private
name|DiffCache
name|diffCache
decl_stmt|;
DECL|field|p
specifier|private
name|PrintWriter
name|p
decl_stmt|;
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|startThread
argument_list|(
operator|new
name|CommandRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|parseCommandLine
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|flush ()
specifier|private
name|void
name|flush
parameter_list|()
throws|throws
name|Failure
block|{
name|p
operator|=
name|toPrintWriter
argument_list|(
name|err
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
condition|)
block|{
if|if
condition|(
name|all
operator|||
name|caches
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
literal|1
argument_list|,
literal|"error: cannot use --list with --all or --cache"
argument_list|)
throw|;
block|}
name|doList
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|all
operator|&&
name|caches
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
literal|1
argument_list|,
literal|"error: cannot combine --all and --cache"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|all
operator|&&
name|caches
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|caches
operator|.
name|contains
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|caches
operator|.
name|clear
argument_list|()
expr_stmt|;
name|all
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|all
operator|&&
name|caches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|all
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|names
init|=
name|cacheNames
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|n
range|:
name|caches
control|)
block|{
if|if
condition|(
operator|!
name|names
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
literal|1
argument_list|,
literal|"error: cache \""
operator|+
name|n
operator|+
literal|"\" not recognized"
argument_list|)
throw|;
block|}
block|}
name|doBulkFlush
argument_list|()
expr_stmt|;
block|}
DECL|method|doList ()
specifier|private
name|void
name|doList
parameter_list|()
block|{
for|for
control|(
specifier|final
name|String
name|name
range|:
name|cacheNames
argument_list|()
control|)
block|{
name|p
operator|.
name|print
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|p
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|doBulkFlush ()
specifier|private
name|void
name|doBulkFlush
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|flush
argument_list|(
literal|"groups"
argument_list|)
condition|)
block|{
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flush
argument_list|(
literal|"accounts"
argument_list|)
condition|)
block|{
name|Common
operator|.
name|getAccountCache
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Ehcache
name|c
range|:
name|getAllCaches
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|c
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|diffCache
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|flush
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|c
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|p
operator|.
name|println
argument_list|(
literal|"error: cannot flush cache \""
operator|+
name|name
operator|+
literal|"\": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|flush
argument_list|(
name|diffCache
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|diffCache
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|n
init|=
name|diffCache
operator|.
name|getName
argument_list|()
decl_stmt|;
name|p
operator|.
name|println
argument_list|(
literal|"warning: cannot save cache \""
operator|+
name|n
operator|+
literal|"\": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|p
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|flush (final String cacheName)
specifier|private
name|boolean
name|flush
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|)
block|{
return|return
name|all
operator|||
name|caches
operator|.
name|contains
argument_list|(
name|cacheName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

