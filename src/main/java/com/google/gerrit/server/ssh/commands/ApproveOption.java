begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ApprovalType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|OptionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|OneArgumentOptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|OptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|Setter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_class
DECL|class|ApproveOption
specifier|final
class|class
name|ApproveOption
implements|implements
name|Option
implements|,
name|Setter
argument_list|<
name|Short
argument_list|>
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|usage
specifier|private
specifier|final
name|String
name|usage
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|ApprovalType
name|type
decl_stmt|;
DECL|field|value
specifier|private
name|Short
name|value
decl_stmt|;
DECL|method|ApproveOption (final String name, final String usage, final ApprovalType type)
name|ApproveOption
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|usage
parameter_list|,
specifier|final
name|ApprovalType
name|type
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|usage
operator|=
name|usage
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|aliases ()
specifier|public
name|String
index|[]
name|aliases
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|handler ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OptionHandler
argument_list|<
name|Short
argument_list|>
argument_list|>
name|handler
parameter_list|()
block|{
return|return
name|Handler
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|metaVar ()
specifier|public
name|String
name|metaVar
parameter_list|()
block|{
return|return
literal|"N"
return|;
block|}
annotation|@
name|Override
DECL|method|multiValued ()
specifier|public
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|required ()
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|usage ()
specifier|public
name|String
name|usage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
DECL|method|value ()
specifier|public
name|Short
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|annotationType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addValue (final Short val)
specifier|public
name|void
name|addValue
parameter_list|(
specifier|final
name|Short
name|val
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|Short
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued ()
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getCategoryId ()
name|ApprovalCategory
operator|.
name|Id
name|getCategoryId
parameter_list|()
block|{
return|return
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|class|Handler
specifier|public
specifier|static
class|class
name|Handler
extends|extends
name|OneArgumentOptionHandler
argument_list|<
name|Short
argument_list|>
block|{
DECL|field|cmdOption
specifier|private
specifier|final
name|ApproveOption
name|cmdOption
decl_stmt|;
DECL|method|Handler (final CmdLineParser parser, final OptionDef option, final Setter<Short> setter)
specifier|public
name|Handler
parameter_list|(
specifier|final
name|CmdLineParser
name|parser
parameter_list|,
specifier|final
name|OptionDef
name|option
parameter_list|,
specifier|final
name|Setter
argument_list|<
name|Short
argument_list|>
name|setter
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|option
argument_list|,
name|setter
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmdOption
operator|=
operator|(
name|ApproveOption
operator|)
name|setter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse (final String token)
specifier|protected
name|Short
name|parse
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
throws|throws
name|NumberFormatException
throws|,
name|CmdLineException
block|{
name|String
name|argument
init|=
name|token
decl_stmt|;
if|if
condition|(
name|argument
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|argument
operator|=
name|argument
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|short
name|value
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|argument
argument_list|)
decl_stmt|;
specifier|final
name|short
name|min
init|=
name|cmdOption
operator|.
name|type
operator|.
name|getMin
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|short
name|max
init|=
name|cmdOption
operator|.
name|type
operator|.
name|getMax
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
argument_list|<
name|min
operator|||
name|value
argument_list|>
name|max
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|cmdOption
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|final
name|String
name|e
init|=
literal|"\""
operator|+
name|token
operator|+
literal|"\" must be in range "
operator|+
name|format
argument_list|(
name|min
argument_list|)
operator|+
literal|".."
operator|+
name|format
argument_list|(
name|max
argument_list|)
operator|+
literal|" for \""
operator|+
name|name
operator|+
literal|"\""
decl_stmt|;
throw|throw
operator|new
name|CmdLineException
argument_list|(
name|owner
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
block|}
DECL|method|format (final short min)
specifier|static
name|String
name|format
parameter_list|(
specifier|final
name|short
name|min
parameter_list|)
block|{
return|return
name|min
operator|>
literal|0
condition|?
literal|"+"
operator|+
name|min
else|:
name|Short
operator|.
name|toString
argument_list|(
name|min
argument_list|)
return|;
block|}
block|}
end_class

end_unit

