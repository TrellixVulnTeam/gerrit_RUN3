begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ProjectRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|ReplicationQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|account
operator|.
name|GroupCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|AdminCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|BaseCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/** Create a new project. **/
end_comment

begin_class
annotation|@
name|AdminCommand
DECL|class|AdminCreateProject
specifier|final
class|class
name|AdminCreateProject
extends|extends
name|BaseCommand
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--name"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|aliases
operator|=
block|{
literal|"-n"
block|}
argument_list|,
name|usage
operator|=
literal|"name of project to be created"
argument_list|)
DECL|field|projectName
specifier|private
name|String
name|projectName
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--owner"
argument_list|,
name|aliases
operator|=
block|{
literal|"-o"
block|}
argument_list|,
name|usage
operator|=
literal|"name of group that will own the project (defaults to: Administrators)"
argument_list|)
DECL|field|ownerName
specifier|private
name|String
name|ownerName
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--description"
argument_list|,
name|aliases
operator|=
block|{
literal|"-d"
block|}
argument_list|,
name|usage
operator|=
literal|"description of the project"
argument_list|)
DECL|field|projectDescription
specifier|private
name|String
name|projectDescription
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--submit-type"
argument_list|,
name|aliases
operator|=
block|{
literal|"-t"
block|}
argument_list|,
name|usage
operator|=
literal|"project submit type (F)ast forward only, (M)erge if necessary, merge (A)lways or (C)herry pick (defaults to: F)"
argument_list|)
DECL|field|submitTypeStr
specifier|private
name|String
name|submitTypeStr
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--use-contributor-agreements"
argument_list|,
name|aliases
operator|=
block|{
literal|"--ca"
block|}
argument_list|,
name|usage
operator|=
literal|"set this to true if project should make the user sign a contributor agreement   (defaults to: N)"
argument_list|)
DECL|field|useContributorAgreements
specifier|private
name|String
name|useContributorAgreements
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--use-signed-off-by"
argument_list|,
name|aliases
operator|=
block|{
literal|"--so"
block|}
argument_list|,
name|usage
operator|=
literal|"set this to true if the project should mandate signed-off-by (defaults to: N)"
argument_list|)
DECL|field|useSignedOffBy
specifier|private
name|String
name|useSignedOffBy
decl_stmt|;
annotation|@
name|Inject
DECL|field|db
specifier|private
name|ReviewDb
name|db
decl_stmt|;
annotation|@
name|Inject
DECL|field|gs
specifier|private
name|GerritServer
name|gs
decl_stmt|;
annotation|@
name|Inject
DECL|field|groupCache
specifier|private
name|GroupCache
name|groupCache
decl_stmt|;
annotation|@
name|Inject
DECL|field|rq
specifier|private
name|ReplicationQueue
name|rq
decl_stmt|;
DECL|field|ownerId
specifier|private
name|AccountGroup
operator|.
name|Id
name|ownerId
init|=
literal|null
decl_stmt|;
DECL|field|contributorAgreements
specifier|private
name|boolean
name|contributorAgreements
init|=
literal|false
decl_stmt|;
DECL|field|signedOffBy
specifier|private
name|boolean
name|signedOffBy
init|=
literal|false
decl_stmt|;
DECL|field|submitType
specifier|private
name|SubmitType
name|submitType
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|startThread
argument_list|(
operator|new
name|CommandRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|p
init|=
name|toPrintWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|parseCommandLine
argument_list|()
expr_stmt|;
try|try
block|{
name|validateParameters
argument_list|()
expr_stmt|;
name|Transaction
name|txn
init|=
name|db
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|createProject
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|Repository
name|repo
init|=
name|gs
operator|.
name|createRepository
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
name|repo
operator|.
name|create
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setProjectDescription
argument_list|(
name|projectName
argument_list|,
name|projectDescription
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|rq
operator|.
name|replicateNewProject
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|projectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|p
operator|.
name|print
argument_list|(
literal|"Error when trying to create project: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|p
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createProject (Transaction txn)
specifier|private
name|void
name|createProject
parameter_list|(
name|Transaction
name|txn
parameter_list|)
throws|throws
name|OrmException
throws|,
name|NoSuchEntityException
block|{
specifier|final
name|Project
operator|.
name|NameKey
name|newProjectNameKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|newProject
init|=
operator|new
name|Project
argument_list|(
name|newProjectNameKey
argument_list|,
operator|new
name|Project
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextProjectId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|newProject
operator|.
name|setDescription
argument_list|(
name|projectDescription
argument_list|)
expr_stmt|;
name|newProject
operator|.
name|setSubmitType
argument_list|(
name|submitType
argument_list|)
expr_stmt|;
name|newProject
operator|.
name|setUseContributorAgreements
argument_list|(
name|contributorAgreements
argument_list|)
expr_stmt|;
name|newProject
operator|.
name|setUseSignedOffBy
argument_list|(
name|signedOffBy
argument_list|)
expr_stmt|;
name|db
operator|.
name|projects
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newProject
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
specifier|final
name|ProjectRight
operator|.
name|Key
name|prk
init|=
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|newProjectNameKey
argument_list|,
name|ApprovalCategory
operator|.
name|OWN
argument_list|,
name|ownerId
argument_list|)
decl_stmt|;
specifier|final
name|ProjectRight
name|pr
init|=
operator|new
name|ProjectRight
argument_list|(
name|prk
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|pr
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
specifier|final
name|Branch
name|newBranch
init|=
operator|new
name|Branch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|newProjectNameKey
argument_list|,
name|Branch
operator|.
name|R_HEADS
operator|+
literal|"master"
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|.
name|branches
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|newBranch
argument_list|)
argument_list|,
name|txn
argument_list|)
expr_stmt|;
block|}
DECL|method|stringToBoolean (final String boolStr, final boolean defaultValue)
specifier|private
name|boolean
name|stringToBoolean
parameter_list|(
specifier|final
name|String
name|boolStr
parameter_list|,
specifier|final
name|boolean
name|defaultValue
parameter_list|)
throws|throws
name|Failure
block|{
if|if
condition|(
name|boolStr
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
if|if
condition|(
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FALSE"
argument_list|)
operator|||
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"F"
argument_list|)
operator|||
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"NO"
argument_list|)
operator|||
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"N"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
operator|||
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"T"
argument_list|)
operator|||
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"YES"
argument_list|)
operator|||
name|boolStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Y"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|Failure
argument_list|(
literal|1
argument_list|,
literal|"Parameter must have boolean value (true, false)"
argument_list|)
throw|;
block|}
DECL|method|validateParameters ()
specifier|private
name|void
name|validateParameters
parameter_list|()
throws|throws
name|Failure
throws|,
name|OrmException
block|{
if|if
condition|(
name|projectName
operator|.
name|endsWith
argument_list|(
literal|".git"
argument_list|)
condition|)
block|{
name|projectName
operator|=
name|projectName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|projectName
operator|.
name|length
argument_list|()
operator|-
literal|".git"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ownerName
operator|==
literal|null
condition|)
block|{
name|ownerId
operator|=
name|groupCache
operator|.
name|getAdministrators
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|AccountGroup
name|ownerGroup
init|=
name|groupCache
operator|.
name|lookup
argument_list|(
name|ownerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ownerGroup
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
literal|1
argument_list|,
literal|"Specified group does not exist"
argument_list|)
throw|;
block|}
name|ownerId
operator|=
name|ownerGroup
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|projectDescription
operator|==
literal|null
condition|)
block|{
name|projectDescription
operator|=
literal|""
expr_stmt|;
block|}
name|contributorAgreements
operator|=
name|stringToBoolean
argument_list|(
name|useContributorAgreements
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|signedOffBy
operator|=
name|stringToBoolean
argument_list|(
name|useSignedOffBy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitTypeStr
operator|==
literal|null
condition|)
block|{
name|submitType
operator|=
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|submitTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"fast-forward-only"
argument_list|)
condition|)
block|{
name|submitType
operator|=
name|SubmitType
operator|.
name|FAST_FORWARD_ONLY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|submitTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"merge-if-necessary"
argument_list|)
condition|)
block|{
name|submitType
operator|=
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|submitTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"merge-always"
argument_list|)
condition|)
block|{
name|submitType
operator|=
name|SubmitType
operator|.
name|MERGE_ALWAYS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|submitTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cherry-pick"
argument_list|)
condition|)
block|{
name|submitType
operator|=
name|SubmitType
operator|.
name|CHERRY_PICK
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Failure
argument_list|(
literal|1
argument_list|,
literal|"Submit type must be either: fast-forward-only, "
operator|+
literal|"merge-if-necessary, merge-always or cherry-pick"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

