begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh.commands
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|OptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|spi
operator|.
name|Setter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_class
DECL|class|CmdOption
class|class
name|CmdOption
implements|implements
name|Option
implements|,
name|Setter
block|{
DECL|field|metaVar
specifier|private
name|String
name|metaVar
decl_stmt|;
DECL|field|multiValued
specifier|private
name|boolean
name|multiValued
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|required
specifier|private
name|boolean
name|required
decl_stmt|;
DECL|field|usage
specifier|private
name|String
name|usage
decl_stmt|;
DECL|field|approvalKey
specifier|private
name|String
name|approvalKey
decl_stmt|;
DECL|field|approvalMax
specifier|private
name|Short
name|approvalMax
decl_stmt|;
DECL|field|approvalMin
specifier|private
name|Short
name|approvalMin
decl_stmt|;
DECL|field|descrName
specifier|private
name|String
name|descrName
decl_stmt|;
DECL|field|value
specifier|private
name|Short
name|value
decl_stmt|;
DECL|method|CmdOption (final String name, final String usage, final String key, final Short min, final Short max, final String descrName)
specifier|public
name|CmdOption
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|usage
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Short
name|min
parameter_list|,
specifier|final
name|Short
name|max
parameter_list|,
specifier|final
name|String
name|descrName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|usage
operator|=
name|usage
expr_stmt|;
name|this
operator|.
name|metaVar
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|multiValued
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|required
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|value
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|approvalKey
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|approvalMax
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|approvalMin
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|descrName
operator|=
name|descrName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|aliases ()
specifier|public
specifier|final
name|String
index|[]
name|aliases
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|handler ()
specifier|public
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|OptionHandler
argument_list|>
name|handler
parameter_list|()
block|{
return|return
name|OptionHandler
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|metaVar ()
specifier|public
specifier|final
name|String
name|metaVar
parameter_list|()
block|{
return|return
name|metaVar
return|;
block|}
annotation|@
name|Override
DECL|method|multiValued ()
specifier|public
specifier|final
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
name|multiValued
return|;
block|}
annotation|@
name|Override
DECL|method|name ()
specifier|public
specifier|final
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|required ()
specifier|public
specifier|final
name|boolean
name|required
parameter_list|()
block|{
return|return
name|required
return|;
block|}
annotation|@
name|Override
DECL|method|usage ()
specifier|public
specifier|final
name|String
name|usage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
DECL|method|value ()
specifier|public
specifier|final
name|Short
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|approvalKey ()
specifier|public
specifier|final
name|String
name|approvalKey
parameter_list|()
block|{
return|return
name|approvalKey
return|;
block|}
DECL|method|approvalMax ()
specifier|public
specifier|final
name|Short
name|approvalMax
parameter_list|()
block|{
return|return
name|approvalMax
return|;
block|}
DECL|method|approvalMin ()
specifier|public
specifier|final
name|Short
name|approvalMin
parameter_list|()
block|{
return|return
name|approvalMin
return|;
block|}
DECL|method|descrName ()
specifier|public
specifier|final
name|String
name|descrName
parameter_list|()
block|{
return|return
name|descrName
return|;
block|}
annotation|@
name|Override
DECL|method|annotationType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addValue (final Object value)
specifier|public
name|void
name|addValue
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|CmdLineException
block|{
name|Short
name|val
init|=
operator|(
name|Short
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|val
argument_list|<
name|approvalMin
operator|||
name|val
argument_list|>
name|approvalMax
condition|)
block|{
throw|throw
operator|new
name|CmdLineException
argument_list|(
name|name
argument_list|()
operator|+
literal|" valid values are "
operator|+
name|approvalMin
operator|.
name|toString
argument_list|()
operator|+
literal|".."
operator|+
name|approvalMax
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
operator|(
name|Short
operator|)
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|Class
name|getType
parameter_list|()
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued ()
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

