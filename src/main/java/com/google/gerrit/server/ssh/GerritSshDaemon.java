begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoAcceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|SocketSessionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketAcceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|SshServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|KeyExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|KeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|NamedFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|AES128CBC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|AES192CBC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|AES256CBC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|BlowfishCBC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|CipherNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|TripleDESCBC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|compression
operator|.
name|CompressionNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|FileKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|mac
operator|.
name|HMACMD5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|mac
operator|.
name|HMACMD596
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|mac
operator|.
name|HMACSHA1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|mac
operator|.
name|HMACSHA196
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|random
operator|.
name|BouncyCastleRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|random
operator|.
name|JceRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|random
operator|.
name|SingletonRandomFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|signature
operator|.
name|SignatureDSA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|signature
operator|.
name|SignatureRSA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|CommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|PublickeyAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|ServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|UserAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|auth
operator|.
name|UserAuthPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|channel
operator|.
name|ChannelSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|kex
operator|.
name|DHG1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|kex
operator|.
name|DHG14
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|keyprovider
operator|.
name|SimpleGeneratorHostKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|session
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * SSH daemon to communicate with Gerrit.  *<p>  * Use a Git URL such as<code>ssh://${email}@${host}:${port}/${path}</code>,  * e.g.<code>ssh://sop@google.com@gerrit.com:8010/tools/gerrit.git</code> to  * access the SSH daemon itself.  *<p>  * Versions of Git before 1.5.3 may require setting the username and port  * properties in the user's<code>~/.ssh/config</code> file, and using a host  * alias through a URL such as<code>gerrit-alias:/tools/gerrit.git:  *<pre>  * Host gerrit-alias  *  User sop@google.com  *  Hostname gerrit.com  *  Port 8010  *</pre>  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|GerritSshDaemon
class|class
name|GerritSshDaemon
extends|extends
name|SshServer
implements|implements
name|Sshd
block|{
DECL|field|DEFAULT_PORT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PORT
init|=
literal|29418
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GerritSshDaemon
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|format (final SocketAddress addr)
specifier|private
specifier|static
name|String
name|format
parameter_list|(
specifier|final
name|SocketAddress
name|addr
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|instanceof
name|InetSocketAddress
condition|)
block|{
specifier|final
name|InetSocketAddress
name|inetAddr
init|=
operator|(
name|InetSocketAddress
operator|)
name|addr
decl_stmt|;
specifier|final
name|InetAddress
name|hostAddr
init|=
name|inetAddr
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|String
name|host
decl_stmt|;
if|if
condition|(
name|hostAddr
operator|.
name|isAnyLocalAddress
argument_list|()
condition|)
block|{
name|host
operator|=
literal|"*"
expr_stmt|;
block|}
else|else
block|{
name|host
operator|=
literal|"["
operator|+
name|hostAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|host
operator|+
literal|":"
operator|+
name|inetAddr
operator|.
name|getPort
argument_list|()
return|;
block|}
return|return
name|addr
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|listen
specifier|private
specifier|final
name|List
argument_list|<
name|SocketAddress
argument_list|>
name|listen
decl_stmt|;
DECL|field|preferredAddress
specifier|private
specifier|final
name|InetSocketAddress
name|preferredAddress
decl_stmt|;
DECL|field|reuseAddress
specifier|private
specifier|final
name|boolean
name|reuseAddress
decl_stmt|;
DECL|field|keepAlive
specifier|private
specifier|final
name|boolean
name|keepAlive
decl_stmt|;
DECL|field|hostKeys
specifier|private
specifier|final
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|hostKeys
decl_stmt|;
DECL|field|acceptor
specifier|private
specifier|volatile
name|IoAcceptor
name|acceptor
decl_stmt|;
annotation|@
name|Inject
DECL|method|GerritSshDaemon (final GerritServer srv, final CommandFactory commandFactory, final PublickeyAuthenticator userAuth, @SitePath final File sitePath, @GerritServerConfig final Config cfg)
name|GerritSshDaemon
parameter_list|(
specifier|final
name|GerritServer
name|srv
parameter_list|,
specifier|final
name|CommandFactory
name|commandFactory
parameter_list|,
specifier|final
name|PublickeyAuthenticator
name|userAuth
parameter_list|,
annotation|@
name|SitePath
specifier|final
name|File
name|sitePath
parameter_list|,
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|setPort
argument_list|(
literal|22
comment|/* never used */
argument_list|)
expr_stmt|;
name|listen
operator|=
name|parseListen
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|reuseAddress
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"sshd"
argument_list|,
literal|"reuseaddress"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keepAlive
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"sshd"
argument_list|,
literal|"tcpkeepalive"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|SecurityUtils
operator|.
name|isBouncyCastleRegistered
argument_list|()
condition|)
block|{
name|initProviderBouncyCastle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|initProviderJce
argument_list|()
expr_stmt|;
block|}
name|initCiphers
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|initMacs
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|initSignatures
argument_list|()
expr_stmt|;
name|initChannels
argument_list|()
expr_stmt|;
name|initCompression
argument_list|()
expr_stmt|;
name|initUserAuth
argument_list|(
name|userAuth
argument_list|)
expr_stmt|;
name|setKeyPairProvider
argument_list|(
name|initHostKey
argument_list|(
name|sitePath
argument_list|)
argument_list|)
expr_stmt|;
name|setCommandFactory
argument_list|(
name|commandFactory
argument_list|)
expr_stmt|;
name|setShellFactory
argument_list|(
operator|new
name|NoShell
argument_list|()
argument_list|)
expr_stmt|;
name|setSessionFactory
argument_list|(
operator|new
name|SessionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ServerSession
name|createSession
parameter_list|(
specifier|final
name|IoSession
name|io
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|io
operator|.
name|getConfig
argument_list|()
operator|instanceof
name|SocketSessionConfig
condition|)
block|{
specifier|final
name|SocketSessionConfig
name|c
init|=
operator|(
name|SocketSessionConfig
operator|)
name|io
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|c
operator|.
name|setKeepAlive
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ServerSession
name|s
init|=
operator|(
name|ServerSession
operator|)
name|super
operator|.
name|createSession
argument_list|(
name|io
argument_list|)
decl_stmt|;
name|s
operator|.
name|setAttribute
argument_list|(
name|SshUtil
operator|.
name|REMOTE_PEER
argument_list|,
name|io
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAttribute
argument_list|(
name|SshUtil
operator|.
name|ACTIVE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AbstractCommand
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAttribute
argument_list|(
name|SshScopes
operator|.
name|sessionMap
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Key
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hostKeys
operator|=
name|computeHostKeys
argument_list|()
expr_stmt|;
name|preferredAddress
operator|=
name|computePreferredAddress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHostKeys ()
specifier|public
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|getHostKeys
parameter_list|()
block|{
return|return
name|hostKeys
return|;
block|}
annotation|@
name|Override
DECL|method|getAddress ()
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|preferredAddress
return|;
block|}
DECL|method|getIoAcceptor ()
specifier|public
name|IoAcceptor
name|getIoAcceptor
parameter_list|()
block|{
return|return
name|acceptor
return|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|acceptor
operator|==
literal|null
condition|)
block|{
name|checkConfig
argument_list|()
expr_stmt|;
if|if
condition|(
name|hostKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No SSHD host key"
argument_list|)
throw|;
block|}
specifier|final
name|NioSocketAcceptor
name|ain
init|=
operator|new
name|NioSocketAcceptor
argument_list|()
decl_stmt|;
specifier|final
name|SessionFactory
name|handler
init|=
name|getSessionFactory
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ain
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|ain
operator|.
name|setReuseAddress
argument_list|(
name|reuseAddress
argument_list|)
expr_stmt|;
name|ain
operator|.
name|bind
argument_list|(
name|listen
argument_list|)
expr_stmt|;
name|acceptor
operator|=
name|ain
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started Gerrit SSHD on "
operator|+
name|addressList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|acceptor
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|acceptor
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopped Gerrit SSHD"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acceptor
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|computeHostKeys ()
specifier|private
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|computeHostKeys
parameter_list|()
block|{
specifier|final
name|KeyPairProvider
name|p
init|=
name|getKeyPairProvider
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|PublicKey
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|PublicKey
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|addPublicKey
argument_list|(
name|keys
argument_list|,
name|p
argument_list|,
name|KeyPairProvider
operator|.
name|SSH_DSS
argument_list|)
expr_stmt|;
name|addPublicKey
argument_list|(
name|keys
argument_list|,
name|p
argument_list|,
name|KeyPairProvider
operator|.
name|SSH_RSA
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|keys
argument_list|)
return|;
block|}
DECL|method|addPublicKey (final Collection<PublicKey> out, final KeyPairProvider p, final String type)
specifier|private
specifier|static
name|void
name|addPublicKey
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|out
parameter_list|,
specifier|final
name|KeyPairProvider
name|p
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
block|{
specifier|final
name|KeyPair
name|pair
init|=
name|p
operator|.
name|loadKey
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
operator|&&
name|pair
operator|.
name|getPublic
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|computePreferredAddress ()
specifier|private
name|InetSocketAddress
name|computePreferredAddress
parameter_list|()
block|{
for|for
control|(
specifier|final
name|SocketAddress
name|addr
range|:
name|listen
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|addr
operator|instanceof
name|InetSocketAddress
operator|)
condition|)
block|{
continue|continue;
block|}
name|InetSocketAddress
name|inetAddr
init|=
operator|(
name|InetSocketAddress
operator|)
name|addr
decl_stmt|;
if|if
condition|(
name|inetAddr
operator|.
name|getAddress
argument_list|()
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
continue|continue;
block|}
return|return
name|inetAddr
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|addressList ()
specifier|private
name|String
name|addressList
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|r
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SocketAddress
argument_list|>
name|i
init|=
name|listen
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|r
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseListen (final Config cfg)
specifier|private
name|List
argument_list|<
name|SocketAddress
argument_list|>
name|parseListen
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|SocketAddress
argument_list|>
name|bind
init|=
operator|new
name|ArrayList
argument_list|<
name|SocketAddress
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|want
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
literal|"listenaddress"
argument_list|)
decl_stmt|;
if|if
condition|(
name|want
operator|==
literal|null
operator|||
name|want
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|bind
operator|.
name|add
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|DEFAULT_PORT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bind
return|;
block|}
for|for
control|(
specifier|final
name|String
name|desc
range|:
name|want
control|)
block|{
try|try
block|{
name|bind
operator|.
name|add
argument_list|(
name|toSocketAddress
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Bad sshd.listenaddress: "
operator|+
name|desc
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bind
return|;
block|}
DECL|method|toSocketAddress (final String desc)
specifier|private
name|SocketAddress
name|toSocketAddress
parameter_list|(
specifier|final
name|String
name|desc
parameter_list|)
block|{
name|String
name|hostStr
decl_stmt|;
name|String
name|portStr
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
comment|// IPv6, as a raw IP address.
comment|//
specifier|final
name|int
name|hostEnd
init|=
name|desc
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid IPv6 representation"
argument_list|)
throw|;
block|}
name|hostStr
operator|=
name|desc
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|hostEnd
argument_list|)
expr_stmt|;
name|portStr
operator|=
name|desc
operator|.
name|substring
argument_list|(
name|hostEnd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// IPv4, or a host name.
comment|//
specifier|final
name|int
name|hostEnd
init|=
name|desc
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|hostStr
operator|=
literal|0
operator|<=
name|hostEnd
condition|?
name|desc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hostEnd
argument_list|)
else|:
name|desc
expr_stmt|;
name|portStr
operator|=
literal|0
operator|<=
name|hostEnd
condition|?
name|desc
operator|.
name|substring
argument_list|(
name|hostEnd
argument_list|)
else|:
literal|""
expr_stmt|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|hostStr
argument_list|)
condition|)
block|{
name|hostStr
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|portStr
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|portStr
operator|=
name|portStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|port
decl_stmt|;
if|if
condition|(
name|portStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid port"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|port
operator|=
name|DEFAULT_PORT
expr_stmt|;
block|}
if|if
condition|(
name|hostStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostStr
argument_list|)
argument_list|,
name|port
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initProviderBouncyCastle ()
specifier|private
name|void
name|initProviderBouncyCastle
parameter_list|()
block|{
name|setKeyExchangeFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|KeyExchange
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|DHG14
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|DHG1
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setRandomFactory
argument_list|(
operator|new
name|SingletonRandomFactory
argument_list|(
operator|new
name|BouncyCastleRandom
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initProviderJce ()
specifier|private
name|void
name|initProviderJce
parameter_list|()
block|{
name|setKeyExchangeFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|KeyExchange
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|DHG1
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setRandomFactory
argument_list|(
operator|new
name|SingletonRandomFactory
argument_list|(
operator|new
name|JceRandom
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initCiphers (final Config cfg)
specifier|private
name|void
name|initCiphers
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
name|a
init|=
operator|new
name|LinkedList
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|AES128CBC
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|TripleDESCBC
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|BlowfishCBC
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|AES192CBC
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|AES256CBC
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
name|i
init|=
name|a
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
name|f
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Cipher
name|c
init|=
name|f
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
name|c
operator|.
name|getBlockSize
argument_list|()
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|iv
init|=
operator|new
name|byte
index|[
name|c
operator|.
name|getIVSize
argument_list|()
index|]
decl_stmt|;
name|c
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|Mode
operator|.
name|Encrypt
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Disabling cipher "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"; try installing unlimited cryptography extension"
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Disabling cipher "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
operator|new
name|CipherNone
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|setCipherFactories
argument_list|(
name|filter
argument_list|(
name|cfg
argument_list|,
literal|"cipher"
argument_list|,
name|a
operator|.
name|toArray
argument_list|(
operator|new
name|NamedFactory
index|[
name|a
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initMacs (final Config cfg)
specifier|private
name|void
name|initMacs
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|setMacFactories
argument_list|(
name|filter
argument_list|(
name|cfg
argument_list|,
literal|"mac"
argument_list|,
operator|new
name|HMACMD5
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|HMACSHA1
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|HMACMD596
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|HMACSHA196
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|filter (final Config cfg, final String key, final NamedFactory<T>... avail)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|T
argument_list|>
argument_list|>
name|filter
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|NamedFactory
argument_list|<
name|T
argument_list|>
modifier|...
name|avail
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|NamedFactory
argument_list|<
name|T
argument_list|>
argument_list|>
name|def
init|=
operator|new
name|ArrayList
argument_list|<
name|NamedFactory
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NamedFactory
argument_list|<
name|T
argument_list|>
name|n
range|:
name|avail
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|def
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|want
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"sshd"
argument_list|,
literal|null
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|want
operator|==
literal|null
operator|||
name|want
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|def
return|;
block|}
name|boolean
name|didClear
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|setting
range|:
name|want
control|)
block|{
name|String
name|name
init|=
name|setting
operator|.
name|trim
argument_list|()
decl_stmt|;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|add
operator|=
literal|false
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|didClear
condition|)
block|{
name|didClear
operator|=
literal|true
expr_stmt|;
name|def
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|final
name|NamedFactory
argument_list|<
name|T
argument_list|>
name|n
init|=
name|find
argument_list|(
name|name
argument_list|,
name|avail
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"sshd."
operator|+
name|key
operator|+
literal|" = "
operator|+
name|name
operator|+
literal|" unsupported; only "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|avail
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|avail
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
name|avail
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|" is supported"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|add
condition|)
block|{
if|if
condition|(
operator|!
name|def
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|def
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|def
operator|.
name|remove
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|def
return|;
block|}
DECL|method|find (final String name, final NamedFactory<T>... avail)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|NamedFactory
argument_list|<
name|T
argument_list|>
name|find
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|NamedFactory
argument_list|<
name|T
argument_list|>
modifier|...
name|avail
parameter_list|)
block|{
for|for
control|(
specifier|final
name|NamedFactory
argument_list|<
name|T
argument_list|>
name|n
range|:
name|avail
control|)
block|{
if|if
condition|(
name|n
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initSignatures ()
specifier|private
name|void
name|initSignatures
parameter_list|()
block|{
name|setSignatureFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|Signature
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|SignatureDSA
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|SignatureRSA
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initCompression ()
specifier|private
name|void
name|initCompression
parameter_list|()
block|{
comment|// Always disable transparent compression. The majority of our data
comment|// transfer is highly compressed Git pack files. We cannot make them
comment|// any smaller than they already are.
comment|//
name|setCompressionFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|Compression
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|CompressionNone
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initChannels ()
specifier|private
name|void
name|initChannels
parameter_list|()
block|{
name|setChannelFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|ServerChannel
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|ChannelSession
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initUserAuth (final PublickeyAuthenticator pubkey)
specifier|private
name|void
name|initUserAuth
parameter_list|(
specifier|final
name|PublickeyAuthenticator
name|pubkey
parameter_list|)
block|{
name|setUserAuthFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|UserAuth
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|UserAuthPublicKey
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setPublickeyAuthenticator
argument_list|(
name|pubkey
argument_list|)
expr_stmt|;
block|}
DECL|method|initHostKey (final File sitePath)
specifier|private
name|KeyPairProvider
name|initHostKey
parameter_list|(
specifier|final
name|File
name|sitePath
parameter_list|)
block|{
specifier|final
name|File
name|anyKey
init|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"ssh_host_key"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|rsaKey
init|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"ssh_host_rsa_key"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dsaKey
init|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"ssh_host_dsa_key"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsaKey
operator|.
name|exists
argument_list|()
condition|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|rsaKey
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dsaKey
operator|.
name|exists
argument_list|()
condition|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|dsaKey
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|anyKey
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If both formats of host key exist, we don't know which format
comment|// should be authoritative. Complain and abort.
comment|//
name|keys
operator|.
name|add
argument_list|(
name|anyKey
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Multiple host keys exist: "
operator|+
name|keys
argument_list|)
throw|;
block|}
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No administrator created host key? Generate and save our own.
comment|//
specifier|final
name|SimpleGeneratorHostKeyProvider
name|keyp
decl_stmt|;
name|keyp
operator|=
operator|new
name|SimpleGeneratorHostKeyProvider
argument_list|()
expr_stmt|;
name|keyp
operator|.
name|setPath
argument_list|(
name|anyKey
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keyp
return|;
block|}
return|return
operator|new
name|FileKeyPairProvider
argument_list|(
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

