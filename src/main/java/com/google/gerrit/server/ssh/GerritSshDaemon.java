begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|SshServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|KeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|NamedFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|compression
operator|.
name|CompressionNone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|FileKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|session
operator|.
name|AbstractSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|UserAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|auth
operator|.
name|UserAuthPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|keyprovider
operator|.
name|SimpleGeneratorHostKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * SSH daemon to communicate with Gerrit.  *<p>  * Use a Git URL such as<code>ssh://${email}@${host}:${port}/${path}</code>,  * e.g.<code>ssh://sop@google.com@gerrit.com:8010/tools/gerrit.git</code> to  * access the SSH daemon itself.  *<p>  * Versions of Git before 1.5.3 may require setting the username and port  * properties in the user's<code>~/.ssh/config</code> file, and using a host  * alias through a URL such as<code>gerrit-alias:/tools/gerrit.git:  *<pre>  * Host gerrit-alias  *  User sop@google.com  *  Hostname gerrit.com  *  Port 8010  *</pre>  */
end_comment

begin_class
DECL|class|GerritSshDaemon
specifier|public
class|class
name|GerritSshDaemon
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GerritSshDaemon
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sshd
specifier|private
specifier|static
name|SshServer
name|sshd
decl_stmt|;
DECL|field|hostKeys
specifier|private
specifier|static
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|hostKeys
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|method|startSshd ()
specifier|public
specifier|static
specifier|synchronized
name|void
name|startSshd
parameter_list|()
throws|throws
name|OrmException
throws|,
name|XsrfException
throws|,
name|SocketException
block|{
specifier|final
name|GerritServer
name|srv
init|=
name|GerritServer
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|int
name|myPort
init|=
name|Common
operator|.
name|getGerritConfig
argument_list|()
operator|.
name|getSshdPort
argument_list|()
decl_stmt|;
specifier|final
name|SshServer
name|daemon
init|=
name|SshServer
operator|.
name|setUpDefaultServer
argument_list|()
decl_stmt|;
name|daemon
operator|.
name|setPort
argument_list|(
name|myPort
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setSessionFactory
argument_list|(
operator|new
name|SessionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|AbstractSession
name|createSession
parameter_list|(
specifier|final
name|IoSession
name|ioSession
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AbstractSession
name|s
init|=
name|super
operator|.
name|createSession
argument_list|(
name|ioSession
argument_list|)
decl_stmt|;
name|s
operator|.
name|setAttribute
argument_list|(
name|SshUtil
operator|.
name|REMOTE_PEER
argument_list|,
name|ioSession
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|File
name|sitePath
init|=
name|srv
operator|.
name|getSitePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|SecurityUtils
operator|.
name|isBouncyCastleRegistered
argument_list|()
condition|)
block|{
name|daemon
operator|.
name|setKeyPairProvider
argument_list|(
operator|new
name|FileKeyPairProvider
argument_list|(
operator|new
name|String
index|[]
block|{
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"ssh_host_rsa_key"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
block|,
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"ssh_host_dsa_key"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|SimpleGeneratorHostKeyProvider
name|keyp
decl_stmt|;
name|keyp
operator|=
operator|new
name|SimpleGeneratorHostKeyProvider
argument_list|()
expr_stmt|;
name|keyp
operator|.
name|setPath
argument_list|(
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"ssh_host_key"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setKeyPairProvider
argument_list|(
name|keyp
argument_list|)
expr_stmt|;
block|}
name|setCompression
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|setUserAuth
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setPublickeyAuthenticator
argument_list|(
operator|new
name|DatabasePubKeyAuth
argument_list|(
name|srv
argument_list|)
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setCommandFactory
argument_list|(
operator|new
name|GerritCommandFactory
argument_list|()
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|setShellFactory
argument_list|(
operator|new
name|NoShell
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sshd
operator|=
name|daemon
expr_stmt|;
name|daemon
operator|.
name|start
argument_list|()
expr_stmt|;
name|hostKeys
operator|=
name|computeHostKeys
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started Gerrit SSHD on 0.0.0.0:"
operator|+
name|myPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot start Gerrit SSHD on 0.0.0.0:"
operator|+
name|myPort
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sshd
operator|=
literal|null
expr_stmt|;
name|hostKeys
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
specifier|final
name|SocketException
name|e2
decl_stmt|;
name|e2
operator|=
operator|new
name|SocketException
argument_list|(
literal|"Cannot start sshd on "
operator|+
name|myPort
argument_list|)
expr_stmt|;
name|e2
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e2
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setCompression (final SshServer daemon)
specifier|private
specifier|static
name|void
name|setCompression
parameter_list|(
specifier|final
name|SshServer
name|daemon
parameter_list|)
block|{
comment|// Always disable transparent compression. The majority of our data
comment|// transfer is highly compressed Git pack files. We cannot make them
comment|// any smaller than they already are.
comment|//
name|daemon
operator|.
name|setCompressionFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|Compression
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|CompressionNone
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setUserAuth (final SshServer daemon)
specifier|private
specifier|static
name|void
name|setUserAuth
parameter_list|(
specifier|final
name|SshServer
name|daemon
parameter_list|)
block|{
name|daemon
operator|.
name|setUserAuthFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|UserAuth
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|UserAuthPublicKey
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|computeHostKeys ()
specifier|private
specifier|static
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|computeHostKeys
parameter_list|()
block|{
specifier|final
name|KeyPairProvider
name|p
init|=
name|sshd
operator|.
name|getKeyPairProvider
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|PublicKey
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|PublicKey
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|addPublicKey
argument_list|(
name|keys
argument_list|,
name|p
argument_list|,
name|KeyPairProvider
operator|.
name|SSH_DSS
argument_list|)
expr_stmt|;
name|addPublicKey
argument_list|(
name|keys
argument_list|,
name|p
argument_list|,
name|KeyPairProvider
operator|.
name|SSH_RSA
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|keys
argument_list|)
return|;
block|}
DECL|method|addPublicKey (final Collection<PublicKey> out, final KeyPairProvider p, final String type)
specifier|private
specifier|static
name|void
name|addPublicKey
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|out
parameter_list|,
specifier|final
name|KeyPairProvider
name|p
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
block|{
specifier|final
name|KeyPair
name|pair
init|=
name|p
operator|.
name|loadKey
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
operator|&&
name|pair
operator|.
name|getPublic
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopSshd ()
specifier|public
specifier|static
specifier|synchronized
name|void
name|stopSshd
parameter_list|()
block|{
if|if
condition|(
name|sshd
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sshd
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopped Gerrit SSHD on 0.0.0.0:"
operator|+
name|sshd
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sshd
operator|=
literal|null
expr_stmt|;
name|hostKeys
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSshdPort ()
specifier|public
specifier|static
specifier|synchronized
name|int
name|getSshdPort
parameter_list|()
block|{
return|return
name|sshd
operator|!=
literal|null
condition|?
name|sshd
operator|.
name|getPort
argument_list|()
else|:
literal|0
return|;
block|}
DECL|method|getHostKeys ()
specifier|public
specifier|static
specifier|synchronized
name|Collection
argument_list|<
name|PublicKey
argument_list|>
name|getHostKeys
parameter_list|()
block|{
return|return
name|hostKeys
return|;
block|}
block|}
end_class

end_unit

