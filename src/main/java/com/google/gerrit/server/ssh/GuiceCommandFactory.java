begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
operator|.
name|SshScopes
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|CommandFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Creates a command implementation by looking up an entry in Guice.  *<p>  * Commands can be registered in Guice through a {@link CommandModule}, using  * the {@link CommandModule#command(String)} binding to connect a String command  * name to a command implementation.  */
end_comment

begin_class
DECL|class|GuiceCommandFactory
class|class
name|GuiceCommandFactory
implements|implements
name|CommandFactory
block|{
DECL|field|commands
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|Command
argument_list|>
argument_list|>
name|commands
decl_stmt|;
DECL|method|GuiceCommandFactory (final Map<String, Provider<Command>> c)
name|GuiceCommandFactory
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Provider
argument_list|<
name|Command
argument_list|>
argument_list|>
name|c
parameter_list|)
block|{
name|commands
operator|=
name|c
expr_stmt|;
block|}
DECL|method|createCommand (final String commandLine)
specifier|public
name|Command
name|createCommand
parameter_list|(
specifier|final
name|String
name|commandLine
parameter_list|)
block|{
return|return
operator|new
name|BaseCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|sp1
init|=
name|commandLine
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|String
name|cmd
decl_stmt|,
name|args
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|sp1
condition|)
block|{
name|cmd
operator|=
name|commandLine
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sp1
argument_list|)
expr_stmt|;
name|args
operator|=
name|commandLine
operator|.
name|substring
argument_list|(
name|sp1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
name|commandLine
expr_stmt|;
name|args
operator|=
literal|""
expr_stmt|;
block|}
comment|// Support newer-style "git receive-pack" requests by converting
comment|// to the older-style "git-receive-pack".
comment|//
if|if
condition|(
literal|"git"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"gerrit"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|cmd
operator|+=
literal|"-"
expr_stmt|;
specifier|final
name|int
name|sp2
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|sp2
condition|)
block|{
name|cmd
operator|+=
name|args
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sp2
argument_list|)
expr_stmt|;
name|args
operator|=
name|args
operator|.
name|substring
argument_list|(
name|sp2
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|+=
name|args
expr_stmt|;
name|args
operator|=
literal|""
expr_stmt|;
block|}
block|}
specifier|final
name|Provider
argument_list|<
name|Command
argument_list|>
name|p
init|=
name|commands
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Context
name|old
init|=
name|SshScopes
operator|.
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|SshScopes
operator|.
name|current
operator|.
name|set
argument_list|(
operator|new
name|Context
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Command
name|c
init|=
name|p
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|AbstractCommand
condition|)
block|{
operator|(
operator|(
name|AbstractCommand
operator|)
name|c
operator|)
operator|.
name|setCommandLine
argument_list|(
name|cmd
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|delegateTo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SshScopes
operator|.
name|current
operator|.
name|set
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|String
name|msg
init|=
literal|"gerrit: "
operator|+
name|cmd
operator|+
literal|": not found\n"
decl_stmt|;
name|err
operator|.
name|write
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|exit
operator|.
name|onExit
argument_list|(
literal|127
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

